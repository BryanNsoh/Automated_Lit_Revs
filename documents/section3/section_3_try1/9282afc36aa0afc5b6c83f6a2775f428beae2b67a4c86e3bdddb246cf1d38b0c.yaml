- analysis: '>'
  authors:
  - Suleman D.
  - Shibl R.
  - Ansari K.
  citation_count: '1'
  description: Networking protocols have undergone significant developments and adaptations
    to cater for unique communication needs within the IoT paradigm. However, meeting
    these requirements in the context of vehicle-to-infrastructure (V2I) communications
    becomes a multidimensional problem due to factors like high mobility, intermittent
    connectivity, rapidly changing topologies, and an increased number of nodes. Thus,
    examining these protocols based on their characteristics and comparative analyses
    from the literature has shown that there is still room for improvement, particularly
    in ensuring efficiency in V2I interactions. This study aims to investigate the
    most viable network protocols for V2I communications, focusing on ensuring data
    quality (DQ) across the first three layers of the IoT protocol stack. This presents
    an improved understanding of the performance of network protocols in V2I communication.
    The findings of this paper showed that although each protocol offers unique strengths
    when evaluated against the identified dimensions of DQ, a cross-layer protocol
    fusion may be necessary to meet specific DQ dimensions. With the complexities
    and specific demands of V2I communications, it’s clear that no single protocol
    from our tri-layered perspective can solely fulfil all IP-based communication
    requirements given that the V2I communication landscape is teeming with heterogeneity,
    where a mixture of protocols is required to address unique communication demands.
  doi: 10.3390/smartcities6050121
  full_citation: '>'
  full_text: '>

    "This website uses cookies We use cookies to personalise content and ads, to provide
    social media features and to analyse our traffic. We also share information about
    your use of our site with our social media, advertising and analytics partners
    who may combine it with other information that you’ve provided to them or that
    they’ve collected from your use of their services. Consent Selection Necessary
    Preferences Statistics Marketing Show details                Deny Allow selection
    Allow all   Journals Topics Information Author Services Initiatives About Sign
    In / Sign Up Submit   Search for Articles: Smart Cities All Article Types Advanced   Journals
    Smart Cities Volume 6 Issue 5 10.3390/smartcities6050121 Submit to this Journal
    Review for this Journal Propose a Special Issue Article Menu Academic Editor Pierluigi
    Siano Subscribe SciFeed Recommended Articles Author Biographies Related Info Link
    More by Authors Links Article Views 1434 Citations 1 Table of Contents Abstract
    Introduction Data Quality and Related Dimensions Overview of Network Protocols
    Survey of Network Protocols Methodology Findings and Discussion Conclusions Author
    Contributions Funding Data Availability Statement Conflicts of Interest Abbreviations
    References share Share announcement Help format_quote Cite question_answer Discuss
    in SciProfiles thumb_up Endorse textsms Comment first_page settings Order Article
    Reprints Open AccessReview Investigation of Data Quality Assurance across IoT
    Protocol Stack for V2I Interactions by Danladi Suleman 1, Rania Shibl 1,* and
    Keyvan Ansari 2 1 School of Science, Technology and Engineering, University of
    the Sunshine Coast, UniSC Moreton Bay, Petrie, QLD 4502, Australia 2 School of
    Information Technology, Murdoch University, Murdoch, WA 6150, Australia * Author
    to whom correspondence should be addressed. Smart Cities 2023, 6(5), 2680-2705;
    https://doi.org/10.3390/smartcities6050121 Submission received: 12 August 2023
    / Revised: 25 September 2023 / Accepted: 27 September 2023 / Published: 6 October
    2023 Download keyboard_arrow_down     Browse Figures Versions Notes Abstract Networking
    protocols have undergone significant developments and adaptations to cater for
    unique communication needs within the IoT paradigm. However, meeting these requirements
    in the context of vehicle-to-infrastructure (V2I) communications becomes a multidimensional
    problem due to factors like high mobility, intermittent connectivity, rapidly
    changing topologies, and an increased number of nodes. Thus, examining these protocols
    based on their characteristics and comparative analyses from the literature has
    shown that there is still room for improvement, particularly in ensuring efficiency
    in V2I interactions. This study aims to investigate the most viable network protocols
    for V2I communications, focusing on ensuring data quality (DQ) across the first
    three layers of the IoT protocol stack. This presents an improved understanding
    of the performance of network protocols in V2I communication. The findings of
    this paper showed that although each protocol offers unique strengths when evaluated
    against the identified dimensions of DQ, a cross-layer protocol fusion may be
    necessary to meet specific DQ dimensions. With the complexities and specific demands
    of V2I communications, it’s clear that no single protocol from our tri-layered
    perspective can solely fulfil all IP-based communication requirements given that
    the V2I communication landscape is teeming with heterogeneity, where a mixture
    of protocols is required to address unique communication demands. Keywords: data
    quality; IoT protocols; IP communication; V2I 1. Introduction Smart cities have
    continued to grow worldwide, giving rise to various innovations such as smart
    agriculture, smart buildings, smart health, and smart transportation. At the core
    of this growth is the Internet of Things (IoT) [1,2,3]. The shift to ubiquitous
    computing has led to the interconnection of smart and embedded devices, resulting
    in the generation of substantial amounts of data, aka “big data” [4]. The continuous
    increase in IoT-generated data underscores the critical importance of data quality
    (DQ) [5]. The success of this IoT paradigm shift relies heavily on DQ guarantees
    [6]. However, ensuring DQ under the current big data collection and transmission
    methods of IoT networks becomes a challenge for various applications. The multifaceted
    nature of big data, characterised by the five Vs, volume, velocity, variety, veracity,
    and value, are some of the constraints faced in ensuring data quality [7]. These
    complexities demand the adoption of meticulous data quality management methodologies
    encompassing comprehensive validation, cleaning, and integration techniques for
    big data applications in various smart city segments. DQ is essential across various
    domains of smart cities, including the cooperative intelligent transportation
    system (C-ITS), which is defined by its interactive components, facilitating various
    communications crucial for its operation. These components include communication
    between Vehicle-to-Vehicle (V2V), Vehicle-to-Infrastructure (V2I), Vehicle-to-Network
    (V2N) and Vehicle-to-Pedestrian (V2P). The integration of communication technologies
    into transportation has ushered in a transformative transference from autonomous
    systems to cooperative ones, which is an integral aspect of smart cities requiring
    high DQ for efficiency and effectiveness. Communications between these components
    of C-ITS are reliant on several protocols to transmit data between nodes, and
    hence, the need to ensure DQ within each of the protocols is paramount. Over the
    past three decades, network protocols have defined and maintained principles of
    data communications and provided foundational protection for data transmission
    [8]. With the emergence of IoT, network protocols have experienced an evolution
    due to the dynamic and constrained nature of IoT devices and networks. Such characteristics
    pose a major challenge, as identified by Shang et al. [9], in integrating the
    existing Transmission Control Protocol/Internet Protocol (TCP/IP) [10] in IoT
    networks. Despite these challenges, IoT supports interoperability with the TCP/IP
    protocol stack, which, however, faces some drawbacks such as throughput, link
    delay, and energy consumption—are metrics that the current TCP/IP protocol stack
    struggles to meet in IoT applications. Furthermore, without optimisation, the
    TCP/IP protocol stack is inadequate for IoT communications within the cloud and
    distributed computing services [11]. To mitigate these challenges, suitable and
    lightweight IoT protocols have been revealed in the literature as fixable alternatives
    for constrained devices [12]. These advancements have led to the application of
    IoT in transportation to increase road safety and enhance cooperative driving
    and traffic management [13]. However, vehicular communications must be precise,
    which requires advanced embedded DQ measures to achieve efficiency, safety, and
    sustainability. Some protocols in the TCP/IP protocol stack do not meet specific
    criteria, such as ensuring the dimensions of DQ for vehicular communications.
    For example, certain protocols lack agility, while others are unreliable or vulnerable
    to cyber-attacks, which impedes the accurate flow of data in vehicular communications.
    Vehicular communication networks are still an active area of research [14,15],
    although several technologies have emerged to support C-ITS. V2I, specifically,
    is an integral part of vehicular communication technologies that promises to optimise
    the efficiency of transportation systems. V2I communications span a wide range
    of applications, including safety and non-safety related. V2I safety applications
    include collision warning, emergency vehicle priority, driver assistance and road
    hazards warming, and speed and intersection warning messages, all aimed at preventing
    road crashes and enhancing mobility [16]. Meanwhile, non-safety applications focus
    on traffic efficiency and optimisation, remote vehicle diagnostics, air pollution
    monitoring and onboard infotainment [17]. These diverse arrays of applications
    stem from various components, technologies and data types involved in the interconnected
    V2I ecosystems. These applications are facilitated using Dedicated Short Range
    Communication (DSRC) [18] and Cellular-Vehicle-to-Everything C-V2X technologies
    [19]. The DSRC and C-V2X technologies establish a communication link between Onboard
    Units (OBU) and Roadside Units (RSU) [20]. An OBU, which is mounted on vehicles,
    allows communication with other OBUs and RUSs [21]. RSUs are part of the infrastructure
    which are strategically positioned along road networks to serve as communication
    nodes or access points for exchanging vital information with trusted authorities
    for traffic management [22]. Collectively, this ecosystem exchanges data for time-critical,
    urban planning, and infotainment use cases with the aim of revolutionising and
    redefining road transportation to improve road safety, comfort, and efficiency.
    Figure 1 shows the V2I communications landscape. Figure 1. Heterogeneous V2I communications.
    The success of the V2I communications ecosystem hinges heavily on the quality
    of data being exchanged and, hence, the importance of assuring DQ in V2I interactions.
    Vehicular communication has a plethora of use cases, and some of these use cases
    have a unique and customised protocol stack. Some use cases in V2I communications
    are time-sensitive or time-critical. Delayed or incomplete data can result in
    vehicles receiving inaccurate information, potentially leading to catastrophic
    outcomes. Therefore, ensuring DQ in V2I communication scenarios is of paramount
    importance. This research aims to investigate the most viable IoT protocols for
    V2I communications, ensuring DQ across the application, transport, and Internet
    layers. This research makes the following contributions: Presents an unconventional
    viewpoint on the IoT protocol stack, underscoring the drawbacks of depending solely
    on a single protocol/layered approach for ensuring reliable data transmission
    within IoT applications. Provides a support framework with a focus on DQ for identifying
    and selecting suitable IoT protocol stack for a specific use case requiring efficient
    data transmission within the V2I ecosystem and IoT applications in general. Presents
    a structured way of organising and customising the IoT protocol stack, making
    it easier to pinpoint areas for adaptation and optimisation. The rest of the paper
    is structured as follows. Section 2 presents a summary of data quality and related
    dimensions. An overview of network protocols is presented in Section 3. Section
    4 presents a survey of the IoT protocol stack. Section 5 presents the research
    methodology. Section 6 presents findings and discussion. The conclusion is presented
    in Section 7. 2. Data Quality and Related Dimensions There is no universally established
    definition for DQ since the concept is subjective to the user, the domain, and
    the context of the use case [23]. Thus, providing DQ continues to pose a challenge
    for developing and deploying the various components of smart cities [24,25,26].
    Due to constant changes in big data characteristics [7,27,28], the demand for
    DQ continues to change. In the context of C-ITS, we define DQ dimensions as data
    characteristics that assess the suitability of data for a specific use case. 2.1.
    Accuracy We define accuracy as the precision and correctness of data while it
    is being transmitted from source to destination. The primary objective is to maintain
    the precision and integrity of data during transmission, preventing any loss,
    errors, or compromise. Localisation accuracy is an example of a use case to support
    automated driving systems [29]. Another use case example can be seen in a real-time
    map update using an MQTT network proposed by Szántó et al. [30] to accurately
    support trajectory planning. 2.2. Availability Availability refers to the continuous
    and uninterrupted data flow between systems or devices in real-time. It ensures
    that data remains readily available and immediately accessible after transmission,
    free of interruptions, delay, or loss. A typical use-case example within V2I is
    incident detection and reporting. As observed by Bhatti et al. [31], inefficient
    accident detection and reporting systems have resulted in an increase in the number
    of fatalities from auto crashes. The authors proposed an accident detection and
    reporting system (ADRS) using Wi-Fi or 3G/4G to transmit and report vehicle telemetry
    data from a crash site to an emergency response unit and a nearby hospital. 2.3.
    Completeness Completeness refers to the extent to which all relevant and necessary
    data elements are included and conveyed in data exchange. It guarantees that no
    critical information is lost on transmission, enabling a comprehensive comprehension
    of the transmitted data for effective use. Completeness is an important characteristic
    of DQ and one of the essential DQ dimensions. For data to be considered complete,
    it must meet the requirements of its intended application. Completeness impacts
    other DQ dimensions, including accuracy, consistency, and timeliness [32]. Kaneyasu
    et al. [33] proposed a transmission control mechanism that considers data completeness
    of large Spatial-temporal data. (STD). In their scheme, each node keeps accounts
    of received packet statuses and dispatches the information only when all packets
    have been accounted for, thereby minimising2 unnecessary transmission and optimising
    wireless bandwidth. STD combines geographical locations and timestamps to provide
    insights. It is worth noting that there is a plethora of applications in V2I interactions,
    ranging from traffic management applications to location-based services. 2.4.
    Confidentiality Confidentiality pertains to safeguarding privacy and preventing
    unauthorised access to sensitive data during transmission. It ensures that sensitive
    or private information remains protected and inaccessible to unauthorised entities.
    A secure and reliable routing approach for mobile networks was proposed by Bhalaji
    [34], using cryptography and the Euclidean Distance formula for confidentiality,
    reliability, and integrity in data transmission. 2.5. Consistency Refers to preserving
    coherence and uniformity of data throughout the data circle. It involves maintaining
    data integrity, a consistent format, meaning, and structure during transmission
    between sending and receiving nodes. Consistency is crucial for accurate interpretation
    and reliable utilisation by intended recipients. A beneficial use-case example
    in V2I is a beacon message broadcasting where homogeneity in broadcast messages
    is essential to relay important/emergency communications. As observed by Liu et
    al. [35], spatial consistency is fundamental in supporting the targeting and effective
    distribution of beacon messages to vehicles within the proximity of infrastructure
    elements, ensuring seamless communication in V2I scenarios. 2.6. Data Integrity
    Refers to the assurance that data remains unaltered, complete, and reliable throughout
    its transmission process. It ensures that data is not tampered with, modified,
    or corrupted during its exchange, maintaining its accuracy and trustworthiness.
    Integrity is measured using data conformity to defined protocols, information
    assurance principles, and standards [36]. Gopinath, Vinoth, and Jaya [37] proposed
    a protocol to support data integrity, using location integrity and multicasting
    to secure data transmission. 2.7. Reliability Pertains to the dependability and
    consistency of data in transmission. It focuses on ensuring that data is delivered
    accurately and consistently without loss, errors, or disruptions. Ensuring packet
    delivery reliability depends on multiple factors. The utilisation of a retransmission-based
    recovery mechanism and packet loss awareness leads to congestion and routing failure
    awareness protocols to guarantee packet reception [38]. These reliability-centric
    initiatives in protocol communications are pivotal in achieving accurate and effective
    data transmission, contributing to overall performance and reliability in V2I
    interactions and communication networks in general. 2.8. Timeliness Timeliness
    refers to the prompt and timely delivery of data within a specified time, ensuring
    its relevance and currency for the intended use. Timeliness underscores the significance
    of transmitting and receiving data within predefined time boundaries, catering
    to the demands of real-time or time-sensitive applications. Timeliness measures
    the currency of data. That is when data was generated and arrived at the destination
    [39]. The timeliness dimension has received a lot of attention in IoT protocol
    research and is one of the most important dimensions in V2I interactions to facilitate
    communications for various use cases, such as emergency warning messages, pedestrian
    safety messages and traffic signal pre-emption, which are safety-critical V2I
    communications. 2.9. Traceability Traceability refers to accurately documenting
    and tracking the provenance of data from source to destination [40]. It involves
    capturing and maintaining a comprehensive audit that identifies data sources,
    including the entities that have accessed or modified the data and the timestamps
    of these activities. Integrating traceability in a system will offer better security
    management, safety management, better response to crises, and overall strengthen
    the performance and coordination of the system [41]. The traceability dimension
    will benefit V2I use case examples like Pseudonym resolution [42,43]. 2.10. Validity
    Validity refers to the quality and trustworthiness of transmitted data. It ensures
    that data is legitimate, accurate, and conforms to predefined criteria, standards,
    or specifications. Various methods determine data validity, including accuracy,
    timeliness, and usability [44]. In addition, validity assesses the fitness of
    data for the desired purpose. 3. Overview of Network Protocols Technological advancements
    and evolution in various IoT applications have spurred the development of various
    lightweight protocols and adaptation of some of the existing TCP/IP protocol stack
    to improve communication in IoT networks [9]. Several studies have addressed shortcomings
    of the conventional TCP/IP protocol stack in fulfilling the fast-paced real-time
    data transmission requirements of vehicular communications [45,46]. In addition,
    the TCP/IP protocol stack was originally designed for best-effort delivery of
    packets across the internet and does not support a fine-grained Quality of Service
    (QoS) coveted in IoT networks. The TCP/IP protocol stack faces significant challenges
    in effectively interfacing with cloud computing and distributed computing services
    without adaptation [11], which is critical for managing the enormous amounts of
    data generated by vehicular networks. In contrast, IoT protocols have demonstrated
    exceptional performance in seamlessly integrating with cloud services and have
    demonstrated compatibility with heterogeneous protocols [47]. This section provides
    an overview of the existing structures of the TCP/IP protocol stack and the new
    IoT protocol stack, solely focusing on the application, transport, and Internet
    layers. The network access layer (Data Link and Physical layers) can operate efficiently
    irrespective of the underlying technologies deployed at the layers above [48].
    Figure 2 Shows the IoT protocol stack. Figure 2. IoT Protocol Stack. 3.1. Application
    Layer The application layer sits at the top of the communication protocol suite,
    irrespective of the prevailing network environment or conditions. It is an abstract
    layer that contains a combination of protocols to facilitate and define how applications
    communicate with others. In addition, these protocols specify how data is formatted,
    transmitted, and received. Hypertext transfer protocol (HTTP), File Transfer Protocol
    (FTP), Simple Mail Transfer Protocol (SMTP), and Domain Name Server (DNS) are
    some of the most popular TCP/IP application protocols. Most TCP/IP application
    protocols operate on a client-server model, in which a client device sends a request
    to the server, and the server acknowledges and responds with the required information
    [49]. This method works well with a typical client-server architecture. Meanwhile,
    the demands for real-time communication in the IoT domain require more efficient
    application protocols. Constrained Application Protocol (CoAP), Message Queuing
    Telemetry Transport (MQTT), Advanced Message Queuing Protocol (AMQP), Extensible
    Messaging, Presence Protocol (XMPP), Data Distribution Service (DDS), and WebSocket
    have been developed and upscaled to address these fast-paced communications in
    IoT applications by providing publish-subscribe or request-reply communication
    architecture which can reduce latency and provide communication improvements in
    IoT systems [50]. Some of these IoT protocols support different QoS, ensuring
    that communication in the IoT environment receives the necessary performance level
    to meet operational requirements, including interoperability and scalability.
    3.1.1. Constrained Application Protocol CoAP is a lightweight protocol apt for
    the ever-increasing Machine-to-Machine (M2M) communications in resource-constrained
    environments [51]. Supporting specific features suitable for V2I communication,
    this protocol implements a request-response architecture between application endpoints,
    which supports QoS that ensures reliable transmissions, simple congestion control,
    and flow control. In addition, CoAP underpins asynchronous message exchange and
    offers a built-in discovery of services and resources. Furthermore, the protocol
    implements an optional subscription mechanism for resource observation. The CoAP
    protocol operates a client-server model like TCP and relies on UDP as the underlying
    transport protocol, establishing a robust connection that ensures reliable communication
    even in dynamic and intermittent connected environments, such as those with high-speed
    connectivity and rapidly changing topologies. CoAP’s compatibility with mobility
    management [52] further enhances its capability to handle high mobility-related
    and handover challenges. Refer to Figure 3 for CoAP architecture. Figure 3. CoAP
    architecture. 3.1.2. The Message Queuing Telemetry Transport MQTT is a lightweight
    protocol designed and used in a plethora of IoT applications and M2M communications
    [53], utilising the publish/subscribe architecture, which is well-suitable for
    remote connections with limited network bandwidth and system resources. This model
    facilitates efficient data dissemination techniques. Its ability to process massive
    volumes of data concurrently while consuming little bandwidth becomes an asset
    in V2I communications, where real-time, widespread information sharing is critical.
    Furthermore, MQTT’s QoS levels ensure message delivery, which is critical in the
    context of traffic safety and infrastructure coordination. The protocol supports
    scalability, which aligns well with the requirements of the V2I environment that
    necessitates efficient and dynamic connectivity between a multitude of clients
    and a central broker. The broker plays an integral role in the MQTT network, effectively
    managing a catalogue of topics, e.g., traffic information and weather conditions,
    that function akin to communication channels. These topics facilitate the publishing
    and subscription of messages, thereby orchestrating the flow of information within
    the V2I domain. Specifically, when a client publishes a message on a given topic,
    the broker ensures this message reaches all clients subscribed to that specific
    topic. The multi-topic subscription capability of MQTT [54] provides clients with
    the advantage of receiving messages from diverse sources, enhancing the scope
    and versatility of information dissemination within the context of V2I. Refer
    to Figure 4 for MQTT architecture. Figure 4. MQTT architecture. 3.1.3. Data Distribution
    Service DDS protocol is a communication standard designed for messaging and data-centric
    exchange in distributed systems, and the protocol dynamically discovers a new
    node within a network architecture such as Vehicular Ad Hoc Network (VANET) and
    Mobile Ad Hoc Network (MANET) [55]. DDS uses the publish-subscribe architecture,
    allowing publishers to disseminate data to multiple subscribers asynchronously
    and in a decoupled manner. DDS is characterised by its support for real-time and
    high-performance communication, achieved using a decentralised architecture with
    a focus on data-centric principles. In the context of V2I applications, supporting
    high data rates and low latency requirements, enabling a single node to subscribe
    and receive information from multiple sources bi-directionally, facilitating effective
    communication. In addition, DDS is a highly functional middleware that is suitable
    for a multitude of V2I communication that supports efficient distributed communication.
    This protocol’s inherent features, such as its reliable communication, scalability,
    interoperability, and flexible configuration of various QoS settings, make it
    a suitable option for V2I applications. Refer to Figure 5 for DDS architecture.
    Figure 5. DDS architecture. 3.1.4. Extensible Messaging and Presence Protocol
    XMPP is an XML-based protocol designed for real-time, extensible communications.
    Originally designed for communication on the internet with ample resources, XMPP
    has now found relevance in the field of IoT applications owing to its distinctive
    attributes [56]. The protocol’s decentralised architecture promotes heterogeneous
    and federated communication by facilitating seamless communication between servers
    and clients. XMPP also support the publish-subscribe communication model, facilitating
    the simultaneous broadcasting of messages to multiple nodes [57]. The extensibility
    and decentralised characteristics present distinct advantages in V2I communication,
    enabling the management of diverse communication services, including real-time
    traffic monitoring, as noted by Hayes and Omar [58]. XMPP could enable immediate
    communication of safety alerts or evacuation instructions from central control
    units to all vehicles in a specific geographic location. The flexibility of XMPP
    also supports the potential for future expansions or adaptations as the requirements
    of the V2I communication system evolve. Refer to Figure 6 for XMPP architecture.
    Figure 6. XMPP architecture. 3.1.5. Advanced Message Queuing Protocol AMQP is
    an open-standard application layer protocol designed and tailored to support communication
    in a distributed environment [59]. AMQP supports various messaging models such
    as point-to-point, publish-and-subscribe, and request-reply, providing flexibility
    in designing distributed systems and enabling effective message-based communication.
    The core feature of AMQP is the guaranteed delivery of messages with its store-and-forward
    feature that ensures reliability [60]. This utilitarian feature is paramount in
    a V2I communication environment where real-time messages are important for the
    successful operation of the entire system. Refer to Figure 7 for AMQP architecture.
    Figure 7. AMQP architecture. 3.1.6. HTTP REST Representational State Transfer
    (REST), often referred to as HTTP REST, is an architectural-style protocol widely
    employed in web development [61]. It adheres to the principle of statelessness,
    where every HTTP request includes all the essential information needed to comprehend
    and handle the request. REST employs GET, POST, PUT, and DELETE methods for various
    operations. This protocol is well suited for scenarios where a vehicle node periodically
    requests information from a server or sends occasional updates. Hireche, Dennai,
    and Kadri [62] present a GET method to disseminate and visualise real-time traffic
    data over REST vehicle web service. This architecture is characterised using clear
    client-server segregation, with the client handling the user interface and experience
    and the server managing data [63]. Refer to Figure 8 HTTP REST Architecture. Figure
    8. HTTP REST Architecture. 3.1.7. WebSocket Established by the Internet Engineering
    Task Force (IETF) in 2011, WebSocket facilitates continued full-duplex communication
    over a single TCP connection. Initially designed for web servers and web browsers,
    WebSocket has gained increasing popularity in IoT applications [64,65]. Contrasting
    HTTP’s request-response model, WebSocket supports both the request-respond and
    publish-subscribe model using real-time data transfer, thus enabling servers to
    provide continuous updates to clients via an ongoing WebSocket connection. This
    dynamic capability is particularly important in IoT applications and is integral
    for V2I applications requiring sustained data exchange for real-time analytics
    and decisions. The real-time data transfer capability of WebSocket is particularly
    valuable in V2I use cases requiring bi-directional communications and interaction
    between vehicles and infrastructural elements like roadside units or traffic control
    centres [66]. For instance, WebSocket is suitable for facilitating instantaneous
    relay of traffic light status to oncoming vehicles, enabling them to adjust their
    speed or plan alternate routes, thereby improving traffic efficiency and safety.
    Refer to Figure 9a for publish and subscribe architecture, Figure 9b for request
    and respond architecture, and Table 1 for the characteristics of application layer
    protocols. Figure 9. (a) WebSocket Req/Res Architecture, (b) WebSocket pub/Sub
    Architecture. Table 1. Characteristics of application layer protocols. 3.2. Transport
    Layer The Transport Layer plays a crucial role in ensuring the successful delivery
    of data packets to the destination. The Transmission Control Protocol (TCP) and
    User Datagram Protocol (UDP) are the two traditional transport protocols. TCP
    is a reliable, connection-oriented protocol that guarantees the delivery of data
    packets to the intended destination. It is a heavyweight protocol with high packet
    overhead. Conversely, UDP is a connectionless protocol that lacks reliability
    in data transmission. While UDP does not provide guaranteed packet delivery, it
    is known for its speed and is used for applications that can tolerate packet loss
    during transmission. With the introduction of innovative transport protocols like
    SCTP [67], DCCP [68], and QUIC [69], the transport layer has attracted significant
    research interest. Additionally, there have been efforts focused on the performance
    optimisation of traditional transport protocols [70] as well as congestion and
    error control [71]. The development of new protocols and upscaling of the traditional
    transport layer protocols are crucial in enabling reliable and efficient communication
    in the rapidly evolving IoT paradigm. 3.2.1. Datagram Congestion Control Protocol
    In 2006, DCCP [68] was standardised by IETF to support applications that require
    timely delivery of data packets, an inherent feature of UDP, also benefiting from
    the congestion control mechanisms of TCP. DCCP aims to reduce network congestion
    while enabling speedy data transfer between nodes. It achieves this by offering
    an unreliable flow of datagrams with congestion control mechanisms in place. DCCP
    is specifically designed to cater to applications like streaming media, online
    multiplayer games, and Voice over IP (VoIP) services. These applications can tolerate
    certain data loss but are sensitive to delays, making them suitable for application
    in IoT communication. 3.2.2. Steam Control Transmission Protocol SCTP was initially
    designed for VoIP and telephony services and standardised in 2007; SCTP is a transport
    layer protocol developed to address limitations inherent in TCP and UDP [72].
    It is distinguished by its multi-streaming and multi-homing capabilities, along
    with the capability to support multiple IP addresses per association. Consequently,
    these unique facets have propelled the expansion of SCTP into a wider array of
    applications, augmenting its significance and relevance in the IoT communication
    landscapes [73]. 3.2.3. Quick UDP Internet Connection The QUIC protocol was developed
    by Google in 2013 specifically to enhance the efficiency and effectiveness of
    web applications [74]. QUIC is a purpose-built protocol that prioritises low-latency
    and secure data transfer across a network. It achieves this objective by leveraging
    UDP as its underlying transport protocol and features similar techniques, such
    as connectionless communication and header compression. QUIC integrates various
    functionalities, including encryption, multiplexing, and connection migration,
    to enhance the efficiency, reliability, and security of data transfer. Its effectiveness
    in reducing latency and enhancing the overall user experience has garnered significant
    attention, especially in applications that necessitate real-time communication
    and low-latency transmission. In addition, QUIC boasts advanced congestion control
    mechanisms and rapid packet loss recovery techniques, contributing to optimised
    network performance [75]. These unique functionalities maintain and preserve connection
    continuity during hand-off, making the protocol particularly desirable in the
    V2I communication landscape. 3.3. Internet Layer The Internet layer, often referred
    to as the network layer, plays a pivotal role in the TCP/IP protocol stack. The
    Internet Protocol (IP) holds paramount significance at this layer. The layer’s
    fundamental role entails facilitating the transmission and reception of data packets
    across interconnected networks, encompassing tasks such as packet forwarding,
    logical addressing, routing and error handling. Unlike connection-oriented protocols,
    the IP protocol operates in a connectionless manner, foregoing the use of acknowledgements
    or connection establishment. These responsibilities are delegated to the protocols
    situated above and below its layer. Consequently, the IP protocol is sometimes
    perceived as lacking reliability on its own [48]. Nevertheless, the IP protocol
    remains indispensable in today’s communication landscape, particularly considering
    the proliferation of networked devices. The surge in Internet connectivity and
    IoT deployments has impacted the availability of Internet Protocol version 4 (IPv4)
    addressing schemes. As a result, IPv4 has exhausted its available addresses for
    internet nodes. To mitigate this issue, the IETF has introduced a new version,
    Internet Protocol Version 6 (IPv6) [76]. In addition to the introduction of IPv6
    as a solution for addressing the shortage, several protocols have been developed
    to support efficient communication in constrained networks. IPv6 over Low-Power
    Wireless Personal Area Networks (6LowPAN), Routing Protocol for Low-Power, and
    Lossy Networks (RPL) are notable protocols in IoT’s Internet layer to support
    efficient transmission and routing in a resource-constrained environment, respectively.
    3.3.1. Low-Power Wireless Personal Area Networks 6LowPAN is an IETF standard facilitating
    the integration of low-power devices into the IoT communication paradigm by transmitting
    IPv6 packets over low-power wireless networks [77]. Providing support to address
    the challenges posed by resource-constrained devices by employing efficient packet
    and header compression techniques, effectively reducing overhead [78]. In addition,
    IPv6 incorporates adaptation and fragmentation mechanisms to handle packet loss
    and variable link quality in low-power nodes. By optimising data transmission
    and network efficiency, 6LowPAN facilitates the seamless integration of IoT devices
    with limited resources into the larger IPv6-based network infrastructures. 6LowPan
    is easily adaptable to an increase in the number of nodes in a network, making
    it a suitable, easy choice for V2I communications. 3.3.2. Routing Protocol for
    Low-Power and Lossy Networks RPL is a distance-vector routing protocol designed
    specifically for low-power and lossy networks (LLNs) to support efficient packet
    routing and reliable paths from source to destination. It is one of the initiatives
    observed by the IETF to solve the unique communication needs of LLNs. These networks
    have a unique set of characteristics, including a limited power supply (often
    battery-powered), high loss rates, low data rates, and a large number of devices.
    [79,80]. LLNs are typically used in sensor networks, smart transportation, smart
    grid, home and building automation, industrial monitoring, and a host IoT application.
    4. Survey of Network Protocols The computing limitations of IoT devices have received
    extensive attention from academia and industry. These efforts have resulted in
    the development of several lightweight protocols to compensate for the constrained
    nature of IoT devices [81]. As a result, several application layer protocols have
    been developed to support communication in IoT networks, each with a unique and
    problem-specific communication solution. Various studies have employed a range
    of methodologies, including experiments [82,83], simulations [84], and testbed
    implementation [85], to compare the performance of various protocols. These evaluations
    used several performance metrics such as bandwidth consumption, efficiency, energy
    consumption, latency, reliability, Round Trip Time (RTT), upload and download
    time, average response time, and throughput. With these metrics, more emphasis
    has been placed on investigating timeliness in the IoT application layer. Mijovic,
    Shehu, and Buratti [81] performed an experiment by comparing the performance of
    three application layer protocols, CoAP, WebSocket, and MQTT, using different
    Internet connections. Protocol efficiency and RTT were the measured metrics. Their
    experiment showed that CoAP achieved the highest protocol efficiency and the lowest
    average RTT, closely followed by WebSocket. The performance of MQTT depended on
    QoS profiles. QoS1 generally achieved better RTT. Another set of comparisons was
    conducted via an experiment by Tandale, Momin, and Seetharam [82]. They measured
    the performance metrics of CoAP, MQTT, and REST HTTP using time and bandwidth
    consumption on a 4G cellular network with a speed of 6 Mbps and an Internet broadband
    connection with a speed of 50 Mbps. Their results showed that CoAP is faster among
    the protocols when transmitting payloads less than 10 kb. MQTT and CoAP outperformed
    REST HTTP when sending smaller payloads. With larger payloads, REST HTTP became
    the faster protocol. Additionally, the experiment showed bandwidth consumption
    is equally reduced in CoAP and MQTT when transmitting smaller payloads. With an
    increase in Payloads, REST HTTP consumed less bandwidth. Assessing these protocols
    over a 4G cellular network is favourable for CoAP and MQTT in V2I communications
    use cases requiring the broadcast of smaller payloads. In Babovic, Protic, and
    Milutinovic [86], the transmission latency and throughput of various sensor data
    sizes and formats were studied using AMQP, DDS, MQTT, and XMPP over the web with
    MQTT outperforming the other protocols in latency. Another experiment was observed
    by Kayal and Perros [87]; their study measured and compared the RTT for different
    loads using CoAP, MQTT, XMPP and WebSocket. CoAP and MQTT showed better response
    times. In another study, Ghotbou and Khansari [88] performed an analytical comparison
    between AMQP, CoAP, DDS, MQTT, MQTT-SN, XMPP, WebSocket, HTTP/1.1, HTTP/2.0, and
    RTP to investigate the most suitable IoT protocol for video transmission over
    LLN. Their comparative analysis showed that CoAP is the most appropriate protocol
    for video transmission due to its associated transport protocol (i.e., UDP), which
    supports best-effort packet delivery. A comparison between CoAP, MQTT, XMPP, and
    AMQP was observed by Sharma and Gondhi [12]; their study revealed that CoAP, AMQP,
    and XMPP ensure reliability by some built-in features. In addition, AMQP and XMPP
    both benefit from the reliability provided by their associated transport protocols,
    e.g., TCP. On the other hand, reliability is provided using the various QoS in
    MQTT. Their research further showed that CoAP, MQTT, and XMPP all support real-time
    communication, while AMQP does not. + A study by Chaudhary, Peddoju, and Kadarla
    [89] compared the performance of AMQP, MQTT, and CoAP and found that MQTT exhibited
    high packet overhead, especially in 3G networks due to QoS requirements. At high
    message volumes, MQTT delivered superior throughput, while CoAP and MQTT (QoS
    1 and 2) maximised bandwidth usage. Furthermore, Gupta [90] conducted a comparative
    study of CoAP, MQTT, WebSocket, XMPP and AMQP to ascertain the most reliable protocol
    using better power usage and latency. CoAP and MQTT performed better when transmitting
    smaller messages, while AMQP and MQTT are in the pole position for QoS reliability,
    and XMPP and AMQP lead in security. Al-Qassab and Aal-Nouman [91] conducted a
    simulation study to compare the most power-efficient protocol for wireless sensor
    networks using CoAP and MQTT-SN. The results showed that CoAP consumed less power.
    Timeliness and reliability have also received much research attention at the application
    layer. While V2I will certainly benefit from this research, more effort is required
    to investigate other factors like security. In the transport layer, TCP and UDP
    are the most prevalent protocols; their limitation in the IoT paradigm has brought
    about the introduction of QUIC, SCTP, and DCCP as promising alternatives. These
    protocols offer improvements in ACK, connection management, and cryptographic
    integration. QUIC shows potential with flexible deployment and promising performance
    [92]. AL-Dhief et al. [93] conducted a study comparing the performance of TCP
    and UDP under varying conditions using simulations to analyse two scenarios: varying
    bandwidth with a fixed packet size and varying packet size with a fixed bandwidth.
    The key metrics used for performance evaluation included end-to-end delay, throughput,
    packet delivery ratio, and packet loss ratio. Their findings indicated that TCP
    consistently outperforms UDP across all metrics in both scenarios, thereby demonstrating
    its greater reliability. Similarly, Wheeb [94] conducted an in-depth comparative
    study of the performance of transport protocols, including UDP, DCCP, SCTP, and
    TFRC (TCP-Friendly rate control), within a wired network environment. Their findings
    indicated that SCTP generally outperformed its counterparts in terms of throughput.
    However, for video streaming, TFRC demonstrated superior performance. This edge
    is attributed to its association with the UDP transport, which provides a TCP-style
    congestion control solution suitable for multimedia and interactive applications
    that demand low-latency and consistent data delivery. Furthermore, DCCP was found
    to have the least end-to-end delay in data traffic transmissions, whereas UDP
    exhibited better performance in video streaming scenarios. The evidence from this
    study suggested that for high throughput and reliable transport requirements,
    SCTP and TFRC could be the optimal choices. In another study, Sahraoui et al.
    [95] conducted a simulation to compare the performance of TCP and UDP for video
    streaming in VANET, examining metrics like throughput, packet delivery ratio,
    end-to-end delay, and Peak Signal-to-Noise Ratio (PSNR). Their results showed
    that UDP offers superior throughput and lower end-to-end delay in comparison to
    TCP due to the absence of congestion control, making it potentially beneficial
    for real-time video streaming despite its relative unreliability. However, TCP’s
    retransmission technique results in a slightly better packet delivery ratio. Park
    and Koh [96] compared the performance of SCTP and TCP using throughput, traffic
    competition, and multi-homing. Their results showed that TCP outperforms SCTP
    with small data sizes, but SCTP surpasses TCP with larger sizes. Both protocols
    compete fairly in traffic handling, and SCTP’s multi-homing offers faster data
    transmission and better throughput compared to its single-homing. Performance
    comparison of modified QUIC (ModQUIC), QUIC, and TCP was carried out by Kharat
    and Kulkarni [97], and ModQUIC produced superior performance both in throughput,
    delay, and loss rate, demonstrating better network performance overall, particularly
    with maximised bandwidth utilisation. In addition, ModQUIC and QUIC outperformed
    TCP in packet loss rate, even in lossy links. Patel, Chatbar, and Shah [98] highlighted
    the performance factors of IPv4 and IPv6. Address space, throughput, security,
    and jitter values were examined, highlighting the advantages of IPv6 over IPv4,
    including efficient routing, simplified configuration, built-in IPsec security,
    and support for new services and mobility. In another study, Sandur and Giri [99]
    compared the performance of 6LoWPAN-CoAP and RPL-CoAP, evaluating average latency
    and Packet Delivery Ratio (PDR). Both protocols saw improved PDR, but RPL-CoAP
    outperformed 6LoWPAN-CoAP in latency. In a similar study, Mahmud et al. [100]
    investigated the pairing of RPL-CoAP and 6LoWPAN-CoAP protocols. Their study showed
    that RPL-CoAP surpassed the 6LoWPAN-CoAP combination in received packets, suggesting
    that the former is a superior option for efficient IoT communication. Table 2
    shows a comparative analysis of IoT protocol from the application, transport,
    and Internet layer in the literature, highlighting performance metrics and the
    best-performing protocols from the analysis. Table 2. Performance evaluation of
    network protocol. 5. Methodology Significant advancements have been made in the
    field of IoT networking concepts due to the extensive array of applications and
    use cases; IoT networking protocols have evolved into a vibrant research area
    influenced by their diverse characteristics [101]. Consequently, considerable
    studies have been dedicated to evaluating and comparing the effectiveness of various
    IoT and related protocols. This study has adopted a simple but effective methodology
    by conducting a literature survey to carefully select publications related to
    networking protocols for constrained devices. To gather pertinent literature within
    this study domain, our literature screening and selection were focused on protocols
    at the application, transport, and Internet layers of the IoT protocol suite.
    The selection process prioritised publications that directly compared the performance
    of different protocols, as these studies provide valuable insights into the strengths
    and weaknesses of each protocol. Additionally, publications that examined the
    fundamental functions and design purposes of the protocols were included in the
    survey. DQ is integral to the success and broad adoption of the IoT paradigm [6].
    Recognising this paramount importance, the second phase of this study focuses
    on identifying the protocols capable of satisfying our study-specific DQ dimensions.
    This was achieved by performing an exhaustive evaluation and analysis of the performances
    of each of the selected protocols [102]. In following this course, we hoped to
    distil the sets of protocols that not only meet but optimally satisfy our study-specific
    DQ dimensions for V2I applications and use cases. To achieve this, we conducted
    a mapping exercise, linking each of the protocols’ design objectives, performance
    evaluations and inherent characteristics to our study-specific DQ dimensions.
    This crucial step was carried out to assess the strengths, suitability, and limitations
    of the protocols and to establish a clear correlation between the capabilities
    of each protocol and their potential to fulfil the communication requirements
    in IP-based V2I interactions, thereby laying the groundwork for a use-case -driving
    approach in V2I. 6. Findings and Discussion 6.1. Mapping Each protocol within
    the protocol suite plays a specific and pivotal role in the overall network performance,
    with combined responsibilities ranging from formatting, managing, routing, forwarding,
    and receiving data packets between nodes. Ensuring communication efficiency in
    a multifaceted V2I communication landscape requires each protocol to perform optimally
    to ensure reliable data transmission across diverse use cases, e.g., beacon message
    broadcasting [103]. It’s imperative to understand the most suitable protocols
    for V2I communications within the context of DQ. In achieving this, mapping the
    protocols to our identified DQ dimensions is essential in identifying: 1. The
    most suitable protocols to deploy in specific use cases. 2. Providing a structured
    way to effectively manage the layered suite to achieve efficiency in data transmission,
    and 3. Making it easier to pinpoint areas for optimisation which leads to an operational
    improvement in the overall performance of the network. This mapping can act as
    a blueprint to support network engineers and managers working on V2I systems in
    deploying IoT devices within traffic infrastructures, providing a useful guide
    in selecting the most suitable protocols based on their identified DQ requirements
    inherent in their specific V2I use-case, such as traffic light managements requiring
    XMPP protocol to communicate traffic light information to upcoming traffic simultaneously,
    the application of MQTT to timely update the availability of parking space in
    a smart parking scenario, the use WebSocket to continually communicate real-time
    traffic information and the use of SCTP to support vehicle infotainments by reliable
    streaming multimedia data. In addition, software developers can also leverage
    this mapping when designing IoT applications, as observed in [104], providing
    them with a detailed understanding of how different protocols may impact their
    application’s performance. Another useful application is that this research can
    provide a support framework for policy formation and standardisation when setting
    guidelines for IoT protocol development and deployments, ensuring that protocols
    are optimised for the IoT paradigm’s diverse and evolving communication demands.
    In a broader sense, this research can stimulate networking communication innovations
    to support V2I communication ecosystems by providing a clear understanding of
    the strengths and weaknesses of various IoT protocols, which could lead to more
    robust and efficient V2I systems, enhancing safety, improving traffic management,
    and ultimately paving the way for fully autonomous driving systems. Refer to Table
    3 for the mapping of DQ dimensions against the various protocols. Table 3. Dimensions
    of DQ against IoT protocols. 6.2. Data Quality Acting as a Complement of Quality
    of Service It is worth noting that this mapping has shown an overlap between DQ
    and QoS with a shared objective of enhancing the performance of networked applications
    and services. These two concepts have shared attributes such as accuracy, availability,
    completeness, reliability, and timeliness [105]. QoS focuses on managing network
    traffic efficiency, resource allocation, and error handling to satisfy expected
    performance for various applications and use cases. Most Application layer protocols
    investigated in this study support QoS with the exception of HTTP REST, XMPP,
    and WebSocket, while at the Transport layer, TCP and SCTP support QoS, and the
    Internet layer supports QoS mechanism by default with the help of Ipv6. However,
    while QoS levels supported at these layers may be sufficient for specific IoT
    applications and use cases, the existing QoS levels and specific configurations
    need further investigation to satisfy the communication standards required in
    some V2I use cases. The focal point of DQ, on the other hand, is “content suitability”,
    which encompasses the assurance that data transmitted via various protocols aligns
    with the expected standards necessary for reliable decision-making processes and
    applications. Within the context of data transmission in IP-based communication
    using the IoT protocol stack, the intersection of QoS and DQ is evident, as mentioned
    earlier. QoS mechanisms available in various layers of the IoT protocol stack,
    depending on the type of protocol deployed, play a pivotal role in maintaining
    and managing the data flow and ensuring end-to-end delivery while supporting various
    DQ dimensions. For instance, prioritisation mechanisms [106,107] enable the delivery
    of time-critical data with high accuracy, meeting accuracy and timeliness dimensions,
    while retransmission mechanisms ensure reliability. The interfacing of these two
    concepts will collectively bolster efficiency and reliability in IP-based V2I
    communications. 6.3. Discussion CoAP and MQTT protocols notably distinguish themselves
    within this multifaceted landscape, largely owing to their broad research base
    and wide deployments. From our in-depth analysis, both protocols satisfactorily
    address five of our specified ten dimensions, including Availability, Completeness,
    Consistency, Data Integrity, and Reliability. The successful adherence to these
    critical DQ dimensions has effectively positioned CoAP and MQTT as the predominant
    protocols in the application layer for V2I communication scenarios. However, their
    prevalence is not a testament that they are the ultimate solution. Rather, it
    indicates the efficacy of these protocols at their domiciled layer. They possess
    a unique characteristic that is beneficial to V2I systems. Nonetheless, acknowledging
    that they can fulfil only five of the ten dimensions effectively either due to
    their design, leveraging the capabilities of their associated transport protocol,
    or other mechanisms infer the importance of employing a variety of other methodologies,
    e.g., cross-layer approach [108,109] to compensate for other dimensions. For example,
    the reliability of data is one of the most coveted dimensions in IoT communications
    and is predominantly supported by layers underneath the application layer, the
    path layers (network and transport layer), and the link layers (data link and
    physical layer) [110]. Protocols such as MQTT and CoAP effectively support reliability
    due to mechanisms present in the protocols [111]. This is a testament to the heterogeneous
    and complex nature of V2I communication, which necessitates a versatile mix of
    protocols for optimal performance. In the transport layer, TCP has always been
    a dominant force. The inherent characteristics of reliability, guaranteed packet
    delivery, and error-checking ensure relevance, which has earned the trust of numerous
    developers. UDP, on the other hand, offers an effortless ‘fire and forget’ transmission
    model which excels in availability due to its connectionless nature and timeliness,
    making it a suitable choice for use cases like Emergency Vehicle Pre-emption [85]
    where low overhead and latency are prioritised. In addition, DCCP mirrors UDP’s
    connectionless architecture but further augments it with a built-in congestion
    control mechanism, making it a promising candidate for streaming media feeds.
    Paralleling the features of UDP, the QUIC protocol offers superior performance
    under various metrics TCP is known for [112], making it a viable choice for a
    plethora of V2I applications. Leveraging the strengths of both TCP and UDP, SCTP
    uniquely combines these traditional protocols to create a distinctive transport
    layer solution. The efficacy of SCTP among its peers in addressing five of our
    DQ dimensions is largely attributed to its inherent multipath, multi-homing, and
    multi-streaming capabilities [113], which can significantly enhance the reliability,
    efficiency, and robustness of V2I communications. The multipath capabilities ensure
    uninterrupted data flow between V2I nodes, even under challenging network conditions.
    This feature is particularly important for real-time traffic management, enabling
    smooth data transmission. The multi-homing feature allows vehicles to maintain
    a sustained connection with multiple infrastructures simultaneously, increasing
    reliability. This is especially beneficial for safety-critical applications like
    collision detection and avoidance. Finally, the multi-streaming capability can
    enable the transfer of diverse data types in separate streams, enhancing data
    delivery efficiency. This capability can significantly improve the performance
    of use cases that involve the exchange of a variety of data, such as traffic information,
    vehicle telemetry, and multimedia data. V2I communications necessitate high availability
    and timely and reliable packet delivery, even under challenging network conditions.
    These are key characteristics the transport layer protocols should effectively
    support that are beneficial to the numerous use cases and are particularly beneficial
    to smart traffic signal coordination [114,115]. Finally, as earlier discussed
    in Section 3, 6LoWPAN is specifically designed to enable IPv6 packets to be transmitted
    while RPL provides routing functionalities for IPv6 packets over constrained networks.
    These protocols underscore their critical role in maintaining robust V2I communication
    by satisfying three critical DQ dimensions: availability, confidentiality and
    reliability. 7. Conclusions Despite the unique capabilities of the various protocols
    within our tri-layered study, there exists a gap in the traceability and validity
    dimensions. Addressing these gaps would involve incorporating additional methodologies,
    such as logging and monitoring systems, data validation rules and implementing
    anomaly detection techniques. Furthermore, adopting a cross-layer fusion approach
    by leveraging the synergy between protocols and layers, such as network conditions
    from the Internet layer, can enhance validity checks in the application layer.
    While all these approaches can potentially improve DQ across all layers, they
    could also lead to potential violations of the existing layered architecture principles.
    Thus, these strategies might introduce trade-offs, such as increased computational
    overhead or system complexity. Hence, achieving an optimal balance between DQ,
    security, system performance and efficiency in a protocol fusion approach is a
    compelling future research direction. Author Contributions Conceptualisation,
    D.S. and K.A.; methodology, D.S.; validation, D.S., K.A., and R.S.; formal analysis,
    D.S.; investigation, D.S.; resources, D.S.; data curation, D.S.; writing—original
    draft preparation, D.S.; writing—review and editing, D.S., K.A., and R.S.; supervision,
    R.S. and K.A. All authors have read and agreed to the published version of the
    manuscript. Funding This research received no external funding. Data Availability
    Statement Not applicable. Conflicts of Interest All authors have declared no conflict
    of interest. Abbreviations 3G Third Generation 4G Fourth Generation 6LowPAN Pv6
    over Low-Power Wireless Personal Area Networks ACK Acknowledgement AMQP Advanced
    Message Queuing Protocol C-ITS Cooperative Intelligent Transportation System C-V2X
    Cellular Vehicle-to-Everything CoAP Constrained Application Protocol DCCP Datagram
    Congestion Control Protocol DDS Data Distribution Service DNS Domain Name Server
    DQ Data Quality DSRC Dedicated Short-range Communication FTP File Transfer Protocol
    GNSS Global Navigation Satellite System. HTTP Hypertext transfer protocol IETF
    Internet Engineering Task Force IoT Internet of things IP Internet Protocol IPv4
    Internet Protocol version 4 IPv6 Internet Protocol version 6 LLNs Low-Power and
    Lossy Networks M2M Machine-to-Machine MANET Mobile Ad Hoc Network ModQUIC Modified
    Quick UDP Internet Connections MQTT Message Queuing Telemetry Transport MQTT-SN
    Message Queuing Telemetry Transport-Sensor Network PDR Packet Delivery Ratio PSNR
    Peak Signal-to-Noise Ratio QoS Quality of services QUIC Quick UDP Internet Connections
    REST Representational State Transfer REST Representational State Transfer RPL
    Routing Protocol for Low-Power and Lossy Networks RTT Round Trip Time SCTP Stream
    Control Transmission Protocol SMTP Simple Mail Transfer Protocol STD Spatial-Temporal
    Data TCP Transmission Control Protocol TCP/IP Transmission Control Protocol/Internet
    Protocol TFRC TCP-Friendly Rate Control UDP User Datagram Protocol V2I Vehicle-to-Infrastructure
    V2V Vehicles-to-Vehicles V2X Vehicle-to-Everything VANET Vehicular Ad Hoc Network
    XMPP Extensible Messaging and Presence Protocol References Ashton, K. That ‘internet
    of things’ thing. RFID J. 2009, 22, 97–114. [Google Scholar] Li, S.; Xu, L.D.;
    Zhao, S. The internet of things: A survey. Inf. Syst. Front. 2015, 17, 243–259.
    [Google Scholar] [CrossRef] Sunyaev, A. The internet of things. In Internet Computing;
    Springer: Cham, Switzerland, 2020; pp. 301–337. [Google Scholar] Sagiroglu, S.;
    Sinanc, D. Big data: A review. In Proceedings of the 2013 International Conference
    on Collaboration Technologies and Systems (CTS), San Diego, CA, USA, 20–24 May
    2013; pp. 42–47. [Google Scholar] Liu, C.; Nitschke, P.; Williams, S.P.; Zowghi,
    D. Data quality and the Internet of Things. Computing 2020, 102, 573–599. [Google
    Scholar] [CrossRef] Karkouch, A.; Mousannif, H.; Al Moatassime, H.; Noel, T. Data
    quality in internet of things: A state-of-the-art survey. J. Netw. Comput. Appl.
    2016, 73, 57–81. [Google Scholar] [CrossRef] Chauhan, S.; Agarwal, N.; Kar, A.K.
    Addressing big data challenges in smart cities: A systematic literature review.
    Info 2016, 18, 73–90. [Google Scholar] [CrossRef] Tanenbaum, A.S. Network protocols.
    ACM Comput. Surv. 1981, 13, 453–489. [Google Scholar] [CrossRef] Shang, W.; Yu,
    Y.; Droms, R.; Zhang, L. Challenges in IoT Networking via TCP/IP Architecture.
    NDN Project. 2016. Available online: https://named-data.net/wp-content/uploads/2016/02/ndn-0038-1-challenges-iot.pdf
    (accessed on 14 April 2023). Forouzan, B.A. TCP/IP Protocol Suite; McGraw-Hill
    Higher Education: Chicago, IL, USA, 2002. [Google Scholar] Shojafar, M.; Cordeschi,
    N.; Baccarelli, E. Energy-efficient adaptive resource management for real-time
    vehicular cloud services. IEEE Trans. Cloud Comput. 2016, 7, 196–209. [Google
    Scholar] [CrossRef] Sharma, C.; Gondhi, N.K. Communication protocol stack for
    constrained IoT systems. In Proceedings of the 2018 3rd International Conference
    on Internet of Things: Smart Innovation and Usages (IoT-SIU), Bhimtal, India,
    23–24 February 2018; pp. 1–6. [Google Scholar] Chand, H.V.; Karthikeyan, J. Survey
    on the role of IoT in intelligent transportation system. Indones. J. Electr. Eng.
    Comput. Sci. 2018, 11, 936–941. [Google Scholar] [CrossRef] Arena, F.; Pau, G.
    An overview of vehicular communications. Future Internet 2019, 11, 27. [Google
    Scholar] [CrossRef] Peng, H.; Liang, L.; Shen, X.; Li, G.Y. Vehicular communications:
    A network layer perspective. IEEE Trans. Veh. Technol. 2018, 68, 1064–1078. [Google
    Scholar] [CrossRef] Malik, R.Q.; Ramli, K.N.; Kareem, Z.H.; Habelalmatee, M.I.;
    Abbas, H. A Review on Vehicle-to-Infrastructure Communication System: Requirement
    and Applications. In Proceedings of the 2020 3rd International Conference on Engineering
    Technology and Its Applications (IICETA), Najaf, Iraq, 6–7 September 2020; pp.
    159–163. [Google Scholar] Ndashimye, E.; Ray, S.K.; Sarkar, N.I.; Gutiérrez, J.A.
    Vehicle-to-infrastructure communication over multi-tier heterogeneous networks:
    A survey. Comput. Netw. 2017, 112, 144–166. [Google Scholar] [CrossRef] Li, Y.
    An overview of the DSRC/WAVE technology. In Quality, Reliability, Security and
    Robustness in Heterogeneous Networks, Proceedings of the 7th International Conference
    on Heterogeneous Networking for Quality, Reliability, Security and Robustness,
    QShine 2010, and Dedicated Short Range Communications Workshop, DSRC 2010, Houston,
    TX, USA, 17–19 November 2010; Revised Selected Papers 7; Springer: Berlin/Heidelberg,
    Germany, 2012; pp. 544–558. [Google Scholar] Wang, X.; Mao, S.; Gong, M.X. An
    overview of 3GPP cellular vehicle-to-everything standards. GetMobile: Mob. Comput.
    Commun. 2017, 21, 19–25. [Google Scholar] [CrossRef] Ansari, K. Joint use of DSRC
    and C-V2X for V2X communications in the 5.9 GHz ITS band. IET Intell. Transp.
    Syst. 2021, 15, 213–224. [Google Scholar] [CrossRef] Wagh, T.; Bagrecha, R.; Salunke,
    S.; Shedge, S.; Lomte, V. A survey on vehicle to vehicle communication. In Computational
    Methods and Data Engineering: Proceedings of ICMDE 2020; Springer: Singapore,
    2020; Volume 2, pp. 163–175. [Google Scholar] Ganeshkumar, N.; Kumar, S. Obu (on-board
    unit) wireless devices in vanet (s) for effective communication—A review. In Computational
    Methods and Data Engineering: Proceedings of ICMDE; Springer: Singapore, 2020;
    Volume 2, pp. 191–202. [Google Scholar] Wang, R.Y.; Strong, D.M. Beyond accuracy:
    What data quality means to data consumers. J. Manag. Inf. Syst. 1996, 12, 5–33.
    [Google Scholar] [CrossRef] Shih, C.S.; Chou, J.J.; Reijers, N.; Kuo, T.W. Designing
    CPS/IoT applications for smart buildings and cities. IET Cyber-Phys. Syst. Theory
    Appl. 2016, 1, 3–12. [Google Scholar] [CrossRef] Perez-Castillo, R.; Carretero,
    A.G.; Rodriguez, M.; Caballero, I.; Piattini, M.; Mate, A.; Kim, S.; Lee, D. Data
    quality best practices in IoT environments. In Proceedings of the 2018 11th International
    Conference on the Quality of Information and Communications Technology (QUATIC),
    Coimbra, Portugal, 4–7 September 2018; pp. 272–275. [Google Scholar] Alwan, A.A.;
    Ciupala, M.A.; Brimicombe, A.J.; Ghorashi, S.A.; Baravalle, A.; Falcarin, P. Data
    quality challenges in large-scale cyber-physical systems: A systematic review.
    Inf. Syst. 2022, 105, 101951. [Google Scholar] [CrossRef] Kapil, G.; Agrawal,
    A.; Khan, R.A. A study of big data characteristics. In Proceedings of the 2016
    International Conference on Communication and Electronics Systems (ICCES), Coimbatore,
    India, 21–22 October 2016; pp. 1–4. [Google Scholar] Sun, Z.; Strang, K.; Li,
    R. Big data with ten big characteristics. In Proceedings of the 2nd International
    Conference on Big Data Research, Weihai, China, 27–29 October 2018; pp. 56–61.
    [Google Scholar] Rehrl, K.; Gröchenig, S. Evaluating localization accuracy of
    automated driving systems. Sensors 2021, 21, 5855. [Google Scholar] [CrossRef]
    [PubMed] Szántó, M.; Hidalgo, C.; González, L.; Pérez, J.; Asua, E.; Vajta, L.
    Trajectory Planning of Automated Vehicles Using Real-Time Map Updates. IEEE Access
    2023, 11, 67468–67481. [Google Scholar] [CrossRef] Bhatti, F.; Shah, M.A.; Maple,
    C.; Islam, S.U. A novel internet of things-enabled accident detection and reporting
    system for smart city environments. Sensors 2019, 19, 2071. [Google Scholar] [CrossRef]
    Issa, S.; Adekunle, O.; Hamdi, F.; Cherfi, S.S.S.; Dumontier, M.; Zaveri, A. Knowledge
    graph completeness: A systematic literature review. IEEE Access 2021, 9, 31322–31339.
    [Google Scholar] [CrossRef] Kaneyasu, H.; Nobayashi, D.; Tsukamoto, K.; Ikenaga,
    T.; Lee, M. Data completeness-aware transmission control for large spatio-temporal
    data retention. In Proceedings of the 2022 IEEE International Conference on Consumer
    Electronics (ICCE), Las Vegas, NV, USA, 7–9 January 2022; pp. 1–5. [Google Scholar]
    Bhalaji, D.N. Reliable data transmission with heightened confidentiality and integrity
    in IOT empowered mobile networks. J. IoT Soc. Mob. Anal. Cloud 2020, 2, 106–117.
    [Google Scholar] Liu, M.; Wang, Y.; Li, H.; Jing, Y.; Zhang, G.; He, W. Analyzing
    V2I Channel and Spatial Consistency through Simulation. In Proceedings of the
    2021 7th International Conference on Computer and Communications (ICCC), Chengdu,
    China, 10–13 December 2021; pp. 453–458. [Google Scholar] Zadorozhny, V.; Krishnamurthy,
    P.; Abdelhakim, M.; Pelechrinis, K.; Xu, J. Data credence in iot: Vision and challenges.
    In Open Journal of Internet of Things (OJIOT), v. 3, N. 1, 114-126, 2017. Special
    Issue: Proceedings of the International Workshop on Very Large Internet of Things
    (VLIoT 2017) in Conjunction with the VLDB 2017 Conference; Research online Publishing:
    Lübeck, Germany, 2017; Volume 3, pp. 114–126. [Google Scholar] Gopinath, S.; Vinoth
    Kumar, K.; Jaya Sankar, T. Secure location aware routing protocol with authentication
    for data integrity. Cluster Comput. 2019, 22 (Suppl. 6), 13609–13618. [Google
    Scholar] [CrossRef] Kafi, M.A.; Othman, J.B.; Badache, N. A survey on reliability
    protocols in wireless sensor networks. ACM Comput. Surv. 2017, 50, 1–47. [Google
    Scholar] [CrossRef] Franco, A.; Landfeldt, B.; Körner, U.; Nyberg, C. Statistical
    guarantee of timeliness in networks of IoT devices. Telecommun. Syst. 2022, 80,
    487–496. [Google Scholar] [CrossRef] Lomotey, R.K.; Pry, J.C.; Chai, C. Traceability
    and visual analytics for the Internet-of-Things (IoT) architecture. World Wide
    Web 2018, 21, 7–32. [Google Scholar] [CrossRef] Corallo, A.; Paiano, R.; Guido,
    A.L.; Pandurino, A.; Latino, M.E.; Menegoli, M. Intelligent monitoring Internet
    of Things based system for agri-food value chain traceability and transparency:
    A framework proposed. In Proceedings of the 2018 IEEE Workshop on Environmental,
    Energy, and Structural Monitoring Systems (EESMS), Salerno, Italy, 21–22 June
    2018; pp. 1–6. [Google Scholar] Zheng, D.; Jing, C.; Guo, R.; Gao, S.; Wang, L.
    A traceable blockchain-based access authentication system with privacy preservation
    in VANETs. IEEE Access 2019, 7, 117716–117726. [Google Scholar] [CrossRef] Qi,
    J.; Gao, T. A privacy-preserving authentication and pseudonym revocation scheme
    for VANETs. IEEE Access 2020, 8, 177693–177707. [Google Scholar] [CrossRef] Pandey,
    R.D.; Snigdh, I. Validity as a Measure of Data Quality in Internet of Things Systems.
    Wirel. Pers. Commun. 2022, 126, 933–948. [Google Scholar] [CrossRef] Hussain,
    R.; Bouk, S.H.; Javaid, N.; Khan, A.M.; Lee, J. Realization of VANET-based cloud
    services through named data networking. IEEE Commun. Mag. 2018, 56, 168–175. [Google
    Scholar] [CrossRef] Al-Omaisi, H.; Sundararajan, E.A.; Alsaqour, R.; Abdullah,
    N.F.; Abdelhaq, M. A survey of data dissemination schemes in vehicular named data
    networking. Veh. Commun. 2021, 30, 100353. [Google Scholar] [CrossRef] Priyadarshi,
    D.; Behura, A. Analysis of different iot protocols for heterogeneous devices and
    cloud platform. In Proceedings of the 2018 International Conference on Communication
    and Signal Processing (ICCSP), Chennai, India, 3–5 April 2018; pp. 0868–0872.
    [Google Scholar] Alani, M.M. Tcp/ip model. In Guide to OSI and TCP/IP Models;
    Springer: Cham, Switzerland, 2014; pp. 19–50. [Google Scholar] Kumar, S. A Review
    on Client-Server based applications and research opportunity. Int. J. Recent Sci.
    Res. 2019, 10, 33857–33862. [Google Scholar] Dizdarević, J.; Carpio, F.; Jukan,
    A.; Masip-Bruin, X. A survey of communication protocols for internet of things
    and related challenges of fog and cloud computing integration. ACM Comput. Surv.
    2019, 51, 1–29. [Google Scholar] [CrossRef] Shelby, Z.; Hartke, K.; Bormann, C.
    The constrained application protocol (CoAP) (No. rfc7252). 2014. Available online:
    https://www.rfc-editor.org/rfc/rfc7252 (accessed on 29 April 2023). Chun, S.M.;
    Park, J.T. Mobile CoAP for IoT mobility management. In Proceedings of the 2015
    12th Annual IEEE Consumer Communications and Networking Conference (CCNC), Las
    Vegas, NV, USA, 9–12 January 2015; pp. 283–289. [Google Scholar] Mishra, B.; Kertesz,
    A. The use of MQTT in M2M and IoT systems: A survey. IEEE Access 2020, 8, 201071–201086.
    [Google Scholar] [CrossRef] Hussein, M.; Galal, A.I.; Abd-Elrahman, E.; Zorkany,
    M. Internet of things (IoT) platform for multi-topic messaging. Energies 2020,
    13, 3346. [Google Scholar] [CrossRef] Kaushik, S.; Poonia, R.C.; Khatri, S.K.
    Comparative study of various protocols of DDS. J. Stat. Manag. Syst. 2017, 20,
    647–658. [Google Scholar] [CrossRef] Bendel, S.; Springer, T.; Schuster, D.; Schill,
    A.; Ackermann, R.; Ameling, M. A service infrastructure for the Internet of Things
    based on XMPP. In Proceedings of the 2013 IEEE International Conference on Pervasive
    Computing and Communications Workshops (PERCOM Workshops), San Diego, CA, USA,
    18–22 March 2013; pp. 385–388. [Google Scholar] Wang, H.; Xiong, D.; Wang, P.;
    Liu, Y. A lightweight XMPP publish/subscribe scheme for resource-constrained IoT
    devices. IEEE Access 2017, 5, 16393–16405. [Google Scholar] [CrossRef] Hayes,
    M.; Omar, T. End to end vanet/iot communications a 5g smart cities case study
    approach. In Proceedings of the 2019 IEEE International Symposium on Technologies
    for Homeland Security (HST), Woburn, MA, USA, 5–6 November 2019; pp. 1–5. [Google
    Scholar] Kramer, J. Advanced message queuing protocol (AMQP). Linux J. 2009, 2009,
    3. [Google Scholar] Bhimani, P.; Panchal, G. Message delivery guarantee and status
    update of clients based on IOT-AMQP. In Intelligent Communication and Computational
    Technologies: Proceedings of Internet of Things for Technological Development;
    IoT4TD 2017; Springer: Singapore, 2018; pp. 15–22. [Google Scholar] Tilkov, S.
    A brief introduction to REST. InfoQ, December 2007, 10. Available online: https://www.espinosa-oviedo.com/web-programming/files/readings/A-Brief-Introduction-to-REST.pdf
    (accessed on 31 April 2023). Hireche, S.; Dennai, A.; Kadri, B. Toward a Novel
    RESTFUL Big Data-Based Urban Traffic Incident Data Web Service for Connected Vehicles.
    Comput. J. 2023. [Google Scholar] [CrossRef] Bayılmış, C.; Ebleme, M.A.; Çavuşoğlu,
    Ü.; Küçük, K.; Sevin, A. A survey on communication protocols and performance evaluations
    for Internet of Things. Digit. Commun. Netw. 2022, 8, 1094–1104. [Google Scholar]
    [CrossRef] Soewito, B.; Gunawan, F.E.; Kusuma, I.G.P. Websocket to support real
    time smart home applications. Procedia Comput. Sci. 2019, 157, 560–566. [Google
    Scholar] [CrossRef] Mitrović, N.; Ðorđević, M.; Veljković, S.; Danković, D. Implementation
    of WebSockets in ESP32 based IoT Systems. In Proceedings of the 2021 15th International
    Conference on Advanced Technologies, Systems and Services in Telecommunications
    (TELSIKS), Nis, Serbia, 20–22 October 2021; pp. 261–264. [Google Scholar] Rahman,
    M.R.; Akhter, S. Real time bi-directional traffic management support system with
    gps and websocket. In Proceedings of the 2015 IEEE International Conference on
    Computer and Information Technology; Ubiquitous Computing and Communications;
    Dependable, Autonomic and Secure Computing; Pervasive Intelligence and Computing,
    Liverpool, UK, 26–28 October 2015; pp. 959–964. [Google Scholar] Ong, L.; Yoakum,
    J. An Introduction to the Stream Control Transmission Protocol (SCTP) (No. rfc3286).
    2002. Available online: https://www.rfc-editor.org/rfc/rfc3286.html (accessed
    on 31 April 2023). Kohler, E.; Handley, M.; Floyd, S. Datagram Congestion Control
    Protocol (DCCP) (No. rfc4340). 2006. Available online: https://www.rfc-editor.org/rfc/rfc4340.html
    (accessed on 31 April 2023). Iyengar, J.; Thomson, M. QUIC: A UDP-based multiplexed
    and secure transport. In RFC 9000; IETF 2021; Available online: https://datatracker.ietf.org/doc/html/rfc9000
    (accessed on 31 April 2023). Abdelsalam, A.; Luglio, M.; Roseti, C.; Zampognaro,
    F. TCP wave: A new reliable transport approach for future internet. Comput. Netw.
    2017, 112, 122–143. [Google Scholar] [CrossRef] Al-Saadi, R.; Armitage, G.; But,
    J.; Branch, P. A survey of delay-based and hybrid TCP congestion control algorithms.
    IEEE Commun. Surv. Tutor. 2019, 21, 3609–3638. [Google Scholar] [CrossRef] Stewart,
    R.; Metz, C. SCTP: New transport protocol for TCP/IP. IEEE Internet Comput. 2001,
    5, 64–69. [Google Scholar] [CrossRef] Eklund, J. Latency Reduction for Soft Real-Time
    Traffic Using SCTP Multihoming. Ph.D. Thesis, Karlstad University Press, Karlstad,
    Sweden, 2016. [Google Scholar] Langley, A.; Riddoch, A.; Wilk, A.; Vicente, A.;
    Krasic, C.; Zhang, D.; Yang, F.; Kouranov, F.; Swett, I.; Iyengar, J.; et al.
    The quic transport protocol: Design and internet-scale deployment. In Proceedings
    of the Conference of the ACM Special Interest Group on Data Communication, Los
    Angeles, CA, USA, 21–25 August 2017; pp. 183–196. [Google Scholar] Megyesi, P.;
    Krämer, Z.; Molnár, S. How quick is QUIC? In Proceedings of the 2016 IEEE International
    Conference on Communications (ICC), Kuala Lumpur, Malaysia, 22–27 May 2016; pp.
    1–6. [Google Scholar] Babatunde, O.; Al-Debagy, O. A comparative review of internet
    protocol version 4 (ipv4) and internet protocol version 6 (ipv6). arXiv 2014,
    arXiv:1407.2717. [Google Scholar] Olsson, J. 6LoWPAN demystified. Tex. Instrum.
    2014, 13, 1–13. [Google Scholar] Tömösközi, M.; Reisslein, M.; Fitzek, F.H. Packet
    header compression: A principle-based survey of standards and recent research
    studies. IEEE Commun. Surv. Tutor. 2022, 24, 698–740. [Google Scholar] [CrossRef]
    Winter, T.; Thubert, P.; Brandt, A.; Hui, J.; Kelsey, R.; Levis, P.; Pister, K.;
    Struik, R.; Vasseur, J.P.; Alexander, R. RPL: IPv6 Routing Protocol for Low-Power
    and Lossy Networks (No. rfc6550). 2012. Available online: https://www.rfc-editor.org/rfc/rfc6550.html
    (accessed on 5 May 2023). Almusaylim, Z.A.; Alhumam, A.; Jhanjhi, N.Z. Proposing
    a secure RPL based internet of things routing protocol: A review. Ad Hoc Netw.
    2020, 101, 102096. [Google Scholar] [CrossRef] Al-Masri, E.; Kalyanam, K.R.; Batts,
    J.; Kim, J.; Singh, S.; Vo, T.; Yan, C. Investigating messaging protocols for
    the Internet of Things (IoT). IEEE Access 2020, 8, 94880–94911. [Google Scholar]
    [CrossRef] Mijovic, S.; Shehu, E.; Buratti, C. Comparing application layer protocols
    for the Internet of Things via experimentation. In Proceedings of the 2016 IEEE
    2nd International Forum on Research and Technologies for Society and Industry
    Leveraging a Better Tomorrow (RTSI), Bologna, Italy, 7–9 September 2016; pp. 1–5.
    [Google Scholar] Tandale, U.; Momin, B.; Seetharam, D.P. An empirical study of
    application layer protocols for IoT. In Proceedings of the 2017 International
    Conference on Energy, Communication, Data Analytics and Soft Computing (ICECDS),
    Chennai, India, 1–2 August 2017; pp. 2447–2451. [Google Scholar] Bansal, M. Performance
    Comparison of MQTT and CoAP Protocols in Different Simulation Environments. Inven.
    Commun. Comput. Technol. 2021, 2017, 549–560. [Google Scholar] Safaei, B.; Monazzah,
    A.M.H.; Bafroei, M.B.; Ejlali, A. Reliability side-effects in Internet of Things
    application layer protocols. In Proceedings of the 2017 2nd International Conference
    on System Reliability and Safety (ICSRS), Milan, Italy, 20–22 December 2017; pp.
    207–212. [Google Scholar] Babovic, Z.B.; Protic, J.; Milutinovic, V. Web performance
    evaluation for internet of things applications. IEEE Access 2016, 4, 6974–6992.
    [Google Scholar] [CrossRef] Kayal, P.; Perros, H. A comparison of IoT application
    layer protocols through a smart parking implementation. In Proceedings of the
    2017 20th Conference on Innovations in Clouds, Internet and Networks (ICIN), Paris,
    France, 7–9 March 2017; pp. 331–336. [Google Scholar] Ghotbou, A.; Khansari, M.
    Comparing application layer protocols for video transmission in IoT low power
    lossy networks: An analytic comparison. Wirel. Netw. 2021, 27, 269–283. [Google
    Scholar] [CrossRef] Chaudhary, A.; Peddoju, S.K.; Kadarla, K. Study of internet-of-things
    messaging protocols used for exchanging data with external sources. In Proceedings
    of the 2017 IEEE 14th International Conference on Mobile Ad Hoc and Sensor Systems
    (MASS), Orlando, FL, USA, 22–25 October 2017; pp. 666–671. [Google Scholar] Gupta,
    P. A Survey of Application Layer Protocols for Internet of Things. In Proceedings
    of the 2021 International Conference on Communication information and Computing
    Technology (ICCICT), Mumbai, India, 25–27 June 2021; pp. 1–6. [Google Scholar]
    Al-Qassab, R.A.; Aal-Nouman, M.I. Performance Evaluation of CoAP and MQTT_SN Protocols.
    In Proceedings of the International Conference on Emerging Technology Trends in
    Internet of Things and Computing, Erbil, Iraq, 6–8 June 2021; Springer International
    Publishing: Cham, Switzerland, 2021; pp. 223–236. [Google Scholar] Polese, M.;
    Chiariotti, F.; Bonetto, E.; Rigotto, F.; Zanella, A.; Zorzi, M. A survey on recent
    advances in transport layer protocols. IEEE Commun. Surv. Tutor. 2019, 21, 3584–3608.
    [Google Scholar] [CrossRef] AL-Dhief, F.T.; Sabri, N.; Latiff, N.A.; Malik, N.N.N.A.;
    Abbas, M.; Albader, A.; Mohammed, M.A.; AL-Haddad, R.N.; Salman, Y.D.; Khanapi,
    M.; et al. Performance comparison between TCP and UDP protocols in different simulation
    scenarios. Int. J. Eng. Technol. 2018, 7, 172–176. [Google Scholar] Wheeb, A.H.
    Performance evaluation of UDP, DCCP, SCTP and TFRC for different traffic flow
    in wired networks. Int. J. Electr. Comput. Eng. 2017, 7, 3552. [Google Scholar]
    [CrossRef] Sahraoui, Y.; Ghanam, A.; Zaidi, S.; Bitam, S.; Mellouk, A. Performance
    evaluation of TCP and UDP-based video streaming in vehicular ad-hoc networks.
    In Proceedings of the 2018 International Conference on Smart Communications in
    Network Technologies (SaCoNeT), El Oued, Algeria, 27–31 October 2018; pp. 67–72.
    [Google Scholar] Park, J.S.; Koh, S.J. Performance Comparison of SCTP and TCP
    over Linux Platform. J. Korean Inst. Commun. Inf. Sci. 2008, 33, 699–706. [Google
    Scholar] Kharat, P.; Kulkarni, M. Modified QUIC protocol for improved network
    performance and comparison with QUIC and TCP. Int. J. Internet Protoc. Technol.
    2019, 12, 35–43. [Google Scholar] [CrossRef] Patel, U.; Chhatbar, J.; Shah, V.
    Comparitive study on ipv4 and ipv6 internet protocol. Int. J. Adv. Eng. Res. Dev.
    2014, 1, 58–62. [Google Scholar] Sandur, A.; Giri, A. Performance Analysis of
    the merged 6L0WPAN-CoAP and RPL-CoAP with different combination of MAC and RDC
    layer protocols. In Proceedings of the 2022 IEEE 2nd Mysore Sub Section International
    Conference (MysuruCon), Mysuru, India, 16–17 October 2022; pp. 1–6. [Google Scholar]
    Mahmud, A.; Hossain, F.; Juhin, F.; Choity, T.A. Merging the communication protocols
    6LoWPAN-CoAP and RPL-CoAP: Simulation and performance analysis using Cooja simulator.
    In Proceedings of the 2019 1st International Conference on Advances in Science,
    Engineering and Robotics Technology (ICASERT), Dhaka, Bangladesh, 3–5 May 2019;
    pp. 1–6. [Google Scholar] Sobin, C.C. A survey on architecture, protocols and
    challenges in IoT. Wirel. Pers. Commun. 2020, 112, 1383–1429. [Google Scholar]
    [CrossRef] Pohl, M.; Kubela, J.; Bosse, S.; Turowski, K. Performance evaluation
    of application layer protocols for the internet-of-things. In Proceedings of the
    2018 Sixth International Conference on Enterprise Systems (ES), Limassol, Cyprus,
    1–2 October 2018; pp. 180–187. [Google Scholar] Bilal, M.; Munir, E.U.; Ullah,
    A. BEMD: Beacon-oriented Emergency Message Dissemination scheme for highways.
    Ad Hoc Netw. 2023, 142, 103095. [Google Scholar] [CrossRef] Callebaut, G.; Leenders,
    G.; Van Mulders, J.; Ottoy, G.; De Strycker, L.; Van der Perre, L. The art of
    designing remote iot devices—Technologies and strategies for a long battery life.
    Sensors 2021, 21, 913. [Google Scholar] [CrossRef] Resner, D.; de Araujo, G.M.;
    Fröhlich, A.A. Design and implementation of a cross-layer IoT protocol. Sci. Comput.
    Program. 2018, 165, 24–37. [Google Scholar] [CrossRef] Singh, M.; Baranwal, G.
    Quality of service (qos) in internet of things. In Proceedings of the 2018 3rd
    International Conference on Internet of Things: Smart Innovation and Usages (IoT-SIU),
    Bhimtal, India, 23–24 February 2018; pp. 1–6. [Google Scholar] Beshley, M.; Kryvinska,
    N.; Seliuchenko, M.; Beshley, H.; Shakshuki, E.M.; Yasar, A.U.H. End-to-End QoS
    “smart queue” management algorithms and traffic prioritization mechanisms for
    narrow-band internet of things services in 4G/5G networks. Sensors 2020, 20, 2324.
    [Google Scholar] [CrossRef] Jung, C. Prioritized Data Transmission Mechanism for
    IoT. KSII Trans. Internet Inf. Syst. 2020, 14, 1–21. [Google Scholar] Tandon,
    A.; Srivastava, P. Location based secure energy efficient cross layer routing
    protocols for IOT enabling technologies. Int. J. Innov. Technol. Explor. Eng.
    (IJITEE) 2019, 8, 368–374. [Google Scholar] Jiang, S. On reliable data transfer
    in underwater acoustic networks: A survey from networking perspective. IEEE Commun.
    Surv. Tutor. 2018, 20, 1036–1055. [Google Scholar] [CrossRef] Kamble, S.J.; Kounte,
    M.R. A Survey on Emergency Vehicle Preemption Methods Based on Routing and Scheduling.
    Int. J. Comput. Netw. Appl. 2022, 9, 60–71. [Google Scholar] [CrossRef] Dey, N.;
    Neha, N.; Hariprasad, M.; Sandhya, S.; Moharir, M.; Akram, M. A Detail Survey
    on QUIC and its Impact on Network Data Transmission. In Proceedings of the 2022
    6th International Conference on Trends in Electronics and Informatics (ICOEI),
    Tirunelveli, India, 28–30 April 2022; pp. 378–385. [Google Scholar] Eklund, J.;
    Grinnemo, K.J.; Brunstrom, A. Using multiple paths in SCTP to reduce latency for
    signaling traffic. Compute. Commun. 2018, 129, 184–196. [Google Scholar] [CrossRef]
    Guo, Q.; Li, L.; Ban, X.J. Urban traffic signal control with connected and automated
    vehicles: A survey. Transp. Res. Part C Emerg. Technol. 2019, 101, 313–334. [Google
    Scholar] [CrossRef] Lee, W.H.; Chiu, C.Y. Design and implementation of a smart
    traffic signal control system for smart city applications. Sensors 2020, 20, 508.
    [Google Scholar] [CrossRef]                  Disclaimer/Publisher’s Note: The
    statements, opinions and data contained in all publications are solely those of
    the individual author(s) and contributor(s) and not of MDPI and/or the editor(s).
    MDPI and/or the editor(s) disclaim responsibility for any injury to people or
    property resulting from any ideas, methods, instructions or products referred
    to in the content.  © 2023 by the authors. Licensee MDPI, Basel, Switzerland.
    This article is an open access article distributed under the terms and conditions
    of the Creative Commons Attribution (CC BY) license (https://creativecommons.org/licenses/by/4.0/).
    Share and Cite MDPI and ACS Style Suleman, D.; Shibl, R.; Ansari, K. Investigation
    of Data Quality Assurance across IoT Protocol Stack for V2I Interactions. Smart
    Cities 2023, 6, 2680-2705. https://doi.org/10.3390/smartcities6050121 AMA Style
    Suleman D, Shibl R, Ansari K. Investigation of Data Quality Assurance across IoT
    Protocol Stack for V2I Interactions. Smart Cities. 2023; 6(5):2680-2705. https://doi.org/10.3390/smartcities6050121
    Chicago/Turabian Style Suleman, Danladi, Rania Shibl, and Keyvan Ansari. 2023.
    \"Investigation of Data Quality Assurance across IoT Protocol Stack for V2I Interactions\"
    Smart Cities 6, no. 5: 2680-2705. https://doi.org/10.3390/smartcities6050121 Article
    Metrics Citations Crossref   1 Scopus   1 Google Scholar   [click to view] Article
    Access Statistics Article access statistics Article Views 28. Dec 7. Jan 17. Jan
    27. Jan 6. Feb 16. Feb 26. Feb 7. Mar 17. Mar 0 500 1000 1500 2000 For more information
    on the journal statistics, click here. Multiple requests from the same IP address
    are counted as one view.   Smart Cities, EISSN 2624-6511, Published by MDPI RSS
    Content Alert Further Information Article Processing Charges Pay an Invoice Open
    Access Policy Contact MDPI Jobs at MDPI Guidelines For Authors For Reviewers For
    Editors For Librarians For Publishers For Societies For Conference Organizers
    MDPI Initiatives Sciforum MDPI Books Preprints.org Scilit SciProfiles Encyclopedia
    JAMS Proceedings Series Follow MDPI LinkedIn Facebook Twitter Subscribe to receive
    issue release notifications and newsletters from MDPI journals Select options
    Subscribe © 1996-2024 MDPI (Basel, Switzerland) unless otherwise stated Disclaimer
    Terms and Conditions Privacy Policy"'
  inline_citation: '>'
  journal: Smart Cities
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: Investigation of Data Quality Assurance across IoT Protocol Stack for V2I
    Interactions
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Tariq U.
  - Ahmed I.
  - Bashir A.K.
  - Shaukat K.
  citation_count: '23'
  description: The emergence of the Internet of Things (IoT) technology has brought
    about tremendous possibilities, but at the same time, it has opened up new vulnerabilities
    and attack vectors that could compromise the confidentiality, integrity, and availability
    of connected systems. Developing a secure IoT ecosystem is a daunting challenge
    that requires a systematic and holistic approach to identify and mitigate potential
    security threats. Cybersecurity research considerations play a critical role in
    this regard, as they provide the foundation for designing and implementing security
    measures that can address emerging risks. To achieve a secure IoT ecosystem, scientists
    and engineers must first define rigorous security specifications that serve as
    the foundation for developing secure devices, chipsets, and networks. Developing
    such specifications requires an interdisciplinary approach that involves multiple
    stakeholders, including cybersecurity experts, network architects, system designers,
    and domain experts. The primary challenge in IoT security is ensuring the system
    can defend against both known and unknown attacks. To date, the IoT research community
    has identified several key security concerns related to the architecture of IoT
    systems. These concerns include issues related to connectivity, communication,
    and management protocols. This research paper provides an all-inclusive and lucid
    review of the current state of anomalies and security concepts related to the
    IoT. We classify and analyze prevalent security distresses regarding IoT’s layered
    architecture, including connectivity, communication, and management protocols.
    We establish the foundation of IoT security by examining the current attacks,
    threats, and cutting-edge solutions. Furthermore, we set security goals that will
    serve as the benchmark for assessing whether a solution satisfies the specific
    IoT use cases.
  doi: 10.3390/s23084117
  full_citation: '>'
  full_text: '>

    "This website uses cookies We use cookies to personalise content and ads, to provide
    social media features and to analyse our traffic. We also share information about
    your use of our site with our social media, advertising and analytics partners
    who may combine it with other information that you’ve provided to them or that
    they’ve collected from your use of their services. Consent Selection Necessary
    Preferences Statistics Marketing Show details                Deny Allow selection
    Allow all   Journals Topics Information Author Services Initiatives About Sign
    In / Sign Up Submit   Search for Articles: Sensors All Article Types Advanced   Journals
    Sensors Volume 23 Issue 8 10.3390/s23084117 Submit to this Journal Review for
    this Journal Propose a Special Issue Article Menu Academic Editors Raffaele Bruno
    Alessandra Rizzardi Antonio Puliafito Subscribe SciFeed Recommended Articles Related
    Info Links More by Authors Links Article Views 57312 Citations 24 Table of Contents
    Abstract Introduction General Design, Components, and Protocols for the Internet
    of Things Potential Security Issues with the Internet of Things What Distinguishes
    IoT Anomaly Detection from IT Security? Classification of Internet of Things Access
    Control Roadmap for Securing IoT Devices Conclusions and Our Recommendations Author
    Contributions Funding Institutional Review Board Statement Informed Consent Statement
    Data Availability Statement Acknowledgments Conflicts of Interest References share
    Share announcement Help format_quote Cite question_answer Discuss in SciProfiles
    thumb_up Endorse textsms Comment first_page settings Order Article Reprints Open
    AccessReview A Critical Cybersecurity Analysis and Future Research Directions
    for the Internet of Things: A Comprehensive Review by Usman Tariq 1,*, Irfan Ahmed
    2, Ali Kashif Bashir 3 and Kamran Shaukat 4 1 Management Information System Department,
    College of Business Administration, Prince Sattam Bin Abdulaziz University, Al-Kharj
    16278, Saudi Arabia 2 Department of Computer Science, College of Engineering,
    Virginia Commonwealth University, Richmond, VA 23284, USA 3 Department of Computing
    and Mathematics, Manchester Metropolitan University, Manchester M156BH, UK 4 School
    of Information and Physical Sciences, The University of Newcastle, Newcastle 2308,
    Australia * Author to whom correspondence should be addressed. Sensors 2023, 23(8),
    4117; https://doi.org/10.3390/s23084117 Submission received: 28 February 2023
    / Revised: 4 April 2023 / Accepted: 14 April 2023 / Published: 19 April 2023 (This
    article belongs to the Section Internet of Things) Download keyboard_arrow_down     Browse
    Figures Versions Notes Abstract The emergence of the Internet of Things (IoT)
    technology has brought about tremendous possibilities, but at the same time, it
    has opened up new vulnerabilities and attack vectors that could compromise the
    confidentiality, integrity, and availability of connected systems. Developing
    a secure IoT ecosystem is a daunting challenge that requires a systematic and
    holistic approach to identify and mitigate potential security threats. Cybersecurity
    research considerations play a critical role in this regard, as they provide the
    foundation for designing and implementing security measures that can address emerging
    risks. To achieve a secure IoT ecosystem, scientists and engineers must first
    define rigorous security specifications that serve as the foundation for developing
    secure devices, chipsets, and networks. Developing such specifications requires
    an interdisciplinary approach that involves multiple stakeholders, including cybersecurity
    experts, network architects, system designers, and domain experts. The primary
    challenge in IoT security is ensuring the system can defend against both known
    and unknown attacks. To date, the IoT research community has identified several
    key security concerns related to the architecture of IoT systems. These concerns
    include issues related to connectivity, communication, and management protocols.
    This research paper provides an all-inclusive and lucid review of the current
    state of anomalies and security concepts related to the IoT. We classify and analyze
    prevalent security distresses regarding IoT’s layered architecture, including
    connectivity, communication, and management protocols. We establish the foundation
    of IoT security by examining the current attacks, threats, and cutting-edge solutions.
    Furthermore, we set security goals that will serve as the benchmark for assessing
    whether a solution satisfies the specific IoT use cases. Keywords: IoT security;
    data security; network security; anomaly detection and countermeasures 1. Introduction
    The Internet of Things (IoT) has emerged as a critical technology in modern society,
    with significant implications for cybersecurity. IoT devices are ubiquitous, interconnected,
    and often lack essential security features, leaving them vulnerable to a range
    of cyber threats. Malicious actors can exploit these vulnerabilities to gain sensitive
    data, launch distributed denial-of-service (DDoS) attacks, and even take control
    of critical infrastructure. A large-scale cyber-attack on IoT networks could have
    severe consequences, including disrupting essential services and causing widespread
    economic damage. The IoT is a complex network of interconnected devices and individuals
    collaborating to monitor and exchange information about their usage and environmental
    conditions. The system consists of smart devices equipped with embedded systems
    comprising CPUs, sensors, and connectivity hardware that collect, transmit, and
    respond to information obtained from their surroundings within the IoT ecosystem.
    These IoT devices communicate with an IoT gateway or another edge device to exchange
    sensor data with each other. The data is either transferred to the cloud for analysis
    or processed locally. Periodically, these devices exchange information and take
    appropriate actions based on that exchange. In most cases, IoT devices function
    autonomously without any human intervention. The IoT is a rapidly expanding field
    with unique challenges regarding device interoperability, data privacy, and security.
    IoT not only enables individuals to live and work more efficiently and gives them
    greater control over their lives. Businesses rely heavily on the IoT because it
    provides technological devices for automating enterprise environments. With IoT,
    organizations can obtain real-time insights into how various systems function,
    allowing them to optimize processes and reduce labor costs. Furthermore, IoT provides
    visibility into business transactions, reduces manufacturing and shipping costs,
    and enhances service efficiency. Intelligent IoT apps, also known as prefabricated
    SaaS systems, are equipped with machine learning techniques to analyze vast volumes
    of data collected from interconnected sensors, providing corporate users with
    actionable insights via interfaces. By monitoring KPIs (key performance indicators),
    MTBF (mean time between failure) rates, and other metrics in real-time, IoT dashboards
    and alerts can help detect irregularities and initiate automatic repairs or preventative
    actions. One of the biggest obstacles the IoT brings is ensuring its security.
    These devices gather sensitive data, such as what you say and do at home and the
    workplace. Users’ trust in the IoT hinges on its dependability, yet it has a dismal
    track record of securing data. Many connected systems fail to adequately safeguard
    users’ and device data by mismanaging it while it is stored and in transit. Even
    in well-established programs, software vulnerabilities are constantly being uncovered,
    yet many IoT devices cannot be updated, leaving them permanently vulnerable. Due
    to their intrinsic lack of protection, IoT devices such as routers and cameras
    are increasingly targeted by hackers who exploit them as part of massive, interconnected
    botnets. According to estimates from technology analyst firm IDC (International
    Data Corporation) [1], IoT devices will produce 79.4 zettabytes of data in the
    next five years. Some of this Internet of Things data will be “compact and anomalous”,
    as predicted by IDC. This means it will only consist of relatively short updates,
    such as those provided by sensors or smart meters. In addition, devices such as
    security cameras with built-in computer vision might produce massive amounts of
    data. According to IDC’s forecasts, the amount of data generated by Internet of
    Things (IoT) devices will skyrocket in the following years. The report claims
    that while video surveillance is the current leader in data production, other
    industries and medical applications will soon overtake it. Interconnected drones
    with built-in cameras were also projected to become an important data collection
    tool. Data from a wide variety of sensors, including audio, video, and specialized
    automotive sensor data, will be generated by autonomous vehicles in the near future.
    Conducting a thorough vulnerability investigation [2] is the first step in creating
    an IoT-enabled environment. This involves looking at the devices, protocols, and
    user/customer backends of the infrastructure to identify possible weak points.
    Risk management and assessment must be performed throughout the IoT implementation
    lifecycle, especially when the deployment is larger or spans more regions. Due
    to the many data formats and processing capabilities of IoT devices, there is
    no “one size fits all” cybersecurity solution that can protect any Internet of
    Things deployment. Figure 1 shows that most IoT solutions are reasonably priced
    and aimed toward the consumer market, with little thought given to issues such
    as security and privacy. Cybercriminals are eager to take advantage of such vulnerabilities
    by adding them to a botnet or exploiting them to spy on their owners. As a result,
    we must take measures to safeguard this technology. In addition, the urgency of
    this need is only going to rise as the number of available IoT devices continues
    to proliferate. Due to limited capacity and varied design, IoT devices are open
    to various security risks. Threats to wireless ad hoc networks increase when devices
    are deployed to uncontrolled and potentially dangerous environments. It is common
    in hetnets [3] to experience attacks such as sinkholes, blackholes, wormholes,
    sybils, denial-of-service (DoS), node capture, and node injection. Figure 1. IoT
    Security Considerations (Inspiration for Figure 1 was inherited from: Building
    trust in IoT devices with powerful IoT security solutions. (Telit-Cinterion).
    Thales Group. https://www.thalesgroup.com/en/markets/digital-identity-and-security/iot/iot-security
    (accessed on 5 February 2023)). During our literature review, we were able to
    identify several key research gaps in securing the IoT, such as: There is a lack
    of comprehensive security solutions for IoT devices. The number of devices and
    the different applications that they are used for having resulted in a complex
    ecosystem that is hard to secure. This complexity is exacerbated by the limited
    computational resources of many IoT devices, which makes it difficult to implement
    advanced security solutions. There is a lack of protocol standardization in IoT
    device security. The lack of universal security measures makes it easier for attackers
    to exploit vulnerabilities, resulting in a higher risk of security breaches. Without
    a common taxonomy, it becomes difficult to ensure the security of an IoT ecosystem,
    which consists of several different types of devices, communication protocols,
    and applications. There is a need for research to identify new security risks
    that arise from the integration of IoT devices with other systems, such as layer-based
    services. The integration of IoT devices with diverse systems introduces new vulnerabilities,
    which need to be identified and addressed. There is a need for more research on
    access control driven anomalies and countermeasures related to IoT devices. The
    massive deployment of these devices has led to the collection of vast amounts
    of data, and it is essential to ensure that this data is protected from unauthorized
    access and misuse. To ensure the security of private information, it is necessary
    to safeguard the data collected by IoT devices, as depicted in Figure 2. Additionally,
    it is important to protect the communication between these devices to prevent
    unauthorized interception of data. In some cases, IoT settings involve physical
    entities exchanging data to provide users with relevant information. This highlights
    the criticality of securing these devices. The potential security threats associated
    with the Internet of Things can have severe consequences, including data breaches,
    loss of sensitive information, and compromised personal privacy. Thus, addressing
    the security concerns related to the IoT is vital to ensure its safe and efficient
    operation. Figure 2. Basic security taxonomy for the IoT. We acknowledge that
    IoT security vulnerabilities are vast & complex and covering all of them in a
    research paper is not always feasible. In this regard, we want to point out that
    the selection of security vulnerabilities discussed in our research paper is based
    on various factors, such as the research objectives, the scope of the study, the
    availability of data, and the relevance to the research question. We acknowledge
    that other security vulnerabilities related to the IoT exist, and are also important
    to address. However, the inclusion of all IoT security vulnerabilities in the
    paper would have been beyond the scope of the research, and it may have led to
    an overly broad and unfocused discussion. Therefore, we focused on specific security
    vulnerabilities that were most relevant to the research question and objectives
    while acknowledging that other vulnerabilities exist in the IoT ecosystem. In
    order to discern dissimilarities among the published literature, we have taken
    into account several factors, including the range of the literature; research
    methods employed; level of scrutiny (i.e., methodology, outcomes, and limitations);
    reliability of sources (such as academic journals, white papers, and industry
    publications); a preferred timeframe (from 2019 to February 2023); and a particular
    focus has been given to literature that highlights gaps in current research with
    pragmatic suggestions for enhancing cybersecurity within IoT systems. In this
    paper, the remaining content is structured as follows: In Section 2, the general
    design, components, and protocols for the Internet of Things are discussed. Section
    3 focuses on potential security concerns with the IoT. Section 4 introduces the
    unique aspects of IoT anomaly detection compared to IT security. Section 5 explains
    the classification of IoT Access Control. Section 6 presents our perspective on
    how artificial intelligence (AI) and machine learning (ML) can impact IoT security.
    Lastly, in Section 7, this review paper is concluded. 2. General Design, Components,
    and Protocols for the Internet of Things Even though there is no set template
    for IoT design, it often consists of three distinct but interconnected layers:
    observation, network, and application. However, CISCO, a digital communication
    corporation, took it a step farther and added a total of seven levels [4]. CISCO
    defined layers were (1) physical devices, (2) communication and processing, (3)
    data analysis and transformation, (4) data storage, (5) data aggregation and abstraction,
    (6) application, and (7) collaboration and business process. As per Figure 3,
    we have focused on the security vulnerabilities which concern observation, network,
    and application layers. A multi-layered protection method aims to ensure that
    every component of the IoT cybersecurity strategy has a backup to compensate for
    any weaknesses or shortcomings. Together, these layers strengthen enterprise defenses
    and lay the framework for an effective cybersecurity strategy for the Internet
    of Things (IoT). Furthermore, we have also examined the National Institute of
    Standards and Technology (NIST) Cybersecurity Framework [5], which is based on
    primary functions, such as Identify, Protect, Detect, Respond, and Recover. Figure
    3. IoT risk taxonomy at the observation layer. We implemented a “Tuple Model”
    to create a threat scenario for IoT security. The model consisted of the attacker,
    the attack vector, the target, and/or the impact. The attacker element identified
    the entity or group responsible for the attack, while the attack vector element
    described the method or means used to execute the attack. The target element represented
    the specific IoT device or system under attack, while the impact element described
    the potential consequences or damage resulting from the attack. This Tuple Model
    provided a framework for capturing the diversity of threats and vulnerabilities
    in an IoT system and facilitated the development of a comprehensive threat model
    that accounted for all possible scenarios. Consequently, this model could be expanded
    to include additional elements to capture more complex threats, such as multi-stage
    attacks or those that involve multiple targets. 2.1. Observation Layer A variety
    of IoT sensors and other hardware components make up the observation layer, which
    is also in charge of data exchange and gathering. Sensors and other technologies
    detecting and relaying information are crucial to the Internet of Things. [6].
    A WSN uses a network of wirelessly connected, intelligent sensors to collect information
    about environmental conditions. Sensitive information is sent to a central hub
    or base station via a single or several relay stations. Figure 3 provides a comprehensive
    and systematic analysis of security threats at the observation layer of the IoT.
    The figure identifies various categories of potential security threats at this
    layer, including physical, device, and data security. By breaking down the potential
    threats into these categories, the figure offers a clear and organized overview
    of the risks that need to be addressed when securing the observation layer of
    the IoT. 2.2. Network Layer With the help of the observation layer’s input, the
    network layer stores or transmits the gathered data to the application layer for
    further processing. When it comes to the context of the Internet of Things, this
    layer is the most crucial, since it unifies the numerous forms of communication
    technology that make it possible for IoT devices to communicate with one another.
    Among the most popular of these communication methods are ZigBee [7], BLE (i.e.,
    piconet) [8,9], 6LoWPAB [10,11,12], LoRaWAN [13,14,15], and readable tags. The
    criteria for wireless technologies driven by use cases (i.e., applications) and
    the Internet of Things architecture are outlined in Table 1. This paper mainly
    focuses on IoT security, which can have overlapping concepts with classical wireless
    networks. While some of the content can be applied to both, there are differences
    between IoT devices and classical wireless network devices. IoT devices are often
    low capability, have limited power sources, generate large volumes of data, and
    can be left unattended for extended periods. Therefore, it is crucial to consider
    the unique characteristics of IoT devices when designing security measures. On
    the other hand, classical wireless networks and devices may have different requirements
    and capabilities. While some security principles may apply across both types of
    networks, the specific implementation and considerations can differ. Therefore,
    the paper may have emphasized the need to address IoT security threats explicitly
    that can be overlapping to the broader context of wireless networks. There are
    several similarities in the protocols and standards used in both IoT and classical
    wireless networks. For example, both use the IEEE 802.11 standard for wireless
    LANs, and both use the Transmission Control Protocol/Internet Protocol (TCP/IP)
    for communication. Both also use security protocols such as Wi-Fi Protected Access
    (WPA) and Transport Layer Security (TLS) to protect data transmission. However,
    there are also some differences in the protocols and standards used in the two
    types of networks. For instance, IoT devices often use low-power, low-data-rate
    wireless technologies (i.e., explained in Table 1. Assessment of Wireless IoT
    Technologies) such as Zigbee or Bluetooth Low Energy (BLE), whereas classical
    wireless networks tend to use high data rate protocols such as long-term evolution
    (LTE) or WiMAX. Additionally, IoT devices often have limited processing power
    and memory, which affects the type of protocols and standards that can be used.
    Therefore, specialized protocols such as Constrained Application Protocol (CoAP)
    and Message Queuing Telemetry Transport (MQTT) are frequently used in IoT devices.
    Specific criteria were given attention for both local and remote scenarios, including
    Internet of Things gateways, wireless device connectivity, hardware connectors,
    and communication protocols. Table 1. Assessment of wireless IoT technologies.
    ‘x’ means not-available, and ‘✓’ means available. Figure 4 offers a comprehensive
    analysis of the security threats that are specific to the network layer of IoT.
    The figure is a useful tool for understanding and visualizing the complex security
    issues at this layer, including various network protocols, communication technologies,
    and architectures. The taxonomy is organized into several categories, such as
    network protocol vulnerabilities, network infrastructure vulnerabilities, and
    malicious network traffic, and provides a detailed breakdown of the different
    types of threats that can occur in each category. This systematic approach helps
    to identify potential vulnerabilities in the network layer of IoT, which can inform
    the development of effective security measures to mitigate these risks. Figure
    4. IoT risk taxonomy at the network layer. 2.3. Application Layer When it comes
    to interoperability between IoT devices and their communication networks, the
    application layer is the key. It mediates between the activities of an IoT device
    and the subsequent transfer of data to the network in a usable manner. Several
    considerations, including the type of device and the task it will carry out, determine
    the optimal protocol for every given Internet of Things application. Constraint
    Application Protocol (CoAP) [16,17,18] and Message Queueing Telemetry Transport
    (MQTT) [19,20,21] are the most often used application protocols. CoAP was developed
    to let low-power, low-resource devices connect to the Internet of Things via slow,
    unreliable networks. Its primary use is in M2M (machine-to-machine) systems, which
    facilitates communication between machines to carry out tasks such as metering
    and controlling HVAC (heating, ventilation, and air conditioning) systems and
    smart lighting. Information transfer in CoAP occurs via UDP (User Datagram Protocol).
    CoAP uses the encryption and authentication features of UDP to keep data safe.
    CoAP employs Datagram TLS (Transport Layer Security) over UDP in the same way
    that HTTP (Hypertext Transfer Protocol) employs TLS over TCP (Transmission Control
    Protocol). RSA (Rivest-Shamir-Adleman) [22], AES (Advanced Encryption Standard)
    [23,24,25], and other ciphers are all supported by DTLS (Datagram Transport Layer
    Security). MQTT was created as a minimalist publish/subscribe message system,
    ideally suited for establishing connections between remote devices with a low
    resource need and limited bandwidth. MQTT is an excellent option for wireless
    networks with variable latency due to periodic throughput restrictions or unstable
    connectivity. TLS security-enabled MQTT protocol can support bi-direction communication
    among millions of devices in a reliable, lightweight, and efficient manner [26,27,28].
    An investigation has revealed the following differences between MQTT and CoPA
    that should be considered while implementing IoT technologies: (a) MQTT is a TCP-based
    protocol, while CoAP is an HTTP-based protocol. CoAP can also use UDP for more
    efficient communication, making it a good fit for low-power, lossy networks. REST
    is an architectural style for building web services and is often used in conjunction
    with CoAP to provide a standardized interface for web-based applications to interact
    with IoT devices. (b) MQTT uses a topic-based approach for message routing, where
    messages are published to a topic and subscribers can subscribe to specific topics
    to receive messages. CoAP/REST uses URIs (Uniform Resource Identifiers) to identify
    resources, which can be manipulated using standard HTTP methods such as GET, PUT,
    POST, and DELETE. (c) MQTT provides three QoS levels, while CoAP/REST provides
    four. MQTT QoS levels range from 0 to 2, with 0 providing no guarantees and 2
    providing the highest level of reliability. CoAP/REST QoS levels range from 0
    to 3, with 0 providing no guarantees and 3 providing the highest level of reliability.
    (d) MQTT supports bidirectional communication between clients and servers, while
    CoAP/REST supports both unidirectional and bidirectional communication. (e) MQTT
    has basic security features, such as username and password authentication, but
    it lacks more advanced security features such as message encryption and authorization.
    On the other hand, CoAP/REST provides more comprehensive security features such
    as message integrity, confidentiality, and authentication using Datagram Transport
    Layer Security (DTLS). (f) MQTT has a larger maximum payload size than CoAP/REST,
    making it a better option for applications requiring large data transfer. CoAP/REST
    is designed for constrained environments and has a smaller maximum payload size.
    (g) MQTT provides higher reliability than CoAP/REST, particularly at higher QoS
    levels. MQTT QoS level 2 provides assured message delivery, while CoAP/REST only
    provides a best-effort approach. (h) MQTT is a standardized protocol that is widely
    used in the IoT industry. CoAP/REST, while also a standard protocol, is not as
    widely used in the IoT industry and is more commonly used in the machine-to-machine
    (M2M) communications domain. (i) MQTT has a lower overhead than CoAP/REST due
    to its simpler message format and smaller header size. This makes it a better
    option for applications that require low-latency communication and efficient use
    of network resources. Figure 5 serves as a comprehensive analysis of security
    risks and threats associated with the application layer of the Internet of Things
    architecture and is structured logically and systematically, thereby facilitating
    a more thorough understanding of the nature and complexity of these potential
    security issues. Figure 5. IoT risk taxonomy at the application layer. 3. Potential
    Security Issues with the Internet of Things Most Internet-enabled gadgets are
    not built with security in mind. There are, therefore, many inherent risks to
    the safety of the IoT, some of which can be catastrophic. IoT security has a paucity
    of defined standards and regulations compared to other technical solutions. What
    is more, most individuals are unaware that their IoT devices put them at risk.
    Some security challenges afflicting the IoT include a lack of transparency, insufficient
    security integration, vulnerabilities in open-source code, unpatched vulnerabilities,
    insecure APIs (application programming interfaces), and insufficient testing.
    Data, Network and Device Security Cybersecurity must be in place at every stage
    of the lifecycle of an IoT-interconnected environment to protect that infrastructure
    from unauthorized access, alteration, or loss. It is a plan of action that consider
    not only the technological safeties such as firewalls and virus protection but
    also the user protections such as proper authentication and access limitations
    and logical safeguards such as encryption and secure programming for applications.
    Table 2 provides a comprehensive overview of the security challenges in each layer
    and proposes suitable solutions to mitigate these risks. The critical analysis
    of research questions (i.e., attack, portrayal, and purpose) and the extensive
    review of related literature provides the research community with valuable insights
    and guidance in navigating the vast IoT security landscape. Table 2. Threats to
    the security of the Internet of Things. Thus, in context of Table 2, it is evident
    that the security flaws in the IoT may very well have devastating effects on businesses
    and individuals alike. Data theft, cyber-attacks, and the suspension of essential
    services are all possible results of a vulnerability being exploited. In addition
    to the risk of sanctions and legal action, security flaws can increase expenses
    for the companies employing the device. Additionally, hackers can use security
    flaws in IoT devices to access and change the data being transferred from these
    devices in the real world. Last, but not least, security flaws can be exploited
    to cause malfunctions or even total shutdowns of devices or networks. 4. What
    Distinguishes IoT Anomaly Detection from IT Security? The IoT infrastructure can
    vary widely depending on the specific use case and requirements. However, in general,
    a typical IoT infrastructure may include hardware, software, and network components
    such as: (a) Hardware: Microcontroller or microprocessor with low power consumption
    and wireless connectivity (e.g., Wi-Fi, Bluetooth, and Zigbee); Sensors and actuators
    for data acquisition and control; Power source (e.g., battery, energy harvesting,
    and power adapter); Memory and storage for data and software; Security features
    (e.g., secure boot, encryption, and access control). (b) Network: Wireless communication
    protocols (e.g., Wi-Fi, Bluetooth, Zigbee, and LoRaWAN); Network topology (e.g.,
    star, mesh, and point-to-point); Gateway or edge device for data aggregation and
    processing; Cloud or server infrastructure for data storage and analysis; Security
    protocols (e.g., SSL/TLS, VPN, firewalls, and intrusion detection/prevention).
    (c) Software: Operating System (e.g., embedded Linux, FreeRTOS, and Zephyr); Middleware
    (e.g., MQTT, CoAP, and AMQP); Database (e.g., Apache Cassandra, MongoDB, and InfluxDB);
    Application Development Tools (applied) (e.g., software development kits (SDKs)
    and integrated development environments (IDEs). In consideration with benchmarking
    details of applied hardware, network and software specifications, when compared
    to standard IT security technologies such as firewalls, IDSs, and Data Security
    and Consequence Administration Procedure (DSCAP), the idea of anomaly discovery
    is very distinct both technologically and in terms of the fundamental monitoring
    strategy. As seen in Table 3, detecting anomalies requires looking within, as
    well as outside of, a network. Anomaly detection is an alternative method of security
    to the more conventional firewalls and intrusion detection systems. When deciding
    whether a certain action poses a risk, both rely on the latest security updates
    released by IT security service providers. As a direct consequence, current strategies
    for protection are continually falling behind potential attackers. As the so-called
    blacklists maintained by security entities are never updated until after an attack
    has already taken place. This kind of patching leaves networks vulnerable to intrusion,
    especially in the IoT/IIoT/IoMT industry, where updates are often delayed preventing
    disruption and failures. Table 3. Limits for detecting anomalies in data. Consequently,
    authenticating IoT devices is crucial to establishing confidence that the devices
    being linked are in fact what they claim to be. Therefore, effective access control
    can regulate who can access and utilize what resources and under what conditions.
    5. Classification of Internet of Things Access Control The term “access control”
    describes a class of security mechanisms that restrict users’ permission to access
    particular components of a networked computing and sensing environment. It is
    a fundamental part of any governance system designed to protect an organization’s
    or a municipality’s Internet of Things infrastructure from outside threats. Access
    control can be physical or logical, depending on the system’s needs being protected.
    An IoT-enabled access control system is a useful tool for ensuring the safety
    of buildings, classrooms, dormitories, and intangible technological assets such
    as servers and computer equipment. Logical access control is a method of controlling
    who may access what is on a network, including computers, servers, and data. Logical
    access control systems examine multiple identifiers such as passwords, PINs, biometric
    scans, cryptographic keys, etc. to verify and provide access to the appropriate
    individuals or entities. Today’s complex IoT landscapes, which include on-premises
    and cloud-based resources, make it difficult to manage an access control system.
    To function, access controls must first determine the identity of the requesting
    device or entity, verify that the requesting process or service is indeed who
    it claims to be, and then allow the requesting account or IP address the privileges
    and access rights corresponding to that identity. Easy-to-Use Reference File systems
    and procedures such as Access Protocol and Security Assertion Markup Language
    are only two examples of the kinds of things that do give access controls by verifying
    and approving users and organizations before providing them access to systems
    and operations. Conclusively, it is worth highlighting variety of access control
    systems available, and it is not uncommon for them to be used in tandem with one
    another as part of an enterprise’s identity and access management (IAM) framework.
    Applications can be installed locally, on the cloud, or in both scenarios. To
    varying degrees, it may prioritize either the internal or external access management
    of an IoT network’s user base. As highlighted in Table 4, in order to determine
    whether a user should be granted access, attribute-based access control (ABAC)
    looks at the user’s characteristics instead of their behavior. The fundamental
    benefit of ABAC is its ease of use, since the underlying technical permission
    settings can be masked behind user profiles, which can be modified by anyone possessing
    the appropriate rights and still ensure the user’s desired degree of access provided
    their attributes are true. Rouhani et al. [114] presented a method that offers
    a degree of transparency to the extent that those requesting access to a resource
    and the administrators of that asset may both advantage from using it. The technique
    that had been proposed presents a system architecture with an application that
    was predicated on Hyperledger Fabric. This technology achieves a high degree of
    effectiveness while maintaining a low level of computation complexity. The viability
    of the suggested approach was demonstrated through the examination of a use case
    involving separate digital libraries. Unfortunately, authors failed to address
    the coefficient of decentralization aspect of futuristic systems. When the Internet
    of Things infrastructure spans more than one point and a portion or all those
    spots run their own identity management, then the IoT infrastructure is said to
    have decentralized access permissions. Such an environment does not have a single,
    consistent policy and mechanism for controlling access to the network. If applied
    access control is not centralized, administration, management, and adherence will
    all be more difficult to manage, which is why it is so important to have logically
    centralized control. Table 4. Access control models and methods for the Internet
    of Things: an analysis. fully triumphed, partially triumphed, not triumphed. Li
    et al. [115] highlighted the ability of CP-WABE to safeguard information security
    on the Internet of Health Things (IoHT) as a crucial component of a highly appreciated
    security technique for attaining flawless access control. To tackle this limitation,
    a novel method of formulating access policies was devised that makes use of 0–1
    coding technology. The strategy’s proponents argue that it can be used to design
    a powerful and adaptable CP-WABE for the IoHT. In the projected method, contextual
    circumstances could enhance each rule’s preset building elements, known as strategy
    bits, which were connected with agents and other functional restrictions. The
    applied steps of reform were: (a) defining rules for adopters, hosts, applications,
    and other entities, as well as activities and resources, (b) forming strategies
    with reusable building blocks called “regulatory elements”, and (c) “governance
    modules”. Access control was tested and found equally effective in firewall, server,
    application, database, and data layer. Song et al. [116], introduced an innovative
    IoT management approach that leverages distributed ledger technology to aid organizations
    in setting up an effective supply chain. The design relies on a peer-to-peer fallback
    procedure, a private data segregation and communication approach, and a security
    token-based authentication and authorization system. The access control system
    was divided into two subsystems: the registrar and the inspection. The primary
    responsibility of the registrar’s role was to enroll data in accordance with a
    registration regulation that must be upheld by all businesses in the supply chain.
    Additionally, it is flexible enough to accommodate rescheduling or even outright
    cancellation. The inspection section monitors the subjects’ behavior and searches
    for signs of misconduct before rendering judgments and handing down penalties.
    Researchers were able to strengthen IoT access control and guarantee the safety
    of all permitted devices by keeping track of all important data and events in
    a distributed ledger. The loss of even a single node in a blockchain network might
    make reaching consensus unfeasible, leading to the eventual collapse of the network.
    The data of the peer with the problem might be lost if it does not commit immediately.
    By employing a backup peer, both the primary and backup peer may connect to the
    inspection server and start collecting real-time data. Without the requirement
    for a dedicated subchannel, sensitive information may be sent and stored utilizing
    the system’s built-in data segregation and communication modules. The projected
    method guaranteed the stability of the system by taking into consideration all
    aspects of network performance and scalability. Considering aforementioned justifications,
    an immutable, transmittable identifier of authority should be used in “capability-based
    access control”. The identification serves as both a link to and authorization
    to utilize a certain resource. To gain access to a feature, a device must go through
    a different channel than the entity itself. Public capabilities may be accessed
    by any device, whereas private ones can be used by only those who have been granted
    access. The IoT node can “borrow” the capability it needs to get a storage pointer
    if it has previously produced and obtained it. Consequently, the form that a capability
    can take upon acquisition is determined at the moment of its creation. Bouras
    et al. [117] presented IoT-CCAC, an IoT consortium-specific distributed capability-based
    access control framework. Since it has the best qualities of both blockchain and
    traditional libraries, a blockchain-based repository is used to achieve excellent
    efficiency. The authorization process confirms (a) the validity of the token,
    (b) the approval of access right, (c) the availability of the asset, and (d) the
    fulfillment of conditions. The IoT-CCAC methodology performed satisfactorily and
    is well suited for smart city and enterprise network use cases. By tracing the
    paths used by credentials, Li et al. [118] proposed “traceable capability-based
    access control (TCAC)” that makes it possible to revoke or modify access permissions.
    To facilitate the verification, denial, and modification of permissions, authors
    designed a novel competence token and established a temporal capability tree (TCT)
    that can produce privilege trends programmatically. Based on the results of the
    tests, TCAC is significantly quicker than both comparative methods, CapBAC [128,129]
    and xDBAuth [130], when it comes to confirming tokens and cancelling or updating
    them. A total of 73.3% of users/devices who were previously unavailable may now
    be located using TCAC’s assignment and random access features. This provides new
    insights into the relationships between permissions and delegation and opens up
    potential strategies for protecting IoT infrastructure throughout the use case
    environment. Fossen [119] advocated a capability-based, four-part approach. When
    interacting with a RESTful API, the web app must save and utilize the tokens granted
    to the user by the “authority-server (AS)”. The AS tracks and controls the tokens
    and functionality. The RESTful API’s filter component does the verification and
    then passes the feature on to the API’s main logic. Logic handles both database
    connectivity and information processing. In a total of nine steps, each part interacts
    with all the others. The filter and the logic were the two main components of
    the RESTful API’s design; the filter was responsible for receiving HTTP requests
    containing access tokens, validating those tokens, and retrieving the corresponding
    attributes before passing them on to the logic. After receiving a request from
    a user, the RESTful API logic runs the requested protocol function for which the
    authority has granted permission. The implemented experiment ensured granular
    control over which API calls were made while using the RESTful interface. The
    framework enabled the programmer to define the user interface options for the
    system. Coarse-grained access control was employed in the traditional library
    implementation, with access representing an entity rather than an attribute of
    content. Unfortunately, a few important design choices (such as, proof-of-concept
    (PoC), delete-all, update-all, read-all, etc. and policy sheets for ruleset API)
    were ignored during access control implementation that restricts supporting complex
    data models. One alternative is to implement “rule-based access control” (RBAC)
    [131]. Using RBAC, admins can grant or revoke privileges to devices based on their
    user profiles and the tasks they need to do. It is possible to categorize devices
    according to their responsibilities, since the amount of system access they need
    is often determined by the tasks they do inside a network. Roles that need access
    to the devices are then granted authorization to do so. If appropriate permissions
    are established for each task, access control will be easy to implement and maintain.
    The procedures of rule-based access control are as follows: the authorization
    rules are implemented throughout the whole access control system and are established
    by the security administrator. After the device has shown its legitimacy, its
    access is granted or denied depending on the comparison between the device’s permissions
    and the group policy. As a result of RBAC, the administrator can save time on
    procedural and ICT (information communication technology) support tasks, make
    the IoT system more secure and compliant, give each user and device only the permissions
    they need to do their job effectively, and free up extra throughput. Saha et al.
    [120] advocated distributed Decentralized Hybrid Access Control for smart contracts
    (DHACS) for the IIoT (industrial Internet of Things). The idea of DHACS was to
    provide a more accessible, dependable, and secure access control mechanism for
    IIoT. The approach depends on the useful properties of blockchain technology,
    particularly the supply of smart contracts that makes possible a decentralized
    heterogeneous access control mechanism. The DHACS consensus process integrated
    many models for access control into a single solution, including role-based models,
    rule-based models, and organizational models. With the current set of ongoing
    operations and their related access constraints in mind, the activity pooler and
    block maker churned out blocks. While DHACS was initially developed for use in
    a private blockchain, it can be simply converted to function with a public blockchain
    or consortium blockchain to accommodate geographically scattered dependencies.
    For blockchain-based permission to be deemed completely decentralized, several
    entities must take part in the process of specifying and evaluating security regulations.
    There are a few challenges with the DHACS, such as how can a decentralized and
    lightweight access control solution be offered for distributed and enhanced IoT
    settings, given that IoT devices have limited computing and storage capacity?
    How can we ensure proper authentication (federated, completely decentralized,
    etc.)? Can an established framework be used, or do many configurations need to
    be combined? What criteria must be met when picking a blockchain scheme (private
    or public)? Attempting to combine RBAC with blockchain technology presented its
    own set of difficulties [132]. The first concern is the incompatibility (lack
    of standardization) of blockchain applications in various contexts and sectors.
    The incompatibility between RBAC and blockchain technology can be addressed by
    designing smart contracts that incorporate RBAC policies. The smart contract can
    specify access control rules based on roles and permissions, and these rules can
    be enforced by the blockchain network. The RBAC policies can be defined by IoT
    network consortium that is deploying the blockchain network, and the smart contract
    can be programmed to ensure that only authorized entities can access the relevant
    resources. The second problem pertains to the amount of power consumed by the
    consensus mechanism that prevents wastage of resources. The process of reaching
    consensus can be energy-intensive, especially when using proof-of-work consensus
    algorithms. The third challenge relates to the latency that can be introduced
    by the additional bandwidth requirements of the blockchain network. Finally, implementing
    blockchain protocols in practical, nonindustrial environments presents a significant
    challenge. Ubiquitous security can be achieved in a specific IoT context by enforcing
    security regulations, closed-loop monitoring, simplifying governance, and implementing
    comprehensive defense. PerBAC (pervasive-based access control model) was based
    on a strategy presented by El Bouanani et al. [121] that was developed after extensive
    research was conducted on several well-known access controls. This strategy was
    being distinguished by its interpretation of the decision-making algorithm, its
    depiction of abstract entities with features as a core principle, and the collaboration
    aspects necessary to maintain the case under a wide range of network conditions.
    When this algorithm is paired with information gathered from IoT environments,
    it could help improve access control decisions based on dynamic rules and entities.
    The proposed comprehension of the features, the dynamic entities, and their exploitation
    through the “aco” protocol generates a unique access control model tailored for
    the IoT paradigm. Thus, as per aforementioned context, in order to establish a
    safe connection between a client device and a server across a network, the server
    must first broadcast an identity to the client device. The service can comply
    with the user’s request if the identification is entered when the user is physically
    close to the service. Pervasive secure access is distinguished by its ability
    to detect risk at each point of interconnection using a variety of techniques
    (such as spotting anomalies in client behavior or considering contextual clues
    such as location and device, etc.) and to request enhanced authentication from
    the client only when necessary. Yu et al. [125] proposed an Internet of Things
    (IoT) supply chain “secure data sharing scheme (SDSM)” that integrates blockchain
    technology with ciphertext-based entity encoding. This method can be used to set
    up tiered partnerships with different levels of access permissions. In addition,
    scholars proposed a metric based on the blockchain’s history ledger that could
    be used to rapidly establish the extent of relationships among users. To support
    partnership-based access controls, the approach combines participant-specific
    features into the ciphertext-based attribute cryptosystem. As a result, access
    permissions can be fine-tuned to a greater degree. It is expected that, by 2025,
    edge devices such as smartphones, wearables, connected automobiles, and so on
    would be responsible for creating 10% of all content and processing 45% of all
    data [133]. Fog computing is expected to replace artificial intelligence, Internet
    of Things application development, and fifth-generation wireless networks (5G)
    within the next five years. It is an extremely virtualized system that connects
    user devices to traditional cloud data centers for storage and processing power.
    Fog computing is characterized by its low latency, position tracking, edge location,
    extensibility, real-time data and cloud interface, and online interaction support.
    To prevent modifications to cache and increase its reliability, Wang et al. [123]
    proposed a new lightweight label-based access control system (LACS). In order
    to ensure security, LACS checks the legitimacy of the approved fog nodes. Specifically,
    the LACS might verify the fog nodes’ eligibility for access to the caching service
    by verifying the authenticity of the shareable files containing encoded label
    values. Increasing efficiency and minimizing risks were the driving forces for
    the creation of LACS. The proposed technique successfully removed the noise source
    (the malicious fog node), freeing up some additional space for data storage, network
    bandwidth, and computational resources. However, its execution time must be reduced
    to the lowest possible measurable value (in milliseconds). On top of that, it
    verifies that requests are coming from approved fog nodes before denying them.
    In fog-enhanced IoT systems, Zhang et al. [127] presented an outsourced access
    control scheme with hidden access structures (OAC-HAS). Three distinct benefits
    result from the OAC-HAS approach. In the first place, it presents a fog-cloud
    computing (FCC) setting that could be used for outsourcing. Then, it creates a
    method for external verification to ensure the integrity of data encryption activities
    carried out by fog nodes. Finally, it ensures confidentiality by sealing off access
    points to sensitive data. The suggested OAC-HAS method accomplishes a dynamic
    access policy, protects users’ privacy, and provides better precision in fog-enhanced
    IoT systems, as evidenced by the security evaluation and experimental outcomes.
    In order to share information with gateways, applications, servers, and cloud
    infrastructures, IoT devices require reliable connections to the aforementioned
    nodes. Communication between devices and the cloud must be continuous and two-way
    for there to be an IoT. Remember that a good proof-of-concept may fail when deployed
    globally; therefore, make connectivity a major priority early in your Internet
    of Things project to avoid problems later on. The majority of internet connections
    today originate from cellular devices. Since it leverages already-existent global
    networks, cellular IoT is an obvious choice for many applications. Since cellular
    networks are already present in virtually every region of the world, the IoT was
    able to leverage this preexisting infrastructure. Lee et al. [124] introduced
    a density-clustering based “base station (BS)” modulation solution for lowering
    the power requirements of IoT networks (DeCoNet). To determine the optimal number
    of BSs and their optimal locations while accounting for differences in user density,
    experts used features gathered via density clustering methods to design the narrowing
    perimeter used to change the status of BSs in complete cellular IoT networks.
    Researchers determined the boundaries of each cluster’s area by averaging the
    distance between the cluster’s farthest border users in DBSCAN with the average
    routing in OPTICS. System-wide security necessitates network level slicing, the
    protection of application-based functions both in distributed clouds and in edge
    computing interconnections. In mobile telecommunication networks, there are four
    main routing components: the radio access network, the core network, the transport
    network, and the linking channel. Different types of traffic—signaling, data,
    and management—are carried by different layers of the network architecture. Every
    “sector” in a network consists of these three components. With regards to cybersecurity,
    all three layers are open to various forms of attack. The three-dimensional world
    is vulnerable to several threats that are universal. The access control system
    of a mobile network is essential. If the security of the core network or the management
    systems is breached, it might put the entire mobile network’s services at danger.
    By applying suitable access control, reduction in data consumption and increased
    energy efficiency can be achieved. Sivaselvan et al. [126] argued that the software
    deployment of authentication protocols in IoT is riddled with security flaws,
    rendering the built-in authentication method useless. However, several of the
    security threats that are common on the Internet of Things can compromise the
    existing authentication methods for IoT that are not based on firmware. In addition,
    there are gaps in context-awareness, accessibility, compatibility, and cybersecurity
    in the state-of-the-art methods to access control for the Internet of Things.
    Due to these constraints, a reliable authentication and authorization solution
    was required to protect the ever-increasing number of IoT devices. As a result,
    Sivaselvan presented SUACC-IoT, a secure and trustworthy universal authentication
    and access management solution for the Internet of Things. Capabilities served
    as the foundation for the planned system, with each capacity acting as a token
    that granted authorized organizations access to the network. The capability token
    is utilized in the proposed system to manage and approve usage of scarce IoT resources.
    Simple cryptographic building blocks such as symmetric key encryption/decryption,
    message authentication codes, and cryptographic hashes are all that are required
    to operate the system. It was shown that SUACC-IoT is safe from the types of attacks
    often used in the IoT, including those that can be executed in probabilistic polynomial
    time. Conclusively, it is worth highlighting that multiple factors increase the
    difficulty of implementing authentication and authorization protocols in an IoT
    setting. That is because most devices are typically limited by their battery,
    memory, network speed, and computing power. The throughput of popular authentication
    protocols makes most conventional verification and permission approaches unfeasible
    to run on resource constrained IoT devices. Another issue is that devices are
    occasionally placed in locations where it would be challenging or impossible to
    implement physical security measures. In addition to this, there is an extremely
    diverse selection of hardware and software stacks that must be taken into consideration.
    As a result, in comparison to more conventional computer settings, we see widespread
    use of a wide variety of devices interacting via a wide variety of standards and
    protocols. 5.1. Cryptographic Paradigm in IoT To ensure that only authorized entities
    have access to data transmitted across IoT networks, cryptography can be used
    for authentication and encryption. When it comes to cryptography in the IoT, there
    are a few tried-and-true methods. Symmetric key encryption [134,135] is often
    used to secure confidential data because of its efficiency and speed. Another
    kind of encryption used in the IoT is public key encryption [136,137], which uses
    a pair of keys—a public one for encrypting and a private one for decrypting. Encrypting
    data with asymmetric keys takes more time, but the private key is never exposed,
    making this technique safer. Cryptography with elliptic curves [138,139], in addition
    to symmetric key algorithms, is used in the IoT. Digital signatures that can be
    used for authentication are generated using elliptic curve cryptography. Lastly,
    a process called hashing [140,141], in which the data is converted into a code
    of a set length, can be used to assure data integrity. This technique ensures
    that no data has been altered in transit. To confine the research boundary, we
    have identified the following lemmas: (a) An IoT device’s security measures must
    meet the standards set forth by the IoT device application. An “always-on” interoperability
    method is preferable to the periodic activation and deactivation of communication
    networks when an IoT system application has to transfer data often. Data from
    IoT devices should be gathered as efficiently as possible and compressed before
    being sent over the network. Coordinating several IoT Services delivered by a
    single communications module within a single IoT device application is essential
    for making efficient use of the network. To avoid seeming as though they are all
    functioning unison, application software operating on IoT devices should utilize
    a random pattern to request network connection. The data should be encrypted from
    edge to edge using the IoT system software. Before beginning any data transfer,
    the IoT device application must verify that it can communicate with the IoT platform.
    The level of security provided by the encryption technique should be commensurate
    with the IoT Service. (b) The IoT-based technology must follow all required communication
    specifications. The application running on the IoT device should not have to constantly
    reestablish the modem’s network connection. When an Internet of Things device
    framework does not require constant information exchange and therefore may function
    with some delay in its IoT Service. (c) IoT infrastructure should follow the throughput,
    latency, and yield-related parameters. The Internet of Things device application
    must include “temporal resynchronization” capability, both for local and distant
    connections. In order to conduct an accurate comparison of the various Internet
    of Things devices regarding communication technology and interoperability, there
    are a few essential factors that need to be taken into consideration. These crucial
    aspects include the type of protocol that is now being utilized, the spectrum
    of the connectivity, the throughput, the reaction time, the power efficiency,
    and the dependability. Zigbee [7], Wi-Fi [8], Bluetooth [9], LoRaWAN [14], and
    Z-wave [142] are just some of the popular choices accessible when it comes to
    protocols. There are also a lot of other possibilities available. It is essential
    to keep in mind that the kind of protocol and interface that is utilized will
    change depending on the particular application, as well as the devices that are
    being utilized. For instance, if two different devices need to communicate with
    one another across a considerable distance, then a wireless protocol such as LoRaWAN
    may be the ideal option. On the other hand, if two devices need to communicate
    with one another over a short distance and the amount of data being sent is minimal,
    then a wired protocol such as Serial Peripheral Interface (SPI) may be the superior
    option. As a result, cryptography is applied in Internet of Things (IoT) deployments
    to safeguard the communication that occurs between the various devices. As a result,
    cryptography is applied in Internet of Things (IoT) deployments to safeguard the
    communication that occurs between the various devices. Examples of typical cryptographic
    approaches that are utilized in Internet of Things (IoT) communication include
    asymmetric-key algorithms such as Elliptic Curve Cryptography (ECC) and hash functions
    such as the Secure Hash Algorithm. Both algorithms are used to hash data. Another
    illustration of this would be symmetric-key algorithms such as the Advanced Encryption
    Standard (AES) (SHA). Additionally, cryptography can be used to safeguard the
    identities of devices on a network and to guarantee that data does not become
    corrupted or altered while it is being transmitted from one point to another.
    Figure 4 illustrates the organizational structure for the classification of cryptographic
    techniques used on the Internet of Things. There is a basic difference between
    symmetric and asymmetric encryption in that the former uses the same key for both
    encryption and decryption, while the latter uses two different keys—one public
    and one private. When compared to symmetric encryption, asymmetric encryption
    is more secure but slower and less efficient, because the private key is not shared.
    5.1.1. Symmetric Ciphering Block Cipher Methods Using a symmetric block cipher,
    information is encrypted and decrypted in chunks of a fixed size. Combining it
    with an authentication mechanism that uses a secret key to encode and decode the
    data adds an extra layer of security, such as Hash-based Message Authentication
    Code (HMAC) [143] or Cipher-based Message Authentication Code (CMAC) [144]. Block
    ciphers can be used in many different modes of operation, allowing for the creation
    of novel encryption systems. In the IoT, block cipher methods provide strong encryption
    for secure data transmission and are well-suited for low-power devices due to
    their efficiency. However, these methods can be vulnerable to attacks if the encryption
    key is compromised or if there are implementation errors, and they may introduce
    processing delays, which can be problematic for real-time applications. Data Encryption
    Standard (DES) IoT networks frequently use the symmetric key encryption method
    known as Data Encryption Standard (DES) [145] to safeguard sensitive data in transit.
    It is a tried-and-true method of keeping sensitive data safe, and it is still
    widely employed today. When encrypting data, DES employs the Feistel network and
    a 56-bit key. Due to the rapid advancement of technology, DES is no longer encouraged
    for use in new applications because of its weak key size in comparison to more
    modern algorithms. A more secure alternative to the DES algorithm is Triple DES
    (3DES) [146]. When compared to the original DES algorithm, 3DES’s key benefit
    is the greater security it provides. Since it employs not just one but three 56-bit
    keys, 3DES is considerably harder to crack than DES, which only employs a single
    56-bit key. In addition, assaults such as related-key attacks are harder to pull
    off against 3DES. Last, but not least, 3DES is compatible with DES, making the
    transition from DES to 3DES a simple one. Advanced Encryption Standard (AES) Alternatively,
    there are three different key lengths available when using an Advanced Encryption
    Standard (AES) [147] to encrypt data: 128 bits, 192 bits, and 256 bits. An AES
    key used in an IoT network must be securely maintained and periodically updated
    to prevent unauthorized access. Computational complexity is the fundamental downside
    of AES. Compared to other symmetric encryption methods such as DES, it is a sluggish
    algorithm. Additionally, AES encryption necessitates extra memory, which might
    be an issue in embedded systems with constrained resources [148]. TwoFish An improved
    version of the TwoFish encryption algorithm was presented by Hsiao et al. [149],
    which used a systematic method of design in conjunction with a chaotic masking-based
    method of exchanging encrypted data. Data transmissions employing chaotic synchronization
    have recently been called into question owing to attacks by hackers who deny data
    across the public network. Therefore, the TwoFish encryption method was combined
    with a chaotic synchronization strategy to foil hacker attacks. By doing so, the
    encrypted communication is shielded in a more secure network for transferring
    information. During our assessment, we found that the enormous block size (i.e.,
    block size of 128 bits, which can support a key size of 256 bits) and complicated
    key scheduling of the TwoFish algorithm make it unsuitable for hardware implementation.
    On top of that, as compared to other block ciphers, the algorithm’s slowness makes
    it less acceptable for use in contexts that necessitate rapid processing. In addition,
    unlike more common algorithms such as AES. TwoFish is a highly secure encryption
    algorithm that uses a large block size and key size, which makes it resistant
    to brute force attacks. Due to the computationally intensive nature of this encryption
    algorithm, it may not be suitable for IoT devices with limited processing power
    and resources. Nevertheless, TwoFish has not been the subject of much cryptographic
    examination because of its low adoption rate. It is possible that this might lead
    to yet-undetected security flaws. Figure 6 presents a taxonomy of cryptographic
    methods applied in the IoT environment. This diagram systematically analyzes the
    security threats present in the IoT environment and the various cryptographic
    methods that can be employed to mitigate those risks. The taxonomy categorizes
    cryptographic methods into four primary groups: symmetric, asymmetric, ciphering
    protocols and hashing methods. Each group has several subcategories that describe
    the specific encryption methods that can be used in the IoT environment. Comprehensive
    details are furnished in subsequent sections. Figure 6. Taxonomy of cryptographic
    methods applied in the IoT environment. Stream Cipher Methods By using the exclusive-or
    (XOR) function, stream ciphers combine a stream of plaintext sequences with a
    stream of pseudorandom cryptographic hash sequences to encrypt data. If used properly,
    stream ciphers can provide a robust layer of security for a wide range of communications
    settings, including wireless networks, the Internet, and associated transactions
    [150]. In order to encrypt data, stream ciphers frequently use a keystream that
    is calculated from a secret key. Data bits or bytes are encrypted using the keystream,
    and then, the keystream is discarded. RC4 The RC4 stream cipher [151] is now among
    the most widely used encryption tools because of its efficiency and simplicity
    of implementation. This stream cipher operates in bytes and allows for a wide
    range of key sizes. Depending on the use case, it can employ either a 64-bit or
    128-bit key size. RC4 is a popular cipher; however, it has several security weaknesses
    that make it less secure than others, such as AES. Furthermore, a brute force
    attack against RC4 may be used to recreate the key if the attacker has enough
    time and the message digests. Given this, it is clear that alternative ciphers
    such as AES should be used wherever possible. 2. Salsa20 A 256-bit key payload
    encryption that does not preserve keystream blocks across transmissions is the
    specialty of the Salsa20 crypt family [152]. When set to counter mode, Salsa20
    functions as a stream cipher that uses a checksum function to encrypt and decrypt
    64-byte messages. This is why it is widely used in many encrypted contexts and
    considered safe. Salsa20′s limited 64-bit nonce input hampers its usefulness in
    many applications. As a result of putting an emphasis on encoding efficiency rather
    than security, Salsa20 can become susceptible to certain attacks (i.e., side-channel
    attacks such as timing attacks) [153]. It can also be difficult to discern if
    decoding was successful, as there is no “crib” or known value in the plaintext.
    The lack of message integrity in Salsa20 presents an additional security risk
    that may reduce trustworthiness. 3. ChaCha20-Poly1305 The ChaCha20 [154] stream
    cipher generates a legitimate, seemingly random stream of bits by combining the
    outcomes of three basic arithmetic operations: addition, rotation, and exclusive-or
    (XOR). To guarantee the authenticity of a communication, Poly1305 authenticators
    generate two tags, an authentication tag and a verification tag. The ChaCha20-Poly1305
    [155] method has a longer nonce intervals and was developed for collision-free
    random number generation. The ChaCha20-Poly1305 algorithm has certain problems
    because of its susceptibility to spoofing attacks. This means that a threat actor
    can create communications that seem to come from a wanted source while in reality
    they are falsified. The method is also susceptible to key reuse attacks, in which
    an adversary encrypts messages using a single nonce and decrypts them using a
    different key. Lastly, but not least, the method is vulnerable to collisions.
    As a result, an adversary who discovers two communications sharing the same authentication
    tag may be able to generate a third message using the same tag. 4. Grain 128a
    Grain 128a [156] is a 128-bit key cipher that has an initialization vector (IV)
    that is 96 bits long and an output stream that is 128 bits long. A linear shift
    register, a nonlinear shift register, and an output function are the fundamental
    building blocks of the Grain-128a. Grain-128a is a lightweight cryptographic algorithm
    suitable for resource-constrained IoT devices. As a result of its birthday paradox
    vulnerability [157], Grain-128a is an insecure system. This indicates that the
    cipher’s security could be breached if an adversary gained access to the pre-output
    stream and utilized it to find a distinguisher that could be used to divulge the
    key. Such an attack would impair the cipher’s ability to keep information private.
    As a result of its slow key setup time, Grain-128a is also unsuitable for applications
    that need speed. Since, Grain-128a has a maximum key size of 128 bits, which could
    be inadequate for certain applications. 5. A5 Family The most widely recognized
    use for the A5 family of symmetric stream ciphers is as the cryptographic protocols
    used in mobile broadband and subsequent technologies. The A5 algorithms [158]
    are developed with a primary emphasis on both efficiency and safety, and they
    are meant to run on inexpensive, commodity servers. GSM is susceptible to attacks
    due to several shortcomings, one of which being the relatively short key length
    utilized in A5. The design and implementation of the algorithms are both incorrect,
    and both can be exploited by attackers, even those with limited computer capability.
    The decryption process might take place in a timeframe that is exceptionally near
    to real time. (a) A5/1 A5/1 is utilized to construct a 114 input bits of output
    sequence for every spurt, and then that string is XORed with the 114 bits before
    the burst is modulated [159]. The initialization of A5/1 is accomplished by utilizing
    a 64-bit key in conjunction with a publicly available 22-bit subscript. The A5/1
    cipher has a number of benefits, some of which include its relatively high resilience
    to well-known attacks, as well as its relatively minimal overhead, which makes
    it acceptable for usage on low-power devices. In addition to this, the key size
    is rather manageable, which contributes to its overall ease of implementation.
    The A5/1 cipher is vulnerable to linear and differential cryptanalysis, and its
    unchanging key requires regular key changes to stay secure. In addition, because
    of its minimal computing overhead, it is susceptible to cyber-attacks using brute
    force. (b) A5/2 A weaker version A5/2 was proposed to offer a scalable solution
    for inter-GSM (Global System for Mobile Communications (GSM) network communication,
    allowing for backwards compatibility with older GSM hardware [160]. A5/2′s benefits
    lie in its minimal complexity and its capability to offer robust encryption with
    a small key size. As an added bonus, it has a significant degree of protection
    against common plaintext vulnerabilities. However, A5/2 has several drawbacks,
    such as being vulnerable to statistical attacks and not being capable of providing
    reliable encryption with larger key lengths. The key used to encode a particular
    message can be determined by an intruder using a related key attack, which A5/2
    is vulnerable to. (c) A5/3 The Kasumi algorithm [161], created by Mitsubishi Electric,
    is a block cipher utilized in 3G and LTE (long-term evolution) cellular standards,
    and it forms the basis of the succeeding version A5/3 [158,162]. Security analysis
    has shown that A5/3, which employs a 128-bit key, is impervious to all currently
    known attacks. The encryption of A5/3 is more secure, it can withstand more known
    plaintext attacks, and it provides better performance in embedded applications.
    The intricacy of the system increases the effort required for both configuration
    and administration, which is a drawback. In addition, A5/3 is more computationally
    complex than A5/1, which makes it more power-hungry and, as a result, less appropriate
    for usage in portable electronic devices. 6. HC-128 Wireless communications, secure
    data storage, and secure access to content are just some of the many use cases
    for HC-128, which is built to withstand linear and differential cryptanalysis
    [163]. OpenSSL [164] and Botan [165] are two examples of cryptographic libraries
    that support it, and its specifications can be found in RFC 4503 [166]. The HC-128
    stream cipher is a great option because of its high level of security and reliable
    implementation. In addition to being extremely quick, it also requires relatively
    little memory. Key sizes can be anything from 64 bits up to 128 bits, providing
    an extra layer of protection. Unfortunately, the requirement for a reasonably
    large array of 4 kb is the most significant shortcoming of the HC-128 method.
    This can be problematic for use when memory is constrained. The method is novel
    and not as frequently used as other algorithms, therefore interoperability concerns
    across applications are possible. 7. Rabbit It is quite safe, since it uses 128-bit
    keys and a 64-bit initialization vector [167]. Compared to other popular encryption
    algorithms, Rabbit stands out due to its exceptional software efficiency, with
    a stated encryption/decryption throughput of 3.7 clock cycles per byte on a Core
    i7 CPU. It is effective in both software and hardware setups. Compared to other
    symmetric encryption techniques, Rabbit is more secure because it uses more complex
    functions for key formation and configuration transitions. These characteristics
    make it harder for an attacker to guess the cipher’s output. Furthermore, Rabbit
    is resistant to timing attacks since it encrypts each byte of data in the same
    amount of time. One limitation that Rabbit cipher may exhibit is that it uses
    a linear feedback shift register, which is not as secure as other applied algorithms
    [168]. Moreover, it has a limited key length of 128 bits, which makes it vulnerable
    to brute force attacks. 5.1.2. Asymmetric Ciphering Asymmetric Ciphering is used
    in the IoT for encryption and authentication. It offers scalability and flexibility
    for IoT applications, making it a great choice for secure communication. If there
    is a requirement for secure communication between two or more devices without
    the sharing of private keys, asymmetric encryption is the way to go. Its widespread
    use has led to its implementation in several practical contexts, including digital
    signatures and encrypted digital communication. Use cases for asymmetric encryption
    include remote access, file transmission, and the exchange of sensitive information.
    Furthermore, authentication and permission for safe access to networks and services
    are commonly provided using asymmetric encryption. Rivest–Shamir–Adleman (RSA)
    Crypto Algorithm RSA is a public key encryption method used in encryption for
    IoT technologies [169]. The RSA method is widely utilized in IoT applications,
    including SSL/TLS certificates, data encryption, and secure communication because
    of its reputation as an efficient and safe algorithm. The RSA method depends on
    how challenging it is to factor a huge integer into its prime components. The
    method employs both a public and private key for encoding and decoding. During
    our analysis and investigation, we have found that if the communication entity
    loses the private key, it becomes irreparable and may lead to security compromise.
    Furthermore, an adversary can read all communications if it controls the private
    key. The size of the payload of an RSA-encrypted communication varies with the
    length of the message and the size of the RSA key. The typical payload size for
    a 2048-bit key is about 256 bytes. Although RSA supports encryption keys of any
    length, the most common sizes are 1024, 2048, and 4096 bits. Encryption is more
    robust when using bigger key sizes. The advantages of using RSA in IoT include
    strong security, widely accepted and implemented, and suitability for key management.
    However, its disadvantages include high computational requirements, slower processing
    speed, and vulnerability to certain attacks if not implemented correctly. Digital
    Signature Standards (DSS) In order to ensure that all data transmitted over the
    internet is secure and legitimate, IoT relies on the Digital Signature Standard
    (DSS) [170,171]. The Federal Information Processing Standard (FIPS) defines methods
    for digital signature generation and verification. By using a specific DSS, information
    can be protected from modification during transmission. It also serves as an authentication
    mechanism for safe access to network-based resources. The major shortcoming of
    DSS is that there are many different digital signature standards and most of them
    are incompatible with each other, which complicates the sharing of data streams.
    Depending on the technique and the message length, the payload size of a DSS signature
    can range from very small to very large. The standard payload size is between
    40 and 50 bytes. DSS encryption keys are normally 1024 bits in length; however,
    this length can be increased for certain uses. For even more protection, IoT devices
    can make use of encryption keys that are 2048 bits in length or more. Elliptical
    Curve Cryptography (ECC) Public key encryption using elliptic curves (also known
    as Elliptic Curve Cryptography or ECC) allows for the generation of cryptographic
    keys that are lower in size, more secure, and more quickly generated than other
    methods [172]. As an alternative to the RSA cryptographic technique, ECC is widely
    utilized in applications and data storage. Due to its low power consumption, short
    key size, and efficiency in encryption and decryption, ECC is well suited for
    usage in IoT devices. ECC is utilized in digital signatures, encrypted file transfers,
    encrypted emails, and secure network access. The ECC security relies on the difficult-to-solve
    elliptic curve discrete logarithm challenge. The payload size of ECC is determined
    by the type of ECC algorithm that is being used in conjunction with the length
    of the encryption key. The payload of an encrypted message is proportional to
    the size of the encryption key. For instance, the payload size and required encryption
    key size for ECC NIST P-256 and ECC NIST P-384 are both 256 and 384 bits, respectively
    [173]. Regrettably, ECC necessitates more computing power and memory than alternative
    public key techniques. Moreover, compared to other public key methods, ECC is
    more susceptible to quantum computing attacks; hence, it is essential to use a
    key size that is high enough to offer the appropriate level of security. Thus,
    ECC offers strong security with smaller key sizes, making it ideal for resource
    constrained IoT devices. However, its implementation requires more computational
    power than traditional cryptography, which can impact performance and increase
    power consumption. NTRUEncrypt The lattice-based encryption system NTRUEncrypt
    [174] can be used to offer post-quantum security for IoT devices. Its lightweight
    architecture makes it ideal for protecting devices with limited resources, such
    as those seen in IoT (Internet of Things) implementations in the linked home,
    industrial, and automotive sectors. Since it makes effective use of resources,
    NTRUEncrypt is also an appealing solution for delivering post-quantum security
    to IoT devices. This makes it an interesting alternative. Depending on the message
    length and the NTRU key size, the NTRUEncrypt payload size will vary. The normal
    payload size for the APR2011_439 configuration [175] is roughly 54 bytes. Keys
    greater than 439 bits are supported by NTRUEncrypt, however this is the default
    length. There is a direct correlation between key size and encryption security;
    bigger keys are more robust. The primary drawback of NTRUEncrypt is the potential
    for higher storage and transmission costs due to the size of its public keys.
    The size of the key used determines how secure it is, and it can be computationally
    costly. 5.1.3. Ciphering Protocols IoT ciphering techniques are applied to encrypt
    data in transit to the cloud or between IoT devices. Verification and encoding
    are often used together in these systems. Cryptographic protocols such as IPSec,
    S/MIME, TLS, and SSH are used to secure data and communications over the internet.
    IPSec is a suite of protocols used for authentication and encryption of IP packets,
    while S/MIME is used for secure data transmission. TLS is the successor to SSL
    and is used to secure web traffic using HTTPS. Finally, SSH is a secure shell
    protocol used for secure remote logins and file transfers. Internet Protocol Security
    (IPSec) Encapsulating Security Payload (ESP) and Authentication Header (AH) are
    two instances of the suite of protocols known collectively as Internet Protocol
    Security (IPSec) [176]. The AH protocol protects the validity and integrity of
    the IP packet, whereas the ESP protocol protects privacy and secrecy. Due to the
    fact that one of the most important goals of the Internet of Things is to ensure
    the safety of data while it is being transmitted between various devices and the
    cloud, IPSec has become increasingly popular. IPv6, the Internet’s next-generation
    protocol, incorporates IPSec by default; nonetheless, IPSec is backwards compatible
    with IPv4. Additionally, IPSec is not just backwards compatible with protocols
    such as TCP/UDP but also with cryptosystems such as the RSA and Digital Signature
    Algorithm (DSA). Furthermore, it can send data across public networks safely,
    since it can tunnel past network address translation (NAT) and firewalls [177].
    Our analysis found that IPSec’s configuration and management can be challenging,
    making it one of the protocol’s key downsides. Moreover, IPSec requires two distinct
    protocols—the AH protocol and the ESP protocol—both of which can be challenging
    to maintain with and debug. In addition to that, IPSec is not equipped to deal
    with multicast traffic; thus, it could not work for your needs. Conversely, IPSec
    does not guarantee the confidentiality of transmitted data, since it does not
    provide end-to-end encryption. Secure/Multipurpose Internet Mail Extensions (S/MIME)
    The Internet of Things uses the encryption standard S/MIME (Secure/Multipurpose
    Internet Mail Extensions) while transferring data across the network [178]. In
    order to perform its two main functions, S/MIME requires the use of digital certificates
    for verification and encryption. When it comes to protecting the data provided
    by Internet of Things devices, enterprises can rest easy knowing that S/MIME provides
    the highest degree of encryption available. Users may quickly and easily adopt
    this protocol to secure their Internet-connected devices, because S/MIME is compatible
    with Windows IoT. S/MIME’s include authentication, nonrepudiation, data integrity,
    and encryption. S/MIME requires a user to have an X.509 digital certificate with
    both a public key and a private key in order to function. Encryption is performed
    with the public key, whereas digital signatures are generated with the private
    key. A communication can only be secure if it is encrypted using the recipient’s
    public key before being sent. Digital signatures require the sender to sign the
    communication using their own private key. For verification, the recipient will
    utilize the sender’s public key. In addition, S/MIME supports secure file transfer
    protocols such as FTPS and SFTP, and it can also be used for secure data transmission
    utilizing Transport Layer Security (TLS) [179]. Lastly, S/MIME also serves to
    establish a secure connection between web servers. One of the limitations of S/MIME
    is that it is not always feasible to authenticate the sender’s identity, which
    might lead to security concerns with regard to the management of identities. Thus,
    S/MIME is a suitable choice for IoT devices that require secure communication
    with end-to-end encryption and digital signatures to protect sensitive data. Nonetheless,
    the need for exchanging public keys can pose difficulties in deploying it on a
    large scale. Moreover, the intricate and resource-intensive implementation of
    S/MIME can have an impact on the performance of devices with limited resources.
    Transport Layer Security (TLS) To protect sensitive information and guarantee
    message authenticity, integrity, and nonrepudiation, TLS is utilized. TLS enables
    authentication using digital certificates and supports several different encryption
    techniques [180]. TLS also reinforces a number of key exchange protocols, such
    as RSA and Diffie-Hellman, in order to enable clients and servers to engage in
    secure connection handshakes with one another. TLS 1.3 is the most recent version
    of the protocol, and it incorporates a few extra security measures [181]. These
    additional security features include forbidding Rivest Cipher 4 (RC4) negotiation,
    perfect forward secrecy (PFS), and required message-digest-5 algorithm (MD5) cryptographic
    hashes. The overhead that relates to the TLS protocol can be problematic for IoT
    servers that have a restricted amount of processing power and memory. This is
    one of the downsides of the TLS protocol. In addition, TLS has the potential to
    be susceptible to man-in-the-middle (MiTM) attacks [182]. However, TLS can also
    increase the processing overhead and communication latency, which may be problematic
    in resource-constrained IoT devices with limited processing power and battery
    life. Secure Shell Protocol (SSH) IoT makes use of a network protocol known as
    the secure shell protocol (SSH) to provide safe access to a variety of resources
    and systems. SSH is utilized in the process of securing, configuring, managing,
    maintaining, and operating network routers, servers, and other components of core
    network [183]. Authentication, data encryption, and data integrity are all covered
    by SSH protocols. An SSH connection encrypts data and communication between two
    devices. Data is encrypted with a symmetric key algorithm while using SSH, such
    as with AES or DES. In addition to this, it authenticates the user by employing
    an asymmetric key method, such as RSA, to exchange keys with them. When authenticating
    communications, SSH is also capable of using a variety of hashing algorithms,
    such as SHA-1 (Secure Hash Algorithm 1) and MD5. In addition, the SSH protocol
    supports a variety of tunneling protocols, such as port forwarding and X11 forwarding,
    which enables users to safely tunnel network connections by using the SSH protocol.
    Since SSH does not provide authentication of the server, an IoT device could not
    be aware if a malicious server is being utilized, because SSH does not support
    authentication of the server. As SSH is not inherently compatible with a few operating
    systems (e.g., Tizen OS v4.0), it is possible that additional software may need
    to be installed in order to use it [184]. This is another one of SSH’s many downsides.
    In fact, SSH is known to make extensive use of a server’s resources, which might
    inhibit its overall performance. In addition, SSH calls for the use of an external
    authentication system and calls for the environment to be appropriately set up
    for security. 5.1.4. Hashing (Integrity) IoT apps employ hashing algorithms such
    as MD5 and SHA-1 to keep data safe. Hash methods are used to generate a fixed-length
    outcome from an input of arbitrary length. The hash has the potential to detect
    any modifications to the primary data, making the latter unchangeable and secure
    [185]. SHA-1 and SHA-2 are the two most common secure hashing algorithms. SHA-1
    is a relatively ambivalent algorithm that generates a 160-bit hash, while SHA-2
    is more secure and generates a 256-bit hash. The most up-to-date member of the
    family, SHA-3, generates a hash value of 512 bits [186]. The fundamental benefit
    of adopting hashing algorithms in Internet of Things applications is that they
    provide a safe method of authenticating data, ensuring that the data has not been
    tampered with and is originating from a trustworthy source [187]. Hashing algorithms
    are perfect for use in encryption, since they are quick to compute and produce
    a different hash for each input. SHA-1 SHA-1 creates a 160-bit hash, considerably
    boosting the security and integrity of stored data. In order to verify that information
    has not been tampered with in transit, the SHA-1 technique is used to generate
    a unique hash for each input. SHA-1 is widely used in IoT applications since it
    is fast and can generate a different hash for each input, and it is also significantly
    faster than its counterparts [188]. To verify that a message has not been tampered
    with, another technique called HMAC (Hash-based Message Authentication Code) is
    used, and it makes use of SHA-1. The primary drawback of SHA-1 is that it lacks
    security; as a result, it is now deemed obsolete and is no longer recommended
    for use in applications that need high levels of security. SHA-2 Numerous IoT
    implementations rely on the secure hashing technique SHA-2 for data transmission
    and storage. It is a hash function used in cryptography that generates an output
    of a predetermined length from the input. When compared to its predecessor, the
    Secure Hash Algorithm 1 (SHA-1), SHA-2 offers increased security and resistance
    to common attack vectors [189]. To generate a fixed-length hash from an input
    message of arbitrary length, SHA-2 relies on the Merkle-Damgard technique. It
    is made up of four individual algorithms: SHA-224, SHA-256, SHA-384, and SHA-512
    [190]. The hashing algorithms SHA-224 and SHA-256 use 32-bit blocks, whereas SHA-384
    and SHA-512 employ 64-bit blocks. SHA-2′s key benefits are its security, speed,
    and reliability. The security provided by SHA-2 is far superior to its predecessor,
    SHA-1. In addition, it is quicker than SHA-1, which makes it applicable for a
    far wider variety of applications. As an added bonus, SHA-2 is secure, since it
    can withstand lengthier attacks [191]. The most significant disadvantage of SHA-2
    is its compatibility, since the length of the hash, which is 256 bits, may be
    excessively large for certain applications. SHA-3 Internet of Things applications
    use the cryptographically robust hashing algorithm SHA-3 to hash data securely.
    Using SHA-3′s hashes is a reliable way to ensure the safety and privacy of data
    with a 512-bit size [152]. SHA-3 is a reliable hashing algorithm, since it cannot
    be compromised by collision attacks [192], unlike SHA-1 and SHA-2. Furthermore,
    SHA-3 is superior to other algorithms in speed and its ability to generate a different
    hash for each input, making it a prime candidate for use in cryptography. The
    main problem of SHA-3 is compatibility concerns. Incompatibilities can occur between
    applications and Runtime environments that do not support SHA-3. The 512-bit hash
    length may also be excessive for some applications. MD5 IoT applications frequently
    use MD5 (message-digest-5), a cryptographic hash function, for purposes including
    data error checking, authentication, and digital signatures. It is designed to
    have minimal collisions and has a low computational cost [193]. Therefore, it
    can be implemented in systems that need a high level of safety. MD5′s key benefits
    in IoT applications are its efficiency, low collision rate [194], and strong security.
    It is very simple to use and incorporate into programs, because it is widely supported
    in most programming languages. The MD5 hashing algorithm is susceptible to collisions,
    which is the primary drawback of employing it in IoT applications. The likelihood
    of two distinct inputs yielding the same hash is minimal, yet it is nevertheless
    possible. This could lead to problems such as authentication bypass. BLAKE2 The
    BLAKE2 hash function is significantly quicker than Sha-256, while yet being at
    least as safe as the accepted standard, SHA-3. For the optimum efficiency on multiprocessor
    or parallel processing CPUs, BLAKE2 provides the eight-way parallel BLAKE2sp,
    as well as the four-way parallel BLAKE2bp. When it comes to the Internet of Things,
    BLAKE2 has the algorithms that are needed to meet network specifications. BLAKE2
    is at its best on 64-bit processors, where it can achieve throughputs of one gigabyte
    per second (3.08 cycles per byte) on an Intel Core i5-6600 [195]. The BLACK2 hash’s
    primary benefits are its high resilience to brute force attacks and its low memory
    requirements. In addition, the technique has modest computing requirements, making
    it suitable for use in low-power Internet of Things devices. The main disadvantage
    of the BLACK2 hash is that it is vulnerable to collision attacks [196]. RIPEMD-160
    Internet of Things (IoT) applications make use of a cryptographic hash function
    called RIPEMD-160, which has a bit length of 160. The RIPEMD-160 algorithm produces
    a one-of-a-kind, unforgeable hash for each input, which can be used to check the
    validity of the information [197]. It is immune to collision attacks, and RIPEMD-160
    is regarded more secure than its predecessor, RIPEMD-128. RIPEMD-160 is ideally
    suited for use in encryption, since it is quicker than many alternative algorithms,
    and it can provide a unique hash for each input. The fundamental flaw of the RIPEMD-160
    cryptographic hash algorithm is that its output is only 160 bits in size. This
    renders the system vulnerable to brute force attacks, since an attacker may try
    every possible value for the 160 bits until they discover one that produces the
    same result as the message being cracked. Whirlpool For the purposes of encryption
    and data integrity checking, Whirlpool generates a 512-bit hash. The Whirlpool
    algorithm creates a unique, immutable hash for each input, which can be used to
    determine whether data is legitimate. Since it is immune to collision attacks,
    Whirlpool is a more robust hashing algorithm than SHA-1, SHA-2, and RIPEMD-160
    [198]. Whirlpool’s primary drawback is that it needs more memory than other hashing
    algorithms to maintain and analyze the data. Furthermore, length extension attacks
    may be used against Whirlpool, allowing an attacker to take a known hash and append
    additional characters to it without altering the resultant hash. Tiger The Tiger
    cryptographic hash method was developed specifically for remote systems. Any message
    submitted to the algorithm will be converted into a 128-bit digest. Tiger can
    withstand brute force attacks while yet being incredibly lightweight and functional
    [199]. Tiger’s key benefit is that it uses minimal processing power, making it
    suitable for use in battery-operated Internet of Things gadgets. Tiger hashing
    is vulnerable to pseudo-near-collision attacks, which can be used to create two
    different inputs that produce the same hash. 6. Roadmap for Securing IoT Devices
    The exponential growth of IoT devices has rendered them vulnerable to cyber-attacks,
    necessitating the development of a roadmap to secure these devices through the
    formulation of guidelines and standards. Such a roadmap must consider the challenges
    inherent in securing IoT devices, including the diverse range of devices and communication
    protocols, resource limitations, and the need for Denial-of-Service (DoS) resistance.
    Additionally, it must consider end-to-end security, novel network architectures,
    bootstrapping of a security domain, and operational challenges. The security measures
    implemented must be able to handle the complexities associated with mobility and
    IP network dynamics, ensure cryptographic agility, and safeguard individual privacy.
    Furthermore, incorporating Artificial Intelligence (AI) and Machine Learning (ML)
    to enhance IoT security is critical. By leveraging AI and ML, entities can significantly
    improve their ability to safeguard sensitive data, forestall cyber-attacks, and
    minimize the risk of business disruption. Likewise, the quantum security rules
    related to IoT can have a significant impact on the security of IoT devices and
    networks. Quantum computing has the potential to break many of the cryptographic
    algorithms that are currently used to secure IoT devices and networks. This means
    that sensitive data, such as personal and operational information, can be at risk
    of being accessed by unauthorized parties. However, the development of quantum-resistant
    cryptographic algorithms can help mitigate these risks. These algorithms are designed
    to withstand attacks from both classical and quantum computers, making them a
    more secure option for IoT devices and networks. In addition, the implementation
    of quantum key distribution (QKD) can provide a higher level of security for data
    transmission between IoT devices. QKD is a method of encrypting data using quantum
    principles, which can make it impossible for a third party to intercept or access
    the data without being detected. In context of access control paradigm, one promising
    future direction is to incorporate contextual information into decisions. This
    means considering the node’s location, time of day, and other factors when determining
    whether to grant access to a resource. Another direction is to leverage the power
    of blockchain technology to implement decentralized access control mechanisms
    that can provide better security and privacy guarantees. Ultimately, access control
    policies need to be updated and refined continually as new threats and vulnerabilities
    emerge. 6.1. How Can Artificial Intelligence (AI) and Machine Learning (ML) Change
    IoT Security? As technology advances, so do the threats to security posed by malicious
    actors. Artificial intelligence (AI) and machine learning are two technologies
    that can be used to protect IoT systems from cyber-attacks in the future. Fundamentally,
    AI can be used to analyze massive amounts of data quickly for potential anomalies
    or suspicious activities, which could indicate a breach in security protocols.
    By leveraging powerful algorithms, AI can detect patterns faster than humans ever
    could and alert network administrators when it finds something out of place before
    any damage is done. This type of proactive approach will help ensure that networks
    remain secure even if attackers try novel methods or techniques not seen before
    by traditional cybersecurity solutions, such as firewalls or antivirus software
    programs. Subsequently, machine learning offers another layer of protection against
    cyber-attacks because it allows computers to learn from past experiences without
    being explicitly programmed with rules on how they should react in certain situations.
    Machine learning models also allow for real time analysis meaning they are always
    up-to date on current threats while still being able to identify new ones as well;
    this helps reduce false positives caused by outdated threat signatures found within
    legacy systems, making them more reliable overall compared to other existing solutions
    out there today. Ultimately, both AI and machine learning offer scalability, which
    means these technologies will not require additional resources every time you
    need them due to their ability to self-adjust according to different parameters
    set forth beforehand. With all these advantages combined into one comprehensive
    package makes clear why many experts believe utilizing artificial intelligence
    and machine learning-based IoT security solutions will become standard going forward,
    protecting device relay data better than ever before. Adversarial attacks, in
    which an adversary deliberately manipulates data to deceive the system, are a
    serious problem for AI and ML, and some algorithms are difficult to read, leading
    to challenges in identifying the underlying cause of security breaches [200].
    Techniques such as explainable AI and adversarial training have been offered by
    researchers as ways to address these issues. Artificial intelligence and machine
    learning have their drawbacks, but they also have their benefits, such as the
    ability to process massive volumes of data and spot anomalous behavior in real
    time [201]. For this reason, including explainable AI and adversarial training
    can improve the trustworthiness and reliability of IoT systems by providing transparency
    and understanding of the AI models and their decision-making processes, as well
    as enhancing the resilience of these systems against potential cyber-attacks and
    adversarial behavior. This can ultimately lead to better performance and user
    experience and increased adoption and acceptance of IoT technologies. 6.2. Risk
    Factors The development of AI and ML-based IoT security is a double-edged sword.
    On the one hand, it offers many advantages in terms of increased efficiency and
    improved protection from cyber threats (i.e., as stated in an earlier section);
    on the other hand, there are potential risks associated with its use that must
    be carefully considered. In this section we have discussed three key areas where
    AI and machine learning can pose a significant risk to IoT security: privacy concerns,
    algorithmic bias, and data breaches. To begin, there are security and privacy
    concerns associated with IoT devices that use artificial intelligence. As these
    systems become increasingly sophisticated at recognizing patterns in user behavior
    or detecting anomalies in system usage data, they may inadvertently collect personal
    information without users’ knowledge or consent, potentially leading to serious
    violations of individual rights, such as the right to privacy under GDPR regulations.
    It is important for IoT network administrators to use these technologies to ensure
    that their policies protect against unauthorized collection while still allowing
    them access only to the necessary data needed for practical monitoring purposes.
    The second issue is the prevalence of acknowledged bias in AI technology employed
    by businesses, from parametric search engine results to facial recognition software
    used by law enforcement organizations worldwide. The incorrect detection of hostile
    behavior on an IoT network can lead to social injustice and false alarms if the
    algorithms employed to make those judgments are biased. Before implementing new
    algorithm-based solutions, businesses should do thorough testing, independent
    audits, and frequent reevaluation procedures. Furthermore, organizations should
    spend the time and effort to set up secure configurations across all connected
    devices. They should also ensure that the patching and updating process is carried
    out regularly to close any newly discovered vulnerabilities before they are exploited
    maliciously. Ultimately, while there are numerous benefits given by the deployment
    of AI and ML-driven Internet of Things security systems, there are also substantial
    concerns that must be considered, lest we face tragic results in the future if
    appropriate precautions are not taken right now. 6.3. Future Directions: Decisive
    Remarks We envision the following future directions of IoT security in the context
    of ML, AI, and pervasive computing: (a) Development of lightweight and efficient
    ML and AI models for IoT devices with limited resources while ensuring their security
    and privacy. (b) Exploration of new security models and protocols for securing
    communication and data exchange among heterogeneous IoT devices and networks.
    (c) Adoption of pervasive hardware-based security solutions such as trusted execution
    environments, secure boot, and secure storage to strengthen the security of IoT
    devices and prevent physical tampering and attacks. (d) Integration of adaptive
    and scalable blockchain technology to enable secure and transparent data sharing
    and management among IoT devices and stakeholders. (e) Design and development
    of new authentication (e.g., enabled with lightweight quantum encryption) and
    access control mechanisms (e.g., continuous authentication, context awareness,
    decentralization, and user-centric) to ensure the integrity and confidentiality
    of IoT data and prevent unauthorized access and usage. (f) Exploration of new
    models and frameworks for addressing privacy and ethical concerns in the collecting,
    processing, and sharing of IoT data, particularly in pervasive computing. 7. Conclusions
    and Our Recommendations The research indicates that, as IoT technology advances,
    the associated security risks also increase. The increasing frequency of cyber-attacks
    involving the exploiting of a typical IoT device to gain access and compromise
    the entire network has underscored the importance of IoT security. Ensuring the
    safety of networks that rely on IoT devices has become an essential priority.
    IoT security encompasses a diverse range of techniques, strategies, protocols,
    and actions that aim to minimize the growing vulnerabilities posed by IoT to modern
    businesses. To ensure that the IoT networks are protected from potential attacks,
    it is crucial that computer science/engineering experts, such as researchers,
    scientists, and academics, stay up to date with the latest IoT security solutions.
    This paper provides a comprehensive overview of the most critical security considerations
    related to the Internet of Things. We briefly review how literature suggests using
    IoT security on various tiers. Furthermore, we give a transient breakdown of the
    IoT threat vectors and mitigation strategies. We analyze the consequences of the
    attack and link them to the countermeasures that have been recommended. IoT-enabled
    enterprises ought to understand and develop comprehensive monitoring tools to
    quickly detect any unusual activities on their networks. These tools should utilize
    advanced detection tools by exploiting enabling technologies, such as machine
    learning and artificial intelligence algorithms, to analyze large datasets generated
    during normal network operations and alert administrators of deviations from the
    norm. By allowing organizations to respond quickly to security incidents and anticipate
    potential threats before they occur, layered-focused defense mechanisms can significantly
    minimize the downtime resulting from cyber-attacks. Author Contributions Conceptualization,
    U.T. and I.A.; methodology, U.T., I.A. and A.K.B.; software, U.T., I.A. and K.S.;
    validation, U.T., I.A. and A.K.B.; formal analysis, U.T., I.A., A.K.B. and K.S.;
    resources, U.T.; data curation, U.T. and K.S.; writing—original draft preparation,
    U.T. and I.A.; writing—review and editing, U.T., A.K.B. and K.S.; visualization,
    U.T. and A.K.B.; supervision, U.T.; project administration, U.T. and funding acquisition,
    U.T. All authors have read and agreed to the published version of the manuscript.
    Funding This research was funded by Prince Sattam bin Abdulaziz University, Saudi
    Arabia through project number 2023/RV/8. Institutional Review Board Statement
    The study was conducted according to the guidelines of the Declaration of Deanship
    of Scientific Research, Prince Sattam Bin Abdulaziz University, Saudi Arabia.
    Informed Consent Statement Not applicable. Data Availability Statement Not applicable.
    Acknowledgments This study was sponsored by Prince Sattam bin Abdulaziz University
    through project number 2023/RV/8. Conflicts of Interest The authors declare no
    conflict of interest. References Das, A.; Yashkova, O. Market Analysis Perspective:
    Worldwide Internet of Things, 2022—Infrastructure and the Intelligent Edge. (IDC)
    from IDC: The Premier Global Market Intelligence Company. October 2022. Available
    online: https://www.idc.com/getdoc.jsp?containerId=US49735922 (accessed on 15
    January 2023). Alaba, F.A.; Othman, M.; Hashem, I.A.; Alotaibi, F. Internet of
    Things security: A survey. J. Netw. Comput. Appl. 2017, 88, 10–28. [Google Scholar]
    [CrossRef] Wani, A.R.; Gupta, S.K.; Khanam, Z.; Rashid, M.; Alshamrani, S.S.;
    Baz, M. A novel approach for securing data against adversary attacks in UAV embedded
    HetNet using identity based authentication scheme. IET Intell. Transp. Syst. Early
    View 2022, 1–19. [Google Scholar] [CrossRef] CONNECT. Fast Innovation Requires
    Fast IT. Building the Internet of Things. December 2022. Available online: https://www.cisco.com/c/dam/global/en_ph/assets/ciscoconnect/pdf/bigdata/jim_green_cisco_connect.pdf
    (accessed on 5 January 2023). NIST. Cybersecurity Framework. Cybersecurity Framework
    Version 1.1. 12 November 2013. Available online: https://www.nist.gov/cyberframework
    (accessed on 5 January 2023). Cao, C.; Tang, Y.; Huang, D.; Gan, W.; Zhang, C.
    IIBE: An Improved Identity-Based Encryption Algorithm for WSN Security. Secur.
    Commun. Netw. 2021, 2021, 1–8. [Google Scholar] [CrossRef] Yu, H.J.; Kim, C.H.;
    Im, S.S.; Oh, S.H. ZigBee Authentication Protocol with Enhanced User Convenience
    and Safety. J. Inf. Secur. 2022, 22, 81–92. [Google Scholar] [CrossRef] Sofi,
    A. Bluetooth Protocol in Internet of Things (IoT), Security Challenges and a Comparison
    with Wi-Fi Protocol: A Review. Int. J. Eng. Tech. Res. 2016, 5, 1–7. [Google Scholar]
    [CrossRef] Barua, A.; Al Alamin, M.A.; Hossain, M.S.; Hossain, E. Security and
    Privacy Threats for Bluetooth Low Energy in IoT and Wearable Devices: A Comprehensive
    Survey. IEEE Open J. Commun. Soc. 2022, 3, 251–281. [Google Scholar] [CrossRef]
    Aloufi, K.S. 6LoWPAN Stack Model Configuration for IoT Streaming Data Transmission
    over CoAP. Int. J. Commun. Netw. Inf. Secur. (IJCNIS) 2022, 11, 304–312. [Google
    Scholar] [CrossRef] Zhang, L.; Ma, M.; Qiu, Y. An enhanced handover authentication
    solution for 6LoWPAN networks. Comput. Secur. 2021, 109, 102373. [Google Scholar]
    [CrossRef] Mbarek, B.; Ge, M.; Pitner, T. Proactive trust classification for detection
    of replication attacks in 6LoWPAN-based IoT. Internet Things 2021, 16, 100442.
    [Google Scholar] [CrossRef] Ingham, M.; Marchang, J.; Bhowmik, D. IoT security
    vulnerabilities and predictive signal jamming attack analysis in LoRaWAN. IET
    Inf. Secur. 2020, 14, 368–379. [Google Scholar] [CrossRef] Ugwuanyi, S.; Paul,
    G.; Irvine, J. Survey of IoT for Developing Countries: Performance Analysis of
    LoRaWAN and Cellular NB-IoT Networks. Electronics 2021, 10, 2224. [Google Scholar]
    [CrossRef] Kuntke, F.; Romanenko, V.; Linsner, S.; Steinbrink, E.; Reuter, C.
    LoRaWAN security issues and mitigation options by the example of agricultural
    IoT scenarios. Trans. Emerg. Telecommun. Technol. 2022, 5, 33. [Google Scholar]
    [CrossRef] Seoane, V.; Garcia-Rubio, C.; Almenares, F.; Campo, C. Performance
    evaluation of CoAP and MQTT with security support for IoT environments. Comput.
    Netw. 2021, 197, 108338. [Google Scholar] [CrossRef] Bilal, D.; Rehman, A.U.;
    Ali, R. Internet of Things (IoT) Protocols: A Brief Exploration of MQTT and CoAP.
    Int. J. Comput. Appl. 2018, 179, 9–14. [Google Scholar] [CrossRef] Tsai, W.C.;
    Tsai, T.H.; Wang, T.J.; Chiang, M.L. Automatic Key Update Mechanism for Lightweight
    M2M Communication and Enhancement of IoT Security: A Case Study of CoAP Using
    Libcoap Library. Sensors 2022, 22, 340. [Google Scholar] [CrossRef] Park, J.H.;
    Kim, H.S.; Kim, W.T. DM-MQTT: An Efficient MQTT Based on SDN Multicast for Massive
    IoT Communications. Sensors 2018, 18, 3071. [Google Scholar] [CrossRef] Lee, J.G.;
    Lee, S.J.; Kim, Y.W. Attack Detection and Classification Method Using PCA and
    LightGBM in MQTT-based IoT Environment. J. Inf. Secur. 2022, 22, 17–24. [Google
    Scholar] [CrossRef] Hussein, N.; Nhlabatsi, A. Living in the Dark: MQTT-Based
    Exploitation of IoT Security Vulnerabilities in ZigBee Networks for Smart Lighting
    Control. IoT 2022, 3, 450–472. [Google Scholar] [CrossRef] Venkatraman, S.; Overmars,
    A. New Method of Prime Factorisation-Based Attacks on RSA Authentication in IoT.
    Cryptography 2019, 3, 20. [Google Scholar] [CrossRef] Hung, C.W.; Hsu, W.T. Power
    Consumption and Calculation Requirement Analysis of AES for WSN IoT. Sensors 2018,
    18, 1675. [Google Scholar] [CrossRef] Sheikhpour, S.; Ko, S.B.; Mahani, A. A low
    cost fault-attack resilient AES for IoT applications. Microelectron. Reliab. 2021,
    123, 114202. [Google Scholar] [CrossRef] Sreekanth, M.; Jeyachitra, R. Implementation
    of area-efficient AES using FPGA for IOT applications. Int. J. Embed. Syst. 2022,
    15, 354. [Google Scholar] [CrossRef] OPEN. MQTT—The Standard for IoT Messaging.
    MQTT—The Standard for IoT Messaging. December 2022. Available online: https://mqtt.org/
    (accessed on 2 January 2023). Muñoz Castañeda, Á.L.; Mata, J.A.A.; Aláiz-Moretón,
    H. Characterization of threats in IoT from an MQTT protocol-oriented dataset.
    Complex Intell. Syst. 2023, 1–16. [Google Scholar] [CrossRef] Kim, G.; Park, J.;
    Chung, K. MQTT-based Gateway System for Auto-configuration of IoT Devices and
    Services. J. KIISE 2019, 46, 385–390. [Google Scholar] [CrossRef] Yu, H.; Park,
    Y. Design and implementation of IIoT edge device for collecting heterogeneous
    machine data. J. Internet Electron. Commer. Resarch 2021, 21, 23–32. [Google Scholar]
    [CrossRef] Vaclavova, A.; Strelec, P.; Horak, T.; Kebisek, M.; Tanuska, P.; Huraj,
    L. Proposal for an IIoT Device Solution According to Industry 4.0 Concept. Sensors
    2022, 22, 325. [Google Scholar] [CrossRef] [PubMed] Pappalardo, M.; Virdis, A.;
    Mingozzi, E. An Edge-Based LWM2M Proxy for Device Management to Efficiently Support
    QoS-Aware IoT Services. IoT 2022, 3, 169–190. [Google Scholar] [CrossRef] Debroy,
    S.; Samanta, P.; Bashir, A.; Chatterjee, M. SpEED-IoT: Spectrum aware energy efficient
    routing for device-to-device IoT communication. Future Gener. Comput. Syst. 2019,
    93, 833–848. [Google Scholar] [CrossRef] Che, B.; Liu, L.; Zhang, H. KNEMAG: Key
    Node Estimation Mechanism Based on Attack Graph for IoT Security. J. Internet
    Things 2020, 2, 145–162. [Google Scholar] [CrossRef] Agrawal, S.; Das, M.L.; Lopez,
    J. Detection of Node Capture Attack in Wireless Sensor Networks. IEEE Syst. J.
    2019, 13, 238–247. [Google Scholar] [CrossRef] Kim, M.; Suh, T. Eavesdropping
    Vulnerability and Countermeasure in Infrared Communication for IoT Devices. Sensors
    2021, 21, 8207. [Google Scholar] [CrossRef] [PubMed] Alharbi, I.A.; Almalki, A.J.;
    Alyami, M.; Zou, C.; Solihin, Y. Profiling Attack on WiFi-based IoT Devices using
    an Eavesdropping of an Encrypted Data Frames. Adv. Sci. Technol. Eng. Syst. J.
    2022, 7, 49–57. [Google Scholar] [CrossRef] Singh, Y.; Mohindru, V. Node authentication
    algorithm for securing static wireless sensor networks from node clone attack.
    Int. J. Inf. Comput. Secur. 2018, 10, 129. [Google Scholar] [CrossRef] Jenisha,
    R. Node to Node Communication Security in IOT Networks. Int. J. Res. Appl. Sci.
    Eng. Technol. 2022, 10, 3212–3226. [Google Scholar] [CrossRef] Staniec, K.; Kowal,
    M. On Vulnerability of Selected IoT Systems to Radio Jamming—A Proposal of Deployment
    Practices. Sensors 2020, 20, 6152. [Google Scholar] [CrossRef] Khadr, M.H.; Salameh,
    H.B.; Ayyash, M.; Elgala, H.; Almajali, S. Jamming resilient multi-channel transmission
    for cognitive radio IoT-based medical networks. J. Commun. Netw. 2022, 24, 666–678.
    [Google Scholar] [CrossRef] Chung, W.J. Modeling and Simulation of Replay Attack
    Detection using V2X Message in Autonomous Vehicles in WSN based IoT Environment.
    Int. J. Eng. Adv. Technol. 2020, 9, 1279–1286. [Google Scholar] [CrossRef] Yildirim,
    M.; Demiroğlu, U.; Şenol, B. An in-depth exam of IoT, IoT Core Components, IoT
    Layers, and Attack Types. Eur. J. Sci. Technol. 2021, 28, 665–669. [Google Scholar]
    [CrossRef] Ramadan, M.; Abdollahi, F. An active approach for isolating replay
    attack from sensor faults. Eur. J. Control 2023, 69, 100725. [Google Scholar]
    [CrossRef] Abdulla, H.; Al-Raweshidy, H.; SAwad, W. ARP Spoofing Detection for
    IoT Networks Using Neural Networks. SSRN Electron. J. 2020, 20, 1–9. [Google Scholar]
    [CrossRef] Singh, A.; Sikdar, B. Adversarial Attack and Defence Strategies for
    Deep-Learning-Based IoT Device Classification Techniques. IEEE Internet Things
    J. 2022, 9, 2602–2613. [Google Scholar] [CrossRef] Mehta, M.; Patel, K. Experimental
    Study of Location Spoofing and Identity Spoofing Attack in Internet of Things
    Network. Int. J. Intell. Inf. Technol. 2022, 18, 1–13. [Google Scholar] [CrossRef]
    Madhurikkha, S.; Sabitha, R. Hierarchical Honey Bee Model to Avoid Sleep Deprivation
    Attack in MANET. Int. J. Eng. Technol. 2018, 7, 358. [Google Scholar] [CrossRef]
    Vivekanadam, B. A Novel Hybrid HNN and Firefly Algorithm to Overcome Denial of
    Sleep Attack on Wireless Sensor Nodes. J. Ubiquitous Comput. Commun. Technol.
    2021, 2, 223–227. [Google Scholar] [CrossRef] Bani-Yaseen, T.; Tahat, A.; Kastell,
    K.; Edwan, T.A. Denial-of-Sleep Attack Detection in NB-IoT Using Deep Learning.
    J. Telecommun. Digit. Econ. 2022, 10, 14–38. [Google Scholar] [CrossRef] Yoon,
    J. Deep-learning approach to attack handling of IoT devices using IoT-enabled
    network services. Internet Things 2020, 11, 100241. [Google Scholar] [CrossRef]
    Abbasi, M.; Plaza-Hernandez, M.; Prieto, J.; Corchado, J.M. Security in the Internet
    of Things Application Layer: Requirements, Threats, and Solutions. IEEE Access
    2022, 10, 97197–97216. [Google Scholar] [CrossRef] Rodionov, A.; Belyanin, V.;
    Gorbunov, A. Improving the Methods for Protecting Information from Unauthorized
    Access. NBI Technol. 2018, 2, 39–43. [Google Scholar] [CrossRef] Aldhyani, T.H.H.;
    Alkahtani, H. Cyber Security for Detecting Distributed Denial of Service Attacks
    in Agriculture 4.0: Deep Learning Model. Mathematics 2023, 11, 233. [Google Scholar]
    [CrossRef] Jin, R.; Zhang, H.; Liu, D.; Yan, X. IoT-based detecting, locating
    and alarming of unauthorized intrusion on construction sites. Autom. Constr. 2020,
    118, 103278. [Google Scholar] [CrossRef] Minu, R.I.; Nagarajan, G.; Munshi, A.;
    Venkatachalam, K.; Almukadi, W.; Abouhawwash, M. An Edge Based Attack Detection
    Model (EBAD) for Increasing the Trustworthiness in IoT Enabled Smart City Environment.
    IEEE Access 2022, 10, 89499–89508. [Google Scholar] [CrossRef] Tahir, M.; Sardaraz,
    M.; Muhammad, S.; Saud Khan, M. A Lightweight Authentication and Authorization
    Framework for Blockchain-Enabled IoT Network in Health-Informatics. Sustainability
    2020, 12, 6960. [Google Scholar] [CrossRef] Ayfaa, B.; Apa, C. LMAAS-IoT: Lightweight
    Multi-factor Authentication and Authorization Scheme for Real-time Data Access
    in IoT Cloud-based Environment. J. Netw. Comput. Appl. 2021, 192, 103177. [Google
    Scholar] [CrossRef] Mohammad, A.; Al-Refai, H.; Alawneh, A.A. User Authentication
    and Authorization Framework in IoT Protocols. Computers 2022, 11, 147. [Google
    Scholar] [CrossRef] Mullen, G.; Meany, L. Assessment of buffer overflow based
    attacks on an IoT operating system. In Proceedings of the 2019 Global IoT Summit
    (GIoTS), Aarhus, Denmark, 17–21 June 2019; pp. 1–6. [Google Scholar] [CrossRef]
    Mazumdar, N.; Roy, S.; Nag, A.; Singh, J.P. A buffer-aware dynamic UAV trajectory
    design for data collection in resource-constrained IoT frameworks. Comput. Electr.
    Eng. 2022, 100, 107934. [Google Scholar] [CrossRef] Akhtar, M.S.; Feng, T. A Systemic
    Security and Privacy Review: Attacks and Prevention Mechanisms over IOT Layers.
    ICST Trans. Secur. Saf. 2022, 8, e5. [Google Scholar] [CrossRef] Zeng, J.Y.; Chang,
    L.E.; Cho, H.H.; Chen, C.Y.; Chao, H.C.; Yeh, K.H. Using Poisson Distribution
    to Enhance CNN-based NB-IoT LDoS Attack Detection. In Proceedings of the 2022
    IEEE Conference on Dependable and Secure Computing (DSC), Edinburgh, UK, 22–24
    June 2022; pp. 1–7. [Google Scholar] Rani, S.J.; Ioannou, I.; Nagaradjane, P.;
    Christophorou, C.; Vassiliou, V.; Charan, S.; Pitsillides, A. Detection of DDoS
    attacks in D2D communications using machine learning approach. Comput. Commun.
    2023, 198, 32–51. [Google Scholar] [CrossRef] Kareem, M.K.; Aborisade, O.D.; Onashoga,
    S.A.; Sutikno, T.; Olayiwola, O.M. Efficient model for detecting application layer
    distributed denial of service attacks. Bull. Electr. Eng. Inform. 2023, 12, 441–450.
    [Google Scholar] [CrossRef] Alduais, N.; Abdullah, J.; Jamil, A. APRS: Adaptive
    real-time payload data reduction scheme for IoT/WSN sensor board with multivariate
    sensors. Int. J. Sens. Netw. 2018, 28, 211. [Google Scholar] [CrossRef] Khosravi,
    M.R.; Samadi, S. Efficient payload communications for IoT-enabled ViSAR vehicles
    using discrete cosine transform-based quasi-sparse bit injection. EURASIP J. Wirel.
    Commun. Netw. 2019, 2019, 262. [Google Scholar] [CrossRef] Wang, H.; Singhal,
    A.; Liu, P. Tackling imbalanced data in cybersecurity with transfer learning:
    A case with ROP payload detection. Cybersecurity 2023, 6, 2. [Google Scholar]
    [CrossRef] Jung, J.H.; Gohar, M.; Koh, S.J. CoAP-Based Streaming Control for IoT
    Applications. Electronics 2020, 9, 1320. [Google Scholar] [CrossRef] Gladson Oliver,
    S.; Purusothaman, T. Lightweight and Secure Mutual Authentication Scheme for IoT
    Devices Using CoAP Protocol. Comput. Syst. Sci. Eng. 2022, 41, 767–780. [Google
    Scholar] [CrossRef] Ahmad, M.Z.; Adenan, A.R.; Rohmad, M.S.; Yussoff, Y.M. Performance
    Analysis of Secure MQTT Communication Protocol. In Proceedings of the 2023 19th
    IEEE International Colloquium on Signal Processing & Its Applications (CSPA),
    Kedah, Malaysia, 3–4 March 2023; pp. 225–229. [Google Scholar] [CrossRef] Jang,
    W.; Jeong, D.; Lee, S. A Method of IoT Object Control based on MQTT for Enhancing
    Object Mobility. J. Korean Inst. Inf. Technol. 2022, 20, 107–119. [Google Scholar]
    [CrossRef] Husnain, M.; Hayat, K.; Cambiaso, E.; Fayyaz, U.U.; Mongelli, M.; Akram,
    H.; Ghazanfar Abbas, S.; Shah, G.A. Preventing MQTT Vulnerabilities Using IoT-Enabled
    Intrusion Detection System. Sensors 2022, 22, 567. [Google Scholar] [CrossRef]
    Celesti, A.; Fazio, M.; Villari, M. Enabling Secure XMPP Communications in Federated
    IoT Clouds Through XEP 0027 and SAML/SASL SSO. Sensors 2017, 17, 301. [Google
    Scholar] [CrossRef] [PubMed] Jun, H.J.; Yang, H.S. Performance of the XMPP and
    the MQTT Protocols on IEC 61850-Based Micro Grid Communication Architecture. Energies
    2021, 14, 5024. [Google Scholar] [CrossRef] Yoshino, D.; Watanobe, Y.; Yaguchi,
    Y.; Nakamura, K.; Ogawa, J.; Naruse, K. AMQP Communication Interface on RT Middleware
    for highly-reliable IoR System Construction. Proc. JSME Annu. Conf. Robot. Mechatron.
    (Robomec) 2019, 2019, 2A1-M09. [Google Scholar] [CrossRef] Srivastava, A.; Shah,
    P. Identification of the Issues in IoT Devices with HSTS Not Enforced and Their
    Exploitation. In Proceedings of the 2021 International Conference on Security
    and Information Technologies with AI, Internet Computing and Big-Data Applications,
    Taichung City, Taiwan, 18–20 November 2021; Springer: Cham, Switzerland, 2023;
    pp. 325–334. [Google Scholar] [CrossRef] Chatzoglou, E.; Kouliaridis, V.; Kambourakis,
    G.; Karopoulos, G.; Gritzalis, S. A hands-on gaze on HTTP/3 security through the
    lens of HTTP/2 and a public dataset. Comput. Secur. 2023, 125, 103051. [Google
    Scholar] [CrossRef] Bezawada, B.; Bachani, M.; Peterson, J.; Shirazi, H.; Ray,
    I.; Ray, I. Behavioral fingerprinting of iot devices. In 2018 Workshop on Attacks
    and Solutions in Hardware Security; ACM: New York, NY, USA, 2018; pp. 41–50. [Google
    Scholar] [CrossRef] Lee, S.; Abdullah, A.; Jhanjhi, N.; Kok, S. Classification
    of botnet attacks in IoT smart factory using honeypot combined with machine learning.
    PeerJ Comput. Sci. 2021, 7, e350. [Google Scholar] [CrossRef] Menard, P.; Bott,
    G.J. Analyzing IOT users’ mobile device privacy concerns: Extracting privacy permissions
    using a disclosure experiment. Comput. Secur. 2020, 95, 101856. [Google Scholar]
    [CrossRef] Bindrwish, F.B.; Ali, A.N.A.; Ghabban, W.H.; Alrowwad, A.; Fallatah,
    N.A.; Ameerbakhsh, O.; Alfadli, I.M. Internet of Things for Digital Forensics
    Application in Saudi Arabia. Adv. Internet Things 2023, 13, 1–11. [Google Scholar]
    [CrossRef] Shanmugapriya, R.; Santhosh Kumar, S.V.N. Comprehensive survey on data
    dissemination protocols for efficient reprogramming in Internet of Things. Concurr.
    Comput. Pract. Exp. 2022, 34, e7280. [Google Scholar] [CrossRef] Salah, S.; Amro,
    B.M. Big picture: Analysis of DDoS attacks map-systems and network, cloud computing,
    SCADA systems, and IoT. Int. J. Internet Technol. Secur. Trans. 2022, 12, 543–565.
    [Google Scholar] [CrossRef] Gowtham, M.; Pramod, H.B. Semantic Query-Featured
    Ensemble Learning Model for SQL-Injection Attack Detection in IoT-Ecosystems.
    IEEE Trans. Reliab. 2022, 71, 1057–1074. [Google Scholar] [CrossRef] Fanani, G.;
    Riadi, I. Analysis of Digital Evidence on Denial of Service (DoS) Attack Log Based.
    Bul. Ilm. Sarj. Tek. Elektro 2020, 2, 70. [Google Scholar] [CrossRef] Anthi, E.;
    Williams, L.; Javed, A.; Burnap, P. Hardening machine learning denial of service
    (DoS) defences against adversarial attacks in IoT smart home networks. Comput.
    Secur. 2021, 108, 102352. [Google Scholar] [CrossRef] Shah, Z.; Ullah, I.; Li,
    H.; Levula, A.; Khurshid, K. Blockchain Based Solutions to Mitigate Distributed
    Denial of Service (DDoS) Attacks in the Internet of Things (IoT): A Survey. Sensors
    2022, 22, 1094. [Google Scholar] [CrossRef] Singhal, P.; Sharma, P.; Arora, D.
    An approach towards preventing iot based sybil attack based on contiki framework
    through cooja simulator. Int. J. Eng. Technol. 2018, 7, 261. [Google Scholar]
    [CrossRef] Pu, C.; Choo, K.K.R. Lightweight Sybil Attack Detection in IoT based
    on Bloom Filter and Physical Unclonable Function. Comput. Secur. 2022, 113, 102541.
    [Google Scholar] [CrossRef] Vaishnavi, S.; Sethukarasi, T. Retraction Note to:
    SybilWatch: A novel approach to detect Sybil attack in IoT based smart health
    care. J. Ambient Intell. Humaniz. Comput. 2022, 14, 539. [Google Scholar] [CrossRef]
    Tripathy, A.K.; Sinha, M.; Mishra, A.K. A sinkhole prevention mechanism for RPL
    in IoT. Int. J. Comput. Sci. Eng. 2020, 23, 262. [Google Scholar] [CrossRef] Jebadurai,
    I.J.; Paulraj, G.J.L.; Jebadurai, J. Mitigating Sinkhole attack in RPL based Internet
    of Things Environment using Optimized K means Clustering technique. In Proceedings
    of the 2022 6th International Conference on Electronics, Communication and Aerospace
    Technology, Coimbatore, India, 1–3 December 2022; pp. 502–507. [Google Scholar]
    [CrossRef] Bilal, A.; Hasany, S.M.N.; Pitafi, A.H. Effective modelling of sinkhole
    detection algorithm for edge-based Internet of Things (IoT) sensing devices. IET
    Commun. 2022, 16, 845–855. [Google Scholar] [CrossRef] Shiranzaei, A.; Khan, R.Z.
    An Approach to Discover the Sinkhole and Selective Forwarding Attack in IoT. J.
    Inf. Secur. Res. 2018, 9, 107. [Google Scholar] [CrossRef] Prathapchandran, K.;
    Janani, T. A trust aware security mechanism to detect sinkhole attack in RPL-based
    IoT environment using random forest—RFTRUST. Comput. Netw. 2021, 198, 108413.
    [Google Scholar] [CrossRef] An, G.H.; Cho, T.H. Improving Sinkhole Attack Detection
    Rate through Knowledge-Based Specification Rule for a Sinkhole Attack Intrusion
    Detection Technique of IoT. Int. J. Comput. Netw. Appl. 2022, 9, 169. [Google
    Scholar] [CrossRef] Yang, N.; Chen, K.; Wang, M. SmartDetour: Defending Blackhole
    and Content Poisoning Attacks in IoT NDN Networks. IEEE Internet Things J. 2021,
    8, 12119–12136. [Google Scholar] [CrossRef] Kaur, R.; Sandhu, J.K.; Pundir, M.;
    Mehta, A. Blackhole Prevention Techniques Using Machine Learning. SSRN Electron.
    J. 2021, 11, 100241. [Google Scholar] [CrossRef] Kumar, R.; Venkanna, U.; Tiwari,
    V. A Time Granular Analysis of Software Defined Wireless Mesh Based IoT (SDWM-IoT)
    Network Traffic Using Supervised Learning. Wirel. Pers. Commun. 2020, 116, 2083–2109.
    [Google Scholar] [CrossRef] Shahraki, A.; Taherkordi, A.; Haugen, Y. TONTA: Trend-based
    Online Network Traffic Analysis in ad-hoc IoT networks. Comput. Netw. 2021, 194,
    108125. [Google Scholar] [CrossRef] Mishra, S. Network traffic analysis using
    machine learning techniques in IoT network. Int. J. Veh. Inf. Commun. Syst. 2022,
    9, 107–123. [Google Scholar] [CrossRef] Li, Y.; Qin, Y. Real-Time Cost Optimization
    Approach Based on Deep Reinforcement Learning in Software-Defined Security Middle
    Platform. Information 2023, 14, 209. [Google Scholar] [CrossRef] Kwon, S.; Park,
    S.; Cho, H.; Park, Y.; Kim, D.; Yim, K. Towards 5G-based IoT security analysis
    against Vo5G eavesdropping. Computing 2021, 103, 425–447. [Google Scholar] [CrossRef]
    Lauria, F. How to Footprint, Report and Remotely Secure Compromised IoT Devices.
    Netw. Secur. 2017, 2017, 10–16. [Google Scholar] [CrossRef] Tang, F.; Kawamoto,
    Y.; Kato, N.; Yano, K.; Suzuki, Y. Probe Delay Based Adaptive Port Scanning for
    IoT Devices with Private IP Address Behind NAT. IEEE Netw. 2020, 34, 195–201.
    [Google Scholar] [CrossRef] Gibson, D. IoT law and order. Netw. Secur. 2021, 2021,
    20. [Google Scholar] [CrossRef] Nguyen-An, H.; Silverston, T.; Yamazaki, T.; Miyoshi,
    T. IoT Traffic: Modeling and Measurement Experiments. IoT 2021, 2, 140–162. [Google
    Scholar] [CrossRef] Kore, A.; Patil, S. IC-MADS: IoT Enabled Cross Layer Man-in-Middle
    Attack Detection System for Smart Healthcare Application. Wirel. Pers. Commun.
    2020, 113, 727–746. [Google Scholar] [CrossRef] Kilinçer, L.F.; Ertam, F.; Şengür,
    A. Automated Fake Access Point Attack Detection and Prevention System with IoT
    Devices. Balk. J. Electr. Comput. Eng. 2020, 8, 50–56. [Google Scholar] [CrossRef]
    Jamil, H.; Ali, A.; Jamil, F. Spoofing Attack Mitigation in Address Resolution
    Protocol (ARP) and DDoS in Software-Defined Networking. J. Inf. Secur. Cybercrimes
    Res. 2022, 5, 31–42. [Google Scholar] [CrossRef] Banadaki, Y.M.; Robert, S. Detecting
    Malicious DNS over HTTPS Traffic in Domain Name System using Machine Learning
    Classifiers. J. Comput. Sci. Appl. 2020, 8, 46–55. [Google Scholar] [CrossRef]
    Humaira, F.; Islam, M.S.; Luva, S.A.; Rahman, M.B. A Secure Framework for IoT
    Smart Home by Resolving Session Hijacking. Glob. J. Comput. Sci. Technol. 2020,
    20, 9–20. [Google Scholar] [CrossRef] Satapathy, A.; Livingston, J. A Comprehensive
    Survey on SSL/ TLS and their Vulnerabilities. Int. J. Comput. Appl. 2016, 153,
    31–38. [Google Scholar] [CrossRef] Rouhani, S.; Belchior, R.; Cruz, R.S.; Deters,
    R. Distributed attribute-based access control system using permissioned blockchain.
    World Wide Web 2021, 24, 1617–1644. [Google Scholar] [CrossRef] Li, H.; Yu, K.;
    Liu, B.; Feng, C.; Qin, Z.; Srivastava, G. An Efficient Ciphertext-Policy Weighted
    Attribute-Based Encryption for the Internet of Health Things. IEEE J. Biomed.
    Health Inform. 2022, 26, 1949–1960. [Google Scholar] [CrossRef] Song, Q.; Chen,
    Y.; Zhong, Y.; Lan, K.; Fong, S.; Tang, R. A Supply-chain System Framework Based
    on Internet of Things Using Blockchain Technology. ACM Trans. Internet Technol.
    2021, 21, 1–24. [Google Scholar] [CrossRef] Bouras, M.A.; Xia, B.; Abuassba, A.O.;
    Ning, H.; Lu, Q. IoT-CCAC: A blockchain-based consortium capability access control
    approach for IoT. PeerJ Comput. Sci. 2021, 7, e455. [Google Scholar] [CrossRef]
    [PubMed] Li, C.; Li, F.; Huang, C.; Yin, L.; Luo, T.; Wang, B. A Traceable Capability-based
    Access Control for IoT. Comput. Mater. Contin. 2022, 72, 4967–4982. [Google Scholar]
    [CrossRef] Fossen, K. Exploring Capability-Based Security in Software Design with
    Rust. Master’s Thesis, The University of Bergen, Bergen, Norway, 2022. Available
    online: https://hdl.handle.net/11250/3001153 (accessed on 5 February 2023). Saha,
    R.; Kumar, G.; Conti, M.; Devgun, T.; Kim, T.H.; Alazab, M.; Thomas, R. DHACS:
    Smart Contract-Based Decentralized Hybrid Access Control for Industrial Internet-of-Things.
    IEEE Trans. Ind. Inform. 2022, 18, 3452–3461. [Google Scholar] [CrossRef] El Bouanani,
    S.; El Kiram, M.A.; Achbarou, O.; Outchakoucht, A. Pervasive-Based Access Control
    Model for IoT Environments. IEEE Access 2019, 7, 54575–54585. [Google Scholar]
    [CrossRef] Astillo, P.V.; Kim, J.; Sharma, V.; You, I. SGF-MD: Behavior Rule Specification-Based
    Distributed Misbehavior Detection of Embedded IoT Devices in a Closed-Loop Smart
    Greenhouse Farming System. IEEE Access 2020, 8, 196235–196252. [Google Scholar]
    [CrossRef] Wang, Q.; Chen, D.; Zhang, N.; Qin, Z.; Qin, Z. LACS: A Lightweight
    Label-Based Access Control Scheme in IoT-Based 5G Caching Context. IEEE Access
    2017, 5, 4018–4027. [Google Scholar] [CrossRef] Lee, W.; Jung, B.C.; Lee, H. DeCoNet:
    Density Clustering-Based Base Station Control for Energy-Efficient Cellular IoT
    Networks. IEEE Access 2020, 8, 120881–120891. [Google Scholar] [CrossRef] Yu,
    C.; Zhan, Y.; Sohail, M. SDSM: Secure Data Sharing for Multilevel Partnerships
    in IoT Based Supply Chain. Symmetry 2022, 14, 2656. [Google Scholar] [CrossRef]
    Sivaselvan, N.; Bhat, K.V.; Rajarajan, M.; Das, A.K.; Rodrigues, J.J.P.C. SUACC-IoT:
    Secure unified authentication and access control system based on capability for
    IoT. Clust. Comput. 2022, 22, 1–20. [Google Scholar] [CrossRef] Zhang, J.; Cheng,
    Z.; Cheng, X.; Chen, B. OAC-HAS: Outsourced access control with hidden access
    structures in fog-enhanced IoT systems. Connect. Sci. 2020, 33, 1060–1076. [Google
    Scholar] [CrossRef] Nakamura, S.; Enokido, T.; Takizawa, M. Information Flow Control
    Based on the CapBAC (Capability-Based Access Control) Model in the IoT. Int. J.
    Mob. Comput. Multimed. Commun. 2019, 10, 13–25. [Google Scholar] [CrossRef] Nakamura,
    S.; Enokido, T.; Takizawa, M. Information Flow Control Based on Capability Token
    Validity for Secure IoT: Implementation and Evaluation. Internet Things 2021,
    15, 100423. [Google Scholar] [CrossRef] Silva, C.; Barraca, J.P. Dynamic Delegation-based
    Privacy Preserving in IoT Architectures. In Proceedings of the 2022 9th International
    Conference on Future Internet of Things and Cloud (FiCloud), Rome, Italy, 22–24
    August 2022; pp. 46–54. [Google Scholar] [CrossRef] Pal, S.; Jadidi, Z. Protocol-Based
    and Hybrid Access Control for the IoT: Approaches and Research Opportunities.
    Sensors 2021, 21, 6832. [Google Scholar] [CrossRef] Namane, S.; Ben Dhaou, I.
    Blockchain-Based Access Control Techniques for IoT Applications. Electronics 2022,
    11, 2225. [Google Scholar] [CrossRef] Nadkarni, A.; McCarthy, D.; Filkins, P.;
    Mehra, R. Internet of Things and Intelligent Edge: Infrastructure. IDC: The Premier
    Global Market Intelligence Company. Available online: https://www.idc.com/getdoc.jsp?containerId=IDC_P35569
    (accessed on 30 December 2022). Kandele, S.; Paul, S. Key Assignment Scheme with
    Authenticated Encryption. IACR Trans. Symmetric Cryptol. 2018, 2018, 150–196.
    [Google Scholar] [CrossRef] Sarkar, A. A symmetric neural cryptographic key generation
    scheme for Iot security. Appl. Intell. 2022, 22, 1–19. [Google Scholar] [CrossRef]
    López Delgado, J.L.; Álvarez Bermejo, J.A.; López Ramos, J.A. Homomorphic Asymmetric
    Encryption Applied to the Analysis of IoT Communications. Sensors 2022, 22, 8022.
    [Google Scholar] [CrossRef] Suresh Kumar, M.; Purosothaman, T. Multivariate Broadcast
    Encryption with Group Key Algorithm for Secured IoT. Comput. Syst. Sci. Eng. 2023,
    45, 925–938. [Google Scholar] [CrossRef] Liu, Z.; Seo, H. IoT-NUMS: Evaluating
    NUMS Elliptic Curve Cryptography for IoT Platforms. IEEE Trans. Inf. Secur. 2019,
    14, 720–729. [Google Scholar] [CrossRef] Chauhan, C.; Ramaiya, M.K.; Rajawat,
    A.S.; Goyal, S.B.; Verma, C.; Raboaca, M.S. Improving IoT Security Using Elliptic
    Curve Integrated Encryption Scheme with Primary Structure-Based Block Chain Technology.
    Procedia Comput. Sci. 2022, 215, 488–498. [Google Scholar] [CrossRef] Han, K.;
    Lee, W.K.; Hwang, S.O. cuGimli: Optimized implementation of the Gimli authenticated
    encryption and hash function on GPU for IoT applications. Clust. Comput. 2021,
    25, 433–450. [Google Scholar] [CrossRef] Chien, H.-Y. Two-Level-Composite-Hashing
    Facilitating Highly Efficient Anonymous IoT and D2D Authentication. Electronics
    2021, 10, 789. [Google Scholar] [CrossRef] Braghin, C.; Lilli, M.; Riccobene,
    E. A Model-based approach for Vulnerability Analysis of IoT Security Protocols:
    The Z-Wave case study. Comput. Secur. 2022, 127, 103037. [Google Scholar] [CrossRef]
    Castellon, C.E.; Roy, S.; Kreidl, O.P.; Dutta, A.; Bölöni, L. Towards an Energy-Efficient
    Hash-based Message Authentication Code (HMAC). In Proceedings of the 2022 IEEE
    13th International Green and Sustainable Computing Conference (IGSC), Pittsburgh,
    PA, USA, 24–25 October 2022; pp. 1–7. [Google Scholar] [CrossRef] Narlagiri, S.;
    Malathy, V.; Sudharani, C.; Sridevi, C.; Chakradhar, A. Modified advanced encryption
    standard using cipher based message authentication code algorithm. In Proceedings
    of the AIP Conference Proceedings, Sathyamangalam, India, 25–26 March 2022; AIP
    Publishing LLC: Melville, NY, USA, 2022; Volume 2418, p. 030011. [Google Scholar]
    [CrossRef] Kureshi, R.R.; Mishra, B.K. A Comparative Study of Data Encryption
    Techniques for Data Security in the IoT Device. In Internet of Things and Its
    Applications; Springer: Singapore, 2022; pp. 451–460. [Google Scholar] [CrossRef]
    Rivero, J.; Huynh, T.N.B.; Smith-Evans, A.; Thao, O.; Cheng, Y. Analyzing the
    Efficiency of Lightweight Symmetric Ciphers on IoT Devices. California State University
    Sacramento. 2021, pp. 1–6. Available online: https://scholarworks.calstate.edu/downloads/m326m683z
    (accessed on 27 February 2023). Altameem, A.; Poonia, R.C.; Saudagar, A.K.J. A
    Hybrid AES with a Chaotic Map-Based Biometric Authentication Framework for IoT
    and Industry 4.0. Systems 2023, 11, 28. [Google Scholar] [CrossRef] Tsantikidou,
    K.; Sklavos, N. Hardware Limitations of Lightweight Cryptographic Designs for
    IoT in Healthcare. Cryptography 2022, 6, 45. [Google Scholar] [CrossRef] Hsiao,
    F.H. Chaotic synchronization cryptosystems using a Twofish encryption algorithms.
    Asian J. Control 2022, 24, 1022–1041. [Google Scholar] [CrossRef] Bhagat, V.;
    Kumar, S.; Gupta, S.K.; Chaube, M.K. Lightweight cryptographic algorithms based
    on different model architectures: A systematic review and futuristic applications.
    Concurr. Comput. Pract. Exp. 2023, 35, e7425. [Google Scholar] [CrossRef] Hachim,
    E.A.W.; Abbas, T.; Gaata, M.T. Modified RC4 Algorithm for Improve Data Protection
    in Cloud Environment. In Proceedings of the 2022 International Conference on Information
    Technology Systems and Innovation (ICITSI), Bandung, Indonesia, 8–9 November 2022;
    pp. 295–299. [Google Scholar] [CrossRef] Najm, H. Data authentication for web
    of things (WoT) by using modified secure hash algorithm-3 (SHA-3) and Salsa20
    algorithm. Turk. J. Comput. Math. Educ. (TURCOMAT) 2021, 12, 2541–2551. [Google
    Scholar] [CrossRef] Paul, K. Vulnerability Analysis of Salsa20: Differential Analysis
    and Deep Learning Analysis of Salsa20. Master’s Thesis, Universitetet i Sørøst-Norge,
    Norge, Norway, 2020. [Google Scholar] Aamir, M.; Sharma, S.; Grover, A. ChaCha20-in-Memory
    for Side-Channel Resistance in IoT Edge-Node Devices. IEEE Open J. Circuits Syst.
    2021, 2, 833–842. [Google Scholar] [CrossRef] Serrano, R.; Duran, C.; Sarmiento,
    M.; Pham, C.K.; Hoang, T.T. ChaCha20–Poly1305 Authenticated Encryption with Additional
    Data for Transport Layer Security 1.3. Cryptography 2022, 6, 30. [Google Scholar]
    [CrossRef] Liu, W.; Gao, J. Quantum security of Grain-128/Grain-128a stream cipher
    against HHL algorithm. Quantum Inf. Process. 2021, 20, 1–22. [Google Scholar]
    [CrossRef] Carlson, A.; Dutta, I.; Ghosh, B. Using the Collision Attack for Breaking
    Cryptographic Modes. In Proceedings of the 2022 13th International Conference
    on Computing Communication and Networking Technologies (ICCCNT), Kharagpur, India,
    3–5 October 2022; pp. 1–7. [Google Scholar] [CrossRef] Madani, M.; Tanougast,
    C. FPGA implementation of an optimized A5/3 encryption algorithm. Microprocess.
    Microsyst. 2020, 78, 103212. [Google Scholar] [CrossRef] Gundaram, P.K.; Tentu,
    A.N.; Allu, S.N. State Transition Analysis of GSM Encryption Algorithm A5/1. J.
    Commun. Softw. Syst. 2022, 18, 36–41. [Google Scholar] [CrossRef] Zhang, B. Cryptanalysis
    of GSM encryption in 2G/3G networks without rainbow tables. In Proceedings of
    the25th International Conference on the Theory and Application of Cryptology and
    Information Security, Kobe, Japan, 8–12 December 2019; Springer: Cham, Switzerland,
    2019; pp. 428–456. [Google Scholar] [CrossRef] Muthalagu, R.; Jain, S. A novel
    modified KASUMI block chiper for global system for mobile communications. Int.
    J. Comput. Appl. 2021, 43, 805–811. [Google Scholar] [CrossRef] Manz, O. Symmetric
    Ciphers. In Encrypt, Sign, Attack. Mathematics Study Resources; Springer: Berlin/Heidelberg,
    Germany, 2022; Volume 4. [Google Scholar] [CrossRef] Kumar, A.; Mishra, P.R.;
    Pal, S.K.; Ojjela, O. Analysis of variability and degree of non-linearity of HC-128.
    J. Discret. Math. Sci. Cryptogr. 2021, 24, 2093–2108. [Google Scholar] [CrossRef]
    Walden, J. The impact of a major security event on an open source project: The
    case of OpenSSL. In Proceedings of the 17th International Conference on Mining
    Software Repositories, Seoul, Republic of Korea, 29–30 June 2020; pp. 409–419.
    [Google Scholar] [CrossRef] Alrowaithy, M.; Thomas, N. Investigating the performance
    of C and C++ cryptographic libraries. In Proceedings of the 12th EAI International
    Conference on Performance Evaluation Methodologies and Tools, Palma, Spain, 12–15
    March 2019; pp. 167–170. [Google Scholar] [CrossRef] Boesgaard, M.; Vesterager,
    M.; Zenner, E. Information on RFC 4503. 21 January 2021. Available online: https://www.rfc-editor.org/info/rfc4503
    (accessed on 13 January 2023). Surantha, N. Secure Portable Virtual Private Network
    with Rabbit Stream Cipher Algorithm. Procedia Comput. Sci. 2018, 135, 259–266.
    [Google Scholar] [CrossRef] Marpaung, J.A.; Ndibanje, B.; Lee, H.J. Higher-Order
    Countermeasures against Side-Channel Cryptanalysis on Rabbit Stream Cipher. J.
    Inf. Commun. Converg. Eng. 2014, 12, 237–245. [Google Scholar] [CrossRef] Sajid,
    F.; Hassan, M.A.; Khan, A.A.; Rizwan, M.; Kryvinska, N.; Vincent, K.; Khan, I.U.
    Secure and Efficient Data Storage Operations by Using Intelligent Classification
    Technique and RSA Algorithm in IoT-Based Cloud Computing. Sci. Program. 2022,
    2022, 2195646. [Google Scholar] [CrossRef] Bhutta, M.N.M.; Bhattia, S.; Alojail,
    M.A.; Nisar, K.; Cao, Y.; Chaudhry, S.A.; Sun, Z. Towards Secure IoT-Based Payments
    by Extension of Payment Card Industry Data Security Standard (PCI DSS). Wirel.
    Commun. Mob. Comput. 2022, 2022, 9942270. [Google Scholar] [CrossRef] Kerry, C.F.;
    Gallagher, P.D. Digital Signature Standard (DSS); FIPS PUB 186–4; Information
    Technology Laboratory, National Institute of Standards and Technology: Gaithersburg,
    MD, USA, 2013. [Google Scholar] Alhayani, B.S.; Hamid, N.; Almukhtar, F.H.; Alkawak,
    O.A.; Mahajan, H.B.; Kwekha-Rashid, A.S.; Alkhayyat, A. Optimized video internet
    of things using elliptic curve cryptography based encryption and decryption. Comput.
    Electr. Eng. 2022, 101, 108022. [Google Scholar] [CrossRef] Verma, U.; Bhardwaj,
    D. A secure lightweight anonymous elliptic curve cryptography-based authentication
    and key agreement scheme for fog assisted-Internet of Things enabled networks.
    Concurr. Comput. Pract. Exp. 2022, 34, e7172. [Google Scholar] [CrossRef] Matiyko,
    A.A. The Comparative Analysis of NTRUCipher and NTRUEncrypt Encryption Schemes.
    Mathematical and Computer Modelling. Ser. Tech. Sci. 2019, 19, 81–87. [Google
    Scholar] [CrossRef] DENIAL. Bouncycastle Fails NTRU Generation. Stack Overflow.
    15 April 2014. Available online: https://stackoverflow.com/questions/23095051/bouncycastle-fails-ntru-generation
    (accessed on 13 January 2023). Hauser, F.; Haberle, M.; Schmidt, M.; Menth, M.
    P4-IPsec: Site-to-Site and Host-to-Site VPN With IPsec in P4-Based SDN. IEEE Access
    2020, 8, 139567–139586. [Google Scholar] [CrossRef] Hong, S. Issues and Security
    on IPSec: Survey. J. Digit. Converg. 2014, 12, 243–248. [Google Scholar] [CrossRef]
    Khan, A.F.; Anandharaj, G. A Multi-layer Security approach for DDoS detection
    in Internet of Things. Int. J. Intell. Unmanned Syst. 2020, 9, 178–191. [Google
    Scholar] [CrossRef] Aravind, K.A.; Naik, B.R.; Chennarao, C.S. Combined Digital
    Signature with SHA Hashing Technique-based Secure System: An Application of Blockchain
    using IoT. Turk. J. Comput. Math. Educ. (TURCOMAT) 2022, 13, 402–418. [Google
    Scholar] Varo, Q.; Lardier, W.; Yan, J. Dynamic Reduced-Round TLS Extension for
    Secure and Energy-Saving Communication of IoT Devices. IEEE Internet Things J.
    2022, 9, 23366–23378. [Google Scholar] [CrossRef] Kumari, N.; Mohapatra, A.K.
    A comprehensive and critical analysis of TLS 1.3. J. Inf. Optim. Sci. 2022, 43,
    689–703. [Google Scholar] [CrossRef] Alwazzeh, M.; Karaman, S.; Shamma, M.N. Man
    in The Middle Attacks Against SSL/TLS: Mitigation and Defeat. J. Cyber Secur.
    Mobil. 2020, 9, 449–468. [Google Scholar] [CrossRef] Timko, A.M. Cybersecurity
    of Internet of Things Devices: A Secure Shell Implementation. 2022. Available
    online: https://urn.fi/URN:NBN:fi:amk-202205139197 (accessed on 10 March 2023).
    Kaiser. SSH Client/Server for SM-R760. SSH Client/Server for SM-R760|Tizen Developers.
    3 February 2001. Available online: https://developer.tizen.org/forums/general-support/ssh-clientserver-sm-r760
    (accessed on 13 January 2023). Ganeshkumar, P.; Albalawi, T. A Locality-Sensitive
    Hashing-Based Jamming Detection System for IoT Networks. Comput. Mater. Contin.
    2022, 73, 5943–5959. [Google Scholar] [CrossRef] Khadidos, A.O.; Shitharth, S.;
    Khadidos, A.O.; Sangeetha, K.; Alyoubi, K.H. Healthcare Data Security Using IoT
    Sensors Based on Random Hashing Mechanism. J. Sens. 2022, 2022, 1–17. [Google
    Scholar] [CrossRef] Wang, F.; Zhu, M.; Wang, M.; Khosravi, M.R.; Ni, Q.; Yu, S.;
    Qi, L. 6G-Enabled Short-Term Forecasting for Large-Scale Traffic Flow in Massive
    IoT Based on Time-Aware Locality-Sensitive Hashing. IEEE Internet Things J. 2021,
    8, 5321–5331. [Google Scholar] [CrossRef] Lin, C.H.; Liu, J.C.; Chen, J.I.Z.;
    Chu, T.P. On the Performance of Cracking Hash Function SHA-1 Using Cloud and GPU
    Computing. Wirel. Pers. Commun. 2019, 109, 491–504. [Google Scholar] [CrossRef]
    Martino, R.; Cilardo, A. Designing a SHA-256 processor for blockchain-based IoT
    applications. Internet Things 2020, 11, 100254. [Google Scholar] [CrossRef] Zellagui,
    A.; Hadj-Said, N.; Ali-Pacha, A. Comparative Study Between Merkle-Damgård And
    Other Alternative Hashes Construction. In Proceedings of the Second Conference
    on Informatics and Applied Mathematics IAM, Guelma, Algeria, 24–25 April 2019;
    Volume 180, pp. 30–34. [Google Scholar] Al-Odat, Z.A.; Khan, S.U.; Al-Qtiemat,
    E. A modified secure hash design to circumvent collision and length extension
    attacks. J. Inf. Secur. Appl. 2022, 71, 103376. [Google Scholar] [CrossRef] Tang,
    Y.; Zeng, G.; Han, W. Classification of disturbance vectors for collision attack
    in SHA-1. Sci. China Inf. Sci. 2015, 58, 1–10. [Google Scholar] [CrossRef] Kumar,
    K.K.; Ramaraj, E.; Srikanth, B.; Rao, A.S.; Prasad, P.B.V.N. Role of MD5 Message-Digest
    Algorithm for Providing Security to Low-Power Devices. In Proceedings of the 2022
    6th International Conference on Intelligent Computing and Control Systems (ICICCS),
    Madurai, India, 25–27 May 2022; pp. 352–358. [Google Scholar] [CrossRef] Kuznetsov,
    A. Parallel algorithm for MD5 collision attack. Program Syst. Theory Appl. 2015,
    6, 61–72. [Google Scholar] [CrossRef] RFC 7693. BLAKE2. BLAKE2—Fast Secure Hashing.
    13 June 2018. Available online: https://www.blake2.net/ (accessed on 14 January
    2023). EL Makhtoum, H.; Bentaleb, Y. Comparative Study of Keccak and Blake2 Hash
    Functions. In Networking, Intelligent Systems and Security; Springer: Singapore,
    2022; pp. 343–350. [Google Scholar] [CrossRef] Liu, F.; Dobraunig, C.; Mendel,
    F.; Isobe, T.; Wang, G.; Cao, Z. Efficient collision attack frameworks for RIPEMD-160.
    In Proceedings of the 39th Annual International Cryptology Conference, Santa Barbara,
    CA, USA, 18–22 August 2019; Springer: Cham, Switzerland, 2019; pp. 117–149. [Google
    Scholar] [CrossRef] Asare, B.T.; Quist-Aphetsi, K.; Nana, L. Using RC4 and whirlpool
    for the encryption and validation of data in IoT. In Proceedings of the 2019 International
    Conference on Cyber Security and Internet of Things (ICSIoT), Accra, Ghana, 29–31
    May 2019; pp. 114–117. [Google Scholar] [CrossRef] Venkatesan, R.; Srinivasan,
    B.; Rajendiran, P. Tiger hash based AdaBoost machine learning classifier for secured
    multicasting in mobile healthcare system. Clust. Comput. 2019, 22, 7039–7053.
    [Google Scholar] [CrossRef] Waguie, F.T.; Al-Turjman, F. Artificial Intelligence
    for Edge Computing Security: A Survey. In Proceedings of the 2022 International
    Conference on Artificial Intelligence in Everything (AIE), Lefkosa, Cyprus, 2–4
    August 2022; pp. 446–450. [Google Scholar] [CrossRef] Arp, D.; Quiring, E.; Pendlebury,
    F.; Warnecke, A.; Pierazzi, F.; Wressnegger, C.; Rieck, K. Dos and don’ts of machine
    learning in computer security. arXiv 2020, arXiv:2010.09470. [Google Scholar]                Disclaimer/Publisher’s
    Note: The statements, opinions and data contained in all publications are solely
    those of the individual author(s) and contributor(s) and not of MDPI and/or the
    editor(s). MDPI and/or the editor(s) disclaim responsibility for any injury to
    people or property resulting from any ideas, methods, instructions or products
    referred to in the content.  © 2023 by the authors. Licensee MDPI, Basel, Switzerland.
    This article is an open access article distributed under the terms and conditions
    of the Creative Commons Attribution (CC BY) license (https://creativecommons.org/licenses/by/4.0/).
    Share and Cite MDPI and ACS Style Tariq, U.; Ahmed, I.; Bashir, A.K.; Shaukat,
    K. A Critical Cybersecurity Analysis and Future Research Directions for the Internet
    of Things: A Comprehensive Review. Sensors 2023, 23, 4117. https://doi.org/10.3390/s23084117
    AMA Style Tariq U, Ahmed I, Bashir AK, Shaukat K. A Critical Cybersecurity Analysis
    and Future Research Directions for the Internet of Things: A Comprehensive Review.
    Sensors. 2023; 23(8):4117. https://doi.org/10.3390/s23084117 Chicago/Turabian
    Style Tariq, Usman, Irfan Ahmed, Ali Kashif Bashir, and Kamran Shaukat. 2023.
    \"A Critical Cybersecurity Analysis and Future Research Directions for the Internet
    of Things: A Comprehensive Review\" Sensors 23, no. 8: 4117. https://doi.org/10.3390/s23084117
    Note that from the first issue of 2016, this journal uses article numbers instead
    of page numbers. See further details here. Article Metrics Citations Crossref   24
    Scopus   23 Web of Science   7 ads   7 PMC   1 PubMed   1 Google Scholar   [click
    to view] Article Access Statistics Article access statistics Article Views 28.
    Dec 7. Jan 17. Jan 27. Jan 6. Feb 16. Feb 26. Feb 7. Mar 17. Mar 0k 20k 40k 60k
    80k For more information on the journal statistics, click here. Multiple requests
    from the same IP address are counted as one view.   Sensors, EISSN 1424-8220,
    Published by MDPI RSS Content Alert Further Information Article Processing Charges
    Pay an Invoice Open Access Policy Contact MDPI Jobs at MDPI Guidelines For Authors
    For Reviewers For Editors For Librarians For Publishers For Societies For Conference
    Organizers MDPI Initiatives Sciforum MDPI Books Preprints.org Scilit SciProfiles
    Encyclopedia JAMS Proceedings Series Follow MDPI LinkedIn Facebook Twitter Subscribe
    to receive issue release notifications and newsletters from MDPI journals Select
    options Subscribe © 1996-2024 MDPI (Basel, Switzerland) unless otherwise stated
    Disclaimer Terms and Conditions Privacy Policy"'
  inline_citation: '>'
  journal: Sensors
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: 'A Critical Cybersecurity Analysis and Future Research Directions for the
    Internet of Things: A Comprehensive Review'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
