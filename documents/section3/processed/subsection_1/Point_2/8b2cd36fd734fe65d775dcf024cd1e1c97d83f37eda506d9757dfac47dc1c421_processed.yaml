- DOI: https://doi.org/10.1109/access.2018.2866491
  analysis: 'This paper mainly focuses on the role of Fog Computing in real-time IoT
    applications and how it can help address the challenges of data collection, processing,
    and transmission in these applications. The specific paragraphs contain relevant
    information on different aspects of the topic:


    **Paragraph 1 (highlighted in verbatim_quote1):**

    - Explains the benefits of using Fog Computing for IoT applications, such as reduced
    latency, improved data processing capability, and enhanced security and privacy.


    **Paragraph 2 (highlighted in verbatim_quote2):**

    - Discusses the key features of Fog Computing, including its hierarchical architecture,
    decentralized nature, and use of IoT devices as edge nodes for data collection
    and processing.


    **Paragraph 3 (highlighted in verbatim_quote3):**

    - Presents a taxonomy of Fog Computing based on the requirements of IoT applications,
    covering aspects such as infrastructure, platform, and application requirements.


    **Relevance to the research question:**

    - The paper provides a comprehensive overview of Fog Computing and its role in
    IoT applications, addressing the need for real-time data processing and efficient
    resource management in these applications.

    - The taxonomy presented in the paper helps in categorizing and understanding
    the specific requirements of IoT applications in terms of infrastructure, platform,
    and application design.

    - The discussion on Fog Computing features and benefits aligns with the research
    question by highlighting the key capabilities of Fog Computing in addressing the
    challenges of data collection, processing, and transmission in IoT applications.'
  authors:
  - Ranesh Kumar Naha
  - Saurabh Garg
  - Dimitrios Georgakopoulos
  - Prem Prakash Jayaraman
  - Longxiang Gao
  - Yong Xiang
  - Rajiv Ranjan
  citation_count: 374
  full_citation: 'Ranesh Kumar Naha; Saurabh Garg; Dimitrios Georgakopoulos; Prem
    Prakash Jayaraman; Longxiang Gao; Yong Xiang; Rajiv Ranjan, "Fog Computing: Survey
    of Trends, Architectures, Requirements, and Research Directions," in IEEE Access,
    vol. 6, pp. 47980-48009, 2018, doi: 10.1109/ACCESS.2018.2866491.'
  full_text: '>

    This website utilizes technologies such as cookies to enable essential site functionality,
    as well as for analytics, personalization, and targeted advertising purposes.
    To learn more, view the following link: Privacy Policy Manage Preferences IEEE.org
    IEEE Xplore IEEE SA IEEE Spectrum More Sites Subscribe Donate Cart Create Account
    Personal Sign In Browse My Settings Help Institutional Sign In All Books Conferences
    Courses Journals & Magazines Standards Authors Citations ADVANCED SEARCH Journals
    & Magazines >IEEE Access >Volume: 6 Fog Computing: Survey of Trends, Architectures,
    Requirements, and Research Directions Publisher: IEEE Cite This PDF Ranesh Kumar
    Naha; Saurabh Garg; Dimitrios Georgakopoulos; Prem Prakash Jayaraman; Longxiang
    Gao; Yong Xiang; Rajiv Ranjan All Authors 360 Cites in Papers 14369 Full Text
    Views Open Access Comment(s) Abstract Document Sections I. Introduction II. Overview
    of Fog Computing III. Difference Between Fog and Cloud Computing Paradigm IV.
    Related Paradigms and Technologies V. Architecture of Fog Computing Show Full
    Outline Authors Figures References Citations Keywords Metrics Abstract: Emerging
    technologies such as the Internet of Things (IoT) require latency-aware computation
    for real-time application processing. In IoT environments, connected things generate
    a huge amount of data, which are generally referred to as big data. Data generated
    from IoT devices are generally processed in a cloud infrastructure because of
    the on-demand services and scalability features of the cloud computing paradigm.
    However, processing IoT application requests on the cloud exclusively is not an
    efficient solution for some IoT applications, especially time-sensitive ones.
    To address this issue, Fog computing, which resides in between cloud and IoT devices,
    was proposed. In general, in the Fog computing environment, IoT devices are connected
    to Fog devices. These Fog devices are located in close proximity to users and
    are responsible for intermediate computation and storage. One of the key challenges
    in running IoT applications in a Fog computing environment are resource allocation
    and task scheduling. Fog computing research is still in its infancy, and taxonomy-based
    investigation into the requirements of Fog infrastructure, platform, and applications
    mapped to current research is still required. This survey will help the industry
    and research community synthesize and identify the requirements for Fog computing.
    This paper starts with an overview of Fog computing in which the definition of
    Fog computing, research trends, and the technical differences between Fog and
    cloud are reviewed. Then, we investigate numerous proposed Fog computing architectures
    and describe the components of these architectures in detail. From this, the role
    of each component will be defined, which will help in the deployment of Fog computing.
    Next, a taxonomy of Fog computing is proposed by considering the requirements
    of the Fog computing paradigm. We also discuss existing research works and gaps
    in resource allocation and scheduling, fault tolerance, simulation tools, and
    Fog-based microser... (Show More) Taxonomy of Fog computing based on the requirements.
    Published in: IEEE Access ( Volume: 6) Page(s): 47980 - 48009 Date of Publication:
    22 August 2018 Electronic ISSN: 2169-3536 DOI: 10.1109/ACCESS.2018.2866491 Publisher:
    IEEE Funding Agency: SECTION I. Introduction Individuals and organizations are
    increasingly becoming dependent on computers and smart devices to deal with daily
    tasks. These devices are generating data via various sensors and applications.
    As a result, organizations are generating and storing huge amounts of data on
    a regular basis [1]. After the proliferation of IoT, data generated by sensors
    has increased enormously. With this sudden increase in the volume of data being
    produced and inability of conventional databases to process various forms of structured
    and unstructured data, big data analytics has attained great attention in recent
    years. Every organization is now prioritizing the analysis of collected data to
    extract useful insights in order to make important decisions [2]. Nowadays, organizations
    need a dynamic IT infrastructure because of the shift to cloud computing due to
    its accessibility, scalability, and pay-per-use features. The most common services
    provided by the cloud are known as Software as a Service (SaaS), Platform as a
    Service (PaaS), and Infrastructure as a Service (IaaS), all of which are heading
    towards Anything as a Service (XaaS) [3]. However, data generated from billions
    of sensors, referred to as big data, cannot be transferred and processed in the
    cloud. In addition, some IoT applications need to be processed faster than the
    cloud’s current capability. This problem can be solved by using the Fog computing
    paradigm, which harnesses the processing power of devices located near users (idle
    computing power) to support utilization of storage, processing, and networking
    at the edge [4]. Fog computing is a decentralized computing concept, which does
    not exclusively rely on any central component like cloud computing [5], [6]. It
    is able to overcome the high latency problem of the cloud by using idle resources
    of various devices near users. However, Fog computing relies on the cloud to do
    complex processing. Unlike cloud computing, Fog computing is a decentralized computing
    concept, where the many devices around us, which have computation capacity, are
    utilized. Currently, even a low- specification smartphone has processing capacity,
    sometimes with multiple cores. Hence, many devices like smartphones, switches,
    routers, base stations, and other network management devices equipped with processing
    power and storage capacity can act as Fog devices. The resources of these devices
    are idle outside of peak hours. Many research issues relating to Fog computing
    are emerging due to its ubiquitous connectivity and heterogeneous organization.
    In the Fog computing paradigm, key issues are the requirements and the deployment
    of Fog computing environment. This is because the devices that exist in Fog environments
    are heterogeneous: therefore, the question that arises is how will Fog computing
    tackle the new challenges of resource management and failure handling in such
    a heterogeneous environment? Hence, it is necessary to investigate the very basic
    requirements for all other related aspects such as deployment issues, simulations,
    resource management, fault tolerance, and services. Several reviews [5], [7]–[12]
    have been done on Fog computing. Here, we present the focus and survey domains
    of these review works in brief. Similar concepts of Fog computing, definitions,
    application scenarios, and numerous issues are described by one study [7]. Hu
    et al. [8] presented the hierarchical architecture of Fog computing and technologies
    like computing, communication, and storage technologies, namely resource management,
    security, and privacy protection that support Fog deployment and application.
    Baccarelli et al. [9] surveyed Fog computing and the Internet of Everything (IoE)
    with an integrated point of view of Fog computing and IoE. Varshney and Simmhan
    [10] reviewed various dimensions of application characteristics, system architecture,
    and platform abstractions of edge, Fog, and cloud ecosystems. Perera et al. [11]
    reviewed the Fog computing domain from the platform perspectives of developers
    and end users towards building a sustainable sensing infrastructure for smart
    city applications. Mahmud et al. [5] presented a taxonomy of Fog computing according
    to the identified challenges and its key features. The proposed taxonomy provides
    a classification of the existing works in Fog computing. Mouradian et al. [12]
    reviewed Fog architecture and algorithms based on six different evaluation criteria,
    namely heterogeneity, QoS management, scalability, mobility, federation, and interoperability.
    However, none of the studies had investigated taxonomy based on the requirements
    of infrastructure, platform, and application in Fog computing. Moreover, none
    of them comprehensively investigated fault tolerance, resource management, or
    microservices in Fog computing. We consider the aforementioned current issues
    and discuss these extensively and also highlight how cloud computing-related solutions
    could be employed in the Fog in some cases. The contributions of this review work
    can be summarized as follows: Present the research trends in Fog computing by
    investigating the number of published research works and search occurrences in
    Google Scholar. Review of several Fog computing architectures and presentation
    of a detailed architecture, as most of the previous researchers only presented
    high-level architecture. Present a taxonomy by considering the requirements of
    infrastructure, platform, and application in the Fog computing paradigm. Identify
    Fog computing research gaps in resource allocation and scheduling, fault tolerance,
    simulation tools, and Fog-based microservices. Address the limitations of current
    research works and some open issues in infrastructure, platform, and applications.
    From this survey, the industry and research community will be able to gain insight
    into the requirements for building a Fog computing environment with a better understanding
    of resource management in the Fog. The remainder of this paper is organized as
    follows: Section II surveys definitions and research trends in Fog computing.
    A technical comparison between Fog and cloud paradigms presents in section III.
    Section IV discusses computing paradigms similar to Fog computing. Section V presents
    related works on Fog computing architecture and discusses the components of the
    Fog computing architecture. Section VI shows the taxonomy of Fog computing by
    reviewing its requirements. Section VII presents various application dimension
    of Fog computing. Section VIII discusses current state-of-the-art Fog computing
    technology. Section IX presents open issues and future research direction. Section
    X concludes the paper. SECTION II. Overview of Fog Computing The term ‘Fog computing’
    was proposed in 2012 by researchers from Cisco Systems [13]. Processing application
    logic and data at the edge is not a new concept. The concept of Edge computation
    emerged around the 2000s [14], [15] and another similar concept, cloudlets, was
    introduced in 2009 [16]. Both Cloudlets and Fog computing are the advancements
    of a similar concept, which revolves around processing at the edge level. While
    cloudlets are applied in the mobile network, Fog computing is applied to connected
    things such as IoT, which plays into the concept of IoT [17]. Fog is both a virtualized
    and non-virtualized computing paradigm that provides networking, storage, and
    computation services amid cloud servers and IoT devices [4], [13]. However, these
    services are not completely located at the network edge. The Fog is a distributed
    computing approach that mainly focuses on facilitating applications, which require
    low latency services [18], Fog computing also supports non-latency aware services.
    It is obvious that using idle computation resources near the users will improve
    overall service performance, if the volume of processing were not that high. A
    huge number of heterogeneous nodes will be connected to the Fog. These nodes include
    sensors and actuators among others [13]. Computation is performed in Fog devices
    when necessary and storage facilities are also available for a short period of
    time, at least in most Fog devices. Time-sensitive computation in the Fog is done
    without the involvement of third parties, and in most cases, is done by the Fog
    processing devices. According to Yi et al. [7], the Fog computing paradigm supports
    the running of new services or basic network functions and applications in a sandboxed
    environment similar to cloudlets. However, the subject is still a research challenge
    because the question of how the Fog will provide these service still remains.
    In addition, will the Fog have cloud service providers or will it be like a single
    entity as a whole? Figure 1 shows a basic model of Fog Computing. Fog devices,
    Fog servers, and gateways are the basic computation components in the Fog environment.
    Any device that has computation, networking, and storage capabilities can act
    as a Fog device. These devices include set-top boxes, switches, routers, base
    stations, proxy servers or any other computing device. Fog servers that manage
    several Fog devices and Fog gateways are responsible for translation services
    between heterogeneous devices in the Fog computing environment. Fog gateways also
    provide translation services between IoT, Fog, and cloud layers. New challenges
    in this emerging computing paradigm have emerged in the past couple of years.
    FIGURE 1. A model of Fog computing. Show All In this section, we discuss the various
    definitions of Fog computing and define Fog computing from our point of view.
    In addition, we discuss and analyze research trends in Fog computing. Finally,
    we compare the technical differences between Fog computing and cloud computing.
    A. Definition of Fog Computing Fog computing is a distributed computing paradigm
    where processing is done at the edge of the network with seamless integration
    of the cloud infrastructure. It enables a computing facility for IoT environments
    or other latency sensitive application environments. It is estimated that about
    50 billion “things” will be connected to the Internet by 2020 [19]. Transferring
    all data from all connected devices for processing on the cloud will need massive
    amounts of bandwidth and storage. All devices are not connected to the controller
    via IP but connected by some other IoT industrial protocols. Because of this,
    a translation process is also needed for the processing or storing of information
    from IoT devices. Various researchers have defined Fog computing in different
    ways. Some examples are as follows: “Fog computing is a highly virtualized platform
    that provides compute, storage, and networking services between IoT devices and
    traditional cloud computing data centers, typically, but not exclusively located
    at the edge of network.” [13] “Fog computing is a scenario where a huge number
    of heterogeneous (wireless and sometimes autonomous) ubiquitous and decentralised
    devices communicate and potentially cooperate among them and with the network
    to perform storage and processing tasks without the intervention of third parties.
    These tasks can be for supporting basic network functions or new services and
    applications that run in a sandboxed environment. Users leasing part of their
    devices to host these services get incentives for doing so.” [20] “The term Fog
    computing or Edge Computing means that rather than hosting and working from a
    centralized cloud, Fog systems operate on network ends. It is a term for placing
    some processes and resources at the edge of the cloud, instead of establishing
    channels for cloud storage and utilization.” [21] The first definition of Fog
    computing was presented by Bonomi et al. [13], where they addressed the computing
    paradigm as a highly virtualized platform. However, some IoT devices such as smartphones
    are not virtualized but could also be a part of the Fog infrastructure, as some
    processing could still be done. According to Cisco [22], the Fog computing paradigm
    provides an ideal place to analyze most data near the devices that produce and
    act on that data instantaneously. The Fog is located near things that are able
    to process and act on the data generated. The devices that are within the Fog
    environment are known as Fog devices. These nodes can be deployed at any place
    with a connectivity to the network: on the power pole, on the factory floor, alongside
    the road, alongside the railway line, in a vehicle, inside a shopping mall, on
    an oil rig, etc. A device that has processing, storage, memory, and network capability
    can act as a Fog device. Although the Fog extends the cloud, technically it resides
    in between the cloud and IoT devices and handles processing and storage tasks
    in close proximity to the user. Yi et al. [7] stated that the definition given
    by Vaquero and Rodero-Merino [20] is debatable and a definition that can distinguish
    clearly between Fog computing and other related computing paradigms is still required.
    The definition given by IBM [21] represents Edge and Fog computing as the same
    computing paradigm. According to Shi et al. [23], Fog computing focuses more on
    the infrastructure side while edge computing focuses more on the things’ side.
    Furthermore, Edge computing is not spontaneously associated with any cloud-based
    services such as SaaS, IaaS, and PaaS [5]. In brief, Table 1 summarizes Fog definitions
    provided by various research works. TABLE 1 Summary of Fog Computing Definitions
    Considering the above definitions, we define Fog computing as follows: Fog computing
    is a distributed computing platform where most of the processing will be done
    by virtualized and non-virtualized end or edge devices. It is also associated
    with the cloud for non-latency-aware processing and long-term storage of useful
    data by residing in between users and the cloud. In our definition, we considered
    all devices with computing and storage capacity as Fog devices and also more precisely
    identified the role of the cloud in the Fog computing environment. B. Fog Computing
    Research Trends Growing attention towards processing data closer to the users
    has been observed among industries and the academia in the past few years. Handling
    IoT-generated data at the edge level will help improve overall processing time.
    In this section, we investigate Fog and other related technological trends for
    the past few years in the research community. According to the Gartner hype cycle,
    in July 2017 [24], the peak emerging technology is the smart home, which would
    perform better with the incorporation of the Fog computing environment. A Hype
    Cycle [24] represents common patterns of new trending technologies. Fog computing
    can also enable latency-aware smart home services in a more efficient and convenient
    way, especially for emergency response smart home applications. According to the
    Gartner hype cycle demonstration, some other influencing technologies include
    virtual assistants, autonomous vehicles, IoT platforms, smart robots, edge computing,
    and smart workspaces, which are required to support latency-aware applications.
    All these mentioned technologies could benefit from the support of the Fog computing
    paradigm due to latency sensitiveness, connectivity to the cloud, and edge-level
    data processing capability. Except for the autonomous vehicle technology, all
    other aforementioned technologies will reach the market adoption threshold in
    the next 10 years. Besides the hype cycle analysis, we analyzed the search occurrence
    of Fog and other related technologies in Google Scholar. In addition, the number
    of papers available in different digital libraries related to the Fog was also
    analyzed. Google Scholar search occurrences of various similar technologies to
    Fog were investigated in the past few years, as presented in Figure 2. According
    to the data, edge computing is the topmost searched item in Google Scholar compared
    to other similar technologies. However, the search trend decreased by more than
    three times in the past eight years for edge computing. Mobile cloud computing
    and mobile edge computing are the other two top-searched computing paradigm after
    edge computing. The lowest trend observed was for dew computing and Fog dew computing.
    While the trend for edge computing is decreasing, Fog computing related to scholarly
    searches is increasing year by year, and has increased by 2.5 times from 2010
    to 2017. This shows that Fog computing is the fastest growing research area in
    academia and will have a great impact on the industry as well. FIGURE 2. Search
    occurrence of similar technologies like the Fog in Google Scholar. Show All Fog
    computing topic search in the Web of Science shows that the number of scholarly
    articles has more than doubled between 2015 and 2016, as per Figure 3. The first
    paper with ‘Fog computing’ in its title was published in 2012. Since then, about
    564 journal and conference articles have been published on this topic in the four
    major digital libraries (Web of Science, Science Direct, IEEE Xplore, and ACM),
    as presented in Figure 4. Cloud computing first emerged in 2008 [25]. This shows
    that Fog computing publications have dramatically increased, as no study in this
    area was seen in the couple of years following the introduction of cloud computing
    research in 2008 (see Figure 5). FIGURE 3. No. of Fog computing-related papers
    in the Web of Science (as Feb 2018). Show All FIGURE 4. Number of publications
    with ”Fog computing” in the title in the four major digital libraries. Show All
    FIGURE 5. Published articles with the title cloud computing in the Web of Science.
    Show All From our observation, it is obvious that the interest in Fog computing
    research is rapidly increasing. Idle resources in the form of devices near users
    can be utilized within the Fog computing concept. Thus, a clear direction to market
    the adoption and technological development of Fog deployment has emerged. SECTION
    III. Difference Between Fog and Cloud Computing Paradigm Fog computing architectures
    are based on Fog clusters where multiple Fog devices participate to cooperate
    with the processing. On the other hand, datacenters are the main physical components
    of clouds. Because of this, cloud computing has high operational costs and energy
    consumption. By comparison, energy consumption and operation costs in the Fog
    computing paradigm is low. The Fog is located closer to the user, so the distance
    between users and Fog devices could be one or a few hops, which is also agreed
    by Hu et al. [8]. However, according to Mahmud et al. [26], the distance between
    users to the Fog is one or two hops. Again, Luan et al. [27] argued that the distance
    should be one hop with wireless connectivity. Yet, all agreed with the distance
    between the users to the cloud, which is a multi-hop distance. Due to the distance,
    communication latency for the cloud is always high compared to the Fog. The cloud
    is a more centralized approach while the Fog is a more distributed approach based
    on geographical orchestration [26]. Real-time Interaction is not possible for
    the cloud due to its high latency, but this problem can be easily resolved by
    Fog computing. On the other hand, the rate of failure in the Fog is high because
    of wireless connectivity, decentralized management, and power failure [26], [28]–[30].
    Most devices in Fog environments will be connected wirelessly since smart gadgets
    and handheld devices will be participating in Fog systems [31]. These devices,
    and other network management devices, are mostly decentralized. These devices
    could fail when software is not managed correctly. Users may not be aware of malicious
    software that could lead to device failure. Moreover, Fog processing could fail
    in other cases as well, for example, each Fog device is responsible for performing
    its own application processing. So, the IoT application processing in a Fog device
    always takes second priority. If the Fog device is fully utilized by the application
    of the device itself, then it will fail to do any Fog processing. Hence, the scheduling
    of applications and resources in the Fog is more complex. In addition, failure
    handling in the Fog is competitive because of power failure, which is only an
    issue because the devices run on battery power. Altogether, Table 2 shows the
    technical differences between the cloud and the Fog. TABLE 2 Technical Difference
    Between Fog and Cloud Definitely, it cannot be said that the Fog can replace the
    cloud. We cannot even conclude that the Fog is better than the cloud either, both
    contribute differently via fulfilling different perspectives and requirements.
    SECTION IV. Related Paradigms and Technologies Fog computing uses computing resources
    near underlying networks, located between the traditional cloud and edge devices,
    to provide better and faster application processing and services [13]. Several
    similar computing paradigms exist besides Fog computing such as Mobile Cloud Computing
    (MCC), Mobile-Edge Computing (MEC), Edge Computing, Dew Computing, and Fog-dew
    computing. In cloud computing, all IoT devices are directly connected to the cloud
    and computation totally depends on the cloud. However, all the above similar technologies
    do not exclusively depend on the cloud, but depend on some intermediate devices
    for computation; some of them do not even require a connection to the cloud. Figure
    6 shows the high-level architecture of these technologies. FIGURE 6. High level
    architecture of Mobile Cloud Computing (MCC), Mobile Edge Computing (MEC), Edge
    Computing (EC), Dew Computing (DC), Fog Computing (FC) and Fog Dew Computing (FDC).
    Show All A. Mobile Cloud Computing (MCC) Remote execution of offloaded mobile
    services is done with the support of MCC near end users [32], [33]. MCC overcomes
    the computational, energy, and storage resource limitation of smart mobile devices.
    Generally, a lightweight cloud server (cloudlet) is placed at the edge of the
    network [34] to overcome these issues. MCC is a mobile computing technology, which
    provides unrestricted functionality, mobility, and storage facility through heterogeneous
    network connectivity. This technology also provides unified elastic computing
    resources by following the pay-per-use model. It also provides access to data,
    application, and cloud via the Internet for mobile users. It is expected that
    this technology will be applied in education, urban and rural development, healthcare,
    and more realistic social networking in the future [32]. Nowadays, many computation-intensive
    applications are widely available, such as Augmented Reality, computer vision
    and graphics, speech recognition, machine learning, planning and decision-making,
    and natural language processing applications. However, simply designing powerful
    mobile devices will not meet the requirements for these applications [33]. Rather,
    the applications require edge processing as well as collaboration with the cloud
    for complex processing. Thus, mobile computing demands fundamental changes to
    cloud computing, for example, a low-latency middle tier, programming models to
    enable seamless remote execution, basic mobile cloud services such as presence
    services, cloud infrastructure optimization for mobile applications, memcache
    services, and so on [33]. The convergence of mobile cloud computing is predicated
    on a reliable, end-to-end network, and high bandwidth, which isdifficult to guarantee
    in harsh environments. One of the solutions to this deep-rooted problem is the
    VM-based cloudlets located at a closer location to the mobile device [34]. B.
    Mobile Edge Computing (MEC) MEC proposes the co-location of computing and storage
    resources at the base stations of cellular networks [35]. MEC could either be
    connected or disconnected to cloud datacenters in a remote location. Hence, MEC
    supports two- or three-tier hierarchical application deployments along with end
    mobile devices [36]. In a MEC ecosystem, a new device called the MEC server needs
    to be deployed near base station towers to provide processing and storage capabilities
    at the edge. Four participants are involved in this computing paradigm, which
    are the mobile end users, network operators, Internet infrastructure provider
    (InPs),and application service provider. Mobile end users are the main consumer
    of the system and request their service via user equipment (UE). Network operators
    manage and maintain the operation of base stations, mobile core network, and MEC
    servers. InPs maintain Internet connectivity and routers. Application service
    providers host the application services in the content delivery networks (CDN)
    or within a data centers. Processing of requests from the UE will search out the
    closest MEC. The MEC server is capable of processing user request instead of forwarding
    it to remote Internet services. In a case where it is not possible to process
    or complete a request at the MEC sever; the request will be forwarded to remote
    CDNs or data centers [35]. According to Klas [36], MEC is the evolution of mobile
    base stations. It is a natural development. It is a collaborative deployment of
    telecommunication and IT networking. This computing paradigm enables new vertical
    business segments and services to individual end users and enterprise consumers.
    Various services could be delivered through this computing paradigm including
    IoT, location services, augmented reality, caching service, video analytics, and
    local content distribution. It can deliver real-time low-latency access of local
    content or by caching content at the MEC server. However, the main limitation
    of this system is the installation of the MEC server, which is specifically dedicated
    to MEC services. Scaling is another big issue with the increase in resource demand
    over time. C. Edge Computing Edge devices or edge servers provide computation
    facilities in Edge computing. In general, edge computing does not spontaneously
    associate with any types of cloud-based services and concentrates more on the
    IoT device side [23]. One study defined the edge as any network or computing resource
    near the path between cloud data centers and data sources [23]. Any smart device
    or sensor could have data sources but the edge is different. For example, a cloudlet
    and a micro datacenter is the edge of the mobile application and cloud, whereas
    the IoT gateway is the edge between IoT sensors and cloud. Similarly, if a cloud
    application is running on a smartphone, then the smartphone is the edge of the
    application and the cloud [37]. The main motivation of edge computing is that
    the computation should be done at a closer location to the data sources. In the
    edge computing concept, things are not only consuming data but also produce data
    by taking part in processing. Edge devices can perform computation task from the
    cloud besides requesting services and content. Data storage, computing offloading,
    processing, and caching will be done by an edge node. The edge device is also
    capable of distributing requests and providing service on behalf of the cloud
    to the users. In such scenarios, edge devices need to be well designed to meet
    privacy requirements, reliability measures, and security concerns [23]. D. Dew
    Computing (DC) In the current computing hierarchy, Dew Computing [38] is situated
    at the ground level of the cloud and Fog computing environment [39]. DC goes beyond
    the concept of service, storage, and network, to a sub-platform, which is based
    on a microservice concept for which its computing hierarchy is vertically distributed
    [39]. The DC approach facilitates resources such as sensors, tablets, and smartphones
    that are seamlessly connected to a network. Because of this, DC covers a wide
    range of ad-hoc-based networking technologies [39]. Skala et al. [39] argued that
    DC is much more useful in everyday life compared to Fog computing. Fog supports
    IoT-based applications, which demand less latency and real-time capability and
    a dynamic network configuration while DC is microservice concept and thus is not
    dependent on any centralized device, server, or cloud. They provide an example
    in which DC could be integrated into a smart traffic control system, where data
    collection and processing units will be located in between the traffic signals.
    These units generate a collective overview of the current traffic conditions.
    In such a way, a car with low fuel will be notified before entering heavy congestion,
    or a hybrid car will be informed of switching to conventional fuel before approaching
    the congestion. As a result, cars with less fuel will be rescued from unwanted
    situations and hybrid cars could reduce exhaust smoke densities significantly.
    Although the concept is microservice-based, the processing is completed in Fog
    devices. In the Fog computing concept, it is not crucial that applications must
    be dependent on the cloud or require the storing of results in the cloud. On the
    other hand, if such traffic processing information were stored, it would help
    strategic decision-making to improve traffic management. Dew computing is an emerging
    research area and its goal is to use the full potential of cloud and local resources
    [40]. E. Fog-Dew Computing In the architecture of Fog-dew computing, IoT devices
    need not have an active Internet connection while being connected to the community
    server. The community server will interact with the cloud and is responsible for
    providing services to the IoT devices [41]. Cloud computing always needs an Internet
    connection, which is the main drawback of the cloud. While the cloud is unable
    to serve users without an Internet connection, Fog-dew computing facilitates offline
    services without an Internet connection. However, there are some exceptions. For
    example, the navigation app, Waze, allows users to navigate offline. This feature
    was also recently added to Google Maps. In this case, a map information file for
    a specific area is downloaded to the user device and allows users to navigate
    during an offline state. Another example is Google Drive and Dropbox, where users
    can delete, create, and update files and folders in offline mode and then sync
    once the device is connected to the Internet. However, these services are not
    purely offline-we may not rely on the Internet directly but we cannot completely
    ignore Internet connection. The situation becomes more complex when a single user
    uses multiple offline devices alongside the complexity that arises in a multiuser
    environment. Such situations could be mitigated with the help of Fog-dew computing.
    In summary, in the Fog computing paradigm, IoT devices are connected to the cloud
    via Fog devices. Fog devices are connected to the cloud through the core network.
    Fog computing is a combination of MEC and MCC [7] but the main goal of all Fog-related
    paradigms is to perform processing at the edge. These related paradigms differ
    from each other based on Internet and cloud connectivity. Also, the amount of
    processing that needs to be done at the edge differs based on service requirements.
    Furthermore, the type of devices that will be used for computation and storage
    purposes is also another issue. In summary, Table 3 shows the characteristics
    of the above-discussed related computing paradigms along with the Fog computing
    paradigm. TABLE 3 Summary of Similar Technologies Like Fog SECTION V. Architecture
    of Fog Computing For market adoption and deployment, Fog computing must have a
    standard architecture. There is no available standard architecture to date. However,
    many research works have presented Fog computing architectures. In this section,
    we firstly discuss the high-level architecture of Fog computing. Furthermore,
    we summarize some proposed architectures for Fog computing. Finally, we present
    a detailed architecture for Fog computing with a comprehensive description of
    each component of the architecture. A. High-Level Architecture of Fog Computing
    In high-level architecture, the Fog computing paradigm has three different layers,
    as shown in Figure 7. The most important layer is the Fog layer. This layer consists
    of all intermediate computing devices. Traditional virtualization technologies
    can be used at this plane, similar to the cloud. However, considering the resource
    availability, employing container-based virtualization is more appropriate. This
    layer accumulates sensor-generated data from the IoT layer and sends an actuation-related
    request after processing. Although it seems that the big data problem is solved
    by processing generated data at the edge level, billions of devices will create
    big data issue. In fact, it is possible to employ small- and medium-scale big
    data processing at this level. Many research works have been undertaken to process
    big data in the Fog plane [47]–[53]. FIGURE 7. High level Fog computing architecture.
    Show All The bottommost layer is the IoT plane, which consists of all connected
    devices. The devices on this plane perform the sensing and actuation process.
    For time-sensitive applications, processing should be done on the Fog plane exclusively
    while the cloud can perform other processing that is not time-sensitive. However,
    the Fog layer will manage what needs to be sent to the cloud and what should not.
    The users are able to get services from both the Fog and cloud based on their
    request. However, the cloud plane will manage complex processing and storage.
    B. Various Proposed Architectures for Fog Computing Layered representation is
    the best way to represent Fog architecture. Many works have been done to quantify
    the layer-based concept of Fog architecture [4], [27], [54]–[58]. From our review,
    we found that researchers have proposed three [27], [56]–[58], four [55], five
    [4], and six [54] layers in the Fog architecture. Everyone has their own justifications
    for their claims. If we ignored the user plane, it is obvious that Fog architecture
    could be defined as three different levels from the high level. As we proceed
    to the more implementation-type level, the number of layers in the architecture
    would vary, giving rise to five [4] and six [54] levels in the Fog computing layer.
    Aazam and Huh [54] presented six different layers based on specific tasks. On
    the other hand, Dastjerdi et al. [4] defined five different layers based on network
    perspective. Other high-level architectures in Fog computing were also presented
    by various researchers including the hierarchical Fog architecture [59], [60],
    OpenFog architecture [61], Fog network architecture [62], Fog architecture for
    Internet of energy [9], Fog computing Architecture based on nervous system [63],
    and IFCIoT architecture [64]. After reviewing the literature stated above, we
    define the components of Fog computing architecture, which is presented in the
    following subsection. C. Components of Fog Computing Architecture Fog computing
    architecture consists of several layers. Each layer and its components are shown
    in Figure 8. In this subsection, we discuss various components of the Fog computing
    architecture. The components are divided into several groups based on their functionality,
    which is defined as the layer. These functionalities will enable IoT devices to
    communicate with various Fog devices, servers, gateways, and the cloud. A detailed
    explanation of each layer is given below, where a smart transportation use case
    is considered in the explanation. FIGURE 8. Components of Fog computing architecture.
    Show All 1) Physical Layer The basic data source for Fog computing is the various
    forms of data emitted by the sensors [57]. These data could be generated from
    smart devices, temperature sensors, humidity sensors, smart homes, the CCTV surveillance
    system, traffic monitoring system, self-driving vehicles, and so on. For instance,
    if we wanted to implement a smart traffic management and monitoring system, we
    need to get updated traffic conditions of all roads from various sensors, roadside
    devices, and cameras, which will help manage traffic signals. It is also necessary
    to predict future traffic demand by collecting data from various GPS sensors.
    Besides physical sensors, the role of virtual sensors is also important [54],
    if a road accident occurred, it would not be possible to decide using just a single
    sensor whether the road should be blocked or traffic should keep going. The road
    might have one or more lanes- one lane may be affected by this occurrence while
    another lane could enable the traffic flow to continue, but the traffic handling
    capacity will be decreased due to this occurrence. In this case, a virtual sensor
    might help obtain an immediate decision on road conditions, traffic multiplexing,
    and traffic rerouting. Hence, the physical layer consists of physical and virtual
    sensors, where any data generation device could fall into any of these groups.
    2) Fog Device, Server, and Gateway Layer The Fog device, Fog server, or Fog gateway
    could be a standalone device or an IoT device [57], [59], [62]. However, it is
    obvious that the Fog server should have a higher configuration than the Fog device
    and gateway since it manages several Fog devices. Various factors are involved
    so that the Fog server can run. These include its role, hardware configuration,
    connectivity, number of devices it can manage, and so on. Whether the Fog server
    is distinct or part of an IoT device is defined by its role. A group of physical
    and virtual sensors will be connected to a Fog device. Similarly, a group of Fog
    devices will be connected to a Fog server. In this context, the Fog server should
    have higher processing and storage capacity compared to the Fog device. A specific
    cluster of Fog devices, which are connected to the same server, can communicate
    with each other when required. In the smart transportation use case, some application
    processing might depend on other Fog clusters. For example, if an application
    needed to find a fuel-efficient route, it might need information about other sensor
    clusters or Fog device clusters. To reach an appropriate decision, processing
    needs to be done in multiple Fog devices and servers. The Fog server and device
    layer are responsible for managing and maintaining information on hardware configuration,
    storage configuration, and connectivity of device and servers. This layer also
    manages the computation requirements requested by various applications. Computation
    requirements depend on data flow and the total number of IoT devices connected
    to the Fog device, as well as the total number of Fog devices connected to the
    Fog server. The communication between several Fog servers is maintained by this
    layer. For example, a Cisco IOx-supported 800 series router can be used as a Fog
    device and Cisco Fog data service devices can be used as the Fog server [65],
    [66]. 3) Monitoring Layer The monitoring layer always keeps track of the system
    performance and resources [54], services, and responses. System monitoring components
    help choose the appropriate resources during operation. Various applications run
    in smart transportation system scenarios. Therefore, it is obvious that a situation
    could arise when resource availability will be negative for computation or storage
    on a Fog device. A similar case could happen to the Fog server. To tackle these
    kinds of situations, the Fog device and servers will seek help from other peers.
    Thus, the system monitoring component will help decide such things efficiently.
    The resource demand component monitors current resource demand and can predict
    future demand for resources based on current resource usage and user activities.
    In this way, the system will be able to deal with any awkward situations where
    resource outage might occur. Performance prediction monitors can predict Fog computing
    performance based on system load and resource availability. This component is
    required to maintain appropriate QoS requirements in service level agreements.
    If SLA violation occurs frequently, then the cost of the system for the provider
    will be increased because of the penalty. Although performance prediction cannot
    eliminate this issue completely, it will be able to minimize overall SLA violation
    by predicting the performance and usage of the system. 4) Pre and Post-Processing
    Layer This layer contains multiple components, which specifically work on basic
    and advanced data analysis. At this level, acquired data are analyzed and filtered,
    and data trimming and reconstruction are also done when necessary. After processing
    the data, the data flow component decides whether the data needs to be stored
    locally or should be sent to the cloud for long-term storage [59]. The main challenge
    in Fog computing is to process data at the edge and minimize the volume of data
    that needs to be stored; this phenomenon is referred to as stream processing.
    In the smart transportation system use case, data will be generated from many
    sensors. These generated data will be analyzed and filtered in real time to get
    insight into the generated data. All generated data might not have any use. In
    some cases, it would not even be a good idea to store all generated data. As an
    example, if data is generated from a sensor each second, the mean value of data
    within a minute or within an hour may be stored depending on application requirements.
    Data can be trimmed in this way and a vast amount of storage space can be saved.
    In another case, if the difference among data values in some period of time is
    not that big, but might affect performance, then less numbers of reading within
    a minute can be taken. In such a way, it will be possible to filter a vast amount
    of generated data. Although the accuracy may not be 100%, application requirements
    might still be fulfilled to some extent. Data reconstruction is one of the components
    of this layer. This module takes care of faulty and incomplete data generated
    by the sensors. Similarly, if one or more sensors fail during operation, this
    component will reconstruct the data based on the data generation pattern to prevent
    interruption or any other application failure. 5) Storage Layer The storage module
    is responsible for storing data through storage virtualization. The data backup
    component ensures availability of data and mitigates the loss of data. In the
    storage virtualization concept, a pool of storage devices connected by a network
    acts as a single storage device, which is easier to manage and maintain. One of
    the key benefits of storage virtualization is to provide enterprise-class functionality
    using less-expensive storage or commodity hardware. Thus, the storage layer facilitates
    storage virtualization in order to minimize the complexity of the storage system.
    In a system, storage might fail at any point during system operation [67]. Therefore,
    it is crucial to backup important data to mitigate any unwanted situations. The
    data backup module in this layer takes care of periodic or customized data backup
    schemes. 6) Resource Management Layer The components in this layer maintain the
    allocation of resources, and scheduling, and deal with energy saving issues. The
    reliability component maintains the reliability of application scheduling and
    resource allocation. Scalability ensures the scalability of Fog resources during
    peak hours where resource demand is high. The cloud deals with horizontal scalability
    while Fog computing aims to provide both horizontal and vertical scalability [9].
    There are many distributed system resources for network, processing, and storage.
    This is a critical issue for distributed resources, which use application processing.
    Thus, resource allocation, deallocation, and reallocation will happen in which
    the resource allocation component manages and maintains resource allocation related
    issues. Another vital issue is that many applications will run in the Fog computing
    environment simultaneously. Hence, proper scheduling of these applications is
    required. The application scheduling component takes care of these applications
    based on various objectives. This layer also has energy saving components, which
    manage resources in an energy-efficient manner. Energy efficiency also positively
    affects the environment and helps minimize operational cost. Reliability components
    handle the requirement for the reliability of a system based on various reliability
    measures and metrics. Fog computing is a complex system that needs to take care
    of all IoT devices, Fog devices, and the cloud. Therefore, a device or connection
    might fail at any level, so reliability management is an important issue. 7) Security
    Layer All security-related issues such as encryption of communications and secure
    data storage will be maintained by the components in this layer, which also preserve
    the privacy of Fog users. Fog computing is intended to be deployed as a form of
    utility computing like cloud computing. However, in the cloud computing concept,
    the user connects to the cloud for services, but in the Fog computing concept
    the user will connect to the Fog infrastructure for the services while the Fog
    middleware will manage and maintain communications with the cloud. Hence, a user
    intending to connect to a service must be authorized by the provider. Therefore,
    the authentication component in the security layer processes authentication requests
    from users, so they can connect to the Fog computing service environment [27].
    To maintain security, it is crucial to maintain encryption between communications,
    so that security breaches by outsiders will not occur. The encryption component
    encrypts all connections from and to IoT devices and to the cloud. Fog computing
    components are mostly connected via a wireless connection, so security concerns
    are crucial. Some services in a smart city or smart house privacy are also an
    issue because of the involvement of user-related data in these types of systems.
    The Fog computing paradigm should not disclose user information without their
    consent. In the current age, the majority of users normally accept the security
    policy of the provider without reading it. Thus, special consideration of privacy
    should be undertaken for such services that involve user-related critical information.
    8) Application Layer Although the Fog was developed to serve IoT applications
    [58], several other applications based on Wireless Sensor Network (WSN) and CDN
    also support Fog computing. Any application that has latency-aware characteristics
    will be able to take advantage of Fog computing. This includes any type of utility-based
    service that could fit within Fog computing by providing better service quality
    and cost-effectiveness. For example, Augmented Reality-based applications should
    adopt Fog computing because of its nature. It is clear that Augmented Reality
    will transform the modern world in the near future. The needs of real-time processing
    for Augmented Reality applications can be addressed by Fog computing, which can
    maintain continuous improvement of Augmented Reality-related services. SECTION
    VI. Taxonomy of Fog Computing The Fog computing taxonomy is presented in Figure
    9. This taxonomy is derived by considering existing literature and the overall
    viewpoint on Fog computing. The proposed taxonomy focuses on the requirements
    perspective for infrastructure, platform, and application. FIGURE 9. Taxonomy
    of Fog computing based on the requirements of infrastructure, platform, and applications.
    Show All Firstly, by considering infrastructure, we identify infrastructure and
    network requirements, and the types of devices in a Fog computing environment.
    Secondly, for platform resource allocation and scheduling, security and privacy
    concern, service requirements, management, and multitenancy were determined. Finally,
    we defined application requirements, user requirements, and application modeling
    taxonomy for Fog computing. This taxonomy will help the research community and
    enterprises to gain better understanding and insight into the real-world deployment
    of Fog computing requirements, architecture, and devices. Figure 9 shows the taxonomy
    of Fog computing. A detailed description of each branch of the taxonomy is presented
    in this section. A. Infrastructure Fog computing infrastructure requirements depend
    on the network, devices, and their requirements. All Fog devices, network devices,
    and gateways existing in the Fog environment that participates in computation
    are also part of the Fog infrastructure. Infrastructure denotes the physical components
    of the Fog environment. 1) Infrastructure Requirements The many connected tiny
    devices are the primary elements in a Fog computing environment. These devices
    are located everywhere and help to connect all things around us. It is estimated
    that the world will see 50 billion handheld devices by 2020. Beside these devices,
    a huge number of sensors and actuators will also be put in place. Therefore, a
    proper infrastructural facility is needed to support this vast computing environment
    [20]. An example of how the number of sensors is increasing day by day is given
    in The Economist report titled, “Augmented Business”, which describes the implant
    sensors on cattle ears that could help to monitor their activity, health, and
    movements. This could help increase overall productivity. The implant of sensors
    affixed in one cow produces about 200 MB of information in a year. In another
    example, with sensor technology, Rolls-Royce is able to forecast when engines
    will more likely fail. From such a prediction, customers can plan engine changes.
    Heidelberger Druckmaschinen has huge printing presses equipped with more than
    1,000 sensors. These are the examples of distinct uses of sensors in specific
    domains. However, this phenomenon will change completely when the distinct parts
    are connected to generate more efficient and effective decisions. Therefore, the
    Fog infrastructure must have the capability to provide physical resources for
    computation, networking, storage, and memory to achieve efficient Fog computing
    services. 2) Network Requirements The network is one of the key bottlenecks in
    the Fog computing environment, where billions of connected devices generate and
    consume data at the edge of the network [68]. Most of the sensing and actuating
    devices require low bandwidth but a higher number of devices will be connected
    at the same time. Therefore, existing network connection technologies like LAN,
    MAN, WAN, or PAN need to be investigated further and amendments will be needed
    to cope with the Fog computing environment to facilitate countless IoT devices.
    Network operators are increasingly investing in new wireless access technology
    research because of the number of devices per user is increasing day by day. For
    instance, in the cellular mobile network, base stations have a limited number
    of link points [20]. As the number of things increase, these stations will need
    to support increasing numbers of devices. Fog devices must act as a router for
    neighboring IoT devices and as a primary processing unit for IoT application in
    the Fog environment. Each Fog device should have a resilient connectivity to the
    lower and upper layer devices. Mobile ad-hoc networks could act as a basis for
    the Fog network because of their mobility and lower cost feature [20]. Hence,
    connection and mobility are the main requirements for the Fog network. 3) Fog
    Devices Fog computing is basically intended to support IoT-related technologies
    to perform processing at the edge level. Mine projects [69], [70] at the middle
    of the sea, airline fleets or a ship [70] can be equipped with a huge number of
    sensors, so it is impossible to send and store all generated data in real-time
    into the cloud. Some intermediate computation, processing, and services will be
    done by Fog computing devices. Thus, the Fog layer must have sensor management
    devices, Fog processing, and storage devices and Fog gateway devices. All of these
    devices will work collaboratively to manage and perform tasks in the Fog plane.
    Here, we discuss the devices that are needed for Fog computing deployment. a:
    IoT Devices IoT devices are the devices that have sensing and actuating capability.
    A sensor is able to sense the environment, while an actuator acts on it when necessary.
    One of the most common types of sensor in IoT devices is the temperature sensor.
    The temperature sensor has various functions depending on different domains such
    as at home, in factories, and in the agriculture field. This sensor is also used
    to sense the temperature of soil, water, and plants in order to take proper action
    needed to improve service outcome. Another type of useful sensor is the pressure
    sensor, used especially in agriculture, smart vehicles, and aircrafts. Sensors
    are also used to estimate the volume of water used by the agricultural sector
    for cultivation and other uses. Surprisingly, a huge percentage of this water
    is wasted due to leaky irrigation systems and inefficient use of fresh water.
    Efficient use of the pressure sensor will help solve this problem. The pressure
    sensor is able to determine the flow of water and reduce water waste. The pressure
    sensor is also used in smart vehicles to determine the forces acting on it, and
    in aircrafts to determine altitude. Different groups of sensors are used for different
    IoT environments. For example, in healthcare, the most-used sensors are chemical,
    IR, pressure, and temperature sensors as well as other biosensors. On the other
    hand, in a smartphone, the most-used sensors are the gyroscope, GPS, and proximity
    sensors. One of the applications of the proximity sensor is to determine the presence
    of ear to dim or turn off the phone backlight to improve battery efficiency. This
    sensor is also used to monitor parking space since it can determine the presence
    of an object without touching it. It can also be used in a wide temperature range
    and is not affected by color. Its detection process also is not effected by dirt,
    oil, or water. There are many other sensors out there that enable IoT, which include
    GPS sensors, water quality sensors, level sensors, chemical/gas sensors, smoke
    sensors, IR sensors, humidity sensors, sound and vibration sensors, motion sensors,
    acceleration sensors, and machine vision sensors. There are five main types of
    actuators-magnetic or thermal, electrical, hydraulic, pneumatic, and mechanical.
    The actuator has a controlling or moving mechanism, a motor, which acts on various
    inputs. The raw application data comes from various sensors like speed sensors,
    cameras, temperature sensors, vehicle monitoring sensors, or GPS sensors. A typical
    sensor generates 10 data samples every second [71]. Sensors convert environmental
    variables such as smoke, heat, light, temperature, humidity, sound, and so on
    into electrical signals. These sensors are varied and can be micro-electro-mechanical
    systems (MEMS)-based, CMOS-based or LED sensors. Communication among sensors could
    be done by ZigBee, Bluetooth, Z-Wave or 6LoWPAN standards for short distance communication
    [72]. There is a necessity for communication among sensors in some cases where
    one sensing output is dependent on other collective sensor outputs. These sensors
    will be connected to Fog devices through wireless connections. However, Fog devices
    collect and process data based on application requirements. Some example of research
    works based on sensors can be improved by taking advantage of Fog computing. Aziz
    et al. [73] proposed a real-time health monitoring system using particular sensors
    in which the proposed architecture was based on GSM and GPS technologies. The
    system specifically monitors the body temperature and blood pressure of patients.
    The study used an Arduino microcontroller, dfrobot GPS/GPRS/GSM module v3.0.3,
    a heartbeat pulse sensor, and a lilypad temperature sensor for hardware implementation.
    In another study, a web-based application was developed for doctors and nurses
    with SMS functionality, which will be used as an emergency case. The system is
    able to generate GPS location, body temperature, and blood pressure. Butt et al.
    [74] investigated wearable technology such as SensHand, Gloves-based system, electromyography-based
    and hybrid systems, leap motion, and smartwatches. The development of these kinds
    of technology must be integrated with the smart home system and Fog-like architecture
    in order to deal with emergency situations. Some devices such as the smartphone
    can be considered as both an IoT and Fog device. In the same way, if some sensors
    and actuators were installed in the Raspberry Pi, the device could also act as
    both an IoT and Fog device. b: Fog Processing Devices Any device that has computing
    capability, storage, and network connectivity can act as a Fog processing device.
    It could be a network controller, switch, router, server, or a video surveillance
    camera. A Cisco 800 series router can be used as a Fog device where the IoT application
    can be run on the device and the device supporting Cisco IOx. To date, only Cisco
    800 series routers are supporting IOx with Linux kernel with virtualization support
    [44]. Most of these devices have a 266-400 MHz MPC8272 processor with 16 KB Cache,
    64 MB random access memory and 20 MB processor board flash memory. The user can
    host an application on these routers. These routers have two cores-Cisco IOS runs
    on one core and another core is used for running IOx services. Another type of
    Fog processing device is the Fog server. A Fog server can control several Fog
    devices in a specific domain. Cisco offers two flavors of Fog computing server
    deployment. One is the Cisco Fog Director, which can be deployed on any type of
    server with Cisco-recommended server specifications [66]. Another example of a
    Fog device manufactured by Cisco is the Fog data services, which are specifically
    designed for IoT [65]. However, Cisco Fog data services can only be deployed on
    Cisco UCS E and C Series Servers. Both will act as Fog servers; however, Cisco
    Fog data services are especially designed for an IoT environment. However, various
    organizations and bodies need to work beyond the proprietary solutions for fast
    technological advancement and technology adoption with a limited budget. Fog devices
    and Fog servers should be deployed in such a way that any type of network management
    device with storage and processing capability can act as a Fog device. Similarly,
    the usual type of server must be able to act as a Fog server. This could be an
    ordinary PC since Fog is not dedicated to performing very complex processing.
    However, further investigation is necessary to explore the minimum system requirement
    for a device that can act as a Fog device or Fog server. Connectivity between
    Fog devices and Fog servers will be via Ethernet or wireless or a serial connection
    in some cases. As an example, Cisco UCS E and C Series Servers, which are generally
    used as Fog servers, are connected to the network via Ethernet. On the other hand,
    Cisco 800 series routers are connected via serial ports that support Fog computation.
    c: Gateway Devices for Fog Many hardware boards are currently available in the
    market including Arduino Yun, Intel Edison, Raspberry Pi, Beaglebone Black, Arduino
    + Shields, Netduino, Tessel 2, and so on. These boards are currently used as IoT
    and gateway devices and can also be used as Fog gateway devices and as Fog devices.
    These boards have a built-in processor, wired and wireless adapter, and a USB
    port. Fog computing supports device heterogeneity, where a gateway could also
    be a part of the Fog computing environment. Constant et al. [75] developed a Fog
    gateway using Intel Edison and Raspberry Pi. Their proposed Fog gateway integrated
    the data conditioning process, smart analytics, intelligent filtering, and transfer
    to the cloud, which needs long-term storage and temporal variability monitoring.
    The IoT gateway supports various data types and communication protocols between
    devices and sensors. It also unifies the data format from various sensors. Current
    IoT gateways provide a solution for communication and do not support fully automatic
    configurations of newly added IoT devices [76]. Guoqiang et al. [77] proposed
    a smart IoT gateway with three key benefits. The proposed gateway has a unified
    external interface and pluggable architecture. It has a flexible protocol to translate
    various sensor data into a uniform format. The study designed a customized device
    with a Samsung S5PV210 mobile application processor as its gateway. However, this
    gateway did not have any fault tolerance or security features. B. Platform The
    platform manages applications and infrastructure in the Fog environment. It takes
    care of resource allocation, scheduling, fault tolerance, multi-tenancy, security,
    and privacy in Fog computing. Based on the taxonomy of the Fog, we discuss the
    requirements of the platform for Fog computing in this section. 1) Resource Allocation
    and Scheduling Heterogeneous devices are the main challenges in developing proper
    resource allocation and scheduling in the Fog. If we wanted to use the computation
    power of idle devices, we need to schedule tasks on these devices efficiently.
    Otherwise, IoT application processing in the Fog will face complex issues, which
    will hinder the fulfillment of the latency awareness goal. Two of the key requirements
    for resource allocation and scheduling are availability and efficiency. Resources
    in the Fog are not dedicated, and thus availability should be ensured. On the
    other hand, lack of efficient resource allocation and scheduling might lead to
    unwanted delays in the overall processing. 2) Service Requirements Fog services
    can be defined as single or multiple user requests, where the user will constantly
    be updated of the outcome of the service until he or she has a subscription to
    that service. This means that the service outcome will not be fixed and will keep
    changing until the end of the service. The Fog device and Fog server perform the
    intermediate processing, which occurs in between user request and service output.
    The Fog server may communicate with the cloud for processing and information retrieval
    when necessary. For instance, if we considered selecting the best path based on
    real-time traffic in a smart transportation system, the Fog service will keep
    updating on the best path until the end of the journey. In this case, we need
    to take into account mitigation of fault, service quality, network latency, and
    power consumption in order to maintain the standard of the service. a: Fault Tolerance
    Fault tolerance allows a system to keep performing even when a part of the system
    has failed. This failure might be software failure, hardware failure, or network
    failure. The solution for fault tolerance will result in a fully operational system
    where the system will continue its operation with a lower capability instead of
    shutting down totally [78]. Fault tolerance is mostly investigated in the cloud
    [79]–[89]. However, it is necessary to investigate fault tolerance in the Fog
    as well. Although many research works have addressed the need to explore fault
    tolerance issues [5], [9], [64] in Fog computing, none have actually investigated
    the issue. We discuss in more detail the issue of fault tolerance in Section VIII-B.
    b: Quality of Service (QoS) QoS is an important service requirement for Fog computing,
    which is based on reliability, network delay, throughput, and energy consumption.
    Besides these, resource management, power-consumption model, scheduling policy,
    and power failure handling are also important to ensure QoS. If some sensors fail
    for any reason, the accuracy of the outcome or action could be affected. Fog is
    intended to work with latency-sensitive systems; hence, it should maintain high
    reliability with a strict QoS assurance. Otherwise, the latency awareness criteria
    will not be fulfilled. Madsen et al. [90] suggested that the availability of different
    methodologies and algorithms work with the reliability of network connectivity
    and information, to ensure accuracy, which is crucial for building Fog computing-based
    projects. 3) Security and Privacy In this technological era, people are inevitably
    sharing personal information when using different applications and web services.
    Our personal information is no longer personal; it now belongs to many tech giants
    because we are using their free services on a regular basis [91]. A simple example
    is that if anyone used an Android phone without any security settings, the built-in
    Android OS will automatically run GPS and map services, for which it can collect
    all location-related activities about the user. Therefore, information about when
    and which country a user has visited, where a user has dined in, which route a
    user uses for going to the office, home, and so on will be made available to these
    companies. However, these tech giants might argue that they do not disclose our
    data to others, as they can only see our data in our timeline only. However, a
    recent Facebook incident fails to convince us of the honesty of these tech giants
    [92]. The Fog computing paradigm is completely distributed and not intended to
    be centrally managed most of the time. Sensitive data might be processed in an
    intermediate device when the application does not have full control of the device.
    On the other hand, the user will not have full control over the Fog applications.
    Users will require more protective and innovative ways to retain their privacy
    and protect it from any potential and very harmful entities [20]. Similarly, Fog
    application providers also need to develop security to protect their application
    from unwanted data theft. Three different types of security need to be ensured:
    network connection security, data security, and user privacy. Network connection
    security and data security are applicable from both the user and provider perspectives.
    Moreover, user privacy is also important because Fog processing is carried out
    on user data in most cases. 4) Multi-Tenancy Multiple tenants for the same services
    with an isolated runtime for each tenant are referred to as multi-tenancy service.
    Multi-tenancy is important for Fog because of the limited resources in a Fog environment.
    By enabling multi-tenancy, one instance will run in a Fog device and will serve
    multiple tenants (users). Multi-tenancy could be container-based or could be the
    usual virtualization-based. Container-based virtualization is a more lightweight
    and powerful virtualization solution, which the Fog can adopt, to provide the
    fastest processing solution. Container-based virtualization does not need to emulate
    the operating system to facilitate virtualization; thus, it will be easier to
    manage and migrate. Multi-tenancy is a requirement for the platform, and needs
    to be defined before deployment. Multi-tenancy may incur performance degradation
    and security issues [29]; thus, adequate and secure isolation is needed. 5) Management
    The management of the Fog can be centralized or decentralized. Since the devices
    in a Fog environment belong to different domains, centralized management is not
    always possible. Alternatively, processing of IoT applications will be done in
    different Fog clusters, so management will follow a distributed nature in this
    case. In summary, the management of the platform in a Fog must be defined. In
    the case of decentralized management, similar processes must be deployed for different
    Fog devices to handle management issues. C. Application Applications have to fulfill
    certain requirements to execute in a Fog environment. Here, we discuss the features
    required by the applications for execution. 1) Application Requirements a: Scalability
    The number of IoT devices are increasing very swiftly day by day all over the
    world, which raises a new issue of scalability. Thus, we need to deal with the
    scaling of devices and services in the Fog computing environment. Dependency on
    cloud computing has been observed for IoT application processing by many research
    works, where trillions of IoT devices are involved, such as that of Li et al.
    [93]. However, implementation of the whole application in the cloud in such an
    environment where IoT devices are generating a huge amount of data is neither
    feasible nor efficient. IoT devices are not only stationary but also mobile in
    most cases. Hence, maintaining frequently changing device states and availability
    in the cloud is not an easy task. Also, with the growing number of IoT devices,
    it would be more critical for IoT applications to query and select IoT devices
    [59]. The Fog computing system must be an autonomous system where application
    execution by the participating device will be done automatically including scalability.
    b: Heterogeneity For any IoT system, the heterogeneous device is a fundamental
    characteristic where device heterogeneity co-exists at any level in the Fog computing
    paradigm. Abstraction of device complexity is also required to some extent. Device
    heterogeneity does not only refer to the diversity of services and protocols,
    but also the assortment of horizontal and vertical levels of the Fog architecture
    [59]. To address this heterogeneity, Giang et al. [59], classified three types
    of Fog devices: compute, input/output (IO), and edge nodes. Edge nodes are the
    sensors and the actuators, IO nodes are the resource-limited devices mostly responsible
    for brokering communications, and computing nodes offer computing facilities.
    Of the three types of nodes, IO and compute nodes are mostly dynamic and customizable
    or programmable as required. It is possible to implement all three nodes in a
    single device based on its capability and design goal. The smart gateway is an
    example of such implementation. In order to use the capability of various types
    of devices in an IoT environment, it is obvious that the application must be designed
    in such a way that it might be able to perform its task execution on multiple
    devices regardless of its capacity and location. More precisely, the application
    should able to use maximum available computation resources through middleware.
    c: Interaction Timeliness The perception-action (PA) cycle is the basic function
    of a nervous system, which maintains circular flow between sensory organisms and
    its actions towards the functionality of that sensing. The PA cycle is also a
    characteristic of IoT applications, where the cloud and Fog infrastructure satisfies
    timeliness requirements and application logic for communication. Giang et al.
    [59] identified four interaction models for the PA cycle in a Fog environment.
    Examples of these models are: (i) in a local network, communication between devices,
    which is considered as an immediate cycle action, (ii) interaction with the cloud
    from a device of a local network, which is generally for time-insensitive actions,
    (iii) an interaction generated by the cloud to a device in a local network, which
    requires semi-immediate actions, and (iv) communication among IoT-related applications
    in the cloud. However, their work considered the role of the Fog server, which
    manages and maintains several Fog devices in a specific cluster. On the other
    hand, PA interaction can be divided into immediate, semi-immediate, and delayed
    action to leverage IoT application requirements more efficiently. Delayed action
    can be performed on the type of processing that does not have any timeliness issues
    and could be processed by the cloud infrastructure. d: Mobility Device mobility
    is a natural probability and is one of the key requirements for implementing an
    IoT platform [59]. From the Fog perspective, it is not only the edge devices that
    will be mobile but also computing and storage devices in the Fog layer. Managing
    mobile devices in two different planes and syncing them with each other is challenging.
    To ensure resource availability and successful task completion, task distribution,
    duplication, and migration is required. This mechanism is already considered in
    the cloud but there is a need to reinvestigate them by considering mobility [94].
    2) User Requirements User requirements can be changed by various constraints.
    First of all, a user may want to complete the submitted task within a specific
    time binding, which is referred to as the deadline. Secondly, the user may set
    some constraints for the budget. Thirdly, in the case of some users, they may
    not care about the budget but the response time is of utmost importance. Fourthly,
    some users may want tolerable accuracy. This means that the user may not seek
    accurate results but rather fast results that could be provided with some reasonable
    errors. Aazam and Huh [54] suggested that pre-allocation and prediction of resources
    rely on user behavior and the probability of future utilization of resources.
    Dastjerdi et al. [4], [95] stated that edge devices perform optimization by considering
    user behavior and network condition. 3) Application Modeling Two types of application
    modeling are possible by considering the requirements of applications in the Fog.
    Most IoT devices generate tuples periodically, which can be considered as a stream.
    These streams need to be processed in real time to get accurate results. Alternatively,
    the application that does the processing based on previously stored sets of data
    could include microservice-based applications. The advantage of microservice is
    that it can bind all functionality and required libraries in a single service,
    which can run above the microservice controller without dependency. Hence, application
    modeling in Fog could be stream-based or microservice-based. SECTION VII. Dimension
    of Fog Computing-Based Applications Several applications require a Fog computing
    infrastructure to provide smooth services. These include smart transportation
    systems, Augmented and Virtual reality, healthcare, video streaming, smart homes,
    and smart cities. Requirements of platform and applications are also needed in
    order to provide services. In this section, we discuss some research works, which
    specifically address the application of Fog computing. We evaluate each work based
    on their contribution on the Fog infrastructure, platform, and applications as
    defined in our taxonomy. It is obvious that all three kinds of services are interrelated.
    However, each researcher only focused on one or more of these aspects. Mapping
    related works with our proposed taxonomy will help in finding the research gaps
    in Fog computing applications. A. Smart Transportation System Several research
    works have been carried out on smart transportation systems that use Fog computing.
    In this section we discuss a few works that have been done on the Fog-based smart
    transportation system and then identify key issues that need to be addressed.
    Truong et al. [96] pproposed a Vehicular Ad-hoc Network (VANETs) architecture
    called Fog Software Defined Networking (FSDN), which combines SDN and Fog together
    to provide a better solution. As SDN has programmability, flexibility, global
    knowledge, and scalability features and Fog has location awareness and time sensitivity,
    the combination of these two will leverage on the key challenges in VANETs. The
    proposed system is able to augment communication among vehicles, infrastructure,
    and base stations via centralized control, besides reducing latency and optimizing
    the utilization of resources. However, the central SDN controller of the proposed
    system is where the bottleneck of the proposed system occurs. The system is focused
    on infrastructure and network requirements. The Fog controller is used for service
    implementation. The work did not focus on platform and application requirements.
    Investigation of VANETs in Fog has also been done in Giang et al. [97], where
    they explored how smart transportation applications (VANETs) are developed using
    the Fog Computing approach. Driving vehicles in an urban area requires immediate
    decision on various activities such as route changing, lane change, slowing down
    speed, looking at obstacles, and so on. Hence, applications need to gather all
    related details to act on these activities. The authors discussed Fog-based smart
    transportation application requirements such as programming abstraction and application
    models. The work explored application modeling but not other application aspects
    nor infrastructure or platform. B. Vehicles as Fog Infrastructure Hou et al. [98]
    proposed the idea of Vehicular Fog Computing (VFC), which will use the vehicle
    as an infrastructure for computation and communication. The VFC architecture utilizes
    vehicle computation resources by providing service to the edge devices located
    near them. It will aggregate abundant resources of each moving car by which service
    quality can be enhanced. Using quantitative analysis on different scenarios, they
    discovered an interesting relationship among connectivity, mobility, communication
    capability, and parking behavior. These four characteristics help us understand
    resource utilization of vehicle resources, which will help achieve better utilization
    of unused resources. C. Augmented and Virtual Reality Augmented Reality applications
    are extremely time sensitive; a small delay can lead to serious errors in user
    experience. Thus, Fog computing-based solutions will have great potential in this
    domain [4]. These statements are also applicable for connected Virtual Reality
    (VR) or VR-based games. Zao et al. [99] proposed an augmented brain computer interaction
    game, which utilized the Fog and cloud infrastructure. The Fog performed real-time
    analysis such as signal processing that needs to classify the brain state and
    other analyses such as model classification updated from the cloud. However, their
    work only focused on the Fog infrastructure but neglected most aspects regarding
    platform and application. D. Healthcare The Fog computing approach also enables
    real-time sensor-based healthcare services. Rahmani et al. [100] proposed a Fog-assisted
    system architecture for the healthcare system. A smart e-health gateway is the
    key component of this architecture, which will process the generated data from
    the sensors and generate an Early Warning Score (EWS) to notify for any medical
    emergency. They considered many aspects of our taxonomy; but it is necessary to
    investigate each aspect extensively, which this study did not. Another Fog-based
    healthcare architecture was proposed by Mahmud et al. [26]. Their work mainly
    focused on network delay, power consumption, and communication optimization in
    Fog-based healthcare service. However, platform, application, and user requirements
    were not investigated. E. Smart City Smart city-related applications need to process
    sensor data on a real-time basis, where Fog computing can play a major role. Giordano
    et al. [101] proposed a Rainbow architecture, which supports various applications
    in a smart city. The proposed Rainbow framework evaluated three smart city applications
    including noise pollution mapping, urban drainage networks, and smart street.
    The work proposed a distributed agent-based approach in the intermediate layer
    in between the physical infrastructure and cloud. However, the work did not focused
    on application and platform aspects except for application modeling. Table 4 shows
    a summary of the above-discussed Fog-based applications mapped to our proposed
    taxonomy. In summary, it can be concluded that most of the works have focused
    on infrastructure and application modeling. There is a research gap on application-
    and platform-related aspects, which need to be explored further. TABLE 4 Evaluation
    of Existing Works on Fog Applications SECTION VIII. State-of-the-Art Fog Computing
    In this section, we focus on some existing research works on Fog computing. We
    discuss research works from four different research areas of Fog computing. These
    areas are resource allocation and scheduling, failure handling, simulation tools,
    and microservices. A. Resource Allocation and Scheduling in Fog Computing Fog
    computing is fast evolving and growing rapidly due to its edge-level computation
    and heterogeneous nature. In this section, we present several research works,
    which have been done in the past couple of years. We also summarize the presented
    research works with a comparative discussion to address research gaps in this
    area. Most of the reviewed works are related to resource allocation and scheduling
    in the cloud and Fog environment. However, some works have only been done in the
    Fog environment. 1) Resource Allocation and Scheduling for Fog-Cloud Environment
    Alsaar et al. [102] proposed resource allocation methods for a collaborative platform
    composed of Fog and cloud paradigms. Their proposed algorithm is grounded on linearized
    decision tree rules by considering three different conditions for managing user
    request and for balancing workload. The conditions are VM capacity, completion
    time, and service size. Each condition has two branches: the VM capacity branches
    out to enough or not enough; the completion time consists of now or later, and
    the service size is divided into small or large. In some cases, this includes
    services in the queue, which will be represented with yes or no. They utilized
    1/m/m/1, with (1)/ representing cloud broker, /(m) for many paths, /(m) for many
    Fog brokers, and /(1) for IoT device users. Using this method, the total overhead
    for big data processing in the system was reduced. In their work, the availability
    of cloud servers and the Fog was guaranteed and a fast response time to satisfy
    QoS was achieved. The SLA for users was also different, where shared and reserved
    resource was provided. However, availability and QoS were not studied extensively.
    Deng et al. [103] presented a framework for workload allocation in the cloud and
    Fog environment to examine power consumption-delay trade-off issues. They defined
    the workload allocation problem into primary and sub-problems, which can be solved
    via related sub-systems. They employed a Hungarian algorithm and Generalized Benders
    Decomposition (GBD) algorithm to solve the problem. Numerical and simulation results
    were presented to prove that the Fog is a complement to the cloud. However, the
    complex nature of workload and resource was not studied in their work. Brogi et
    al. [104] prototyped a tool known as ‘FogTorch ∏ ’ which is capable of fulfilling
    hardware, software, and QoS requirements before deploying a composite application
    in the Fog infrastructure. The proposed tool manipulates Monte Carlo simulations
    and only considers communication link QoS. Resource consumption and QoS assurance
    terms were undertaken for classifying the eligibility of deployments. The proposed
    algorithm was based on the preprocessing phase and backtracking search phase.
    To find eligible deployment, the preprocessing used input from results derived
    by the backtracking search algorithm. However, availability and latency are more
    important in the Fog environment compared to resource consumption and communication
    links. In order to ensure efficient use of resources and network infrastructure
    in the Fog and cloud environment, Taneja and Davy [105] proposed a Module Mapping
    Algorithm, which efficiently deploys IoT Application Modules in the composite
    Fog-Cloud Infrastructure. They employed lower-bound searches and compared function
    algorithms to find an eligible network node in the Fog and cloud. The Module Mapping
    algorithm returned a map with nodes, which are appropriate for completing the
    computation operation. If the application requires faster processing, the application
    will be deployed close to the source device. However, the work considered CPU,
    RAM, and bandwidth to find the best resources. In such a case, the cloud resource
    will always be the best resource, so it will be necessary to consider other parameters
    such as response time and availability of the specified resources. Yin et al.
    [52] studied a Fog-assisted big data streaming scenario, where Fog devices are
    responsible for preprocessing raw data for applications hosted in the cloud using
    the unused resources of Fog devices. In their work, the software-defined network
    (SDN) controller continuously adjusted the volume of data to be sent to the Fog
    device for pre-processing. The collaborative computation problem was defined as
    a social welfare maximization problem and a hybrid alternating direction method
    of multiplier (H-ADMM) algorithm was proposed to minimize computation burden via
    the dynamic distribution of Fog devices, cloud, and SDN using message exchanging.
    The formulation of social welfare maximization problem determined the size of
    data that will be assigned to a Fog device. During the formulation, loss of information
    value by preprocessing and the operation cost of the Fog and cloud were considered.
    The work completely depended on the cloud for post-processing, but pre- and post-processing
    could have been done in the Fog to support time-sensitive real-time applications.
    Aazam et al. [106] proposed a dynamic resource estimation algorithm by integrating
    the historical record of cloud service customer (CSC) in a Fog environment based
    on the relinquish probability. The minimum relinquish probability value is 0.1
    and this value will be increased based on the history of the user. However, for
    fair resource estimation, the relinquish probability will be 0.3 for new customers.
    For existing and returning customers, the characteristics of the customer are
    known, so the probability value can be calculated easily. In this way, resource
    underutilization could be minimized and the chances of profit loss will be low.
    2) Resource Allocation and Scheduling for a Fog Environment A resource allocation
    strategy based on priced timed Petri nets (PTPNs) was proposed by Ni et al. [107]
    for Fog computing. The main idea of this work is that the user can choose the
    satisfying resources autonomously from a pre-allocated resource group. With credibility
    evaluation for both users and Fog infrastructure, their proposed strategy comprehensively
    considers the cost for time and price to complete the tasks. The user that has
    a high credit limit will be able to allocate highly reliable resources to complete
    their tasks. Due to the dynamic nature of creditability of users and resources,
    there will be some deviation in calculating them properly. To maintain QoS, the
    resources will be ordered according to their processing capacity and divided into
    several groups. Moreover, users with similar credibility will be assigned to several
    groups. Pooranian et al. [108] proposed a simple algorithm to find an optimal
    solution for resource allocation. They considered the problem as a bin packing
    penalty aware problem where servers are bins and VMs are the pack. Based on idle
    energy, maximum frequency, and maximum energy, each server will be palatalized
    and rewarded. The method will calculate how many VMs could be allocated in t time
    slot on a server. The VMs will be served based on their frequency and time limitations.
    As a consequence of penalty, a server will be punished in the form of being banned
    from use for a few iterations. Once the server passes the iteration freeze, it
    will return to the stream to perform further computation. The penalty and reward
    methods are applied to minimize exponentially increasing energy consumption. Sun
    and Zhang [63] proposed a crowd-funding algorithm for a Fog environment, integrating
    idle resources in the local network. An incentive mechanism was used to encourage
    resource owners to participate in the computation and enthusiastically perform
    their tasks. Through the comprehensive reward and punishment mechanism, it is
    ensured that the participant will positively perform the tasks. This work is similar
    to the above-described literature proposed by Pooranian et al. [108]. However,
    in this case, the reward and punishment go to the participant rather than the
    physical server. 3) Summary of Resource Allocation and Scheduling in Fog Based
    on the related research on resource allocation and scheduling in the Fog, a summary
    is presented in Table 5. From this table, we can see that most of the researchers
    have focused on resource allocation in the Fog. More research works are therefore
    required to investigate resource sharing and workload allocation. Also, further
    investigation is needed to address energy-efficiency, load balancing, SLA, and
    QoS in the Fog. We identified two major issues in Fog computing research. Firstly,
    researchers tend to use a synthetic workload to validate their methods and algorithms.
    Secondly, most of the researchers used cloud-based simulations, which are not
    that convincing because the Fog is more heterogeneous and dynamic in nature. Thus,
    further investigation into workload generation and simulations in the Fog need
    to be undertaken. TABLE 5 Summary of Resource Allocation and Scheduling Research
    in Fog B. Fault Tolerance in Fog Computing The Fog computing paradigm is a highly
    distributed heterogeneous platform where the probability of device failure is
    very high compared to the cloud. Since the Fog is evolving, no study has yet been
    done on fault tolerance in Fog computing. However, fault tolerance has been mostly
    studied in the cloud computing paradigm. Often, fault tolerance is measured by
    availability. In the cloud, faults are handled by proactive fault tolerance and
    reactive fault tolerance techniques at either the workflow level or task level.
    Reactive fault tolerance techniques are used to reduce the impact of failures
    on a system when the failures have actually occurred. Techniques based on this
    policy are job migration, checkpoint/restart, replication, rollback and recovery,
    task resubmission, user-defined exception handling, and workflow rescue. Proactive
    fault tolerance predicts the faults pro-actively and replaces the suspected components
    with other working components; thus, avoiding recovery from faults and errors.
    Proactive Fault Tolerance uses self-healing, preemptive migration, and software
    rejuvenation, which are the few proactive fault tolerance techniques in the cloud.
    According to Sharma et al. [110], the causes of failure in the cloud varies, and
    include software and hardware failure, service failure, overflow failure, power
    outage, outdated systems, network failure, cyber attacks, and human errors. It
    is crucial to handle faults in Fog computing for which the fault needs to be considered
    at every step, not only for processing but also for the transmit-and-receive process
    [111]. In this section, we discuss some existing research works on fault tolerance
    in cloud computing. We specifically focus on resource and task failure mechanisms.
    Then, we summarize the existing works and present a research direction for failure
    handling in Fog computing. Jiang and Hsu [112] proposed a two-level standby design
    for handling server failure in the cloud system. In their proposed system, cold
    and warm standby of the system is made available. Once any server fails, the warm
    standby system will replace the failed server and the failed server will be sent
    to the repair house. After repairing, the system will be placed in the cold standby
    group. The systems in the cold standby group are in a completely switched off
    mode. The work proposed a model to determine the necessary number of cold and
    warm standby systems in the cloud. However, this type of hardware failure handling
    is not suitable for the Fog because most of the time Fog computing devices will
    not be under the property of the Fog provider. Hence, task migration is the best
    solution for hardware failure and this should be reactive in most cases, except
    where the Fog device belongs to the provider. Latiff et al. [113] proposed a cloud-scheduling
    scheme based on a check-pointed league championship algorithm. They employed a
    task migration method for independent task execution failure. In their proposed
    method, the system state will be saved periodically by check-pointing, so the
    task need not start from the beginning once it fails. When the task fails, it
    will be assigned to an underloaded VM and the league championship algorithm will
    be employed to schedule the failed tasks. Wu et al. [114] proposed a fault tolerance
    technique using migration to the cloud. The failure handling method is proactive,
    which always monitors the host and continuously tries to predict the chances of
    failure. If the prediction becomes true, the system will look up other available
    resources and then migration will be performed. The proposed method will monitor
    CPU temperature, memory usage, and CPU fan speed, etc. To employ such a technique
    in Fog computing, further investigation is needed because the types of device
    in Fog are diverse. A combined method of check-pointing and migration-based proactive
    failure handling was proposed by Egwutuoha et al. [115] for HPC and cloud. In
    the proposed method, the authors used a Lm-sensors open source software tool for
    computer health monitoring. From the monitoring data, they defined rule-based
    monitoring depending on temperature, fan speed, voltage, and processor utilization
    to predict failure. The rules are denoted as 1, 2, and 3, representing normal,
    warning, and critical state, respectively. They employed three different policies
    for migration. The first depends on the necessity lease additional node. The second
    removes the node, which is unhealthy based on the state. In the third, the critical
    state publishes to the head node. Finally, the system administrator is notified
    for further action. This type of approach might increase the overhead in the Fog;
    however, further exploration is essential. A recent study shows that proactive
    fault tolerance is the best solution for the cloud compared to redundant solutions
    [88]. However, failure prediction accuracy is the key factor for these kinds of
    solutions. Their work considered software, hardware, and unstable behavior to
    predict the failure of the infrastructure. More specifically, they defined failure
    based on an error formula err=(ActualTime−PredictedTime)/ActualTime×100% , which
    was derived from [118] and [119]. A combination of the proactive and reactive
    method was applied by Gao et al. [118] to handle task failure in the cloud environment.
    The crash detection method and replication factor were proposed in this work to
    handle failures. Table 6 shows a summary of the investigated literature on fault
    tolerance in the cloud. TABLE 6 Summary of Investigated Fault Tolerance Literature
    in Cloud Because of its unstable nature of failure and heterogeneous characteristics,
    the hybrid failure handling method is more appropriate for the Fog computing environment.
    C. Simulation Tools for Fog Computing Simulation and modeling in Fog computing
    are still in their infancy. However, a few research works have been done on Fog
    computing simulation, which are focused on some specific aspect of Fog computing.
    Aazam and Huh [54] focused on resource prediction and pricing in Fog computing.
    The Proposed Fog-based resource management model is able to estimate the required
    resources based on the probability of user behavior of future resource use. Validation
    and performance evaluation was done using simulation. However, they did not consider
    service heterogeneity, QoS, or device mobility factors. Another work proposed
    by Dastjerdi et al. [4] focused on dag of the query for incident detection in
    a smart city use case. Both of these works used CloudSim [119] to validate their
    method along with an experimental evaluation. The first toolkit for Fog simulation
    was developed by Gupta et al. [120], known as iFogSim. The toolkit is used for
    the simulation and modeling of IoT resource management techniques in the Fog and
    edge computing paradigms. The most challenging problem is the design of resource
    management techniques, which determine analytic application distribution among
    edge devices, which will improve the throughput and reduce latency. The proposed
    simulator is capable of measuring the impact of resource management techniques
    in terms of network congestion, latency, cost, and energy consumption. The simulator
    was validated using two use cases and the authors also proposed a Fog computing
    environment architecture. Challenges in Fog computing deployment are include incorporating
    Fog with Emerging Technologies such as 5G Technologies [121], Network Function
    Virtualization (NFV), and Software-defined Networking (SDN). In this case, a simulator
    with container, SDN, and NFV support is crucial. Table 7 presents the key features
    of these two simulators that are mostly used by various researchers for Fog computing
    simulation. These two simulation tools did not focus on network parameters such
    as bandwidth distribution of the link and round-trip delay of the various media.
    These two parameters heavily affect the simulation results where minimization
    of latency is the key goal in a Fog computing environment. Secondly, both tools
    did not consider container-based virtualization. In a Fog computing environment,
    there are many devices that will participate in computation, where hypervisor-based
    virtualization is nearly impossible to implement due to the lower memory and processing
    power of these devices. TABLE 7 Simulation Tools Used for Fog Simulation and Their
    Key Features D. Fog-Based Micro Services A microservice is an independent process
    and Software-Oriented Architecture (SOA) that interacts by message passing. The
    SOA of microservice does not hinder or favor any specific programming model. It
    provides design and implementation guidelines for distributed applications to
    partition each component independently. Each of the components addresses a specific
    functionality. The functionality of the components can be accessed by message
    passing and is possible to implement in any mainstream programming language internally.
    In this way, this principle helps developers and project managers to develop each
    module independently and test it with a few related functions. Some microservices,
    also known as high-level microservices, are mainly responsible for coordination
    with other microservices [124]. The organizational approach of microservices accelerates
    the development cycle, nourishes ownership, encourages innovation, improves scalability,
    and enhances the maintainability of software applications. Using this approach,
    software becomes a small independent service and interacts over unambiguous APIs.
    These services are preserved via self-contained small teams [125]. The agility
    and independent distributed nature of microservice deployment makes it a good
    solution for Fog-based IoT application development. Independent processes and
    interaction via message passing features has made microservices more convenient
    for IoT applications. In the Fog, there is a limitation of resources, so developing
    microservices in the Fog will minimize the growing complexity of the big system
    by dividing it into a set of small independent services. Microservice is taking
    modularity to a subsequent level by incorporating high cohesion and loose coupling
    of distributed systems. 1) Current Research Aspects of Microservice Recently,
    microservice-based applications have started gaining popularity [124]. Fog-based
    microservices have not been investigated extensively; hence, it is an open research
    area. However, some research works have been done in this emerging research area,
    with most of the efforts being related to IoT. Butzin et al. [126] investigated
    the use of microservices in IoT and claimed that the architectural goal of IoT
    and microservices are similar. However, they actually have different features
    in terms of various aspects. First of all, microservice has a self-containment
    feature where all dependencies and libraries are packed with the application in
    a single image. On the other hand, for IoT, all libraries are not generally wrapped
    with the application. However, both use similar types of virtualization and web
    protocols. Microservice also has a continuous integration and delivery feature
    while in IoT these are not available or only partly exist. Vresk and Čavrak [127]
    proposed a microservice-based middleware for IoT to support device heterogeneity,
    various communication protocols, and services. They presented a data model and
    address model for microservice-based IoT. Brito et al. [128] proposed a service
    orchestration architecture for Fog using microservices. The authors defined the
    resource manager as a microservice. Khazaei et al. [129] proposed a generic programmable
    self-managing microservice-based platform for IoT. In the platform, microservices
    will exist in all layers in a cascading manner and an autonomic management system
    will scale the microservice. A similar type of IoT framework was proposed by Sun
    et al. [130]. In their architecture of nine components, all are microservices
    except for the core service. The work proved that microservices are far better
    than the monolithic approach in terms of scalability, flexibility, and platform
    independence. However, still, microservice-based IoT architecture suffers from
    various issues such as faults in the network, network delay, message serialization,
    cooperative transaction processing, and other distributed computing scenarios.
    Li et al. [131] proposed a cooperative-based model specifically for smart sensing
    devices; it is possible to enhance the performance of such a service by undertaking
    a micro-service based concept. Krivic et al. [132] proposed a management solution
    for Machine-to-Machine (M2M) device communication in an IoT system using collaborative
    microservice. They argued that microservices could act as the agent in an agent-based
    system since each microservice is responsible for performing a specific task and
    acts collaboratively to achieve the system goal. Container-based virtualization
    is the best solution for deploying microservices since the container supports
    OS virtualization and packs all dependencies in a single image. A container is
    able to manage physical hardware resource needed by an application with its OS
    kernel utilities [133]. 2) Microservices and IoT Applications Many research works
    have suggested Fog-based processing for IoT applications in smart transportation
    systems [96]–[98], Augmented and Virtual Reality [99], [134], [135], and healthcare
    [26], [136], [137]. Fog computing is also suitable for video streaming, smart
    homes, smart cities, and CDN. The common characteristics of these applications
    are time-sensitiveness, which make Fog computing a promising emerging computing
    paradigm. The main drawback of the Fog, however, is resource limitation and failure.
    Thus, using microservices for Fog-based IoT applications will minimize these drawbacks.
    Microservices are standalone, lightweight, and easily deliverable. To mitigate
    resource limitation, the microservice-based container is the best solution so
    far. In the same way, it will also minimize the cost of failure by deploying the
    application immediately. Many open research issues can be addressed by implementing
    Fog-based micro services; these include service management, scheduling, monitoring,
    fault tolerance, security, and privacy. E. Fog Based Mobile Computing The number
    of smartphone and mobile device users in urban areas as well as in rural areas
    is increasing day by day. As a result, mobile users are now requesting high-volume
    content collaboratively. Providing service for all requested contents in an area
    where mobile users are densely populated is a really challenging task for service
    providers [138]. The high number of concurrent content requests will only make
    the situation worse. One of the best solutions to cope with this problem is to
    offload content near the users, so that the users could get better service. This
    content offloading process can be supported by mobile Fog computing. In mobile
    Fog computing, content will be offloaded to the Fog device, which is located closer
    to the users. However, content management in Fog nodes is a current research issue.
    Depending on the demand of the contents, offloading should be distributed on the
    Fog nodes. Constant monitoring and efficient cache management is crucial to deal
    with resource-limited Fog nodes. A few research works have been done on mobile
    Fog computing. This section chronologically discusses the research works that
    have been done in this particular research area in the past couple of years. Hong
    et al. [94] proposed a high-level programming model that supports large-scale
    geospatially distributed time-sensitive applications. The proposed Mobile Fog
    programming model has two design goals. The initial goal is to provide a simplified
    application development for an enormous number of heterogenous devices, which
    are distributed in a wide area. The next goal is the dynamic scaling of resources
    based on resource demand. They developed an API for their programming model and
    evaluated it using two application models: vehicle tracking using a camera and
    traffic monitoring using a Mobility-driven distributed Complex Event Processing
    (MCEP) system. However, they did not focus on process placement or process migration.
    Shi et al. [139] proposed a P2P inspired communication model between the mobile
    device cloud and mobile nodes to share resources and computation task among mobile
    devices. In their work, they utilized a Constrained Application Protocol (CoAP)
    for implementing microservices. This work introduced the M2M approach in Fog computing
    while the classical Fog is actually hierarchy based. Content offloading in the
    mobile Fog was investigated by Khan et al. [138]. They defined mobile Fog as co-located
    self-organizing mobile nodes, which offer distributed resources at the edge. The
    aim of this work was to collaborate nodes for content caching, which will maximize
    the availability of the content and minimize operational cost. The proposed coalition
    game helps find the best co-located candidates near the users for sharing storage
    and self-organizing. Wang et al. [140] proposed a three-layer hierarchy framework
    using a Fog structure to bridge the communication between WSNs and the cloud.
    They designed a routing algorithm for bridging communication by considering the
    number of hops and energy consumption. They defined the Fog node as a sink, which
    will transfer data from sensor to the cloud. The proposed framework consists of
    routing layer, Fog layer, and sink layer. In the Fog layer, a sink acts as the
    Fog nodes as well to minimize transmission delay. However, there is a lack of
    security and privacy concern being addressed in mobile Fog computing. Roman et
    al. [141] addressed security and privacy for all edge-level computing. This included
    a usual thread in a network system mobile Fog that requires extra measures of
    authentication, trust, access control, protocol, and network security. SECTION
    IX. Open Issues and Future Research Directions A. Infrastructure-Related Issues
    The Fog is an evolving technology, expanding in such a way that it needs to reach
    market adoption to support all kinds of time-sensitive applications. The Fog has
    become an enactment of research efforts by various academies and industries. One
    of the key initiatives is the Open Fog Consortium (OpenFog), which was founded
    by the ARM, Cisco, Dell, Intel, Microsoft and Princeton University in November
    2015 [31]. Foxconn, General Electric, Hitachi, Sakura Internet, ShanghaiTech University,
    and ZTE are the contributing members of this nonprofit consortium. They are accelerating
    digital innovation with the blending of 5G wireless technology, IoT, and embedded
    AI by providing open interoperable architecture. However, many open challenges
    exist for this sprout-level computing paradigm. In this section, we discuss the
    research challenges and address the future directions for Fog computing research.
    Figure 10 shows some important research issues in Fog computing. FIGURE 10. Fog
    computing research issues. Show All 1) Deployment Issues From the deployment viewpoint,
    OpenFog is defined as an N-tier environment. However, the excessive increase in
    number of levels in the Fog layer might cause latency problems in the newly emerging
    Fog computing paradigm. Therefore, the number of tiers based on the use case must
    be determined. Deployment decisions will be undertaken based on requirements such
    as type and amount of task that will be done by each tier, total number of sensors,
    Fog device capability, in between the latency and reliability of Fog devices.
    Still, it is necessary to investigate how these requirements will be fulfilled.
    Application and resource scaling is also an important issue during deployment.
    Based on the requirement of the application and resource, scaling and shrinking
    without interrupting current services could be undertaken. In this regard, placement
    might also affect Fog deployment. 2) Standard Architecture for Fog Computing Up
    until now, there has been no defined standard architecture for Fog computing.
    The OpenFog consortium released two versions of the Fog architecture in February
    2016 [61] and February 2017 [142]. Their first draft was an initial overview of
    the Fog architecture. In their second draft, the Fog architecture was discussed
    in more detail. In their proposed architecture, they considered many key aspects
    of Fog architecture including performance, manageability, security, data analytics,
    and control. However, further research needs to be undertaken to explore and gain
    deeper insight into each layer with proper validation. 3) Interoperability and
    Federation of Fog Because of the Fog, users are able to process their request
    near them, which will minimize latency. However, what will happen if an increasing
    number of multiple latency-aware applications requests are sent in one shot to
    the Fog device and the Fog device is unable to handle that many requests? Will
    it be passed to the cloud for processing? If it is passed to the cloud, then latency
    requirements will not be satisfied. Thus, interoperability and federation among
    Fog clusters and Fog servers are necessary. Hence, if a Fog device is fully utilized,
    it will send requests to peer Fog devices or Fog servers for processing instead
    of sending them to the cloud. B. Platform-Related Issues 1) Resource Management
    Resources are most dynamic and heterogeneous in a Fog environment because of the
    diversity of devices and their available resources. All devices known as Fog devices
    are responsible for performing the computation of their own application. For example,
    a computer that relies on office staff to perform some ordinary email and documentation
    works might be a part of the Fog and might also act as a Fog device. In such a
    case, the amount of resources available for Fog computation is dynamic but predictable
    via the analysis of the long-term activity of its resources. This prediction is
    necessary because once the Fog task execution starts, and over a period of time,
    the status of the resources might change due to the request by the application
    for which the device is responsible for. If we compared this to the cloud, it
    is possible to know how much resources are currently available and whether or
    not they are exclusively used for cloud-based application requests. However, the
    Fog aims to use idle resources available on any Fog device with Fog computation
    always taking second priority. Hence, resource allocation and scheduling in the
    Fog is more challenging than traditional resource allocation and scheduling in
    the cloud. 2) Failure Management Fog device failure probability is always high
    because the devices are distributed and the management of Fog devices is not central.
    Hence, the devices could fail for many reasons; this could be due to hardware
    failure, software failure, or because of user activity. Besides these problems,
    some other reasons include connectivity, mobility, and power source, which also
    play a big role. Most of the devices in a Fog environment might be connected via
    wireless connections; it is obvious that wireless connections are not always reliable.
    The majority of devices that are connected via wireless are mobile, so these devices
    could change location to different clusters frequently. One other characteristic
    of these devices is that they are battery powered and might fail anytime. Hence,
    dealing with the complex nature of failure is very difficult. Also, it is necessary
    to ensure SLA by defining QoS parameters. So, the question is: What are the SLAs
    and how should they be defined? Also: What QoS parameters must be considered,
    so that the consumer and providers can retain a win-win situation? 3) Communication
    Between Different Layers The Fog should ensure uninterrupted connection with the
    devices to ensure application requirements of time-sensitive applications are
    met. If the application were to control an autonomous car or drone and if it were
    responsible for emergency surveillance, then failure in connectivity might cause
    serious harm. Even if connectivity to the cloud fails, the Fog still needs to
    ensure continuous connectivity. Thus, cross-layer connectivity among IoT devices,
    Fog, and cloud are of the utmost importance. The connection type and protocols
    used by IoT devices and Fog devices might be different. Therefore, how these issues
    will be handled is an important research issue. 4) User Participation Management
    Efficient Fog service management depends on the participation of users in Fog
    computation. However, how can user participation be managed? How do we deploy
    minimum resources in the case where no one wants to participate? We need to address
    these problems clearly with a feasible solution. One of the methods to increase
    user participation is through incentive and reward-based policies. With such policies,
    any user that participates in Fog computation will benefit. Even a user, who participates
    to complete his own request, will be rewarded by getting some discount based on
    his participation. However, this area needs to be addressed because the overall
    success of Fog computation depends on the participation of Fog devices, which
    are owned by various people and organizations. 5) Security and Privacy Fog devices
    are managed by different operators based on their location and ownership. Nobody
    would want to contribute to Fog computation if device control were compromised.
    Thus, how the security of a participant device will be maintained if the device
    were to take part in Fog computation is a big question. Another key security issue
    for this scenario is participant user data security. A participant device might
    have critical information. How will safety be guaranteed in such a case? On the
    other hand, critical data might be processed in a device, which is owned by a
    black hat hacker. How will safety and privacy be ensured then? Security issues
    also exist during cross-layer communication. Similar to the distributed nature
    of the Fog, security management should also be distributed, which will not be
    dependent on any central component. C. Application-Related Issues 1) Application
    Service Management Billions of IoT devices will be handled by the Fog paradigm,
    which will handle time-sensitive and time-insensitive applications. The degree
    of service, availability, and quality is most diverse in the Fog. Hence, service
    management is a typical issue for the entire Fog realm. Services should be microservice-based,
    so that agility and management issues can be handled properly. Further research
    is necessary to explore the possibility of Fog-based solutions. 2) Application
    Modeling Modeling Fog applications is complex because the application should collect
    data from different IoT devices, which use different protocols and sets of codes.
    Thus, it is challenging to model generic applications, which can be deployed with
    minimal effort. To solve this issue, a standard form of communication protocol
    is necessary, so that the modeled application can communicate and work with different
    types of IoT devices. SECTION X. Conclusion The Fog computing paradigm is currently
    in its infancy, so an extensive investigation is required for this emerging technology.
    In this survey, we presented and discussed the overview, architecture, state-of-the-art
    and other similar technologies in Fog computing. Based on the literature, we derived
    a taxonomy for Fog computing by analyzing the requirement of Fog infrastructure,
    platform, and applications. We also covered resource allocation and scheduling,
    fault tolerance, simulation tools, and microservices in Fog computing. Finally,
    we presented some challenging and open research issues. We strongly believe that
    this comprehensive survey will bring to light IoT application execution for a
    Fog computing environment as well as point towards the direction for current and
    future research in this rapidly growing research area. In this way, this computing
    paradigm, which is still immature, will be propelled towards achieving market
    adoption in the near future. ACKNOWLEDGEMENT The authors would like to sincerely
    thank Professor Rajkumar Buyya for his insightful comments and discussion on improving
    the overall quality of the paper. Authors Figures References Citations Keywords
    Metrics More Like This The Application of Fog Computing and Internet of Things
    Technology in Music Resource Management Model IEEE Access Published: 2020 Deep
    Reinforcement Learning-Based Dynamic Resource Management for Mobile Edge Computing
    in Industrial Internet of Things IEEE Transactions on Industrial Informatics Published:
    2021 Show More IEEE Personal Account CHANGE USERNAME/PASSWORD Purchase Details
    PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS Profile Information COMMUNICATIONS PREFERENCES
    PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help? US & CANADA: +1 800 678
    4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow About IEEE Xplore | Contact
    Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics
    Reporting | Sitemap | IEEE Privacy Policy A not-for-profit organization, IEEE
    is the world''s largest technical professional organization dedicated to advancing
    technology for the benefit of humanity. © Copyright 2024 IEEE - All rights reserved.'
  inline_citation: Naha et al. [12]
  journal: IEEE Access
  limitations: 'This paper does not provide a detailed analysis of specific algorithms,
    protocols, or implementation aspects of Fog Computing for IoT applications.


    It does not discuss the challenges and limitations of Fog Computing, such as interoperability,
    security, and privacy concerns, in detail.


    The paper does not provide insights into the current state of Fog Computing adoption
    and deployment in real-world IoT applications.'
  pdf_link: null
  publication_year: 2018
  relevance_score: 1.0
  relevance_score1: 0
  relevance_score2: 0
  requirements_score: 1.0
  title: 'Fog Computing: Survey of Trends, Architectures, Requirements, and Research
    Directions'
  verbatim_quote1: Fog Computing, which resides in between cloud and IoT devices,
    was proposed in 2012 by researchers from Cisco Systems [13]. Processing application
    logic and data at the edge is not a new concept. The concept of Edge computation
    emerged around the 2000s [14], [15] and another similar concept, cloudlets, was
    introduced in 2009 [16]. Both Cloudlets and Fog computing are the advancements
    of a similar concept, which revolves around processing at the edge level. While
    cloudlets are applied in the mobile network, Fog computing is applied to connected
    things such as IoT, which plays into the concept of IoT [17]. Fog is both a virtualized
    and non-virtualized computing paradigm that provides networking, storage, and
    computation services amid cloud servers and IoT devices [4], [13]. However, these
    services are not completely located at the network edge.
  verbatim_quote2: Fog computing architectures are based on Fog clusters where multiple
    Fog devices participate to cooperate with the processing. On the other hand, datacenters
    are the main physical components of clouds. Because of this, cloud computing has
    high operational costs and energy consumption. By comparison, energy consumption
    and operation costs in the Fog computing paradigm is low. The Fog is located closer
    to the user, so the distance between users and Fog devices could be one or a few
    hops, which is also agreed by Hu et al. [8]. However, according to Mahmud et al.
    [26], the distance between users to the Fog is one or two hops. Again, Luan et
    al. [27] argued that the distance should be one hop with wireless connectivity.
    Yet, all agreed with the distance between the users to the cloud, which is a multi-hop
    distance.
  verbatim_quote3: Fog computing infrastructure requirements depend on the network,
    devices, and their requirements. All Fog devices, network devices, and gateways
    existing in the Fog environment that participates in computation are also part
    of the Fog infrastructure. Infrastructure denotes the physical components of the
    Fog environment.
- DOI: https://doi.org/10.1016/j.compind.2019.04.002
  analysis: 'This study uses a systematic literature network analysis (SLNA) to review
    the state-of-the-art blockchain technology including its recent advances, main
    applications in agri-food value chain and challenges from a holistic perspective.
    The findings suggest that blockchain technology together with advanced information
    and communication technology and internet of things have been adopted for the
    improvement of agri-food value chain management in four main aspects: traceability,
    information security, manufacturing and sustainable water management.'
  authors:
  - Guoqing Zhao
  - Shaofeng Liu
  - Carmen López
  - Haiyan Lu
  - Sebastián Elgueta
  - Huilan Chen
  - Biljana Mileva Boshkoska
  citation_count: 405
  full_citation: 'Blockchain technology in agri-food value chain management: A synthesis
    of applications, challenges and future research directions'
  full_text: '>

    Skip to main content Skip to article Journals & Books Search Register Sign in
    Brought to you by: University of Nebraska-Lincoln View PDF Download full issue
    Outline Highlights Abstract Keywords 1. Introduction 2. Research methodology:
    systematic literature network analysis 3. Applying the SLNA to the area under
    study 4. Current applications of blockchain technology in agri-food value chain
    management 5. The challenges for applying blockchain technology in agri-food value
    chain 6. Discussion: research gaps and future research directions 7. Conclusions
    Acknowledgment Appendix A. References Show full outline Cited by (422) Figures
    (3) Tables (7) Table 1 Table 2 Table 3 Table 4 Table 5 Table 6 Show all tables
    Computers in Industry Volume 109, August 2019, Pages 83-99 Blockchain technology
    in agri-food value chain management: A synthesis of applications, challenges and
    future research directions Author links open overlay panel Guoqing Zhao a, Shaofeng
    Liu a, Carmen Lopez b, Haiyan Lu a, Sebastian Elgueta c d, Huilan Chen a, Biljana
    Mileva Boshkoska e f Show more Add to Mendeley Share Cite https://doi.org/10.1016/j.compind.2019.04.002
    Get rights and content Highlights • First literature review paper of blockchain
    technology in agri-food value chain management. • Four applications of blockchain
    technology are identified. • Six challenges for applying blockchain technology
    are identified. • Research gaps and future research directions are proposed. Abstract
    Agri-food value chain is an area of significant importance because of providing
    sustainable, affordable, safety and sufficient food, feed, fibre and fuel to consumers,
    it is critical to ensure these value chains running smoothly and successfully
    by applying advanced internet technologies. Blockchain technology is a new digital
    technological approach underpinned by the Industry 4.0 to ensuring data integrity
    and preventing tampering and single point failure through offering fault-tolerance,
    immutability, trust, transparency and full traceability of the stored transaction
    records to all agri-food value chain partners. This paper used systematic literature
    network analysis to review the state-of-the-art blockchain technology including
    its recent advances, main applications in agri-food value chain and challenges
    from a holistic perspective. The findings suggest that blockchain technology together
    with advanced information and communication technology and internet of things
    have been adopted for the improvement of agri-food value chain management in four
    main aspects: traceability, information security, manufacturing and sustainable
    water management. Six challenges have been identified including storage capacity
    and scalability, privacy leakage, high cost and regulation problem, throughput
    and latency issue, and lack of skills. Based on the critical analysis of literature,
    research gaps and future research directions are proposed in this paper regarding
    the applications and challenges of blockchain technology in agri-food value chain
    management. This study makes contributions to the extant literature in the field
    of agri-food value chain management by discovering the potential of blockchain
    technology and its implications for agri-food value chain performance improvements
    such as food safety, food quality and food traceability. Previous article in issue
    Next article in issue Keywords Blockchain technologySystematic literature network
    analysisIndustry 4.0Internet of things (IoT)Agri-food value chain digitisation
    1. Introduction The agri-food value chain is a complex system responsible for
    the circulation of agri-food products from the initial stage of production to
    the final stage of consumption. In the circulation process, value chain members
    play a critical role in meeting the consumers’ demand for agri-food products and
    maintaining the quality and safety of products [1]. Simultaneously, with the rapid
    development of internet technologies in the value chain area, a large number of
    emerging technologies such as advanced information and communication technology
    (ICT) and the Internet of Things (IoT) have been applied to the agri-food value
    chain [46]. However, almost all the systems applied to the agri-food value chain
    are centralised, monopolistic, asymmetric and opaque, and may result in serious
    trust problem. Therefore, consumers’ confidence towards food safety has been broken
    after a series of food safety risk incidents and scandals over the last decades
    [46], such as mad cow disease, horsemeat scandal [2], toxic milk powder, genetically
    modified food and trench oil [3]. Consequently, detailed information of agri-food
    products from farm to fork is increasingly requested by consumers. Furthermore,
    how to build fault-tolerance, immutability, trust, transparency and full traceability
    of agri-food value chain [4], regulations and customers’ expectations towards
    food quality and food safety [5], the complexity of agri-food value chain [6],
    and the current applications of technologies and their potential issues/pitfalls
    [7] have attracted increasing attention from academics and practitioners. A potential
    solution to alleviate the above issues and concerns is usage of blockchain technology,
    which is a new digital technological approach underpinned by the Industry 4.0
    to ensuring data integrity and preventing tampering and any single point failure.
    Four special elements - decentralised, immutable, consensus, and democratic that
    are unique to blockchain networks that make the technology more attractive in
    promoting trust and transparency in the agri-food value chain fraught with errors,
    duplication and redundancies [68]. Crosby et al. [8] underlines that blockchain
    is essentially a distributed database system that records transactional data or
    other digital events that have been executed and shared among value chain participants.
    It enables agri-food value chain participants to establish a decentralized consensus
    on the sequence of events and the current status of the transaction [9]. Blockchain
    technology uses a combination of different technologies that have been applied
    in computer science such as public/private key cryptography, cryptographic hash
    functions and database technologies [10], which provides an innovative solution
    to achieve food traceability, transparency, safety and security [11]. Two prominent
    benefits of blockchain technology are that it provides a permanent transaction
    records which are grouped into individual blocks and cannot be tampered with;
    and it can replace those traditional paper tracking systems and manual monitoring
    systems, so as to prevent the traditional way of the value chain from suffering
    the inaccurate impact [39]. The academic interest in investigating the application
    of blockchain technology in agri-food value chain management has been progressively
    expanded, with a rapid increase in the contributions of academic experts covering
    this aspect [[11], [12], [13],38]. Moreover, blockchain technology used in the
    agri-food value chain seems to be a promising research stream for future research,
    especially in the era of Industry 4.0 [14,83]. However, only a limited number
    of studies analyse the current applications and future research directions of
    blockchain technology in different industries. We found three reviews concerned
    with the blockchain technology and its impact on the social and economy, drawn
    up, respectively, by Anascavage and Davis [15], who identified 16 areas that blockchain
    technology could be applied to, including food security; Tama et al. [16] acknowledge
    four areas that blockchain technology has been applied to and considers that blockchain
    technology plays an important role in guaranteeing the traceability of the agri-food
    value chain; and finally Yli-Huumo et al. [17] conducted a systematic literature
    review (SLR) on current research of blockchain technology including security,
    wasted resources, usability and privacy. These reviews are, however, relatively
    general, and given the current research and applications of blockchain technology,
    none of the reviews addresses the application of the blockchain technology in
    the agri-food value chain management. Therefore, there is a lack of up-to-date
    reviews that offer a comprehensive overview of the main issues related to current
    applications, challenges and future research directions of the blockchain technology
    in the agri-food value chain management. Considering the above arguments, the
    main objective of this study is to fill this gap by offering a systematic literature
    network analysis (SLNA) of the recent contributions of blockchain technology in
    the agri-food value chain management, highlighting the research that has been
    developed over time, and identifying the challenges of applying blockchain technology
    to the agri-food value chain management, and proposing the most promising research
    directions for the future. The remainder of this paper is organised as follows.
    The methodology adopted in this paper is described in Section 2, while the application
    of the research methodology to the context under study is provided in Section
    3. Then, the current applications of blockchain technology in the agri-food value
    chain management are presented in Section 4 followed by the challenges for applying
    blockchain technology in the agri-food value chain that are presented in Section
    5. The research gaps and proposed future research directions are presented in
    Section 6. Finally, conclusions and research limitations are drawn in Section
    7. 2. Research methodology: systematic literature network analysis Systematic
    literature network analysis (SLNA) is constituted with two methods: systematic
    literature review (SLR) and citation network analysis (CNA). The purpose of integrating
    these two existing methodologies (SLR and CNA) is to maximize the advantages related
    to each of them: SLR provides a reproducible and rigorous method that is applied
    in this study to select the most relevant and high-quality studies from previous
    literature of blockchain technology in agri-food value chain management. Through
    synthesising of the literatures, the state-of-the-art of applications and the
    challenges to apply blockchain technology in agri-food value chain management
    will be revealed. Simultaneously, why blockchain technology matters in agri-food
    value chain management is also disclosed. CNA offers an evidence-based approach
    to identifying the most-cited studies from the selected databases, revealing the
    contributions on blockchain technology theory building in the agri-food value
    chain management as well as suggesting future research directions that can facilitate
    the application of the blockchain technology to the agri-food value chain management
    [18]. The process of SLNA from the combination of SLR and CNA is shown in Fig.
    A1. 3. Applying the SLNA to the area under study The process of how to apply SLNA
    to the area of blockchain technology in agri-food value chain management is described
    in the following five sub-sections. 3.1. Formulating the research questions The
    first stage of conducting SLNA is to formulate research questions. It is important
    to have well-specified, informative and clearly formulated research questions
    to avoid bias, error and ambiguity [19]. Therefore, the research questions were
    formulated based on the following process: (1) Brainstorming all types of applications
    of blockchain technology that can be used in agri-food value chain management;
    (2) Consulting with three experts in academia and agri-food industry to evaluate
    whether it is possible to apply the blockchain technology in these areas; (3)
    Examining possible applications of blockchain technology that can be applied to
    the agri-food value chain management. Based on the above processes and principles,
    the following research questions were formulated: RQ1. What are the main applications
    of blockchain technology that have been developed in agri-food value chain management?
    RQ2. What are the key challenges for applying blockchain technology to agri-food
    value chain management? RQ3. What are the research gaps and future research directions
    for applying blockchain technology to agri-food value chain management? 3.2. Locating
    study Denyer and Tranfield [20] proposed that a comprehensive list of core contributions
    is necessary to answer the review questions by searching the most relevant and
    high-quality studies. Eight databases were selected for literature search, including
    ScienceDirect, Web of Science, Scopus, Taylor & Francis Online, Wiley Online Library,
    Emerald, Google Scholar and IEEE Xplore. The rationale for selecting these databases
    is that they include the top science and technology journals, conference proceedings
    and business research journals. Consistent with other SLR papers in blockchain
    technology (e.g. [17,21,22]), the identified keywords were used as the search
    criteria in our review. Since the aim of this research is to identify the main
    issues relating to the applications of blockchain technology in agri-food value
    chain management, a combination of “blockchain” and “agri-food value chain management”,
    with all the related terms were used for searching the title, keywords and abstract
    in the selected electronic academic databases. These keywords were combined later
    through Boolean connectors to constitute different search strings to be applied
    in the databases. Furthermore, consultation with various practitioners and academics
    in the relevant field was conducted to confirm whether search strings were also
    necessary. Finally, a total of 45 search strings were identified by the authors
    to be included in the search process. A full list of search strings is shown in
    Table 1. Table 1. Search strings for databases search. Keywords “blockchain”,
    “information security”, “information transparency”, “agriculture”, “agricultural”,
    “agribusiness”, “agriculture safety”, “agriculture security”, “agriculture traceability”,
    “food safety”, “food security”, “food traceability”, “food supply”, “food trade”,
    “food value chain management”, “agriculture value chain management”, “agri-food
    value chain management”, “agricultural trade” Databases ScienceDirect, Web of
    Science, Scopus, Taylor & Francis Online, Wiley Online Library, Emerald, Google
    Scholar, IEEE Xplore Search strings (“blockchain” OR “information security” OR
    “information transparency”) AND (“agriculture” OR “agricultural” OR “agribusiness”
    OR “agriculture safety” OR “agriculture security” OR “food safety” OR “food security”
    OR “food traceability” OR “food supply” OR “food trade” OR “agriculture traceability”
    OR “food value chain management” OR “agriculture value chain management” OR “agri-food
    value chain management” OR “agriculture trade”) 3.3. Study selection and evaluation
    As a very recent and new research area, as discussed earlier, the term of blockchain
    technology was first coined in 2008 [16]. In fact, the idea of blockchain technology
    was hardly discussed before 2008. Therefore, we use the year 2008 as the starting
    point to search relevant publications. Further, to find more relevant and important
    studies to be included in the analysis, various reference types such as journal
    papers, conference papers and book chapters were included in the systematic review.
    Simultaneously, the identification of key articles and book chapters that provide
    background information on blockchain technology in agri-food value chain management
    were found from different sources, including colleagues working in the same field.
    The initial search with the specified keywords and open access in the selected
    eight databases from 2008 to 2018 resulted in a preliminary sample of 632 contributions.
    Afterwards, each study was checked by three authors by carefully analysing the
    abstracts, introductions and conclusions to reduce any subjective bias and enhance
    validity. Moreover, relevant book chapters and other publications that were not
    covered by the databases were then identified through carefully searching the
    references used in the previous literature (e.g. [17,21,22]). The review of the
    work of influential authors in the field of blockchain technology in agri-food
    value chain management was also carried out by the same three authors. A series
    of inclusion and exclusion criteria were applied to include/exclude papers (Table
    2), which were built through a brainstorming session among these three authors.
    Studies that do not meet the inclusion criteria or duplicates or non-relevant
    studies were eliminated. As a result, 62 studies were finally selected. Table
    2. Criteria for inclusion or exclusion studies. Inclusion criteria Rationale Articles
    were published in peer-reviewed journals, conference proceedings and book chapters
    in English Peer-reviewed journals, conference papers and book chapters are considered
    to have better quality than non-peer-reviewed articles Articles were published
    between 2008 and 2018 The year 2008 was selected as the starting point as the
    term blockchain was coined in 2008 [16] The selected articles contain at least
    one keyword in their title or abstract Abstract or title focusing on the applications
    of blockchain technology was selected Judge relevance by fully reading all remaining
    abstract, introduction and conclusion The remaining abstract, introduction and
    conclusion focusing on the applications of blockchain technology in agri-food
    value chain were selected Judge relevance by fully reading all remaining articles
    Articles focusing on the applications of blockchain technology in agri-food value
    chain were selected All selected 62 studies were read entirely by the three authors
    independently. By cross-referencing all the citations and references and talking
    with experts in the experts from academia and the agri-food industry, nine additional
    studies were identified and added, resulting in a total of 71 academic peer-reviewed
    journal papers, conference papers and book chapters to be included in the analysis.
    The search and selection process is presented in Fig. A2. 3.4. Citation network
    analysis (CNA) CNA is an effective and efficient way to reveal the articles that
    represent the basis of the field and to identify which articles were used by many
    other authors for the development of their contributions [18]. The citation data
    (author, title, year, cited reference, source, time cited etc.) were collected
    from the Web of Science Core collection. Then, the software Gephi was used to
    build a citation network among the selected studies. Gephi is the leading visualization
    and exploration software for all graphs and networks, which can be applied to
    six main areas such as exploratory data analysis, link analysis, social network
    analysis, biological network analysis, and poster creation [23]. The rationale
    for this choice is that Gephi can provide large information handling capacity,
    friendly graphical user interface and high-quality output formats [24]. As shown
    in Fig. 1, a network consisting of 71 nodes was constructed. It comprises 47 connected
    components and 24 isolated components. Download : Download high-res image (822KB)
    Download : Download full-size image Fig. 1. Citation network among the selected
    studies. Note: Node size depends on the quantity of connected components. From
    the Fig. 1, we can see that the connected components were divided into seven clusters
    according to their citation information. For example, the orange cluster summarized
    the opportunities that blockchain technology could be applied in agri-food value
    chain management such as blockchain combined with IoT to be used in agri-food
    value chain, as well as used in agri-food value chain traceability. It is important
    to note that most of the papers included in this cluster were literature review
    papers [17,25,26]. A detailed analysis of benefits, opportunities and challenges
    of integrating blockchain technology with IoT were discussed in the cluster of
    black. There were four clusters (Light green, purple, red and blue) mainly discussed
    how to use blockchain technology to increase the agri-food value chain traceability
    and manufacturing conceptually and empirically. Simultaneously, different traceability
    models were proposed and tested. Finally, the green cluster represents how blockchain
    along with other technologies such as Big Data, Artificial Intelligence (AI) and
    Internet of Things served as an engine of the 4th industrial revolution, and how
    these technologies can revolutionize the current agri-food value chain management
    [27,28]. The detailed information of each cluster is shown in Table 3. Table 3.
    Detailed information of each cluster. Colour of each cluster Representative papers
    Main applications discussed Orange cluster 1. Where is current research on blockchain
    technology? – A systematic review [17]; 2. Blockchain in logistics and supply
    chain: trick or treat? [44]; 3. A review on the use of Blocckahin for the Internet
    of Things [26]; 4. Blockchain implementation quality challenges: A literature
    review [25]; Generally analyse the current applications of blockchain technology
    in the value chain management Black cluster 1. Blockchain and smart contracts
    for the internet of things [41]; 2. Blockchain with Internet of Things: benefits,
    challenges and future directions [29]; 3. Blockchain-based distributed cloud/fog
    platform for IoT supply chain management [30]; Discussed the applications of blockchain
    technology integrated with IoT: benefits, challenges and future research directions
    Light green cluster 1. An agri-food supply chain traceability system for China
    based on RFID & blockchain technology [38]; 2. Use of blockchain technology in
    agribusiness: transparency and monitoring in agricultural trade [39]; 3. A distributed
    ledger for supply chain physical distribution visibility [31]; Proposed different
    blockchain-based traceability models that could be used in agri-food value chain
    management Purple cluster 1. The truth about blockchain [42]; 2. The blockchain
    as a software connector [32]; 3. The security and traceability of shared information
    in the process transportation of dangerous good [33]; Red cluster 1. Untrusted
    business process monitoring and execution using blockchain [34]; 2. Toward open
    manufacturing: A cross-enterprise knowledge and services exchange framework based
    on blockchain and edge computing [35]; 3. A supply chain traceability system for
    food safety based on HACCP, Blockchain & Internet of Things [46]; Blockchain technology
    was empirically examined in the current traceability system and agri-food manufacturing
    Blue cluster 1. Blockchain ready manufacturing supply chain using distributed
    ledger [43]; 2. Trade: A transparent, decentralized traceability system for the
    supply chain [36]; 3. Holistic tracking of products on the blockchain using NFC
    and verified users [37]; Green cluster 1. Overview of blockchain as the engine
    of the 4th industrial revolution [27]; 2. Agricultural food supply chain powered
    by big data and blockchain [28]; 3. Convergence of AI, IoT, Big Data and Blockchain:
    A review [45]; How blockchain technology along with other technologies such as
    AI, IoT, Big Data revolutionize the current agri-food industry As blockchain technology
    has gained increasing attention from researchers and practitioners, in 2016 Yli-Huumo
    et al. [17] proposed an SLR on blockchain technology by highlighting current research
    topics, challenges and future research directions from a technological perspective.
    Their research results indicate four research gaps existing in the current study:
    (1) Lack of high-quality journal papers, most of the papers are published in conferences,
    symposiums and workshops; (2) The majority of current research is conducted in
    Bitcoin environment, rather than in other blockchain environments; (3) Lack of
    research on usability; (4) No research on the challenges for applying blockchain
    technology, such as latency, throughput and bandwidth. Following Yli-Huumo et
    al. [17], a series of research articles attempt to fill the research gaps. Tian
    [38] and Faye [39] have explored the field of blockchain technology in the context
    of the agri-food value chain from a traceability perspective. The issue addressed
    is how to embed blockchain technology in the current traceability system to increase
    the transparency and security of the agri-food value chain. With the evolution
    of research in the blockchain-based traceability system, some researchers tried
    to examine some generic models for facilitating the development of blockchain-based
    traceability system, such as the “TRADE” model proposed by Maouchi et al. [36].
    Concerns about integrating blockchain technology in the agri-food value chain
    need to be addressed from a single company perspective firstly, therefore, Hamida
    et al. [40] provided a detailed analysis on enterprise blockchains of its applications,
    challenges and opportunities. It is interesting to note that within these studies,
    the paper An agri-food supply chain traceability system for China based on RFID
    & blockchain technology proposed by Tian [38] is the most frequently cited paper,
    which has been cited 16 times by other authors among the selected papers (Table
    4). At the current stage of research in blockchain technology for traceability,
    most researchers (e.g. [[38], [39], [40]]) considered blockchain technology as
    a competitive advantage for agriculture value chain participants to gain trust
    from customers. Finally, most of these articles focus on addressing blockchain-based
    traceability system from the perspective of conceptual development. Table 4. Most
    frequently cited articles in the citation network. Rank Title Author (s) and years
    of publication Source Paper type LCS GCS 1 An agri-food supply chain traceability
    system for China based on RFID & blockchain technology Tian [38] 13th International
    Conference on Service Systems and Service Management Conference paper 16 60 2
    Blockchain and smart contract for the Internet of Things Christidis and Devetsikiotis
    [41] IEEE Access Journal paper 12 350 3 Where is current research on blockchain
    technology? – A systematic review Yli-Huumo et al. [17] PloS One Journal paper
    8 157 4 The truth about blockchain Iansiti and Lakhani [42] Harvard Business Review
    Journal paper 6 162 5 The blockchain as a software connector Xu et al. [32] 13th
    Working IEEE/IFIP Conference on Software Architecture Conference paper 6 70 6
    Blockchain ready manufacturing supply chain using distributed ledger Abeyratne
    and Monfared [43] International Journal of Research in Engineering and Technology
    Journal paper 5 38 7 Blockchain in logistics and supply chain: trick or treat?
    Hackius and Petersen [44] International Conference of Logistics Conference paper
    5 8 8 Toward open manufacturing: A cross-enterprise knowledge and service exchange
    framework based on a blockchain and edge computing Li et al. [35] Industrial Management
    & Data Systems Journal paper 5 4 9 Blockchain technology: beyond Bitcoin Crosby
    et al. [8] Applied Innovation Review Journal paper 5 134 10 Trade: A transparent,
    decentralized traceability system for the supply chain Maouchi et al. [36] Proceedings
    of the 1 st ERCIM Blockchain Workshop 2018 Conference paper 4 2 11 A critical
    review of blockchain and its current applications Tama et al. [16] 2017 International
    Conference on Electrical Engineering and Computer Science Conference paper 4 2
    12 Untrusted business process monitoring and execution using blockchain Weber
    et al. [34] Business Process Management Book chapter 3 74 13 Convergence of AI,
    IoT, Big Data and Blockchain: A review Rabah [45] The Lake Institute Journal Journal
    paper 3 0 14 A supply chain traceability system for food safety based on HACCP,
    Blockchain & Internet of Things Tian [46] 14th International Conference on Service
    Systems and Service Management Conference paper 3 9 15 Digital supply chain transformation
    toward blockchain integration Korpela et al. [47] Proceedings of the 50th Hawaii
    International Conference on System Sciences Conference paper 3 44 16 A survey
    on the security of blockchain systems Li et al. [48] Future Generation Computer
    Systems Journal paper 3 25 Notes: LCS = Local citation score shows the count of
    citations to a paper within the collection; GCS = Global citation score shows
    the total number of citations to a paper in the Web of Science. Another stream
    of research examines how to combine blockchain technology with the IoT that can
    be applied in agri-food value chain management. Christidis and Devetsikiotis [41]
    noted that the combination of blockchain technology with IoT would allow agri-food
    value chain participants to get automated time-consuming workflows in a new and
    unique way, as well as to reduce significant costs in the process. Following Christidis
    and Devetsikiotis [41], many researchers have tried to contribute the theory-building
    of integrating blockchain technology with IoT from different perspectives. Hammi
    et al. [49] explored how to improve trust relationship among agri-food value chain
    members by designing a blockchain-IoT application. Reyna et al. [50] investigated
    how blockchain technology could potentially improve the IoT. Finally, Davcev et
    al. [30] proposed a blockchain-based distributed cloud/fog platform for IoT to
    enable grape value chain. The research trends on blockchain-based IoT has been
    from generally discussing the challenges and opportunities for combining blockchain
    technology with IoT to how to design a blockchain-based IoT system for solving
    the trust issues among agri-food value chain members, which facilitate to build
    a distributed peer-to-peer systems to interact with agri-food value chain participants
    in a trust and auditable manner. The trends towards stricter rules on food safety
    and food quality leads some researchers to explore potential applications of blockchain
    technology in other fields of agri-food value chain management, such as how to
    apply blockchain technology in food manufacturing [43] and how to use blockchain
    technology to increase the water sustainability [59]. Regarding the performance
    of applying blockchain technology in the agri-food value chain management, just
    a few papers measure the performance from the perspective of reducing tracking
    time to improve the traceability [4] and increasing the efficiency of the traceability
    in the agri-food value chain [13]. Simultaneously, several literature review papers
    investigated how blockchain technology has been applied in different industries
    such as agri-food industry, financial service and healthcare [8,16]. They provide
    insights on the development of blockchain technology in different industries and
    facilitate researchers to investigate how to transfer the knowledge from theory
    to practice. 3.5. Thematic analysis Braun and Clarke [51] stated that “thematic
    analysis is a method for identifying, analysing and reporting patterns (themes)
    within data, which provides core skills that will be useful for conducting many
    other forms of qualitative analysis”. Holloway and Todres [52] underlined that
    thematic analysis can be seen as a foundational approach for qualitative analysis.
    In this paper, thematic analysis was used to allow blockchain themes being generated
    by six phases of analysis: reading the whole paper collected from SLR, generating
    initial codes, searching for themes, reviewing themes, defining and naming themes,
    and finally presenting the results. Following the process of thematic analysis,
    we divided the literature of blockchain technology in agri-food value chain management
    based on the following themes: (1) current applications of blockchain technology
    in agri-food value chain management; (2) the challenges for applying the blockchain
    technology in agri-food value chain management. The detailed results from thematic
    analysis are presented in Section 4. Tama et al. [16] conducted a literature review
    on the blockchain technology and its current applications, where the majority
    of literature was concerned with the blockchain technology theory building and
    conceptual development. However, the findings in our study show that the trend
    has been gradually shifted from theory building trying to use blockchain technology
    in practice. Although the number of studies on how blockchain technology can be
    used in agri-food value chain management is increasing, there are a limited number
    of studies on how blockchain technology can be executed. 4. Current applications
    of blockchain technology in agri-food value chain management The first application
    of the blockchain technology was Bitcoin – a peer-to-peer electronic cash system
    [53]. Then, blockchain technology evolved towards smart contracts with the ability
    to provide transparency and trust to the system [41]. A smart contract is a kind
    of computer program that stores on the blockchain and executes by all consensus
    nodes in the network. It can translate contractual clauses into code and store
    them into the storage file, and operate them automatically and independently in
    a prescribed manner based on the data that was included in the triggering transaction
    [54]. Through operating the smart contracts, the need for trusted intermediaries
    between partners can be minimized and the occurrence of malicious or accidental
    exceptions can be reduced. Thus, blockchain technology has been generalized and
    applied in different domains such as finance [55], smart city [56], healthcare
    [57] and agri-food value chain [43]. However, as reviewed by Yli-Huumo et al.
    [17], more than 80% of the academic papers on blockchain technology focused on
    the Bitcoin system, while less than 20% deal with other blockchain applications.
    Although it is a relatively new technology, blockchain is rapidly advancing and
    developing. Lucena et al. [58] stated that there was a huge opportunity for blockchain
    applications to global trade. Blockchain market is estimated to grow from 210.2
    million USD to 2312.5 million USD in the period from 2016 to 2021 based on the
    Global Opportunity Report [90]. Due to its potential increase in the global market,
    it is expected that blockchain technology will play a critical role in facilitating
    future industry development and revolution. However, Poberezhna [59] argued that
    the key challenge for blockchain was to be considered as a simply disruptive technology,
    rather than as an innovative integrative solution that could provide a value proposition
    across a number of business process. In the following four sub-sections, we analyse
    the literature of the applications of blockchain technology in agri-food value
    chain management by classifying them in four distinctive themes: traceability,
    information security, manufacturing and sustainable water management. 4.1. Applying
    blockchain technology in agri-food value chain traceability According to Murki
    [60], different value chains need to embed blockchain technology in the current
    traceability system to create more agile value chains and closer customer relationship.
    Tse et al. [11] hold a similar view that the application of blockchain technology
    in the agri-food value chain may have been the optimal choice to fulfil the requirements
    of supervision and adaption of the fast-growing food market. More specifically,
    Kumar and Mallick [61] construe that blockchain technology has wider applications
    in agri-food value chain such as food delivery and shipping data records, food
    online ordering and transaction data, and food quality assurance data. To integrate
    blockchain technology in the existing traceability system of agri-food value chain,
    many researchers have tried to explore the options from different perspectives.
    Tian [38] proposed an agri-food value chain traceability system based on RFID
    (Radio-Frequency IDentification) and blockchain technology for helping Chinese
    agri-food markets to enhance their food safety and food quality during the logistics
    process. In their proposed traceability system, RFID was used for acquiring and
    sharing data in the agri-food value chain, meanwhile, blockchain technology was
    used for guaranteeing the data shared and published in this traceability system
    is reliable and authentic. However, some researchers argue that RFID technology
    and blockchain based traceability system has some defects in solving the counterfeit
    issues. For example, RFID tags can be cloned which can cause counterfeit parts
    to be circulated in the agri-food value chain [62]. To overcome the drawbacks
    of RFID, Boehm et al. [37] proposed an updated traceability system using blockchain
    technology combined with Near Field Communication (NFC) and verified users. In
    their proposed traceability system, users must provide valid user credentials
    if they want to update a product’s history on the blockchain. Thus, various changes
    of an agri-food product can be reported, and the capabilities of other members
    can be restricted at the same time. Therefore, holistic tracking agri-food products
    with higher transparency and security can be achieved. Faye [39] underlined that
    the application of blockchain technology in agri-food industry would foster more
    transparency and thus customers’ confidence towards agri-food products would be
    re-established. Although blockchain technology has great potential for revolutionizing
    current agri-food value chain traceability systems, it still has some inherent
    defects such as scalability that needs to be tackled, especially when we face
    mass data in the real world. Recent innovations in blockchain, such as scaling
    would change this working manner that requires every computer in the blockchain
    to process every transaction [63]. Croman et al. [64] argued that a scaled blockchain
    could accelerate the transaction process, without sacrificing high security, by
    determining the optimal number of computers to validate each transaction and divide
    work efficiently. Therefore, Tian [46] investigated a value chain traceability
    system based on HACCP (Hazard Analysis and Critical Control Point), blockchain
    technology and IoT. In their proposed new decentralized traceability system, HACCP
    was used to prevent food risk occurrences, and IoT combined with blockchain technology
    was used to continuously deliver massive real-time food-related information to
    all value chain partners in an effective, safe and efficient manner. Then, a case
    testing experiment was used to check whether the system was feasible or not. The
    research results indicate that food safety, value chain efficiency and transparency
    have been effectively improved. Badzar [65] emphasizes that openness and unchangeable
    attributes of blockchain ensure high transparency, stability and reliability of
    agri-food value chain, as well as provide liquidity, more accurate record-keeping
    and high transparency of ownership [66]. To have deep understanding of knowledge
    on how blockchain technology can be used to enhance agri-food business, Rabah
    [28] conducted a review on the applications of big data and blockchain technology
    in the agri-food industry. Their research results reveal that blockchain technology
    played a critical role in creating secure and transparent ledger that was available
    to all the involved participants within the agri-food value chain including the
    producers, manufacturers, logistics service providers, wholesalers, retailers
    and regulators. They provide insights into the effects of blockchain technology
    on the current traceability system, and facilitate the development of blockchain
    technology in the agri-food value chain management. Finally, Biswas et al. [67]
    propose a blockchain based wine value chain traceability system where every transaction
    is recorded as a block in the chain and is visible to relevant value chain members
    such as the grape grower, wine producer, bulk distributor, transit cellar, filler/packer,
    finished goods distributor, wholesaler and retailer entity. One of the most important
    features of their proposed system is that anyone can trace the purchase history
    of the wine by inputting the product ID in the system. However, their work just
    examines an example, rather than a practical application of blockchain technology
    in the wine value chain. Maouchi et al. [36] argue that although various approaches
    have been proposed to create a decentralized traceability system for agri-food
    value chain, these works do not state the feasibility of their work and their
    application for the agri-food value chain. Due to the great potential benefits
    of applying blockchain technology to agri-food value chain traceability system,
    several agricultural industry enterprises around the world have evaluated the
    effect of blockchain technology. For example, Walmart plans to invest $25 million
    over five years from 2017 to establish one food safety collaboration centre in
    Beijing to build a completely new food traceability system with blockchain technology.
    Their mango blockchain solution pilots reduced the time for tracking mango origins
    from seven days to 2.2 s, thus, more transparency and greater efficiency have
    been achieved in Walmart’s food value chain. Then, a pork value chain traceability
    system combined with barcode has been built based on the mango blockchain solutions
    [13]. Yiannas [68] states that the biggest advantage of this system is that it
    allows any trusted users to verify the traceability and authenticity of the product
    at any point of the pork value chain. Despite the increasing emphasis on applying
    blockchain technology in agri-food value chain traceability system, recent studies
    conducted by Kshetri [69] show that just a few researchers have begun to systematically
    assess the effects of blockchain technology on current agri-food value chain traceability
    system. Caro et al. [4] introduced an AgriBlockIoT traceability system for agri-food
    value chain management. It was constituted with three main components, a REST
    Application Interface with the responsibilities to integrate with the existing
    software system, a controller equipped with the abilities to query and convert
    the data records stored in the blockchain, and blockchain involved with smart
    contracts as a gateway to the blockchain itself. It is important to note that
    smart contracts can fire autonomously; hence creating records whenever anomalies
    are detected. Then, two different implementations, namely Ethereum and Hyperledger
    Sawtooth were used to do the performance analysis of traceability. Their research
    results indicate that Hyperledger Sawtooth has better performances than the Ethereum
    counterpart and may be more suitable for IoT devices, because Etherum is quite
    CPU-intensive. Based on the case study for grain quality assurance tracking, Lucena
    [58] finds out that quality measurement throughout the transportation for grains
    along the value chain is always accompanied with fraud, poor monitoring and delay
    to final destinations. Their findings indicate that using blockchain technology
    in the grain value chain traceability system is the best way at present to reduce
    disputes among business partners and information asymmetries. Finally, Kumar and
    Iyengar [70] demonstrated a blockchain based traceability framework for rice value
    chain management. In their proposed framework, blockchain was used to record all
    related issues happening within the rice value chain and monitor the security
    and quality of rice in the transportation process. It is important to note that
    all members in the rice value chain should register themselves and match their
    unique identities and digital profiles in the blockchain system. The research
    result indicates that the security of rice in the transportation process and the
    efficiency of the rice value chain have been greatly improved. 4.2. Applying blockchain
    technology in the agri-food value chain information security Under the background
    of Industry 4.0 and distributed computing, the characteristics of information
    system in agri-food industry have experienced substantial changes. Blockchain
    technology has inherent benefits such as recording transactions in real-time,
    no intermediary, immutability and distributed ledger, which becomes the first
    choice for agri-food value chain managers to enhance information security [60].
    Tse et al. [11] construed that blockchain was a well worthy technology for helping
    agri-food value chain participants to record and transfer transactions authentically.
    Leng et al. [1] proposed a public blockchain for agricultural value chain system
    along with double-chain architecture. The research results reveal that the proposed
    agricultural business resource blockchain not only can increase the security of
    transaction information and privacy of enterprise information, but also can enhance
    the credibility of the public service platform and facilitate overall increase
    of efficiency across the whole value chain system. Neisse et al. [71] explored
    a blockchain-based approach to achieve data accountability and provenance tracking.
    Their findings indicate that for the dynamic data frequently shared among value
    chain members such as the transaction record in agri-food value chain, which have
    strict scalability and performance requirements, controllers or processors should
    manage a contract that registers all subjects accepting all or part of usage conditions.
    Recently, with the advancement of IoT, machine-to-machine (M2M) connections is
    estimated to increase to 3.9 billion to 2022 [72]. More and more agri-food value
    chain participants are being equipped with interconnected electronic devices and
    protocol suites to increase the connectivity and sophisticated data gathering
    and analytics capabilities [50]. However, most of the IoT solutions are dependent
    on the centralized server-client paradigm, connecting to the cloud servers through
    the Internet [26]. Decentralised architectures such as building a large Peer-to-Peer
    (P2P) Wireless Sensor Network (WSN) may cause privacy and security issues to the
    users [73]. Thus, effective tools to ensure information security need to be supported
    by agri-food value chain participants to meet the requested security requirements.
    Currently, around 50% of agri-food practitioners have been experimenting blockchain
    technology with creating proof-of-concept, and 17% of agri-food practitioners
    have been preparing to deploy and use it in their business [74]. Hammi et al.
    [49] proposed a public blockchain-based approach in which devices can communicate
    with each other in a completely secure and efficient way by creating a secure
    virtual zone. After a series of tests, the research results indicate that the
    blockchain-based system demonstrated high resilience towards attacks. Iansiti
    and Lakhani [42] underlined that blockchain technology could provide secure, irreversible,
    distributed, transparent and accurate information sharing service. After conducting
    research on blockchain-based distributed cloud/fog platform for IoT, Davcev et
    al. [30] proposed that holistically using these blockchain-based ICT technologies
    has a positive effect in increasing the quality of agri-food products. 4.3. Applying
    blockchain technology in agri-food manufacturing In today’s highly competitive
    and knowledge-based economy, managing massive amount of information and services
    is the basic requirement for successful food manufacturers. As the information
    and services are diversified, growing in an accelerating velocity, and highly
    complex, an increase number of food manufacturers have difficulties in acquiring
    and managing them alone. Wang et al. [75] state that it is necessary for food
    manufacturers to work together and sustain their competitiveness. To address this
    issue, some researchers have started integrating blockchain concept into manufacturing
    practices. Li et al. [35] proposed a decentralized framework to manage the knowledge
    and services shared between different enterprises based on the blockchain application
    involved smart contracts and edge computing. In their proposed framework, edge
    computing acted as a foundation for providing distributed network, storage and
    computing capabilities in the manufacturing environment. The smart contracts played
    as interfaces between enterprise and its partners for successfully interact. Thus,
    a signed secure and controllable connection between the enterprise and the partner
    could be built with the transaction record and the status were updated on the
    blockchain. A case study was used to examine the effectiveness of the decentralized
    framework. The case study results indicate that manufacturers can develop scalable
    and flexible businesses at a lower cost, and ultimately the overall quality, efficiency,
    and effectiveness of manufacturing services can be improved. Furthermore, Zhao
    et al. [76], built a model of manufacturing service information based on blockchain
    principle and cloud computing, which theoretically solves the problems of sharing
    and securing the manufacturing resources, recalling the product data and guaranteeing
    the quality of the processing. Finally, Kumar and Mallic [61] reported that blockchain
    technology could be used in various perspectives of manufacturing, such as manufacturing
    management, production data, product warranty information and product assurance.
    Although blockchain technology has been seen as a critical element in the manufacturing
    sector in recent years, the role of blockchain technology for promoting resilience,
    scalability, security and autonomy of manufacturing service has been relatively
    overlooked [14]. 4.4. Applying blockchain technology in sustainable water management
    The agriculture productivity is highly dependent on water resource management.
    How to use water resources effectively and efficiently is crucial for agriculture
    development. To drive the sustainable development of water, it is critical to
    address water scarcity aspects that are deeply interrelated with agri-food development.
    Therefore, Civic Ledger [77] considered to develop a blockchain-enabled peer-to-peer
    trading platform (Water Ledger) that would allow more irrigators to participate
    in the platform that entitles and allocates water securely and transparently,
    further boosting the overall efficiency of water resources. Though creating new
    digital identity for irrigators and digitizing the water assets in agri-food value
    chain will cost a lot of money, Poberezhna [59] argues that blockchain combined
    with smart contracts can potentially help water companies and government bodies
    to access real-time data regarding market shares, consumption patterns and management
    of utility bills of consumers, thus, greater transparency to regulators and auditors
    can be achieved. Their research also indicates that recordkeeping will be significantly
    reduced when the blockchain platform is applied in water trading. 5. The challenges
    for applying blockchain technology in agri-food value chain Blockchain technology
    is still in testing phase and its implementation in agri-food value chain management
    has some issues that need to be tackled. Therefore, in this section, we will scrutinize
    the challenges to apply blockchain technology in agri-food value chain management.
    A review of the literature indicates that there are six main challenges for applying
    blockchain technology in agri-food value chain management: storage capacity and
    scalability issue, privacy leakage, regulation problem, high cost problem, throughput
    and latency issue, and lack of skills. 5.1. Storage capacity and scalability Storage
    capacity along with scalability issues have been deeply questioned in the blockchain.
    Koteska et al. [25] stated that one of the main challenges for blockchain implementation
    is scalability. To provide theoretically proven security, it is necessary to have
    a large number of full nodes (a node that can fully validate transactions and
    blocks) in the blockchain implementation. The nodes in the blockchain network
    are expected to validate each transaction of each block [50]. Otherwise, blockchain
    implementation in agri-food value chain management might result in a less decentralized
    system. Koteska et al. [25] proposed that scalability negatively affected three
    dimensions of the blockchain, the size of the data on the blockchain, the transaction
    processing rate and the latency of data transmission on the blockchain. Although
    only full nodes store the full chain, storage requirements are also significant
    [50]. For example of the Bitcoin, the blockchain is always growing with a rate
    of 1MB per block every ten minutes and store a large amount of data in every node
    that no interest for them [26]. As the number of transactions increase in the
    agri-food value chains, the amount of data becomes larger, and the loading of
    store and computing accompanied with data becomes harder, which results in the
    blockchain becoming bulky [78]. Simultaneously, every participant in the agri-food
    value chain needs to constantly store all transaction data to validate them on
    the blockchain because they need to check if the source of the current transaction
    is unspent or not [83]. Thus, with the node size increasing, additional resources
    are required by the nodes. Finally the system’s capacity scale is reduced and
    synchronization time for the new user is increased [50]. 5.2. Privacy leakage
    In the blockchain, each transaction can be traced, checked and audited and every
    user can be identified by their public key or its hash. Undoubtedly, blockchain
    technology provides a new level of transparency and helps to build trust. However,
    it also has negative effect on protecting users’ privacy [50]. Kosba et al. [79]
    stated that blockchain could not guarantee the transactional privacy even with
    the permission management because the information on blockchain was available
    to all participants who belonged to the blockchain network. Lu and Xu [80] underlined
    that every member could access all information on the blockchain because there
    were no privileged users. Maouchi et al. [36] argued that some agri-food value
    chain members might be competitors with each other and they did not enjoy the
    transparent traceability system. Therefore, many efforts for protecting privacy
    in blockchain has been done such as obfuscation on the transaction relationships
    to prevent linking or tracing analysis, hiding the identifies of the sender and
    the receiver through complicated cryptographic schemes, and blinding the transaction
    content whilst retaining the verifiability and computability [81]. In order to
    ensure transactions are not easily to be traced to any given person or computer,
    Monero [82] applies ring of signatures scheme to guarantee transactions untraceable.
    Other schemes such as Stealth Addresses, Pedersen Commitments, Ring Signature,
    Homomorphic Encryption, Zero-knowledge-proof have been used in blockchains to
    improve privacy, but no schemes can hide the sender, the receiver and the amount
    at the same time [40]. Kosba et al. [79] tackled these privacy issues differently
    through using encrypted transactions. The Hawk – a decentralized smart contract
    is responsible for translating the generic code written by programmers into cryptographic
    primitives such as zero-knowledge proofs that retaining transactional privacy.
    After researching in the wine value chain traceability system, Biswas et al. [67]
    stated that there were two drawbacks of the blockchain technology: one is the
    transaction speed; the other one is privacy as neither companies nor individuals
    would like to publish all information onto a public database. 5.3. High cost problem
    Lin and Liao [83] proposed that agri-food value chain participants would need
    a lot of money and time to embed blockchain technology in the current agri-food
    value chain traceability system. Yli-Huumo et al. [17] noted that when blockchain
    became more complex, the computational power would be another critical issue,
    as it required more computational power to confirm more blocks. Simultaneously,
    energy consumption also needs to be taken into consideration [39]. After conducting
    a case study on blockchain-based traceability system, Lu and Xu [80] pointed out
    some public blockchains inherent with a proof-of-work consensus mechanism wasted
    a lot of electricity. Most of the electricity is consumed in two different ways:
    (1) a large amount of electricity is used for the mining process, which involves
    a consensus algorithm that consists in a sort of brute force search for a hash;
    (2) another amount of electricity is consumed in peer-to-peer communications because
    it requires an edge device to be powered [26]. 5.4. Regulation problem Agri-food
    value chains are extended across the globe. Hence, applying blockchain technology
    in agri-food value chain management needs to be considered from a global perspective.
    However, blockchain is a new technology that involves different people from various
    countries without any legal or regulation to follow. Additionally, the absence
    of a central authority and the non-existent of censorship in the current blockchain
    system, this situation creates many uncertainties [50]. Atlam et al. [29] stated
    that this was a serious problem for both agri-food manufacturers and service providers.
    Therefore, it is necessary to introduce new laws or regulations to monitor and
    regulate blockchain applications in the agri-food industry for compliance [8].
    After conducting a case study on grain quality assurance tracking-based on blockchain
    technology, Lucena et al. [58] found a controversial issue when using blockchain
    technology regarding its legal value. Their research also indicates that complex
    agri-food value chain scenarios involving international trade and arbitration
    laws are yet to be proven. 5.5. Throughput and latency issue In the context of
    agri-food value chain management, due to the original restriction of block size
    and the time interval used to generate a new block, the current processing capacity
    of blokchain cannot fulfil the requirements of processing millions of transactions
    in real-time. Aste et al. [84] (p.26) stated that “a system that could handle
    large transaction volumes would require large blocks or mechanisms in which multiple
    blocks are validated simultaneously”. All the above issues will cause a big problem
    for clients when running a blockchain-based system. After investigating an RFID
    and blockchain based traceability system for agri-food value chain, Tian [38]
    stated that there were two obstacles for applying blockchain technology: (1) the
    transaction capacity of blockchain is restricted to seven transactions per second
    due to the restricted size of block; (2) how to deal with storage and synchronization
    issues with the growing size of the blockchain. Regarding latency, it is critical
    to note that current blockchain system needs some time to process transactions.
    For example, in the case of Bitcoin, block creation times follow a Poisson distribution
    with an average of ten minutes (10-minute block interval with 6-block confirmation)
    [26]. As for Ethereum, it is estimated around 3 min for 14-second block interval
    with 12-block confirmation [85]. Jindal et al. [86] construed that the time required
    for generating blocks and validating transactions is increases with an increase
    in the number of transactions. Sharma et al. [87] evaluated the performance of
    a blockchain-based distributed framework involved with Proof-of-Work algorithm
    and found that additional cost in computing sources and more processing time is
    required in case of network delays. 5.6. Lack of skills Given that blockchain
    is a new technology, a limited number of people have in-depth knowledge and skills
    about how blockchain can be used in agri-food value chain management [29]. To
    obtain general knowhow in blockchain technology and expectations of the technology
    in the context of agri-food value chain, Ge et al. [10] conducted numerous interviews
    and meetings with agri-food value chain stakeholders. They found that a considerable
    level of scepticism existed among stakeholders with low know-how of blockchain
    technology, partly due to the way blockchain was portrayed as panacea to all information
    problems, partly due to a series of technical issues that remained to be resolved.
    Therefore, Iansiti and Lakhani [42] proposed that applying blockchain technology
    in the agri-food value chain was likely to be a long process. Simultaneously,
    a widespread lack of understanding on how blockchain works in other areas also
    exists [88]. 6. Discussion: research gaps and future research directions Below,
    we summarized the research gaps and future research directions on blockchain technology
    in agri-food value chain management based on our systematic review of the literature.
    6.1. Future research directions for the applications of blockchain technology
    in agri-food value chain management The analysis of the applications of blockchain
    technology in agri-food value chain management allows us to better understand
    how blockchain technology has been applied and evolved in agri-food value chain
    management. Several directions for future research about implementing blockchain
    technology in agri-food value chain management are suggested and summarized in
    the following. • In the context of applying blockchain technology in agri-food
    value chain traceability, various researchers proposed different blockchain-based
    traceability system that involved different technologies such as RFID, IoT, NFC,
    cloud computing, and big data, as well took different agri-food value chain entities
    into consideration (see Table 5). It is interesting to note that the traceability
    system proposed by Davcev et al. [30] could provide a comprehensive function for
    monitoring the land status, vegetable status, as well as to help to achieve the
    transparent and secure agri-food value chain. Therefore, should be implemented
    in reality. However, most of the proposed traceability systems are staying in
    conceptual phase and there is little empirical research to suggest which one is
    most applicable to the reality. Additionally, just few researchers considered
    third-party regulators/authority organizations in their proposed traceability
    framework. Therefore, one of the priorities for researching the blockchain-based
    traceability system is to conduct empirical research involving third-party regulators/authority
    organizations on different context of agri-food value chains to assess the performance
    of the blockchain-based traceability system. Thus, future studies can evaluate
    the proposed blockchain-based traceability framework effects from different perspectives,
    such as computation costs, transaction processing speed, storage capability, and
    the overall efficiency of agri-food value chains. Table 5. Blockchain technology
    used for agri-food value chain traceability. Paper Authors Involved technologies
    Involved entities Advantages Disadvantages An agri-food supply chain traceability
    system for China based on RFID & Blockchain technology Tian [38] RFID & Blockchain
    technology Plant, farm, warehouse centre, transport vehicle, sales market, and
    government departments & third-party regulators (1) Benefit to tracking and traceability
    management; (2) Benefit to enhance the credibility of the agri-food safety information;
    (3) Benefit to fighting against fake products. (1) High cost for using RFID; (2)
    Transaction capacity and storage capacity of blockchain technology A supply chain
    traceability system for food safety based on HACCP, Blockchain & Internet of Things
    Tian [46] IoT & Blockchain technology with distributed databases Farmer/Producer,
    processor, wholesaler, retailer, authority organizations (1) Can deliver real-time
    information to all supply chain members; (2) Improve the efficiency and transparency
    of the food supply chain; (3) Extremely reduce the risk of centralized information
    systems. (1) High cost for using RFID. Blockchain based wine supply chain traceability
    system Biswas et al. [67] RFID & Blockchain technology Supplier, grape grower,
    wine producer, filler/packer, freight operator, finished goods distributor, wholesaler,
    retailer, and consumer (1) The proposed traceability system enables transparency,
    accountability, safety, and security in the overall process from the grape to
    the bottle. (1) Low transaction speed; (2) Privacy issues; (3) Current system
    only provides limited command-line based instructions to store information; (4)
    Can only deal with public data. Holistic tracking of products on the blockchain
    using NFC and verified users Boehm et al. [37] NFC & Blockchain technology Carrier,
    authority, service provider, and consumer (1) Do not need to share a private key
    to sign a transaction, assures confidentially of personal information. (1) The
    effectiveness the system relies on the correctness of the updates that people
    perform; (2) Additional overhead and costs. Blockchain-based traceability in agri-food
    supply chain management: A practical implementation Caro et al. [4] IoT sensor
    devices & Blockchain technology Provider of raw materials, producer, processor,
    distributor, retailer, and consumer (1) Creating transparent, fault-tolerance,
    immutable and auditable records for the traceability system. (1) Quite CPU-intensive;
    (2) Can only be using one language when implementing logic. Blockchain based distributed
    cloud fog platform for IoT supply chain management Davcev et al. [30] IoT, Cloud
    computing, RFID, Big data & Blockchain technology Farm, processor, transport and
    packaging, wholesaler, retailer, and consumer (1) Transparent and secure supply
    chain system can be achieved; (2) Real-time information on the air temperature,
    air humidity and leaf wetness and soil moisture; (3) Lower power consumption.
    (1) High cost for applying these technologies together. (2) Requiring the devices
    to be powered continuously, which could lead to waste energy. A case study for
    grain quality assurance tracking based on a blockchain business network Lucena
    et al. [58] IoT & Blockchain smart contracts Farmer, rural credit bank, private
    warehouse agent, trading company agent, food processing company (1) All the members
    in the agri-food supply chain can share the same business rules and transaction
    data, transaction transparency were improved. (1) May have regulation problem
    if involved in the international trade. • There are two main areas in the literature
    for using blockchain technology to improve agri-food value chain information security:
    one is using blockchain technology alone; the other one is using blockchain technology
    combined with other technologies such as IoT (see Table 6). Obviously, double
    blockchain architecture has it unique advantages such as efficiency, transparency
    and privacy can be achieved with more data can be stored in the blockchain. Key
    technical components such as decentralized storage, mining hardware, and consensus
    mechanisms are easily to be achieved. However, it needs more effective consensus
    mechanism to deal with large amount of nodes and resources that stored in public
    service platform. Therefore, future research should investigate which consensus
    algorithm is more effective compared with others (Proof-of-Work, Proof-of-Stake,
    etc) in the same context. IoT applications have its own drawbacks such as they
    generate large volume of data and require connectivity and power for long periods.
    Besides, there are other limitations in memory, computer capacity, networks and
    limited power supply. In order to alleviate above issues, one important future
    research direction is to decide where the interactions will take place when combining
    blockchain technology with IoT, for example, inside the IoT, or blockchain, or
    a hybrid approach involving blockahin and IoT. It will need to discuss the advantages
    and disadvantages of these blockchain-IoT based applications through comparative
    analysis. This area is open for future researchers to investigate the impact and
    relative importance, and identify which one is the optimal choice to enhance agri-food
    information security. Table 6. Blockchain technology used for agri-food value
    chain information security. Authors Involved technologies Architecture Advantages
    Disadvantages Leng et al. [1] Blockchain Double chain architecture based on public
    service platform (1) Improve the transparency and security of transaction information;
    (2) Protect the privacy of enterprise information; (3) Increase the efficiency
    of the system. (1) Slowly speed and efficiency of consensus algorithm Neisse et
    al. [71] Sole chain architecture based on public service platform (1) Data privacy
    can be achieved; (2) Immutable. (1) Scalability issues (2) High cost Reyna et
    al. [50] Hammi et al. [49] Blockchain-IoT IoT-IoT (1) Fast latency; (2) Security
    when work offline; (3) IoT devices can communicate with each other; (4) Part of
    data can stored in blockchain (1) Low security when working online IoT-Blockchain
    (1) Immutable record of interactions; (2) Increase the autonomy of IoT devices;
    (3) All the interactions can be traced (1) Data were stored in blockchain, bandwidth
    and data would be increased Hybrid approach (1) Part of the data are stored in
    the blockchain, and the rest are direct shared with other partners (1) High cost
    because involved more devices • Another finding of this study is a new trend of
    focusing on blockchain technology to achieve a higher level of sharing knowledge
    and services among agri-food manufacturers. Current agri-food manufacturing ecosystem
    is changing from integrated and centralized systems to shared and distributed
    systems. Most of the proposed framework for achieving higher performance were
    based on the blockchain technology and cloud computing, which aimed to provide
    a secure, low energy consumption and high efficiency systems to agri-food manufacturers.
    However, it still has some drawbacks. For example, unstable data transmission,
    lack of uniformed technology standard and low internet speed, etc. Blockchain
    technology integrated with edge computing provide a new way to achieve a higher
    level knowledge sharing performance through developing a distributed, sharing,
    standardized, and secured framework. Key technological components such as communication
    protocol, decentralized storage, smart contracts, edge cloud are all needed to
    build this system. However, there are questions remaining about the combination
    of blockchain and edge computing in enhancing overall efficiency and effectiveness
    of agri-food manufacturers. Thus, future studies should apply the blokchain technology
    and edge computing in different agri-food manufacturers using empirical and analytical
    tools to assess its effect on agri-food manufacturing. • A new trend emerging
    in the literature is the application of blockchain technology in sustainable water
    management. A few studies discussed how to apply blockchain technology to enhance
    water sustainability. However, these studies just considered how to enhance water
    sustainability from irrigator’s perspective and water company’s perspective, rather
    than taking the whole agri-food value chain stakeholders into consideration. Therefore,
    future work should holistically consider how to use blockchain technology to enhance
    water sustainability from the whole agri-food value chain perspective. 6.2. Future
    research directions for addressing the challenges of applying blockchain technology
    in agri-food value chain management From our systematic literature review, six
    key challenges emerged for applying blockchain technology in agri-food value chain
    management, they are storage capacity and scalability, privacy leakage, high cost
    problem, regulation problem, throughput and latency issue, and lack of skills.
    Although a growing body of literature is available on discussing these challenges,
    a number of challenges still exist. The purpose of this section is to highlight
    the main challenges identified in the literature and propose future research directions
    for unsolved problems. The identified solutions for the challenges of blockchain
    technology in agri-food value chain management are summarized in Table 7. • One
    of key challenges for applying blockchain technology in agri-food value chain
    is the storage capacity. Although some researchers broadly investigated several
    methods that could enhance the storage capacity, for example, store part of the
    data on-chain and part of the data off-chain [85], build a multi-layers blockchain
    architecture with different purposes [40], and develop a new algorithm involved
    deep learning concept [12] (see Table 7). It is easily to find that more computational
    power is required when implementing these solution methods. Therefore, future
    work should investigate how to appropriate solve the data storage problem without
    increasing the computational power. Specifically, integrating the deep learning
    concept or artificially intelligence concept with current algorithms such as ant
    colony algorithm to achieve computational power efficiency and systematically
    eliminate the irrelevance data of blockchain provide a new route for solving the
    storage problem. Furthermore, comparative analysis of implementing these possible
    solutions in the context of agri-food value chain should be conducted empirically
    and analytically. • Most of the researchers investigated how to solve privacy
    leakage issues from single blockchain architecture perspective, and have applied
    different schemes such as Stealth Addresses, Pedersen Commitments, Ring signature,
    Homomorphic encryption, Zero-Knowledge-Proof to protect privacy of users. Few
    researchers investigated how to protect privacy from a double blockchain architecture
    perspective, that is, one for public, one for agri-food value chain participants.
    Therefore, future work should investigate how to design and evaluate double chain
    structures for blockchain. Further, conduct experiments to check how to combine
    the above-listed data privacy schemes to maximum the performance of data privacy
    mechanisms. • As for the high cost problem, different consensus algorithms have
    been proposed by various authors such as Proof-of-Stake and delegated Proof-of-Stake
    algorithm. Though these two algorithms have various advantages such as reducing
    the computing time, less nodes will be involved in the block validation, etc.
    However, no one have conducted comparative analysis using these two algorithms
    in empirical study in the context of agri-food value chain. This area is open
    for future researchers to systematically investigate the impact and relative importance
    of different mechanisms using empirical and analytical tools. • As discussed earlier,
    blockchain is a new technology which neither has any legislations or regulations
    to follow, nor has a defined way of how to insert the implications arising from
    blockchain technology into a norm setting. Although the application of blockchain
    technology in agri-food value chain is currently still in its infancy, it can
    be expected that more initiatives will be taken by various agri-food organizations
    [10]. Therefore, more work should be taken from theory and empirical perspectives
    to check the effects of blockchain technology on the agri-food value chain, especially
    to check its effect in the international agri-food trade, and then formulate corresponding
    standards based on the research results. • As for the throughput and latency issue,
    some researchers proposed different methods to solve this problem such as implementing
    Bitcoin-NG algorithm and increase the size of each block [17,89]. However, both
    of methods are not perfect enough which will have side effects such as larger
    blocks make full nodes more expensive to operate, and the latency is limited by
    the propagation time of the network, etc. Therefore, how to choose appropriate
    algorithm and block size without side effects become very important in solving
    the throughput and latency issue of blockchain. It is necessary to holistically
    consider this problem with continually experiments and get an optimal solution.
    • Finally, concerned with the lack of skills, we did not find many publications
    that gave us clear answers on this challenge. Only Ge et al. [10] proposed two
    learning objectives for solving the challenge of lacking skills: (1) learn general
    knowledge of blockchain technology; (2) identify how to benefit from blockchain
    technology. Table 7. The identified solutions for the challenges of blockchain
    technology in agri-food value chain management. Main challenges Possible solutions
    Advantages Disadvantages Future research directions Storage capacity and scalability
    To store raw data off-chain, and to store meta-data, small critical data, and
    hashes of the raw data only on-chain [85] 1. Cost efficiency, better performance
    and improved flexibility. 1. More computation power is required; 2. How to integrate
    the on-chain data and off-chain data is a problem. 1. Comparative analysis of
    different data storage methods empirically; 2. Integrating deep learning concept
    or artificial intelligence concept with current algorithms. Removing old transactions,
    fragmenting the global ledger into smaller sub-ledgers and using a hierarchy of
    blockchains [40] 1. Reducing the cost because the data are stored in different
    layer of blockchain; 2. Improved the security of the system. 1. Transaction and
    validation speed will be influenced with more data are stored in the blockchain.
    2. More computation power is required. Novel approach Takagi-Sugeno Fuzzy cognitive
    maps ANN [12] 1. Eliminate of irrelevance data within mining process. 1. More
    computation power is required; 2. High cost problem. Privacy leakage Double Chain
    architecture [1] 1. Can guarantee the authenticity, integrity, and non-tampering
    of transaction data, and ensure the privacy of user information. 2. Improve the
    throughput rate and consensus speed of the system; 3. Business extension can be
    implemented. 1. The consensus of public blockchain is low. 1. Conduct more empirical
    studies on the performance of the agri-food value chain with double chain architecture;
    2. Conduct experiments to check how to combine these data privacy schemes to maximum
    the performance. Stealth Addresses, Pedersen Commitments, Ring signature, Homomorphic
    encryption, Zero-Knowledge-Proof [40]; 1. Desired level of privacy can be achieved
    through implementing mixed techniques. 1. No scheme can hide the sender, the receiver
    and the amount at the same time; 2. More computation time is required. High cost
    problem Perform Proof-of-Stake algorithm [80] 1. Only require a small amount of
    computing time and the ability to ensure the normal operation of the blockchain;
    2. Latency is shorter. 1. The consensus speed is low; 2. Node is accumulated even
    when the node is not connected to the network in the stake stage. 1. Conduct comparative
    analysis of these two algorithms using empirical study in the context of agri-food
    value chain. Perform delegated Proof-of-Stake algorithm [78] 1. Less nodes involved
    in block validation; 2. Block size and intervals can be adjusted by delegates.
    1. Transactions are performed faster; 2. Dishonest delegates can cause financial
    loss. Regulation problem 1. Design and implementation of a clear regulatory framework
    for blockchain implementation in the agri-food domain and develop the evidence
    for the added value of the blockchain technology [10]; 2. Government should set
    up blockchain infrastructure to support policy formulation [26]. 1. Accelerate
    the process of formulating policies and regulations related to the blockchain
    implementation. 2. Make blockchain technology is easily accepted by agri-food
    value chain participants. 1. Government need to invest a lot of money and human
    resources, and may not get the suitable results. 1. Investigate the effects of
    blockchain technology on agri-food value chain, especially on the international
    agri-food trade, and then formulate standards and regulations. Throughput and
    latency issue 1. Implement Bitcoin-NG consensus algorithm [89]; 2. Increase the
    size of each block [17]. 1. Improve the latency and bandwidth without sacrificing
    other properties such as security; 2. More transactions speed per second. 1. Bandwidth
    is limited by the bandwidth of nodes and the latency limited by the propagation
    time of the network. 2. More expensive for managing larger blocks. 1. Holistically
    consider this problem to find the optimal solution for integrating Bitcoin-NG
    consensus algorithm and appropriate size of each block. Lack of skills Not addressed
    7. Conclusions In this study, we conducted an SLNA to review existing work on
    blockchain technology in agri-food value chain management. Through question formulation,
    locating studies, study selection and evaluation, we identified 71 publications,
    including journal papers, conference proceedings and book chapters. Then, we used
    software Gephi to build a citation network based on the citation data collected
    from Web of Science, which helped us to identify current trends and future research
    directions of blockchain technology in agri-food value chain management. The target
    publications of this study covered a broad spectrum of themes such as blockchain-based
    information security and traceability system, and blockchain-based water sustainability
    and food manufacturing. By synthesising the literature of blockchain technology
    in agri-food value chain management within a 10-year timeframe (2008–2018), this
    paper makes contributions to existing knowledge in three aspects: (1) The paper
    provides an overall picture of the evolution of blockchain technology and its
    application in agri-food value chains. (2) The paper elicited key challenges and
    proposed initial solutions for applying blockchain technology to agri-food value
    chain. (3) Research gaps have been identified and future research directions were
    suggested for applying blockchain technology in agri-food value chain management.
    The findings of this study provide a solid foundation for future studies in the
    area of blockchain technology and agri-food value chain management. Acknowledgment
    The work reported in this paper has benefited from the RUC-APS project funded
    by European Commission under the Horizon 2020 Programme (H2020-MSCA-RISE Award
    No. 691249). Appendix A. . Download : Download high-res image (570KB) Download
    : Download full-size image Fig. A1. The process of systematic literature network
    analysis. Download : Download high-res image (576KB) Download : Download full-size
    image Fig. A2. Search and selection process of the studies. References [1] K.
    Leng, Y. Bi, L. Jing, H.-C. Fu, I.V. Nieuwenhuyse Research on agricultural supply
    chain system with double chain architecture based on blockchain technology Future
    Gener. Comput. Syst., 86 (2018), pp. 641-649 View PDFView articleView in ScopusGoogle
    Scholar [2] I.H. Boyaci, H.T. Temiz, R.S. Uysal, H.M. Velioglu, R.J. Yadegari,
    M.M. Rishkan A novel method for discrimination of beef and horsemeat using Raman
    spectroscopy Food Chem., 148 (2014), pp. 37-41 View PDFView articleView in ScopusGoogle
    Scholar [3] J. Xiao, Z.Y. Liu, B.W. Li Research on a food supply chain traceability
    management system based on RFID J. Agric. Mech. Res., 34 (2) (2012), pp. 181-184
    CrossRefGoogle Scholar [4] M.P. Caro, M.S. Ali, M. Vecchio, R. Giaffreda IoT Vertical
    and Topical Summit on Agriculture – Tuscany (IoT Tuscany). Tuscany, Italy, 8-9
    May 2018 Blockchain-Based Traceability in Agri-Food Supply Chain Management: A
    Practical Implementation (2018) Rome: Italy Google Scholar [5] N. Bumbudsanpharoke,
    S. Ko Nano-food packaging: an overview of market, migration research, and safety
    regulations J. Food Sci., 80 (5) (2015), pp. 910-923 Google Scholar [6] J. Kirwan,
    D. Maye, G. Brunori Acknowledging complexity in food supply chains when assessing
    their performance and sustainability J. Rural Stud., 52 (2017), pp. 21-32 View
    PDFView articleView in ScopusGoogle Scholar [7] R.S. Mor, S. Singh, A. Bhardwaj,
    L.P. Singh Technological implications of supply chain practices in agri-food sector
    – a review Int. J. Supply Oper. Manage., 2 (2) (2015), pp. 720-747 Google Scholar
    [8] M. Crosby, Nachiappan, P. Pattanayak, S. Verma, V. Kalyanaraman Blockchain
    technology: beyond bitcoin Appl. Innov. Rev., 2 (2016), pp. 6-19 Google Scholar
    [9] D. Drescher Planning the blockchain: the basic concepts of managing ownership
    with the blockchain Blockchain Basics, Apress, Berkeley (2017), pp. 57-62 CrossRefGoogle
    Scholar [10] L. Ge, C. Brewster, J. Spek, A. Smeenk, J. Top Blockchain for Agriculture
    and Food Wageningen Economic Research, Netherland (2017) Google Scholar [11] D.
    Tse, B. Zhang, Y. Yang, C. Cheng, H. Mu IEEE International Conference on Industrial
    Engineering and Engineering Management (IEEM). 10-13 December 2017Blockchain Application
    in Food Supply Information Security2017 Blockchain Application in Food Supply
    Information Security (2017) Google Scholar [12] R.-Y. Chen A traceability chain
    algorithm for artificial neural networks using T-S fuzzy cognitive maps in blockchain
    Future Gener. Comput. Syst., 80 (2018), pp. 198-210 View PDFView articleView in
    ScopusGoogle Scholar [13] R. Kamath Food traceability on blockchain: Walmart’s
    pork and mango pilots with IBM J. Br. Blockchain Assoc., 1 (1) (2018), pp. 1-12
    CrossRefGoogle Scholar [14] L. Xu, E. Xu, L. Li Industry 4.0: state of the art
    and future trends Int. J. Prod. Res., 56 (8) (2018), pp. 2941-2962 CrossRefView
    in ScopusGoogle Scholar [15] R. Anascavage, N. Davis Blockchain Technology: a
    Literature Review Available at: https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3173406
    [Accessed: 3 July 2018] (2018) Google Scholar [16] B.A. Tama, B.J. Kweka, Y. Park,
    K.-H. Rhee 2017 International Conference on Electrical Engineering and Computer
    Science. Palembang, Indonesia, 22-23 August 2017A Critical Review of Blockchain
    and Its Current Applications2017 A Critical Review of Blockchain and Its Current
    Applications (2017) Jakarta: Indonesia Google Scholar [17] J. Yli-Huumo, D. Ko,
    S. Choi, S. Park, K. Smolander Where is current research on blockchain technology?
    - A systematic review PLoS One, 11 (10) (2016), pp. 1-27 Google Scholar [18] C.
    Colicchia, F. Strozzi Supply chain risk management: a new methodology for a systematic
    literature review Supply Chain. Manag. Int. J., 17 (4) (2012), pp. 403-418 CrossRefView
    in ScopusGoogle Scholar [19] N.-O. Hohenstein, E. Feisel, E. Hartmann Research
    on the phenomenon of supply chain resilience: a systematic review and paths for
    further investigation Int. J. Phys. Distrib. Logist. Manag., 45 (1/2) (2015),
    pp. 90-117 View in ScopusGoogle Scholar [20] D. Denyer, T. Tranfield The Sage
    Handbook of Organisational Research Methods Sage, London (2009) Google Scholar
    [21] D.M. Gligor, M.C. Holcomb Understanding the role of logistics capabilities
    in achieving supply chain agility: a systematic literature review Supply Chain.
    Manag. Int. J., 17 (4) (2012), pp. 438-453 CrossRefView in ScopusGoogle Scholar
    [22] M. Melacini, S. Perotti, M. Rasini, E. Tappia E-fulfilment and distribution
    in omni-channel retailing: a systematic literature review Int. J. Phys. Distrib.
    Logist. Manag., 48 (4) (2018), pp. 391-414 CrossRefView in ScopusGoogle Scholar
    [23] M. Bastian, S. Heymann, M. Jacomy Gephi: an Open Source Software for Exploring
    and Manipulating Networks Available at: https://gephi.org/publications/gephi-bastian-feb09.pdf
    [Accessed: 05 September 2018] (2009) Google Scholar [24] K.H. Ahmed A Decision
    Support Framework for Sustainable Supply Chain Management. PhD Thesis Loughborough
    University (2017) Google Scholar [25] B. Koteska, E. Karafiloski, A. Mishev 6th
    Workshop of Software Quality, Analysis, Monitoring, Improvement, and Applications.
    Belgrade, Serbia, 11-13 September 2017Blockchain Implementation Quality Challenges:
    A Literature Review2017 Blockchain Implementation Quality Challenges: A Literature
    Review (2017) Belgrade:Serbia Google Scholar [26] T.M. Fernandez-Carames, P. Fraga-Lamas
    A review on the use of Blockchain for the Internet of Things IEEE Access, 6 (2018),
    pp. 2169-3536 Google Scholar [27] K. Rabah Overview of blockchain as the engine
    of the 4th industrial revolution Mara Res. J. Bus. Manage., 1 (1) (2016), pp.
    125-135 Google Scholar [28] K. Rabah Agricultural food supply chain powered by
    big data and blockchain Mara Int. J. Sci. Res. Publ., 1 (1) (2017), pp. 55-64
    Google Scholar [29] H.F. Atlam, A. Alenezi, M.O. Alassafi, G.B. Wills Blockchain
    with Internet of Things: benefits, challenges and future directions Int. J. Intell.
    Syst. Appl., 10 (6) (2018), pp. 40-48 View in ScopusGoogle Scholar [30] D. Davcev,
    L. Kocarev, A. Carbone, V. Stankovski, K. Mitreski 8th International Conference
    on Advances in Computing, Electronics and Electronical Technology. Kuala Lumpur,
    Malaysia, 3-4 February 2018Blockchain-Based Distributed cloud/fog Platform for
    IoT Supply Chain Management2018 Blockchain-Based Distributed cloud/fog Platform
    for IoT Supply Chain Management (2018) Kuala Lumpur: Malaysia Google Scholar [31]
    H.Y. Wu, Z.J. Li, B. King, Z.B. Miled, J. Wassick, J. Tazelaar A distributed ledger
    for supply chain physical distribution visibility Information, 8 (4) (2017), pp.
    137-155 CrossRefGoogle Scholar [32] X. Xu, C. Pautasso, L. Zhu, V. Gramoli, A.
    Ponomarev, A.B. Tran, S. Chen 13th Working IEEE/IFIP Conference on Software Architecture.
    Venice, Italy, 5-6 April, 2016The Blockchain as a Software Connector2016 The Blockchain
    as a Software Connector (2016) Rome: Italy Google Scholar [33] A. Imeri, D. Khadraoui
    9th IFIP International Conference on New Technologies, Mobility and Security.
    Paris, France, 26-28 February 2018. Paris, FranceThe Security and Traceability
    of Shared Information in the Process of Transportation of Dangerous Goods2018
    The Security and Traceability of Shared Information in the Process of Transportation
    of Dangerous Goods (2018) Google Scholar [34] I. Weber, X. Xu, R. Riveret, G.
    Governatori, A. Ponomarev, J. Mendling Untrusted business process monitoring and
    execution using blockchain M. La Rosa, P. Loos, O. Paster (Eds.), Business Process
    Management. BPM 2016. Lecture Notes in Computer Science, vol 9850, Springer, Cham
    (2016) Google Scholar [35] Z. Li, W.M. Wang, G. Liu, L. Liu, J. He, G.Q. Huang
    Toward open manufacturing: a cross-enterprise knowledge and services exchange
    framework based on blockchain and edge computing Ind. Manag. Data Syst., 118 (1)
    (2018), pp. 303-320 CrossRefView in ScopusGoogle Scholar [36] M. Maouchi, O. Ersoy,
    Z. Erkin Proceedings of 1st ERICM Blockchain Workshop 2018. Amsterdam, Netherlands,
    8-9 MayTrade: A Transparent, Decentralized Traceability System for the Supply
    Chain2018 Trade: A Transparent, Decentralized Traceability System for the Supply
    Chain (2018) Amsterdam: Netherlands Google Scholar [37] V.A.J. Boehm, J. Kim,
    J. Won-Ki Hong Holistic tracking of products on the blockchain using NFC and verified
    users B.B.H. Kang, T. Kim (Eds.), Information Security Applications, Springer,
    Cham (2018) Google Scholar [38] F. Tian 13th International Conference on Service
    Systems and Service Management. Kunming, China, 24-26 June 2016An Agri-Food Supply
    Chain Traceability System for China Based on RFID & Blockchain Technology2016
    An Agri-Food Supply Chain Traceability System for China Based on RFID & Blockchain
    Technology (2016) Beijing: China Google Scholar [39] P.S. Faye 13th International
    Conference on Service Systems and Service Management. Kuming, China, 24-26 June
    2016Use of Blockchain Technology in Agribusiness: Transparency and Monitoring
    in Agricultural Trade2017 Use of Blockchain Technology in Agribusiness: Transparency
    and Monitoring in Agricultural Trade (2017) Beijing: China Google Scholar [40]
    E.B. Hamida, K.L. Brousmiche, H. Levard, E. Thea The Thirteenth International
    Conference on Wireless and Mobile Communications. Nice, France, 23-27 July 2017Blockchain
    for Enterprise: Overview, Opportunities and Challenges2017 Blockchain for Enterprise:
    Overview, Opportunities and Challenges (2017) Paris: France Google Scholar [41]
    K. Christidis, M. Devetsikiotis Blockchain and smart contracts for the internet
    of things IEEE Access, 4 (2016), pp. 2292-2303 View in ScopusGoogle Scholar [42]
    M. Iansiti, K.R. Lakhani The truth about blockchain Harv. Bus. Rev., 95 (1) (2017),
    pp. 118-127 Google Scholar [43] S.A. Abeyratne, R.P. Monfared Blockchain ready
    manufacturing supply chain using distributed ledger Int. J. Res. Eng. Technol.,
    5 (9) (2016), pp. 1-10 View in ScopusGoogle Scholar [44] N. Hackius, M. Petersen
    The Hamburg International Conference of Logistics. Hamburg, Germany, 12-13 October
    2017Blockchain in Logistics and Supply Chain: Trick or Treat?2017 Blockchain in
    Logistics and Supply Chain: Trick or Treat? (2017) Berlin: Germany Google Scholar
    [45] K. Rabah Convergence of AI, IoT, big data and blockchain: a review Lake Inst.
    J., 1 (1) (2018), pp. 1-18 Google Scholar [46] F. Tian 14th International Conference
    on Service Systems and Service Management. Dalian, China, 16-18 June 2017A Supply
    Chain Traceability System for Food Safety Based on HACCP, Blockchain & Internet
    of Things2017 A Supply Chain Traceability System for Food Safety Based on HACCP,
    Blockchain & Internet of Things (2017) Beijing: China Google Scholar [47] K. Korpela,
    J. Hallikas, T. Dahlberg Proceedings of the 50th Hawaii International Conference
    on System Sciences. Hawaii, USA, 4-7 January 2017Digital Supply Chain Transformation
    Toward Blockchain Integration2017 Digital Supply Chain Transformation Toward Blockchain
    Integration (2017) Washington: USA Google Scholar [48] X. Li, P. Jiang, T. Chen,
    X. Luo, Q. Wen A survey on the security of blockchain systems Future Gener. Comput.
    Syst. (2017), 10.1016/j.future.2017.08.020 Google Scholar [49] M.T. Hammi, B.
    Hammi, P. Bellot, A. Serhrouchni Bubbles of trust: a decentralized blockchain-based
    authentication system for IoT Comput. Secur., 78 (2018), pp. 126-142 View PDFView
    articleView in ScopusGoogle Scholar [50] A. Reyna, C. Martin, J. Chen, E. Soler,
    M. Diaz On blockchain and its integration with IoT. challenges and opportunities
    Future Gener. Comput. Syst., 88 (2018), pp. 173-190 View PDFView articleView in
    ScopusGoogle Scholar [51] V. Braun, V. Clarke Using thematic analysis in psychology
    Qual. Res. Psychol., 3 (2) (2006), pp. 77-101 CrossRefView in ScopusGoogle Scholar
    [52] I. Holloway, L. Todres The status of method: flexibility, consistency and
    coherence Qual. Res., 3 (2003), pp. 345-357 View in ScopusGoogle Scholar [53]
    S. Nakamoto Bitcoin: a Peer-to-peer Electronic Cash System Available at: https://bitcoin.org/bitcoin.pdf
    [Accessed at: 16 July 2018] (2008) Google Scholar [54] N. Szabo Smart Contracts:
    Building Blocks for Digital Markets Available at: http://www.fon.hum.uva.nl/rob/Courses/InformationInSpeech/CDROM/Literature/LOTwinterschool2006/szabo.best.vwh.net/smart_contracts_2.html
    [Accessed: 14 March 2019] (1996) Google Scholar [55] T.M. Hughes The global financial
    services industry and the blockchain J. Struct. Financ., 23 (4) (2018), pp. 36-40
    CrossRefView in ScopusGoogle Scholar [56] P.K. Sharma, J.H. Park Blockchain based
    hybrid network architecture for the smart city Future Gener. Comput. Syst. Int.
    J. Sci., 86 (2018), pp. 650-655 View PDFView articleView in ScopusGoogle Scholar
    [57] E.C. Cheng, Y. Le, J. Zhou, Y. Lu Healthcare services across China – on implementing
    an extensible universally unique patient identifier system Int. J. Healthc. Manag.,
    11 (3) (2018), pp. 210-216 View in ScopusGoogle Scholar [58] P. Lucena, A.P.D.
    Binotto, F. Silva Momo, H. Kim Proceedings of the Symposium on Foundations and
    Applications of Blockchain. Los Angeles, USA, 9 March 2018A Case Study for Grain
    Quality Assurance Tracking Based on Blockchain Business Network2018 A Case Study
    for Grain Quality Assurance Tracking Based on Blockchain Business Network (2018)
    Washington: USA Google Scholar [59] A. Poberezhna Addressing water sustainability
    with blockchain technology and green finance A. Marke (Ed.), Transforming Climate
    Finance and Green Investment With Blockchains, Academic Press, Cambridge (2018),
    pp. 189-196 View PDFView articleView in ScopusGoogle Scholar [60] B. Murki Blockchain
    technology in supply chain management: a review Int. Res. J. Eng. Sci. Technol.
    Innov., 5 (6) (2018), pp. 2497-2500 Google Scholar [61] N.M. Kumar, P.K. Mallick
    Blockchain technology for security issues and challenges in IoT Procedia Comput.
    Sci., 132 (2018), pp. 1815-1823 View PDFView articleView in ScopusGoogle Scholar
    [62] Z. Bilal, K. Martin A hierarchical anti-counterfeit mechanism: securing the
    supply chain using RFIDs J.-L. Danger, M. Debbabi, J.-Y. Msarion, J. Garcia-Alfaro,
    N. Zincir Heywood (Eds.), Foundations and Practice of Security, Springer, Cham
    (2013) Google Scholar [63] V. Gupta A Brief History of Blockchain. Harvard Business
    Review Available at: https://hbr.org/2017/02/a-brief-history-of-blockchain [Accessed:
    09 August 2018] (2017) Google Scholar [64] K. Croman, C. Decker, I. Eyal, A.E.
    Gencer, A. Juels, A. Kosba, A. Miller, P. Saxena, E. Shi, E.G. Sirer, D. Song,
    R. Wattenhofer 20th International Conference on Financial Cryptography and Data
    Security. Barbados, 22-26 February 2016On Scaling Decentralized Blockchains2016
    On Scaling Decentralized Blockchains (2016) Bridgetown: Barbados Google Scholar
    [65] A. Badzar Blockchain for Securing Sustainable Transport Contracts and Supply
    Chain Transparency – an Explorative Study of Blockchain Technology in Logistics
    Available at: https://lup.lub.lu.se/student-papers/search/publication/8880383
    [Accessed: 8 August 2018] (2016) Google Scholar [66] D. Yermack Corporate governance
    and blockchains Rev. Financ., 21 (1) (2017), pp. 7-31 View in ScopusGoogle Scholar
    [67] K. Biswas, V. Muthukkumarasamy, W.L. Tan Blockchain Based Wine Supply Chain
    Traceability System. 2017 Future Technologies Conference. Vancouver, Canada, 29-30
    November 2017 Vancouver: Canada (2017) Google Scholar [68] F. Yiannas A new era
    of food transparency powered by blockchain Innov. Technol. Gov. Glob., 12 (1-2)
    (2018), pp. 46-56 CrossRefGoogle Scholar [69] N. Kshetri Blockchain’s roles in
    meeting key supply chain management objectives Int. J. Inf. Manage., 39 (2018),
    pp. 80-89 View PDFView articleView in ScopusGoogle Scholar [70] M.V. Kumar, N.Ch.S.N.
    Iyengar A framework for blockchain technology in rice supply chain management
    Adv. Sci. Technol. Lett., 146 (2017), pp. 125-130 CrossRefGoogle Scholar [71]
    R. Neisse, G. Steri, I. Nai-Fovino Proceedings for Data Accountability and Provenance
    Tracking. Reggio Calabria, Italy, 29 August – 01 September 2017A Blockchain-Based
    Approach for Data Accountability and Provenance Tracking2017 A Blockchain-Based
    Approach for Data Accountability and Provenance Tracking (2017) Rome: Italy Google
    Scholar [72] Cisco Cisco Visual Networking Index: Global Mobile Data Traffic Forecast
    Update, 2017-2022 Available at: https://www.cisco.com/c/en/us/solutions/collateral/service-provider/visual-networking-index-vni/white-paper-c11-738429.html
    [Accessed: 20 March 2019] (2019) Google Scholar [73] P. Triantafillou, N. Ntarmos,
    S. Nikoletseas, P. Spirakis Proceedings of the Third International Conference
    on Peer-to-Peer Computing. Linkoping, Sweden, 1-3 Sep 2003NanoPeer Networks and
    P2P Worlds2003 NanoPeer Networks and P2P Worlds (2003) Stockholm: Sweden Google
    Scholar [74] Statista Blockchain Adoption Phases in Organizations Worldwide As
    of April, 2018 by Industry Available at: https://www.statista.com/statistics/878748/worldwide-production-phase-blockchain-technology-industry/
    [Accessed: 27 March 2019] (2018) Google Scholar [75] Z. Wang, Q. Wang, X. Zhao,
    G. Zhu Interactive effects of external knowledge sources and internal resources
    on the innovation capability of Chinese manufacturers Ind. Manag. Data Syst.,
    116 (8) (2016), pp. 1617-1635 View in ScopusGoogle Scholar [76] G. Zhao, G. Zhang,
    M. Liu, S. Yu, Y. Liu, X. Zhang AIP Conference Proceedings 1955Research on Manufacturing
    Service Behaviour Modelling Based on Block Chain Theory2018 Research on Manufacturing
    Service Behaviour Modelling Based on Block Chain Theory (2018), pp. 30-35 Google
    Scholar [77] Civic Ledger Commercial Trail: Agricultural Water Trading Rights
    [Online] Available at: https://www.civicledger.com/civic/ [Accessed: 8 August
    2018] (2017) Google Scholar [78] Z. Zheng, S. Xie, H. Dai, X. Chen, H. Wang 2017
    IEEE International Congress on Big Data. Honolulu, USA, 25-30 June 2017An Overview
    of Blockchain Technology: Architecture, Consensus, and Future Trends.2017 An Overview
    of Blockchain Technology: Architecture, Consensus, and Future Trends. (2017) Washington,
    USA Google Scholar [79] A. Kosba, A. Miller, E. Shi, Z. Wen, C. Papamanthou 2016
    IEEE Symposium on Security and Privacy. San Jose, USA, 22-26 May 2016The Blockchain
    Model of Cryptography and Privacy-Preserving Smart Contracts2016 The Blockchain
    Model of Cryptography and Privacy-Preserving Smart Contracts (2016) Washington:
    USA Google Scholar [80] Q. Lu, X. Xu Adaptable blockchain-based systems: a case
    study for product traceability IEEE Softw., 34 (6) (2017), pp. 21-27 View in ScopusGoogle
    Scholar [81] Q. Feng, D. He, S. Zeadally, M.K. Khan, N. Kumar A survey on privacy
    protection in blockchain system J. Netw. Comput. Appl., 126 (2019), pp. 45-58
    View PDFView articleView in ScopusGoogle Scholar [82] Monero Available at (2017)
    [Accessed: 15 March 2019] https://www.getmonero.org/ Google Scholar [83] I.-C.
    Lin, T.-Z. Liao A survey of blockchain security issues and challenges Int. J.
    Netw. Secur., 19 (5) (2017), pp. 653-659 View in ScopusGoogle Scholar [84] T.
    Aste, P. Tasca, T.D. Matteo Blockchain technologies: the foreseeable impact on
    society and industry Computer, 50 (9) (2017), pp. 18-28 View in ScopusGoogle Scholar
    [85] X. Xu, I. Weber, M. Staples, L. Zhu, J. Bosch, L. Bass, C. Pautasso, P. Rimba
    IEEE International Conference on Software Architecture. Gothenburg, Sweden, 3-7
    April, 2017A Taxonomy of Blockchain-Based Systems for Architecture Design2017
    A Taxonomy of Blockchain-Based Systems for Architecture Design (2017) Stockholm:
    Sweden Google Scholar [86] A. Jindal, G.S. Aujla, N. Kumar SURVIVOR: a blockchain
    based edge-as-a-service framework for secure energy trading in SDN-enabled vehicle-to-grid
    environment Comput. Netw., 153 (2019), pp. 36-48 View PDFView articleView in ScopusGoogle
    Scholar [87] P.K. Sharma, N. Kumar, J.H. Park Blockchain-based distributed framework
    for automotive industry in a smart city IEEE Trans. Industr. Inform. (2018), 10.1109/TII.2018.2887101
    Google Scholar [88] A. Banafa IoT and Blockchain Convergence: Benefits and Challenges
    Available at: https://iot.ieee.org/newsletter/january-2017/iot-and-blockchain-convergence-benefits-and-challenges.html
    [Accessed: 15 August 2018] (2017) Google Scholar [89] I. Eyal, A.E. Gencer, E.G.
    Sirer, R. Van Renesse Proceedings of the 13th USENIX Symposium on Networked Systems
    Design and Implementation. Santa Clara, USA, 16-18 March 2016Bitcoin-NG: A Scalable
    Blockchain Protocol2016 Bitcoin-NG: A Scalable Blockchain Protocol (2016) Washington:
    USA Google Scholar [90] Global Opportunity Report. Available at: https://www.unglobalcompact.org/docs/publications/Global_Opportunity_Report_2017_SM.pdf,
    2017. [Accessed at: 16 July 2018]. Google Scholar Cited by (422) Antecedents of
    blockchain adoption in the poultry supply chain: An extended UTAUT model 2024,
    Technological Forecasting and Social Change Show abstract Intelligent decision-making
    framework for agriculture supply chain in emerging economies: Research opportunities
    and challenges 2024, Computers and Electronics in Agriculture Show abstract Willingness
    to implement innovative solutions for creating information-based added value in
    food value chains 2024, Journal of Cleaner Production Show abstract Can price
    still be an honest signal of products’ quality? – A perspective of blockchain
    adoption 2024, Computers and Industrial Engineering Show abstract Assessing the
    influence of artificial intelligence on agri-food supply chain performance: the
    mediating effect of distribution network efficiency 2024, Technological Forecasting
    and Social Change Show abstract Exploring the role of blockchain technology in
    modern high-value food supply chains: global trends and future research directions
    2024, Agricultural and Food Economics View all citing articles on Scopus View
    Abstract © 2019 Elsevier B.V. All rights reserved. Part of special issue SPECIAL
    ISSUE on Agri-Food 4.0 and Digitalization in Agriculture Supply Chains - New directions,
    challenges and applications Edited by Hervé Panetto, Mario Lezoche, Jorge Hernandez,
    Maria del Mar Eva Alemany Diaz, Janusz Kacprzyk View special issue Recommended
    articles Blockchain and more - Algorithm driven food traceability Food Control,
    Volume 105, 2019, pp. 45-51 M. Creydt, M. Fischer View PDF Food quality traceability
    prototype for restaurants using blockchain and food quality data index Journal
    of Cleaner Production, Volume 240, 2019, Article 118021 Reno Varghese George,
    …, Alex K. Babu View PDF Are Distributed Ledger Technologies the panacea for food
    traceability? Global Food Security, Volume 20, 2019, pp. 145-149 Simon Pearson,
    …, Andrea Zisman View PDF Show 3 more articles Article Metrics Citations Citation
    Indexes: 390 Policy Citations: 5 Captures Readers: 1174 Social Media Shares, Likes
    & Comments: 28 View details About ScienceDirect Remote access Shopping cart Advertise
    Contact and support Terms and conditions Privacy policy Cookies are used by this
    site. Cookie settings | Your Privacy Choices All content on this site: Copyright
    © 2024 Elsevier B.V., its licensors, and contributors. All rights are reserved,
    including those for text and data mining, AI training, and similar technologies.
    For all open access content, the Creative Commons licensing terms apply.'
  inline_citation: null
  journal: Computers in Industry
  limitations: This study only focuses on the general applications and challenges
    of blockchain technology in agri-food value chain management. It does not provide
    specific details on the technical implementation, security and privacy aspects
    of blockchain technology in this context. Future studies can investigate these
    aspects in more detail.
  pdf_link: null
  publication_year: 2019
  relevance_score: 0.9
  relevance_score1: 0
  relevance_score2: 0
  title: 'Blockchain technology in agri-food value chain management: A synthesis of
    applications, challenges and future research directions'
  verbatim_quote1: 'The findings suggest that blockchain technology together with
    advanced information and communication technology and internet of things have
    been adopted for the improvement of agri-food value chain management in four main
    aspects: traceability, information security, manufacturing and sustainable water
    management.'
  verbatim_quote2: Six challenges have been identified including storage capacity
    and scalability, privacy leakage, high cost and regulation problem, throughput
    and latency issue, and lack of skills.
  verbatim_quote3: '>'
- DOI: https://doi.org/10.1007/s11277-016-3845-0
  analysis: 'The paper "Software-Defined Fog Network Architecture for IoT" proposes
    an IoT architecture that combines the benefits of software-defined networking
    (SDN) and fog computing to address the challenges of real-time data delivery and
    mobility in the internet of things (IoT) environment.


    The paper discusses the need for a new IoT architecture that can scale to the
    growing number of IoT devices and support low latency applications.


    It combines the centralized control plane of SDN with the distributed nature of
    fog computing. SDN is a network architecture that separates the control plane
    from the data plane, providing more flexibility and programmability in network
    management. Fog computing brings data processing, storage, and analytics closer
    to the network edge, reducing latency and improving the overall efficiency of
    the IoT system.


    The proposed architecture is designed to meet the specific requirements of IoT
    applications, such as real-time data processing, mobility support, and resource
    constrained devices.


    The paper discusses use cases of the proposed architecture in various domains
    such as smart transportation, video surveillance, and precision agriculture, highlighting
    the potential benefits and applicability of the proposed solution.'
  authors:
  - Slavica Tomović
  - Kenji Yoshigoe
  - Ivo Maljević
  - Igor Radusinović
  citation_count: 142
  full_citation: Tomovic, S., Yoshigoe, K., Maljevic, I., & Radusinovic, I. (2016).
    Software-Defined Fog Network Architecture for IoT. Wireless Personal Communications,
    92(1), 181–196. https://doi.org/10.1007/s11277-016-3845-0.
  full_text: '>

    Your privacy, your choice We use essential cookies to make sure the site can function.
    We also use optional cookies for advertising, personalisation of content, usage
    analysis, and social media. By accepting optional cookies, you consent to the
    processing of your personal data - including transfers to third parties. Some
    third parties are outside of the European Economic Area, with varying standards
    of data protection. See our privacy policy for more information on the use of
    your personal data. Manage preferences for further information and to change your
    choices. Accept all cookies Skip to main content Log in Find a journal Publish
    with us Track your research Search Cart Home Wireless Personal Communications
    Article Software-Defined Fog Network Architecture for IoT Published: 24 October
    2016 Volume 92, pages 181–196, (2017) Cite this article Download PDF Access provided
    by University of Nebraska-Lincoln Wireless Personal Communications Aims and scope
    Submit manuscript Slavica Tomovic, Kenji Yoshigoe, Ivo Maljevic & Igor Radusinovic  3874
    Accesses 139 Citations Explore all metrics Abstract Rapid increase in number and
    diversity of Internet-connected devices raises many challenges for the traditional
    network architecture, which is not designed to support a high level of scalability,
    real-time data delivery and mobility. To address these issues, in this paper we
    present a new model of Internet of Things architecture which combines benefits
    of two emerging technologies: software-defined networking and Fog computing. Software-defined
    networking implies a logically centralized network control plane, which allows
    implementation of sophisticated mechanisms for traffic control and resource management.
    On the other hand, Fog computing enables some data to be analysed and managed
    at the network edge, thus providing support for applications that require very
    low and predictable latency. In the paper, we give detailed insight into the system
    structure and functionality of its main components. We also discuss the benefits
    of the proposed architecture and its potential services. Similar content being
    viewed by others Fog Networking: An Enabler for Next Generation Internet of Things
    Chapter © 2016 Survey on Fog Computing and Its Function in IoT Chapter © 2022
    Fog Computing Paradigm for Internet of Things: Architectures, Issues, Challenges,
    and Applications Chapter © 2022 1 Introduction Advances in wireless communications
    and micro-electro-mechanical systems (MEMS) have enabled the rapid evolution of
    smart devices connected to the Internet. This evolution inspired the idea about
    the Internet of Things (IoT)—a large-scale cognitive system in which wide variety
    of “things” could contribute. The definition of “thing” is very flexible, and
    may refer to: intelligent machines, drones, self-driving cars, sensor nodes measuring
    parameters such as temperature and humidity, actuators that turn on and off devices
    or make adjustments in real time, and much more. Thus, the exponential increase
    in the volume and variety of data is expected, creating a significant burden for
    the Internet architecture [1]. Adding more resources to provide enough capacity
    cannot be economically justified in the long-run. The major scale issue is not
    the volume of traffic, but the type and cadence of data delivery. IoT devices
    are often configured to send regular updates throughout the day, which may cause
    a tsunami of connections and data at periodic intervals. Regular surges of traffic
    may surpass baseline or average traffic by a significant multiple of existing
    traffic patterns, so high level of resource over-provisioning could be required
    for stable operation. To avoid this, service providers need mechanisms that can
    satisfy the bandwidth demand of IoT applications by efficiently utilizing the
    existing infrastructure. That is hard to achieve with distributed control plane
    in traditional network architectures, since a global view of the network state
    is lacking. Another challenge is low-latency handling of time-critical tasks such
    as analysis and decision-making. For example, network latency could badly affect
    traffic management application which requires real-time detection of the congested
    sites. On the other hand, emerging augmented reality applications (e.g. Google
    Glass, Sony SmartEyeGlass and Microsoft HoloLens) have to process real-time video,
    voice and sensor measurements in order to finally output informational content
    on displays [2]. Without almost deterministic response time utility, adoption
    of this technology is questionable. In general, because of a loosely controlled
    nature of the Internet many QoS (Quality of Service) issues are still unresolved.
    In this paper, we propose the use of SDN (Software Defined Networking [3]) to
    alleviate resource contentions in IoT environment and improve overall IoT performance.
    SDN is a relatively new paradigm for communication networks, that implies separation
    of the forwarding and the control functions. Network intelligence is moved to
    logically centralized SDN controller, which maintains a global view of the network,
    interacts with data-plane devices and provides a programming interface for network
    management applications. The potential of this concept reflects in the fact that
    traffic engineering and resource management can be performed more efficiently
    in centralized system having insight into applications’ requirements and all resources
    available. To address the applications that require mobility support and low-delay,
    the proposed IoT architecture integrates SDN with Fog computing [4]. Although
    the benefits of the both technologies have been widely recognized within the research
    community, there are still many challenges that hinder widespread acceptance of
    them. Therefore, this paper targets to explain how SDN and Fog computing could
    be efficiently combined together to compensate each other deficiencies. In particular,
    the proposed IoT architecture aims to solve the problem of Fog orchestration with
    SDN, as well as scalability issues of SDN with Fog computing. The rest of the
    paper is organized as follows. Section 2 provides brief background on traditional
    IoT architecture and related challenges. Section 3 introduces the basic ideas
    of SDN and Fog computing and then describes the components and operation model
    of the proposed architecture. A few use cases that would especially benefit from
    the proposed architecture are discussed in Sect. 4. Section 5 concludes the paper.
    2 IoT: Current State and Challenges The IoT paradigm is based on various kinds
    of smart devices with communication and networking capabilities, embedded in the
    environment around us. According to CISCO forecasts the number of Internet-connected
    devices overtook the human population in 2010, and will be about 50 billion by
    2020 [5]. Although these devices mostly have low bandwidth demands, the overall
    result is enormous amount of data which have to be stored, processed and presented
    in a seamless, efficient, and easily interpretable form [6]. Figure 1 illustrates
    the common organization of today’s IoT architecture from a high level perspective.
    Four main components involved are: sensing devices (things), the local communication
    network, the Internet Cloud and back-end IoT applications. Sensing devices gather
    data from the physical environment. These data are later used by IoT applications
    (e.g. smart transportation, healthcare, precision agriculture, video surveillance,
    etc.) to provide a desirable service to end customers. Since IoT devices are in
    general characterized by very limited memory and computational resources, IoT
    application usually takes advantage of services offered by the Cloud for data
    storage and processing. To reach the Cloud, sensing devices rely on different
    communication technologies. Those more powerful connect directly to cellular network
    (3G or 4G), or use Wi-Fi/Ethernet connectivity to the Internet gateway. However,
    these communication models require a fair amount of power that myriad devices
    cannot afford (e.g. battery operated devices). For the short range communication
    between energy-deficient devices, some other options are more convenient, such
    as Bluetooth, ZigBee or NFC (Near-Field Communication). Once the raw data generated
    by one or more sensing sources are appropriately processed in the Cloud, the useful
    information are finally delivered to the end user. That may be commercial or an
    industrial user, or another device in M2M (Machine-to-Machine) workflow. Fig.
    1 Traditional IoT architecture Full size image Cloud offers scalable and cost
    effective solution to deal with data produced by IoT. Its virtually unlimited
    resources compensate technological limitation of IoT devices (e.g. storage, processing
    and energy) and enable analysis of unprecedented complexity [7]. Also, “pay-as-you-go”
    Cloud computing model is a more convenient alternative to owning and managing
    private data centres (DCs) if consider deployment and operational expenditures.
    However, existing Cloud services are originally designed for classic Web applications,
    which are not significantly affected by the distance between the edge devices
    and DCs. On the other side, many emerging IoT applications require real-time interaction
    and mobility support (e.g. smart traffic lights and target tracking systems),
    which makes network latency an important limiting factor. Latency introduced in
    the network is not only a consequence of long distance between IoT devices and
    the Cloud. It is also caused by queuing delay, which is non-negligible on the
    congested links. The impact of queuing delay could be reduced if traffic load
    is evenly distributed over the network. Unfortunately, dynamic routing is considered
    rather risky than beneficial in existing Internet architecture characterized by
    the distributed control plane [8]. Moreover, the simple shortest path routing
    model is still dominantly deployed. Dedicated mechanisms for connectivity control
    are also lacking. This must be resolved in order to fully exploit the opportunities
    offered by heterogeneous access networks in IoT environments. 3 SDN-Based Model
    of IoT System In order to address previously discussed challenges, in this Section
    we propose a new model of IoT architecture based on two emerging technologies:
    SDN and Fog computing. We will briefly present basic ideas of these networking
    paradigms, and then explain how they are combined together and envisioned to operate
    in the proposed system model. 3.1 Software Defined Networking In traditional telecommunications
    networks the control and the data plane are implemented in each networking device.
    The control plane carries signalling traffic, performs route calculation, system
    configuration and management. It contains all the logic that controls the behaviour
    of the network. On the other hand, the data plane is focused only on the transport
    of packets towards their next destination. The network itself basically could
    be seen as a distributed entity that connects diverse independent and autonomous
    devices. Network management is done at very low level, and once forwarding policy
    is defined, the only way to make an adjustment to the policy is via manual configuration
    of the devices. This limits ability to introduce new services in the network or
    to adapt the network behaviour to varying application requirements and load condition
    [9, 10]. Novelty introduced with SDN is clear separation of the control and the
    data plane. SDN control plane is placed on a logically centralized controller,
    which maintains a global view of the network, interacts with simple forwarding
    devices and provides a programming interface for network management applications
    (Fig. 2). In this way, SDN allows network managers to configure and optimize network
    resources dynamically via automated programs [3]. The communication between SDN
    controller and the data plane devices is commonly achieved via OpenFlow protocol
    [11]. The controller pro-actively or reactively instructs the data plane devices
    (OpenFlow switches) how to identify and treat different traffic flows in the network.
    When OpenFlow switch receives the instructions for specific traffic flow, it is
    able to handle packets belonging to the flow without further interaction with
    the controller until validation time for the instructions expires. Note that SDN/OpenFlow
    architecture described above is originally designed for DC and WAN (Wide Area
    Network) networks. However, the need for similar technology in 5G mobile networks
    has been widely recognized by the research communities [9, 12, 13]. Fig. 2 SDN
    architecture Full size image 3.2 Fog Computing Fog computing is an emerging technology
    that brings data processing, storage and analytics closer to the network edge.
    It has many mechanisms and attributes in common with Cloud computing, however,
    Fog can be distinguished from Cloud by its proximity to end-users, the dense geographical
    distribution and its support for mobility [4]. Figure 3 illustrates the position
    of Fog computing in IoT systems. It is obvious that Fog cannot substitute the
    Cloud, but complements its services by introducing a new intermediate layer composed
    of geo-distributed Fog nodes. Each Fog node is highly virtualized platform hosted
    on dedicated computing node equipped with communication interface, or resource-poorer
    device such as set-top box, access point, router, switch, etc. Data collected
    by IoT sensing devices are not send directly to the Cloud server for processing.
    Instead, they are sent to nearby Fog node in order to obtain fast and high-rate
    service. However, Fog node can filter out non-actionable data (e.g. regular sensor
    measurements) and send them to the Cloud for long-term storage and batch analytics.
    The Cloud is a natural place to run global analytics on data collected from widely
    distributed devices over long periods (months, years) [1, 14]. Fig. 3 The role
    of Fog layer in IoT architecture Full size image Fog computing does not only enhance
    QoS (Quality of Service) for a large number of IoT applications, but also may
    significantly reduce bandwidth consumption in the backbone network. Consequently,
    the users could be benefited from the reduced service costs [15]. This vision
    has been recently made possible by Cisco IOx platform, which combines open-source
    Linux and Cisco IOS network operating system together in a single networked device
    (router, switch or IP camera). Linux transforms the underlying device to mini-computer
    that can host third party applications on virtual containers and analyse data
    locally in real time [16]. 3.3 The Proposed System Design This section describes
    a model of IoT architecture which takes advantage of SDN and Fog computing paradigms.
    The proposed solution is inspired by recent works on these topics [1, 17–20].
    However, while each of them is either focused only on one of the technologies
    or considers their application in VANET (Vehicular Ad-hoc NETwork) networks, we
    analyse the generic IoT scenario where features of both technologies are combined
    together in one integrated system. Figure 4 shows the system structure which involves:
    end devices with multiple wireless communication solutions, SDN controllers, heterogeneous
    Fog infrastructure (virtualized servers, routers, access points, etc.) and Cloud
    in the network core. Since IoT applications may be geospatially distributed, we
    assumed hierarchical deployment of Fog network. As illustrated in Fig. 5a, Fog
    nodes expose a set of APIs (Application Programming Interfaces) for application
    deployment and development, resource management and control. These APIs allow
    seamless access to hypervisors, various operating systems and service containers
    on a physical machine [1]. Also, they enable remote monitoring and management
    of physical resources such as CPU, memory and network interfaces. Development
    of IoT applications using hierarchically deployed and heterogeneous Fog resources
    could be simplified by adopting Mobile Fog programming model [20]. Mobile Fog
    runs the same application code on various devices of the heterogeneous Fog infrastructure.
    The application consists of multiple processes that perform different tasks with
    respect to the device capabilities and position in the network hierarchy. For
    example, tasks of large-scale video surveillance application may be organized
    in three levels: motion detection at IP camera, face recognition at edge Fog nodes
    and aggregation of identities at Cloud server [20]. It is assumed that each of
    the devices has information about its geophysical location. Thus, although all
    of them run the same code, each one is aware of its particular tasks. Fig. 4 SDN
    architecture for IoT based on Fog computing Full size image A major challenge
    imposed by Fog concept refers to service orchestration. The orchestration involves
    automated instantiation, replication and migration of service instances on a large
    volume of Fog nodes with a wide range of capabilities. As discussed earlier, many
    IoT applications deal with dynamic workload due to periodic or event-driven data
    delivery models. In an ideal case, applications should be transparently scaled
    at the runtime without resource over-provisioning. In order to achieve that, we
    propose logical centralization of orchestration functionality at SDN controller.
    The design of SDN controller is modified compared to traditional one used in DC
    networks. As illustrated in Figure 5b, its role in IoT system is threefold: 1.
    Fog orchestration. 2. Injection of routing logic into SDN-enabled network elements.
    3. Optimal selection of access points for IoT devices (i.e. radio access network
    management). Fig. 5 Structure of the Fog node (a), SDN controller (b) and wireless
    end device [19] (c) in the proposed architecture Full size image To perform above
    tasks efficiently the controller needs an up-to-date view of the system. For this
    reason, it collects and maintains information about: Features of Fog nodes in
    the controlled domain, such as: available RAM, secondary storage, running Operating
    Systems and software applications [1]. Capabilities, state and interconnectivity
    of the network elements, including: wireless technology of the access points (e.g.
    3G/4G, LTE, Wi-Fi etc.), links capacity and residual bandwidth, the flow table
    content and neighbour list of each network node. Characteristics of the connected
    smart devices, such as: supported radio access technologies and types of services
    the devices are requesting. In order to obtain up-to-date information about topology
    of the ad-hoc connected devices, link layer mechanism in each device could be
    used to periodically broadcast beacon messages for learning neighbour’s information.
    Beside neighbour lists, for the purpose of high-mobile vehicular applications,
    the controller may also store road map of the environment and information regarding
    the position and speed of the vehicles involved [19]. The Fog orchestration is
    performed according to business polices defined by application service providers.
    For example, the policies may specify: requirements in terms of computing and
    memory resources, requirements in term of bandwidth and delay for different classes
    of subscribers, thresholds for load balancing, privacy rules etc. [1]. These policies
    are stored in SDN controllers and the Fog nodes hosting the provider’s application.
    The end-device connects to application process running on the Fog computing instance
    that covers the location of the end-device. If the end-device is mobile and enters
    the new region, it will connect to the new Fog node that runs the same application
    process on the same level of network hierarchy as the previous one. SDN controller
    provides dynamic, policy-based management of Fog services. It can track the moving
    devices and predict their potential destinations in the near future. This enables
    seamless handover to a new Fog node at the network edge. Also, there is a possibility
    that the Fog computing instance located in the new region cannot meet QoS requirements
    of the end-user. In that case, new computing instance needs to be instantiated
    on a platform with the matching capabilities. Procedure of creating a new computing
    instance is far from trivial, because it requires: resource reservation, copying
    of application data, setting-up the instance configuration and dissemination of
    the new flow rules in the network. Therefore, the role of SDN controller is crucial
    to timely detect and react to threat of policy violation based on the up-to-date
    view of the system state. High workload can also trigger dynamic scaling of the
    application if that is specified in the business policy. For example, when a load
    balancing threshold in terms of maximum number of users, connections or CPU load
    is reached, new on-demand Fog instances could be created. To distribute the workload
    over them, SDN controller splits the coverage region of the overloaded application
    process in multiple smaller sub-regions. The number of sub-regions corresponds
    to the number of newly created Fog instances of the same process. Similarly, when
    these nearby processes at the same network hierarchy level become under loaded,
    their coverage regions are merged together into a single coverage area, and all
    the processes except one for the merged coverage are terminated [20]. Beside Fog
    orchestration, SDN controller performs traffic control as OpenFlow controller
    and connectivity management for IoT devices. Since IoT application in large-scale
    network environments (e.g. smart city applications) generate enormous amounts
    of data flows, the SDN control plane needs to be partitioned among multiple physical
    controllers to avoid scalability and reliability implications. As can be seen
    from Fig. 5, single SDN controller covers region with multiple Fog nodes because
    it is placed on a higher level of network hierarchy. The network partitions are
    interconnected by OpenFlow switches to enable exchange of data between controllers.
    This is necessary for scheduling traffic flows between IoT devices located in
    different partitions. For robustness reasons, we assumed that some control tasks
    may be delegated to local SDN agents running on Fog nodes and SDN-enabled IoT
    devices, as proposed in [18]. For example, Fog nodes at the network edge may control
    IoT device to IoT device multi-hop wireless communication in their coverage region
    based on their local knowledge and policy rules obtained from the controller.
    On the other side, the controller calculates the other routes in the system, such
    as inter-region routes and routes towards the other autonomous systems for data
    intended for the Cloud. Note that support for time-critical IoT tasks requires
    flow rules installed in advance, which reduces controller’s efficiency in resource
    allocation. However, granular traffic control offered by OpenFlow can be exploited
    to separate emergency traffic and delay-insensitive traffic. Therefore, the first
    class could be scheduled always with the highest priority over the proactively
    installed routes, while the route calculation and resource reservation for the
    other traffic class could be done in a reactive manner. The edge Fog nodes are
    envisioned to regularly inform the SDN controller about the capabilities and position
    of IoT devices that are being served. In this way, controller can build an entire
    connectivity graph and periodically run optimization algorithms to provide better
    utilization of network resources and enhance QoS. For example, if SDN controller
    discovers that the network load had become unbalanced because proactive routing
    results in traffic focusing on some selected nodes, it can start a rerouting process
    to improve network utility and reduce congestion. In addition to routing optimization,
    the controller is supposed to perform connectivity management on the time-window
    basis. Algorithm for optimal access point selection in multi-network IoT environment
    has been proposed in [22]. Such an algorithm can be implemented on SDN controller
    to perform access point assignment for set of newly joined devices based on: the
    current multi-network capacity in the controlled partition, the supported radio
    access technologies and the types of services the devices are requesting. The
    assignment process is triggered at the end of each time-window, and aims to find
    a set of access points that can satisfy bandwidth requirements of the IoT devices
    and guarantee optimal system performance. If the algorithm outputs the assignment
    configuration different than the existing one, SDN controller starts the suggested
    handover procedures between the heterogeneous access networks. An architecture
    of SDN-enabled sensor node is shown in Fig. 5c. Main component introduced in the
    architecture is a software OpenFlow switch. Application traffic always goes through
    this component before being sent, which allows the control plane elements (i.e.
    Fog nodes at the edge and SDN controllers) to identify the access of traffic flows
    into the network [19]. The number of wireless interfaces on the sensor node depends
    on services for which node is intended. Note that we considered only IP addressed
    sensor nodes as the elements of SDN data-plane. However, there are other solutions
    for implementing SDN in WSN networks as well [23, 24]. Beside SDN module, each
    sensor node runs a daemon process which implements some of the traditional ad-hoc
    routing protocols (e.g. AODV—Ad hoc On-Demand Distance Vector [25]). Both, the
    SDN control entity and the AODV daemon, have access to the node’s flow table.
    AODV process is activated when no route to the SDN control entity is known. That
    is the case when sensor node joins the network or when control communication is
    lost due to bad conditions on the wireless channel. 4 Use-Cases Rapid evolution
    of the IoT brings a number of use cases of interest that could benefit from the
    concepts of SDN and Fog computing. In this Section we chose some of them to illustrate
    the potential of the proposed system architecture. 4.1 Smart Transportation Smart
    transportation represents one of the markets of the primary importance for IoT.
    The rationale for the adoption of IoT in this field are several, from social to
    economic. Some common services refer to traffic management, safety and infotainment.
    Traffic management services analyse traffic behaviour and events in order to optimize
    overall road capacity, reduce travel time and minimize the ecological footprint
    by smartly routing vehicles and coordinating traffic lights. Safety services aim
    to reduce accidents for pedestrians and vehicle occupants. The infotainment services
    are focused on providing classic IP informative and entertaining applications
    like Web browsing, video streaming, e-mail and social networks [20]. Different
    classes of transportation services often use the same data sources (e.g. sensors
    on the roads, traffic cameras, passing vehicles and so on) and networking infrastructure.
    However, importance of each service is not the same for the end user. Therefore,
    when the network is congested traffic flows should not be treated in the same
    manner. Without mechanisms for service differentiation and ability to provide
    real-time delivery today’s IoT architecture limits efficiency of the existing
    services and hinders implementation of new ones. On the other side, with SDN and
    Fog computing both of the mentioned requirements could be met. We will elaborate
    this on the example of STL (Smart Traffic Light) system. STL systems use a large
    number of distributed sensors to measure distance, speed and direction of vehicles
    and detect the presence of pedestrian and cyclist crossing the street. Collected
    sensor measurements are mainly used for three purposes: (a) accident prevention;
    (b) detection and offloading of congested sites; (c) long-term analysis of the
    system efficiency. These three tasks are significantly different in terms of delay-sensitivity.
    The last one can tolerate delays in data delivery, while the first two require
    immediate or near real-time reaction. If all the measurement data are sent to
    the Cloud for processing, support for real-time services is very questionable.
    When STL application detects risk of vehicle collision with pedestrians and cyclist,
    to be effective, the control system has to send notification to the approaching
    vehicles within milliseconds [1]. The need for fast decision making at the network
    edge (i.e. Fog computing) is strongly emphasized in this scenario, and has been
    discussed in detail in [1]. Beside Fog computing, the presented system model can
    also exploit benefits of SDN to dynamically assign higher priority to some traffic
    flows in emergency situations, and hence guarantee low-latency. Fig. 6 Use-case
    of smart transportation Full size image Support for real-time decision-making
    provided by Fog computing could bring autonomous cars soon in reality. Tesla Motors
    and Google are investing a lot of efforts in developing a software that will allow
    “hands free” operation of the car [26]. These cars will not require human involvement
    in control of the primary driving features such as brakes, acceleration and steering.
    With Fog infrastructure at the network edge, the cars and sensing devices deployed
    along the road will be able to interact in real-time [17]. When it comes to delivery
    of infotainment services in VANET networks, it could be greatly enhanced with
    SDN technology. The most popular infotainment applications include various forms
    of audio/video streaming. Delivery of this kind of data is very challenging not
    only due to strict delay requirements, but also due to high level of mobility
    and topology fluctuations [19]. Based on road map and detailed information about
    the vehicle position, speed and moving direction, SDN controller can make timely
    decisions about deployment of new service instances at the Fog nodes. In this
    way, impact of mobility on application performance could be minimized. On the
    other hand, the proposed system architecture can help in reducing duplication
    of the streaming traffic. For example if blue and red car in Fig. 6 are requesting
    the same data stream, SDN controller has enough knowledge to make optimal routing
    decision, i.e. to use only one traffic flow from the streaming server to the red
    car, and then to serve blue car from the red car. 4.2 Video Surveillance Video
    surveillance is an important component of smart cities. Largely-distributed cameras
    in a city or along the road bring security services on a higher level, providing
    strong sense of assurance to the public. There are two advantages of using the
    proposed IoT architecture for video surveillance. The first is that SDN controller
    can make resource allocation and routing decisions based on QoS requirements.
    Thus, it will always seek for routes that can meet bandwidth requirements of video
    flows. The second advantage is that local, resource rich Fog nodes, can provide
    real-time processing of video frames and send notification to end-user when some
    event is detected. This significantly reduces bandwidth consumption in the network,
    while increases application efficiency (e.g. detection of criminal activity).
    In [21], authors proposed the hierarchical design of Fog application for vehicle
    tracking. Their application is organized in three processes which take place at
    different levels of the network hierarchy. IP camera runs the first process. If
    the camera is capable to perform motion detection, it will not send the video
    to the parent Fog node unless motion is detected. The parent Fog node is placed
    at higher level of network hierarchy, and hence have much wider scope. It runs
    process that identifies vehicles in the video scenes and detects their position
    and licence plates. If a police had issued a search for the detected vehicle,
    information about vehicle location is recorded into database and notification
    is sent to application process at the highest level of hierarchy. However, if
    the video image is not clear enough to enable detection of the licence plate number,
    the Fog node may send pan-tilt-zoom (PTZ) command to camera. Interaction with
    PTZ module requires very low latency, which cannot be provided if video processing
    is done at remote Cloud server. 4.3 Precision Agriculture Precision agriculture
    takes advantage of advanced information and communication technologies to address
    today’s agricultural issues such as the need to balance productivity with environmental
    concerns. The applications of this scenario are facilitated by ad-hoc wireless
    sensors and actuator networks (WSANs), deployed to measure/monitor specific parameters
    of the environment and enforce control decisions. The data obtained from sensor
    nodes are used by the Cloud application to make intelligent control decisions
    that should yield better and more crops through optimal application of water,
    pesticides and fertilizers. With Fog node deployed at the network edge, the local
    application instance can process the collected data, control the measurement process
    itself, the stability and the oscillatory behaviors and issue commands to actuators
    (e.g. to irrigation valves) in real-time. The Fog application can also decide
    to reject packets carrying redundant information, and send the aggregated data
    to the Cloud for long-term analysis. Local SDN controller could be run as one
    of the application on the Fog node. This application would be responsible for
    automatic configuring of WSN and optimal management of energy constrained sensor
    nodes with limited communications abilities [27]. Need for processing at the network
    edge has been more pronounced with the recent emergence of UAVs (Unmanned aerial
    vehicles) at farm market. So far, UAVs has been mostly used in agriculture to
    collect sensor data, scan plants for health problems, and locate disease out brakes.
    These information are than used by farmers to provide only the needed pesticide
    or nutrient to each plant. However, modern trends go towards multi-UAV deployment.
    Beside UAVs that perform monitoring of the crops, special types of UAVs are designed
    that can apply pesticides with very high accuracy according to spraying logistic
    [28]. Multiple simultaneously operating UAVs impose the need for centralized coordination
    of the individual tasks. In the proposed IoT architecture Fog node could play
    role of Internet gateway and UAV coordinator in the same time. It could process
    various types of multimedia and scalar data collected by UAVs, recommend optimal
    crop treatment and send control commands to aerial (UAVs robots) and ground actuators.
    5 Conclusion In this paper, we have proposed the architecture for IoT, which relies
    on two emerging technologies: SDN and Fog computing. The proposed architecture
    is designed in the way to support a high level of scalability, real-time data
    delivery and mobility. Fog computing platform is considered as the appropriate
    platform for IoT due to its capability to resolve problems related to latency
    for services that require fast analysis and decision-making. On the other hand,
    SDN introduces logically centralized control plane, which allows the implementation
    of sophisticated mechanisms for traffic control and resource management. Such
    a network design could be of vital importance to address increasing capacity demands
    in IoT environments where an enormous number of Internet-connected devices is
    expected. While the mentioned benefits have been widely recognized by the research
    community, this paper discusses the main challenges that hinder widespread adoption
    of each of the two technologies individually. The proposed IoT architecture addresses
    these challenges by combining SDN and Fog computing together in one system and
    adapting them to each other. In particular, the functionality of Fog orchestration
    is delegated to SDN controller in order to achieve higher efficiency, while SDN
    scalability issue is relaxed by delegating some controller’s tasks to Fog nodes.
    Benefits of using our proposed architecture have been illustrated by several use-cases
    that range from theoretical visions to existing services. Plan for future work
    is to design centralized control logic for orchestration of Fog services and to
    evaluate performance of the proposed solution in the appropriate simulation environment.
    References Bonomi, F., Milito, R., Natarajan, P., & Zhu, J. (2014). Fog computing:
    A platform for Internet of things and analytics. Big data and internet of things:
    A roadmap for smart environments. Springer International Publishing, 546, 169–186.
    Google Scholar   Yi, S., Li, C., & Li, Q. (2015). A survey of fog computing: Concepts,
    applications and issues. In Workshop on Mobile Big Data (pp. 37–42). Open Networking
    Foundation. Software defined networking: the new norm for networks. Web white
    Paper. Accessed 15 Feb 2016. https://www.opennetworking.org/images/stories/downloads/sdn-resources/white-papers/wp-sdn-newnorm.pdf.
    Stojmenovic, I., & Sheng, W. (2014). The fog computing paradigm: Scenarios and
    security issues. In Federated Conference on Computer Science and Information Systems
    (FedCSIS) (pp. 1–8). Cisco. The Internet of Things: How the next evolution of
    the internet is changing everything. Web white paper. Accessed 25 Feb 2016. https://www.cisco.com/c/dam/en_us/about/ac79/docs/innov/IoT_IBSG_0411FINAL.pdf.
    Fazio, M., Bessis, N., & Villari, M. (2015). Advances in service-oriented and
    cloud computing. Preface of CLIoT. Springer International Publishing, 58, 73–75.
    Google Scholar   Botta, A., De Donato, V., Persico, V., & Pescape, A. (2014).
    On the integration of cloud computing and internet of Things. In International
    Conference on Future Internet of Things and Cloud (FiCloud) (pp. 23–30). Tomovic,
    S., Prasad, N., & Radusinovic, I. (2015). Performance comparison of QoS routing
    algorithms applicable to large-scale SDN networks. In International Conference
    on Computer as a Tool (EUROCON) (pp. 1–6). Tomovic, S., Pejanovic-Djurisic, M.,
    & Radusinovic, I. (2014). SDN-based mobile networks: Concepts and benefits. Wireless
    Personal Communications, 78(3), 1629–1644. Article   Google Scholar   Tomovic,
    S., Prasad, N., & Radusinovic, I. (2014). SDN control framework for QoS provisioning.
    In Proceedings of Telecommunications Forum TELFOR (pp. 111–114). McKeown, N.,
    Anderson, T., Balakrishnan, H., Peterson, L., Rexford, J., Rexford, J., et al.
    (2008). Open-Flow: Enabling innovations in campus networks. ACM SIGCOMM Computer
    Communication Review (CCR), 38(2), 6974. Google Scholar   Trivisonno, R., Guerzoni,
    R., Vaishnavi, I., & Soldani, D. (2015). SDN-based 5G mobile networks: architecture,
    functions, procedures and backward compatibility. Transactions on Emerging Telecommunications
    Technologies, 26, 8292. Article   Google Scholar   Tomovic, S., Pejanovic-Djurisic,
    M., Yoshigoe, K., Maljevic, I., & Radusinovic, I. (2014). SDN-based concept of
    QoS aware heterogeneous wireless network operation. In Proceedings of Telecommunications
    Forum TELFOR (pp. 27–30). Mohammad, A., & Eui-Nam, H. (2014). Fog computing and
    smart gateway based communication for cloud of things (pp. 464–470). Luan, T.
    H., Gao, L., Xiang, Y., Li, Z., & Sun, L. (2015). Fog Computing: Focusing on mobile
    users at the edge. ArXiv:1502.01815v1 [cs.NI]. Peter, N. (2015). Fog computing
    and its real time applications. International Journal of Emerging Technology and
    Advanced Engineering (IJETAE), 5(6), 266–269. MathSciNet   Google Scholar   Bonomi,
    F., Milito, R., Zhu, J., & Addepalli, S. (2012). Fog computing and its role in
    the internet of things. In Workshop on Mobile Cloud Computing (MCC) (p. 1316).
    Truong, N. B., Lee, M. G., & Ghamri-Doudane, Y. (2015). Software defined networking-based
    vehicular ad-hoc network with Fog computing. In IEEE International Symposium on
    Integrated Network Management (pp. 1202–1207). Ku, I., You, L., Gerla, M., Ongaro,
    F., Gomes, R. L., & Cerqueira, E. (2014). Towards software-defined VANET: Architecture
    and services. In 13th Annual Mediterranean Ad Hoc Networking Workshop (pp. 103-110).
    MED-HOC-NET. Hong, K., Lillethun, D., Ramachandran, U., Ottenwalder, B., & Koldehofe,
    B. (2013). Mobile fog: A programming model for large-scale applications on the
    internet of things. In ACM SIGCOMM workshop on Mobile cloud computing (pp. 15–20).
    Zhijing, Q., Denker, G., Giannelli, C., Bellavista, P., & Venkatasubramanian,
    N. (2015). A software defined networking architecture for the Internet-of-Things.
    In IEEE Network Operations and Management Symposium (pp. 1–9). Wu, D., Arkhipov,
    D., Asmare, E., Qin, Z., & McCann, J. (2015). UbiFlow: Mobility management in
    urban-scale software defined IoT. In Proc. of the 34th IEEE Conference on Computer
    Communications (pp. 208–216). INFOCOM. Luo, T., Tan, H.-P., & Quek, T. (2012).
    Sensor OpenFlow: Enabling software-dened wireless sensor networks. IEEE Communications
    Letters, 16(11), 1896–1899. Article   Google Scholar   Costanzo, S., Galluccio,
    L., Morabito, G., & Palazzo, S. (2012). Software defined wireless networks: Unbridling
    sedans. In European Workshop on Software Defined Networking (p. 16). EWSDN. Perkins,
    C., Belding-Royer, E., & Das, S. (2003). Ad hoc on-demand distance vector (AODV)
    routing. IETF. RFC 3561. Accessed 15 Feb 2016. Tesla Motors. Web page. Accessed
    15 Feb 2016. http://my.teslamotors.com/it_IT/forum/forums/elon-musk-talks-google-bring-driverless-tech-tesla-cars.
    Tomovic, S., & Radusinovic, I. (2015). Performance analysis of a new SDN-based
    WSN architecture. In Proc. of 23Rd Telecommunication Forum TELFOR (pp. 99–102).
    Robodrone. Web page. (2016) http://www.robodrone.com/. Accessed 15 Feb. Download
    references Acknowledgments This work has been supported by the EU FP7 project
    Fore-Mont (Grant Agreement No. 315970 FP7-REGPOT-CT-2013) and the BIO-ICT Centre
    of Excellence (Contract No. 01-1001) funded by Ministry of Science of Montenegro
    and the HERIC project. Author information Authors and Affiliations Faculty of
    Electrical Engineering, University of Montenegro, Podgorica, Montenegro Slavica
    Tomovic & Igor Radusinovic Donaghey College of Engineering and Information Technology,
    University of Arkansas, Little Rock, Arkansas, USA Kenji Yoshigoe TELUS Communications,
    University of Toronto, Toronto, Ontario, Canada Ivo Maljevic Corresponding author
    Correspondence to Slavica Tomovic. Rights and permissions Reprints and permissions
    About this article Cite this article Tomovic, S., Yoshigoe, K., Maljevic, I. et
    al. Software-Defined Fog Network Architecture for IoT. Wireless Pers Commun 92,
    181–196 (2017). https://doi.org/10.1007/s11277-016-3845-0 Download citation Published
    24 October 2016 Issue Date January 2017 DOI https://doi.org/10.1007/s11277-016-3845-0
    Share this article Anyone you share the following link with will be able to read
    this content: Get shareable link Provided by the Springer Nature SharedIt content-sharing
    initiative Keywords Internet of things SDN Fog computing Use our pre-submission
    checklist Avoid common mistakes on your manuscript. Sections Figures References
    Abstract Introduction IoT: Current State and Challenges SDN-Based Model of IoT
    System Use-Cases Conclusion References Acknowledgments Author information Rights
    and permissions About this article Advertisement Discover content Journals A-Z
    Books A-Z Publish with us Publish your research Open access publishing Products
    and services Our products Librarians Societies Partners and advertisers Our imprints
    Springer Nature Portfolio BMC Palgrave Macmillan Apress Your privacy choices/Manage
    cookies Your US state privacy rights Accessibility statement Terms and conditions
    Privacy policy Help and support 129.93.161.222 Big Ten Academic Alliance (BTAA)
    (3000133814) - University of Nebraska-Lincoln (3000134173) © 2024 Springer Nature'
  inline_citation: Tomovic et al. (2016) presented a software-defined fog network
    architecture for IoT that combined the benefits of software-defined networking
    (SDN) and fog computing to address the challenges of real-time data delivery and
    mobility in the internet of things (IoT) environment. The proposed architecture
    is designed to meet the specific requirements of IoT applications, such as real-time
    data processing, mobility support, and resource constrained devices.
  journal: Wireless Personal Communications
  limitations: 'The paper focuses on the architectural aspects of the proposed IoT
    solution and does not provide a detailed evaluation of its performance or implementation
    details.


    The paper assumes a hierarchical deployment of fog nodes, which may not be suitable
    for all IoT scenarios.


    The proposed architecture relies on the availability of SDN controllers and fog
    nodes with sufficient resources to handle the increasing workload of IoT applications.


    The security aspects of the proposed architecture are not discussed in detail.'
  pdf_link: null
  publication_year: 2016
  relevance_score: 0.6
  relevance_score1: 0
  relevance_score2: 0
  title: Software-Defined Fog Network Architecture for IoT
  verbatim_quote1: null
  verbatim_quote2: null
  verbatim_quote3: '>'
- DOI: https://doi.org/10.3390/app9214479
  analysis: 'This paper provides a comprehensive review of smart campus and smart
    university systems, focusing on the latest key technologies and their potential
    applications. The authors discuss the role of the Internet of Things (IoT), cloud
    computing, fog and edge computing, blockchain, augmented and virtual reality,
    etc., in developing smart campuses and universities. They provide a holistic review
    of the current state-of-the-art and future trends in this domain.


    In response to your specific inquiry about the different data types (e.g., soil
    moisture, canopy temperature, weather) and their collection and use, the authors
    mention that IoT nodes and gateways are used for data collection, and such data
    is often processed and analyzed using cloud computing and edge/fog computing paradigms.


    Here is a verbatim quote from the paper that specifically addresses the integration
    of IoT, data collection, and cloud computing:


    “An example of smart campus architecture based on cloud computing is presented
    in [35], where the authors deployed a smart campus platform in three months by
    using Commercial Off-The-Shelf (COTS) hardware and Microsoft Azure cloud services.
    With respect to IoT, its use has been proposed for easing the deployment of architectures
    that allow for implementing learning, access control, or resource water management
    applications [10,36].”


    Additionally, the authors provide an overview of the latest smart campus deployments
    and initiatives, highlighting their main applications and communications technologies.
    Overall, the paper offers a valuable resource for understanding the landscape
    of smart campuses and universities and the role of various technologies in their
    development.


    Here is a relevance score for the paper based on the provided context and the
    specific question:


    **Relevance score: 0.9**


    The paper is highly relevant to the specific question as it provides a comprehensive
    overview of smart campus and university systems, including the use of IoT, data
    collection, and cloud computing for data processing and analysis.'
  authors:
  - Tiago M. Fernández‐Caramés
  - Paula Fraga‐Lamas
  citation_count: 92
  full_citation: 'Fernández-Caramés, T.M.; Fraga-Lamas, P. Towards Next Generation
    Teaching, Learning, and Context-Aware Applications for Higher Education: A Review
    on Blockchain, IoT, Fog and Edge Computing Enabled Smart Campuses and Universities.
    Title Appl. Sci. 2019, 9, 4479; doi:10.3390/app9214479'
  full_text: ">\napplied  \nsciences\nReview\nTowards Next Generation Teaching, Learning,\
    \ and\nContext-Aware Applications for Higher Education:\nA Review on Blockchain,\
    \ IoT, Fog and Edge\nComputing Enabled Smart Campuses and\nUniversities\nTiago\
    \ M. Fernández-Caramés 1,2,*\nand Paula Fraga-Lamas 1,2,*\n1\nDepartment of Computer\
    \ Engineering, Faculty of Computer Science, Universidade da Coruña,\n15071 A Coruña,\
    \ Spain\n2\nCentro de investigación CITIC, Universidade da Coruña, 15071 A Coruña,\
    \ Spain\n*\nCorrespondence: tiago.fernandez@udc.es (T.M.F.-C.); paula.fraga@udc.es\
    \ (P.F.-L.);\nTel.: +34-981167000 +6051 (P.F.-L.)\nReceived: 23 September 2019;\
    \ Accepted: 18 October 2019; Published: 23 October 2019\n\x01\x02\x03\x01\x04\x05\
    \x06\a\b\x01\n\x01\x02\x03\x04\x05\x06\a\nAbstract: Smart campuses and smart universities\
    \ make use of IT infrastructure that is similar to the\none required by smart\
    \ cities, which take advantage of Internet of Things (IoT) and cloud computing\n\
    solutions to monitor and actuate on the multiple systems of a university. As a\
    \ consequence, smart\ncampuses and universities need to provide connectivity to\
    \ IoT nodes and gateways, and deploy\narchitectures that allow for offering not\
    \ only a good communications range through the latest wireless\nand wired technologies,\
    \ but also reduced energy consumption to maximize IoT node battery life.\nIn addition,\
    \ such architectures have to consider the use of technologies like blockchain,\
    \ which are\nable to deliver accountability, transparency, cyber-security and\
    \ redundancy to the processes and\ndata managed by a university. This article\
    \ reviews the state of the start on the application of the\nlatest key technologies\
    \ for the development of smart campuses and universities. After deﬁning the\n\
    essential characteristics of a smart campus/university, the latest communications\
    \ architectures and\ntechnologies are detailed and the most relevant smart campus\
    \ deployments are analyzed. Moreover,\nthe use of blockchain in higher education\
    \ applications is studied. Therefore, this article provides\nuseful guidelines\
    \ to the university planners, IoT vendors and developers that will be responsible\
    \ for\ncreating the next generation of smart campuses and universities.\nKeywords:\
    \ IoT; blockchain; smart campus; smart university; teaching and learning; smart\
    \ cities;\nfog computing; edge computing; higher education; context-aware applications\n\
    1. Introduction\nSmart campuses and universities require an IT infrastructure\
    \ similar to the one needed by smart\ncities, smart buildings, or smart homes,\
    \ which make use of Internet of Things (IoT) solutions [1–4] to\ninteract with\
    \ the sensor and actuation systems of a university. Similarly to smart cities,\
    \ but in contrast\nto most smart homes and buildings, smart campuses must provide\
    \ long-distance communications,\nas many university campuses cover an area that\
    \ can reach thousands of square meters. For instance,\nthe campus of the authors\
    \ of this article (Campus of Elviña, University of A Coruña, Spain) occupies a\n\
    26,000 m2 area. Nonetheless, such an area can be considered small when compared\
    \ with the largest\nuniversity campuses in the world: Berry College (Floyd County,\
    \ Georgia, United States) covers 109.26\nkm2 of land [5], Duke University campuses\
    \ (Durham, North Carolina, United States) are deployed on\n37.83 km2 [6], and\
    \ the campus of Stanford University (Stanford, California, United States) occupies\
    \ 8180\nAppl. Sci. 2019, 9, 4479; doi:10.3390/app9214479\nwww.mdpi.com/journal/applsci\n\
    Appl. Sci. 2019, 9, 4479\n2 of 24\nacres (33 km2) [7]. These ﬁgures mean that\
    \ smart campuses should make use of speciﬁc long-distance\ncommunications infrastructure\
    \ that provides indoor and outdoor connectivity to the deployed IoT\ngateways,\
    \ sensors and actuators, while guaranteeing reduced energy consumption and thus\
    \ optimized\nIoT node battery life.\nA smart campus and university is managed\
    \ according to its strategic plan (a framework of its\nmain priorities and commitments).\
    \ As a result, universities devote ﬁnancial resources to implement a\nbroad range\
    \ of actions (e.g., related to digital transformation, services, applications,\
    \ events, facilities,\nhuman resources, governance, educational programs, or innovation)\
    \ that are fundamentally designed\nto meet their institutional objectives. The\
    \ strategic plan is driven by the university mission, vision, and\ncore values\
    \ (further detailed in Section 2). For instance, a number of universities around\
    \ the world\nhas committed to make tangible contributions to the United Nations\
    \ Sustainable Development Goals\n(SDGs). Note that the provided smart campus services\
    \ may be similar to the ones of a smart city,\nbut adapted to the needs of a university\
    \ (e.g., mobility/transport services, energy/grid monitoring,\nresource consumption\
    \ efﬁciency, user behavior monitoring, or guidance applications). However, there\n\
    are other services that are speciﬁc for a university environment, such as the\
    \ services for analyzing the\nbehavior of students in certain outdoor activities\
    \ or their attendance to lectures.\nIn addition, there are other relevant differences\
    \ with respect to smart cities regarding the\narchitectures and technologies that\
    \ can be applied to smart campuses and universities:\n•\nSmaller size. Although,\
    \ as it has been previously mentioned, there are really large campuses, most\n\
    of them are not as large as cities and, in fact, there are many urban universities\
    \ with buildings\ninside a city. Such a smaller size enables using certain communications\
    \ technologies that do not\nneed to reach very long distances. In addition, since\
    \ often less devices require to be deployed than\nin a smart city, architectures\
    \ can be less complex and need less routing layer devices, what usually\nreduces\
    \ response time and infrastructure deployment cost.\n•\nInfrastructure management.\
    \ Frequently, in a smart campus/university all buildings and related\ninfrastructure\
    \ are managed by the same organization (i.e., the university), often making it\
    \ easier\nto take certain measures to ease the deployment of the required infrastructure\
    \ communications\nand architecture than in a smart city. In contrast, in a city\
    \ most space is occupied with private\nbuildings that are managed by people that\
    \ do not work for the city council, so certain infrastructure\ndeployments can\
    \ be difﬁcult when having to deal with the different necessities of multiple people.\n\
    •\nHomogeneity.\nA smart university can enforce the use of certain technologies\
    \ and speciﬁc\narchitectures, while a smart city in general will have to deal\
    \ with a greater heterogeneity in\nsuch areas, which usually require complex solutions\
    \ to integrate the numerous previously existing\ncomputational systems.\nDue to\
    \ the previously mentioned differences, it is essential to study speciﬁcally\n\
    the most\nappropriate architectures and technologies for developing smart campuses\
    \ and universities.\nIn contrast to previous reviews and surveys on smart campuses/universities,\
    \ which are presented\nas systematic literature reviews [8,9], are focused on\
    \ deﬁning certain generic concepts/applications [10],\nor are centered on speciﬁc\
    \ technologies [11–16], this article provides a holistic review that analyzes\
    \ the\napplication of the latest key technologies and architectures for the development\
    \ of smart campuses\nand universities, including the following contributions,\
    \ which have not been found together in the\nprevious literature.\n•\nAfter deﬁning\
    \ the essential characteristics of a smart campus and a smart university, the\
    \ most\ncommon communications architectures are detailed together with their evolution:\
    \ from traditional\ncloud-based to the latest ones based on edge computing.\n\
    •\nThe application of blockchain to such architectures is studied as a tool to\
    \ create a distributed\nimmutable log that provides transparency and cybersecurity\
    \ to higher education and smart\ncampus applications.\nAppl. Sci. 2019, 9, 4479\n\
    3 of 24\n•\nThe characteristics of the most relevant smart campus deployments\
    \ and initiatives are analyzed.\n•\nThe latest smart campus deployments are enumerated\
    \ and multiple examples of their applications\nare described.\n•\nThe most recent\
    \ communications technologies for outdoor and indoor smart campus applications\n\
    are studied.\n•\nThe main challenges that will be faced by university planners,\
    \ IoT vendors, and developers\nare listed.\nThe rest of this paper is structured\
    \ as follows. Section 2 deﬁnes the concept of smart campus and\nits main features.\
    \ Section 3 details the latest communications architectures for smart campuses\
    \ and\nsmart universities. Section 4 analyzes the potential applications of blockchain\
    \ for deploying higher\neducation and smart campus applications. Section 5 describes\
    \ the most relevant smart campuses that\nhave been already deployed, emphasizing\
    \ their main applications and communications technologies.\nFinally, Section 6\
    \ indicates the main challenges for university planners, IoT vendors, and developers,\n\
    and Section 7 is devoted to the conclusions.\n2. Deﬁnitions of Smart Campus and\
    \ Smart University\nIt must be ﬁrst clariﬁed that the term “smart campus” has\
    \ been used in the past to refer to digital\nonline platforms that manage university\
    \ content [17,18] or to the set of techniques aimed at increasing\nuniversity\
    \ student smartness [19–21]. However, in this article, the concept of smart campus\
    \ refers\nto the hardware and software required to provide advanced intelligent\
    \ context-aware services and\napplications to university students and staff. In\
    \ addition, the term smart university refers to the\nhardware and software used\
    \ to develop tools to fulﬁll the key dimensions of the university mission:\n•\n\
    Improve the teaching, learning, and assessment processes involved in higher education.\n\
    •\nFoster research and innovation.\n•\nEmpower community-based knowledge transfer\
    \ and a shared vision among the various\nuniversity stakeholders (e.g., teachers,\
    \ students, administration, non-proﬁt organizations, research\ninstitutions, citizens,\
    \ industries, and governments).\nSuch characteristics make smart campus and universities\
    \ unique and enable differentiating from\nother concepts like smart cities. Nonetheless,\
    \ smart campuses/universities are similar to smart cities\nin the way they are\
    \ organized, which revolves around six smart areas [22]:\n•\nSmart governance.\
    \ It allows university staff and students to take part in different decisions\
    \ that\nneed to be made on a university or on a speciﬁc campus.\n•\nSmart people.\
    \ It is related to the engagement of the university users in teaching and learning\n\
    processes or their attendance to certain events.\n•\nSmart mobility. In the case\
    \ of a smart campus, this ﬁeld deals with the different issues related\nto the\
    \ available transport systems, which should be efﬁcient, green, safe, and may\
    \ provide\nintelligent services.\n•\nSmart environment. This ﬁeld is related to\
    \ smart solutions able to monitor, protect, and actuate on\nthe environment while\
    \ also managing the available resources in a sustainable way. For instance,\n\
    smart environment systems provide solutions for monitoring waste, water consumption,\
    \ or air\nquality. In addition, this ﬁeld is usually related to the deployment\
    \ of systems to control and\nmonitor the energy consumed, generated and distributed\
    \ throughout a campus.\n•\nSmart living. It is responsible for monitoring the\
    \ multiple living factors involved in the daily\ncampus activities, including\
    \ the ones related to health, safety or user behavior. Thus, smart living\nservices\
    \ can perform the following [23,24]:\n–\nEstimate room occupation and determine\
    \ student classroom attendance.\nAppl. Sci. 2019, 9, 4479\n4 of 24\n–\nControl\
    \ the access to classroom/lab equipment.\n–\nProvide teaching interaction services\
    \ and context-aware applications.\n•\nSmart economy. This smart ﬁeld deals with\
    \ the productivity of a campus in relation to concepts\nlike entrepreneurship\
    \ or innovation.\nAs a summary, Figure 1 illustrates the main ﬁelds and technologies\
    \ related to the deployment\nof a smart campus/university. The inner circle contains\
    \ the six previously mentioned smart ﬁelds.\nThe contiguous outer circle references\
    \ some of the most relevant technologies required to provide\nsolutions for such\
    \ six smart ﬁelds, including IoT, Augmented Reality (AR), Cyber-Physical Systems\n\
    (CPSs), or UAVs (Unmanned Aerial Vehicles). Note that some of such technologies\
    \ are the same as the\nones proposed by Industry 4.0 [25], so commercial and industrial\
    \ deployments are already available in\nother ﬁelds outside smart campuses [26,27].\
    \ Moreover, there are also vertical ﬁelds like cybersecurity\nthat affect several\
    \ of the cited technologies, since their contribution is key to avoid potential\
    \ issues [28].\nFinally, the most external circle of Figure 1 indicates speciﬁc\
    \ smart areas that are usually involved\nin the daily activities carried out in\
    \ a smart campus/university. For example, smart plug-and-play\nobjects [29] may\
    \ be involved in many university activities, whereas certain environmental sensors\
    \ are\nessential for actuating on smart buildings [30]. There are also other ﬁelds,\
    \ like smart agriculture, that\nmay be speciﬁc for smart campuses that include\
    \ in their premises areas for growing certain crops that\nmay require the use\
    \ of autonomous decision-support systems [31].\nRobots \nand UAVs\nBig Data\n\
    Cloud and Edge \nComputing\nAugmented\nand Virtual Reality\nSmart Logistics\n\
    Smart Mobility\nSmart Buildings\nSmart Grid\nSmart Healthcare\nSmart Tools\nSmart\
    \ Objects\nSmart Appliances\nSmart Agriculture\nBlockchain\nSmart Cities\nSmart\
    \ Campus\nSmart \nGovernance\nSmart \nPeople\nSmart Environment\nSmart Living\n\
    Smart \nEconomy\nIoT\nCPS\nIntegration\nSystems\nCybersecurity\nSmart Water \n\
    Management\nSmart Waste \nManagement\nSmart Parking\nSmart Traﬃc\nSafety and Secutity\n\
    Social Networks\nLocation Services\nGuidance and \nNavigation Systems\nSmart Learning\n\
    Figure 1. Main ﬁelds and technologies of a smart campus.\n3. Smart Campus/University\
    \ Communications Architectures\nSeveral authors have previously proposed different\
    \ smart campus architectures, but it\ncan be stated that, in general, they can\
    \ be classiﬁed as Service-Oriented Architecture (SOA)\nAppl. Sci. 2019, 9, 4479\n\
    5 of 24\narchitectures [32,33] that revolve around two main paradigms (IoT and\
    \ cloud computing [34]), which\nare usually helped by Big Data when processing\
    \ and analyzing the collected information.\nAn example of smart campus architecture\
    \ based on cloud computing is presented in [35], where\nthe authors deployed a\
    \ smart campus platform in three months by using Commercial Off-The-Shelf\n(COTS)\
    \ hardware and Microsoft Azure cloud services. With respect to IoT, its use has\
    \ been proposed\nfor easing the deployment of architectures that allow for implementing\
    \ learning, access control, or\nresource water management applications [10,36].\n\
    Some researchers have also proposed alternative paradigms for creating smart campuses.\n\
    For instance, the authors of [37] propose an opportunistic communications architecture\
    \ that allows for\nsharing data through infrastructure-less services. The main\
    \ novelty behind the proposed architecture\nis the concept of Floating Content\
    \ node, which is a computing device that produces data that can be\nshared among\
    \ users located in nearby areas. Similar architectures have been proposed, but\
    \ they have\nbeen focused on improving certain aspects like security [38].\nSome\
    \ of the latest smart campus architectures have suggested the use of the different\
    \ types of\nthe edge computing paradigm (e.g., mobile edge computing or fog computing),\
    \ which have already\nbeen successfully applied to other smart ﬁelds [39]. The\
    \ main advantage of edge computing is its\nability to ofﬂoad part of the processing\
    \ tasks from the cloud, delegating such tasks to the so-called\nedge devices,\
    \ which are physically located close to the IoT nodes. Thanks to this approach,\
    \ the amount\nof communications transactions with the cloud and latency response\
    \ are reduced, while also being\nable to provide location-aware services [40,41].\n\
    For example, the authors of [42] make use of edge computing devices to improve\
    \ their smart\ncampus architecture. Such devices are focused on delivering services\
    \ related to content caching and\nbandwidth allocation. A similar approach is\
    \ presented in [43], where the researchers provide smart\ncampus services through\
    \ edge computing devices embedded into street lights. In the case of the work\n\
    detailed in [44], the authors propose a smart campus platform called WiCloud that\
    \ is based in mobile\nedge computing, which allows for accessing the platform\
    \ servers through mobile phone base stations\nor wireless access points. Finally,\
    \ it is worth mentioning the smart campus system presented in [45],\nwhich makes\
    \ use of fog computing nodes to enhance user experience.\nTo clarify the previously\
    \ mentioned architectures, Figure 2 illustrates their evolution. In this\nﬁgure,\
    \ at the top, the traditional cloud-based architecture is depicted, which is composed\
    \ by two main\nlayers:\n•\nNode layer: it consists of multiple IoT nodes and computing\
    \ devices, whose data are collected\nthrough IoT gateways and routers in order\
    \ to send them to the cloud where they are stored.\n•\nCloud layer: it is essentially\
    \ a central server or a group of servers where the main processing tasks\nare\
    \ carried out. In addition, the cloud allows for interacting with third parties,\
    \ it presents the\nstored data to remote users and enables interconnecting the\
    \ multiple IoT networks that may be\nscattered through different physical locations.\n\
    The architecture depicted at the bottom of Figure 2 on the left represents a fog\
    \ computing\narchitecture. In this case, besides the node layer and the cloud,\
    \ there is a third layer (the fog layer),\nwhich is made of fog devices. Such\
    \ devices provide different local fog services to the IoT nodes and\nare also\
    \ able to exchange data among them to collaborate in certain tasks. A fog computing\
    \ device is\nusually implemented on a Single-Board Computer (SBC), which is essentially\
    \ a reduced-size low-cost\ncomputer (e.g., Raspberry Pi and Orange Pi PC) that\
    \ can be easily deployed in the campus facilities.\nFinally, the third and more\
    \ evolved architecture of Figure 2 is the one at the bottom, on the right,\nwhich\
    \ illustrates a typical edge computing smart campus architecture. Such an architecture\
    \ is basically\nan enhanced version of the previously mentioned fog computing-based\
    \ architecture, but through its\nedge computing layer it provides more computing\
    \ power, thanks to the use of cloudlets. A cloudlet is\noften a high-end computer\
    \ that is able to perform compute-intensive tasks, like the ones related to\n\
    complex data processing or image rendering.\nAppl. Sci. 2019, 9, 4479\n6 of 24\n\
    Cloud\nRemote Users\nOther IoT \nNetworks\nThird-Party \nServices\nNode Layer\n\
    IoT Node Network\nRouter\nRouter\nRouter\nRouter\nIoT Gateway\nSensors\nActuators\n\
    Cloud-Based Architecture\nFog Computing-Based Architecture\nOther Gateways\nSBC\n\
    SBC\n…\nSBC\nMain Gateway\nLocal Gateway\nSBC\nFog Services\nFog Layer\nEdge Computing\
    \ Layer\nOther Gateways\nSBC\nSBC\n…\nSBC\nMain Gateway\nLocal Gateway\nSBC\n\
    Fog Services\nCloudlet\nEdge Computing-Based Architecture\nWiFi/Ethernet \nRouter\n\
    WiFi/Ethernet Network\nSensors\nActuators\nCampus User Devices\nNode Layer\nIoT\
    \ Node Network\nRouter\nRouter\nRouter\nRouter\nSensors\nActuators\nWiFi/Ethernet\
    \ Network\nSensors\nActuators\nCampus User Devices\nNode Layer\nIoT Node Network\n\
    Router\nRouter\nRouter\nRouter\nSensors\nActuators\nWiFi/Ethernet Network\nSensors\n\
    Actuators\nCampus User Devices\nFigure 2. Smart campus architecture evolution.\n\
    4. Blockchain for Smart Campuses and Universities\nBoth academia [11–13] and public\
    \ entities like the European Commission [46] have recently\nconsidered the improvement\
    \ of the architectures described in the previous section by using Distributed\n\
    Ledger Technologies (DLTs) like blockchain. Such a technology can be used for\
    \ implementing higher\neducation and smart campus applications, due to their ability\
    \ to provide data exchanges among entities\nthat do not necessarily trust each\
    \ other [47]. In addition, the use of blockchain enhance smart campus\napplications\
    \ that need transparency, data immutability, privacy, and security. Furthermore,\
    \ blockchain\nallows for developing Decentralized Apps (DApps) based on Peer-to-Peer\
    \ (P2P) transactions whose\nprocesses can be automated through the use of smart\
    \ contracts, which can execute pieces of code in an\nautonomous way [48].\nNowadays,\
    \ there are many blockchain platforms, like Ethereum [49], Hyperledger Fabric\
    \ [50],\nor the popular Bitcoin [51], that can be used in multiple practical applications\
    \ [52–55]. However, it is\nimportant to emphasize that blockchain is not the best\
    \ technology for every application that needs to\nperform trustworthy data exchanges.\
    \ For example, in many cases where smart campus applications\nare deployed in\
    \ a private network, a traditional database is powerful enough and usually provides\n\
    faster transactions than a blockchain. Therefore, to decide whether a blockchain\
    \ is necessary, smart\ncampus developers may use a decision framework [56] and,\
    \ thus, detect certain necessary features,\nlike the need for decentralization,\
    \ transaction transparency, cybersecurity (e.g., data redundancy and\nprotection\
    \ against Denial-of-Service (DoS) attacks), or the lack of trust among entities\
    \ (including\nrespect to government agencies and banks).\nDue to the previously\
    \ mentioned beneﬁts, different authors have proposed the use of blockchain\nand\
    \ other DLTs for developing applications for smart campuses and universities.\n\
    Speciﬁcally,\nAppl. Sci. 2019, 9, 4479\n7 of 24\nblockchain has been suggested\
    \ for guaranteeing education certiﬁcate authenticity [57,58], managing\ndigital\
    \ copyright information [59], verifying learning outcomes [60,61], or enhancing\
    \ e-learning\ninteraction [62]. More potential smart campus applications and a\
    \ deeper analysis on their characteristics\ncan be found in [11–13,46].\n5. Analysis\
    \ of Recent Smart Campus and University Deployments\n5.1. Relevant Deployments\n\
    In the literature, there only a few papers that present descriptions on actual\
    \ smart campuses.\nAn example of such a paper is [63], where the authors detail\
    \ the development of the smart campus of\nToulouse III Paul Sabatier university\
    \ (France). Speciﬁcally, the smart campus is called neOCampus and\ninvolves multiple\
    \ projects able to run on an open data platform that, for instance, can use collaborative\n\
    WiFi. Similarly, in [64], the authors describe a smart campus based on cloud computing,\
    \ SOA, and\nIoT that has been deployed in the Moncloa Campus of International\
    \ Excellence of the Universidad\nPolitécnica de Madrid (Spain). In the mentioned\
    \ article, two applications are detailed: one for\nmonitoring diverse environmental\
    \ parameters, and another for determining people ﬂows inside the\ncampus. A similar\
    \ smart campus is described in [65], where the authors propose an IoT and cloud\n\
    computing based architecture for the Wuhan University of Technology smart campus\
    \ (China) that is\naimed at supporting diverse applications.\nIoT is also key\
    \ in the West Texas A&M University smart campus [66], which is deployed in a\n\
    176-acre land that includes 42 different buildings. Such a smart campus is focused\
    \ on providing\nIoT-related and secure services, and has tested systems for smart\
    \ parking or environmental monitoring.\nAnother interesting work can be found\
    \ in [33], where it is detailed the Birmingham City University\nsmart campus (United\
    \ Kingdom). The aim of the proposed smart campus is essentially to create a\n\
    scalable and ﬂexible SOA architecture where service integration and orchestration\
    \ can be carried out\neasily through the use of an Enterprise Service Bus (ESB).\n\
    Finally, it is worth mentioning the work presented in [67], where it is described\
    \ from a theoretical\npoint of view the smart campus of Sapienza (Rome, Italy),\
    \ including the author’s approach for\nproviding services in a scalable way.\n\
    As a summary, Table 1 shows the main characteristics of the most relevant smart\
    \ campus\ndeployments, including details on their location, size, used hardware,\
    \ and their explicit support\nfor advanced architectures (fog and edge computing\
    \ enabled architectures) and blockchain-enabled\napplications.\nAppl. Sci. 2019,\
    \ 9, 4479\n8 of 24\nTable 1. Characteristics of the most relevant smart campuses\
    \ initiatives.\nReference\nUniversity\nSmart\nCampus\nLocation\nSize\nSensors\
    \ and\nActuators\nIoT\nHardware\nPlatform\nCloud Platform\nApplications\nFog/Edge\n\
    Computing\nSupport\nBlockchain\nSupport\n[32]\nNorthwestern Polytechnical\nUniversity\n\
    -\nXi’an (China)\n-\nBuilt-in smartphone\nsensors\n-\n-\nWhere2Study, I-Sensing\n\
    (participatory sensing),\nBlueShare (media sharing\napplication)\nNo\nNo\n[33]\n\
    Birmingham City University\n-\nBirmingham (United\nKingdom)\nTwo campuses of\n\
    roughly 18,000\nand 24,000 m2\n-\n-\nMicrosoft’s BizTalk\nServer as ESB\nBusiness\
    \ systems, smart\nbuildings\nNo\nNo\n[35]\nUniversity of Washington\nBothell\n\
    School of\nSTEM\nBothell (Washington,\nUnited States)\n-\nAccelerometer,\nmagnetometer,\n\
    gyroscope, light,\nhumidity object and\nambient temperature,\nmicrophone\nArduino\n\
    Amazon AWS and\nMicrosoft Azure\n-\nNo\nNo\n[36]\nUniversity of Business and\n\
    Technology\nQA Higher\nEducation\n(QAHE)\nBirmingham (United\nKingdom)\n-\nNFC\
    \ and RFID tags,\nQR codes\nIoT Wearables\nCisco Physical Access\nControl technology\n\
    Learning applications, access\ncontrol systems\nNo\nNo\n[37]\n-\nIMDEA\nNetworks\n\
    Institute\nLeganés (Madrid,\nSpain)\n-\n-\n-\n-\nMobility modelling\nNo, but it\
    \ is\nproposed the\nuse of a\nsimilar\nparadigm\n(opportunistic\nFloating\nContent)\n\
    No\n[38]\nUniversity of Oradea\n-\nOradea (Romania)\n-\nRFID labels, mobile\n\
    devices, sensor\nequipment\n-\nPrivate/public cloud\nwith steganography\nNo (it\
    \ only describes the\narchitecture design)\nNo\nNo\n[64]\nUniversidad Politécnica\
    \ de\nMadrid\nSmart CEI\nMoncloa\nMadrid (Spain)\n5.5 km2, 144\nbuildings\nSmart\
    \ Citizen Kit\nRaspberry Pi,\nArduino\n-\nSmart emergency\nmanagement and trafﬁc\n\
    restriction\nNo\nNo\n[65]\nWuhan University of\nTechnology\n-\nWuhan (China)\n\
    -\nRFID tags, cameras\nand diverse sensors\n-\n-\nSmart learning and living\n\
    No\nNo\n[66]\nWest Texas A&M University\n-\nCollege Station\n(Texas, United States)\n\
    0.71 km2 with 42\nbuildings and a\n9.68 km2 working\nranch\nTemperature, air\n\
    pressure, relative\nhumidity and partial\nconcentrations\nArduino\n-\nConnect\
    \ cattle across the\nfeed yard; environmental\nmonitoring; water irrigation;\n\
    smart parking\nNo\nNo\n[67]\nUniversity of Rome\nSapienza\nsmart campus\nRome\
    \ (Italy)\n-\n-\n-\nN/A (it is only a\ntheoretical proposal)\nSmart living, economy,\n\
    energy, environment, and\nmobility applications\nNo\nNo\nAppl. Sci. 2019, 9, 4479\n\
    9 of 24\nTable 1. Cont.\nReference\nUniversity\nSmart\nCampus\nLocation\nSize\n\
    Sensors and\nActuators\nIoT\nHardware\nPlatform\nCloud Platform\nApplications\n\
    Fog/Edge\nComputing\nSupport\nBlockchain\nSupport\n[68]\nSoochow University\n\
    Wisdom\nCampus\nSuzhou (China)\n16.42 km2\n-\n-\n-\nAutomatic vehicle access,\n\
    parking guidance, bus\ntracking, and bicycle rental\nNo\nNo\n[69]\n-\nIndian\n\
    Institute of\nScience\ncampus\nBangalore (India)\n2 km × 1 km\nWater level sensors\n\
    TI\nMSP432P401R\nmicrocontroller\n-\nWater management\nNo\nNo\n[70]\nUniversity\
    \ of A Coruña\nCampus de\nElviña\nA Coruña (Spain)\n26,000 m2\n-\nIoT nodes\n\
    based on\nRisingHF\nRHF76-052\nmodules and\nIoT gateways\nbased on\nRaspberry\
    \ Pi 3\n-\nOutdoor applications\n(Crowdsensing, irrigation,\nand trafﬁc monitoring)\n\
    Yes\nNo\nAppl. Sci. 2019, 9, 4479\n10 of 24\n5.2. Smart Campus and University\
    \ Applications\nBoth indoor and outdoor applications can be deployed in a smart\
    \ campus/university [8], but such\nsmart applications differ in their requirements.\n\
    The most relevant difference is that, in indoor\nenvironments, IoT nodes can be\
    \ usually powered through the electrical grid and can make use\nof ﬁxed communications\
    \ infrastructure (e.g., Ethernet, WiFi access points). In contrast, outdoors,\
    \ IoT\nnodes usually depend on batteries and need to exchange data at relatively\
    \ long distances (at least\nseveral hundred meters, up to 2 kilometers). The following\
    \ are some of the most relevant applications\nfor both scenarios:\n•\nSmart mobility\
    \ and intelligent transport services. This kind of applications require outdoor\n\
    communications coverage from traditional Wireless Local Area Networks (WLANs)\
    \ or speciﬁc\nvehicular networks [71,72].\nFor instance, researchers of Soochow\
    \ University proposed to\nuse in their campus an automatic gate access system\
    \ and diverse services for smart parking,\nbus positioning or for renting bicycles\
    \ [68]. Similar services have been suggested by other\nuniversities for providing\
    \ a smart parking service [73], electric mobility [74,75], smart electric\ncharging\
    \ [76], the use of autonomous vehicles [77], or for locating the campus buses\
    \ [78,79].\n•\nSmart energy and smart grid monitoring. These applications are\
    \ used for controlling and\nmonitoring the generation, distribution, and consumption\
    \ of the campus energy sources (e.g.,\nphotovoltaic systems or wind generators).\
    \ Speciﬁcally, in the last years, multiple authors focused\ntheir research on\
    \ the study of smart campus microgrids [80–82], smart grids [83,84], and smart\n\
    energy systems [85,86].\n•\nResource consumption efﬁciency. The use of the resources\
    \ of a campus can be monitored\nthrough speciﬁc systems for garbage collection\
    \ [87], water management [69], power consumption\nmonitoring [88,89], and other\
    \ solutions aimed at preserving sustainability [16].\n•\nInfrastructure and building\
    \ control and monitoring. The state of certain buildings and assets that\nare\
    \ scattered throughout the campus can be monitored and controlled remotely. For\
    \ instance,\nsolutions have been suggested for monitoring campus greenhouses [90],\
    \ for controlling the\nHeating, Ventilation, and Air Conditioning (HVAC) systems\
    \ of the campus buildings [91] or for\nautomating critical infrastructure supervision\
    \ through Unmanned Aerial Vehicles (UAVs) [92].\n•\nGreen area monitoring. The\
    \ health of the trees of campus can be monitored remotely through IoT\nsensor-based\
    \ systems [93].\n•\nUser pattern and behavior monitoring. The smart campus services\
    \ and infrastructure can be\noptimized thanks to the analysis of the user patterns\
    \ and behaviors. For instance, mobility\npatterns, user activities, or social\
    \ interactions can be determined through smartphone apps [94,95],\nby monitoring\
    \ WiFi communications [96,97] or by collecting data from smartphone sensors [98],\n\
    wearables, or even garments [99].\n•\nGuidance and context-aware applications.\
    \ These applications often depend on sensors and\nactuators spread across the\
    \ campus and can help people by giving useful contextual information\nand indications\
    \ on how to reach their destination. For instance, there is interesting research\
    \ on\nguidance systems to aid hearing and visually impaired people [100] or for\
    \ navigating the campus\npaths [101,102]. There are also augmented reality applications\
    \ that provide relevant contextual\ninformation on the campus or that are able\
    \ to guide the users through it [103–105].\n•\nClassroom attendance. Different\
    \ student monitoring systems have been proposed, which make\nuse of IoT and artiﬁcial\
    \ intelligence to control student classroom attendance [106] and their access\n\
    to sport facilities [107].\n•\nRemote health monitoring. Some of the latest smart\
    \ campus applications are aimed at monitoring\nthe health of certain campus users\
    \ in real-time [108] or at measuring student stress [109] and\nhealth consciousness\
    \ [110].\nAppl. Sci. 2019, 9, 4479\n11 of 24\n•\nSmart card applications. Although\
    \ smart cards have been used for a long time by universities [111],\nthey can\
    \ still provide useful services for a smart campus, like information retrieval,\
    \ mobile\npayments, library usage, access control, or e-learning [112–114].\n\
    Instead of a smart card,\nthe latest developments suggested the use of the Near-Field\
    \ Communications (NFC) interface of\na smartphone to provide the mentioned smart\
    \ campus applications [115]. Due to the multiple\npotential applications of smart\
    \ cards, some authors also proposed to mine the data collected from\nthe student\
    \ transactions to infer their behavior [116,117].\n•\nTeaching and Learning applications.\
    \ The technologies embedded into a smart campus/university\ncan also help students\
    \ to learn through their mobile phones [118] or have an ubiquitous\nuser-centered\
    \ personalized learning and training experience with advanced analytics [119,120].\n\
    These technologies also allow teachers to make use of speciﬁc learning services\
    \ (e.g., online\nprogramming contests [121]), sophisticated online teaching platforms\
    \ [122], and to implement\nnovel teaching paradigms like Flipped Classroom [123]\
    \ or ampliﬁcation [124].\n•\nResearch and innovation activities.\nSmart campus/university\
    \ technologies can be used to\nencourage collaboration and cooperation among people\
    \ (e.g., international networks of living\nlabs). For instance, crowdsourcing\
    \ can be used to collect data of people with different proﬁles\n(e.g., students,\
    \ teachers, researchers, and administrative staff) and create large-scale datasets\
    \ for\nfurther research and novel applications [125].\n•\nCommunity-based knowledge\
    \ transfer applications. Smart campus and university technologies\ncan be explored\
    \ to beneﬁt the global community [126], either by increasing their awareness about\n\
    sustainability issues [127] or by making citizens actively involved as central\
    \ players of smart\nenvironments [128].\n•\nLocation-aware applications. In many\
    \ situations the information given to smart campus users\ndepends on their location.\
    \ Such a location-aware data may include information on content,\nactivities,\
    \ projects, services, tools, knowledge, or events [129–132].\n•\nSecurity services.\n\
    Smart campus managers can make use of the multiple sensors and\nrecording devices\
    \ to monitor the campus status and increase physical security through video\n\
    surveillance [133] and location-aware applications [134]. In addition, it is essential\
    \ to protect the\nprivacy of campus user data when making use of wireless communications\
    \ [135] and preventing\ncyber-attacks [66].\n5.3. Communications Technologies\n\
    In the past, researchers have used diverse technologies for connecting remote\
    \ outdoor IoT nodes\nwith smart campus platforms. Note that such technologies\
    \ may differ a great deal from one scenario\nto another, as the distance to be\
    \ covered and the kind obstacles found in the environment (especially,\nmetallic\
    \ objects [136]), severely condition signal propagation.\nFor instance, in [35],\
    \ the authors propose the design of an IoT-based smart campus that makes\nuse\
    \ of BLE and ZigBee for providing short and medium-range communications. Nonetheless,\
    \ note\nthat ZigBee nodes can act as relays in a ZigBee mesh, so that the exchanged\
    \ information can reach long\ndistances [137].\nWiFi (i.e., the IEEE 802.11 a/b/g/n/ac\
    \ standards) is another popular technology that has already\nbeen suggested for\
    \ providing indoor connectivity for smart campuses [64].\nBluetooth beacons\n\
    can be also used in smart campus applications [138,139], but they usually are\
    \ restricted to indoor\nenvironments, as their outdoor use requires the deployment\
    \ of dense networks whose management is\ncomplicated [140].\nAppl. Sci. 2019,\
    \ 9, 4479\n12 of 24\nDue to the popularity of mobile phones, the main cell phone\
    \ communications technologies (i.e.,\n2G/3G/4G) have been suggested for providing\
    \ smart campus services [141,142]. 5G technologies are\nstill being deployed worldwide,\
    \ but their use has already been proposed due to their ability to provide\nfast\
    \ communications and reduce response latency in smart campus applications [122].\n\
    Despite the good perspectives of 5G for the next decade, nowadays, Low-Power Wide\
    \ Area\nNetwork (LPWAN) technologies are arguably one of the best alternatives\
    \ for smart campus applications\nthat require low-power and long-distance IoT\
    \ communications [143]. Some of the most popular\nLPWAN technologies are SigFox\
    \ [144], LoRaWAN [145], and NB-IoT [146], existing other emerging\ntechnologies\
    \ like Ingenu Random Phase Multiple Access (RPMA) [147], Weightless-P [148], or\n\
    NB-Fi [149].\nLoRaWAN deﬁnes the communication protocol and the system architecture\
    \ for the network\nand uses LoRa as the physical layer. Although there are several\
    \ recent works on the application of\nLoRa/LoRaWAN to multiple scenarios [150],\
    \ only a few of them are focused on the deployment of\nsmart campuses services\
    \ [66,70,151–153]. For example, the authors of [152] analyze the indoor and\n\
    outdoor performance of LoRaWAN on a French smart campus. In addition, other researchers\
    \ [153]\nproposed a smart campus air quality system whose communications were\
    \ carried out by LoRaWAN\nnodes. Another example can be found in [70], where the\
    \ authors make use of a radio planning\nsimulator to determine the optimal location\
    \ of LoRaWaN nodes that provide smart campus services in\noutdoor applications.\n\
    There are also short-distance communications technologies that can be useful in\
    \ smart campus\napplications. For instance, ANT+ transceivers are often embedded\
    \ into chest straps to monitor\nperformance and health in sports. Another example\
    \ of popular short-distance communications\ntechnology is Radio Frequency IDentiﬁcation\
    \ (RFID), which is commonly used in university access\ncontrol and payment systems\
    \ [28].\nTable 2 summarizes the main characteristics of the latest and most popular\
    \ communications\ntechnologies for smart campus applications.\nMoreover, Table\
    \ 3 compares the communications\ntechnologies of the most relevant smart campus\
    \ solutions. Such a Table also indicates whether the\nprovided references detail\
    \ the network planning of the proposed solution and, as it can be observed,\n\
    only a couple of works give details about it.\nAppl. Sci. 2019, 9, 4479\n13 of\
    \ 24\nTable 2. Main characteristics of the latest and most popular communications\
    \ technologies for smart campus applications.\nTechnology\nFrequency Band\nTypical\n\
    Maximum\nRange\nData rate\nMain Features\nTypical Smart Campus Applications\n\
    ANT+\n2.4 GHz\n30 m\n20 kbit/s\nVery low power consumption, up to 65,533 nodes\n\
    Health and sport performance monitoring\nBluetooth 5 LE\n2.4 GHz\n<400 m\n1360\
    \ kbit/s\nLow power (batteries last from days to weeks)\nUser ﬂow monitoring,\
    \ guidance,\npositioning, telemetry\nDASH7/ISO 18000-7\n315–915 MHz\n<10 km\n\
    27.8 kbit/s\nVery low power (batteries last from months to years)\nItem, vehicle\
    \ and user tracking\nHF RFID\n3–30 MHz (13.56 MHz)\na few meters\n<640 kbit/s\n\
    Low cost, in general it needs no batteries\nUser and asset identiﬁcation for access\n\
    control and payments\nIQRF\n868 MHz\nhundreds of\nmeters\n100 kbit/s\nLow power,\
    \ long range\nIoT applications\nLF RFID\n30–300 KHz (125 KHz)\n<10 cm\n<640 kbit/s\n\
    Low cost, it needs no batteries\nAccess control systems, asset tracking\nNB-IoT\n\
    LTE frequencies\n<35 km\n<250 kbit/s\nLow power, long range\nIoT applications\n\
    NFC\n13.56 MHz\n<20 cm\n424 kbit/s\nLow cost, it needs no batteries\nUser access\
    \ control and payments\nLoRa, LoRaWAN\nDifferent Industrial Scientiﬁc\nMedical\
    \ bands\nkilometers\n0.25−50 kbit/s\nLow consumption, long range\nIoT applications\n\
    SigFox\n868–902 MHz\n50 km\n100 kbit/s\nIt makes uses of private cellular networks\n\
    IoT and M2M applications\nUHF RFID\n30 MHz–3 GHz\ntens of meters\n<640 kbit/s\n\
    Low cost, it usually needs no batteries\nAsset tracking, logistics, vehicle access\n\
    control\nWeightless-P\nLicense-exempt sub-GHz\n15 Km\n100 kbit/s\nLow power\n\
    IoT applications\nWi-Fi (IEEE\n802.11b/g/n/ac)\n2.4–5 GHz\n<150 m\nup to 433 Mbit/s\
    \ (one\nstream)\nHigh power (batteries usually last hours), high-speed,\nubiquity\n\
    Internet broadband access\nWi-Fi HaLow/IEEE 802.11ah\n868–915 MHz\n<1 km\n100\
    \ kbit/s per\nchannel\nLow power\nIoT applications\nWirelessHART\n2.4 GHz\n<10\
    \ m\n250 kbit/s\nCompatibility with the HART protocol\nIoT sensing applications\n\
    ZigBee\n868–915 MHz, 2.4 GHz\n<100 m\n20−250 kbit/s\nVery low power (batteries\
    \ last months to years), up to\n65,536 nodes\nWireless sensor network applications,\n\
    home automation and smart building\napplications\nAppl. Sci. 2019, 9, 4479\n14\
    \ of 24\nTable 3. Communications technologies of the most relevant smart campuses\
    \ solutions.\nReference\nSmart Campus\nCommunications\nTechnologies\nNetwork Planning\n\
    [32]\nNorthwestern Polytechnical\nUniversity\nWi-Fi, Bluetooth\nNo\n[33]\nBirmingham\
    \ City University\n-\nNo\n[35]\nUniversity of Washington\nBothell\nZigbee, BLE,\n\
    6LowPAN\nNo\n[36]\nUniversity of Business and\nTechnology of Birmingham\n-\nNo\n\
    [10]\nTennessee State University\n-\nNo\n[37]\nIMDEA Networks Institute\nWi-Fi,\
    \ Bluetooth\nNo\n[38]\nUniversity of Oradea\n4G, Zigbee\nNo\n[43]\n-\nMESH Wi-Fi\n\
    No\n[44]\n-\nWi-Fi\nNo\n[45]\n-\n3G/4G/5G, Wi-Fi\nNo\n[64]\nSmart CEI Moncloa\n\
    Wi-Fi, Ethernet\nNo\n[65]\nWuhan University of\nTechnology\nCable, wireless,\n\
    3G/4G\nNo\n[66]\nWest Texas A&M University\nLoRAWAN,\n4G/LTE\nNo\n[67]\nSapienza\
    \ smart campus\n-\nNo\n[68]\nWisdom Campus, Soochow\nUniversity\n-\nNo\n[69]\n\
    Indian Institute of Science\nsub-GHz radios\nNo\n[70]\nUniversity of A Coruña\n\
    LoRaWAN\nYes (based on 3D-ray launching)\n[154]\nUniversitas Indonesia\n800 MHz,\
    \ 2.3 GHz,\nand 38 GHz\nBased on ray-tracing and\nphysical optic near-to-far ﬁeld\n\
    6. Future Challenges\nDespite the evolution of smart campuses and universities\
    \ in the last years thanks to the\ntechnological advances achieved in ﬁelds like\
    \ IoT, cloud computing, and certain communications\nparadigms, future university\
    \ planners, IoT vendors, and developers will still face relevant challenges\n\
    in the following areas.\n•\nScalability. As a campus can cover a large area, where\
    \ a large number of users can request smart\nservices, it is essential for applications\
    \ to be easily scalable in order to adapt its performance to\nthe number of simultaneous\
    \ users.\n•\nService ﬂexibility. A smart campus/university should be able to provide\
    \ multiple services, which\nmay differ depending on the physical area where they\
    \ are provided (e.g., depending on the\nfaculty), on the speciﬁc user that request\
    \ them (e.g., access privileges may differ between a student\nand a professor),\
    \ or on the speciﬁc goal (e.g., advancing to more effective teaching and learning\n\
    services may differ substantially from the design of smart environment applications).\n\
    •\nLong-distance low-power communications. Since campuses usually cover areas\
    \ of thousands\nof square meters that often involve monitoring outdoor smart IoT\
    \ objects (e.g., street lights,\nirrigation systems), it is key to consider in\
    \ the smart campus architecture the use of long-distance\nAppl. Sci. 2019, 9,\
    \ 4479\n15 of 24\nwireless communications technologies whose energy consumption\
    \ should be as low as possible\nto maximize IoT node battery life.\n•\nNew communications\
    \ technologies. Although this article has analyzed the currently most relevant\n\
    communications technologies, smart campus designers should be aware of the latest\
    \ advances on\ncommunications in order to include them in the designed architecture.\
    \ For instance, some authors\nare already suggesting potential applications for\
    \ 6G technologies [155,156].\n•\nBlockchain integration. DLTs like blockchain\
    \ can be really useful to guarantee operational\nefﬁciency, data transparency,\
    \ authenticity, and security. This aspect is a key enabler to develop\nnovel decentralized\
    \ smart applications (i.e., DApps) and to leverage new artiﬁcial intelligence\n\
    paradigms such as big data, machine learning, or deep learning. These paradigms\
    \ need to rely\non trustworthy datasets in order to reach their full potential\
    \ and produce new data model-based\napplications.\nNevertheless, smart campus\
    \ designers have to use blockchain with caution,\nconsidering their advantages\
    \ and disadvantages. In addition, the incorrect use of smart contracts\ncan be\
    \ a problem, since they are able to trigger certain automatic behaviors that can\
    \ have serious\neconomic or personal consequences.\n•\nLack of smart campus standards\
    \ and public initiatives. Although, in the last years, smart city\ninitiatives\
    \ have proliferated worldwide, there are only a few speciﬁcally related to smart\
    \ campuses\nand universities. In addition, there is not a common framework for\
    \ designing or deploying them,\nso future developers will have to keep compatibility\
    \ and interoperability issues in mind.\n•\nSeamless integration of outdoor and\
    \ indoor smart campus applications.\nDue to their\ncommunications needs, outdoor\
    \ and indoor applications may differ in the underlying\ntechnologies, so it is\
    \ necessary to design architectures and devices that allow for switching between\n\
    communications transceivers. This means that, although the lower layers of the\
    \ communications\nprotocol may differ, the upper layers are compatible so that\
    \ they are able to provide seamless\ncommunications among users, IoT objects,\
    \ and the computing devices scattered throughout\na campus.\n7. Conclusions\n\
    This article examined how higher education can leverage the opportunities created\
    \ by the latest\nand most relevant IT technologies. After analyzing the basics\
    \ on smart campuses and universities, this\nwork has focused on studying the potential\
    \ of IoT, blockchain, and the most recent communications\narchitectures and paradigms\
    \ (e.g., fog/edge computing) for developing novel smart campus and\nsmart university\
    \ applications. In addition, the latest key deployments as well as their communications\n\
    technologies have been detailed and analyzed. Finally, the main future challenges\
    \ are listed in order to\nallow future university planners, IoT vendors, and developers\
    \ to create a roadmap for the design and\ndeployment of the next generation of\
    \ smart campuses and universities.\nAuthor Contributions: T.M.F.-C. and P.F.-L.\
    \ contributed to the overall review design, data collection and analysis,\nwriting\
    \ of the manuscript, and funding acquisition.\nFunding:\nThis work has been funded\
    \ by the Xunta de Galicia (ED431C 2016-045, ED431G/01), the Agencia\nEstatal de\
    \ Investigación of Spain (TEC2016-75067-C4-1-R) and ERDF funds of the EU (AEI/FEDER,\
    \ UE).\nConﬂicts of Interest: The authors declare no conﬂicts of interest.\nReferences\n\
    1.\nFernández-Caramés, T.M. An intelligent power outlet system for the smart home\
    \ of the Internet of Things.\nInt. J. Distrib. Sens. Netw. 2015, 11, 214805. [CrossRef]\
    \ [PubMed]\n2.\nBlanco-Novoa, O.; Fernández-Caramés, T.M.; Fraga-Lamas, P.; Castedo,\
    \ L. An Electricity Price-Aware\nOpen-Source Smart Socket for the Internet of\
    \ Energy. Sensors 2017, 17, 643. [CrossRef] [PubMed]\nAppl. Sci. 2019, 9, 4479\n\
    16 of 24\n3.\nHernández-Rojas, D.L.; Fernández-Caramés, T.M.; Fraga-Lamas, P.;\
    \ Escudero, C.J. Design and Practical\nEvaluation of a Family of Lightweight Protocols\
    \ for Heterogeneous Sensing through BLE Beacons in IoT\nTelemetry Applications.\
    \ Sensors 2018, 18, 57. [CrossRef] [PubMed]\n4.\nFroiz-Míguez, I.; Fernández-Caramés,\
    \ T.M.; Fraga-Lamas, P.; Castedo, L. Design, Implementation and\nPractical Evaluation\
    \ of an IoT Home Automation System for Fog Computing Applications Based on MQTT\n\
    and ZigBee-WiFi Sensor Nodes. Sensors 2018, 18, 2660. [CrossRef] [PubMed]\n5.\n\
    Berry College Ofﬁcial Web Page on Its Campus Extension. Available online: https://www.berry.edu/\n\
    eaglecam/learn/ (accessed on 22 September 2019).\n6.\nDuke University Ofﬁcial\
    \ Web Page on Its Campus Extension. Available online: https://today.duke.edu/\n\
    2011/11/onlinemaplaunch (accessed on 22 September 2019).\n7.\nStanford University\
    \ Web Page on the Extension of Its Lands. Available online: https://facts.stanford.edu/\n\
    about/lands/ (accessed on 22 September 2019).\n8.\nMuhamad, W.; Kurniawan, N.B.;\
    \ Suhardi, S.; Yazid, S. Smart campus features, technologies, and applications:\n\
    A systematic literature review. In Proceedings of the International Conference\
    \ on Information Technology\nSystems and Innovation (ICITSI), Bandung, Indonesia,\
    \ 23–24 October 2017.\n9.\nHeinemann, C.; Uskov, V.L. Smart University: Literature\
    \ Review and Creative Analysis. In Proceedings of\nthe International Conference\
    \ on Smart Education and Smart E-Learning, Vilamoura, Portugal, 21–23 June\n2017.\n\
    10.\nAlghamdi, A.; Shetty, S. Survey Toward a Smart Campus Using the Internet\
    \ of Things. In Proceedings of the\nIEEE 4th International Conference on Future\
    \ Internet of Things and Cloud (FiCloud), Vienna, Austria, 22–24\nAugust 2016.\n\
    11.\nKamišali´c, A.; Turkanovi´c, M.; Mrdovi´c, S.; Heriˇcko, M. A Preliminary\
    \ Review of Blockchain-Based Solutions\nin Higher Education. In Proceedings of\
    \ the International Workshop on Learning Technology for Education\nin Cloud, Zamora,\
    \ Spain, 15–19 April 2019.\n12.\nYumna, H.; Khan, M.M.; Ikram, M.; Ilyas, S. Use\
    \ of Blockchain in Education: A Systematic Literature Review.\nIn Proceedings\
    \ of the Asian Conference on Intelligent Information and Database Systems, Yogyakarta,\n\
    Indonesia, 8–11 April 2019.\n13.\nAlammary, A.; Alhazmi, S.; Almasri, M.; Gillani,\
    \ S. Blockchain-Based Applications in Education:\nA Systematic Review. Appl. Sci.\
    \ 2019, 9, 2400. [CrossRef]\n14.\nWilliams, P. Does competency-based education\
    \ with blockchain signal a new mission for universities? J. High.\nEduc. Policy\
    \ Manag. 2019, 41, 104–117. [CrossRef]\n15.\nJuriˇci´c, V.; Radoševi´c, M.; Fuzul,\
    \ E. Creating student’s proﬁle using blockchain technology. In Proceedings of\n\
    the 2019 42nd International Convention on Information and Communication Technology,\
    \ Electronics and\nMicroelectronics (MIPRO), Opatija, Croatia, 20–24 May 2019;\
    \ pp. 521–525.\n16.\nBates, O.; Friday, A. Beyond Data in the Smart City: Repurposing\
    \ Existing Campus IoT. IEEE Pervasive\nComput. 2017, 16, 54–60. [CrossRef]\n17.\n\
    Chen, X.; Jin, R.; Suh, K.; Wang, B.; Wei, W. Network performance of smart mobile\
    \ handhelds in a university\ncampus Wi-Fi network. In Proceedings of the 2012\
    \ Internet Measurement Conference, Boston, MA, USA,\n14–16 November 2012; pp.\
    \ 315–328.\n18.\nAtif, Y.; Mathew, S.S.; Lakas, A. Building a smart campus to\
    \ support ubiquitous learning. J. Ambient. Intell.\nHumaniz. Comput. 2015, 6,\
    \ 223–238. [CrossRef]\n19.\nHirsch, B.; Ng, J.W. Education beyond the cloud: Anytime-anywhere\
    \ learning in a smart campus\nenvironment. In Proceedings of the 2011 IEEE International\
    \ Conference for Internet Technology and\nSecured Transactions, Abu Dhabi, UAE,\
    \ 11–14 December 2011; pp. 718–723.\n20.\nBakken, J.P.; Uskov, V.L.; Penumatsa,\
    \ A.; Doddapaneni, A. Smart universities, smart classrooms and students\nwith\
    \ disabilities. In Smart Education and e-Learning; Springer: Cham, Switzerland,\
    \ 2016, pp. 15–27.\n21.\nKwok, L.F. A vision for the development of i-campus.\
    \ Smart Learn. Environ. 2015, 2, 1–12. [CrossRef]\n22.\nSmart Cities, Ranking\
    \ of European Medium-Size Cities; Vienna University of Technology: Vienna, Austria;\n\
    University of Ljubljana: Ljubljana, Slovenia; Delft University of Technology:\
    \ Delft, The Netherlands, 2007.\nAppl. Sci. 2019, 9, 4479\n17 of 24\n23.\nMattoni,\
    \ B.; Pagliaro, F.; Corona, G.; Ponzo, V.; Bisegna, F.; Gugliermetti, F.; Quintero-Núñez,\
    \ M. A matrix\napproach to identify and choose efﬁcient strategies to develop\
    \ the Smart Campus. In Proceedings of the\nIEEE 16th International Conference\
    \ on Environment and Electrical Engineering (EEEIC), Florence, Italy, 7–10\nJune\
    \ 2016.\n24.\nPompei, L.; Mattoni, B.; Bisegna, F.; Nardecchia, F.; Fichera, A.;\
    \ Gagliano, A.; Pagano, A. Composite\nIndicators for Smart Campus: Data Analysis\
    \ Method. In Proceedings of the IEEE International Conference\non Environment\
    \ and Electrical Engineering and the IEEE Industrial and Commercial Power Systems\
    \ Europe,\nPalermo, Italy, 12–15 June 2018.\n25.\nFernández-Caramés, T.M.; Fraga-Lamas,\
    \ P. A Review on Human-Centered IoT-Connected Smart Labels for\nthe Industry 4.0.\
    \ IEEE Access 2018, 6, 25939–25957. [CrossRef]\n26.\nBlanco-Novoa, O.; Fernández-Caramés,\
    \ T.M.; Fraga-Lamas, P.; Vilar-Montesinos, M.A. A Practical Evaluation\nof Commercial\
    \ Industrial Augmented Reality Systems in an Industry 4.0 Shipyard. IEEE Access\
    \ 2018,\n6, 8201–8218. [CrossRef]\n27.\nFraga-Lamas, P.; Fernández-Caramés, T.M.;\
    \ Blanco-Novoa, O.; Vilar-Montesinos, M.A. A Review on\nIndustrial Augmented Reality\
    \ Systems for the Industry 4.0 Shipyard. IEEE Access 2018, 6, 13358–13375.\n[CrossRef]\n\
    28.\nFernández-Caramés, T.M.; Fraga-Lamas, P.; Suárez-Albela, M.; Castedo, L.;\
    \ Albela, M.; Castedo, L. A\nmethodology for evaluating security in commercial\
    \ RFID systems. In Radio Frequency Identiﬁcation; Crepaldi,\nP.C., Pimenta, T.C.,\
    \ Eds.; IntechOpen: London, UK, 2017.\n29.\nHernández-Rojas, D.; Fernández-Caramés,\
    \ T.M.; Fraga-Lamas, P.; Escudero, C.\nA Plug-and-Play\nHuman-Centered Virtual\
    \ TEDS Architecture for the Web of Things.\nSensors 2018, 18, 2052. [CrossRef]\n\
    [PubMed]\n30.\nBlanco-Novoa, O.; Fernández-Caramés, T.M.; Fraga-Lamas, P.; Castedo,\
    \ L. A Cost-Effective IoT System for\nMonitoring Indoor Radon Gas Concentration.\
    \ Sensors 2018, 18, 2198. [CrossRef] [PubMed]\n31.\nPérez-Expósito, J.; Fernández-Caramés,\
    \ T.M.; Fraga-Lamas, P.; Castedo, L.\nVineSens: An Eco-Smart\nDecision-Support\
    \ Viticulture System. Sensors 2017, 17, 465. [CrossRef]\n32.\nYu, Z.; Liang, Y.;\
    \ Xu, B.; Yang, Y.; Guo, B. Towards a Smart Campus with Mobile Social Networking.\n\
    In Proceedings of the International Conference on Internet of Things and 4th International\
    \ Conference on\nCyber, Physical and Social Computing, Dalian, China, 19–22 October\
    \ 2011.\n33.\nHipwell, S. Developing smart campuses—A working model. In Proceedings\
    \ of the International Conference\non Intelligent Green Building and Smart Grid\
    \ (IGBSG), Taipei, Taiwan, 23–25 April 2014.\n34.\nCao, J.; Li, Z.; Luo, Q.; Hao,\
    \ Q.; Jiang, T. Research on the Construction of Smart University Campus Based\
    \ on\nBig Data and Cloud Computing. In Proceedings of the International Conference\
    \ on Engineering Simulation\nand Intelligent Control (ESAIC), Changsha, China,\
    \ 10–11 August 2018.\n35.\nHaghi, A.; Burney, K.; Kidd, F.S.; Valiente, L.; Peng,\
    \ Y. Fast-paced development of a smart campus IoT\nplatform. In Proceedings of\
    \ the Global Internet of Things Summit, Geneva, Switzerland, 6–9 June 2017.\n\
    36.\nMajeed, A.; Ali, M. How Internet-of-Things (IoT) making the university campuses\
    \ smart? QA higher\neducation (QAHE) perspective. In Proceedings of the IEEE 8th\
    \ Annual Computing and Communication\nWorkshop and Conference (CCWC), Las Vegas,\
    \ NV, USA, 8–10 January 2018.\n37.\nAli, S.; Rizzo, G.; Mancuso, V.; Marsan, M.A.\
    \ Persistence and availability of ﬂoating content in a campus\nenvironment. In\
    \ Proceedings of the IEEE Conference on Computer Communications, Kowloon, Hong\
    \ Kong,\nChina, 26 April–1 May 2015.\n38.\nPopescu, D.E.; Prada, M.F.; Dodescu,\
    \ A.; Hemanth, D.J.; Bungau, C. A secure conﬁdent cloud computing\narchitecture\
    \ solution for a smart campus. In Proceedings of the 7th International Conference\
    \ on Computers\nCommunications and Control (ICCCC), Oradea, Romania, 8–12 May\
    \ 2018.\n39.\nSuárez-Albela, M.; Fernández-Caramés, T.; Fraga-Lamas, P.; Castedo,\
    \ L. A Practical Evaluation of a\nHigh-Security Energy-Efﬁcient Gateway for IoT\
    \ Fog Computing Applications.\nSensors 2017, 17, 1978.\n[CrossRef]\n40.\nFernández-Caramés,\
    \ T.M.; Fraga-Lamas, P.; Suárez-Albela, M.; Vilar-Montesinos, M. A Fog Computing\
    \ and\nCloudlet Based Augmented Reality System for the Industry 4.0 Shipyard.\
    \ Sensors 2018, 18, 1798. [CrossRef]\n41.\nFernández-Caramés, T.M.; Fraga-Lamas,\
    \ P.; Suárez-Albela, M.; Díaz-Bouza, M.A. A Fog Computing Based\nCyber-Physical\
    \ System for the Automation of Pipe-Related Tasks in the Industry 4.0 Shipyard.\
    \ Sensors 2018,\n18, 1961. [CrossRef]\nAppl. Sci. 2019, 9, 4479\n18 of 24\n42.\n\
    Xu, Q.; Su, Z.; Wang, Y.; Dai, M. A Trustworthy Content Caching and Bandwidth\
    \ Allocation Scheme With\nEdge Computing for Smart Campus. IEEE Access 2018, 6.\
    \ [CrossRef]\n43.\nChang, Y.; Lai, Y. Campus Edge Computing Network Based on IoT\
    \ Street Lighting Nodes. IEEE Syst. J. 2018.\n[CrossRef]\n44.\nLiu, Y.; Shou,\
    \ G.; Hu, Y.; Guo, Z.; Li, H.; Beijing, F.P.; Seah, H.S. Towards a smart campus:\
    \ Innovative\napplications with WiCloud platform based on mobile edge computing.\n\
    In Proceedings of the 12th\nInternational Conference on Computer Science and Education\
    \ (ICCSE), Houston, TX, USA, 22–25\nAugust 2017.\n45.\nAgate, V.; Concone, F.;\
    \ Ferraro, P. WiP: Smart Services for an Augmented Campus. In Proceedings of the\n\
    IEEE International Conference on Smart Computing (SMARTCOMP), Taormina, Italy,\
    \ 18–20 July 2018.\n46.\nGrech, A.; Camilleri, A.F.\nBlockchain in Education.\n\
    In JCR Science for Policy Report; Inamorato dos\nSantos, A., Ed.; Publications\
    \ Ofﬁce of the European Union, EUR 28778 EN: Luxembourg, 2017. [CrossRef]\n47.\n\
    Fernández-Caramés, T.M.; Fraga-Lamas, P. A Review on the Use of Blockchain for\
    \ the Internet of Things.\nIEEE Access 2018, 6, 32979–33001. [CrossRef]\n48.\n\
    Christidis, K., Devetsikiotis, M. Blockchains and Smart Contracts for the Internet\
    \ of Things. IEEE Access\n2016, 4, 32292–32303. [CrossRef]\n49.\nEthereum Ofﬁcial\
    \ Web Page. Available online: https://www.ethereum.org (accessed on 22 September\
    \ 2019).\n50.\nHyperledger-Fabric Ofﬁcial Web Page. Available online: https://www.hyperledger.org/projects/fabric\n\
    (accessed 22 September 2019).\n51.\nNakamoto, S. Bitcoin: A Peer-to-Peer Electronic\
    \ Cash System. Available online: https://bitcoin.org/bitcoin.\npdf (accessed on\
    \ 22 September 2019).\n52.\nFernández-Caramés, T.M.; Froiz-Míguez, I.; Blanco-Novoa,\
    \ O.; Fraga-Lamas, P. Enabling the Internet of\nMobile Crowdsourcing Health Things:\
    \ A Mobile Fog Computing, Blockchain and IoT Based Continuous\nGlucose Monitoring\
    \ System for Diabetes Mellitus Research and Care. Sensors 2019, 19, 3319. [CrossRef]\n\
    [PubMed]\n53.\nFernández-Caramés, T.M.; Blanco-Novoa, O.; Froiz-Míguez, I.; Fraga-Lamas,\
    \ P. Towards an Autonomous\nIndustry 4.0 Warehouse: A UAV and Blockchain-Based\
    \ System for Inventory and Traceability Applications\nin Big Data-Driven Supply\
    \ Chain Management. Sensors 2019, 19, 2394. [CrossRef] [PubMed]\n54.\nFraga-Lamas,\
    \ P.; Fernández-Caramés, T.M. A Review on Blockchain Technologies for an Advanced\
    \ and\nCyber-Resilient Automotive Industry. IEEE Access 2019, 7, 17578–17598.\
    \ [CrossRef]\n55.\nFernández-Caramés, T.M.; Fraga-Lamas, P. A Review on the Application\
    \ of Blockchain for the Next\nGeneration of Cybersecure Industry 4.0 Smart Factories.\
    \ IEEE Access 2019, 7, 45201–45218. [CrossRef]\n56.\nLo, S.K.; Xu, X.; Chiam,\
    \ Y.K.; Lu, Q. Evaluating Suitability of Applying Blockchain. In Proceedings of\
    \ the\n22nd International Conference on Engineering of Complex Computer Systems\
    \ (ICECCS), Fukuoka, Japan,\n5-8 November 2017; pp. 158–161.\n57.\nHan, M.; Li,\
    \ Z.; He, J.S.; Wu, D.; Xie, Y.; Baba, A. A Novel Blockchain-based Education Records\
    \ Veriﬁcation\nSolution.\nIn Proceedings of the 19th Annual SIG Conference on\
    \ Information Technology Education,\nFort Lauderdale, FL, USA, 3–6 October 2018.\n\
    58.\nLiu, Q.; Guan, Q.; Yang, X.; Zhu, H.; Green, G.; Yin, S. Education-Industry\
    \ Cooperative System Based on\nBlockchain. In Proceedings of the 1st IEEE International\
    \ Conference on Hot Information-Centric Networking,\nShenzhen, China, 15–17 August\
    \ 2018.\n59.\nHori, M.; Ono, S.; Miyashita, K.; Kobayashi, S.; Miyahara, H.; Kita,\
    \ T.; Yamada, T.; Yamaji, K. Learning\nSystem based on Decentralized Learning\
    \ Model using Blockchain and SNS. In Proceedings of the 2018 10th\nInternational\
    \ Conference on Computer Supported Education, Funchal, Portugal, 15–17 March 2018.\n\
    60.\nWu, B.; Li, Y. Design of Evaluation System for Digital Education Operational\
    \ Skill Competition Based on\nBlockchain. In Proceedings of the IEEE 15th International\
    \ Conference on e-Business Engineering (ICEBE),\nXi’an, China, 12–14 October 2018.\n\
    61.\nLizcano, D.; Lara, J.A.; White, B.; Aljawarneh, S. Blockchain-based approach\
    \ to create a model of trust in\nopen and ubiquitous higher education. J. Comput.\
    \ High. Educ. 2019. [CrossRef]\n62.\nZhong, J.; Xie, H.; Zou, D.; Chui, D.K. A\
    \ Blockchain Model for Word-Learning Systems. In Proceedings\nof the 5th International\
    \ Conference on Behavioral, Economic, and Socio-Cultural Computing, Kaohsiung,\n\
    Taiwan, 12–14 November 2018.\nAppl. Sci. 2019, 9, 4479\n19 of 24\n63.\nVerstaevel,\
    \ N.; Boes, J.; Gleizes, M. From smart campus to smart cities issues of the smart\
    \ revolution.\nIn Proceedings of the IEEE SmartWorld, Ubiquitous Intelligence\
    \ & Computing, Advanced & Trusted\nComputed, Scalable Computing & Communications,\
    \ Cloud & Big Data Computing, Internet of People and\nSmart City Innovation, San\
    \ Francisco, CA, USA, 4–8 August 2017.\n64.\nAlvarez-Campana, M.; López, G.; Vázquez,\
    \ E.; Villagrá, V.A.; Berrocal, J. Smart CEI Moncloa: An IoT-based\nPlatform for\
    \ People Flow and Environmental Monitoring on a Smart University Campus. Sensors\
    \ 2017, 17,\n2856. [CrossRef]\n65.\nGuo, M.; Zhang, Y. The research of smart campus\
    \ based on Internet of Things & cloud computing.\nIn Proceedings of the 11th International\
    \ Conference on Wireless Communications, Networking and Mobile\nComputing (WiCOM\
    \ 2015), Shanghai, China, 21–23 September 2015.\n66.\nWebb, J.; Hume, D. Campus\
    \ IoT collaboration and governance using the NIST cybersecurity framework.\nIn\
    \ Proceedings of the Living in the Internet of Things: Cybersecurity of the IoT,\
    \ London, UK, 28–29 March\n2018.\n67.\nPagliaro F.; Mattoni, B.; Gugliermenti,\
    \ F.; Bisegna, F.; Azzaro, B.; Tomei, F.; Catucci, S. A roadmap toward\nthe development\
    \ of Sapienza Smart Campus. In Proceedings of the IEEE 16th International Conference\
    \ on\nEnvironment and Electrical Engineering (EEEIC), Florence, Italy, 7–10 June\
    \ 2016.\n68.\nHengliang, T.; Chuanrong, C. The Construction of Intelligent Transportation\
    \ System Based on the\nConstruction of Wisdom Campus—Take Soochow University as\
    \ an Example. In Proceedings of the Eighth\nInternational Conference on Measuring\
    \ Technology and Mechatronics Automation (ICMTMA), Macau,\nChina, 11–12 March\
    \ 2016.\n69.\nVerma, P.; Kumar, A.; Rathod, N.; Jain, P.; Mallikarjun, S.; Subramanian,\
    \ R.; Amrutur, B.; Kumar, M.S.M.;\nSundaresan, R. Towards an IoT based water management\
    \ system for a campus. In Proceedings of the IEEE\nFirst International Smart Cities\
    \ Conference (ISC2), Guadalajara, Mexico, 25–28 October 2015.\n70.\nFraga-Lamas,\
    \ P.; Celaya-Echarri, M.; Lopez-Iturri, P.; Castedo, L.; Azpilicueta, L.; Aguirre,\
    \ E.;\nSuárez-Albela, M.; Falcone, F.; Fernández-Caramés, T.M. Design and Experimental\
    \ Validation of a LoRaWAN\nFog Computing Based Architecture for IoT Enabled Smart\
    \ Campus Applications. Sensors 2019, 19, 3287.\n[CrossRef]\n71.\nFernández-Caramés,\
    \ T.M.; González-López, M.; Castedo, L. FPGA-based vehicular channel emulator\
    \ for\nreal-time performance evaluation of IEEE 802.11 p transceivers. EURASIP\
    \ J. Wirel. Commun. Netw. 2010,\n1, 2010.\n72.\nFernández-Caramés, T.M.; González-López,\
    \ M.; Castedo, L. FPGA-based vehicular channel emulator for\nevaluation of IEEE\
    \ 802.11 p transceivers. In Proceedings of the International Conference on Intelligent\n\
    Transport Systems Telecommunications, Lille, France, 20–22 October 2009.\n73.\n\
    Bandara, H.M.A.P.K.; Jayalath, J.D.C.; Rodrigo, A.R.S.P.; Bandaranayake, A.U.;\
    \ Maraikar, Z.; Ragel, R.G.\nSmart campus phase one: Smart parking sensor network.\
    \ In Proceedings of Manufacturing & Industrial\nEngineering Symposium (MIES),\
    \ Colombo, Sri Lanka, 22 October 2016.\n74.\nBrenna, M.; Foiadelli, F.; Longo,\
    \ M.; Bracco, S.; Delﬁno, F. Sustainable electric mobility analysis in the\nSavona\
    \ Campus of the University of Genoa. In Proceedings of the IEEE 16th International\
    \ Conference on\nEnvironment and Electrical Engineering (EEEIC), Florence, Italy,\
    \ 7–10 June 2016.\n75.\nBracco, S.; Brenna, M.; Delfmo, F.; Foiadelli, F.; Longo,\
    \ M. Preliminary study on electric mobility applied to a\nUniversity Campus in\
    \ North Italy. In Proceedings of the 6th International Conference on Clean Electrical\n\
    Power (ICCEP), Santa Margherita Ligure, Italy, 27–29 June 2017.\n76.\nYagcitekin,\
    \ B.; Uzunoglu, M.; Ocal, B.; Turan, E.; Tunc, A. Development of Smart Charging\
    \ Strategies for\nElectric Vehicles in a Campus Area. In Proceedings of the European\
    \ Modelling Symposium, Manchester, UK,\n20–22 November 2013.\n77.\nBásaca-Preciado,\
    \ L.C.; Orozco-Garcia, N.A.; Terrazas-Gaynor, J.M.; Moreno-Partida, A.S.; Rosete-Beas,\
    \ O.A.;\nRizzo-Aguirre, J.; Martinez-Grijalva, L.F.; Ponce-Camacho, M.A. Intelligent\
    \ Transportation Scheme for\nAutonomous Vehicle in Smart Campus. In Proceedings\
    \ of the 44th Annual Conference of the IEEE Industrial\nElectronics Society, Washington,\
    \ DC, USA, 21–23 October 2018.\n78.\nChit, S.M.; Chaw, L.Y.; Thong, C.L.; Lee,\
    \ C.Y. A pilot study: Shuttle bus tracker app for campus users.\nIn Proceedings\
    \ of the International Conference on Research and Innovation in Information Systems\
    \ (ICRIIS),\nLangkawi, Malaysia, 10 August 2017.\nAppl. Sci. 2019, 9, 4479\n20\
    \ of 24\n79.\nFeng, X.; Zhang, J.; Chen, J.; Wang, G.; Zhang, L.; Li, R. Design\
    \ of Intelligent Bus Positioning Based on\nInternet of Things for Smart Campus.\
    \ IEEE Access 2018, 6, 60005–60015. [CrossRef]\n80.\nMorales González, R.; van\
    \ Goch, T.A.J.; Aslam, M.F.; Blanch, A.; Ribeiro, P.F. Microgrid design considerations\n\
    for a smart-energy university campus. In Proceedings of the IEEE PES Innovative\
    \ Smart Grid Technologies,\nEurope, Istanbul, Turkey, 12–15 October 2014.\n81.\n\
    Talei, H.; Zizi, B.; Abid, M.R.; Essaaidi, M.; Benhaddou, D.; Khalil, N. Smart\
    \ campus microgrid: Advantages\nand the main architectural components. In Proceedings\
    \ of the 3rd International Renewable and Sustainable\nEnergy Conference (IRSEC),\
    \ Marrakech, Morocco, 10–13 December 2015.\n82.\nBracco, S.; Delﬁno, F.; Laiolo,\
    \ P.; Rossi, M. The Smart City Energy infrastructures at the Savona Campus of\n\
    the University of Genoa. In Proceedings of the AEIT International Annual Conference\
    \ (AEIT), Capri, Italy,\n5–7 October 2016.\n83.\nMakkonen, H.; Lassila, J.; Tikka,\
    \ V.; Partanen, J.; Kaipia, T.; Silventoinen, P. Implementation of Smart Grid\n\
    environment in Green Campus project. In Proceedings of the CIRED Workshop: Integration\
    \ of Renewables\ninto the Distribution Grid, Lisbon, Portugal, 29–30 May 2012.\n\
    84.\nSharma, H.; Kaur, G. Optimization and simulation of smart grid distributed\
    \ generation: A case study\nof university campus. In Proceedings of the IEEE Smart\
    \ Energy Grid Engineering (SEGE), Oshawa, ON,\nCanada, 21–24 August 2016.\n85.\n\
    Lazaroiu, G.C.; Dumbrava, V.; Costoiu, M.; Teliceanu, M.; Roscia, M. Smart campus-an\
    \ energy integrated\napproach. In Proceedings of the International Conference\
    \ on Renewable Energy Research and Applications\n(ICRERA), Palermo, Italy, 22–25\
    \ November 2015.\n86.\nKarunaratne, P.; Moshtaghi, M.; Karunasekera, S.; Harwood,\
    \ A. PSF+—Fast and improved electricity\nconsumption prediction in campus environments.\
    \ In Proceedings of the IEEE International Conference on\nSmart Grid Communications\
    \ (SmartGridComm), Dresden, Germany, 23–27 October 2017.\n87.\nPagliaro, F.; Mattoni,\
    \ B.; Ponzo, G.; Corona, V.; Nardecchia, F.; Bisegna, F.; Gugliermetti, F. Sapienza\
    \ smart\ncampus: From the matrix approach to the applicative analysis of an optimized\
    \ garbage collection system.\nIn Proceedings of the IEEE International Conference\
    \ on Environment and Electrical Engineering and the\nIEEE Industrial and Commercial\
    \ Power Systems Europe, Milan, Italy, 6–9 June 2017.\n88.\nLiu, R.; Kuo, C.; Yang,\
    \ C.; Chen, S.; Liu, J. On Construction of an Energy Monitoring Service Using\
    \ Big Data\nTechnology for Smart Campus. In Proceedings of the 7th International\
    \ Conference on Cloud Computing and\nBig Data (CCBD), Macau, China, 16–18 November\
    \ 2016.\n89.\nLazaroiu, G.C.; Dumbrava, V.; Costoiu, M.; Teliceanu, M.; Roscia,\
    \ M. Energy-informatic-centric smart campus.\nIn Proceedings of the IEEE 16th\
    \ International Conference on Environment and Electrical Engineering (EEEIC),\n\
    Florence, Italy, 7–10 June 2016.\n90.\nLiang, T.; Tsai, C. Application of Intelligent\
    \ Monitoring System in Campus Greenhouse. In Proceedings of\nthe International\
    \ Conference on Information, Communication and Engineering (ICICE), Xiamen, China,\n\
    17–20 November 2017.\n91.\nPetrie, C.; Gupta, S.; Rao, V.; Nutter, B. Energy Efﬁcient\
    \ Control Methods of HVAC Systems for Smart\nCampus. In Proceedings of the IEEE\
    \ Green Technologies Conference (GreenTech), Austin, TX, USA, 4–6\nApril 2018.\n\
    92.\nLu, J.; Xu, X.; Li, X.; Li, L.; Chang, C.-C.; Feng, X.; Zhang, S. Detection\
    \ of Bird’s Nest in High Power Lines in\nthe Vicinity of Remote Campus Based on\
    \ Combination Features and Cascade Classiﬁer. IEEE Access 2018, 6,\n39063–39071.\
    \ [CrossRef]\n93.\nPérez, L.E.; Pardiñas-Mir, J.A.; Guerra, O.; de la Mora, J.;\
    \ Pimienta, M.; Hernández, N.; de Atocha Lopez, M.\nA wireless sensor network\
    \ system: For monitoring trees’ health related parameters in a university campus.\n\
    In Proceedings of the 12th International Joint Conference on e-Business and Telecommunications\
    \ (ICETE),\nColmar, France, 20–22 July 2015.\n94.\nBacanli, S.S.; Solmaz, G.;\
    \ Turgut, D. Opportunistic Message Broadcasting in Campus Environments.\nIn Proceedings\
    \ of the IEEE Global Communications Conference (GLOBECOM), San Diego, CA, USA,\n\
    6–10 December 2015.\n95.\nKadadha, M.; Al-Ali, H.; Mufti, M.A.; Al-Aamri, A.;\
    \ Mizouni, R. Opportunistic mobile social networks:\nChallenges survey and application\
    \ in smart campus.\nIn Proceedings of the IEEE 12th International\nConference\
    \ on Wireless and Mobile Computing, Networking and Communications (WiMob), New\
    \ York, NY,\nUSA, 17–19 October 2016.\nAppl. Sci. 2019, 9, 4479\n21 of 24\n96.\n\
    Zhang, S.; Li, X. Mobility patterns of human population among university campuses.\
    \ In Proceedings of the\nIEEE Asia Paciﬁc Conference on Circuits and Systems,\
    \ Jeju, Korea, 25–28 October 2016.\n97.\nMiao, C.; Zhu, X.; Miao, J. The analysis\
    \ of student grades based on collected data of their Wi-Fi behaviors on\ncampus.\
    \ In Proceedings of the IEEE International Conference on Computer and Communications\
    \ (ICCC),\nChengdu, China, 14–17 October 2016.\n98.\nConcone, F.; Ferraro, P.;\
    \ Lo Re, G. Towards a Smart Campus Through Participatory Sensing. In Proceedings\n\
    of the IEEE International Conference on Smart Computing (SMARTCOMP), Taormina,\
    \ Italy, 18–20 June 2018.\n99.\nFernández-Caramés, T.M.; Fraga-Lamas, P Towards\
    \ The Internet of Smart Clothing: A Review on IoT\nWearables and Garments for\
    \ Creating Intelligent Connected E-Textiles. Electronics 2018, 7, 405. [CrossRef]\n\
    100. Bilgi, S.; Ozturk, O.; Gulnerman, A.G. Navigation system for blind, hearing\
    \ and visually impaired people\nin ITU Ayazaga campus. In Proceedings of the International\
    \ Conference on Computing Networking and\nInformatics (ICCNI), Lagos, Nigeria,\
    \ 29–31 October 2017.\n101. Li, D.; Liu, M.; Zhang, J.; Cheng, E. An Improved\
    \ A* Algorithm Applicable for Campus Navigation System.\nIn Proceedings of the\
    \ International Conference on Network and Information Systems for Computers, Wuhan,\n\
    China, 23–25 January 2015.\n102. Yong, Q.; Cheng, B.; Xing, Y. A Novel Quantum\
    \ Ant Colony Algorithm Used for Campus Path.\nIn Proceedings of the IEEE International\
    \ Conference on Computational Science and Engineering (CSE)\nand IEEE International\
    \ Conference on Embedded and Ubiquitous Computing (EUC), Guangzhou, China,\n21–24\
    \ July 2017.\n103. Tarng, W.; Ou, K. A Study of Campus Butterﬂy Ecology Learning\
    \ System Based on Augmented Reality and\nMobile Learning. In Proceedings of the\
    \ IEEE Seventh International Conference on Wireless, Mobile and\nUbiquitous Technology\
    \ in Education, Takamatsu, Japan, 27–30 March 2012.\n104. Yu, K.; Chiu, J.; Lee,\
    \ M.; Chi, S. A mobile application for an ecological campus navigation system\
    \ using\naugmented reality. In Proceedings of the 8th International Conference\
    \ on Ubi-Media Computing (UMEDIA),\nColombo, Sri Lanka, 24–26 August 2015.\n105.\
    \ Özcan, U.; Arslan, A.; ˙Ilkyaz, M.; Karaarslan, E. An augmented reality application\
    \ for smart campus\nurbanization: MSKU campus prototype. In Proceedings of the\
    \ 5th International Istanbul Smart Grid and\nCities Congress and Fair (ICSG),\
    \ Istanbul, Turkey, 19–21 April 2017.\n106. Sutjarittham, T.; Gharakheili, H.H.;\
    \ Kanhere, S.S.; Sivaraman, V. Data-Driven Monitoring and Optimization\nof Classroom\
    \ Usage in a Smart Campus. In Proceedings of the 17th ACM/IEEE International Conference\
    \ on\nInformation Processing in Sensor Networks (IPSN), Porto, Portugal, 11–13\
    \ April 2018.\n107. Rudin, A.R.A.; Audah, L.; Jamil, A.; Abdullah, J. Occupancy\
    \ monitoring system for campus sports facilities\nusing the Internet of Things\
    \ (IoT). In Proceedings of the IEEE Conference on Wireless Sensors (ICWiSE),\n\
    Langkawi, Malaysia, 10–12 October 2016.\n108. Liang, Y.; Chen, Z. Intelligent\
    \ and Real-Time Data Acquisition for Medical Monitoring in Smart Campus.\nIEEE\
    \ Access 2018, 6, 74836–74846. [CrossRef]\n109. Gjoreski, M.; Gjoreski, H.; Lutrek,\
    \ M.; Gams, M. Automatic Detection of Perceived Stress in Campus Students\nUsing\
    \ Smartphones. In Proceedings of the International Conference on Intelligent Environments,\
    \ Prague,\nCzech Republic, 15-17 July 2015.\n110. Ueda, T.; Ikeda, Y. Socio-economics\
    \ and educational case study with cost-effective IoT campus by the use\nof wearable,\
    \ tablet, cloud and open E-learning services. In Proceedings of the 2017 ITU Kaleidoscope:\n\
    Challenges for a Data-Driven Society (ITU K), Nanjing, China, 27–29 November 2017;\
    \ pp. 1–8.\n111. Yang, C.-H. On the design of campus-wide multi-purpose smart\
    \ card systems. In Proceedings of the IEEE\n33rd Annual International Carnahan\
    \ Conference on Security Technology, Madrid, Spain, 5–7 October 1999.\n112. Halawani,\
    \ T.; Mohandes, M. Smart card for smart campus: KFUPM case study. In Proceedings\
    \ of the IEEE\nInternational Conference on Electronics, Circuits and Systems,\
    \ Sharjah, UAE, 14–17 December 2003.\n113. Peng, H. Research on the Integration\
    \ Interface Techniques for Library Management System and Campus\nSmart Card System.\
    \ In Proceedings of the International Workshop on Intelligent Systems and Applications,\n\
    Wuhan, China, 23–24 May 2009.\n114. Du, Z.; Tang, Y. Web-based multi-level smart\
    \ card access control system on university campus. In Proceedings\nof the IEEE\
    \ 5th International Conference on Software Engineering and Service Science, Beijing,\
    \ China, 27–29\nJune 2014.\nAppl. Sci. 2019, 9, 4479\n22 of 24\n115. Wang, X.;\
    \ Liu, N.; Liu, Y.; Sun, Y. NFC mobile Intelligent Campus construction of Nanjing\
    \ University of\nFinance and Economics. In Proceedings of the International Conference\
    \ on Behavioral, Economic and\nSocio-cultural Computing (BESC), Nanjing, China,\
    \ 30 October–1 November 2015.\n116. Jiang, T.; Cao, J.; Su, D.; Yang, X. Analysis\
    \ and Data Mining of Students’ Consumption Behavior Based\non a Campus Card System.\
    \ In Proceedings of the International Conference on Smart City and Systems\nEngineering\
    \ (ICSCSE), Changsha, China, 11–12 November 2017.\n117. Wang, B.; Deng, K.; Wei,\
    \ W.; Zhang, S.; Zhou, W.; Yu, S. Full Cycle Campus Life of College Students:\
    \ A Big\nData Case in China. In Proceedings of the IEEE International Conference\
    \ on Big Data and Smart Computing\n(BigComp), Shanghai, China, 15–17 June 2018.\n\
    118. Wang, M.; Ng, J.W.P. Intelligent Mobile Cloud Education: Smart Anytime-Anywhere\
    \ Learning for the\nNext Generation Campus Environment. In Proceedings of the\
    \ 8th International Conference on Intelligent\nEnvironments (IE), Guanajato, Mexico,\
    \ 26–29 June 2012.\n119. Aldowah, H.; Rehman, S.U.; Ghazal, S.; Umar, I.N. Internet\
    \ of Things in higher education: A study on future\nlearning. J. Phys. Conf. Ser.\
    \ 2017, 892, 1. [CrossRef]\n120. Coccoli, M.; Guercio, A.; Maresca, P.; Stanganelli,\
    \ L. Smarter universities: A vision for the fast changing\ndigital era. J. Vis.\
    \ Lang. Comput. 2014, 25, 1003–1011. [CrossRef]\n121. Adamko, A.; Kódek, T.; Kollár,\
    \ L.; Kosa, M.; Tóth, R. Cluster and discover services in the Smart Campus\nplatform\
    \ for online programming contests. In Proceedings of the 6th IEEE International\
    \ Conference on\nCognitive Infocommunications (CogInfoCom), Gyor, Hungary, 19–21\
    \ October 2015.\n122. Xu, X.; Li, D.; Sun, M.; Yang, S.; Yu, S.; Manogaran, G.;\
    \ Mastorakis, G.; Mavromoustakis, C.X. Research on\nKey Technologies of Smart\
    \ Campus Teaching Platform Based on 5G Network. IEEE Access 2019, 7. [CrossRef]\n\
    123. Zhamanov, A.; Sakhiyeva, Z.; Suliyev, R.; Kaldykulova, Z. IoT smart campus\
    \ review and implementation of\nIoT applications into education process of university.\
    \ In Proceedings of the 13th International Conference on\nElectronics, Computer\
    \ and Computation (ICECCO), Abuja, Nigeria, 28–29 November 2017.\n124. Uskov,\
    \ V.L.; Bakken, J.P.; Howlett, R.J.; Jain, L.C. Smart Universities: Concepts,\
    \ Systems and Technologies;\nSpringer: Cham, Switzerland, 2017; pp. 49–86,\n125.\
    \ Adamkó, A.; Kãdek, T.; Kósa, M. Intelligent and adaptive services for a smart\
    \ campus. In Proceedings of\nthe 2014 5th IEEE Conference on Cognitive Infocommunications\
    \ (CogInfoCom), Vietri sul Mare, Italy, 5–7\nNovember 2014; pp. 505–509.\n126.\
    \ Prandi, C.; Monti, L.; Ceccarini, C.; Salomoni, P. Smart Campus: Fostering the\
    \ Community Awareness\nThrough an Intelligent Environment. Mobile Netw. Appl.\
    \ 2019, 1–8. [CrossRef]\n127. Prandi, C.; Ceccarini, C.; Salomoni, P. Augmenting\
    \ Good Behaviour: Mixing Digital and Reality to Promote\nSustainability in a Campus\
    \ Community. In Proceedings of the 5th EAI International Conference on Smart\n\
    Objects and Technologies for Social Good, Valencia, Spain, 25–27 September 2019;\
    \ pp. 189–194.\n128. Prandi, C.; Nisi, V.; Nunes, N. On Exploring a Pervasive\
    \ Infrastructure to Foster Citizens Participation\nand Sustainable Development,\
    \ In Proceedings of the 32nd International BCS Human Computer Interaction\nConference\
    \ (HCI), Belfast, UK, 4–6 July 2018.\n129. Kbar, G.; Aly, S.; Alhanaﬁ, B. Smart\
    \ and Context Aware Search for University Campus (SCASUC).\nIn Proceedings of\
    \ the International Conference on Multimedia Computing and Systems, Tangier, Morocco,\n\
    10–12 May 2012.\n130. Petcovici, A.; Stroulia, E. Location-based services on a\
    \ smart campus: A system and a study. In Proceedings\nof the IEEE 3rd World Forum\
    \ on Internet of Things (WF-IoT), Reston, VA, USA, 12–14 December 2016.\n131.\
    \ Zhe, H.; Xiaojun, W.; Qiang, W. Research on Campus Information Service Platform\
    \ Based on Locating System\nof Campus Wireless LAN. In Proceedings of the International\
    \ Conference on Smart Grid and Electrical\nAutomation (ICSGEA), Changsha, China,\
    \ 27–28 May 2017.\n132. Yang, A.; Li, S.; Ren, C.; Liu, H.; Han, Y.; Liu, L. Situational\
    \ Awareness System in the Smart Campus. IEEE\nAccess 2018, 6, 63976–63986. [CrossRef]\n\
    133. Zhang, J. Spatio-Temporal Association Query Algorithm for Massive Video Surveillance\
    \ Data in Smart\nCampus. IEEE Access 2018, 6, 59871–59880. [CrossRef]\n134. Liu,\
    \ K.; Warade, N.; Pai, T.; Gupta, K. Location-aware smart campus security application.\
    \ In Proceedings\nof IEEE SmartWorld, Ubiquitous Intelligence & Computing, Advanced\
    \ & Trusted Computed, Scalable\nComputing & Communications, Cloud & Big Data Computing,\
    \ Internet of People and Smart City Innovation,\nSan Francisco, CA, USA, 4–8 August\
    \ 2017.\nAppl. Sci. 2019, 9, 4479\n23 of 24\n135. Zhang, L.; Oksuz, O.; Nazaryan,\
    \ L.; Yue, C.; Wang, B.; Kiayias, A.; Bamis, A. Encrypting wireless network\n\
    traces to protect user privacy: A case study for smart campus. In Proceedings\
    \ of the IEEE 12th International\nConference on Wireless and Mobile Computing,\
    \ Networking and Communications (WiMob), New York, NY,\nUSA, 17–19 October 2016.\n\
    136. Fraga-Lamas, P.; Fernández-Caramés, T.M.; Noceda-Davila, D.; Vilar-Montesinos,\
    \ M. RSS Stabilization\nTechniques for a Real-Time Passive UHF RFID Pipe Monitoring\
    \ System for Smart Shipyards. In Proceedings\nof the 2017 IEEE International Conference\
    \ on RFID (IEEE RFID 2017), Phoenix, AZ, USA, 9–11 May 2017;\npp. 161–166.\n137.\
    \ Ghosh, A.; Chakraborty, N. Design of smart grid in an University Campus using\
    \ ZigBee mesh networks.\nIn Proceedings of the IEEE 1st International Conference\
    \ on Power Electronics, Intelligent Control and Energy\nSystems (ICPEICES), Delhi,\
    \ India, 4–6 July 2016.\n138. Van Merode, D.; Tabunshchyk, G.; Patrakhalko, K.;\
    \ Yuriy, G. Flexible technologies for smart campus.\nIn Proceedings of the 13th\
    \ International Conference on Remote Engineering and Virtual Instrumentation\n\
    (REV), Madrid, Spain, 24–26 February 2016.\n139. Bai, S.; Chiu, C.; Hsu, J.; Leu,\
    \ J. Campus-wide wireless indoor positioning with hybrid iBeacon and Wi-Fi\nsystem.\
    \ In Proceedings of the 6th International Symposium on Next Generation Electronics\
    \ (ISNE), Keelung,\nTaiwan, 23–24 May 2017.\n140. Wang, M.; Brassil, J. Managing\
    \ large scale, ultra-dense beacon deployments in smart campuses.\nIn Proceedings\
    \ of the IEEE Conference on Computer Communications Workshops (INFOCOM WKSHPS),\n\
    Hong Kong, China, 26 April–1 May 2015.\n141. Han, T.D.; Cheong, C.; Ann, J.W.;\
    \ Kim, J.Y.; Yoon, H.M.; Lee, C.S.; Shin, H.-G.; Lee, Y.-J.; Yook, H.-M.;\nJeon,\
    \ M.-H.; et al. Implementation of new services to support ubiquitous computing\
    \ for campus life.\nIn Proceedings of the Second IEEE Workshop on Software Technologies\
    \ for Future Embedded and Ubiquitous\nSystems, Vienna, Austria, 12 May 2004.\n\
    142. Ward, S.; Gittens, M. Building useful smart campus applications using a retired\
    \ cell phone repurposing\nmodel. In Proceedings of the Third International Conference\
    \ on Electrical and Biomedical Engineering,\nClean Energy and Green Computing,\
    \ Beirut, Lebanon, 25–27 April 2018.\n143. Sanchez-Iborra, R.; Cano, M.-D. State\
    \ of the Art in LP-WAN Solutions for Industrial IoT Services. Sensors\n2016, 16,\
    \ 708. [CrossRef] [PubMed]\n144. Sigfox Ofﬁcial Webpage. Available online: https://www.sigfox.com/\
    \ (accessed on 22 September 2019).\n145. LoRa-Alliance. LoRaWAN What Is It? A\
    \ Technical Overview of LoRa and LoRaWAN; White Paper; The LoRa\nAlliance: San\
    \ Ramon, CA, USA, November 2015.\n146. 3GPP Completed the Standardization of NB-IoT.\
    \ Available online: http://www.3gpp.org/news-events/\n3gpp-news/1785-nb_iot_complete\
    \ (accessed on 22 September 2019).\n147. Ingenu Ofﬁcial Webpage. Available online:\
    \ https://www.ingenu.com/ (accessed on 22 September 2019).\n148. Weightless Ofﬁcial\
    \ Webpage.\nAvailable online:\nhttp://www.weightless.org/ (accessed on 22\nSeptember\
    \ 2019).\n149. Waviot NB-Fi Ofﬁcial Webpage. Available online: https://waviot.com/technology/what-is-nb-ﬁ\
    \ (accessed\non 22 September 2019).\n150. Haxhibeqiri, J.; De Poorter, E.; Moerman,\
    \ I.; Hoebeke, J. A Survey of LoRaWAN for IoT: From Technology to\nApplication.\
    \ Sensors 2018, 18, 3995. [CrossRef] [PubMed]\n151. Lee, H.; Ke, K. Monitoring\
    \ of Large-Area IoT Sensors Using a LoRa Wireless Mesh Network System: Design\n\
    and Evaluation. IEEE Trans. Instrum. Meas. 2018, 67, 2177–2187. [CrossRef]\n152.\
    \ Loriot, M.; Aljer, A.; Shahrour, I. Analysis of the use of LoRaWan technology\
    \ in a large-scale smart city\ndemonstrator. In Proceedings of the 2017 Sensors\
    \ Networks Smart and Emerging Technologies (SENSET),\nBeirut, Lebanon, 12–14 September\
    \ 2017; pp. 1–4.\n153. Wang, S.; Zou, J.; Chen, Y.; Hsu, C.; Cheng, Y.; Chang,\
    \ C. Long-Term Performance Studies of a\nLoRaWAN-Based PM2.5 Application on Campus.\
    \ In Proceedings of the 2018 IEEE 87th Vehicular Technology\nConference (VTC Spring),\
    \ Porto, Portugal, 3–6 June 2018; pp. 1–5.\n154. Fathurrahman, S.Z.; Rahardjo,\
    \ E.T. Coverage of Radio Wave Propagation at UI Campus Surrounding Using\nRay\
    \ Tracing and Physical Optics Near to Far Field Method. In Proceedings of the\
    \ TENCON 2018—IEEE\nRegion 10 Conference, Jeju, Korea, 28–31 September 2019; pp.\
    \ 1123–1126.\nAppl. Sci. 2019, 9, 4479\n24 of 24\n155. Rappaport, T.S.; Xing,\
    \ Y.; Kanhere, O.; Ju, S.; Madanayake, A.; Mandal, S.; Alkhateeb, A; Trichopoulos,\
    \ G.C.\nWireless Communications and Applications Above 100 GHz: Opportunities\
    \ and Challenges for 6G and\nBeyond. IEEE Access 2019, 7, 78729–78757. [CrossRef]\n\
    156. Letaief, K.B.; Chen, W.; Shi, Y.; Zhang, J.; Zhang, Y.A. The Roadmap to 6G:\
    \ AI Empowered Wireless Networks.\nIEEE Commun. Mag. 2019, 57, 8. [CrossRef]\n\
    c⃝ 2019 by the authors. Licensee MDPI, Basel, Switzerland. This article is an\
    \ open access\narticle distributed under the terms and conditions of the Creative\
    \ Commons Attribution\n(CC BY) license (http://creativecommons.org/licenses/by/4.0/).\n"
  inline_citation: (Fernández-Caramés and Fraga-Lamas 2019)
  journal: Applied sciences
  limitations: 'The authors do not provide a detailed discussion of specific case
    studies or examples of how the different data types are used to inform specific
    applications or decision-making processes within smart campuses or universities.


    Additionally, the paper does not provide a critical evaluation of the challenges
    and limitations associated with implementing and maintaining smart campus systems.


    Finally, the paper does not discuss the potential ethical and privacy concerns
    related to the collection and use of data in smart campus environments.'
  pdf_link: https://www.mdpi.com/2076-3417/9/21/4479/pdf?version=1572258679
  point_content: Different data types (e.g., soil moisture, canopy temperature, weather)
    and their collection and use
  publication_year: 2019
  relevance_score: 0.9
  relevance_score1: 0
  relevance_score2: 0
  title: 'Towards Next Generation Teaching, Learning, and Context-Aware Applications
    for Higher Education: A Review on Blockchain, IoT, Fog and Edge Computing Enabled
    Smart Campuses and Universities'
  verbatim_quote1: An example of smart campus architecture based on cloud computing
    is presented in [35], where the authors deployed a smart campus platform in three
    months by using Commercial Off-The-Shelf (COTS) hardware and Microsoft Azure cloud
    services. With respect to IoT, its use has been proposed for easing the deployment
    of architectures that allow for implementing learning, access control, or resource
    water management applications [10,36].
  verbatim_quote2: null
  verbatim_quote3: '>'
- DOI: https://doi.org/10.3390/s19081833
  analysis: "[*] Different data types (e.g., soil moisture, canopy temperature, weather)\
    \ and their collection and use\n\nAt present, no uniﬁed opinion on the structure\
    \ of IoT. It is considered from three parts: object end, cloud end and network\
    \ end. Object end senses and transmits information, cloud end processes and analyzes,\
    \ network end connects object end and cloud end.\n\nBased on the actual situation\
    \ of protected agriculture and the experience of other scholars, we proposed a\
    \ ﬁve-layer IoT architecture [22].\n\nAs shown in Figure 5, these layers are brieﬂy\
    \ described below:\n\n(1). Perception layer: This layer consists of various sensors,\
    \ terminal devices, agricultural machinery, wireless sensor network (WSN), RFID\
    \ tags andreaders, etc. The common sensors are\nenvironmental sensors, animal\
    \ and plant life information sensors and other sensors related\nto agriculture.\
    \ Through these sensors, information such as temperature, humidity, wind speed,\n\
    plant diseases, insect pests and animal vital signs can be obtained. The collected\
    \ information is\nsimply processed by the embedded device and uploaded to a higher\
    \ layer through the\nnetwork layer for further processing and analysis.\n\n(2).\
    \ Network layer: The network layer is the infrastructure of IoT, which includes\
    \ a converged\nnetwork formed by various communication networks and the internet.\
    \ The transmission\nmedium can be wired technology such as CAN bus and RS485 bus\
    \ or wireless technology like\nZigbee, Bluetooth, LoRa and NB-IoT. The network\
    \ layer not only transmits various kinds of\nagricultural related information\
    \ collected by the perception layer to the higher layer, but also\nsends the control\
    \ commands of the application layer to the perception layer, so that the related\n\
    devices of the sensing layer take corresponding actions. \n\n(3). Middleware layer:\
    \ IoT can provide different types of services for diﬀerent devices. The technical\n\
    speciﬁcations (processor, power supply, communication module) and system of each\
    \ device\nare diﬀerent and diﬀerent devices cannot be connected and communicated\
    \ with each other,\nwhich leads to heterogeneity problems. The middleware layer\
    \ aggregates, ﬁlters and processes\nreceived data from IoT devices, which greatly\
    \ reduces the processing time and cost of the above\nissues and provides developers\
    \ with a more versatile tool to build their applications. It also\nsimpliﬁes the\
    \ steps of new service development and new device deployment which\nenables them\
    \ to integrate more quickly into older architectures, improving the interoperability\n\
    of IoT.\n\n(4). Common platform layer: The common platform layer is responsible\
    \ for the storage,\ndecision-making, summary and statistics of agricultural information\
    \ and the establishment\nof various algorithms and models for agricultural production\
    \ process such as intelligent control,\nintelligent decision making, diagnostic\
    \ reasoning, early warning and prediction. This layer is\ncomposed of cloud computing,\
    \ fog computing, edge computing, Big Data, machine learning\nalgorithm, other\
    \ common core processing technologies as well as its establishment model.\n\n\
    (5). Application layer: The application layer is the highest level of the architecture\
    \ and the place where\nIoT's value and utility are most apparent. There are lots\
    \ of intelligent platforms or\nsystems in this layer for the environmental monitoring\
    \ and control of plants and animals, the\nearly warning and management of diseases\
    \ and insect pests, and agricultural product safety\ntraceability, which can improve\
    \ production eﬃciency as well as save time and cost."
  authors:
  - Xiaojie Shi
  - Xingshuang An
  - Qingxue Zhao
  - Huimin Liu
  - Lianming Xia
  - Xia Sun
  citation_count: 191
  full_citation: '>'
  full_text: ">\nsensors\nReview\nState-of-the-Art Internet of Things in Protected\
    \ Agriculture\nXiaojie Shi 1,2,3, Xingshuang An 1,2,3, Qingxue Zhao 1,2,3, Huimin\
    \ Liu 1,2,3, Lianming Xia 1,*,\nXia Sun 1,2,3,* and Yemin Guo 1,2,3,*\n1\nSchool\
    \ of Agricultural Engineering and Food Science, Shandong University of Technology,\
    \ No. 12,\nZhangzhou Road, Zibo 255049, Shandong, China; sxj6198@163.com (X.S.);\
    \ axsoﬃce@126.com (X.A.);\nzqx5230@163.com (Q.Z.); liuhuimin1210@126.com (H.L.)\n\
    2\nShandong Provincial Engineering Research Center of Vegetable Safety and Quality\
    \ Traceability,\nNo.12 Zhangzhou Road, Zibo 255049, Shandong, China\n3\nZibo City\
    \ Key Laboratory of Agricultural Product Safety Traceability, No.12 Zhangzhou\
    \ Road, Zibo 255049,\nShandong, China\n*\nCorrespondence: xiawj655@163.com (L.X.);\
    \ sunxia2152@163.com (X.S.); gym@sdut.edu.cn (Y.G.)\nReceived: 5 March 2019; Accepted:\
    \ 11 April 2019; Published: 17 April 2019\n\x01\x02\x03\x01\x04\x05\x06\a\b\x01\
    \n\x01\x02\x03\x04\x05\x06\a\nAbstract:\nThe Internet of Things (IoT) has tremendous\
    \ success in health care, smart city,\nindustrial production and so on. Protected\
    \ agriculture is one of the ﬁelds which has broad application\nprospects of IoT.\
    \ Protected agriculture is a mode of highly eﬃcient development of modern agriculture\n\
    that uses artiﬁcial techniques to change climatic factors such as temperature,\
    \ to create environmental\nconditions suitable for the growth of animals and plants.\
    \ This review aims to gain insight into\nthe state-of-the-art of IoT applications\
    \ in protected agriculture and to identify the system structure\nand key technologies.\
    \ Therefore, we completed a systematic literature review of IoT research\nand\
    \ deployments in protected agriculture over the past 10 years and evaluated the\
    \ contributions\nmade by diﬀerent academicians and organizations. Selected references\
    \ were clustered into three\napplication domains corresponding to plant management,\
    \ animal farming and food/agricultural\nproduct supply traceability. Furthermore,\
    \ we discussed the challenges along with future research\nprospects, to help new\
    \ researchers of this domain understand the current research progress of IoT in\n\
    protected agriculture and to propose more novel and innovative ideas in the future.\n\
    Keywords: Internet of things; protected agriculture; integrated application; state-of-the-art\n\
    1. Introduction\nThe Internet of Things (IoT) was ﬁrst developed in 1999 by the\
    \ network radio frequency\nidentiﬁcation (RFID) system proposed by the Massachusetts\
    \ Institute of Technology (MIT) Auto-ID\nLabs [1]. With the application and development\
    \ of new information technologies, the connotation\nand extension of IoT have\
    \ undergone major changes [2]. IoT can be deﬁned as a huge internet-based\nnetwork\
    \ connecting physical and virtual “things” with standard and interoperable communication\n\
    protocols. To be speciﬁc, everything, such as a sensor and an actuator possessing\
    \ unique identity\nand attribute, exchange messages and communicate with each\
    \ other to realize intelligent positioning,\ntracking, identiﬁcation, perception,\
    \ monitoring and management via kinds of networks anytime and\nanywhere [3]. IoT\
    \ has penetrated pervasively most aspects of human life everywhere such as health\n\
    care, smart home, smart city, industrial control and so on. Agriculture is an\
    \ ideal candidate for the\ndeployment of IoT solutions because it occurs in wide\
    \ areas that need to be continuously monitored\nand controlled [4,5].\nThe concept\
    \ of protected agriculture is relative to open-ﬁeld agriculture. It uses artiﬁcial\
    \ techniques\nto change climatic factors such as natural light, temperature and\
    \ humidity to create environmental\nconditions suitable for the growth of animals\
    \ and plants, enabling them to grow around the clock.\nSensors 2019, 19, 1833;\
    \ doi:10.3390/s19081833\nwww.mdpi.com/journal/sensors\nSensors 2019, 19, 1833\n\
    2 of 24\nThe environment of protected agriculture is completely or largely artiﬁcially\
    \ controlled andwhich has\nbroken the limits of climate and land conditions for\
    \ the growth of animals and plants to a certain extent.\nSo it is also called\
    \ controllable agriculture. Compared with open-ﬁeld agriculture, protected agriculture\n\
    has more potential to apply IoT technology, because it is less aﬀected by climatic\
    \ and geographical\nfactors. Some mature IoT solutions in other ﬁelds can be transferred\
    \ directly to protected agriculture [6].\nWith the development of agricultural\
    \ sensor, wireless communication, cloud computing,\nmachine learning and Big Data\
    \ technologies, IoT technology has emerged and is gradually being\npromoted and\
    \ applied in the protected agriculture ﬁeld [7–9]. It is playing an important\
    \ role in various\nareas of protected agriculture as it is capable of helping\
    \ farmers monitor soil condition, climate change\nand animal and plant health\
    \ [10]. When the environmental factor change beyond the set threshold,\nIoT will\
    \ automatically send a warning message to the administrator to remove the hidden\
    \ danger.\nIt can also control environmental factors such as temperature, humidity,\
    \ carbon dioxide concentration\nand illumination according to the condition of\
    \ crop growth in real time [11,12]. In addition, cameras in\nthe IoT system are\
    \ able to capture crop diseases and insect pests in the greenhouse in real time,\n\
    helping farmers ﬁnd problems and take targeted preventive measures [13]. Through\
    \ GPS, RFID and\nother location-based sensors, goods such as vegetables can be\
    \ tracked and monitored visually during\ntransportation and storage. Supermarket\
    \ managers use smart phone or PC to monitor and predict\nproduct status and the\
    \ demand for getting product on shelves. At the user or consumer end, people can\n\
    query the variety, origin, processing and other farm product information by means\
    \ of the QR code,\nbarcode, etc. IoT for protected agriculture can help create\
    \ an informed, connected, developed and\nadaptable rural community. Low-cost embedded\
    \ devices can improve the interaction between humans\nand the physical world.\
    \ Cloud computing, edge computing, and Big Data can provide valuable analysis\n\
    and support for decisions. In summary, IoT will become an important tool in the\
    \ next few years to\nengage people in embedded agriculture which includes suppliers,\
    \ farmers, technicians, distributors,\nmerchants, consumers and government representatives\
    \ [14,15].\nOn the basis of the potential of IoT applications in protected agriculture\
    \ described in the previous\nparagraphs, this paper aims to identify the current\
    \ state of solutions in these ﬁelds. The IoT fundamental\nstructure in protected\
    \ agriculture is introduced in detail based on agricultural sensors, wireless\
    \ sensor\nnetworks, cloud computing, edge clouding and machine learning technologies.\
    \ The application of IoT\nin protected agriculture and how it makes contributions\
    \ is displayed. Furthermore, the open issues,\nchallenges, future opportunities\
    \ and development trends are discussed.\nIn this article, a comprehensive and\
    \ profound review of IoT in protected agriculture has been\nexecuted based on\
    \ a survey of real-world deployments and published papers over the past 10 years.\n\
    Firstly, a keyword-based search for conference papers and articles was performed\
    \ mainly from the\nscientiﬁc databases IEEE Xplore, Science Direct and ACM Digital\
    \ as well as from Google Scholar.\nFor search keywords, we used the following\
    \ query: “Internet of Things” and either “greenhouse”\nor “livestock” or “aquaculture“\
    \ or “agriculture“. Then, we ﬁltered out papers referring to IoT but\nnot applied\
    \ to the protected agricultural domain. Finally, we checked these papers selected\
    \ from the\nprevious step and picked out the ﬁnal papers according to the problem\
    \ they addressed, the solution\nproposed, impact achieved (if measurable), tools,\
    \ systems and algorithms used.\nThe rest of the paper is organized as follows.\
    \ Section 2 presents the structure of IoT in protected\nagriculture. The key technologies\
    \ of IoT in protected agriculture are introduced in Section 3. The three\nimportant\
    \ applications in protected agriculture are summed up in Section 4. We further\
    \ discussed\nthe challenges to be faced and the problems that need to be solved\
    \ for IoT in protected agriculture as\nwell as a few future development directions\
    \ in Section 5. Finally, Section 6 outlines the conclusions of\nthis paper.\n\
    Sensors 2019, 19, 1833\n3 of 24\n2. The Structure of IoT in Protected Agriculture\n\
    2.1. Simple Review of Previous IoT Structure\nAt present, there is no uniﬁed opinion\
    \ on the structure of IoT. The composition of IoT can be\ndivided into three parts:\
    \ object end, cloud end and network end. Smart items, smart devices and\nlocal\
    \ intelligent systems interact directly with the physical world to form the “object\
    \ end” of IoT\n(also known as “front end”). The cloud computing platform that\
    \ provides computing, storage and\nother resources performs fusion processing\
    \ and intelligent analysis of the sensing data from the object\nend and performs\
    \ execution control to constitute the “cloud end” (also referred to as “back end”)\
    \ of\nIoT. The communication infrastructure of the connection object end and the\
    \ cloud end constitutes the\n“network end” of IoT. According to the diﬀerent functions\
    \ implemented by physical entity services\nin the IoT, IoT architecture established\
    \ by the current service-oriented approach can be divided into\nthe following\
    \ two categories: cloud-centric IoT architecture and object-centric IoT architecture.\
    \ In the\ncloud-centric IoT application system, the physical entity service implements\
    \ basic physical information\ncollection, local information processing and transmission\
    \ of information to the cloud, but does not\nprovide a directly accessible service\
    \ interface. Mass storage, relational processing and knowledge\nmining of physical\
    \ information are all implemented in the cloud. One of their typical representatives\n\
    is uID IoT architecture, which is an IoT architecture developed by the uID center\
    \ of the nonproﬁt\nstandardization organization initiated by the university of\
    \ Tokyo, Japan. As shown in Figure 1,\nits architecture consisted of ucode tags\
    \ such as RFID, bar codes, RF and IR beacons, user terminals,\na ucode resolution\
    \ server and application information servers [16]. For software developers, the\
    \ main\nchallenge in building such systems is how to build a back-end cloud service\
    \ platform that supports\nmassive item information management and data processing.\
    \ The cloud platforms that have been\nestablished so far mainly include Xively\
    \ and Aneka [17].\nSensors 2018, 18, x FOR PEER REVIEW  \n3 of 25 \n \n2. The\
    \ Structure of IoT in Protected Agriculture \n2.1. Simple Review of Previous IoT\
    \ Structure  \nAt present, there is no unified opinion on the structure of IoT.\
    \ The composition of IoT can be \ndivided into three parts: object end, cloud\
    \ end and network end. Smart items, smart devices and \nlocal intelligent systems\
    \ interact directly with the physical world to form the “object end” of IoT \n\
    (also known as “front end”). The cloud computing platform that provides computing,\
    \ storage and \nother resources performs fusion processing and intelligent analysis\
    \ of the sensing data from the \nobject end and performs execution control to\
    \ constitute the “cloud end” (also referred to as “back \nend”) of IoT. The communication\
    \ infrastructure of the connection object end and the cloud end \nconstitutes\
    \ the “network end” of IoT. According to the different functions implemented by\
    \ physical \nentity services in the IoT, IoT architecture established by the current\
    \ service-oriented approach can \nbe divided into the following two categories:\
    \ cloud-centric IoT architecture and object-centric IoT \narchitecture. In the\
    \ cloud-centric IoT application system, the physical entity service implements\
    \ \nbasic physical information collection, local information processing and transmission\
    \ of information \nto the cloud, but does not provide a directly accessible service\
    \ interface. Mass storage, relational \nprocessing and knowledge mining of physical\
    \ information are all implemented in the cloud. One of \ntheir typical representatives\
    \ is uID IoT architecture, which is an IoT architecture developed by the \nuID\
    \ center of the nonprofit standardization organization initiated by the university\
    \ of Tokyo, Japan. \nAs shown in Figure 1, its architecture consisted of ucode\
    \ tags such as RFID, bar codes, RF and IR \nbeacons, user terminals, a ucode resolution\
    \ server and application information servers [16]. For \nsoftware developers,\
    \ the main challenge in building such systems is how to build a back-end cloud\
    \ \nservice platform that supports massive item information management and data\
    \ processing. The \ncloud platforms that have been established so far mainly include\
    \ Xively and Aneka [17]. \n \nFigure 1. uID IoT architecture [16]. \nIn recent\
    \ years, under the impetus of organizations such as Internet Protocol for Smart\
    \ Objects \n(IPSO) Alliance, resource-constrained intelligent goods and sensing\
    \ nodes can access the internet \nthrough the IP protocol and become devices that\
    \ can be directly addressed in the network space \n[18]. Based on the service-oriented\
    \ design method, researchers have proposed a variety of software \narchitecture\
    \ reference models for building IoT systems. M2M was a standard IoT architecture\
    \ being \ndeveloped by the European Telecommunications Standards Institute (ETSI)\
    \ on the communication \nbetween machines and machines, which was designed for\
    \ non-intelligent terminal devices to \ncommunicate with other intelligent terminal\
    \ devices or systems through the mobile communication \nnetwork. The functional\
    \ architecture of M2M is shown in Figure 2: the M2M service capability layer \n\
    (SCL) was deployed in devices, gateways and network domains with storage modules;\
    \ the \napplications in devices and gateways accessed SCL through the dIa interface;\
    \ the applications in the \nFigure 1. uID IoT architecture [16].\nIn recent years,\
    \ under the impetus of organizations such as Internet Protocol for Smart Objects\n\
    (IPSO) Alliance, resource-constrained intelligent goods and sensing nodes can\
    \ access the internet\nthrough the IP protocol and become devices that can be\
    \ directly addressed in the network space [18].\nBased on the service-oriented\
    \ design method, researchers have proposed a variety of software\narchitecture\
    \ reference models for building IoT systems. M2M was a standard IoT architecture\
    \ being\ndeveloped by the European Telecommunications Standards Institute (ETSI)\
    \ on the communication\nbetween machines and machines, which was designed for\
    \ non-intelligent terminal devices to\ncommunicate with other intelligent terminal\
    \ devices or systems through the mobile communication\nnetwork. The functional\
    \ architecture of M2M is shown in Figure 2: the M2M service capability layer\n\
    (SCL) was deployed in devices, gateways and network domains with storage modules;\
    \ the applications\nSensors 2019, 19, 1833\n4 of 24\nin devices and gateways accessed\
    \ SCL through the dIa interface; the applications in the network\ndomain accessed\
    \ SCL through the mIa interface; the device or gateway interacted with the SCL\
    \ in the\nnetwork domain by the mId interface [19].\nSensors 2018, 18, x FOR PEER\
    \ REVIEW  \n4 of 25 \n \nnetwork domain accessed SCL through the mIa interface;\
    \ the device or gateway interacted with the \nSCL in the network domain by the\
    \ mId interface [19]. \n \n \nFigure 2. M2M IoT architecture [19]. \nThe 3-Tiers\
    \ architecture combined the back-end cloud service with the front-end physical\
    \ \nentity service and proposed a 3-layer information physical fusion system software\
    \ architecture \nconsisting of the environment layer, the service layer and the\
    \ control layer. As shown in Figure 3, \nthe physical components in the environment\
    \ layer were services provided by the perceptron and \nthe executor. The cloud\
    \ service components in the service layer were services provided by \nplatforms\
    \ such as traditional cloud computing. As well, the following functions were implemented\
    \ \nin the control layer: monitoring physical components and services, ensuring\
    \ dynamic \ncomposability, ensuring service adaptability; and ensuring autonomous\
    \ Cyber-Physical System \nmanagement [20]. This architecture provides services\
    \ for collecting physical data and interacting \nwith the physical world. However,\
    \ these services do not constitute an independent executable IoT \nsystembut needto\
    \ be called by the user or combined with the cloud service to complete the \n\
    execution of related tasks. \n \nFigure 3. 3-Tiers IoT framework [20]. \nIoT-A\
    \ was an IoT software architecture that implemented horizontal interconnection\
    \ and \ninteroperability between local IoT systems supported by the EU's 7th Framework\
    \ Project. Its \nreference model is shown in Figure 4. The local object association\
    \ system with different sensing and \ncommunication technologies was abstracted\
    \ into an IoT resource model that provides unified \nservices and the components\
    \ were divided into several components according to their roles, \nFigure 2. M2M\
    \ IoT architecture [19].\nThe 3-Tiers architecture combined the back-end cloud\
    \ service with the front-end physical entity\nservice and proposed a 3-layer information\
    \ physical fusion system software architecture consisting of the\nenvironment\
    \ layer, the service layer and the control layer. As shown in Figure 3, the physical\
    \ components\nin the environment layer were services provided by the perceptron\
    \ and the executor. The cloud\nservice components in the service layer were services\
    \ provided by platforms such as traditional cloud\ncomputing. As well, the following\
    \ functions were implemented in the control layer: monitoring physical\ncomponents\
    \ and services, ensuring dynamic composability, ensuring service adaptability;\
    \ and ensuring\nautonomous Cyber-Physical System management [20]. This architecture\
    \ provides services for collecting\nphysical data and interacting with the physical\
    \ world. However, these services do not constitute an\nindependent executable\
    \ IoT systembut needto be called by the user or combined with the cloud service\n\
    to complete the execution of related tasks.\nSensors 2018, 18, x FOR PEER REVIEW\
    \  \n4 of 25 \n \nnetwork domain accessed SCL through the mIa interface; the device\
    \ or gateway interacted with the \nSCL in the network domain by the mId interface\
    \ [19]. \n \n \nFigure 2. M2M IoT architecture [19]. \nThe 3-Tiers architecture\
    \ combined the back-end cloud service with the front-end physical \nentity service\
    \ and proposed a 3-layer information physical fusion system software architecture\
    \ \nconsisting of the environment layer, the service layer and the control layer.\
    \ As shown in Figure 3, \nthe physical components in the environment layer were\
    \ services provided by the perceptron and \nthe executor. The cloud service components\
    \ in the service layer were services provided by \nplatforms such as traditional\
    \ cloud computing. As well, the following functions were implemented \nin the\
    \ control layer: monitoring physical components and services, ensuring dynamic\
    \ \ncomposability, ensuring service adaptability; and ensuring autonomous Cyber-Physical\
    \ System \nmanagement [20]. This architecture provides services for collecting\
    \ physical data and interacting \nwith the physical world. However, these services\
    \ do not constitute an independent executable IoT \nsystembut needto be called\
    \ by the user or combined with the cloud service to complete the \nexecution of\
    \ related tasks. \n \nFigure 3. 3-Tiers IoT framework [20]. \nIoT-A was an IoT\
    \ software architecture that implemented horizontal interconnection and \ninteroperability\
    \ between local IoT systems supported by the EU's 7th Framework Project. Its \n\
    reference model is shown in Figure 4. The local object association system with\
    \ different sensing and \ncommunication technologies was abstracted into an IoT\
    \ resource model that provides unified \nservices and the components were divided\
    \ into several components according to their roles, \nFigure 3. 3-Tiers IoT framework\
    \ [20].\nIoT-A was an IoT software architecture that implemented horizontal interconnection\
    \ and\ninteroperability between local IoT systems supported by the EU’s 7th Framework\
    \ Project. Its reference\nmodel is shown in Figure 4.\nThe local object association\
    \ system with diﬀerent sensing and\ncommunication technologies was abstracted\
    \ into an IoT resource model that provides uniﬁed services\nand the components\
    \ were divided into several components according to their roles, function granularity\n\
    Sensors 2019, 19, 1833\n5 of 24\nand abstraction level, including device component,\
    \ communication component, service organisation\ncomponent, IoT process management\
    \ component, virtual entity component, IoT services component,\nsecurity component\
    \ and management component [21]. and. The IoT-A architecture establishes\nvirtual\
    \ entity services on the resource model and provides a higher level of abstract\
    \ interface for the\nconstruction of the IoT application system through various\
    \ modules. The IoT-A architecture has high\nﬂexibility and wide applicability\
    \ as it meets application needs in the form of business processes.\nSensors 2018,\
    \ 18, x FOR PEER REVIEW  \n5 of 25 \n \nfunction granularity and abstraction level,\
    \ including device component, communication \ncomponent, service organisation\
    \ component, IoT process management component, virtual entity \ncomponent, IoT\
    \ services component, security component and management component [21]. and. \n\
    The IoT-A architecture establishes virtual entity services on the resource model\
    \ and provides a \nhigher level of abstract interface for the construction of\
    \ the IoT application system through various \nmodules. The IoT-A architecture\
    \ has high flexibility and wide applicability as it meets application \nneeds\
    \ in the form of business processes. \n \nFigure 4. IoT-A IoT framework [21].\
    \ \n2.2. Structure of IoT in Protected Agriculture \nBased on the actual situation\
    \ of protected agriculture and the experience of other scholars, we \nproposed\
    \ a five-layer IoT architecture [22]. As shown in Figure 5, these layers are briefly\
    \ described \nbelow: \n(1). Perception layer: This layer consists of various sensors,\
    \ terminal devices, agricultural \nmachinery, wireless sensor network (WSN), RFID\
    \ tags andreaders, etc. The common sensors \nare environmental sensors, animal\
    \ and plant life information sensors and other sensors related \nto agriculture.\
    \ Through these sensors, information such as temperature, humidity, wind speed,\
    \ \nplant diseases, insect pests and animal vital signs can be obtained. The collected\
    \ information is \nsimply processed by the embedded device and uploaded to a higher\
    \ layer through the \nnetwork layer for further processing and analysis. \n(2).\
    \ Network layer: The network layer is the infrastructure of IoT, which includes\
    \ a converged \nnetwork formed by various communication networks and the internet.\
    \ The transmission \nmedium can be wired technology such as CAN bus and RS485\
    \ bus or wireless technology like \nZigbee, Bluetooth, LoRa and NB-IoT. The network\
    \ layer not only transmits various kinds of \nagricultural related information\
    \ collected by the perception layer to the higher layer, but also \nsends the\
    \ control commands of the application layer to the perception layer, so that the\
    \ related \ndevices of the sensing layer take corresponding actions.  \n(3). Middleware\
    \ layer: IoT can provide different types of services for different devices. The\
    \ technical \nspecifications (processor, power supply, communication module) and\
    \ system of each device \nare different and different devices cannot be connected\
    \ and communicated with each other, \nwhich leads to heterogeneity problems. The\
    \ middleware layer aggregates, filters and processes \nreceived data from IoT\
    \ devices, which greatly reduces the processing time and cost of the \nabove issues\
    \ and provides developers with a more versatile tool to build their applications.\
    \ It \nalso simplifies the steps of new service development and new device deployment\
    \ which \nFigure 4. IoT-A IoT framework [21].\n2.2. Structure of IoT in Protected\
    \ Agriculture\nBased on the actual situation of protected agriculture and the\
    \ experience of other scholars,\nwe proposed a ﬁve-layer IoT architecture [22].\n\
    As shown in Figure 5, these layers are brieﬂy\ndescribed below:\n(1).\nPerception\
    \ layer: This layer consists of various sensors, terminal devices, agricultural\
    \ machinery,\nwireless sensor network (WSN), RFID tags andreaders, etc.\nThe common\
    \ sensors are\nenvironmental sensors, animal and plant life information sensors\
    \ and other sensors related\nto agriculture. Through these sensors, information\
    \ such as temperature, humidity, wind speed,\nplant diseases, insect pests and\
    \ animal vital signs can be obtained. The collected information is\nsimply processed\
    \ by the embedded device and uploaded to a higher layer through the network\n\
    layer for further processing and analysis.\n(2).\nNetwork layer: The network layer\
    \ is the infrastructure of IoT, which includes a converged\nnetwork formed by\
    \ various communication networks and the internet. The transmission medium\ncan\
    \ be wired technology such as CAN bus and RS485 bus or wireless technology like\
    \ Zigbee,\nBluetooth, LoRa and NB-IoT. The network layer not only transmits various\
    \ kinds of agricultural\nrelated information collected by the perception layer\
    \ to the higher layer, but also sends the control\ncommands of the application\
    \ layer to the perception layer, so that the related devices of the\nsensing layer\
    \ take corresponding actions.\n(3).\nMiddleware layer: IoT can provide diﬀerent\
    \ types of services for diﬀerent devices. The technical\nspeciﬁcations (processor,\
    \ power supply, communication module) and system of each device\nare diﬀerent\
    \ and diﬀerent devices cannot be connected and communicated with each other,\n\
    which leads to heterogeneity problems. The middleware layer aggregates, ﬁlters\
    \ and processes\nreceived data from IoT devices, which greatly reduces the processing\
    \ time and cost of the above\nissues and provides developers with a more versatile\
    \ tool to build their applications. It also\nSensors 2019, 19, 1833\n6 of 24\n\
    simpliﬁes the steps of new service development and new device deployment which\
    \ enables them\nto integrate more quickly into older architectures, improving\
    \ the interoperability of IoT.\n(4).\nCommon platform layer:\nThe common platform\
    \ layer is responsible for the storage,\ndecision-making, summary and statistics\
    \ of agricultural information and the establishment\nof various algorithms and\
    \ models for agricultural production process such as intelligent control,\nintelligent\
    \ decision making, diagnostic reasoning, early warning and prediction. This layer\
    \ is\ncomposed of cloud computing, fog computing, edge computing, Big Data, machine\
    \ learning\nalgorithm, other common core processing technologies as well as its\
    \ establishment model.\n(5).\nApplication layer: The application layer is the\
    \ highest level of the architecture and the place where\nIoT’s value and utility\
    \ are most apparent. There are lots of intelligent platforms or systems in this\n\
    layer for the environmental monitoring and control of plants and animals, the\
    \ early warning and\nmanagement of diseases and insect pests, and agricultural\
    \ product safety traceability, which can\nimprove production eﬃciency as well\
    \ as save time and cost.\nSensors 2018, 18, x FOR PEER REVIEW  \n6 of 25 \n \n\
    enables them to integrate more quickly into older architectures, improving the\
    \ interoperability \nof IoT.  \n(4). Common platform layer: The common platform\
    \ layer is responsible for the storage, \ndecision-making, summary and statistics\
    \ of agricultural information and the establishment of \nvarious algorithms and\
    \ models for agricultural production process such as intelligent control, \nintelligent\
    \ decision making, diagnostic reasoning, early warning and prediction. This layer\
    \ is \ncomposed of cloud computing, fog computing, edge computing, Big Data, machine\
    \ learning \nalgorithm, other common core processing technologies as well as its\
    \ establishment model. \n(5). Application layer: The application layer is the\
    \ highest level of the architecture and the place \nwhere IoT's value and utility\
    \ are most apparent. There are lots of intelligent platforms or \nsystems in this\
    \ layer for the environmental monitoring and control of plants and animals, the\
    \ \nearly warning and management of diseases and insect pests, and agricultural\
    \ product safety \ntraceability, which can improve production efficiency as well\
    \ as save time and cost. \n \nFigure 5. Structure of IoT in protected agriculture\
    \ [22]. \n3. The Crucial Technologies of IoT in Protected Agriculture \n3.1. Sensor\
    \ Technology \nSensor plays an indispensable role in obtaining environment, plant\
    \ and animal information \nand it is also one of the technical bottlenecks in\
    \ the development of IoT. In recent years, sensor \ntechnology has rapidly developed\
    \ with the emergence of new materials and methods [23]. The \nFigure 5. Structure\
    \ of IoT in protected agriculture [22].\nSensors 2019, 19, 1833\n7 of 24\n3. The\
    \ Crucial Technologies of IoT in Protected Agriculture\n3.1. Sensor Technology\n\
    Sensor plays an indispensable role in obtaining environment, plant and animal\
    \ information and it\nis also one of the technical bottlenecks in the development\
    \ of IoT. In recent years, sensor technology\nhas rapidly developed with the emergence\
    \ of new materials and methods [23]. The conventional\nenvironment sensors such\
    \ as temperature, humidity, light intensity, heat and gas sensors have been\n\
    relatively mature and widely deployed in protected agriculture. Nowaday, about\
    \ 6000 research and\nproduction organizations engage in sensor research from more\
    \ than 40 countries, including famous\nmanufacturers such as Honeywell, Foxboro,\
    \ ENDEVCO, Bell & Howell and Solartron companies.\nThere are three main types\
    \ of widely used and researched agricultural sensors: physical property type\n\
    sensors, biosensors and micro electro mechanical system sensors (MEMS). The physical\
    \ property type\nsensor realizes the signal conversion through the physical change\
    \ of the sensitivity of the material\nof the sensor itself, which is mainly temperature,\
    \ humidity and gas sensor. The biosensor [24] uses\nthe organism itself as a sensitive\
    \ component to transmit information according to the reaction of the\norganism\
    \ to the outside world and includes enzyme sensor [25], microbial sensor, adaptive\
    \ sensor [26],\netc., which is mainly used to detect pesticide residue, heavy\
    \ metal ion, antibiotic residue and toxic\ngas [27,28]. The MEMS sensor is the\
    \ embodiment of the new generation of research and development\ntechnology in\
    \ the ﬁeld of sensors with small size, low power consumption, low cost and reliability\
    \ [29].\nAlthough sensor technology has made great strides in both principles\
    \ and manufacturing\nprocesses, there are still some open issues. A typical example\
    \ among those open issue is the research\nand development of soil sensors and\
    \ vital sign information sensors of animal and plant, which is an\nurgent conundrum\
    \ to overcome in long time. The complex composition as well as diﬀerent physical\n\
    and chemical properties of soil turn the rapid and situ measurement of soil nitrogen\
    \ and other elements\ninto an international diﬃculty. Since the life process of\
    \ animals and plants is very complicated, in order\nto realize the accurate detection\
    \ of information about their life, it is necessary to make breakthroughs in\n\
    the physical mechanism and measurement model of the life process. Related research\
    \ has been carried\nout using physicochemical properties, spectroscopy, multispectral,\
    \ hyper-spectral, nuclear magnetic\nresonance as well as other detection methods\
    \ [30–33].\nAnother problem is the promotion and application of these sensors.\
    \ For one thing there is still\na lack of uniform technical standards in the collection,\
    \ transmission and the interface with the platform\nand human-computer interaction\
    \ interface; for another, the cost has limited the large scale application\nof\
    \ fresh sensors in intelligent agriculture. Currently, the cost of sensing equipment\
    \ for the collection and\ntransmission of animal and plant status is prohibitively\
    \ expensive for ordinary peasants. The number\nof nodes in a sensor network can\
    \ often reach tens of thousands. To make the sensor network practical,\nthe cost\
    \ of each node must be controlled within $1, but now the price is as high as $80\
    \ [34].\n3.2. Data Transmission Technology\nIn this section, the details of data\
    \ transmission technology are discussed, which is one of the vital\ntechnologies\
    \ for real-time dynamic acquisition of agricultural information. Diﬀerent from\
    \ industrial\napplication, agricultural information acquisition is not demanding\
    \ in timelines and a slight delay in\nthe transmission process has little eﬀect\
    \ on agricultural production.\nCompared with wired transmission technology such\
    \ as ﬁeldbus, wireless communication\ntechnology has advantages of low construction\
    \ and maintenance cost, low power consumption\nand excellent extensibility. Recently,\
    \ most researchers, organizations and manufacturers choose it\nto build up their\
    \ WSN in environment monitoring [35,36], automatic irrigation [37] and remote\n\
    control [38]. As shown in Table 1, the summary of popular wireless technologies\
    \ and basic parameters\nwas presented. Diﬀerent vendors and research institutes\
    \ have developed their own wireless devices\nbased on these wireless protocols,\
    \ which has somewhat increased the heterogeneity of IoT. In addition,\nwireless\
    \ signals of diﬀerent protocols located in the same band can cause mutual interference\
    \ such as\nSensors 2019, 19, 1833\n8 of 24\nZigBee, Wi-Fi and Bluetooth [39].\
    \ Wi-Fi has high communication speed but high power consumption,\nwhich is suitable\
    \ for sensor network deployment at ﬁxed points. Although Bluetooth has high security,\n\
    its communication distance is too short and power consumption is high, which is\
    \ suitable for short-time\nclose-range networking. ZigBee has the advantages of\
    \ low consumption, low cost and self-organization\nand each node can be used as\
    \ a relay station for transmitting data of adjacent nodes. So it easily expands\n\
    the coverage of the sensor network and is an ideal long-distance, large-range\
    \ sensor networking.\nTable 1. Summary of popular wireless technologies and basic\
    \ parameters.\nWireless\nTechnology\nWireless\nStandard\nFrequency Band\nNetwork\
    \ Type\nTransmission\nRange\nData Rate &Power\nWi-Fi\nIEEE802.11\na/c/b/d/g/n\n\
    2.4 GHz, 5–60 GHz\nWLAN\n20–100 m\n1 Mb/s–6.75\nGb/s, 1 W\nBluetooth\nBluetooth\n\
    (Formerly IEEE\n802.15.1)\n2.4 GHz\nWPAN\n10–300 m\n1 Mb/s–48 Mb/s,\n1 w\n6LowPAN\n\
    IEEE 802.15.4\n908.42 MHz/2.4 GHz\nWPAN\n20–100m\n20 Kb/s–250 Kb/s,\n1 mW\nSigfox\n\
    Sigfox\n908.42 MHz\nLPWAN\n<50 km\n10–1000 b/s, N/A\nLoRaWAN\nLoRaWAN\nVarious\n\
    LPWAN\n<15 km\n0.3–50 Kb/s, N/A\nNB-loT\n3GPP\n180 KHz\nLPWAN\n<15 km\n0–200 Kb/s,\
    \ N/A\nMobile cellular\ntechnology\n2G-GSM, GPRS\n3G-UMTS,\nCDMA2000\n4G-LTE\n\
    865 MHz, 2.4 GHz\nGERAN\nEntire cellular\narea\n2G: 50–100 kb/s\n3G: 200 kb/s\n\
    4G: 0.1–1 Gb/s, 1 W\nZigbee\nIEEE 802.15.4\n2400–2483.5 MHz\nMesh\n0–10 m\n250\
    \ Kbps, 1 mW\nNFC\nISO/IEC 13157\n13.56 MHz\nPoint to Point\n0.1m\n424 Kbps, 1–2\
    \ mW\nIn recent years, the Low Power Wide Area Network (LPWAN) is one of IoT hotspots\
    \ and\nthought as a novel technology with great development potential, which is\
    \ attributed to its huge\nadvantages such as ultra-long distance communication\
    \ and it can be used as an important complement\nof the traditional wireless local\
    \ area network (WLAN) and mobile cellular mobile communication\ntechnologies (such\
    \ as GSM and GPRS). At this stage, LPWAN has many technical standards, which can\n\
    be classiﬁed into two categories. The ﬁrst is a proprietary patented technology\
    \ that works under\nan unlicensed spectrum, such as LoRa, Sigfox and RPMA. The\
    \ second is a cellular communication\ntechnology that works under a licensed spectrum,\
    \ such as EC-GSM, eMTC and NB-IoT. Due to the use\nof dedicated frequency bands\
    \ and uniﬁed deployment by operators, licensed spectrum technology\nhas carrier-class\
    \ security and low interference characteristics, which forms full network coverage\n\
    and operation [40,41]. The unlicensed spectrum uses the common spectrum without\
    \ paying high\nspectrum costs but requires special handling of co-channel interference.\
    \ There are many beneﬁts of IoT\ndeployments based on LPWAN in the agricultural\
    \ environment. Firstly, the maximum connection\ndistance of the LPWAN terminal\
    \ device to the base station varies from several kilometers to several tens\n\
    of kilometers, which saves the trouble of setting up and maintaining routing devices.\
    \ Compared with\nthe 2.4 GHz band, LPWAN adopts the sub-1GHz band to acquire less\
    \ attenuation and multipath\nfading caused by obstacles and dense surfaces like\
    \ concrete walls [42,43]. Moverover, the sensitivity\nof state of the art LPWAN\
    \ receivers reaches as low as –130 dBm due to modulation techniques such\nas narrowband\
    \ and spread spectrum. Secondly, ultra low power operation is another advantage\
    \ of\nLPWAN which is achieved by duty cycling mechanism, lightweight medium access\
    \ control protocols\nand oﬄoading complex tasks [44]. Thirdly, most LPWAN technologies\
    \ support a large number of\ndevice connections by diversity techniques, adaptive\
    \ channel selection and data rate technologies,\netc. [45]. Finally, the LPWAN\
    \ connects a large number of end devices, while keeping the cost of\nhardware\
    \ below ﬁve dollars [46]. LPWAN technologies target a diverse set of applications\
    \ with varying\nrequirements in protected agriculture and therefore it should\
    \ provide some sort of quality of service\n(QoS) over the same underlying LPWAN\
    \ technology. However, current LPWAN technologies provide\nno or limited QoS.\n\
    Sensors 2019, 19, 1833\n9 of 24\nMeanwhile, mobile cellular communication technology\
    \ has undergone four generations of\ntechnology updates and the ﬁfth-generation\
    \ mobile communication technology (5G) was announced in\n2016, which will make\
    \ large ﬁle transfer such as agricultural images and audio a reality and bring\
    \ new\nimpetus to the agricultural IoT. From the perspective of future research,\
    \ the research of wireless sensor\nnetworks focuses mainly on communication, energy\
    \ conservation, network control and its application\nin agricultural monitoring.\n\
    3.3. WSN\nThe WSN consists of a lot of sensor nodes that are usually powered by\
    \ battery and it is a multi-hop\nself-organizing network system formed by wireless\
    \ communication to collaboratively sense, collect and\nprocess various information\
    \ of the perceived object in the network coverage area [47,48]. It can be\ndivided\
    \ into terrestrial WSN and wireless underground sensor networks (WUSN). The agricultural\n\
    sensors are usually planted into soil and lower frequency wireless technologies\
    \ are more selected\ndue to low attenuation in WUSN. Besides, antenna size and\
    \ energy consumption in WUSN is higher\nthan terrestrial WSN [49]. With development\
    \ of LPWAN, IoT may not need a mesh-style WSN with\npower-based routing, where\
    \ one node forwards packets of other nodes.\n3.4. Cloud Computing\nCloud computing\
    \ grew out of distributed computing, parallel processing and grid computing.\n\
    It is an Internet-based computing system that provides hardware services, infrastructure\
    \ services,\nplatform services, software services and storage services to various\
    \ IoT applications. Its essence is\na system for dynamically deploying and allocating/redistributing\
    \ as well as dynamic monitoring\nof virtualized computing and storage resource\
    \ pools, thereby providing users with computing,\ndata storage and platform services\
    \ that meet QoS requirements [50,51]. It played a strong role in\npromoting the\
    \ development of agricultural IoT. Firstly, cloud computing can provide farmers\
    \ with cheap\ndata storage services for text, image, video and other agricultural\
    \ information, which greatly reduces\nthe storage costs of agricultural enterprises\
    \ [52]. Secondly, it is diﬃcult to make direct use of these raw\ndata for making\
    \ decisions based on the technical level of farmers. Agricultural experts can\
    \ only make\naccurate judgments and give suggestions based on quantitative analysis.\
    \ Only cloud computing can\nsupport intelligent large-scale computing systems\
    \ [53,54]. Thirdly, cloud computing could provide\na secure platform for the development\
    \ of various IoT applications such as crop monitoring [55].\n3.5. Edge Computing\n\
    Edge computing refers to a new computing model that performs calculations at the\
    \ edge of the\nnetwork [56]. In the edge computing, the downlink data of the edge\
    \ represents the cloud service,\nthe uplink data represents IoT service and the\
    \ edge of edge computing refers to any computing\nand network resources between\
    \ the data source and the cloud computing center path. Because the\ncomputing\
    \ task is partially migrated to the network edge device, edge hormone can improve\
    \ data\ntransmission performance, ensure real-time processing and reduce the computational\
    \ load of the cloud\ncomputing center. Moreover, edge computing better protects\
    \ data because processing occurs closer to\nthe source than in cloud computing\
    \ [57,58].\n3.6. Machine Learning\nMachine learning (ML) is a smart way for computers\
    \ to simulate people’s learning activities, acquire\nnew knowledge, continuously\
    \ improve performance and implement their own perfection. In recent\nyears, machine\
    \ learning has achieved great success in algorithm, theory and application [59]\
    \ and have\nbeen combined with other agricultural technologies to maximized crop\
    \ yield while minimizing the input\ncosts [60]. The main machine learning algorithms\
    \ are naïve bayes, discriminant analysis, K-nearest\nneighbor, support vector\
    \ machine (SVM) [61], K-means clusterin, fuzzy clustering, gaussian mixture\n\
    models, artiﬁcial neural network (ANN), deep learning [62], decision tree algorithm\
    \ and so on [63].\nSensors 2019, 19, 1833\n10 of 24\nML can discover the internal\
    \ connection between messy, modelless and complex agricultural\ndata, make accurate\
    \ predictions and provide a theoretical basis for agricultural decision-making.\n\
    Machinelearning technology is playing an important role in crop breeding, disease\
    \ identiﬁcation,\npest and disease prediction, intelligent irrigation planning\
    \ and agricultural expert systems [64–67].\nFor example, ML technology can analyze\
    \ past farmland data, including the performance of crops under\ndiﬀerent climatic\
    \ conditions and the inheritance of a particular phenotype. As well, ML technology\n\
    can explore the association rules and then build a probability model to predict\
    \ which genes are\nmost likely to participate in the expression of a certain good\
    \ trait of the plant, which can help the\nbreeding expert conduct a reasonable\
    \ breeding experiment [68–70]. Kyosuke et al. came up with\na method for detecting\
    \ the maturity of a single intact tomato-based ML, which consisted of three\n\
    steps: pixel-based segmentation, blob-based segmentation and individual fruit\
    \ detection. In the ﬁrst\ntwo steps, decision trees were generated based on features\
    \ such as color, shape, texture and size and\nimage segmentations were conducted\
    \ using the generated trees. Finally, the automatical detection of\nindividual\
    \ fruit in multiple tomatoes was achieved by X-means clustering method. The results\
    \ of the\ntomato detection image test showed that their method achieved a recall\
    \ of 0.80, while the precision\nwas 0.88 [71]. Rahnemoonfar et al. proposed deep\
    \ learning architecture for counting fruits based\non convolutional neural networks.\
    \ They used synthetic images to train the neural network to save\ntime-consuming\
    \ collect and annotate. The network was trained for three epochs on 24,000 synthetic\n\
    images using an Adam optimizer and 100 randomly chosen images were tested. The\
    \ experimental\nresults demonstrated that their method had higher average accuracy\
    \ as comparing with others [72].\n3.7. Big Data\nThe protected agriculture produces\
    \ billions of dynamic, complex and spatial data including soil\ndatabases, greenhouse\
    \ environment data, livestock vaccination records and government investment\n\
    data. Compared with relational data structures that are logically expressed using\
    \ two-dimensional\ntables, agricultural data is more unstructured and has a large\
    \ number of hypermedia elements\nsuch as expert experience, knowledge and agricultural\
    \ models in the form of text, charts, pictures,\nanimations and voice/video [73].\
    \ The “big” of these data can be reﬂected in four dimensions: volume,\nvelocity,\
    \ variety and veracity [74]. Big Data technology is able to ﬁnd out the internal\
    \ links of collected\ndata through information mining and other means, discover\
    \ new information and provide data support\nfor the next operation. The most commonly\
    \ used techniques to deal with Big Data technology are\nimage processing, modeling\
    \ and simulation, machine learning, statistical analysis and geographical\ninformation\
    \ systems (GIS) [75].\n4. IoT Applications in Protected Agriculture\n4.1. Plant\
    \ Management\nCompared with open-ﬁeld agriculture, protected agriculture provides\
    \ a relatively suitable and\ncontrollable environment for crop growth by greenhouse\
    \ technology, which to some extent is free\nfrom the constraints of the natural\
    \ environment and promoted the intensive and eﬃcient use of\nagricultural resources.\
    \ However, spatial and temporal variability of crops’ growth environmental\nparameters\
    \ in the protected agriculture are strong and aﬀect each other [76,77], which\
    \ made it diﬃcult\nto adapt to the growth of diﬀerent types of plants in diﬀerent\
    \ growth stages by traditional cultivation\nand environmental regulation. Therefore,\
    \ it needs higher accuracy in the aspect of monitoring and\ncontrol. Many works\
    \ have attempted to design and test types of monitoring and control systems to\n\
    adjust greenhouse environmental parameters such as air temperature and humidity,\
    \ light intensity\nand CO2 concentration based on IoT and their results have proven\
    \ it is technically and economically\nfeasible [78]. At the low level of IoT development,\
    \ the environmental data were simply processed and\nusually presented in sheet\
    \ and plot form [79,80]. Later, some studies collected huge amounts of data\n\
    to set up various models based on plant growth or greenhouse climate [81–83],\
    \ which contributed\nSensors 2019, 19, 1833\n11 of 24\nto predicting the crop\
    \ yield and environment parameter changes to help farmers better manage\ngreenhouse.\
    \ CAI et al. developed a low-cost smart greenhouse remote monitor system based\
    \ on IoT.\nThe system used STM32F103 single chip machine and sensors to collect\
    \ environmental information\nand transferred the data to cloud by LPWAN. Security\
    \ link was established with TLS, which reduced\nsystem costs while ensuring the\
    \ security of data transmission. At the same time, they adopted a time\nseries\
    \ database to store data so that tremendous storage space can be saved [84]. He\
    \ et al. have reported\na greenhouse temperature intelligent control system based\
    \ on NB-IoT. The relative error of greenhouse\nenvironmental information collection\
    \ was below 1%, the average control accuracy was 3.57% (±1.0 ◦C),\nthe transmission\
    \ distance was not limited and the automatic regulation of crop growth temperature\n\
    was realized [85].\nNowaday, with the development of cloud computing, ML, etc.,\
    \ IoT solution can easily achieve\nsmart data processing and analyzing at low\
    \ cost and in a convenient way [86,87]. At the same time,\ngreenhouse technology\
    \ has also undergone several generations of upgrades and has now evolved into\n\
    highly mechanized and automated plant factories. Deng et al. have implemented\
    \ a closed-loop control\nsystem in a salad-cultivating plant factory based on\
    \ the kinetic model. Both digital simulation and\nreal-time results demonstrated\
    \ the system can work stably under the internal variations and external\ndisturbances\
    \ [88]. Zamora-Izquierdo et al. developed a smart farming IoT platform based on\
    \ edge and\ncloud computing, which was designed for soilless culture greenhouses\
    \ at low cost. The platform was\ncomposed of local, edge and cloud parts: the\
    \ local part dealt with data gathering and automatic control\nthough Cyber-Physical\
    \ Systems, the edge part took main management tasks and could improve the\nstability\
    \ of this systems, the cloud part was in charge of data analytics. Compared with\
    \ a regular\nopen control, the platform saved more than 30% water [89]. Katsoulas\
    \ et al. have designed an\nonline irrigation system for hydroponic greenhouse\
    \ crops and their results indicated it increased\nwater and fertilizer use eﬃciency\
    \ by 100% [90]. Liao et al. implemented a IoT-based system in\nan orchid greenhouse\
    \ to monitor the environmental factors and the growth status of phalaenopsis.\n\
    They developed an image processing algorithm to estimate the leaf area of phalaenopsisthe\
    \ and\nidentiﬁed the relationship between growth of plant leaves and environmental\
    \ factors. The proposed\nsystem could provide quantitative information with high\
    \ spatiotemporal resolution for ﬂoral farmers\nand contribute to updating farming\
    \ strategies for phalaenopsis in the future [91].\nDiseases and insect pests bring\
    \ a great threat to the growth of crops as and traditional technology\nand chemical\
    \ prevention and control has a certain lag and negative impact [92,93]. The rise\
    \ of IoT\nhas brought more eﬃcient and smarter solutions to crop disease and pest\
    \ control. Many types of\nIoT sensors can collect information about location,\
    \ greenhouse environment status, crop growth and\npest situation anywhere in real-time,\
    \ which helps farmers keep track of crop pests and diseases.\nThen, all raw image\
    \ and data are sent to cloud centers and later processed and analyzed by various\n\
    models and algorithms based on diﬀerent diseases and pests [94,95]. Finally, these\
    \ cloud centers\ngenerally provide farmers with the following services: disease\
    \ or pest identiﬁcation, disaster prediction\nand warning and recommended governance\
    \ measures from expert systems. Tirelli et al. proposed\na pest insect trap automatic\
    \ monitoring system using ZigBee technology, which can estimate the\ninsect density\
    \ by collected data from diﬀerent sites and send a warning message to farmers\
    \ when it\nexceeded the set value [96]. Ahouandjinou et al. proposed a pest monitoring\
    \ system which detected\nthe presence of pests by the acquisition of ultrasound\
    \ and assisted others in building up protocols\nfor early exterminate of the pests\
    \ [97]. Foughali et al. presented a potato late blight prevention and\ndecision\
    \ support system using cloud IoT and helped the agriculturists take eﬀective action\
    \ to treat\nthis disease [98]. Both Semios and Spensa Company launched their own\
    \ integrated pest management\nsystem, which was able to count the number of pests\
    \ by images, as well as characterize and capture\nthe insects. At present, pest\
    \ and disease warning research mainly provides medium and long-term\nwarning based\
    \ on historical data, which can provide macro guidance for crop production but\
    \ low\ntimeliness. Therefore, future research should focus on online monitoring\
    \ as well as diagnosis and early\nwarning of agricultural diseases.\nSensors 2019,\
    \ 19, 1833\n12 of 24\n4.2. Animal Farming\nLivestock and aquatic product farming\
    \ is an important part of protected agriculture and an area\nwhere IoT applications\
    \ have achieved good results. To achieve good control eﬀects in animal breeding,\n\
    IoT should not only overcome harsh environmental factors, but also pay attention\
    \ to the eﬀects of animal\nbehaviors [99,100]. IoT have been applied in monitoring\
    \ and management of environment, animal,\nfeed and farming process [101,102].\
    \ The livestock monitoring items include information such as body\ntemperature,\
    \ weight, behavior, exercise volume, food intake, disease information and environmental\n\
    factors, which can help people understand animal’s own physiological and nutritional\
    \ status and\nadaptability to external environmental conditions. In aquaculture,\
    \ management projects focus on water\nquality such as dissolved oxygen content,\
    \ water temperature and pH value [103,104] because water\nquality greatly aﬀects\
    \ the growth of aquatic animals. With animal growth and nutrient optimization\n\
    model and intelligent IoT equipment, it is possible to realiaze automatic feeding\
    \ and optimal control of\nfeeding time and intake according to their growth cycle,\
    \ individual quality, feeding cycle and eating\nsituation [105,106]. The Osborne\
    \ Industrial Company has produced TEAM automated electronic sow\nfeeding (ESF)\
    \ stations including pregnancy stations and estrus detection stations. The ESF\
    \ stations\nidentify the sow through the RFID tags worn by each sow and deliver\
    \ the corresponding quantity\nand type of feed based on information such as parity,\
    \ lyrical condition and gestational age. The estrus\ndetection stations can detect\
    \ rutting sows in the sow population and their detection accuracy is 7%\nhigher\
    \ than the manual ones. Encinas et al. presented a distributed monitoring IoT\
    \ system for\nwater quality monitoring. Their model was able to help ﬁsheries\
    \ acquire water quality parameters\nsuch as pH and temperature data in real time\
    \ to optimize pond resources and prevent unwanted\nconditions [107]. Soto-Zarazu´a\
    \ et al. proposed an automated recirculation tilapia farming system\nbased on\
    \ the fuzzy algorithm. The results of this work showed that it saved water by\
    \ 97.42% and\nthe water quality environmental parameters were controlled within\
    \ the acceptable range of tilapia\nculture [108]. Many researches have focused\
    \ on analysis of animal behavior, health care and diagnosis\nand warning of diseases\
    \ based on IoT [109–111]. Yazdanbakhsh et al. proposed an intelligent livestock\n\
    surveillance system. They attempted many machine learning algorithms to process\
    \ raw data of\nhealthy and ill cows and ﬁnally obtained good results used a wavelet-domain\
    \ ensemble classiﬁer with\n80.8% sensitivity and 80% speciﬁcity [112]. Wens Group,\
    \ the largest livestock breeding enterprise\nin China, took the lead in carrying\
    \ out research on the animal husbandry based on IoT and built\nthe corresponding\
    \ system for monitoring livestock vital signs, behavior and breeding environment\n\
    information [113]. Liu et al. collected a variety of penaeus vannamei information\
    \ such as real-time data\non the culture environment, disease image data and expert\
    \ disease diagnosis and treatment and ﬁnally,\nconstructed a remote intelligent\
    \ diagnosis model based on IoT [114]. Liu et al. proposed a web-based\ncombined\
    \ nutritional model for precisely predicting the growth, feed amount and nitrogen\
    \ phosphorus\noutput of gibel carp [115]. The current online diagnostics and early\
    \ warning of animal diseases is at an\nearly stage due to the lack of corresponding\
    \ sensors and models. With upgrading of hardware and\nartiﬁcial intelligence algorithms,\
    \ future research should focus on the improvement of Big Data depth\nalgorithm\
    \ and the establishment of comprehensive models of animal behavior and disease.\n\
    A few studies have made in-depth research in monitoring animal odor and hazardous\
    \ gas\nproduced during the breeding process such as ammonia gas and sulfur dioxide\
    \ [116]. Pan developed\nan electronic nose network system for monitoring and real-time\
    \ analysis of odors from livestock\nfarms. They placed e-noses in and around the\
    \ farm to build up a wireless network to measure odor\ncompounds as well as environmental\
    \ parameters [117].\n4.3. Agri-food Supply Chain Traceability\nNowday, agricultural\
    \ products/food safety issues are receiving worldwide attention and their\nsafety\
    \ traceability is one solution accepted by all parties of Agri-food domains. Governments\
    \ in many\ncountries and regions have promulgated laws and regulations to promote\
    \ the establishment of food\ntraceability system and strengthen the supervision\
    \ of agricultural products/food safety. The Agri-food\nSensors 2019, 19, 1833\n\
    13 of 24\nsupply chain traceability IoT-based system can ensure food safety and\
    \ quality at each link of the\nproduction, from the cropland to the consumer (Figure\
    \ 6), which could help consumers establish\nconﬁdence in food safety and contribute\
    \ to sustainable development of the whole food industry [118].\n \n4.3. Agri-food\
    \ Supply Chain Traceability \nNowday, agricultural products/food safety issues\
    \ are receiving worldwide attention and their \nsafety traceability is one solution\
    \ accepted by all parties of Agri-food domains. Governments in \nmany countries\
    \ and regions have promulgated laws and regulations to promote the establishment\
    \ of \nfood traceability system and strengthen the supervision of agricultural\
    \ products/food safety. The \nAgri-food supply chain traceability IoT-based system\
    \  can ensure food safety and quality at each \nlink of the production, from the\
    \ cropland to the consumer (Figure 6), which could help consumers \nestablish\
    \ confidence in food safety and contribute to sustainable development of the whole\
    \ food \nindustry [118].  \n \nFigure 6. Schematic representation of the Agri-food\
    \ supply chain from the grower to consumer. \nIn past years, a lot of countries\
    \ have established the traceability platform for meat,milk, fish and \nagri-food\
    \ products based on IoT [119–121]. However, the fresh food cold chain logistics\
    \ traceability \nhas also drawn widespread attention [122,123]. RFID technology\
    \ still played an important role in \nAgri-food supply chain traceability due\
    \ to its small size and low cost [124]. As a novel technology, \nnear field communication\
    \ (NFC) has been progressively developed and used because of its safe and \nsimple\
    \ operation [125,126]. A common problem in the development of IoT is its asynchronous\
    \ \nheterogeneous data flow and distributed features. This requires the traceability\
    \ system to establish \nuniform and accurate identification naming rules to facilitate\
    \ quick and unique retrieval of \ninformation on a farm product [127]. As the\
    \ deployment of IoT infrastructure is completed, the \nsupply chain will move\
    \ towards virtualization which is no longer required physical contact. The \n\
    virtualization of an agri-food supply chain helps administrators better monitor,\
    \ control, plan and \noptimize food supply chain processes [128]. Wang et al.\
    \ proposed a food safety pre-warning system \nbased on association rules mining\
    \ and IoT. It included four modules: information source, warning \nFigure 6. Schematic\
    \ representation of the Agri-food supply chain from the grower to consumer.\n\
    In past years, a lot of countries have established the traceability platform for\
    \ meat, milk, ﬁsh and\nagri-food products based on IoT [119–121]. However, the\
    \ fresh food cold chain logistics traceability\nhas also drawn widespread attention\
    \ [122,123]. RFID technology still played an important role in\nAgri-food supply\
    \ chain traceability due to its small size and low cost [124]. As a novel technology,\n\
    near ﬁeld communication (NFC) has been progressively developed and used because\
    \ of its safe\nand simple operation [125,126]. A common problem in the development\
    \ of IoT is its asynchronous\nheterogeneous data ﬂow and distributed features.\
    \ This requires the traceability system to establish\nuniform and accurate identiﬁcation\
    \ naming rules to facilitate quick and unique retrieval of information\non a farm\
    \ product [127]. As the deployment of IoT infrastructure is completed, the supply\
    \ chain will\nmove towards virtualization which is no longer required physical\
    \ contact. The virtualization of an\nagri-food supply chain helps administrators\
    \ better monitor, control, plan and optimize food supply\nchain processes [128].\
    \ Wang et al. proposed a food safety pre-warning system based on association\n\
    rules mining and IoT. It included four modules: information source, warning analysis,\
    \ reaction and\nemergency feedback. First, they accessed food critical information\
    \ through data processing and\nanalysis of food traceability data for safety assessment.\
    \ On this basis of this data, the system used the\nassociated data mining method\
    \ to discover the connection between them and then obtained the food\nsafety risk\
    \ analysis results. Subsequently, the system made a corresponding early warning\
    \ response\nbased on this result [129].\nRecently, the increasing incidents of\
    \ food falsiﬁcation have not only brought about great economic\nlosses, but also\
    \ undermined consumers’ conﬁdence in food safety. The blockchain technology with\n\
    decentralization, non-tamperability, development transparency and machine autonomy\
    \ features\nbrings new solutions to the above problems [130,131]. Tian et al.\
    \ reported a new decentralized\ntraceability system based on IoT and blockchain\
    \ technology, which can provid an open, transparent,\nneutral, safe and reliable\
    \ information platform for producers, governments, consumers and other\nstakeholders\
    \ [132]. Kaijun et al. combined the supply chain and blockchain technology to\
    \ propose\nSensors 2019, 19, 1833\n14 of 24\na double chain architecture agricultural\
    \ traceability system by studying the dual chain structure and\nits storage mode,\
    \ resource rent-seeking and matching mechanism and consensus algorithm [133].\n\
    Now, with the innovation and maturity of related technologies, it is not diﬃcult\
    \ for researchers to\ndevelop a complete set of traceability systems. The rise\
    \ of artiﬁcial intelligence technology enables\nexisting traceability systems\
    \ to provide automation, intelligence and human services to businesses\nand consumers.\
    \ Chen et al. adopted fuzzy cognitive maps and fuzzy rule method to come up with\n\
    an autonomous tracing system for backward design in food supply chain based on\
    \ IoT, which better\ntraced food product problems [134]. However, there are still\
    \ some problems in food safety traceability.\nIt is worth noting that the current\
    \ agricultural product safety traceability system only focuses on\na certain level\
    \ of supply chain or a certain type of goods. With the participation of multiple\
    \ projects\nor multiple sessions, we believe that the focus of future research\
    \ should be on more complex and\nsystematic supply chains.\n5. Disscussion\n5.1.\
    \ Hardware and Software Challenges\nWhen IoT technology is applying in protected\
    \ agriculture, it is inevitable to encounter challenges\nfrom all aspects. In\
    \ the perception layer, various devices must face the harsh and complex greenhouse\n\
    environment. Strong solar radiation, high temperatures, high humidity, strong\
    \ vibrations and other\nhazards can easily damage or destroy sensors or end devices.\
    \ Moreover, the daily activities of livestock\ncan interfere with the work of\
    \ the sensor or execution nodes, resulting in poor detection and control.\nIn\
    \ a general way, the information collection nodes rely on the battery with limited\
    \ power to maintain\nits work because the behavior of frequent battery replacement\
    \ consume a lot of energies and money.\nTherefore, it is an urgent need to make\
    \ great progress in developing low-power acquisition equipment,\nenergy-saving\
    \ sink node routing protocols and energy-balanced communication algorithms [135].\n\
    The devices places in various places generate incalculable data and the storage\
    \ of such data\nis also a huge challenge for some small servers.\nThose agricultural\
    \ IoT data have real-time,\ndynamic, granular and fragmented characteristics,\
    \ which brings great challenges to intermediate\ndesign, data large-scale screening,\
    \ screening, mining, processing and decision analysis techniques.\nMoreover, existing\
    \ databases cannot store unstructured data such as audio, video and images. As\
    \ a result,\nquite a lot real-time sensing data are not fully exploited. Besides,\
    \ some models and algorithms are not\nenough to to reﬂect objective reality, so\
    \ that they cannot eﬀectively guide agricultural production.\n5.2. Network Challenge\n\
    In protected agriculture, the sensor and device need to continuously operate under\
    \ the harsh\nand varied environment and their arrangement is sparse and irregular.\
    \ Compared with the wired\nnetwork with high wiring costs, the wireless network\
    \ has the advantages of low cost, good networking\nﬂexibility and high scalability\
    \ and therefore becomes the main application mode of the current\nmonitoring system.\
    \ Many actual deployments have displayed that common wireless communication\n\
    technologies are aﬀected by temperature, humidity andbuildings or other spatial\
    \ barriers [136–138].\nThe growth of animals and plants changes also result in\
    \ background noise [139] because of the\nmulti-path propagation eﬀects, which\
    \ lows reliability of data transmission. It is easy to isolate a node in\nthe\
    \ original communication network due to low node deployment density and the above\
    \ obstacles in\nprotected agriculture. If this node is responsible for communication\
    \ routing tasks of many devices and\nthis node is damaged and isolated from the\
    \ network, this will cause partial or even paralysis of most of\nthe network.\
    \ Most relevant theories and research needes on the eﬀects of the crop growth,\
    \ the thickness\nand material of wall, and the radio signal transmission loss\
    \ and electromagnetic wave transmission\nbetween soil and air interface, etc.\
    \ To determine the optimal position, height and network topology\nof sensor nodes\
    \ under diﬀerent environmental conditions. On the other hand, ad hoc intelligent\n\
    wireless network technology is needed to reduce or avoid paralysis of large-area\
    \ networks. The rise of\nSensors 2019, 19, 1833\n15 of 24\nLPWAN may solve e above\
    \ paralysis problems of WLAN due to its long communication distance,\nwhich obviates\
    \ the need for the dense and expensive deployments of relays and gateways altogether.\n\
    However, the cost of erecting LPWAN base stations is high.\nThe process of recording\
    \ various agricultural products’ status from the ﬁeld to the table\ngenerates\
    \ a large amount of data, which brings great challenges to wireless communication\
    \ with\na low transmission rate. At same times, it also brought network nodes\
    \ many problems in energy\ndistribution, data calculation, storage and communication.\
    \ Therefore, there is an urgent need to\ndevelop high-capacity data and real-time\
    \ broadband communication standards for technologies in\ncomplex agricultural\
    \ application environments.\n5.3. Security Challenge\nThe problems of security\
    \ and privacy are thought as crucial challenges in applications of protected\n\
    agriculture due to real-world examples of losses due to vulnerabilities, network\
    \ attacks or privacy issues.\nAs a multi-network heterogeneous converged network,\
    \ it not only has the same security problems as\nsensor networks, mobile communication\
    \ networks and the Interne, but also has its particular issues\nsuch as privacy\
    \ protection issues, authentication and access control issues for heterogeneous\
    \ networks,\nstorage and management of information issues, etc.\nIn the perception\
    \ layer, security threats are mainly against the WSN and RFID. In agricultural\n\
    applications, many of the sensor nodes are deployed in the long-term unsupervised\
    \ farmland\nenvironment and the wireless network itself is open, so the wireless\
    \ transmission is vulnerable to\nexternal interference and illegal users. Coupled\
    \ with the fact that these devices are respectively\nplaced elsewhere, a single\
    \ security measure is not enough [140]. The main threats to WSN include\neavesdropping\
    \ attack, node capture, replay attack and information wiretapping. So multiple\
    \ security\nmechanisms such as anonymity mechanism, data encryption and identity\
    \ authentication mechanisms\nare necessary [141,142].\nThe security threat of\
    \ RFID refers mainly to the attacks that are encountered when the RFID\nreader\
    \ and the tag communicate and such attacks usually lead to user privacy. In addition,\
    \ because the\nRFID tag is rewritable, the security and validity of the RFID tag\
    \ data will not be guaranteed.\nThere are lots of ways to enhance RFID tag security\
    \ such as modifying tag frequency, enciphered data.\nSensor nodes are diﬀerent\
    \ from RFID tag because they are active and relate to the dynamic properties of\n\
    things. Therefore, when applying encryption algorithms, key distribution policies,\
    \ intrusion detection\nmechanisms and security routing policies in speciﬁc devices,\
    \ we need to consider the limitations of\ntheir own hardware.\nSince networks\
    \ of diﬀerent architectures need to be connected to each other, there are even\n\
    greater challenges in terms of security authentication across network architectures.\
    \ The transport\nlayer will encounter the following security challenges: proxy\
    \ attacks, DoS (Denial-of-Service) attacks,\nmalicious code injection, man-in-the-middle\
    \ attacks, attacks across heterogeneous networks, etc.\nThe common measures dealt\
    \ with these network layer threats and attacks are: authorization,\nauthentication,\
    \ encryption, anti-virus protection, etc. IoT terminal devices in protected agriculture\n\
    have the characteristics of weak computing power and small storage space. Due\
    \ to limited resources,\nIoT encryption technology must be an easy to implement,\
    \ lightweight security technology that is\nsuitable for use in sensitive information\
    \ environments [143,144].\nWhen massive agricultural data is transmitted to the\
    \ application layer, in addition to the intelligent\nprocessing of data, data\
    \ security and privacy should also be considered. At this level, a large amount\n\
    of private data about users is collected, such as the consumption of agricultural\
    \ materials, the purchase\ninformation of fruits and vegetables and the location\
    \ of agricultural machinery. Therefore, the database\naccess control strategy\
    \ should be strengthened on the basis of intelligent data processing. When diﬀerent\n\
    users access the same data, they should limit their permissions and operations\
    \ according to their security\nlevel or identity, eﬀectively ensuring data security\
    \ and privacy. On the other hand, application layer\nservice providers should\
    \ accelerate the development and upgrade of authentication mechanisms\nSensors\
    \ 2019, 19, 1833\n16 of 24\nand encryption mechanisms for application scenarios\
    \ such as agricultural production, processing,\ntransportation and consumption.\n\
    5.4. Other Challenges\nThere are other challenges that need to be addressed, which\
    \ are related to the further application of\nIoT technology in protected agriculture.\
    \ Thousands of devices which have huge diﬀerences in processor,\nmemory, communication\
    \ protocol and programming language are deployed in protected agriculture,\nwhich\
    \ inevitably results in heterogeneity issues. Besides, most of devices in protected\
    \ agriculture are\nconnected to the cloud or others by the non-standard heterogeneous\
    \ interfaces [14,22]. This has led\nto problems of both device heterogeneity and\
    \ data heterogeneity. The device heterogeneity problem\naﬀects the scalability\
    \ of IoT in protected agriculture and the data heterogeneity problem hinders the\n\
    use of fusion information by models [145]. Although many research institutes,\
    \ hardware and software\nmanufacturers and related organizations have made a lot\
    \ of contributions to the standardization and\ndeployment of IoT in agriculture,\
    \ it still needs to establish a complete and clear structure, protocols and\n\
    standards to connect various heterogeneous devices and services [146,147].\nThe\
    \ cost has always been a barrier to the large-scale application of IoT to ordinary\
    \ farmers,\nespecially in developing countries like China and India. Despite a\
    \ large number of embedded devices\nand platforms have emerged and the cost of\
    \ hardware and software is rapidly decreasing, but here is\nanother situation\
    \ in high-quality and high-precision sensors and devices. Moreover, some funds\
    \ are\nneeded to train farmers to become proﬁcient in the use of IoT equipment.\
    \ In order to be able toplay\na better role in the future, the cost of sensing,\
    \ transmission, analysis and application components and\nequipment on the IoT\
    \ need to further reduce in order to lower the price and make it more aﬀordable\n\
    in the next decade [148]. Government departments should recognize the signiﬁcant\
    \ potential for the\ndevelopment of IoT in protected agriculture and increase\
    \ investment and support through policies and\nfunds to attract more capital and\
    \ achieve rapid development and application.\nIn addition, the usability of the\
    \ terminal device needs to be further improved, for example, the user\ninterface\
    \ needs to be friendlier andthe device needs to be more convenient in size and\
    \ easy to carry.\nIoT brings many beneﬁts to ecological environment and brings\
    \ some problems.. More and\nmore equipment is being placed in agriculture andso\
    \ the issues of environmental friendliness should\nreceive some attention in the\
    \ future. As the e-waste generated by IoT devices and the consumption of\nenergy\
    \ are gradually increasing, the sustainable development of the ecological environment\
    \ is also one\ncommon concern. Examples of interesting research topics include\
    \ the use of degradable materials and\nrenewable energy sources, the reduction\
    \ of equipment size and the use of energy-saving algorithms\nand new green ICT\
    \ technology [149,150].\nThe application of the Internet of Things in facility\
    \ agriculture needs to consider the socio-economic\nconsequences. On the one hand,\
    \ it increases the level of intelligence in agricultural monitoring,\ncontrol\
    \ and decision-making, thereby increasing the eﬃciency and quality of agricultural\
    \ production.\nAt the same time, it will also change the demand for the existing\
    \ agricultural workforce, causing some\npeople who are engaged in simple repetitive\
    \ tasks to lose their jobs, which will cause a series of\nsocial problems.\n5.5.\
    \ Future Prospects\nIoT technology is being applied to many ﬁelds of society,\
    \ economy and life at an unprecedented\nspeed, making human society step into\
    \ a new era of high intelligence. IoT technology is evolving\nand mature, and\
    \ many novel deployments and applications are constantly being built in protected\n\
    agriculture. Based on the above analysis and discussion of the key technologies\
    \ and applications of IoT\nin the protection of agriculture, we will present its\
    \ future development prospects and key research and\ndevelopment directions in\
    \ the following aspects. In the perception layer, the development of sensors\n\
    should focus on new sensitive materials, mechanisms, processes and methodologies\
    \ as well as low\npower consumption and low cost. Besides, we must accelerate\
    \ the development of sensors and rapid\nSensors 2019, 19, 1833\n17 of 24\ndetection\
    \ devices soil, animal and plant life. At the network layer, we should focus on\
    \ high-capacity data\nreal-time broadband communication standards and technologies\
    \ for complex agricultural application\nenvironments, high-reliability, adaptive,\
    \ low-power network deployment and management strategies\nand algorithms. With\
    \ wide coverage, high capacity, low power consumption and low cost, LPWAN is\n\
    ideal for some agricultural scenarios where text-based, video and voice service\
    \ support is not required\nand coverage, power consumption and cost are critical.\
    \ Future research and deployment should\nfocus on IoT solutions based on LPWAN.\
    \ In the application layer, governments and organizations\nshould develop uniﬁed\
    \ standards for the sensors and identiﬁcation interface devices, data transmission\n\
    communication protocols, multi-source data fusion analysis processing and application\
    \ services in\nprotected agriculture through international cooperation or negotiation.\
    \ Software developers should\ndevelop large open source databases and signal processing\
    \ algorithm libraries for diﬀerent areas\nof facility agriculture. For universities\
    \ and research institutes, cloud-based agricultural intelligent\ndecision-making\
    \ models, multi-source data-based information fusion algorithms, agricultural\
    \ Big Data\nmining technologies, distributed intelligent processing systems and\
    \ lightweight IoT authentication,\nencryption and authorization mechanisms will\
    \ be the key research directions for the future. With an\nincreased presence of\
    \ IoT technology in protected agriculture, its potential for the reﬁned management\n\
    of crop, livestock and aquatic animals will be recognized. Besides, as a technical\
    \ means to monitor\nthe production, processing, circulation and consumption of\
    \ agricultural products, IoTwill play an\nincreasingly important role in food\
    \ safety.\n6. Conclusions\nIn this survey, we present a comprehensive review of\
    \ the state-of-the-art in IoT deployment\nfor protected agriculture applications.\
    \ First, a simple review of previous IoT structure was given.\nSecondly, the basic\
    \ IoT architectures in protected agriculture were introduced. Next, discussions\
    \ of\nsensor, data communication, cloud computing, edge computing, ML and other\
    \ vital IoT technologies\nin protected agriculture are elaborated.\nThen, we highlight\
    \ various IoT applications and their\npotential to solve various farming problems\
    \ in protected agriculture. By classifying the research and\ndeployment literature\
    \ on IoT in protected agriculture, three important application ﬁelds were given:\n\
    plant management, animal farming and agri-food supply chain traceability. Finally,\
    \ a detailed analyses\nof IoT research challenges and future prospects were outlined.\n\
    The survey of the existing works directs us concluding remarks. The future prospects\
    \ of IoT in\nprotected agriculture are expectant, but the challenges mentioned\
    \ above must handle. In order to\ncope with its complex and changing agricultural\
    \ environment, the hardware devices must be fully\nupgraded to further enhance\
    \ their universality, reliability, expansibility, endurance and intelligence\n\
    level, while reducing costs and operative diﬃculty. Secondly, the local network\
    \ must be protected from\ninterference from other networks. In addition, the interoperability,\
    \ ﬁltering and semantic annotation of\ndata generated by the various devices of\
    \ IoT must be realized to a certain extent. Only in this way\ncan we optimize\
    \ the Big Data decision support model by using a large amount of heterogeneous\
    \ data.\nSecurity, anonymity and control over the access rights on the information\
    \ is vital for such a system to\nbe adopted. Finally, the impact of IoT on the\
    \ agroecological environment and social economy should\nbe considered in the application\
    \ of protected agriculture, to realize the sustainable development of\nagricultural\
    \ environment as quick as possible.\nAuthor Contributions: The collection, classiﬁcation\
    \ and arrangement of references were done by Q.Z., H.L.\nThe Writing and revising\
    \ of this article were done by X.S. (Xiaojie Shi), X.A., X.S. (Xia Sun), L.X.\
    \ The Drawing of\ntables and pictures were done by Y.G. The work presented in\
    \ the paper was conceived within research projects led\nby X.S. (Xia Sun), Y.G.\n\
    Funding: This article was supported by National Natural Science Foundation of\
    \ China (No. 31772068, 31701681,\n31872909), Special Project of Independent Innovation\
    \ of Shandong Province (2018CXGC0214), Shandong Provincial\nNatural Science Foundation\
    \ (ZR2016CM29, ZR2017BC001, ZR2018ZC0126, ZR2018BC055), Key Research and\nInvention\
    \ Program of Shandong Province (2017GNC10119), Key Innovative project for 2017\
    \ Major Agriculture\nApplication Technology of Shandong Province.\nSensors 2019,\
    \ 19, 1833\n18 of 24\nConﬂicts of Interest: The authors declare no conﬂict of\
    \ interest.\nReferences\n1.\nSarma, S.;\nDavid, L.B.;\nKevin, J.A. The Networked\
    \ Physical World Proposals for Engineering\nthe Next Generation of Computing,\n\
    Commerce & Automatic-Identiﬁcation.\nAvailable online:\nhttps://www.semanticscholar.org/paper/The-Networked-Physical-World-Proposals-for-the-Next-Sarma-\n\
    Brock/88b4a255082d91b3c88261976c85a24f2f92c5c3#paper-header (accessed on 13 April\
    \ 2019).\n2.\nPeña-López, I. ITU Internet Report 2005: The Internet of Things;\
    \ International Telecommunication Union:\nGeneva, Switzerland, 2005.\n3.\nRay,\
    \ P.P. A survey on Internet of Things architectures. J. King Saud Univ. Comput.\
    \ Inf. Sci. 2018, 30, 291–319.\n4.\nIslam, S.R.; Kwak, D.; Kabir, M.H.; Hossain,\
    \ M.; Kwak, K.S. The internet of things for health care:\nA comprehensive survey.\
    \ IEEE Access 2015, 3, 678–708.\n5.\nAsghari, P.; Rahmani, A.M.; Javadi, H.H.S.\
    \ Internet of Things applications: A systematic review. Comput. Netw.\n2019, 148,\
    \ 241–261.\n6.\nJensen, M.H.; Malter, A.J. Protected Agriculture: A Global Review;\
    \ World Bank Publications: Washington, DC, USA, 1995.\n7.\nMekala, M.S.; Viswanathan,\
    \ P. A Survey: Smart agriculture IoT with cloud computing. In Proceedings of the\n\
    2017 International conference on Microelectronic Devices, Circuits and Systems\
    \ (ICMDCS), Vellore, India,\n10–12 August 2017; pp. 1–7.\n8.\nKamilaris, A.; Prenafeta-Boldú,\
    \ F.X. Deep learning in agriculture: A survey. Comput. Electron. Agric.\n2018,\
    \ 147, 70–90.\n9.\nWolfert, S.; Ge, L.; Verdouw, C.; Bogaardt, M.-J. Big Data\
    \ in Smart Farming—A review. Agric. Syst. 2017, 153, 69–80.\n10.\nDlodlo, N.;\
    \ Kalezhi, J. The internet of things in agriculture for sustainable rural development.\
    \ In Proceedings\nof the 2015 International Conference on Emerging Trends in Networks\
    \ and Computer Communications\n(ETNCC), Windhoek, Namibia, 17–20 May 2015; pp.\
    \ 13–18.\n11.\nPang, Z.; Chen, Q.; Han, W.; Zheng, L. Value-centric design of\
    \ the internet-of-things solution for food supply\nchain: Value creation, sensor\
    \ portfolio and information fusion. Inf. Syst. Front. 2015, 17, 289–319.\n12.\n\
    Liu, P.; Li, B.; Yu, X. Intelligent Control System of Cucumber Production in the\
    \ Greenhouse Based on Internet\nof Things. In Proceedings of the International\
    \ Conference on Cloud Computing and Security, Haikou, China,\n8–10 June 2018;\
    \ pp. 395–406.\n13.\nMa, J.; Li, X.; Wen, H.; Fu, Z.; Zhang, L. A key frame extraction\
    \ method for processing greenhouse vegetables\nproduction monitoring video. Comput.\
    \ Electron. Agric. 2015, 111, 92–102.\n14.\nTalavera, J.M.; Tobón, L.E.; Gómez,\
    \ J.A.; Culman, M.A.; Aranda, J.M.; Parra, D.T.; Quiroz, L.A.; Hoyos, A.;\nGarreta,\
    \ L.E. Review of IoT applications in agro-industrial and environmental ﬁelds.\
    \ Comput. Electron. Agric.\n2017, 142, 283–297.\n15.\nVerdouw, C.N.; Robbemond,\
    \ R.M.; Verwaart, T.; Wolfert, J.; Beulens, A.J.M. A reference architecture for\n\
    IoT-based logistic information systems in agri-food supply chains. Enterp. Inf.\
    \ Syst. UK 2018, 12, 755–779.\n16.\nKoshizuka, N.; Sakamura, K. Ubiquitous ID:\
    \ Standards for Ubiquitous Computing and the Internet of Things.\nIEEE. Pervas.\
    \ Comput. 2010, 9, 98–101.\n17.\nSinha, N.; Pujitha, K.E.; Alex, J.S.R. Xively\
    \ based sensing and monitoring system for IoT. In Proceedings\nof the 2015 International\
    \ Conference on Computer Communication and Informatics (ICCCI), Coimbatore,\n\
    India, 8–10 January 2015; pp. 1–6.\n18.\nDerhamy, H.; Eliasson, J.; Delsing, J.;\
    \ Priller, P. A survey of commercial frameworks for the internet of things.\n\
    In Proceedings of the 2015 IEEE 20th Conference on Emerging Technologies & Factory\
    \ Automation (ETFA),\nLuxembourg, 8–11 September 2015; pp. 1–8.\n19.\nETSI. Machine-To-Machine\
    \ Communications (M2M): Functional Architecture; International Telecommunication\n\
    Union: Geneva, Switzerland, 2011; Volume 102, p. 690.\n20.\nLa, H.J.; Kim, S.D.\
    \ A Service-Based Approach to Designing Cyber Physical Systems. In Proceedings\
    \ of\nthe 2010 IEEE/ACIS 9th International Conference on Computer and Information\
    \ Science, Yamagata, Japan,\n18–20 August 2010; pp. 895–900.\n21.\nCarrez, F.;\
    \ Bauer, M.; Boussad, M.; Bui, N.; Jardak, C.; De Loof, J.; Magerkurth, C.; Meissner,\
    \ S.; Nettsträter, A.;\nOlivereau, A.; et al. Internet of Things—Architecture\
    \ IoT-A, Deliverable D1. 5—Final Architectural Reference\nModel for the IoT v3.0;\
    \ Framework Programme; European Union: Brussels, Belgium, 2013.\nSensors 2019,\
    \ 19, 1833\n19 of 24\n22.\nGe, W.; Zhao, C. State-of-the-art and developing strategies\
    \ of agricultural internet of things. Trans. Chin. Soc.\nAgric. Mach. 2014, 45,\
    \ 222–230. (In Chinese)\n23.\nAntonacci, A.; Arduini, F.; Moscone, D.; Palleschi,\
    \ G.; Scognamiglio, V. Nanostructured (Bio) sensors for\nsmart agriculture. Trac-Trend.\
    \ Anal. Chem. 2018, 98, 95–103.\n24.\nLi, F.; Wang, X.; Sun, X.; Guo, Y.; Zhao,\
    \ W. A dual-signal ampliﬁcation strategy for kanamycin based on ordered\nmesoporous\
    \ carbon-chitosan/gold nanoparticles-streptavidin and ferrocene labelled DNA.\
    \ Anal. Chim. Acta\n2018, 1033, 185–192. [PubMed]\n25.\nZheng, Y.; Liu, Z.; Jing,\
    \ Y.; Jie, L.; Zhan, H. An acetylcholinesterase biosensor based on ionic liquid\n\
    functionalized graphene–gelatin-modiﬁed electrode for sensitive detection of pesticides.\
    \ Sens. Actuators\nB Chem. 2015, 210, 389–397.\n26.\nJiao, Y.; Fu, J.; Hou, W.;\
    \ Shi, Z.; Guo, Y.; Xia, S.; Yang, Q.; Li, F. Homogeneous electrochemical aptasensor\
    \ based on\na dual amplification strategy for sensitive detection of profenofos\
    \ residues. New J. Chem. 2018, 42, 14642–14647.\n27.\nBao, J.; Huang, T.; Wang,\
    \ Z.; Yang, H.; Geng, X.; Xu, G.; Samalo, M.; Sakinati, M.; Huo, D.; Hou, C.\n\
    3D graphene/copper oxide nano-ﬂowers based acetylcholinesterase biosensor for\
    \ sensitive detection of\norganophosphate pesticides. Sens. Actuators B Chem.\
    \ 2019, 279, 95–101.\n28.\nLi, F.; Guo, Y.; Wang, X.; Sun, X. Multiplexed aptasensor\
    \ based on metal ions labels for simultaneous detection\nof multiple antibiotic\
    \ residues in milk. Biosens. Bioelectron. 2018, 115, 7–13. [PubMed]\n29.\nNegara,\
    \ C.; Vieth, K.-U.; Lafontaine, M.; Freund, M. Automatic Fruit Sorting by Non-Destructive\n\
    Determination\nof\nQuality\nParameters\nUsing\nVisible-near\nInfrared\nto\nImprove\n\
    Wine\nQuality:\nII. Regression Analysis. NIR News 2014, 25, 4–6.\n30.\nWenjun,\
    \ J.; Zhou, S.; Jingyi, H.; Shuo, L. In situ measurement of some soil properties\
    \ in paddy soil using\nvisible and near-infrared spectroscopy. PLoS ONE 2014,\
    \ 9, e105708.\n31.\nShao, Y.; Zhao, C.; Bao, Y.; He, Y. Quantiﬁcation of Nitrogen\
    \ Status in Rice by Least Squares Support Vector\nMachines and Reﬂectance Spectroscopy.\
    \ Food Bioprocess Technol. 2012, 5, 100–107.\n32.\nNie, P.; Dong, T.; He, Y.;\
    \ Qu, F. Detection of soil nitrogen using near infrared sensors based on soil\
    \ pretreatment\nand algorithms. Sensors 2017, 17, 1102. [CrossRef]\n33.\nSoerensen,\
    \ D.D.; Pedersen, L.J. Infrared skin temperature measurements for monitoring health\
    \ in pigs:\nA review. Acta Vet. Scand. 2015, 57, 5.\n34.\nTang, K. Technology\
    \ development of agricultural internet of things in foreign countries and its\
    \ inspiration to\nChina. China Acad. J. Electron. Publ. House 2013, 28, 700–707.\
    \ (In Chinese)\n35.\nKumar, A.; Hancke, G.P. Energy Eﬃcient Environment Monitoring\
    \ System Based on the IEEE 802.15.4\nStandard for Low Cost Requirements. IEEE\
    \ Sens. J. 2014, 14, 2557–2566.\n36.\nCorkery, G.; Ward, S.; Kenny, C.; Hemmingway,\
    \ P. Monitoring environmental parameters in poultry\nproduction facilities. In\
    \ Proceedings of the Computer Aided Process Engineering-CAPE Forum 2013,\nGraz,\
    \ Austria, 7–10 April 2013.\n37.\nRajalakshmi, P.;\nMahalakshmi, S.D. IOT based\
    \ crop-ﬁeld monitoring and irrigation automation.\nIn Proceedings of the 2016\
    \ 10th International Conference on Intelligent Systems and Control (ISCO),\nCoimbatore,\
    \ India, 7–8 January 2016; pp. 1–6.\n38.\nRevathi, S.; Sivakumaran, N. Fuzzy Based\
    \ Temperature Control of Greenhouse. IFAC-PapersOnLine 2016, 49, 549–554.\n39.\n\
    ˇColakovi´c, A.; Hadžiali´c, M. Internet of Things (IoT): A review of enabling\
    \ technologies, challenges, and\nopen research issues. Comput. Netw. 2018, 144,\
    \ 17–39.\n40.\nRaza, U.; Kulkarni, P.; Sooriyabandara, M. Low Power Wide Area\
    \ Networks: An Overview. IEEE Commun.\nSurv. Tutor. 2017, 19, 855–873.\n41.\n\
    Sinha, R.S.; Wei, Y.; Hwang, S.-H. A survey on LPWA technology: LoRa and NB-IoT.\
    \ ICT Express 2017, 3, 14–21.\n42.\nSforza, F. Communications System. U.S. Patent\
    \ US8406275B2, 26 March 2013.\n43.\nNolan, K.E.; Kelly, M.Y.; Nolan, M.; Brady,\
    \ J.; Guibene, W. Techniques for resilient real-world IoT.\nIn Proceedings of\
    \ the 2016 International Wireless Communications and Mobile Computing Conference\n\
    (IWCMC), Paphos, Cyprus, 5–9 September 2016; pp. 222–226.\n44.\nRaza, U.; Camerra,\
    \ A.; Murphy, A.L.; Palpanas, T.; Picco, G.P. Practical data prediction for real-world\
    \ wireless\nsensor networks. IEEE Trans. Knowl. Data Eng. 2015, 27, 2231–2244.\n\
    45.\nMikhaylov, K.; Petaejaejaervi, J.; Haenninen, T. Analysis of capacity and\
    \ scalability of the LoRa low power\nwide area network technology. In Proceedings\
    \ of the European Wireless 2016, 22th European Wireless\nConference, Oulu, Finland,\
    \ 18–20 May 2016; pp. 1–6.\nSensors 2019, 19, 1833\n20 of 24\n46.\nNB-IoT-Enabling\
    \ New Business Opportunities; Tech Rep; Huawei Technol: Shenzhen, China, 2015.\n\
    47.\nSrbinovska, M.; Gavrovski, C.; Dimcev, V.; Krkoleva, A.; Borozan, V. Environmental\
    \ parameters monitoring\nin precision agriculture using wireless sensor networks.\
    \ J. Clean. Prod. 2015, 88, 297–307.\n48.\nFerentinos, K.P.; Katsoulas, N.; Tzounis,\
    \ A.; Bartzanas, T.; Kittas, C. Wireless sensor networks for greenhouse\nclimate\
    \ and plant condition assessment. Biosyst. Eng. 2017, 153, 70–81.\n49.\nOjha,\
    \ T.; Misra, S.; Raghuwanshi, N.S. Wireless sensor networks for agriculture: The\
    \ state-of-the-art in\npractice and future challenges. Comput. Electron. Agric.\
    \ 2015, 118, 66–84.\n50.\nMell, P.; Grance, T. The NIST Definition of Cloud Computing;\
    \ U.S. Department of Commerce: Washington, DC, USA, 2011.\n51.\nHashem, I.A.T.;\
    \ Yaqoob, I.; Anuar, N.B.; Mokhtar, S.; Gani, A.; Ullah Khan, S. The rise of “big\
    \ data” on cloud\ncomputing: Review and open research issues. Inf. Syst. 2015,\
    \ 47, 98–115.\n52.\nNativi, S.; Mazzetti, P.; Santoro, M.; Papeschi, F.; Craglia,\
    \ M.; Ochiai, O. Big data challenges in building the\nglobal earth observation\
    \ system of systems. Environ. Model. Softw. 2015, 68, 1–26.\n53.\nRupanagudi,\
    \ S.R.; Ranjani, B.S.; Nagaraj, P.; Bhat, V.G.; Thippeswamy, G. A novel cloud\
    \ computing\nbased smart farming system for early detection of borer insects in\
    \ tomatoes. In Proceedings of the 2015\nInternational Conference on Communication,\
    \ Information & Computing Technology (ICCICT), Mumbai,\nIndia, 15–17 January 2015;\
    \ pp. 1–6.\n54.\nFerrández-Pastor, F.J.; García-Chamizo, J.M.; Nieto-Hidalgo,\
    \ M.; Mora-Pascual, J.; Mora-Martínez, J.\nDeveloping Ubiquitous Sensor Network\
    \ Platform Using Internet of Things: Application in Precision\nAgriculture. Sensors\
    \ 2016, 16, 1141. [CrossRef]\n55.\nBotta, A.; de Donato, W.; Persico, V.; Pescapé,\
    \ A. Integration of Cloud computing and Internet of Things:\nA survey. Future\
    \ Gener. Comput. Syst. 2016, 56, 684–700.\n56.\nSatyanarayanan, M. The emergence\
    \ of edge computing. Computer 2017, 50, 30–39.\n57.\nShi, W.; Dustdar, S. The\
    \ Promise of Edge Computing. Computer 2016, 49, 78–81.\n58.\nShi, W.; Cao, J.;\
    \ Zhang, Q.; Li, Y.; Xu, L. Edge computing: Vision and challenges. IEEE Internet\
    \ Things 2016, 3, 637–646.\n59.\nBiamonte, J.; Wittek, P.; Pancotti, N.; Rebentrost,\
    \ P.; Wiebe, N.; Lloyd, S. Quantum machine learning. Nature\n2017, 549, 195–202.\n\
    60.\nRehman, T.U.; Mahmud, M.S.; Chang, Y.K.; Jin, J.; Shin, J. Current and future\
    \ applications of statistical machine\nlearning algorithms for agricultural machine\
    \ vision systems. Comput. Electron. Agric. 2019, 156, 585–605.\n61.\nZheng, B.;\
    \ Myint, S.W.; Thenkabail, P.S.; Aggarwal, R.M. A support vector machine to identify\
    \ irrigated crop\ntypes using time-series Landsat NDVI data. Int. J. Appl. Earth.\
    \ Obs. 2015, 34, 103–112.\n62.\nLeCun, Y.; Bengio, Y.; Hinton, G. Deep learning.\
    \ Nature 2015, 521, 436–444. [PubMed]\n63.\nEdwards-Murphy, F.; Magno, M.; Whelan,\
    \ P.M.; O’Halloran, J.; Popovici, E.M. b+ WSN: Smart beehive with\npreliminary\
    \ decision tree analysis for agriculture and honey bee health monitoring. Comput.\
    \ Electron. Agric.\n2016, 124, 211–219.\n64.\nRussell, S.J.; Norvig, P. Artificial\
    \ Intelligence: A Modern Approach; Pearson Education Limited: New York, NY, USA,\
    \ 2018.\n65.\nDubey, S.R.; Jalal, A.S. Adapted Approach for Fruit Disease Identiﬁcation\
    \ using Images. Image Process.\nConcepts Methodol. Tools Appl. 2014, 2, 51–65.\n\
    66.\nGili, A.; Álvarez, C.; Bagnato, R.; Noellemeyer, E. Comparison of three methods\
    \ for delineating management\nzones for site-speciﬁc crop management. Comput.\
    \ Electron. Agric. 2017, 139, 213–223.\n67.\nLiu, S.; Cossell, S.; Tang, J.; Dunn,\
    \ G.; Whitty, M. A computer vision system for early stage grape yield\nestimation\
    \ based on shoot detection. Comput. Electron. Agric. 2017, 137, 88–101.\n68.\n\
    Shakoor, N.; Lee, S.; Mockler, T.C. High throughput phenotyping to accelerate\
    \ crop breeding and monitoring\nof diseases in the ﬁeld. Curr. Opin. Plant Biol.\
    \ 2017, 38, 184–192.\n69.\nCrossa, J.; Pérez-Rodríguez, P.; Cuevas, J.; Montesinos-López,\
    \ O.; Jarquín, D.; de los Campos, G.; Burgueño, J.;\nGonzález-Camacho, J.M.; Pérez-Elizalde,\
    \ S.; Beyene, Y.; et al. Genomic Selection in Plant Breeding: Methods,\nModels,\
    \ and Perspectives. Trends Plant Sci. 2017, 22, 961–975.\n70.\nMontesinos-López,\
    \ O.A.;\nMartín-Vallejo, J.;\nCrossa, J.;\nGianola, D.;\nHernández-Suárez, C.M.;\n\
    Montesinos-López, A.; Juliana, P.; Singh, R. A benchmarking between deep learning,\
    \ support vector\nmachine and Bayesian threshold best linear unbiased prediction\
    \ for predicting ordinal traits in plant breeding.\nG3 Genes Genomes Genet. 2019,\
    \ 9, 601–618.\n71.\nKyosuke, Y.; Wei, G.; Yosuke, Y.; Seishi, N. On plant detection\
    \ of intact tomato fruits using image analysis\nand machine learning methods.\
    \ Sensors 2014, 14, 12191–12206. [CrossRef]\nSensors 2019, 19, 1833\n21 of 24\n\
    72.\nRahnemoonfar, M.; Sheppard, C. Deep count: Fruit counting based on deep simulated\
    \ learning. Sensors\n2017, 17, 905. [CrossRef]\n73.\nBendre, M.R.; Thool, R.C.;\
    \ Thool, V.R. Big data in precision agriculture: Weather forecasting for future\
    \ farming.\nIn Proceedings of the 2015 1st International Conference on Next Generation\
    \ Computing Technologies (NGCT),\nDehradun, India, 4–5 September 2015; pp. 744–750.\n\
    74.\nZhou, K.; Fu, C.; Yang, S. Big data driven smart energy management: From\
    \ big data to big insights.\nRenew. Sustain. Energy Rev. 2016, 56, 215–225.\n\
    75.\nKamilaris, A.; Kartakoullis, A.; Prenafeta-Boldú, F.X. A review on the practice\
    \ of big data analysis in\nagriculture. Comput. Electron. Agric. 2017, 143, 23–37.\n\
    76.\nTeitel, M.; Atias, M.; Barak, M. Gradients of temperature, humidity and CO2\
    \ along a fan-ventilated greenhouse.\nBiosyst. Eng. 2010, 106, 166–174.\n77.\n\
    López, A.; Valera, D.L.; Molina-Aiz, F.D.; Peña, A. Sonic anemometry to evaluate\
    \ airﬂow characteristics\nandtemperature distribution in empty Mediterranean greenhouses\
    \ equipped with pad–fan and fog systems.\nBiosyst. Eng. 2012, 113, 334–350.\n\
    78.\nSreekantha, D.K.; Kavya, A.M. Agricultural crop monitoring using IOT—A study.\
    \ In Proceedings of\nthe 2017 11th International Conference on Intelligent Systems\
    \ and Control (ISCO), Coimbatore, India,\n5–6 January 2017; pp. 134–139.\n79.\n\
    Kodali, R.K.; Jain, V.; Karagwal, S. IoT based smart greenhouse. In Proceedings\
    \ of the 2016 IEEE Region 10\nHumanitarian Technology Conference (R10-HTC), Agra,\
    \ India, 21–23 December 2016; pp. 1–6.\n80.\nMat, I.; Kassim, M.R.M.; Harun, A.N.;\
    \ Yusoﬀ, I.M. IoT in Precision Agriculture applications using Wireless\nMoisture\
    \ Sensor Network. In Proceedings of the 2016 IEEE Conference on Open Systems (ICOS),\
    \ Langkawi,\nMalaysia, 10–12 October 2016; pp. 24–29.\n81.\nCarmassi, G.; Bacci,\
    \ L.; Bronzini, M.; Incrocci, L.; Maggini, R.; Bellocchi, G.; Massa, D.; Pardossi,\
    \ A.\nModelling transpiration of greenhouse gerbera (Gerbera jamesonii H. Bolus)\
    \ grown in substrate with saline\nwater in a Mediterranean climate. Sci. Hortic.\
    \ 2013, 156, 9–18.\n82.\nLi, D.; Xu, L.; Tan, C.; Goodman, E.; Fu, D.; Xin, L.\
    \ Digitization and visualization of greenhouse tomato\nplants in indoor environments.\
    \ Sensors 2015, 15, 4019–4051. [CrossRef]\n83.\nSingh, M.C.; Singh, J.P.; Singh,\
    \ K.G. Development of a microclimate model for prediction of temperatures\ninside\
    \ a naturally ventilated greenhouse under cucumber crop in soilless media. Comput.\
    \ Electron. Agric.\n2018, 154, 227–238.\n84.\nChangqing, C.; Hui, L.; Wenjun,\
    \ H. Internet of Agriculture-Based Low Cost Smart Greenhouse Remote\nMonitor System.\n\
    In Proceedings of the 2018 Chinese Automation Congress (CAC), Zhejiang, China,\n\
    30 November 2018; pp. 3940–3945.\n85.\nHe, C.; Shen, M.; Liu, L.; Okinda, C.;\
    \ Yang, J.; Shi, H. Design and realization of a greenhouse temperature\nintelligent\
    \ control system based on NB-IoT. J. South China Agric. Univ. 2018, 39, 117–124.\n\
    86.\nDan, L.I.U.; Xin, C.; Chongwei, H.; Liangliang, J. Intelligent agriculture\
    \ greenhouse environment monitoring\nsystem based on IOT technology. In Proceedings\
    \ of the 2015 IEEE International Conference on Intelligent\nTransportation, Big\
    \ Data and Smart City, Halong Bay, Vietnam, 19–20 December 2015; pp. 487–490.\n\
    87.\nElijah, O.; Rahman, T.A.; Orikumhi, I.; Leow, C.Y.; Hindia, M.N. An Overview\
    \ of Internet of Things (IoT) and\nData Analytics in Agriculture: Beneﬁts and\
    \ Challenges. IEEE Internet Things J. 2018, 5, 3758–3773.\n88.\nDeng, X.; Dou,\
    \ Y.; Hu, D. Robust closed-loop control of vegetable production in plant factory.\n\
    Comput. Electron. Agric. 2018, 155, 244–250.\n89.\nLiao, M.S.; Chen, S.F.; Chou,\
    \ C.Y.; Chen, H.Y.; Yeh, S.H.; Chang, Y.C.; Jiang, J.A. On precisely relating\
    \ the\ngrowth of Phalaenopsis leaves to greenhouse environmental factors by using\
    \ an IoT-based monitoring\nsystem. Comput. Electron. Agric. 2017, 136, 125–139.\n\
    90.\nZamora-Izquierdo, M.A.; Santa, J.; Martínez, J.A.; Martínez, V.; Skarmeta,\
    \ A.F. Smart farming IoT platform\nbased on edge and cloud computing. Biosyst.\
    \ Eng. 2019, 177, 4–17.\n91.\nKatsoulas, N.; Bartzanas, T.; Kittas, C. Online\
    \ professional irrigation scheduling system for greenhouse crops.\nActa Hortic.\
    \ 2017, 1154, 221–228.\n92.\nLarsen, A.E.; Patton, M.; Martin, E.A. High highs\
    \ and low lows: Elucidating striking seasonal variability in\npesticide use and\
    \ its environmental implications. Sci. Total Environ. 2019, 651, 828–837.\n93.\n\
    Silva, V.; Mol, H.G.J.; Zomer, P.; Tienstra, M.; Ritsema, C.J.; Geissen, V. Pesticide\
    \ residues in European\nagricultural soils—A hidden reality unfolded. Sci. Total\
    \ Environ. 2019, 653, 1532–1545.\nSensors 2019, 19, 1833\n22 of 24\n94.\nPixia,\
    \ D.; Xiangdong, W. Recognition of greenhouse cucumber disease based on image\
    \ processing technology.\nOpen J. Appl. Sci. 2013, 3, 27.\n95.\nAhmed, R.Z.; Biradar,\
    \ R.C.; Chaudhari, S.S. Cluster-based data aggregation for pest identiﬁcation\
    \ in coﬀee\nplantations using wireless sensor networks. Comput. Electr. Eng. 2016,\
    \ 56, 591–607.\n96.\nTirelli, P.; Borghese, N.A.; Pedersini, F.; Galassi, G.;\
    \ Oberti, R. Automatic monitoring of pest insects traps\nby Zigbee-based wireless\
    \ networking of image sensors. In Proceedings of the 2011 IEEE International\n\
    Instrumentation and Measurement Technology Conference, Binjiang, China, 10–12\
    \ May 2011; pp. 1–5.\n97.\nAhouandjinou, A.S.R.M.; Kiki, P.M.A.F.; Assogba, K.\
    \ Smart environment monitoring system by using\nsensors ultrasonic detection of\
    \ farm pests. In Proceedings of the 2017 2nd International Conference on\nBio-engineering\
    \ for Smart Technologies (BioSMART), Paris, France, 30 August–1 September 2017;\
    \ pp. 1–5.\n98.\nFoughali, K.; Fathallah, K.; Frihida, A. Using Cloud IOT for\
    \ disease prevention in precision agriculture.\nProcedia Comput. Sci. 2018, 130,\
    \ 575–582.\n99.\nKim, Y.-B.; Choi, D.-O. Design of Business Management System\
    \ for Livestock Pens Based of IoT. J. Korean\nEntertain. Ind. Assoc. 2014, 8,\
    \ 207–216.\n100. Ilapakurti, A.; Vuppalapati, C. Building an IoT Framework for\
    \ Connected Dairy.\nIn Proceedings\nof the 2015 IEEE First International Conference\
    \ on Big Data Computing Service and Applications,\nRedwood City, CA, USA, 30 March–2\
    \ April 2015; pp. 275–285.\n101. Oriwoh, E.; Sant, P.; Epiphaniou, G. Guidelines\
    \ for internet of things deployment approaches–the thing\ncommandments. Procedia\
    \ Comput. Sci. 2013, 21, 122–131.\n102. Chen, J.; Sung, W.; Lin, G. Automated\
    \ Monitoring System for the Fish Farm Aquaculture Environment.\nIn Proceedings\
    \ of the 2015 IEEE International Conference on Systems, Man and Cybernetics, Kowloon,\n\
    China, 9–12 October 2015; pp. 1161–1166.\n103. Vijayakumar, N.; Ramya, R. The\
    \ real time monitoring of water quality in IoT environment. In Proceedings of\n\
    the 2015 International Conference on Innovations in Information, Embedded and\
    \ Communication Systems\n(ICIIECS), Coimbatore, India, 19–20 March 2015; pp. 1–5.\n\
    104. Wiranto, G.; Mambu, G.A.; Hiskia; Hermida, I.D.P.; Widodo, S. Design of online\
    \ data measurement and automatic\nsampling system for continuous water quality\
    \ monitoring. In Proceedings of the 2015 IEEE International Conference\non Mechatronics\
    \ and Automation (ICMA), Beijing, China, 2–5 August 2015; pp. 2331–2335.\n105.\
    \ Scalera, A.; Brizzi, P.; Tomasi, R.; Gregersen, T.; Mertens, K.; Maselyne, J.;\
    \ Van den Weghe, H. The PigWise\nproject: A novel approach in livestock farming\
    \ through synergistic performances monitoring at individual\nlevel. In Proceedings\
    \ of the Conference on Sustainable Agriculture through ICT Innovation, Turin,\
    \ Italy,\n24–27 June 2013; pp. 1–8.\n106. Memon, M.H.; Kumar, W.; Memon, A.; Chowdhry,\
    \ B.S.; Aamir, M.; Kumar, P. Internet of Things (IoT)\nenabled smart animal farm.\
    \ In Proceedings of the 2016 3rd IEEE International Conference on Computing for\n\
    Sustainable Global Development, New Delhi, India, 16–18 March 2016; pp. 2067–2072.\n\
    107. Encinas, C.; Ruiz, E.; Cortez, J.; Espinoza, A. Design and implementation\
    \ of a distributed IoT system for\nthe monitoring of water quality in aquaculture.\
    \ In Proceedings of the 2017 Wireless Telecommunications\nSymposium (WTS), Chicago,\
    \ IL, USA, 26–28 April 2017; pp. 1–7.\n108. Soto-Zarazúa, G.M.; Peniche-Vera,\
    \ R.; Rico-García, E.; Toledano-Ayala, M.; Ocampo-Velázquez, R.;\nHerrera-Ruiz,\
    \ G. An automated recirculation aquaculture system based on fuzzy logic control\
    \ for aquaculture\nproduction of tilapia (Oreochromis niloticus). Aquacult. Int.\
    \ 2011, 19, 797–808.\n109. Stutz, P.V.; Golani, L.K.; Witkin, J.M. Animal models\
    \ of fatigue in major depressive disorder. Physiol. Behav.\n2019, 199, 300–305.\
    \ [PubMed]\n110. Shinde, T.A.; Prasad, J.R. IoT based animal health monitoring\
    \ with naive Bayes classiﬁcation. Int. J. Emerg.\nTrends Technol. 2017, 1, 8104–8107.\n\
    111. Jingqiu, G.; Zhihai, W.; Ronghua, G.; Huarui, W. Cow behavior recognition\
    \ based on image analysis and\nactivities. Int. J. Agric. Biol. Eng. 2017, 10,\
    \ 165–174.\n112. Yazdanbakhsh, O.; Zhou, Y.; Dick, S. An intelligent system for\
    \ livestock disease surveillance. In. Sci.\n2017, 378, 26–47.\n113. Benhai, X.;\
    \ Liang, Y.; Xiaohua, P.; Zhengang, Y. Review on application of Internet of Things\
    \ technology in\nanimal husbandry in China. Trans. Chin. Soc. Agric. Eng. 2015,\
    \ 31, 237–246. (In Chinese)\n114. Liu, S.; Xu, L.; Li, D.; Duan, Q.; Wei, X. Research\
    \ on remote system for disease diagnosis of penaeus vannamei\nbased on internet\
    \ of things. J. China Agric. Univ. 2014, 19, 189–195. (In Chinese)\nSensors 2019,\
    \ 19, 1833\n23 of 24\n115. Liu, X.; Sha, Z.; Wang, C.; Li, D.; Bureau, D.P. A\
    \ web-based combined nutritional model to precisely predict\ngrowth, feed requirement\
    \ and waste output of gibel carp (Carassius auratus gibelio) in aquaculture operations.\n\
    Aquaculture 2018, 492, 335–348.\n116. Keeffe, S.O.; Manap, H.; Dooly, G.; Lewis,\
    \ E. Real-time monitoring of agricultural ammonia emissions based on optical\n\
    fibre sensing technology. In Proceedings of the SENSORS, Kona, HI, USA, 1–4 November\
    \ 2010; pp. 1140–1143.\n117. Pan, L.; Yang, S.X. An Electronic Nose Network System\
    \ for Online Monitoring of Livestock Farm Odors.\nIEEE-ASME Trans. Mech. 2009,\
    \ 14, 371–376.\n118. Costa, C.; Antonucci, F.; Pallottino, F.; Aguzzi, J.; Sarriá,\
    \ D.; Menesatti, P. A Review on Agri-food Supply\nChain Traceability by Means\
    \ of RFID Technology. Food Bioprocess Technol. 2013, 6, 353–366.\n119. Clemens,\
    \ R.L. Meat traceability in Japan. Iowa Ag Rev. 2015, 9, 2.\n120. Li, H.; Zhang,\
    \ B.; Zhang, L.; Xue, Y.; He, M.; Ren, C. A food traceability framework for dairy\
    \ and other\nlow-margin products. IBM J. Res. Dev. 2016, 60, 1–8.\n121. Chen,\
    \ C.; Xu, X. Design and application of traceability and supervision platform for\
    \ broiler based on Internet\nof Things. Trans. Chin. Soc. Agric. Eng. 2017, 33,\
    \ 224–231. (In Chinese)\n122. Ndraha, N.; Hsiao, H.-I.; Vlajic, J.; Yang, M.-F.;\
    \ Lin, H.-T.V. Time-temperature abuse in the food cold chain:\nReview of issues,\
    \ challenges, and recommendations. Food Control 2018, 89, 12–21.\n123. Sichao,\
    \ L.; Xifu, W. Toward an intelligent solution for perishable food cold chain management.\
    \ In Proceedings\nof the 2016 7th IEEE International Conference on Software Engineering\
    \ and Service Science (ICSESS), Beijing,\nChina, 26–28 August 2016; pp. 852–856.\n\
    124. Zhao, G.; Yu, H.; Wang, G.; Sui, Y.; Zhang, L. Applied Research of IOT and\
    \ RFID Technology in Agricultural\nProduct Traceability System; Springer International\
    \ Publishing: Cham, Switzerland, 2015; pp. 506–514.\n125. Pigini, D.; Conti, M.\
    \ NFC-based traceability in the food chain. Sustainability 2017, 9, 1910. [CrossRef]\n\
    126. Badia-Melis, R.; Mishra, P.; Ruiz-García, L. Food traceability: New trends\
    \ and recent advances. A review.\nFood Control 2015, 57, 393–401.\n127. Liu, Y.;\
    \ Wang, H.; Wang, J.; Qian, K.; Kong, N.; Wang, K.; Zheng, L.; Shi, Y.; Engels,\
    \ D.W. Enterprise-oriented IoT name\nservice for agricultural product supply chain\
    \ management. Int. J. Distrib. Sens. Netw. 2015, 11, 308165.\n128. Verdouw, C.N.;\
    \ Wolfert, J.; Beulens, A.J.M.; Rialland, A. Virtualization of food supply chains\
    \ with the internet\nof things. J. Food Eng. 2016, 176, 128–136.\n129. Wang, J.;\
    \ Yue, H. Food safety pre-warning system based on data mining for a sustainable\
    \ food supply chain.\nFood Control 2017, 73, 223–229.\n130. Galvez, J.F.; Mejuto,\
    \ J.C.; Simal-Gandara, J. Future challenges on the use of blockchain for food\
    \ traceability\nanalysis. Trac-Trend. Anal. Chem. 2018, 107, 222–232.\n131. Kshetri,\
    \ N. 1 Blockchain’s roles in meeting key supply chain management objectives. Int.\
    \ J. Inf. Manag.\n2018, 39, 80–89.\n132. Feng, T. A supply chain traceability\
    \ system for food safety based on HACCP. blockchain & Internet of things.\nIn\
    \ Proceedings of the 2017 International Conference on Service Systems and Service\
    \ Management, Dalian,\nChina, 16–18 June 2017; pp. 1–6.\n133. Leng, K.; Bi, Y.;\
    \ Jing, L.; Fu, H.-C.; Van Nieuwenhuyse, I. Research on agricultural supply chain\
    \ system with\ndouble chain architecture based on blockchain technology. Future\
    \ Gener. Comput. Syst. 2018, 86, 641–649.\n134. Chen, R.-Y. Autonomous tracing\
    \ system for backward design in food supply chain. Food Control 2015, 51, 70–84.\n\
    135. Tzounis, A.; Katsoulas, N.; Bartzanas, T.; Kittas, C. Internet of Things\
    \ in agriculture, recent advances and\nfuture challenges. Biosyst. Eng. 2017,\
    \ 164, 31–48.\n136. Bannister, K.; Giorgetti, G.; Gupta, S.K. Wireless sensor\
    \ networking for hot applications: Eﬀects of temperature\non signal strength,\
    \ data collection and localization. In Proceedings of the 5th Workshop on Embedded\n\
    Networked Sensors, Charlottesville, VA, USA, 2–3 June 2008; pp. 1–5.\n137. Boano,\
    \ C.A.; Tsiftes, N.; Voigt, T.; Brown, J.; Roedig, U. The impact of temperature\
    \ on outdoor industrial\nsensornet applications. IEEE Trans. Ind. Inform. 2010,\
    \ 6, 451–459.\n138. Sheng, P.; Guo, Y.; Li, P. Intelligent measurement and control\
    \ system of facility agriculture based on ZigBee\nand 3G. Trans. Chin. Soc. Agric.\
    \ Mach. 2012, 43, 229–233. (In Chinese)\n139. Wang, X.; Chao, Y.; Mao, S. TensorBeat:\
    \ Tensor Decomposition for Monitoring Multi-Person Breathing Beats\nwith Commodity\
    \ WiFi. ACM Trans. Intell. Syst. Technol. 2017, 9, 8.\n140. Lin, J.; Yu, W.; Zhang,\
    \ N.; Yang, X.; Zhang, H.; Zhao, W. A Survey on Internet of Things: Architecture,\n\
    Enabling Technologies, Security and Privacy and Applications. IEEE Internet Things\
    \ J. 2017, 4, 1125–1142.\nSensors 2019, 19, 1833\n24 of 24\n141. Sicari, S.; Rizzardi,\
    \ A.; Grieco, L.A.; Coen-Porisini, A. Security, privacy and trust in Internet\
    \ of Things:\nThe road ahead. Comput. Netw. 2015, 76, 146–164.\n142. Jebri, S.;\
    \ Abid, M.; Bouallegue, A. Stac-protocol: Secure and trust anonymous communication\
    \ protocol for iot.\nIn Proceedings of the 2017 13th International Wireless Communications\
    \ and Mobile Computing Conference\n(IWCMC), Valencia, Spain, 26–30 June 2017;\
    \ pp. 365–370.\n143. Lee, J.Y.; Lin, W.C.; Huang, Y.H. A lightweight authentication\
    \ protocol for internet of things. In Proceedings of the 2014\nIEEE International\
    \ Symposium on Next-Generation Electronics, Kwei-Shan, Taiwan, 7–10 May 2014;\
    \ pp. 1–2.\n144. Shen, J.; Chang, S.; Shen, J.; Liu, Q.; Sun, X. A lightweight\
    \ multi-layer authentication protocol for wireless\nbody area networks. Future\
    \ Gener. Comput. Syst. 2018, 78, 956–963.\n145. TongKe, F. Smart agriculture based\
    \ on cloud computing and IOT. J. Converg. Inf. Technol. 2013, 8. [CrossRef]\n\
    146. Daoliang, L.; Hao, Y. State-of-the-art Review for Internet of Things in Agriculture.\
    \ Trans. Chin. Soc.\nAgric. Mach. 2018, 49, 1–20. (In Chinese)\n147. Ray, P.P.\
    \ Internet of things for smart agriculture: Technologies, practices and future\
    \ direction. J. Ambient\nIntell. Smart Environ. 2017, 9, 395–420.\n148. Gubbi,\
    \ J.; Buyya, R.; Marusic, S.; Palaniswami, M. Internet of Things (IoT): A vision,\
    \ architectural elements,\nand future directions. Future Gener. Comput. Syst.\
    \ 2013, 29, 1645–1660.\n149. Vatari, S.; Bakshi, A.; Thakur, T. Green house by\
    \ using IOT and cloud computing. In Proceedings of the\nIEEE International Conference\
    \ on Recent Trends in Electronics, Information & Communication Technology\n(RTEICT),\
    \ Bangalore, India, 20–21 May 2016; pp. 246–250.\n150. Shaikh, F.K.; Exposito,\
    \ E.; Zeadally, S. Enabling technologies for green Internet of Things. IEEE. Syst.\
    \ J.\n2017, 11, 983–994.\n© 2019 by the authors. Licensee MDPI, Basel, Switzerland.\
    \ This article is an open access\narticle distributed under the terms and conditions\
    \ of the Creative Commons Attribution\n(CC BY) license (http://creativecommons.org/licenses/by/4.0/).\n"
  inline_citation: '>'
  journal: Sensors
  limitations: '>'
  pdf_link: https://www.mdpi.com/1424-8220/19/8/1833/pdf?version=1555499645
  publication_year: 2019
  relevance_score: 0.9
  relevance_score1: 0
  relevance_score2: 0
  title: State-of-the-Art Internet of Things in Protected Agriculture
  verbatim_quote1: The IoT fundamental structure in protected agriculture is introduced
    in detail based on agricultural sensors, wireless sensor networks, cloud computing,
    edge clouding and machine learning technologies.
  verbatim_quote2: The IoT-A architecture has high flexibility and wide applicability
    as it meets application needs in the form of business processes.
  verbatim_quote3: '>'
- DOI: https://doi.org/10.1109/access.2020.3009298
  analysis: 'Different data types (e.g., soil moisture, canopy temperature, weather)
    and their collection and use

    This study proposes an architectural framework for precision farming using IoT
    and other technologies. The IoT based layered architecture includes a device/physical
    layer, network layer, middleware layer, service layer, analytics layer, and end-user
    layer. The layered architecture includes all the hardware devices, facilities,
    equipment, internet, communication technologies, protocols, and data analytic
    algorithms. How the layers work along with each other is described below:

    Perception Layer: Also called physical or the device layer, this layer lies at
    the bottom of the architecture and constitutes of sensors, actuators, microcontrollers,
    gateways, routers, switches, hubs, etc. The main role of this layer is, how efficiently
    the sensing devices and the other equipment’s can work together to gather data.

    Network Layer: It comprises of internet and other communication technologies.
    The main aim of this layer is, how to achieve better communication in the platform.
    In terms of agriculture, the design of this layer plays an important role in a
    framework due to the selection of suitable communication technologies relevant
    to field size or the test bed size.

    Middleware Layer: This layer in IoT architecture is accountable for device management,
    context awareness, interoperability, portability, and security-related responsibilities.
    In terms of agriculture scenarios, HYDRA, SMEPP act as best middleware due to
    their context-aware functionalities.

    Service Layer: Dealing with agricultural problems, cloud-assisted service layer
    in IoT layered architecture plays a prominent role in providing cloud storage
    and Software-as-a-Service (SaaS). To facilitate the function of sensing, actuation,
    and other activities, this layer focuses on some main areas or domains such as
    monitoring, detection, control, decision making, recognition, etc. The service
    layer offers services like device monitoring, control, discovery, and data publishing
    services.

    Analytics Layer: The layer is responsible for the processing and analysis of data.
    This layer works as a consortium of two steps- 1) Data ingestion, is the step
    that performs storage, cleansing, and streaming of data and the 2) Data analytics,
    which performs data reporting, mining, and learning. In the analytics layer various
    machine learning tools, data analytic algorithms are employed to give early predictive
    decisions for measuring the crop yield, crop growth, disease detection, etc. These
    decisions can enhance farm monitoring capacity. The predictive decisions can help
    in the design of better decision support systems.

    End-User Layer: Being the topmost layer of the model, it serves the consumer or
    the user. To provide the interface to the users to control and monitor their model,
    this layer allows them to view the system status, analyze or process the data.
    In agro models, the farmer is the end-user. This layer provides a user-friendly
    experience and platform to the farmers.

    The services or applications in this layer are designed based on the behavioral
    study and pattern analysis of the user.'
  authors:
  - Vippon Preet Kour
  - Sakshi Arora
  citation_count: 96
  full_citation: 'Kour, Vippon Preet & Arora, Sakshi. (2020). Recent Developments
    of the Internet of Things in Agriculture: A Survey. IEEE Access. 8. 129924 - 129957.
    10.1109/ACCESS.2020.3009298.'
  full_text: '>

    This website utilizes technologies such as cookies to enable essential site functionality,
    as well as for analytics, personalization, and targeted advertising purposes.
    To learn more, view the following link: Privacy Policy Manage Preferences IEEE.org
    IEEE Xplore IEEE SA IEEE Spectrum More Sites Subscribe Donate Cart Create Account
    Personal Sign In Browse My Settings Help Institutional Sign In All Books Conferences
    Courses Journals & Magazines Standards Authors Citations ADVANCED SEARCH Journals
    & Magazines >IEEE Access >Volume: 8 Recent Developments of the Internet of Things
    in Agriculture: A Survey Publisher: IEEE Cite This PDF Vippon Preet Kour; Sakshi
    Arora All Authors 98 Cites in Papers 12530 Full Text Views Open Access Comment(s)
    Under a Creative Commons License Abstract Document Sections I. Introduction II.
    Sources and Search Methods III. Introduction to the Internet of Things (IoT) Concepts
    and Theories IV. Related Work V. Findings Show Full Outline Authors Figures References
    Citations Keywords Metrics Abstract: A rise in the population has immensely increased
    the pressure on the agriculture sector. With the advent of technology, this decade
    is witnessing a shift from conventional approaches to the most advanced ones.
    The Internet of Things (IoT) has transformed both the quality and quantity of
    the agriculture sector. Hybridization of species along with the real-time monitoring
    of the farms paved a way for resource optimization. Scientists, research institutions,
    academicians, and most nations across the globe are moving towards the practice
    and execution of collaborative projects to explore the horizon of this field for
    serving mankind. The tech industry is racing to provide more optimal solutions.
    Inclusion of IoT, along with cloud computing, big data analytics, and wireless
    sensor networks can provide sufficient scope to predict, process, and analyze
    the situations and improve the activities in the real-time scenario. The concept
    of heterogeneity and interoperability of the devices by providing flexible, scalable,
    and durable methods, models are also opening new domains in this field. Therefore,
    this paper contributes towards the recent IoT technologies in the agriculture
    sector, along with the development of hardware and software systems. The public
    and private sector projects and startup''s started all over the globe to provide
    smart and sustainable solutions in precision agriculture are also discussed. The
    current scenario, applications, research potential, limitations, and future aspects
    are briefly discussed. Based on the concepts of IoT a precision farming framework
    is also proposed in this article. A graphical abstract for Recent developments
    of the Internet of Things in Agriculture: A Survey. Published in: IEEE Access
    ( Volume: 8) Page(s): 129924 - 129957 Date of Publication: 14 July 2020 Electronic
    ISSN: 2169-3536 DOI: 10.1109/ACCESS.2020.3009298 Publisher: IEEE CCBY - IEEE is
    not the copyright holder of this material. Please follow the instructions via
    https://creativecommons.org/licenses/by/4.0/ to obtain full-text articles and
    stipulations in the API documentation. SECTION I. Introduction The term ‘Agriculture’
    is inferred from the Latin words ‘Ager’ means ‘Land’ and ‘Culture’ means ‘Cultivation’.
    It is the milestone field of human civilization and is one of the benchmark areas.
    This field is the withstander of the economies of various nations. According to
    the Food and Agricultural Organization of the United Nations (FAO), more than
    60% of the human population depends on agriculture for survival and around 12%
    of the total land area is under agricultural production [1]. Predicted by FAO,
    the global population will reach the mark of 8 billion people by the year 2025
    and 9.6 billion by the end of 2050 (FAO, 2009) [2]. The interpretation of this
    data shows that to tackle this population growth, an estimated increase of 70%
    in food production must be achieved worldwide by 2050 [3]. Agriculture is also
    the second-largest greenhouse gas (GHG) emitter, because of fossil-based fertilizers,
    biomass, and machinery. In some of the developed and developing nations, the agriculture
    sector is the backbone of the economy. This field has a huge contribution in the
    growth of Gross Domestic Product (GDP) of developing countries, in particular,
    some of them are listed in TABLE 1. TABLE 1 Nations Having Agriculture as a Major
    Part of Their GDP [4] In India, 53% of the population is dependent on the agriculture
    sector for employment and 61.5 % of the Indian population is primarily dependent
    on the agriculture sector for its livelihood [5]. Focusing on the market size,
    India is the second-largest fruit producer in the world. Based on certain data
    and statistics, the farming income in India is expected to double by 2022. Eyeing
    this change, there is an intra-state cluster development of certain states in
    terms of the agriculture sector. The various stats and numbers representing the
    impact of agriculture in the overall economic development of India as compared
    to other fields has been shown in Fig. 1. FIGURE 1. Contributions of various sectors
    in the Indian economy [6]. Show All At present, the demand is more than the supply
    generated and this curve will illustrate more unstable results in the coming years,
    due to increase in demand with population rise. To maintain the demand-supply
    curve, there will be enormous stress on the agricultural sector. Global warming
    and changing climatic conditions are also important factors to be taken into consideration.
    From the past decades, due to the increase in demand and pressure on the overall
    structure of the field, this area is witnessing the slow but progressive shift
    from traditional approaches to the most advanced technology-driven methods. The
    use of traditional approaches and conventional methods, as well as the changes
    in the environment, lay stress on the agricultural sector. Some of the challenges
    for the agricultural sector are given as follows: The use of traditional techniques
    of farming hinders the optimization of both cost and time. Depletion of the topsoil
    due to floods and winds resulting in the deposition of the pollutants, sediments,
    nitrates, and phosphates, result in causing the eutrophication and the runoff
    of the soil. Planting the same crop after each harvest makes the soil redundant
    of the essential nutrients. Water scarcity due to the climatic changes lowers
    the level of groundwater for irrigation, thereby disturbing the water cycle. Global
    climate changes due to the destruction of the tropical forests and the other vegetative
    species in agriculture result in the elevation of the carbon dioxide and other
    greenhouse gas levels. Lack of expertise in proper recognition of the particular
    plant species. There is no proper method to detect the disease at early stages,
    such that precautionary measures could be taken to prevent it. Therefore, because
    of these factors, the need for the creation of modern methods and intensification
    of the agricultural practices to use water, soil, minerals, and other resources
    efficiently becomes obligatory. The nature of the technology and devices is changing
    i.e. it never settles for any less. A lot of research papers addressing the challenges
    of agriculture in the IoT domain have been put forth. Constant developments and
    everlasting expectations from the existing technologies paves a great way for
    motivating academicians and researchers to set and attain new standards. During
    recent years, there has been a paradigm shift in the study and application of
    domains like IoT, cloud computing, machine learning, and big data, etc. Therefore,
    from the trends of these data sets, a constant need is felt to revisit the current
    standings and capacities of the new age IoT concepts. The modern-day requirements
    and the counteractive substitutes in the field of agriculture and changes exactly
    to the expectations based on the concepts of IoT must be addressed. The contribution
    of IoT in the agriculture field and certain gaps in resource utilization motivated
    us to perform a study that addresses current issues and applications of IoT in
    agriculture. Agriculture is expected to get immensely fortified by the advancement
    of technology especially by the domain IoT. Precision agriculture is the new term
    appended to the agriculture filed, with all the procedures being followed, addressed,
    and simulated in a tech-driven manner. Incorporation of the internet has started
    to revolutionize this field by associating devices together, now being identified
    as the Internet of Things. Coined in 1999 by a British visionary “Kevin Ashton”,
    Internet of Things is a consortium of devices connected [7]. The devices are associated
    with internet via Wireless Sensor Networks (WSN), Radio-frequency Identification
    (RIFD), Near Field Communication (NFC), Long Term Evolution (LTE), and other devices
    and communication technologies. This association helps the devices and the other
    objects transfer the information gathered to destined places all over the network.
    Precision agriculture, therefore, aims to optimize and improve agricultural processes
    to ensure optimum production with reliable, fast, and distributed dimensions thus
    providing growers a detailed overview of the ongoing scenarios in the cultivation
    stretches. This practice is followed to reduce energy consumption. The major areas
    where IoT can leave an everlasting impression are climate monitoring [8], data
    analytics [9], early disease detection [10], crop counting [11], smart irrigation
    [12], etc. With the spread of a network of devices, a communication channel can
    be established between the farmers, fields, and experts. By developing IoT based
    models, the field conditions can be monitored remotely on regular time intervals
    without any human intervention and after analyzing the data favorable and efficient
    decisions can be taken accordingly. This will help to ensure both field and market
    safety and security to the farmer. Also, with early monitoring of crops, disease
    detection can be done and thus preventive measures can be taken to save the crop
    beforehand. For producers it will also help in the analysis of consumer demands.
    Whether the product will be able to meet market expectations, thus creating an
    intelligent decision driven farming. An analysis of different existing articles
    addressing the research and development of precision agriculture is presented
    in TABLE 2. TABLE 2 Alaysis of Various Papers in the Field of Precison Agricuture
    for the Current Study In this article based on research gaps and findings obtained
    from articles analyzed below, a systematic survey is done. Therefore in this study,
    the most prominent problems of the agriculture sector, and solutions provided
    by modern systems are addressed and discussed in detail. The major contributions
    of this study are as follows: A comprehensive survey of the architectural, conceptual,
    and implementation details of IoT models adopted for Precision Agriculture has
    been carried out. Various IoT hardware platforms and other associated devices
    like sensors, accumulators, etc. along with their role in agriculture have been
    discussed in brief. Various IoT OS supported for Precision Agriculture have been
    discussed. The significance and key differences of MIoT in agriculture have been
    discussed along with related studies. Studies limited to a specific domain has
    been merged together for clear mapping of the domain. Sensors and their role in
    agriculture is discussed. Various projects/ start-up’s started all over the globe
    for tacking agricultural problems and providing intelligent and sustainable solutions
    to farmers have also been discussed. Functional concepts like limitations, improvements,
    future works and applications are discussed separately. The rest of the paper
    has been organized as in Section 2 various search and source methods used for
    the selections of relevant articles has been introduced, in Section 3 to get into
    the deep insight of the various concepts, theories, and devices related to the
    implementation of Internet of Things has been discussed, followed by Section 4
    which gives the various related studies concerning different applications of Internet
    of Things in Agriculture, findings like challenges, limitations, improvements,
    future work, etc. with a short description of our proposed work has been given
    in Section 5, and finally, at last, the article ends with a conclusion. Table
    3 gives the detailed nomenclature used throughout this article. TABLE 3 Nomenclature
    SECTION II. Sources and Search Methods The research methodology consists of going
    through articles based on the contribution of IoT and its related technologies
    for the advancement and development of the agriculture filed. For designing the
    overall structure of this article, the data and selected studies are chosen strictly
    based on a time frame. Most of the articles taken for study are sorted from 2015
    to 2020. This time frame is chosen to visualize and understand the current impact
    of IoT in the field. In TABLE 4, a summary of the resources from where the papers
    have been selected is presented. TABLE 4 Summary of the E-Reserves for Obtaining
    the Related Research Articles Given the objective of this article, research has
    been conducted thoroughly by examining the existing literature work related to
    the subject. For developing a firm foundation, the articles containing the origin
    of IoT, alongside current standings, recent trends, and technologies, were considered
    for a study concerning their contributions to the field of agriculture. By reviewing
    the existing literature, a sustainable framework has been developed to overcome
    the existing challenges in the field. The keywords mainly used to identify the
    literature included Precision Agriculture, Agriculture, Plant Monitoring, Internet
    of Things, Smart Agriculture, Smart Farming, Irrigation, Plant Pathology, Wireless
    Sensor Networks, etc. The eight-year trends of the different terminologies and
    their search significance over the years have been extracted from Google and are
    presented in Fig. 2 and Fig. 3. FIGURE 2. Worldwide distribution of IoT of the
    past eight years [19]. Show All FIGURE 3. Precision Agriculture distribution worldwide
    of the past eight years [19]. Show All From the figures, it can be seen that the
    frequency of search or usage of these two terms is somewhat stable over the past
    eight years. An average, 80% of people talk and search about these topics for
    study and other related purposes, thus establishing the growing interest worldwide
    in this area. So for a better understanding, in the next section, the various
    terminologies related to the Internet of things concepts and devise have been
    discussed. SECTION III. Introduction to the Internet of Things (IoT) Concepts
    and Theories Inspired from the technology of the internet to connect the whole
    world, the Internet of Things constitutes of things possessing unique identities
    and are connected to the internet. A cosmos of sensors, actuators, appliances,
    and other devices connected with each over the internet, results in making the
    Internet of Things (IoT). The scope of IoT is not just limited to only connecting
    things but to allow them to communicate and exchange data. Based on the Electronic
    Devices and Network Annex-IEA-4E (EDNA), by 2020 the number of connected devices
    will rise to 50 billion, thus resulting in the generation of high revenue. IoT
    works in a layered manner depending upon the problem it is addressing. Therefore,
    it can be define that IoT possesses a layered architecture [20]. All these layers
    combined are called the IoT functional blocks. Apart from the functional blocks,
    various communication models that aid the smooth working of an IoT model are a
    request-response model, publish-subscribe, push-pull, and exclusive pair [20].
    Fig. 4 represents the reference architecture of IoT in agriculture and includes
    the following layers: device/physical layer, network layer, middleware layer,
    service layer, analytics layer, and end-user layer. The layered architecture includes
    all the hardware devices, facilities, equipment, internet, communication technologies,
    protocols, and data analytic algorithms. How the layers work along with each other
    is described below: Perception Layer: Also called physical or the device layer,
    this layer lies at the bottom of the architecture and constitutes of sensors,
    actuators, microcontrollers, gateways, routers, switches, hubs, etc. The main
    role of this layer is, how efficiently the sensing devices and the other equipment’s
    can work together to gather data. The microcontroller device acts as a controller
    as it performs all the networking ifunctionalities. The microcontroller also acts
    as a network regulating body as it regulates the networks, such that the sensors
    and other devices can collect data. The main aim of this layer is to capture data
    and transfer it to the other layer i.e., the higher abstraction layers. In terms
    of agriculture, the devices in the physical layer gather, soil, water, pH value,
    humidity, leaf wetness, and other data parameters. Also, the topology in which
    the devices are placed plays a major role in power consumption and efficient data
    collection in this layer. Network Layer: It comprises of internet and other communication
    technologies. The main aim of this layer is, how to achieve better communication
    in the platform. In terms of agriculture, the design of this layer plays an important
    role in a framework due to the selection of suitable communication technologies
    relevant to field size or the test bed size. LTE, CDMA, GSM, Wi-Fi, ZigBee, LoRa,
    NFC, UWB Bluetooth, and RIFD are some of the communication technologies used for
    agriculture purposes. ZigBee, LoRa, and NFC are the most used communication technologies
    employed depending upon the problem and the area to be addressed in the agro domain.
    NFC and Bluetooth are the most suitable for the greenhouses. Various protocols
    like HTTP, WWW, and SMTP serve for efficient communication in the agricultural
    scenarios. Middleware Layer: This layer in IoT architecture is accountable for
    device management, context awareness, interoperability, portability, and security-related
    responsibilities. In terms of agriculture scenarios, HYDRA, SMEPP act as best
    middleware due to their context-aware functionalities. Service Layer: Dealing
    with agricultural problems, cloud-assisted service layer in IoT layered architecture
    plays a prominent role in providing cloud storage and Software-as-a-Service (SaaS).
    To facilitate the function of sensing, actuation, and other activities, this layer
    focuses on some main areas or domains such as monitoring, detection, control,
    decision making, recognition, etc. The service layer offers services like device
    monitoring, control, discovery, and data publishing services. Analytics Layer:
    The layer is responsible for the processing and analysis of data. This layer works
    as a consortium of two steps- 1) Data ingestion, is the step that performs storage,
    cleansing, and streaming of data and the 2) Data analytics, which performs data
    reporting, mining, and learning. In the analytics layer various machine learning
    tools, data analytic algorithms are employed to give early predictive decisions
    for measuring the crop yield, crop growth, disease detection, etc. These decisions
    can enhance farm monitoring capacity. The predictive decisions can help in the
    design of better decision support systems. End-User Layer: Being the topmost layer
    of the model, it serves the consumer or the user. To provide the interface to
    the users to control and monitor their model, this layer allows them to view the
    system status, analyze or process the data. In agro models, the farmer is the
    end-user. This layer provides a user-friendly experience and platform to the farmers.
    The services or applications in this layer are designed based on the behavioral
    study and pattern analysis of the user. Various intelligent approaches and data
    analytic studies are employed to understand the behavior of the users, as they
    come with different needs and offer a lot of diversity. Social media, Cloud computing,
    Mobile messaging are the platforms used to provide services to users, experts,
    and industries. Through this layer, the whole IoT based platform can be monitored,
    controlled, and run. The services generated from this layer are mostly the link
    between the user and the systems/platforms. FIGURE 4. A layered ecosystem/architecture
    of Agro-IoT. Show All A. Multimedia Internet of Things (MIoT) in Agriculture Based
    on the working, nature of deployment, and the subject IoT concepts are used to
    address, traditional IoT is differentiated into various forms such as IoMT, MIoT,
    IIoT, etc. Without the inclusion of these concepts, IoT systems cannot successfully
    realize the concept of ubiquitous computing. In these paradigms, the interaction
    and cooperation between the heterogeneous devices is facilitated. Due to the increase
    in the number, diversity of devices and data with time, these concepts have become
    more functional and prominent to develop models and techniques for coming challenges
    and reflect the possibilities enabled in them. All these concepts have the same
    main character of availability, intelligence, and devices but they only differ
    in their due course of action i.e., their general usage. Being an allied branch
    or extension of IoT, MIoT, include smart objects that are usually resource-constrained,
    in terms of memory, energy, and processing power. Due to the progressive reduction
    in size and cost of production of these devices, MIoT models are expected to be
    developed and deployed on a large scale. Generally, the sensors of these models
    are usually designed to be battery operated or solar power operated. Due to the
    large data sensing and analysis, these devices require high computational power.
    Mostly, the multimedia data includes audio, video, and image data, which possess
    unstructured features and is difficult to transmit and analyze on a computationally
    scarce network and low bandwidth conditions. Multimedia data shows different behavior
    compared to the scalar data due to its computational complexity and network topology
    bottlenecks to the Quality of Service (QoS). A lot of work has been done in IoT
    and its allied fields to realize the concept of heterogeneous, low-level data
    transmission, and communication. In agricultural frameworks, the data is mostly
    in the visual form e.g., pest images, plant disease images, field images, etc.
    The characteristic difference in scalar and multimedia data is shown in Fig. 5.
    FIGURE 5. Key characteristic differences between IoT and MIoT data [25]. Show
    All Depending upon the various parameters there are key differences between IoT
    and MIoT and they are discussed as: The IoT systems work mostly on non-heterogeneous
    devices while the MIoT functions well in case of heterogeneity. IoT data is mostly
    scalar, however, MIoT considers the multimedia data. Traditional IoT networks
    does not take into consideration the concept QoS while transmission and communication
    whereas in case of MIoT, QoS and QoE play a major role as the prime parameters.
    IoT can function well over low bandwidth channels whereas MIoT networks are in
    demand of high bandwidth due to bulky data. Node operation is predefined in IoT
    whereas in MIoT the node operation is adaptive in nature. Various authors have
    worked on the implementation of concepts of MIoT for agriculture. Zhang et al.
    [21], worked on the concept of preserving the concept of data confidentiality
    while realizing the challenge of low-cost data acquisition. A measurement matrix
    under the control of chaos and random subsampling is employed to capture the ruptured
    image signals. Then these sampled sub-images are assembled to form a big master
    image and then encrypted based on android transform and single value diffusion.
    Correlation, histogram, keyspace, robustness, real-time, and entropy analysis
    are performed to understand and realize the concept of low-level transmission.
    Rani et al. [22], worked on the concept of bridging the gap between the scalar
    and multimedia data, and for this, they developed an IoMT cross-layer protocol.
    This protocol considered cross-communication between the physical, data link,
    and routing layers. The main objective of this work was to achieve energy-efficient
    communication with less computational time complexity. An optimal mathematical
    model was developed to study the cross-layer behavior in all the three layers,
    therefore selecting the efficient one. A comparative study was conducted on two
    parameters like delay and distance. Usman et al. [23], proposed a multilayer framework
    based on multilevel edge computing architecture to manage, and preserve the privacy
    of end devices from external attacks. Authors mainly focused on the three major
    challenges i.e., node management, privacy-preserving, and network protection.
    The proposed architecture is divided into three layers with the first layer comprising
    of underlying network partitioned into multiple clusters to manage end-devices
    and Level-One Edge Devices (LOEDs). In the second layer, the LOEDs apply an efficient
    aggregation technique to reduce the volumes of generated data and preserve the
    privacy of end-devices. Local differential privacy-based technique is applied
    to protect the privacy of sensitive information in aggregated data. In the last
    layer, the mobile sinks are registered with a level-two edge device via a handshaking
    mechanism to protect the underlying network from external threats. Floris and
    Atzori [24], addressed the issue of evaluation of Quality of Experience (QoE)
    for IoT applications where mostly multimedia data is involved. For designing a
    layered architecture, authors first tried to analyze the QoE parameters or factors
    with applications in the relevant scenarios. Then a layered multimedia IoT architecture
    was proposed for QoE analysis by combing each of the analytic and contributing
    factors. Zikria et al. [25], presented a brief overview of the MIoT along with
    its challenges, solutions and future opportunities. The authors discussed the
    data differences between the traditional IoT and MIoT, along with the role of
    communication technologies. The demand for realizing the dream of MIoT and its
    bottlenecks were also discussed. The challenge of data collection and its impact
    over the network traffic is also discussed along with the methodologies developed
    to solve it. Nauman et al. [26], presented a comprehensive survey on the multimedia
    internet of things. Authors discussed the existing role of MIoT in concern with
    various fields like medical, agriculture, automation, and industry, etc. The importance
    of QoE and QoS for multimedia transmission over IoT channels is also discussed.
    A better need for routing and Physical-Medium Access Control (PHY-MAC) protocols
    for M-IoT was also discussed. A potential discussion on open research issues related
    to multimedia communication in IoT was presented. Alsamhi et al. [27], presented
    a survey on the role of green IoT in greener and smart cities. The authors focused
    on how the environment pollution can be controlled along with other parameters
    for making living more sustainable and green with the aid of IoT concepts. AlSkaif
    et al. [28], presented a survey on the energy efficiency of MAC protocols in low
    data rate wireless multimedia sensors. The conflicting goals of WMSN were also
    discussed. Role and challenges of multimedia data were also discussed. A focused
    analysis was performed on network parameter constraints and what techniques are
    employed to solve them. A comparison of the energy consumption of MAC protocols
    in four selected application scenarios related to smart cities and environment
    monitoring was also presented. Libo et al. [29], worked on how with the use of
    multimedia data in the form of images can be employed to detect the plant diseases.
    Rape diseases were studied as a case study. Authors also discussed the challenges
    and bottlenecks faced for the transfer of multimedia data over low bandwidth channels.
    With machine intelligence, authors also proposed a diagnostic procedure via which
    the data can be transferred over wireless multimedia sensors networks. Psannis
    et al. [30], proposed a technique for the transfer of advanced media-based smart
    big data via intelligent systems. Authors in their work addressed the problem
    of the rapid rise of devices and heterogeneity. An encoding algorithm with HVEC
    standard for performance evaluation was proposed to transfer the data intelligently.
    B. Hardware Platforms for IoT The hardware platform for IoT comprises a set of
    compatible hardware capable of running certain software. The main components of
    a hardware platform are machine language, sensors, wireless devices, programs,
    and processors, protocols, etc. The processor in a hardware platform determines
    how much fast a framework can work. To design certain new methodologies in IoT,
    various hardware platforms supported are elaborated as: 1) Raspberry Pi It is
    a series of single-board computers developed in the UK by Raspberry foundation.
    There are various families of raspberry i.e., Raspberry Pi 1, Raspberry Pi 2,
    Raspberry Pi 3, Raspberry Pi Zero, Raspberry Pi 4. All these families have different
    models. The Broadcom processor is used in most of the boards. It acts more like
    a computer system and can do multitasking [31]. 2) Arduino Uno Developed by Arduino.cc,
    it is a microcontroller board and is based on the ATMega32 processor. Arduino
    Uno possessing a USB port is a very valuable addition to the family of microcontrollers.
    Various versions of Arduino like Arduino Uno, Arduino Due, Arduino Leonardo, and
    Arduino Mega are present in the market. Out of these the most common versions
    are Arduino Uno and Arduino Mega [32]. 3) Node MCU It is an open-source IoT platform.
    It generally refers to firmware rather than the development kits. It is a low-cost
    open-source kit/module developed for the ESP8266 Wi-Fi chip. It is developed in
    the Arduino IDE environment [33]. 4) Beaglebone Developed by Texas Instruments,
    it is a low-cost open-source single-board computer. Its size measures 75 by 75
    mm and possesses all the functionality of a basic computer. It requires 2W of
    power or a 5V separate power and can work smoothly without any cooling or sinks
    [34], [35]. 5) Banana Pi It is a low-cost credit-card-sized single-board computer
    developed by a Chinese company Shenzhen SINOVOIP Co. Ltd. The hardware design
    is hugely influenced by Raspberry Pi. It is compatible with Raspberry Pi boards
    as well. It can be developed both on Android and Linux [36]. The various hardware
    platforms of IoT with their functional specifications are given in TABLE 5. TABLE
    5 Hardware Platforms of IoT and Their Specifications C. IoT Operating System (IoT
    OS) for Agriculture IoT operating system (IoT OS) is an operating system designed
    to perform within the constraints particular to Internet of Things devices. IoT
    OS are designed and developed in such a way that it can function under the restrictions
    of memory, size, power and processing capability. The main aim of IoT OS is to
    enable successful data transfer over the network via internet. The IoT OS for
    a particular framework is not chosen at random. Certain parameters such as footprint,
    scalability, portability, modularity, connectivity, and reliability are taken
    into consideration. As per the requirement of agriculture, a huge number of devices
    are connected having different features and also the devices have to withstand
    the different environments, the OS then to be chosen must be scalable, cost-efficient,
    and reliable. Various studies have been put forward for the role of IoT OS in
    network management and overall communication. Javed et al. [37], provided a detailed
    reviewed comparison of the operating systems designed for IoT devices based on
    their architecture, scheduling methods, networking technologies, programming models,
    power, and memory management methods, along with other features required for IoT
    OS applications. Musaddiq et al. [38], studied the role of small IoTOS in powering
    the scarce network devices. Authors also put light on the energy consumption of
    these devices. A detailed discussion on IoT devices and resource management is
    provided and some state of art IoT OSs such as Contiki, TinyOS, and FreeRTOS are
    also investigated. Baccelli et al. [39], a comprehensive review of RIOT is provided.
    The key components highlighted in this study are the kernel, hardware abstraction,
    software modularity for various configurations. The authors also discussed the
    operational aspects like system boot-up, timers, power management, and networking
    along with the relevant APIs. Zikria et al. [40], proposed a study for the management,
    challenges, and opportunities of IoT OS in managing IoT systems. The authors discussed
    the issue of interoperability, protocol functionalities to support heterogeneous
    deployment scenarios. Supported hardware and future research trends are also discussed.
    Ain et al. [41], proposed an efficient and flexible decision-making system for
    maintaining user thermal comfort with the help of intelligent sensors. Fuzzy based
    approach along with RIOT OS was developed to tackle the problem of fluctuation
    and adjustment. Results show that the proposed approach can perform 28% better
    than the existing approaches in terms of energy efficiency. Stergiou et al. [42],
    studied the transfer of metadata in the IoT networks. Authors discussed the techniques
    and open tools such as CC analyzers and simulators which can provide intelligent
    metadata transfer over a network. The experimentation was performed on CloudSim
    and Cooja emulator of Contiki OS for the testing of a single network segment.
    From the experimentation, it was found that no duplicate packet transfer occurred
    which is a good sign for multimedia data transmission. The various IoT OS with
    their functional specifications are presented in TABLE 6. TABLE 6 IoT OS Platforms
    in Agriculture and Their Specifications D. Sensors and Their Role in Agriculture
    Sensors are the devices, modules, machines or subsystems capable of detecting
    the changes or events in the environment. They also send signals back to the receiver
    end. Mostly the sensors are used with other electronics. A sensors sensitivity
    usually indicates how much change in sensor output occurs with respect to the
    change in the input quantity measurements. Most sensors possess the linear transfer
    function. The sensitivity of a sensor is defined as the ratio between the output
    signal and the measured property. The resolution of a sensor is the smallest change
    it can detect in the quantity it is measuring. In the area of agriculture, demand
    of technological solutions with high aim in rising production and quality is increasing
    day by day. Also the solutions are required which provide optimal analysis and
    sustainable methods for the field development with reduced cost and time. To sustain
    such challenges, sensor- based technologies have proven to be of much help to
    tackle the above issues and challenges. Precision agriculture is an emerging area
    where sensor based technologies are playing a major role. Since the sensors are
    a major data collection agents, they play a dynamic role in agriculture. Also,
    it is very difficult to collect the data from an agricultural field due to the
    undulating field conditions that keep on changing over time. Sensors are selected
    or designed according the problem to be addressed or needs identified by the farmers.
    Agriculturalists generally use sensors to sense the soil conditions, humidity,
    crop conditions, minerals, pH value, water levels, and sunlight, etc. The nature
    and the characteristics of the component which needs to be sensed also plays a
    major role in the development of a sensing device. With the development of technology,
    machinery and easy-to-use microcontroller platforms, the usage of sensors has
    expanded beyond the traditional fields of measurement i.e., temperature, pressure
    and flow. However, the analog sensors such as potentiometers and force sensing
    resistors are still widely in use. Pajares et al. [54], discussed the sensors
    in agriculture and forestry. In the article, various related works of the sensors
    performed by different authors in the same domain were presented. The role and
    importance of the component or substance which needs to be sensed was discussed
    along with their characteristics and specifications. The major areas focused by
    authors were soil analysis, seed growth, weed detection, forest stands and reflectance,
    machinery for effective treatments, microorganisms, pest control, seedling breeding,
    growing, state of health, positioning, navigation, safety, detection and classification.
    Zhu et al. [55], showed that LIDAR, IMU, and Encoder (x2) can be used for designing
    a prototype vehicle for the agricultural domain. The authors also discussed how
    these sensors can be used for the development and usage of that prototype in case
    of undulating surfaces and rough terrains. A complete review of the wireless sensors
    and the network applications used in agriculture is provided. The authors also
    addressed the importance of sensors in the field of agriculture. Along with the
    sensors, the communication technologies that support sensor communications are
    also mentioned by Rehman et al. [56]. The sensors used in the medical and agricultural
    fields have also been discussed. In the case of the agricultural field, the various
    conditions and circumstances affecting the data collection from sensors are addressed.
    The various types of sensors and their platforms used by different authors in
    their work are also included by Chokkareddy et al. [57]. Plageras et al. [58],
    used efficient IoT based sensor and big data analytics for secure collection of
    data and communication over a channel. In the study, smart housing or building
    was taken as case study, and the secure data collection with the sensors was performed
    and analyzed. The behavior of various sensors for data collection in different
    scenarios in terms of IoT and cloud computing was studied by Stergiou et al. [59].
    The secure communication among devices was also studied along with performance
    bottlenecks and challenges. The various sensors and their use in agriculture is
    discussed below: 1) Level Sensors They measure the substance of liquid in a cast.
    The cast can be any agricultural field, pond, water tank, etc. They measure data
    in two methodologies 1) Point level measurements: indicate only whether the constituent
    or level measured is above or below the sensing point or threshold. 2) Continuous
    measurements: specific range measurements and exact substance amount determination
    are performed by these sensors. In agricultural fields, the water level sensors,
    humidity sensors, and moisture sensors are used to measure the water content levels
    in a field. The point level sensors are used when the water content in the cast
    i.e., soil or testbed is very less i.e. in dry and arid areas, whereas the continuous
    level sensors are feasible for semi-arid locations. Some of the ultrasonic level
    sensors are also used in water treatment plants. Blank et al. [60], designed a
    low-level senor based fusion application for agricultural machinery design. 2)
    Temperature Sensor Temperature sensors measure the temperature of the environment
    or surroundings. They are of different types i.e. thermistors, thermocouples,
    resistance temperature detectors, infrared sensors, semiconductor sensors. In
    agriculture they measure the temperature variants in a field. Mahan et al. [61]
    designed an optimal temperature based field monitoring system by using a low-cost
    infrared sensor. 3) Proximity Sensors Detect the presence of nearby objects without
    any physical intervention. The sensor works by emitting an electromagnetic beam
    in the field and looks for any alterations in the signal. These are mainly employed
    in agricultural cattle grazing, counting of fruits, etc. Kim et al. [62] used
    a capacitive proximity sensor to optimize the harvest yield of fields. 4) Infrared
    Sensors Senses the changes in the environment by emitting infrared rays. They
    work in two approaches i.e., active and passive. An active IR sensor can both
    emit and detect the radiations and constitute a light-emitting diode and a receiver.
    The passive IR sensors can only detect the radiation and possess only a LED. In
    agriculture field infrared sensors can be employed to detect the presence of rodents
    in the orchards, count the number of plants or trees in the field, capturing satellite
    images of the field. Allred et al. [63], used IR sensor-based satellite imagery
    to map the findings and results of UAV to chart agricultural drainage systems.
    5) Touch Sensors Also known as tactile sensors, work on sensing the touch. They
    are low-cost sensors. In the agriculture field they can be used for the detection
    of intrusions in the field. Depending on the target and the range, there are different
    types of sensors, the same are discussed in Fig. 6 and TABLE 7 below: TABLE 7
    Sensors Based on Their Fields of Application FIGURE 6. Sensors and their types.
    Show All SECTION IV. Related Work The advancement and role of the Internet of
    Things in precision agriculture along with the related areas where research is
    being conducted are discussed in this section. Literature including various approaches,
    techniques, and methodologies presented by the number of authors has been divided
    into different sections. Various studies are performed and put forward by various
    academicians and authors concerning the evolution of agriculture relating to the
    incubation of the concepts of the Internet of Things. Kim et al. [64], reviewed
    different articles related to the induction of unmanned aerial vehicles in agriculture.
    The authors highlighted the recent trends, controls, perspectives, and platforms
    of UAV for agriculture. The study focused on what are the different platforms
    used for UAV and how those platforms can be designed. The hardware components
    related to the design of UAVs were also discussed. Sensor types compatible with
    platforms such as fixed-wing, helicopter, quadcopter, etc. were also discussed.
    A study on critical technologies for communication, modeling, and control was
    also presented. Various applications of UAVs in crop monitoring, spraying, and
    mapping, etc. were also presented. The authors concluded their study by providing
    the data on the latest technology trends and applications of UAVs in agriculture.
    Ayaz et al. [65], studied the latest trends and technologies in the field of agriculture.
    The potential sensors, IoT devices, communication techniques, used for soil, crop
    irrigation, insect, pest analysis were studied and discussed. Also, how this technology
    is redefining the agriculture system and boosting farmers to work, is portrayed.
    Authors studied the recent developments of IoT and how it is helping in providing
    the solutions while designing an IoT system for agriculture, what strategies and
    policies need to be considered. The advanced agricultural practices such as greenhouses,
    vertical farming, hydroponic farming, and phenotyping are also explained. All
    the crop stages and potential challenges are also discussed. Farooq et al. [66],
    presented many aspects of IoT in agriculture. Authors discussed all the recent
    technologies associated with IoT along with big data analytics for the development
    of precision agriculture systems. Various network topologies, architectures, layers,
    and protocols are also presented. In context to the development of a smart farm,
    all the major components and relevant technologies were discussed. Also, the regulations,
    standardizations, and policies used by several countries to standardize IoT methods
    for agriculture have been discussed. Elijah et al. [67], gave an overview of IoT
    and data analytics technologies and practices in agriculture. The authors divided
    their study into four sections i.e., communication technology, internet, data
    storage, technology. The authors also provided an analysis and data on how the
    aforementioned sections can be employed for dealing with the diminishing agricultural
    resources. The pros and cons of various technologies such as cloud computing,
    WSN, radio frequency identification, middleware systems, etc. to their application
    in the agriculture field are also discussed. Studies on how these technologies
    can be used to develop an IoT ecosystem, with technical and business scenarios
    were also presented. Misra et al. [68], discussed the concepts and role of IoT,
    AI and big data in the field of agriculture. In the review, focus was laid on
    green- house monitoring, disease detection, usage UAV machines and drones agriculture
    and supply chain modernization, social media in food industry, food quality assessment
    and modernization for food traceability. Thakur et al. [69], reviewed articles
    of repute in the context of the employability of WSN in agriculture. The authors
    highlighted the different communication technologies and WSN technologies adopted
    for precision agriculture. The authors also discussed various sensors and their
    role in agriculture. The influence of various techniques for designing the models
    is also discussed at length. Damos [70], presented a review on the pest control
    in precision agriculture. The author discussed the various computer-aided technologies
    employed for forecasting and designing decision support systems. The challenges
    and constraints of designing the decision support system were highlighted. The
    most available and published data present online in terms of pest management was
    also discussed. A differentiation between the documented and existing decision
    support systems was highlighted. The advancement and role of the internet of things
    in precision agriculture along with the related areas where research is being
    conducted are discussed in this section. Literature including various approaches,
    techniques, and methodologies presented by the number of authors has been divided
    into different sections and are discussed as follows: A. IoT in Farm Management
    Farm management refers to the construction and implementation of decisions for
    obtaining the maximum production and profit via organizational operation of decisions.
    This area is most benefitted by automation and the implementation of new technological
    methods. With farm management agricultural practices are made informative by evaluation
    and comparison with the other developed approaches and methods. Diedrichs et al.
    [71], with the aid of machine learning and IoT sensing devices, predicted the
    occurrence of frost events. Authors designed their system based on three layers
    i.e., a group of internet-enabled devices for water data collection. The authors
    augmented the data using the synthetic minority oversampling technique due to
    its capability of reducing the occurrence of errors with the ML approaches. The
    humidity and temperature sensors were employed to collect data from five meteorological
    stations of the Mendoza Province of Argentina. For each station, the existing
    sensor data spanning from a period 2001 to 2016 was taken as a reference to collect
    the daily data. The data was divided into two sets i.e., locally available is
    the config-local and the one available globally is the config-all. Bayesian Networks
    were employed along with SMOTE and recursive portioning, to train the system.
    Jawad et al. [72], designed a wireless power transfer technology based on a drone
    charging system for smart agriculture. The authors used the concepts of magnetic
    resonator coupling and sleep/active modes of charge transfer system for designing
    the model. Authors mainly focused on how to charge wirelessly the drones and other
    equipment employed in agricultural field monitoring. The magnetic resonant coupling
    technique was considered due to its capability of high power transfer and efficiency.
    In the experimentation, authors found that the FSC coil with 150 coil turns in
    the transmitter circuit and the MTC comprising of 60 coil turns in the receiver
    (i.e. drone) accomplish the maximum transfer power and efficiency. For finding
    the accurate efficiency, the model was tested based on different load, and how
    to load misalignment changes the model behavior was also noted. Drone flight time
    was also taken into consideration and was estimated based on the adopted battery
    capacity and payload of the drone. Tseng et al. [73], proposed an intelligent
    IoT based platform for farm management. The authors took the data based on different
    plants i.e., beans, spinach, celery via sensors, and used 3D normalization on
    that data to extract the optimal/useful data. The average and variance were moved
    to obtain user data without making any visible changes in the actual data. Farmer’s
    behavior was analyzed for the application of pesticides and fertilizers. For the
    platform development SIM5320E, IoT Development Board is used along with the BH1750
    illumination sensor and BME280 temperature and moisture sensor. Bacco et al. [74],
    designed a model based on air-ground UAV communications for smart farming. Authors
    empirically and analytically developed a real test-bed implementation of IEEE
    802.15.4 based communication between unmanned aerial vehicle and ground sensors.
    The focus was laid on how to transfer data between sensors and other devices present
    on the ground in an optimized manner to ensure fewer transmission losses. From
    the experimentation, and result analysis authors found the Gilbert-Elliot model
    to be suitable to approximate the packet loss in the link at low transmission
    speeds. The authors used approximately 80,000 datasets from the testbed. Ahmed
    et al. [75], based on the concepts of fog computing and Wi-Fi-based long-distance
    networks proposed a system for smart monitoring. In comparison to the existing
    traditional models, a scalable and flexible model was designed for monitoring
    and controlling agro farms in rural areas. Authors introduced a WiLD network and
    fog computing in the existing WSN-based solutions to cover long ranges with fewer
    delays. A cross-layer based MAC and routing solution for sensing and actuating
    were proposed to reduce the network latency. Throughput, coverage range, and network
    latency of the network structure were analyzed. Liu et al. [76], by hybridizing
    the concepts of IoT, cloud computing, and data mining proposed an integrated framework
    for the agricultural field. China was considered as the territory to design and
    devise mechanisms to enhance modern agriculture as compared to the conventional
    one. Quality, safety, management, and pollution are were taken into consideration
    while designing the model. NoSql database, DynamoDB, relational database Oracle,
    and file object storage Amazon S3, were employed to provide the hybrid data storage
    design. Bai et al. [77], due to the issue of frequently changing environmental
    conditions addressed the issue of estimation and control in the greenhouse. The
    authors studied how to collaboratively deploy WSNs and actuator schemes for agriculture.
    Sensor nodes were used to conduct a local estimation with Kalman filters to enhance
    the stability and transmission of data ensuring energy optimization. Using the
    concepts of collective clustering and mutual effect, the actuator node based scheme
    is designed for the improvement of estimation speed and conversion accuracy. Parameter
    optimization is achieved through fuzzy neural networks along with the PID control
    algorithm. Jinbo et al. [78], performed research on developing a platform for
    the monitoring of a field with agricultural modernization. A system named DEMO
    was proposed by using the SpringMVC framework, MyBatis, Spring Data DynamoDB Stored
    Procedure, Paho, and other related technologies grounded on the J2EE platform.
    Open-source elements such as raspberry, IoT gateway integrated with the ZigBee
    module were used for the development of the platform and were chosen due to their
    stable and cost-efficient properties. The proposed system is capable of massive
    data processing and analysis for agricultural monitoring. RESTful interface service
    system developed on a cloud platform, ExtJs client technology, and WeChat were
    applied to develop the Demo system of an application layer. Mukherjee et al. [79],
    worked on the challenges of a decentralized and heterogeneous UAV swarm deployment.
    The work is focused on how to design and deploy a UAV in resource-constrained,
    harsh, and challenging environments. Swarm edge due to its heterogeneous nature
    and unequal data generation within its member’s results in under-utilization of
    the available computational resources. To solve this issue, the authors proposed
    a Nash bargaining-based weighted intra edge processing offload scheme which can
    reduce the problem of heavy processing in some swarm members. The proposed method
    achieves better scalability and reduced processing delays. Chen et al. [80], developed
    an IoT based inexpensive platform named ‘AgriTalk’ for precision soil farming.
    Turmeric plant was considered for cultivation and experiments were conducted to
    enhance its growth and production. Authors employed AgriTalk in developing several
    other IoT based models for the fields of Mountain Bao in Taiwan. For the study
    authors grew turmeric in three fields. The proposed model is capable of addressing
    dynamic changes in the field conditions for plants grown via in-soil cultivation.
    Automated devices like sensors, actuators with desired farming intelligence were
    employed to design the model. Manual delays for automatic control and switching
    over long distances were also addressed. From experim-entation it was found that
    the curcumin concentration in turmeric leaves after six months was elevated to
    6685.6 μM as compared to 72.1 μM thus witnessing a fivefold increase. Lopez et
    al. [81], proposed a smart system for estimation of soil parameters using an autonomous
    wireless sensor network. Phosphorus content in the soil was measured. For power
    optimization and maintaining a balance between change rate phenomena of soil throughout
    the day for phosphorous estimation, authors developed a dynamic power management
    approach. DPM was tested on both the circuit level and the system level. ANN was
    used to find the significant correlations between the soil parameters such as
    electrical conductivity, phosphorous, temperature, and humidity. Also, energy
    harvesting with the help of IoT and cloud services is proposed. Chen and Yang
    [82], provided a detailed analysis of how efficiently the systems can be developed
    for agriculture based on the techniques of data visualization, clustering, etc.
    The authors studied the significance of various parameters in the same environment
    and effects. For the promotion of efficient development of agriculture, the authors
    proved that data visualization and cluster analysis pave a way for finding the
    key technologies to be applied in modern agriculture. For time and cost optimization,
    functions such as sensing, monitoring, identification, transmission, and feedback
    can be realized using IOT platforms and they can serve as an impetus for intelligent
    agriculture. To test and develop their methodology, authors took the agriculture
    situation in the Jhinsa river basin which lies in the upper reaches of the Yangtze
    River as a testbed. This area has become the most abundant area of biological
    communities in Eurasia. For the study, the authors collected precipitation and
    temperature data. Since data was large, k-means clustering is used to analyze
    the data. Leng et al. [83], presented a study for the application of IoT in agricultural
    products supply chain management. Authors discussed in length what to take into
    consideration, while designing a structural model for the supply chain management.
    RIFD technology was considered as the key constituent for designing the model.
    Pereira et al. [84], based on the concepts of IoT developed an instrument capable
    of performing environment monitoring in a poultry farm. The authors focused on
    designing a cost efficient prototype for the poultry monitoring which provides
    affordable benefits compared to the commercial products available in the market.
    DHT22 sensors were used to collect air pressure and temperature details and CPU
    such as Wemos Mini D1with chipset ESP-8266EXwith standard Wi-Fi 2.4 Ghz connectivity
    were used to calibrate the whole model. Singh et al. [85], developed a cloud based
    autonomic system for delivering agriculture as a service via web and mobile based
    applications. For data collection IoT and other devices were used for communication
    and coordination. Fuzzy logic was used to automatically analyze agriculture. An
    architecture named Agri-info was developed to provide user services. Kolipaka
    [86], proposed a predictive analysis using cross media references for precision
    farming. Authors focused on the usage of sensors and MEMS integrated IoT for precision
    farming. The crop growth parameters such as soil state, water, weed state, crop
    quality and seed quality were also discussed. ML and big data approaches were
    applied to perform predictive analysis and thus finding method to provide optimal
    solutions to farmers. Further based upon the certain characteristics we have tabularized
    the major findings in TABLE 8. TABLE 8 Summary of Developed Methods for Farm Management
    B. IoT in Irrigation Irrigation is the method of application of controlled water
    to the farming fields, at needed intervals. Irrigation has been a constant area
    where a lot of energy, money, and labor is invested in the case of farming. Detection
    and knowledge of water level can reduce the cost of production by half. For increasing
    crop yield, smart irrigation management is essential. Various optimized and precise
    methods have been developed by various academicians. Klein et al. [96], with the
    help of satellite images, worked on the implementation of closed-loop irrigation.
    The authors designed a real-time water requirement system, which can optimize
    water delivery for 140 cells located in four hectares of land. Vegetative indexes
    were calculated for analyzing the total water consumption and how via loops this
    facility can be automated. Through this study and experimentation it was found
    that with the integration of closed-loop strategy and advanced water analysis,
    the overall water consumption efficiency can be improved. Alahi et al. [97], extended
    research to design and develop a smart nitrate monitoring system for the monitoring
    nitrate content in the surface and groundwater. The authors proposed a portable
    sensing system with the help of a planar inter-digital sensor, associated electronics,
    instrumentation, and electrochemical impedance spectroscopy-based analysis. Through
    real-time monitoring and sending data directly to the IoT web server, the proposed
    system possesses the capacity to monitor the impact of industrial, urban, and
    agricultural activity on water content and quality. The system also ensures distributed
    monitoring. Daskalakis et al. [98], used leaf sensing technology instead of ground
    soil monitoring for knowing the plant water stress. The authors proposed a low
    cost and low power consumption leaf moisture sensing model by sensing the leaves
    with the new plant backscatter sensor node/tag. The developed tag collects the
    information from a leaf via analog and digital conversions and then the data is
    transferred via remote communication to a low-cost software-defined radio reader
    using monostatic backscatter architecture. The data collected from this node is
    then connected to the irrigation system. The proposed system is powered by a flexible
    solar panel. Jayalakshmi and Gomathi [99], proposed a sensor-cloud based precision
    agriculture for intelligent water management, to enhance crop production. For
    the model design, moisture and stress levels of different plant organs were considered
    along with the behavior vegetative and reproductive organs cell growth, and its
    effects on the water requirement were studied. The dimensionality reduction technique
    was employed to choose the optimal parameters. For the case study, the wheat plant
    was taken. The effect of soil temperature and water suction rate was studied in
    the case of the plant growth. The non-adsorbing testbed was prepared by exploding
    the sand grains at high temperatures. With the aid of WSN, it was monitored when
    the plant needs to be irrigated. Angelopoulos et al. [100], developed a small
    scale smart irrigation prototype for a strawberry greenhouse. The prototype possesses
    off the shelf hardware and software requirements and was tested on large farms
    having multiple crops to get a data gain. The reference architecture also targets
    edge data distribution. The model was tested in Greece and its performance was
    compared against the traditional existing strawberry greenhouse methods for irrigation.
    Compared to the cloud-based approaches, and their incompetence to handle network
    traffic, security challenges, and data sharing with the third party, this model
    is secure and reliable and can handle large datasets. Dominguez-Nino et al. [101],
    worked on how to integrate sensors for developing automated software tools to
    undertake the routine tasks and decision-making involved in scheduling irrigation.
    The authors also focused on the suitability of capacitance approach soil moisture
    sensors and how to automatically interpret them and providing feedback to the
    scheduling algorithm. The proposed approach was tested in the apple orchards located
    at the IRTA-Lleida Experimental Station in Mollerussa, Lleida, Spain. For the
    study, both the physiological and agronomic properties were taken into consideration
    while experimentation. Krishnan et al. [102], designed an automated irrigation
    method. The authors developed a fuzzy logic-based system for precision irrigation
    by using Global System for Mobile Communication (GSM) service to enable farmers
    to water the fields. Soil and temperature, humidity, and motor status parameters
    were monitored and taken for the study. For the efficiency evaluation of the system,
    a comparison was done between the proposed system, drip irrigation, and manual
    flooding. Harun et al. [103], designed an environment-friendly system named “Greenhouse
    Irrigation Management System” for precision irrigation in agriculture. Some critical
    environmental parameters such as soil moisture, pH, temperature, humidity are
    measured with the use of WSNs to make decisions. The sensors measure the data
    and based on certain threshold value result, the fields are irrigated. Olivo [104],
    focused on the problems associated with device growth and its effects on the control
    decisions. To address this issue, an architecture named “Rules Engine and Context
    Event Processor (RECEP)” is proposed for the dynamic processing of events originated
    in the context of IoT and PA. In this model the concept if optimization was used
    to optimize the resources to increase agricultural production. The experimental
    setup was set in a banana field located in Machala-Ecuador. The given model was
    designed for operating in low-cost infrastructures for both small and large producers.
    Marcelino et al. [105], based on the work and issues of small family farmers,
    proposed a low-cost system for control, monitoring, and automation of agricultural
    greenhouse. The proposed model was designed by prototyping Raspberry Pi and Arduino
    along with sensors. Temperature, humidity, and light sensors are used for the
    field data collection. The web human interface was developed for interaction between
    the system and the farmers. Koksal and Tekinerdogan [106], developed an automatic
    farm management information system capable of performing data acquisition, processing,
    monitoring, planning, and decision making and managing the farm fields. The authors
    tested their models on two case studies on smart farming in Turkey, one for smart
    wheat in Konya and other greenhouses in Antalya. The feature-driven domain analysis
    model is designed based on IoT reference architectures and data modeling approaches.
    The system was capable of performing all farming related functions, such as irrigation,
    crop monitoring, etc. Hate et al. [107], designed a vegetable traceability system
    with smart irrigation. The field parameters like soil moisture, humidity, water
    supply control, and temperature of particular farmland are monitored with sensors
    such as water level, humidity, soil moisture, and temperature sensors. With IoT,
    the cost is reduced and efficiency is improved. Agale and Gaikwad [108], focused
    on the problem of water reduction in farmlands. An IoT based automatic system
    is designed to collect, analyze, and monitor the real-time sensor data every 10
    seconds from soil and environment and provide irrigation solutions based on that.
    The parameters like temperature, humidity, soil moisture were considered for data
    collection. The proposed method achieved 92.24 % accuracy in water-saving strategy.
    Huan et al. [109], designed a system for monitoring of water in aquaculture ponds.
    To design the system authors used the concept of narrowband IoT (NB-IoT). The
    system used STM32L151C8 microcontroller, sensors and other devices for real time
    data collection and other services. The system was implemented and tested in ChangZhou,
    JiangSu Province, China and performed with low error rate. Vij et al. [110], developed
    a smart precision irrigation system based on the concepts of IoT and machine learning.
    The main aim of authors was to develop a computationally efficient and low cost
    system. Raspberry Pi and Arduino Mega 3 were used as microcontroller and other
    sensors were used to fabricate the system. Compared to the existing systems, the
    proposed system is computationally efficient. The various findings of this section
    have been tabularized in TABLE 9. TABLE 9 Summary of IoT Based Developed Methods
    for Irrigation C. IoT in Crop Monitoring Crop monitoring is the process or method
    of observing the farm fields and crops for enhancing productivity and reducing
    cost. This can be performed with satellites, drones, sensors, and other methods.
    Vegetative indexes of an area can also play a major role in crop monitoring by
    providing the data related to the exact area of land under cultivation etc. With
    crop monitoring the estimated time of harvest can be predicted. de Souza et al.
    [118], proposed an integrated framework with the combination of hardware, software,
    middleware, and other equipment to monitor the testbed. The authors also recorded
    the testing of each equipment in the seed test labs. An IoT based system was developed
    where soil sensors provided the relevant information/data for the growth of seeds.
    Testing was performed in the Official Seed Analysis Laboratory (OSTL) of the Brazilian
    Agricultural Research Corporation. Rekha et al. [119], developed a WSN based framework
    for sensing agricultural characteristics and then provide decisions to the farmers.
    Based on the data collected, the model will provide decisions for irrigation and
    crop monitoring. For the case study, India was taken into consideration due to
    its large farming area and population dependence on agriculture. Groundnut farming
    was studied in this work. Becker Reshef et al. [120], proposed a remote sensing
    analysis based crop monitoring system for strengthening agricultural decisions
    and improving crop security. The authors named this model as “GEOGLAM” model which
    ensures the decision support of all the necessary steps for crop security and
    analysis. Kamath et al. [121], proposed a wireless sensor-based model for monitoring
    the growth of weeds in paddy crop. The authors performed a study on how Raspberry
    Pi and WSN can be modeled for precision agriculture. Raspberry Pi based model
    was deployed to monitor crop along with the integration of Bluetooth 4.0 to send
    signals from visual sensors to the base station. A solar cell battery was used
    to provide power to the system. At the remote station, the images of the crops
    were processed to extract the background and foreground objects. Classification
    between weeds and paddy crop was performed with SVM. Rao and Sridhar [122], Developed
    an automatic irrigation system by prototyping Raspberry Pi and other IoT devices
    to enhance crop productivity. A cloud-based data collection system supported by
    sensors used for data collection is employed to collect the field data. The data
    collected is sent to the base station and based on that data, the decisions are
    made. Parameters like humidity, soil temperature, and sunlight availability are
    measured. Geng et al. [123], for greenhouse environment monitoring proposed a
    four-layer IoT based mobile system. To design the system, the authors proposed
    integration of both Raspberry Pi and Arduino chip in the design where the former
    serves as the data server and later as the master chip for a mobile system. Fabrication
    of all the sensors, actuators, and other devices was done on a single board, thereby
    reducing the device’s physical distances for better performance due to serial
    communication. A dedicated communication protocol with CYC was designed to reduce
    transmission errors and data loss. Shadrin et al. [124], designed an intelligent
    agriculture IoT equipment to monitor the crop. The authors designed the system
    using the test case of monitoring the seed germination. The proposed model was
    fabricated with the integration of low power embedding wireless sensor nodes with
    artificial intelligence. CNN was used to train the model along with the collection
    of data via sensor nodes of the different stages of germinated seeds. A 3D clustering
    analysis was used to analyze the relationship between environmental factors and
    farmer issues. Uddin et al. [125], focused on developing a system for monitoring
    crops from the stage of seed germination to harvest. For this authors proposed
    a resource optimized fast health crop monitoring system. Saudi Arabian agriculture
    was taken into consideration as a case study. IoT and drones were harnessed to
    make an efficient agricultural monitoring system. Data collection methods were
    used to collect data from heterogeneous devices arranged in localized clusters.
    The system was designed to withstand a harsh environment with agility and feasibility.
    Feng et al. [126], proposed a crop growth and nutrition diagnostic system based
    on hyperspectral remote sensing. Color canopies obtained from images captured
    with satellites, UAV, and remote sensing were used to determine the index of yield.
    To determine the color canopy of plants, the color correlation was employed. Cen
    et al. [127], discussed the usage of UAV with dual image frame cameras to estimate
    the aboveground biomass and panicle biomass of rice. The authors conducted their
    study at different growth stages of the crop. The field investigations were made
    on the variations in typical vegetation indices. The accuracy of the model was
    obtained with the extraction of RGB images at two different stages. Random forest
    was employed to obtain AGB as well as the PB. Khan and Kumar [128], proposed a
    framework for the monitoring the crop field. To make their study reliable, the
    authors monitored weather in real-time to get an idea of how to provide an ambient
    condition to farm. Production increase techniques are also proposed for precision
    farming. To overcome the problems of delay in information transfer from the field
    to the farmer, the context-based agricultural mobile sink is designed in WSN.
    Thus the mobile sink node introduction improves the overall efficiency and energy
    consumption of the model. Frontward communication area (FCA) based route selection
    is proposed to reduce energy consumption and delay. Min and Kuang [129], designed
    a system for monitoring the rice crop field. The analysis of the growth of rice
    and rice duck in real-time is done by obtaining the data via the Internet of Things.
    Authors comprehensively viewed the rice and rice duck plant species and the ambient
    farm conditions required for their growth. Qiulan et al. [130], estimated the
    production of carbon from the crop growth. The authors provided a framework for
    the estimation of organic carbon compounds in the farmland soil. The wheat plant
    was taken as a test case in this study. The model provided the real monitoring
    of the farm for carbon production with the aid of IoT and other devices. The real-time
    data was collected from the Yanzhou District of Jining City, Shandong Province,
    China. Harun et al. [131], proposed an improved crop monitoring system based on
    IoT concepts. Brassica Chinensis is the plant taken for study and was subjected
    to four different light treatments such as pulse treatment, continuous treatment,
    high intensity, and artificial control for enhancing the plant growth. The authors
    also analyzed parameters such as leaf count, height, dry weight, and chlorophyll
    a and b. An intelligent embedded system was developed to monitor and capture real-time
    data. Alonso et al. [132], designed an intelligent edge IoT based platform for
    precision livestock and crop monitoring in a dairy farming scenario. In their
    study, authors used the concepts of AI, blockchain technology, edge computing
    and IoT concepts for designing the platform. The architecture named Global Edge
    Computing Architecture (GCEA) was tried and tested in real time in a dairy farm.
    Castellanos et al. [133], proposed a narrowband IoT (NB-IoT) system for collection
    of soil parameters to monitor the potato crop health and growth. A UAV aided network
    is used to support the purpose. The architecture proposed accessed the real filed
    scenario of a potato filed near Bogota, Columbia. The main achievement of this
    work was the energy harnessing due to optimal topology applied for the deployment
    of sensors across the field and thus making the battery last for 82 hours for
    above ground sensors and 77 months for the deep buried sensors. Shafi et al. [134],
    presented a multimodal for crop health monitoring based on the concepts remote
    sensing, IoT and ML. Authors conducted their research in Pakistan. Sensors were
    deployed in fields to collect the real time data. Multispectral data from drones
    presented a NDVI and was used to analyze the crop based on its chlorophyll content.
    Variable length time series data captured from IoT devices and sensors were used
    to generate crop health maps. Deep neural networks were implemented for classification
    and provided the optimal classification. Some studies of the articles incorporating
    IoT in fields related to crop monitoring are presented in TABLE 10. TABLE 10 Summary
    of Developed Methods Crop Monitoring D. IoT in Disease Detection Diseases play
    a vital role in the economic and food crisis of a country. So to avoid this, disease
    detection is employed. This involves the detection of various diseases whether
    fungal, viral, bacterial, etc. from the stages of early to the post-harvest. Incubation
    of IoT has revolutionized the disease detection area in plant phenotyping resulting
    in major control resources available to avoid disease occurrence. Wang et al.
    [146], focused on addressing the problem of pests and insects. Authors proposed
    an IoT based model that can detect the early occurrence of the pests and diseases
    from visual references. Rough set theory algorithm and NN were used to model design.
    The proposed model was compared with existing models for accuracy and efficiency.
    Pandiyan et al. [147], applied the concepts of image segmentation and IoT, to
    develop a system/platform that can detect the diseases in plants. Authors proposed
    a novel platform having an Advanced Segmented Dimension Extraction (ASDE) with
    Heterogeneous Internet of Things procedural (HIoT) aspects, to detect the apple
    leaf diseases. A sign based plant disease identification model for real-time resembling
    of leaf diseases namely bacteria, fungi, micro-organisms, and viruses is presented.
    Three levels i.e. connectivity level, platform level, and service level were employed
    for performing data aggregation, transmission, and automatic identity identification.
    Leaf gestures were studied to identify the diseases in leaves. Zhao et al. [148],
    developed an automatic crop disease detection system capable of identifying and
    recognizing the leaves from a cluttered background. Combining IoT concepts and
    CNN, authors designed a novel approach named “Multi-Context Fusion Network (MCFN)”
    along with IoT deployments for crop diseased detection in wild. Kale and Sonavane
    [149], developed a smart and optimized smart fertilizing decision support system
    for smart farming. The authors addressed the problem of disproportion due to lack
    of judgment. Concepts of IoT and GA were used to design the system. An improved
    GA based multilevel parameter optimized feature selection algorithm for ELM classifier
    along with IoT was proposed in the designed system. The proposed system focuses
    on plant disease detection in a real-time environment. Khattab et al. [150], developed
    an IoT based cognitive automatic monitoring system for detecting the epidemic
    diseases in plants. By combining the concepts of artificial intelligence and prediction
    algorithms to develop the expert system, capable of predicting, analyzing, and
    decision making. A layered approach was used to design the model. Soil, leaf wetness,
    wind speed, and wind direction sensors were employed to gather the data. The model
    was tested on detection of the diseases like Late Blight, Early Blight, and Powdery
    Mildew in tomato and potato crops. Chen et al. [151], based on AI technologies
    and IoT, developed a system named “RiceTalk” for the detection of Blight diseases
    in the rice plant. AgriTalk model was used as a base model in this work to develop
    this system. Compared to AgriTalk, the authors used non-image IoT devices to design
    this model for disease detection. Devi et al. [152], proposed a simple and efficient
    IoT enabled solution for developing a system for automatic disease detection.
    Bunchy top of banana and Sigatoka diseases in the wild banana plant were detected
    and classified. Environmental parameters like soil moisture, temperature were
    measured with sensors and the IoT model was framed using the Raspberry PI hardware
    model. Data were classified using GLCM and RFC for disease detection. Kitpo and
    Inoue [153], developed an early disease detection system for rice crops disease
    detection. The drones based IoT architecture with real-time data collection capabilities
    was designed. For the mapping of drones on the fields, GPS sensors were used.
    The designed system is capable of displaying the analytical results and the position
    of the plant where the disease is present. Pawara et al. [154], studied the pomegranate
    diseases such as Bacterial Blight, Fruit Spot, Fruit Rot, and Leaf Spot. Developed
    a HMM and senor based model to early detect the disease and provide the solutions.
    Parameters like air temperature, leaf wetness, air humidity, and soil wetness
    were considered and studied for model design. For digital communication between
    field and farm GSM module was used. Truong et al. [155], real-time data monitoring
    capable system was designed with IoT and cloud storage for disease detection and
    recognition. The fungal diseases of rural crop fields with detected. Environmental
    data conditions such as humidity, temperature, wind speed, and rainfall were employed
    for designing decision support. A Support Vector Machine Regression (SVMr) model
    was used to classify the data. Jumat et al. [156], developed a cost-efficient
    and affordable smart farming prototype capable of detecting plant disease and
    proving decisions. For study and experimentation, Septoria plant disease was taken
    and studied for different stages right from outbreak to spread maturity. The system
    also possesses the web-enabled facilities for farmer support. Some studies of
    the articles incorporating IoT in fields related to disease detection are presented
    in TABLE 11. TABLE 11 Summary of IoT Based Developed Methods for Disease Detection
    SECTION V. Findings Several research articles related to the role and responses
    of the Internet of Things in agriculture have been studied. From the literature
    and studies, it can be seen that immense contribution has made by IoT in the field
    of agriculture starting from micro areas and moving over to macro environments.
    Internet of Things along with the concepts of cloud computing, cluster computing,
    wireless sensor networks and computer vision has revolutionized the field of monitoring,
    crop production, disease detection, and supply chain management. Since the domain
    of agriculture itself is a wide domain so considering the impact IoT has or can
    make on this field, the search was not restricted or limited to any area. The
    data acquisition for agriculture systems is a multidimensional approach. There
    are several fields in agriculture where IoT is applied e.g., crop monitoring,
    diseased detection, precision irrigation, supply chain, cattle grazing, and raising,
    etc. To design a precision approach, the target plays a very important role in
    data collection. From the existing studies it is found that mostly overall 90%
    of the data is self-acquired by the authors with the use of wireless sensors.
    This data included soil data, pH values, light, water, humidity, and images. In
    the case of crop disease detection, leaves were taken as the primary subject of
    study due to their ease of availability and quantity. Nearly 80% of the leaf data
    was self-acquired using digital cameras and web-enabled devices. However in some
    studies to validate their models, authors also used the existing standard ground
    truth databases available. Satellite imaging and remote sensing images were also
    taken to understand the demography and vegetative indexes of a region. UAV drones
    were the most used devices along with web-enabled digital cameras and mobile devices
    to capture the data in the form of images and also acted for providing real-time
    monitoring of device location in the fields. Certain issues and challenges are
    faced by the authors while capturing real-time images due to environmental and
    lighting conditions. To avoid these issues, laboratory-based testbeds such as
    greenhouses were developed and their data was acquired in a closed environment.
    From the literature, it is seen that, to develop the prototypes certain common
    parameters were taken for conducting the study irrespective of the problem to
    be addressed. Theses parameters included soil data, pH value, humidity level,
    moisture content, water content. After the analysis of the studies it was found
    that for any agricultural system to flourish all these parameters play a combined
    role. These parameters were most common for the problems addressing farm management,
    crop monitoring, and irrigation. However in certain other parameters like leaf
    wetness, salinity, disease severity, fertilizer ratio, plant height, CO2 content,
    mineral content, and conductivity were considered while addressing the specific
    problems like plant disease detection, smart irrigation, seedling germination,
    etc. These were the devices employed to collect the data. Depending upon the problem
    the authors addressed, different type of sensors were employed. For soil data
    collection, the contact method sensors such as hygrometers, or electrodes which
    penetrate the soil were used to collect soil information. While as in the case
    of the collection of soil information via tractors or vehicles non-contact soil
    sensors were employed. But for the studies it can be seen that contact method
    sensors are the most common devices used for soil data collection. In case of
    soil pH value and salinity electrochemical sensors are employed. In the case of
    soil nitrates, CO2, and fertilizer content, topsoil depth, biomass content, organic
    matter are measured. For water data collection, parameters like relative humidity,
    leakage of pipes, dissolved oxygen, nitrates, and other oxides were measured by
    the authors. To accomplish this various water sensors like ultrasonic sensors
    were employed to measure the water levels in the tanks, ponds, and farms. Temperature
    and humidity sensors were used to measure the temperature of water and humidity
    of soil for water content. In the case of plant leaves, the leaf wetness sensors
    were employed to understand the moisture content of the plants. Other than these
    sensors, neutron sensors, time travels sensors, and capacitance sensors are also
    employed by some authors for measuring the water levels. In the case of supply
    chain and cattle grazing, tags and biosensors were employed to gather the data.
    To develop the prototypes, the authors used the devices based on functional capabilities.
    From all the devices, Arduino and Raspberry Pi were the most desirable hardware
    platforms for the authors. Arduino was employed to tackle simple or sequential
    issues that do not require complex solutions. In the case of scenarios with complex
    environments, Raspberry Pi boards were employed due to their capability of addressing
    multiple problems at the same time. For functionalities that faced time issues,
    Raspberry Pi boards were employed. In the case of communication technologies,
    LoRa and ZigBee are the most commonly used communication technologies by the authors
    in the platform designs due to their capabilities of handling a multitude of solutions.
    Lora and ZigBee use GPS to enable and detect geo-locations. They are low cost
    and secure for data transmission. Other than these technologies, authors also
    made use of cloud and cluster computing to handle a large mass of data and provide
    on-spot solutions to the consumers. The authors performed the processing of data
    in different stages. At first preprocessing on data was performed to remove any
    kind of outliers or anomalies in the data. To remove the imperfect data, algorithms
    such as noise removal with Gaussian noise, salt and pepper noise, histogram equalization
    were commonly used for the preprocessing of image data. However in the case of
    numerical data missing value imputation, the banana dataset for noise reduction
    was employed. To obtain the optimal data from a given set of data, data reduction
    was performed. The data reduction approaches e.g., dimensionality reduction, attribute
    subset selection, numerosity reduction, etc. were employed by various authors.
    To make systems capable of taking decisions, several learning algorithms like
    GA, CNN, NN, SVM, PNN, GANs were used to train and test the models. From the literature,
    it is seen that most studies and experiments were performed in countries that
    have agricultural economies like the USA, China, India, Brazil, Australia, etc.
    Most of these countries are economically stable and first world countries. They
    have better infrastructure and service availability. Also only 20% of the studies
    were focused on real-time implementation of their prototypes which indicates that
    most of the experimentation was conducted in a closed environment. This pattern
    raises concerns on how these studies can be employed in real-time environments
    with low infrastructure and maintenance costs. The problem of power consumption
    was also addressed by some studies. However there were no comparisons and reasons
    given on how the dream of IoT can be made real for poor and self-financing farmers.
    Along with this, a few studies provided the cost estimation for the deployment
    of the models. In the Fig. 7, the percentage distribution and contribution of
    IoT in different fields of agriculture are shown. From the figure it can be seen
    that more extensive studies are conducted in the field of crop monitoring. FIGURE
    7. Percentage contribution of IoT in different fields of agriculture. Show All
    These studies and analysis put forth by different articles show that current/existing
    solutions have incorporated IoT to solve several challenges in the agricultural
    domain. With the incorporation of these technologies, a large number of challenges/factors
    for improvement have emerged. Along with the study of factors for improvement,
    future research directions, applications are also highlighted. The sections below
    explain the factors for improvement and the futuristic research directions. A.
    Challenges Despite the growth achieved by IoT over the past few decades, there
    still exist some conceptual, fundamental, and developmental issues. 1) Cost Designing
    a cost-optimized model is still a difficulty faced by many authors. Scientists
    are focusing on developing cost-efficient systems by reducing the hardware and
    software requirements in IoT deployments. Economic differences of countries make
    it difficult for farmers to deploy devices and technology. So, it is important
    to develop some economic models. 2) Standardization To fully utilize the technology
    for large range of applications, standardization of devices is essential. The
    present or current mechanisms do not confirm any standardization formats either
    for the data and process representation. Deprived of the cordial use of the semantic
    ontologies, machine-readable codes result in output differences due to misinterpretation
    and alterations from time to time. With standardization the interoperability issues
    of the devices, applications, systems and products can be solved. 3) Heterogeneity
    While designing a system, heterogeneous devices are used. Every device differs
    in processes and services requirements. In the case of agriculture, most models
    perform with heterogeneous devices, so it is important to create interaction between
    heterogeneous modules and communication technologies. Because of heterogeneity,
    the complexity of the network increases, and sometimes falsified results may appear.
    4) Accessibility For developing any farming decision support system based on IoT
    technology and other devices, the demand for availability of existing software
    and hardware to be present anywhere any time is a must thing. These problems need
    to be addressed to ensure the availability of services anywhere and anytime. Lack
    of availability of the required equipment can result in chaos and delay in the
    services. 5) Adaptability While designing a model, especially for precision farming,
    it is pertinent for the devices to be adaptable with the other devices and the
    surroundings. Since the environmental conditions keep varying and also sometimes
    due to certain communication or hardware issues certain devices are not adaptable
    with each other. 6) Energy Optimization Energy is the most emerging issue in IoT
    systems, WSNs, and other devices for their communication. Till now conventional
    sources of energy have been supporting the designing and working models. But due
    to an increase in devices, the consumption of conventional energy is not a reliable
    solution. Non-conventional sources of energy like solar, wind, water energy harvesting
    schemes should also be tested, but they haven’t been of much success and new methodologies
    should be developed to employ them for model development. 7) Compatibility To
    achieve the standards of fragmentation and scalability, the developed models or
    software should be flexible and should run on any machine. 8) Reliability For
    successful and smooth working, reliability is a major concern for IoT devices
    in terms of data transmission. The devices need to gather and transfer reliable
    data as based on the data received and interpreted, the decisions are made. Reliability
    is still a challenge due to system failures, node failures, battery issues, or
    other interventions. 9) Mobility Generally the systems or models developed are
    static. For smooth implementation of the framework, there should be mobility as
    most of the devices and applications are mobile. In mobile models, the issue of
    maintaining connectivity is still a difficult task. 10) Environmental Conditions
    In agriculture there are different landforms. So it becomes difficult to adapt
    to those changes, and this also jeopardizes data and services. This alters the
    accuracy of a system. 11) Real-Time Deployment Most of the studies put forward
    are not employed or tested in a real-time testbed. So before deploying a system
    or model, real-time analysis is a must, to avoid post-deployment losses. B. Improvements
    Since the growth of IoT is remarkable in the field of agriculture, certain improvements
    can be included in the growth and developmental state to make the systems and
    models more efficient, reliable, and business-oriented. 1) Warding Off the Performance
    Degradation Generally while developing systems, customer interaction or input
    is not taken. As the models serve a variety of customers from dynamic backgrounds,
    therefore their input must be taken while developing the models. This way the
    performance hazards and chaos that occurs on the filed can be avoided. 2) Sharing
    Rich Data Globally In almost all, the IoT based models designed for precision
    farming, the data sharing while integrating and mapping the system design should
    be encouraged. This can lead to the development of an interactive model globally.
    This feature can also help in understanding the topographic and demographic challenges
    of various regions on a global level. Thus the suitable solutions can be designed
    with those working in resource-constrained environments. 3) Moving Towards High-Speed
    Communication The communication domain itself is witnessing a progressive and
    dynamic shift. Since the IoT models are remotely located, so better communication
    is a prerequisite. Therefore it is important to consider high-speed communication
    strategies like 5G, for making the devices more reachable with lesser delays.
    4) Cost Analytic Studies for Model Design With the incumbent of IoT in agriculture,
    a variety of models are designed for addressing different domains such as irrigation,
    farm management, disease detection, and crop monitoring, etc. While designing
    the models various case studies are performed. As the development cost of models
    for these cases varies from country to country i.e., in first world countries
    there will be the different cost of devices and in second and third world countries
    it will be different. Therefore a model cost analysis will provide an idea of
    the purchasing power and investment a farmer from these varied economic regions
    can invest to develop a model. Also this can result in seeking or considering
    other cheaper and efficient ways to develop models. C. Future Research Directions
    With the advancement in the development of precision agriculture platforms with
    IoT and other technologies, the development of new applications or research areas
    is envisioned. After the study of the literature, certain potential concepts and
    futuristic research directions are listed and discussed below: Design of platforms
    in a user-friendly manner (from farmers’ perspective and ease of using) using
    Artificial Intelligence and other learning tools. Farmer’s perspective here means
    that an audit should be done well before designing the prototype. From this study
    a clear insight and differences between the requirements of the farmers and farming
    systems across the globe can be understood. To develop concepts and methodologies
    based on multidimensional aspects like science, expertise, experience, industry,
    etc. Energy harvesting or power optimization methodologies should be developed
    to reduce the cost of production, maintenance, and fault tolerance. It is evident
    that mostly the farms be it small or large, require power and energy for the working
    of devices. In most of the cases, the power to the devices is supplied from the
    main line or the power grid. But this is not a sustainable and efficient method.
    Thus in order to make farms self-reliant, the energy harvesting or power optimization
    approaches should be developed or incorporated while designing of the models.
    Induction of cloud sources for data gathering and processing in a reliable, systematic,
    and scientific manner. Develop systems that can withstand variable soil and environmental
    conditions. Since the agricultural environments are harsh and keep on changing
    with change in climatic conditions or seasons. So it is essential to develop systems
    which can be robust and sustainable to the changes in the external as well as
    internal factors. Development of user or farmer friendly apps for monitoring crop
    and plant health. Mostly farmers come different ethnic and linguistic backgrounds.
    So due to this their level of understanding and ways to perform agricultural tasks
    is also different. It is important to develop frameworks considering the native
    language of a region into consideration so the farmer and machine interaction
    can be improved. This will enhance enable the acceptance of precision farming
    methods easy as it can be seen some areas are reluctant to adopt due to this linguistic
    and understanding problems. Development of efficient sensor-based systems for
    high elevation areas. High elevation areas mostly have undulating surfaces and
    also in most of the countries, supply of power to these areas is still a dream.
    Form the literature, it can be seen that these areas have not been targeted for
    precision farming instead of being resource deficient. Therefore deployment and
    design of sensor based systems in these areas opens a scope in future of precision
    farming. Usage of previous and existential scientific data for the development
    of decision support systems in farming. Generally for designing the precision
    farming models, the primary data is considered. However for designing cost efficient
    and reliable models, the previous case studies and deployment models should be
    considered for the study. This means a collaborative model development methodology
    should be developed for understanding the nature of the work. To recognize various
    plant species using mixed data sets or heterogeneous data. Design of a portable
    and sustainable farming equipment control systems for large as well as small farms.
    Mostly from the study it can be seen that first world countries are welcoming
    in PA approaches while as in most third world and other nations, this concept
    is still in avoidance due to cost and shelf life of products and equipment’s.
    Development of reliable supply chain management methods for precision farming.
    D. Applications of IoT in Agriculture IoT has revolutionized the world of agriculture,
    and a manifold of application can be derivative of implementation of the Internet
    of Things in agriculture. These applications are a resultant of the architectural
    design chosen. These applications have been categorized and differentiated based
    on the subject they focus on and also the service they provide. The major sectional
    areas where IoT is applicable in agriculture are- observation, data collection
    and corroboration, governing, and management. Most of these fields work collaboratively,
    and all the applications involve at least two of these sections. All these sections
    are described below and TABLE 12 presents various IoT applications in agriculture.
    TABLE 12 Applications of IoT in Agriculture 1) Observation It is also called monitoring
    as the main aim of this section is to discern the working of various models, devices,
    applications, etc. With the incubation of the concept of IoT, it is the first
    and foremost stage to be smeared. In this phase, all the devices and equipment
    that are placed strategically are monitored for their work. Sensors, are the major
    deployment and data collection tools engaged in this phase for data collection
    of various field and non-field parameters. Monitoring the certain parameters,
    like soil salinity, pH value, volumetric water content by using various soil sensors
    and other essential parameters such leaf wetness sensors, color, humidity, etc.
    helps in the development of systems capable of performing following operations
    e.g., calculation of leaf area index, leaf health, leaf color, plant growth and
    aid in the development of automatic plant recognition systems. Other devices like
    water sensors aid in the monitoring of irrigation levels and requirements of the
    fields. Thus with such devices, smart irrigation scheduling systems are developed.
    Also with the gas sensors, remote monitoring devices such as UAV devices or images
    with hyperspectral reflectance properties, help in the estimation of biomass,
    nitrogen, carbon, and other essential gases content. This data can also be used
    to find the vegetative indexes of the filed or large demography. Heavy-duty vehicles
    such as thrashers, tractors, trucks etc., also need supervision and can use data
    analytics for farm management. Robots, autonomous vehicles, agricultural drones
    other equipment also need to be monitored remotely for better farm supervision.
    Livestock monitoring with the aid of IoT is also an important subject for precision
    farming. It includes cattle monitoring remotely using tags. Labour is also a major
    area of concern for precision farming. Since human intervention is generally prone
    to errors due to differences in understanding, decision making, and methodologies
    applied to solve a particular problem. Also the induction of human labor is cost-intensive.
    Therefore, with the application of IoT, human interference can be minimized and
    a network can be set up for monitoring thus reducing the errors and cost. 2) Data
    Collection and Corroboration Data is the main constituent of precision farming.
    It acts as both base and catalyst in the whole process. With IoT, a large number
    of data is collected in varying forms and formats. Sensors, cameras, and various
    other nodes aid in the collection of data. In precision agriculture, based on
    the nature of the problem, the IoT network can be designed and formulated to collect
    different types of data. After the data is collected, the corroboration also called
    documentation of the data is very important for better understanding. Corroboration
    is a natural application of collected data, but certain additions of different
    samples such as manual or machine integration are also seen. Data once collected
    needs to be refined and understood, labeled, and thus documented in a certain
    format. Documentation or corroboration of data helps in formulating statistical
    analysis and developing the decision support systems. Remote sensing charts and
    other crop assessing tools can be employed to understand the total crop yield
    of a particular region. Crop management can also be optimized using corroborating
    data. A yearly or term analysis can be performed on this data to improve precision
    farming. Food chain supply management can use the predictive analysis of this
    data for optimizing and designing new efficient strategies. The major areas where
    its application is seen are yield mapping for fertilization planning, field planning,
    agro-food traceability, site-specific measurements based on soil and water analysis,
    and remote vehicle monitoring for supply chains, etc. 3) Foretelling Also called
    forecasting is one of the major attributes or applications for decision making
    that is brought in agriculture with the introduction of IoT. With the IoT devices
    and network, real-time data analysis along with the comparison to the previously
    available datasets helps in the forecasting of the upcoming events in much advance.
    With this foretelling, various decision support systems can be designed capable
    of taking optimal and real time-decisions. It can also act as a preventive measure
    mechanism for avoiding or dealing with various upcoming unprecedented situations.
    With monitoring, data collection, and corroboration, foretelling can help in early
    disease detection, pest growth, weeding, drought, smart irrigation, and harvesting.
    Artificial intelligence can be employed for designing these learning systems.
    With IoT, a predictive analysis could be made way earlier than the harvest period
    for assessing crop production and consumption. Pre and post-harvest crop monitoring
    along with behavioral sciences and market analysis can also be employed to help
    site-specific farming and production increase in precision agriculture in the
    context of IoT. 4) Governing and Management It is an outcome of the monitoring
    device. Governing helps in controlling the whole system. Foretelling also plays
    a major role in governing. With IoT, it is important to govern the farm. Thresholds
    play a major role in designing a controlling strategy. Controlling is a major
    addendum of IoT in agriculture. Applications of controlling can be easily seen
    in site-specific management, working of smart irrigation models, plant growth
    monitoring models, and early crop analysis models and also in supply chain and
    smart vehicular navigation, interaction, optimization, and logistics control of
    farms. With governing, all the new strategies, formulae, practices and methods
    employed to solve the problems occurring on daily basis in farms can be monitored.
    These strategies can then be compared and analysed with the previous existential
    strategies. Therefore a knowledge base can be maintained. From the data analysis
    of that knowledge base, the best or the optimal strategies that can be employed
    to design or mould the system can be fetched. Various case studies can be performed
    to gather and test such information. From this the redundant techniques can be
    withdrawn and robust ones can be prioritised. With these methodologies and experiments,
    the management can be made more flexible, scalable and reliable. Also governing
    and management can be employed to find the best suited solutions. Due to the growth
    in agriculture sector, various public and private sector projects and startups
    are being started in various countries across the world. All these projects use
    artificial intelligence and IoT concepts to provide support and solutions to the
    growing industry of agriculture. All these projects or startups are explained
    in the TABLE 13. TABLE 13 IoT Based Public and Private Sector Projects/Startups
    for Precision Agriculture E. Our Proposed Work Inspired by the contribution of
    IoT in the field of agriculture, we proposed an architecture for precision farming.
    The layout of the architecture to be designed is proposed and shown in Fig. 8.
    The structure proposed for precision farming in case of farm management will constitute
    of different layers. The first layer would be the sensing layer, in which different
    types of sensors like soil, humidity, water, light, proximity, and conductive
    sensors will be deployed in the region of experimentation. All data from the sensors
    will be sent to the base station. The second layer is the network layer, which
    consists of gateways, internet, and other devices. This layer manages the traffic
    of the whole architecture. This layer collects data from the sensing layer and
    transfers it to the decision layer and the application layer. The third layer
    is the decision layer, which processes the data, manipulates it, and generates
    alerts or actions. The next layer is the application layer, which constitutes
    the firmware and the users. It receives all the inputs from other layers and the
    outputs are made visible to users. It also manages how the whole architecture
    will work or look. FIGURE 8. Proposed layered architecture for Precision Agriculture.
    Show All Our proposed architecture aims to observe and monitor the farm in real-time.
    Optimize the resource utilization, early detection of the diseases, and identification
    of the plant species, optimize irrigation facilities, and make definite use of
    pesticides and other manures. Monitor the growth of plants in each stage and take
    the necessary actions for the betterment of plants. The model to be designed will
    take into consideration the earning and investment of the small scale farmer.
    A scalable and cost efficient model will be designed by considering the reusability
    and recycling of the materials used. From the literature, it is found that the
    issue of interoperability and robustness is still not achieved. So, while designing
    the model these issues will be prioritized. Also, power supply and power consumption
    is a bottleneck for each model. So, from the literature it is found that energy
    harnessing approaches can be used to address this issue. In the proposed model,
    main focus will be on incorporating the concepts of energy harnessing approaches
    like solar energy and wind flow energy for power optimization. Harnessing solar
    energy for regions which have different season’s e.g., Kashmir, which has four
    seasons like spring, summer, autumn and winter throughout the year. So for these
    regions depending only on solar energy will be a bottle neck. Therefore, in the
    proposed work, a hybrid approach based on consumption of both wind and solar energy
    for reducing power consumption will be proposed. Some of the major findings of
    the proposed work will be: A scalable and cost efficient model will be designed
    by considering the reusability and recycling of materials used. The issues of
    interoperability and robustness issues of heterogeneous devices will be targeted.
    Power supply and power consumption being the bottleneck of each model will be
    targeted. To tackle such issues, energy conservation and energy harnessing approaches
    like solar and wind energy will be used. Harnessing solar energy for regions which
    have different season’s e.g., Kashmir, which has four seasons like spring, summer,
    autumn and winter throughout the year. So for these regions depending only on
    solar energy will be a bottle neck. Therefore in the proposed work, a hybrid approach
    based on consumption of both wind and solar energy for reducing power consumption
    will be proposed. Small scale farmers will be targeted for the development of
    sustainable and robust model. SECTION VI. Conclusion The Internet is revolutionizing
    our world. Communication via connective devices has become the countenance of
    survival. Agriculture is growing from precision farming to micro-farming. IoT
    has added more potential to communication by enabling the communication between
    humans and objects along with the environmental aspects. Seeking the vision of
    omnipresence i.e., anytime, anything, anywhere, everywhere, IoT should be considered
    a core for the development of new architectural concepts. Resource scarcity is
    a must address issue in precision agriculture and models should be developed to
    optimize resource utilization. Inclusion of monitoring in food supply chains,
    farms, greenhouses equipped with tags, WSN, etc. at each stage in the growth of
    the product/plant, making automatic reasoning via intelligent analysis and responses
    is moving towards much safer, secure, and trustworthy systems. In the article,
    firstly the agriculture sector along with its challenges and economic importance
    is presented. The domain of IoT along with the communication technologies and
    goals, protocols, architectures are studied and put forward. The various IoT OS,
    their specifications and features with respect to agriculture are discussed. An
    analytic study of various articles in the field of agriculture is presented, highlighting
    their most focused sections and gaps or areas not addressed. The sensors based
    on their field of application are also discussed. A systematic review of different
    articles focusing especially on crop monitoring, irrigation, disease detection,
    and farm management is offered. The articles considered for study range from the
    time frame of the year 2015 to 2020. From the studies, certain issues are put
    forward that demand research and experimentation in the future. Various existing
    public and private sector platforms or start-ups which work for precision farming
    are also presented and discussed with their specifications and applications. Making
    precision farming a base, a layout of an IoT based architecture is proposed. The
    communication technologies and the hardware platforms of IoT are also discussed.
    The applications of IoT in agriculture are also discussed. The issues, challenges,
    and future research directions are also highlighted. As a whole, the in-depth
    description of various aspects of IoT for agriculture has been discussed and how
    these studies should be catered in a way to create efficient and smart agricultural
    scenarios. Authors Figures References Citations Keywords Metrics More Like This
    Internet of Things and Wireless Sensor Networks for Smart Agriculture Applications:
    A Survey IEEE Access Published: 2023 Weighted Connected Vertex Cover Based Energy-Efficient
    Link Monitoring for Wireless Sensor Networks Towards Secure Internet of Things
    IEEE Access Published: 2021 Show More IEEE Personal Account CHANGE USERNAME/PASSWORD
    Purchase Details PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS Profile Information
    COMMUNICATIONS PREFERENCES PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help?
    US & CANADA: +1 800 678 4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow
    About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination
    Policy | IEEE Ethics Reporting | Sitemap | IEEE Privacy Policy A not-for-profit
    organization, IEEE is the world''s largest technical professional organization
    dedicated to advancing technology for the benefit of humanity. © Copyright 2024
    IEEE - All rights reserved.'
  inline_citation: Kour and Arora (2020)
  journal: IEEE Access
  limitations: null
  pdf_link: https://ieeexplore.ieee.org/ielx7/6287639/8948470/09139962.pdf
  publication_year: 2020
  relevance_score: 0.7
  relevance_score1: 0
  relevance_score2: 0
  title: 'Recent Developments of the Internet of Things in Agriculture: A Survey'
  verbatim_quote1: The IoT based layered architecture includes a device/physical layer,
    network layer, middleware layer, service layer, analytics layer, and end-user
    layer.
  verbatim_quote2: 'Perception Layer: Also called physical or the device layer, this
    layer lies at the bottom of the architecture and constitutes of sensors, actuators,
    microcontrollers, gateways, routers, switches, hubs, etc.'
  verbatim_quote3: 'Network Layer: It comprises of internet and other communication
    technologies. The main aim of this layer is, how to achieve better communication
    in the platform.'
- DOI: https://doi.org/10.1016/j.jpdc.2018.08.009
  analysis: 'The study proposes an edge computing framework for enabling situation
    awareness in an IoT-based smart city. The framework is designed to process IoT
    data in the edge of the network, which reduces latency and improves performance
    compared to processing data in a centralized cloud server. The framework consists
    of four steps: raw data stream capture/processing, unified representation, aggregation,
    and situation representation. In the first step, IoT data is annotated with its
    location and frequency of creation, and an ADMM model is used to split and process
    the data into separate processing units, i.e., edge servers. In the second step,
    the processed IoT data from each edge server is converted to a uniform representation
    using the concepts of who, what, when, and where. In the third step, the unified
    data is aggregated to produce a situation, which is then represented as a 2-dimensional
    spatial representation for easy visualization and mapping at the situation level.
    Finally, the situation representation is used to produce the situation, which
    is a series of actions that are triggered based on the input data.


    The authors provide three specific examples from the paper to demonstrate the
    relevance of the study to the point of different data types and their collection
    and use:


    1. **“In our proposed approach, IoT data is annotated with its location and frequency
    of creation. We used ADMM (Alternating Direction Method of Multipliers) model
    [9], which we will explain in later section, sufficiently matches our case where
    we have a large set of data that we want to split and process into separate processing
    units, i.e. in the edge servers.”**


    This quote highlights the importance of annotating IoT data with its location
    and frequency of creation, which enables the proposed framework to process the
    data efficiently in the edge of the network.


    2. **“For the unified representation the edge server output data is converted
    to a unified format such as ‘what–when–where’ structure. For the unified representation
    we used the concept [7], which is actually a series of questions that extract
    appropriate result from a problem. This approach is popular in software process
    and project management.”**


    This quote describes the process of converting the processed IoT data to a uniform
    representation, which is essential for combining data from multiple sensors and
    producing a combined output. The use of the ''what-when-where'' structure enables
    easy visualization and mapping of the situation at the situation level.


    3. **“It should be noted here that sometimes our system shows more raise or drop
    than the actual because sometime for a continuous run or direct sunlight the temperature
    sensor shows out performance.”**


    This quote addresses a limitation of the proposed framework, which is that it
    may show more or fewer events than the actual number of events that occur. This
    is due to communication delays, server load, or sensor performance issues. However,
    the authors also note that their system produces almost identical results to the
    actual data, indicating that the framework is generally accurate and reliable.


    Overall, the study provides a detailed and well-structured framework for enabling
    situation awareness in an IoT-based smart city. The framework is designed to process
    IoT data efficiently in the edge of the network, and it uses a variety of techniques
    to convert the data into a uniform representation, aggregate the data, and represent
    the situation. The study also provides a qualitative and quantitative analysis
    of the framework, which demonstrates its accuracy, reliability, and efficiency.


    The study is highly relevant to the point of different data types and their collection
    and use, as it provides a comprehensive framework for processing and analyzing
    IoT data in real-time. The framework can be used to develop a variety of applications,
    such as traffic management, environmental monitoring, and public safety applications.
    The study also has implications for the design of future IoT systems, as it provides
    insights into the challenges and opportunities of processing IoT data in the edge
    of the network.'
  authors:
  - SK Alamgir Hossain
  - Md. Anisur Rahman
  - Mohammad Anwar Hossain
  citation_count: 64
  full_citation: Edge computing framework for enabling situation awareness in IoT
    based smart city
  full_text: '>

    Skip to main content Skip to article Journals & Books Search Register Sign in
    Brought to you by: University of Nebraska-Lincoln View PDF Download full issue
    Outline Highlights Abstract Keywords 1. Introduction 2. Related works 3. Proposed
    framework for situation detection 4. System architecture 5. Implementation and
    result 6. Conclusion Acknowledgment References Vitae Show full outline Cited by
    (72) Figures (18) Show 12 more figures Tables (2) Table 1 Table 2 Journal of Parallel
    and Distributed Computing Volume 122, December 2018, Pages 226-237 Edge computing
    framework for enabling situation awareness in IoT based smart city Author links
    open overlay panel SK Alamgir Hossain a, Md. Anisur Rahman a, M. Anwar Hossain
    b Show more Share Cite https://doi.org/10.1016/j.jpdc.2018.08.009 Get rights and
    content Highlights • Development of edge computing framework to process IoT data.
    • Elaboration of the process of IoT data at different levels. • Introduced situation
    image (s-image) and explained situation identification. • Edge computing provides
    competitive advantage in terms of latency. Abstract The Internet of Things (IoT)
    offers a lot of benefits for building smart cities. Such cities will be able to
    utilize a huge number of heterogeneous IoT devices that can generate a sheer volume
    of data. So, considering this heterogeneity, one of the major challenges in smart
    cities is how to process this data and identify different situations for decision-makers
    on the basis of this data. The traditional cloud computing approach can provide
    enormous computing and storage facilities to support data processing. However,
    it requires all the data to be moved to the cloud from the edge devices of the
    user endpoint, thus introducing a high latency. In this paper, we used the edge
    computing approach to minimize such latency. Besides, as major portion of data
    is generated from the user endpoint, processing this data in the edge can significantly
    improve the performance. Our experiment shows that processing raw IoT data at
    the edge devices is effective in terms of latency and provides situational awareness
    for the decision makers of smart city in a seamless fashion. Previous article
    in issue Next article in issue Keywords Internet of ThingsSmart citySituation
    awarenessEdge computing 1. Introduction Today, most people use the Internet [22]
    for communication and content sharing, which has also become a global platform
    for communication between connected objects and smart devices, introducing a concept
    called the “Internet of Things (IoT)”. IoT is expanding at a unprecedented rate
    and according to the International Data Corporation (IDC), an estimated 50 billion
    connected objects will be in use by 2020 (Fig. 1). This brings about the challenge
    of how to efficiently process the huge volume of IoT data and use it for human
    benefit. Nowadays, IoT has become a part of smart city [41], [36], [6]. IoT-based
    smart cities has the potential to bring a number of benefits in the management
    and optimization of traditional public services, such as transport and parking,
    surveillance and maintenance of public areas, preservation of cultural heritage,
    garbage collection, and salubrity of hospitals and schools. Data from the IoT-embedded
    city infrastructure can be collected and processed to understand the situation
    of the city and offer new services in future [18] in addition to taking necessary
    actions. A situation [19] is a condition at a moment in a particular location.
    In other words, a situation is a set of things that happen and the conditions
    that exist at a particular time and place. In the IoT, a situation is an abstraction
    for a pattern of observations made by a distributed system, such as a sensor network.
    With the expansion of cities, lots of events will likely occur and any inefficient
    approach to process and handle those situations will hamper timely decision-making.
    In order to address this challenge in the smart city context, different projects
    that couple the IoT with cloud technology to reap the benefits of cloud storage,
    processing, and infrastructure are already underway [42], [1], [5], [24]. In cloud-based
    processing, all the sensor data are processed through a remote cloud server, but
    it is costly in terms of processing and storage to send all data to the cloud.
    In this aspect, the emerging edge computing [3] can help save a lot of bandwidth
    and may increase the processing speed. Edge computing, also called fog computing,
    is a method of optimizing cloud computing systems by performing data processing
    at the edge of the network. Download : Download high-res image (205KB) Download
    : Download full-size image Fig. 1. Growth of ‘things’ connected to the Internet.
    Download : Download high-res image (274KB) Download : Download full-size image
    Fig. 2. Edge computing paradigm. Using edge computing services, the data that
    needs to be moved to the remote server significantly decreases. This method mainly
    has three benefits: it can work with large data sizes, it guarantees a low latency,
    and it focuses on location awareness. Fig. 2 illustrates a typical edge computing
    approach where the edge is the closest processing unit of the data sources (the
    sensors), it processes the data and sends the filtered data to the cloud server.
    Here, the main functionality of edges is data offloading, storage, processing,
    and privacy protection. This paper contributes by providing an edge computing
    framework to process situations in a IoT smart city that would help the decision
    makers to be situation aware and provide relevant services to city residents.
    The rest of this paper is organized as follows. In Section 2, we comment on some
    research works on edge computing, situations, and IoT smart cities that are related
    to our approach. Section 3 depicts the proposed situation detection mechanism.
    In Section 4, we show the architecture of our proposed framework. Section 5 presents
    the implementation issues, development challenges and the outcome that we found
    from our examination. At the end, we provide the conclusion and discuss future
    work directions of the paper in Section 6. 2. Related works Situation awareness
    (SA) has previously been studied in different domains, as composite events in
    distributed event based systems, service composition in multi-agent systems, and
    macro-programming in sensor networks. The term was first used by Endsley [19]
    in the military field. Although many extensions were developed by Endsley from
    his original SA idea, the combination of SA with sensor networks was missing.
    Recently, researchers took this into consideration and published several work.
    Among them, one of the promising works was developed by Oliver et al. [11]. They
    reviewed three different algorithms for recognizing situations, and finally they
    introduced a distributed commitment machine algorithm for situation understanding.
    Like all event-driven systems, the speed of situation understanding depends on
    the data volume: when the data volume grows, the speed decreases significantly.
    Although existing works try to minimize the problem using the Service Oriented
    Architecture paradigm [16] and fog computing [35], among others, no complete framework
    for SA in the IoT and cloud be highlighted properly. Among different works that
    leverage the combination of clouds and the IoT to provide real-time SA, the authors
    of [8] paid attention to merging cloud computing technologies in order to offer
    new location-aware services and reduce the latency. Based on this idea, several
    academic prototypes [20], [26] as well as commercial services (ThingWorx [40]
    and SmartThings [38]) have recently emerged. At the urban scale, SmartSantander1
    introduced a city-wide experimental research where around 20,000 sensors have
    been deployed in three different locations. These sensors monitor different situations
    like parks and gardens irrigation, parking management, traffic monitoring, weather
    conditions monitoring, and others. By persuasion from SmartSantander, S. Chakrabarty
    et al. [14] depicted protected IoT engineering for keen urban communities. They
    introduced a design containing four essential IoT engineering obstacles that empower
    a protected smart city to mitigate digital assaults starting at the IoT hubs themselves.
    The authors concurred that the IoT is in its underlying stage and parcel of research
    are necessary. For SA, millions of sensors need to send a stream of data (a collection
    of unbounded data objects that may have multiple data attributes in a particular
    order) to the cloud server for storage or processing. But this is a very inefficient
    process. Instead of this approach, the data may be processed in the edge of the
    network. Inspired by this efficient approach, researchers recently proposed several
    methods of data processing in the IoT. Among them, in [15], an infrastructure
    for the IoT using fog computing, called Indie fog, was proposed. In that paper,
    the authors highlighted two types of Indie fog deployment: (1) integrated form
    and (2) collaborative form. In the integrated form, all the functionalities are
    provided by a gateway device that is integrated into the Indie fog server. On
    the other hand, in the collaborative form, all the functionalities are provided
    by a workstation as a data source. Another work is [33], where the authors used
    an existing mobile phone network as an edge node to process the data. They used
    mobile phones as they can be used as an important data source in an IoT environment.
    Other researchers [27], [21] also focused their attention on optimizing the IoT
    data processing using mobile phones. In these works, mobile data are sent to the
    fog servers, and then the fog servers send the filtered or processed data to the
    cloud servers. Data pre-processing is an important task in IoT environments, as
    data come from noisy environments that require pre-processing before analysis.
    Real-time pre-processing is necessary in many cases like stream data processing,
    and its main target is to produce high-quality data. This is a mandatory step
    that many well-known techniques like normalization, transformation, integration,
    and cleaning use. As the number of sensor data streams is large, in stream data
    pre-processing, we need an efficient solution. There are many existing pre-processing
    methods for data streams. Those techniques can be grouped into three main categories:
    instance reduction, dimensionality reduction, and feature space simplification.
    There are many kinds of instance reduction pre-processing mechanisms available.
    Of those techniques, the following three are the most popular: 1. Instance-Based
    learning Algorithm (IB) [2]: this method is good for static-type data. It works
    on the basis of a confidence interval test, and it distinguishes whether a case
    is added in the database or needs to wait until its appropriate insertion. 2.
    The Locally Weighted Forgetting (LWF) [34]: this method works on the basis of
    the k-nearest neighbors algorithm and it filters the data by discarding data whose
    weights are below the threshold. 3. Salganicoff [28]: this method can work in
    both static and dynamic environments. This method is similar to the IB method,
    but the difference is that in IB all the data are considered, but in Salganicoff
    only the newest data from the stream are considered. The main problem of this
    method is that, in order to detect new data, it stores old data in a queue, which
    requires a lot of memory. There are also different well-known techniques in dimensionality
    reduction pre-processing. Some of those techniques are as follows: 1. Katakis
    et al. [23]: in this method, a feature filter method is proposed to detect relevant
    features. This method is suitable for online data ranking (filtering). 2. Carvalho
    et al. [12]: in this method, the weight is computed by an online classifier to
    identify the feature and the feature is scored on the basis of the difference
    between the positive and the negative weights of each feature. 3. Masud et al.
    [29]: in this method, a deviation weight measure is used to distinguish the features.
    It uses an unsupervised technique like the highest frequency in the data. The
    last type of stream pre-processing is feature space simplification. In this method,
    the main target is to normalize the feature space. This algorithm returns nominal
    features that can be used for any data processing purposes. After pre-processing,
    the IoT devices that are in the environment must be discoverable so that they
    can be queried for data. An efficient look-up mechanism is necessary, but real-world
    objects are difficult to look up. So, instead of the physical look-up, it is better
    to use a virtual table where device insertion and removal can be managed dynamically.
    One of the promising works in this direction is Snoogle [43]. Our preference for
    Snoogle over more recent works like Context-Aware Dynamic Discovery of Things
    (CADDOT) [31] or agent-based discovery [13] stems from the fact that Snoogle is
    more lightweight, in addition to its security and privacy protection features
    for sensitive data. In addition, Snoogle allows the indexing of arbitrary kinds
    of terms, not just numeric ones. Snoogle assigns keywords to sensors as well as
    links with the associated descriptions of the sensors. Then, it stores the keyword
    with the description in storage with appropriate indexing. Each Index Point (IP)
    is linked with all the sensors that are connected to it as every sensor in the
    same area will be assigned the same IP. This way, a two-tier hierarchy is used
    to maintain two types of IPs. In the top tier, it keeps the key IP, and in the
    bottom tier, it maintains all the IPs that are associated with the key IP. Here,
    the user may perform two types of queries: (1) a local query, which is performed
    in a specific IP, and (2) a global query or distributed query, where the user
    search is placed in the key IP. For this search every IP needs to be flooded to
    find the specific sensor object (see Fig. 3). From the above study, we found that
    IoT-based SA has become the cornerstone of smart city development with a push
    for connected objects, connected devices, and connected everything. So, with the
    aim of overcoming the disadvantages of the systems mentioned above and inspired
    by [27], [44], [37], we introduced Edge computing framework for SA in IoT-based
    smart cities. Download : Download high-res image (251KB) Download : Download full-size
    image Fig. 3. Snoogle [43], IoT discovery and search in the physical space. 3.
    Proposed framework for situation detection The primary purpose of the proposed
    framework is to detect the current situation that represent the state of transportation,
    healthcare, security and other aspects in a smart city. Efficient situation understanding
    allows the city officials to provide services to the citizens and perform actions
    accordingly. The process of situation detection and awareness lies in the understanding
    of how the raw IoT data is propagated from the distributed deployment sources
    to the application level for the decision makers. We propose a layered approach
    to demonstrate this data propagation, as shown in Fig. 4. The figure shows that
    the data propagation is accomplished in four steps, which are described in the
    following: Download : Download high-res image (292KB) Download : Download full-size
    image Fig. 4. Proposed situation detection steps from sensor data. 3.1. Raw data
    stream capture/processing The first step of situation detection is to capture
    and process the raw IoT data. However, if the raw data are sent directly to the
    remote cloud server for processing, the battery life will be reduced drastically.
    For this reason different on-line and off-line mechanism like data compression,
    aggregation and query modeling is applied to reduce the energy consumption cost.
    In our proposed approach, IoT data is annotated with its location and frequency
    of creation. We used ADMM (Alternating Direction Method of Multipliers) model
    [9], which we will explain in later section, sufficiently matches our case where
    we have a large set of data that we want to split and process into separate processing
    units, i.e. in the edge servers. Fig. 5 demonstrates how the sensors are connected
    to the edge server. According to this figure, let us consider we have total number
    of sensors that have the common objective as represented in the function . In
    our proposed technique each sensor has an identity with the format [ ]. We use
    this kind of format for two reasons: one is for effective lookup from large collection
    of sensor and another is for mobility. Also this type of naming is human friendly.
    In smart city many of the sensors are mobile so traditional static IP or GUID
    (global identifier) will not work as we may need to update the sensor dynamically.
    To illustrate, we provide an example as: say a mobile sensor like a cell phone
    GPS (phone having id and GPS having id ) is tracking and currently it is in a
    building called then our system will generate a dynamic id for the mobile device
    as . It should be noted here that for every communication, we need IP or other
    protocol so this dynamic name will be mapped with IP address/MAC address/URI.
    As many of the sensors in a smart city are mobile, all the connection between
    the sensors and edge will be logical connection. All the streams that are produced
    by IoT devices are splitted into data objects which are called edge objects (see
    Fig. 5). These edge objects are sent to the edge servers for further processing.
    The structure of this edge object and the data distribution process are described
    in the following sections. Download : Download high-res image (220KB) Download
    : Download full-size image Fig. 5. Proposed distributed IoT data processing through
    the edge servers. 3.1.1. Edge object structure In order to make the edge objects
    each node samples the sensor stream data with a fixed window size. Each edge object
    is constituted with ID, data and properties. ID is an identifier (that we described
    earlier), data contain the IoT data and properties contain functional or control
    information that are necessary to perform the operation in the edge. Each edge
    server extracts the data from the edge object and performs operation based on
    the control message that is in the properties segment in the edge object. Fig.
    6 represents the XML structure of all the properties like , etc. of edge object.
    Download : Download high-res image (423KB) Download : Download full-size image
    Fig. 6. Edge object properties as a xml format. 3.1.2. Data distribution As there
    are lot of devices, distributed processing is required for data analysis. Processing
    multiple data streams in a centralized cloud server is inefficient. Instead of
    this if the data is processed through the edge server the overall performance
    will be improved significantly. And this way a decentralized and parallel processing
    of IoT data can be achieved. But the question is how to send the data to decentralized
    processing units without significant loss of performance? We found that ADMM [9]
    provides a technique that is used to solve classical convex optimization problem.
    In this approach it breaks a problem into some smaller problems so that each smaller
    task can be handled in an easier way. We can represent our distributed processing
    of data through ADMM. We have N number of IoT devices that have a common objective
    function and our target is to minimize (Eq. (1)) the data or filter through the
    edge server so that only the refined data can be sent to the cloud server for
    further storage or situation visualization. (1) where is a global variable that
    is unknown and refers to the term with respect to the th sensor. Now let be a
    local variable and be a common global variable then the above equation can be
    rewritten as: (2) where which is originally called the global consensus problem
    [10], since the constraint is that all the local variables should agree, i.e.,
    should be equal. The augmented Lagrangian of problem Eq. (2) can be further written
    as: (3) The resulting ADMM algorithm from Eq. (3) is: (4) ≔ (5) ≔ where represents
    closest neighbor set of the th devices. (6) ≔ The first step (Eq. (4)) and last
    step (Eq. (6)) are preformed individually in each edge, and the second step (Eq.
    (5)) is completed in the cloud server. 3.2. Unified representation The second
    step of data propagation is to convert the processed IoT data to a uniform representation
    before storing them in the off-line storage. This is important as the result of
    processed IoT data of many sensors needs to overlap and needs to give a combined
    output. For example, consider the processing of weather condition for a given
    area. Here we need to merge the result from many sensors that are producing data
    in different pattern, format etc. So before sending the data to the cloud server
    we can pass the data to a model to extract a unified representation. In our proposed
    model the edge server output data is converted to a unified format such as ‘what–when–where’
    structure. For the unified representation we used the concept  [7], which is actually
    a series of questions that extract appropriate result from a problem. This approach
    is popular in software process and project management. Table 1 demonstrates the
    list of questionnaire and the data type it will produce in each of the case of
    principle. Table 1. Principle used to uniform the sensor data. Principle Data
    type Example data data is generated Sensor specific data Temperature, wind_direction,
    wind_speed data is taken Date time 10/10/2016 10 am, yesterday 1 pm the data is
    coming Sensor location Indoor, Outdoor, Home, Office, Bed Room1 is generating
    the data Sensor id 1, 2, tempS1, humidityS1 (in what condition) Sensor state/activity
    Motion, Hot weather long data is generating How long Ten minutes, one hour much
    resources is needed Meta data Data length, data type 3.3. Aggregation All the
    unified represented data are stored in the cloud server and are fed to a visual
    display or control center to trigger any event. The unifiedly represented data
    is aggregated to produce the situation. In the aggregation step the unified data
    is converted to a 2-dimensional spatial representation for easy visualization
    and mapping at the situation level. It combines data and represents in an image
    like representation, which we call Situation Image (S-image). Each S-image has
    mainly 2 parts: S-image element and S-image set. Each S-image element is a collection
    of key–value pair where key is the state or factor name (i.e. temperature, humidity,
    sound etc.) and the value is the cumulative value for the key that is calculated
    from the edge server. It should be noted here that in a real world environment
    besides the and the system needs to store more information like location ( , ),
    meta data ( , ) etc. In the real scenario continuous Situation Image will be generated
    over a period. The continuously generated finite set of situation images is called
    situation image set or S-image set. Fig. 7 demonstrates the structure of a S-image
    set. Download : Download high-res image (157KB) Download : Download full-size
    image Fig. 7. S-image set. 3.4. Situation representation We know that situation
    is a set of information of an environment over a period of time. So our S-image
    set that we described in earlier section can actually be used to produce the situation.
    This process is actually a classification task where each cell of the situation
    image represents a particular event. We can model the situation modeling through
    the classical situation calculus [25]. According to situation calculus a situation
    is a series of actions which is started with a special situation called initial
    situation . In our case is the situation that is generated from the first S-image
    over a period of time. According to situation calculus a new situation will be
    created from the initial situation when an action is triggered. In our S-image
    set continuous S-image is created. This does not mean that all the S-image will
    be used for situation generation. The next situation will be generated if any
    action is triggered or if the value of some S-image element crosses certain threshold,
    . Sometimes actions may have some preconditions. For example if we say open the
    camera if the location is free. This task can be written as , here is a special
    function that is used for the execution of an action. The process of data capture
    to situation representation is illustrated in the following Algorithm 1. Download
    : Download high-res image (320KB) Download : Download full-size image Fig. 8 demonstrates
    a simplified view of all the 4 steps that we just described. Consider a sound
    sensor (microphone) data is being partitioned into edge object and is being sent
    to the edge network, the edge server processes the data based on the properties
    and finally applies and sends the result to the cloud server. The cloud server
    aggregates the data that it receives from edges and finally the S-image is created
    by proper placement of the situation elements. The situation image is stored in
    the cloud storage to calculate the situation. Download : Download high-res image
    (245KB) Download : Download full-size image Fig. 8. A simplified view of data
    stream processing through the edge server to the situation image. Download : Download
    high-res image (555KB) Download : Download full-size image Fig. 9. Our proposed
    architecture. 4. System architecture In this section we present different components
    of our proposed architecture and their functional descriptions. The components
    of the system are depicted in Fig. 9 as a block diagram. The architecture has
    four main components: Device Module, Edge network, IoT Cloud Middleware and Subscribers.
    The device module includes sensors and other objects that may sense the environment.
    In reality things that can produce time dependent data series may be considered
    as a sensor. Edge network is the network of servers that will work as a processing
    unit for the sensors. IoT Cloud Middleware is responsible to publish the message
    and subscribe the clients to receive the messages. This module is also responsible
    for message routing. Finally the subscribers receive the services from the system.
    In our case the display devices where the situation for the city will be presented
    are considered as the subscribers. Generally any object that wants to receive
    data from the platform may be considered as a subscriber. It is also possible
    for an object to be both a publisher and subscriber. We provide the functional
    description of each of the four components in the following sections: Download
    : Download high-res image (66KB) Download : Download full-size image Fig. 10.
    MQTT topic. 4.1. Device module This module is responsible for all the physical
    or logical linkage between the IoT device and the edge network. Usually by using
    different standard communication technology like NFC (Near Field Communication),
    GSM, WLAN, GPS and sensor networks together with SIM-card technology etc. are
    used to connect the device module to the physical sensors. For every connection
    mechanism it is important to save the bandwidth. The data from the sensors to
    the edge network may be transferred either asynchronously or synchronously. The
    main functionality of the device module is to send data but these modules also
    sense control message that are generated by the IoT middleware (i.e it act as
    a publisher). The control message is important in many cases to control the sensors.
    For example zoom, pan, tilt and resolution functionality control of a camera sensor,
    precision, accuracy, sensitivity, range, calibration control of temperature, humidity,
    accelerometer, IR, distance sensors. 4.2. Edge network In the traditional IoT
    the sensor data is sent to the cloud server for processing. But in this centralized
    approach has lot of scalability problem. A better solution if we process the data
    in the edge of the network and send the refined data to the cloud the overall
    performance will be enhanced significantly. In the previous section we presented
    our technique about how to process the data in the edge server. We found that
    today a huge number of WSN based multi-interface cellular base station is using
    in cellular network. Using this WSN the IoT devices can be connected, may be moving
    and send data to the edge server at any time. Edge node can be directly connected
    with the WSN or may connect with the core switch. Cellular core network has two
    main components one is the data plane and the other is the control plane. The
    data plane is responsible to route the data to its destination and control plane
    is responsible to control the network. 4.3. IoT cloud middleware In our proposed
    architecture we introduced a cloud based IoT middleware that controls and processes
    IoT data. IoT cloud Middleware has the following three modules: 4.3.1. IoT cloud
    controller The main functionality of this module is to coordinate synchronized
    communication with other modules as well as to perform system management services.
    The controller sends or receives messages from the Distributed Message Broker
    to create message route between subscribers and IoT devices. The controller also
    maintains a repository of IoT data and different meta-data information that are
    necessary to discover, filter and manage the different services. In our architecture
    we prefer to use Apache Cassandra [4] for storage management. Our preference on
    Cassandra over other NoSQL database (like MongoDB) or other HDFS based cloud storage
    is due to its ability to scale while still being reliable. It is possible to deploy
    Cassandra across multiple servers without lots of overhead. A distributed processing
    engine is responsible to process unbounded streams of data specially in case of
    real-time processing. Finally as the IoT devices are developed by different manufactures
    without following a common standard, interoperability becomes a big issue. In
    our architecture we achieved interoperability between the devices and the platform
    by using SOAP based Web Services [39]. 4.3.2. Distributed message broker Generally
    a message broker is a program that can receive message, translate it and finally
    can send. As we already discussed in earlier section that pub/sub based message
    delivery is the most popular in IoT scenario, we used MQTT [30] based pub/sub
    distributed message delivery mechanism for asynchronous messaging. Unlike REST’s
    GET/POST method of data send MQTT clients publish and subscribe to a dynamic or
    predefined topic. A topic is a string and consists of one or more topic level.
    Using this kind of structure we can create a user friendly and self descriptive
    naming structure. For example in Fig. 10 we can group all the temperature sensors
    that are located in the ground floor living room of my house. So when any subscriber
    subscribes to my home ground floor living room, temperature sensors will receive
    all the temperature sensors update that are located to this location. In this
    way all the subscribers exchange asynchronous messages using a simple and light
    weight topic level. 4.4. Subscribers Subscribers are those who want to consume
    service, which can be a user or a device or any other source that are sending
    the message. In the architecture, clients can discover and subscribe to the system
    through the cloud controller. It should be noted here that a single software program
    may have both sensor and client role in the system. For example a face detection
    subscriber may produce face video data as well as may look face image inside the
    video through appropriate subscription to the system. 5. Implementation and result
    This section describes the implementation details of the prototype system that
    reflects the architecture presented in Section 4. 5.1. Experimental setup A prototype
    implementation of our framework is developed using JDK version 8 and Laravel Framework
    5.6. The goal of our implementation is to test the performance of our approach.
    In order to test the performance we used two well known open IoT dataset (CityPulse
    [32] and City of Chicago [17]). Several dataset exist in the web for IoT but we
    selected those two for our experiment because of its availability in different
    formats and real-time access through api. In our setup we used Amazon AWS2 cloud
    based elastic computing infrastructure and for the edge server we used eight personal
    computers (specification: 2.9 GHz Core i5, 8 GB RAM, Windows 10). All the edge
    computers were connected to the Amazon AWS through Gigabit Ethernet. We performed
    our test in two cases (off-line and real-time) one is in batch mode and another
    is in the real mode. In the off-line mode we programmed a special component in
    our system that can take the data from the dataset and pass it to the edge modules.
    For our test we created total four EC2 instances and S3 storage in Amazon AWS.
    For the real scenario we setup a set of sensors as listed in Table 2 on some predefined
    locations in our city. We selected the location in a manner that we can freely
    access the environment. The area is approximately . Fig. 11 shows a map view of
    the deployment. In this map view different pin in the map is representing the
    different nodes. We installed nodes to detect light level, environment noise level,
    temperature of the environment, traffic presence specially car presence. After
    selecting the test bed location our main challenge was to place the sensor nodes
    in appropriate locations as well as to provide uninterrupted power. Practically
    it is more convenient to use solar energy for battery charges; we used small solar
    panel to charge the node batteries. Solar power has the main problem the battery
    power may be finished during the night but we placed our nodes in the road side
    lamppost (as illustrated by the picture in Fig. 12.a) which is powered at night
    by the municipality authority. Some of our nodes need more power we connected
    those nodes in the lamppost so that it can be functional at night. We developed
    a multi-modal sensor node as shown in Fig. 12.b). Each sensor node contains camera,
    distance, motion, and temperature sensor. Finally we used a metal box to protect
    the sensor node from weather or human access. In this scenario we consider the
    mobile phone as an edge processing unit. If any specific event is currently occurring
    in the city the system will alert the city officials that are subscribed to that
    service. User also can report the occurrence of such events and it will automatically
    be propagated to other eligible subscribers. Table 2. Sensors used for our testing.
    Node type Quantity Sensors Humidity 08 Humidity Light 23 Light, temperature, acceleration
    Noise 03 Noise, acceleration Parking 26 Occupancy Smart Phone 15 Smart phone sensors
    (also act as edge processing unit) Total 75 Nodes 160+ Sensors Download : Download
    high-res image (679KB) Download : Download full-size image Fig. 11. Prototype
    web application interface for live situation monitoring. Download : Download high-res
    image (323KB) Download : Download full-size image Fig. 12. (a) Sensor node in
    the lamppost. (b) Multi-modal sensor node. 5.2. Quantitative results In order
    to evaluate the performance of our prototype we conducted several measurement
    studies. All those studies can be used to justify the acceptability of our approach.
    At first we test the performance of our system with the datasets that we listed
    in the previous section and then we test the processing time and situation detection
    performance by using the real test environment. Download : Download high-res image
    (217KB) Download : Download full-size image Fig. 13. Average percentage of parking
    space free during the six month period. 5.2.1. Processing time in off-line scenario
    We run our prototype in off-line mode with some predefined cases. In the first
    case we selected the parking data from CityPulse [32] dataset, in this subset
    8 parking lots information from City of Aarhus was recorded that was taken 6 months
    duration and contains total 55,264 data points. We developed a thread hook that
    will fetch the data from the dataset and split to Edge object and finally send
    to the edge servers and after processing the result will combine and send to the
    cloud server, the cloud server then annotate the data for situation processing.
    Through this test the system will show the situation of each parking lot (average
    percentage of busy) during the 6 month period. We calculate the same operation
    with and without our edge processing technique. The situation result is demonstrating
    in Fig. 13. According to this figure we see that most of the time the parking
    was free and to calculate this result our approach required 102 ms whereas the
    non edge version of the system consumed 3.5 s to produce the result. The Chicago
    park management authority maintains different sensors (humidity, pressure, wind
    speed, temperature etc.) to monitor the public space. Using this open data3 we
    test the performance of our prototype. The dataset contains total 66,111 samples;
    each sample contains different sensors data (Air Temperature, Wet Bulb Temperature,
    Humidity, Rain Intensity, Interval Rain, Total Rain, Wind Direction, Wind Speed,
    Barometric Pressure, Solar Radiation etc.). Among this data we used Temperature,
    Humidity, Wind Speed and Pressure data for our experiment that are plotted in
    the graph representing in Fig. 14. We passed this data to our prototype with objective
    function , by this objective function it take the data and average the data points
    and finally send the filtered data to the cloud server for situation, we compared
    the system result with the graph. Our result is almost identical as shown in Fig.
    14 and for the test it consumed total 400 ms where as the non edge version of
    the system consumed 10.5 s for the operation. Download : Download high-res image
    (421KB) Download : Download full-size image Fig. 14. Beach weather stations [17]:
    (a) temperature (b) wind speed (c) humidity (d) pressure sensors data. Download
    : Download high-res image (319KB) Download : Download full-size image Fig. 15.
    Processing time of different modules. Download : Download high-res image (470KB)
    Download : Download full-size image Fig. 16. Situation detection performance on
    23 temperature sensor over 4 weeks. Download : Download high-res image (311KB)
    Download : Download full-size image Fig. 17. User response percentage on the proposed
    system. 5.2.2. Processing time in real-time scenario In order to measure how our
    system is performing in terms of time we embedded monitoring hooks in the system
    and recorded the response time. Finally we analyse the processing time from the
    sensor node to the subscribers by using the following Eq. (7). (7) In this equation
    and are the processing time of the edge and cloud platform respectively. and are
    the transmission delay to send the data from the sensors to the edge and from
    edge to the cloud servers, is the sensor’s average sensing time from the environment,
    and is the user receiving time. As the edge devices are with close proximity with
    the sensors, the time is approximately zero, so the actual delay will be . After
    any event occur in the environment the system approximately requires  ms to finish
    the task. In our test the sensor processing time is 352 ms, network delay from
    edge to cloud is  ms and total processing time in edge and cloud is  ms respectively
    and delay in the user is  ms. In Fig. 15 the performance of the sensor and cloud
    platform modules is depicted. 5.2.3. Situation detection In order to test the
    situation detection performance we monitor the environment approximately 4 weeks
    and calculated the number of events occurred versus the event detected by our
    method. Out of approximately 181 different events like high temperature, low humidity,
    hot sunny day our prototype can able to detect 176 events perfectly. Sometimes
    our algorithm shows misleading information due to the communication delay as well
    as the server load. Fig. 16 demonstrates the situation detection performance over
    temperature sensors that we used in our prototype test case. There are total 5506
    temperature raise or drop during the measured days. As we performed our test during
    sunny day we consider the threshold temperature as 25 °C. So a separate sensor
    is placed in the same location where the nodes are located to calculate the actual
    temperature raise or fall from the threshold. From this analysis we found that
    our cloud system produced almost identical result as the actual data. It should
    be noted here that sometimes our system shows more raise or drop than the actual
    because sometime for a continuous run or direct sunlight the temperature sensor
    shows out performance. 5.3. Qualitative results We have performed usability tests
    to qualitatively measure the proposed system. The usability test consists of ten
    volunteers of different age groups and academic backgrounds. The users were requested
    to use the developed prototype. Based on their situation observation they were
    asked to answer several questions. The answers to the questions are in the range
    of 1–5 (the higher the rating, the greater the satisfaction) on a Likert scale.
    Fig. 17 shows the users’ responses in percentages. The responses show the suitability
    of the proposed system. 6. Conclusion SA ensures that the right information goes
    to the right people for faster and more efficient communication, especially in
    the event of an emergency. The question is, given the huge volume of data generated
    by different IoT devices, is it an important issue to know which data need to
    be selected and processed? For SA, it is important to process raw low-level IoT
    data at different levels and generate high-level abstract information for decision-makers.
    In this paper, we presented an edge computing framework for SA in an IoT-based
    smart city environment. We performed several quantitative and qualitative studies
    with our implemented prototype. Our study shows that processing raw IoT data at
    the edge devices is effective in terms of latency and provides situational awareness
    for the decision makers. In future we want to evaluate the system further to measure
    the performance in more real world scenario. We believe that the proposed edge
    computing framework for SA in an IoT-based smart city environment will bring new
    direction in the IoT research. Acknowledgment This work was supported by the Information
    and Communication Technology Division (ICT Division), Government of the People’s
    Republic of Bangladesh [S-Number 028.33.077.17-77, 02-04-2018]. References [1]
    Ab Rahman N.H., Cahyani N.D.W., Choo K.-K.R. Cloud incident handling and forensic-by-design:
    cloud storage as a case study Concurr. Comput.: Pract. Exp., 29 (14) (2017) Google
    Scholar [2] Aha D.W., Kibler D., Albert M.K. Instance-based learning algorithms
    Mach. Learn., 6 (1) (1991), pp. 37-66 View in ScopusGoogle Scholar [3] Antonopoulos
    N., Gillam L. Cloud Computing Springer (2010) Google Scholar [4] Apache, Apache
    cassandra, Tech. rep. http://cassandra.apache.org (last accessed date: 26.05.18).
    Google Scholar [5] Atzori L., Iera A., Morabito G. The internet of things: A survey
    Comput. Netw., 54 (15) (2010), pp. 2787-2805 View PDFView articleView in ScopusGoogle
    Scholar [6] J. Bélissent, Getting clever about smart cities: new opportunities
    require new business models (2010). Google Scholar [7] Boehm B. Anchoring the
    software process IEEE softw., 13 (4) (1996), pp. 73-82 Google Scholar [8] Bonomi
    F., Milito R., Zhu J., Addepalli S. Fog computing and its role in the internet
    of things Proceedings of The First Edition of the MCC Workshop on Mobile Cloud
    Computing, ACM (2012), pp. 13-16 CrossRefGoogle Scholar [9] S. Boyd, Alternating
    direction method of multipliers, in: Talk at NIPS Workshop on Optimization and
    Machine Learning, 2011. Google Scholar [10] Boyd S., Parikh N., Chu E., Peleato
    B., Eckstein J., et al. Distributed optimization and statistical learning via
    the alternating direction method of multipliers Found. Trends® Mach. Learn., 3
    (1) (2011), pp. 1-122 View in ScopusGoogle Scholar [11] Cardell-Oliver R., Liu
    W. Representation and recognition of situations in sensor networks IEEE Commun.
    Mag., 48 (3) (2010) Google Scholar [12] Carvalho V.R., Cohen W.W. Single-pass
    online learning: Performance, voting schemes and online feature selection Proceedings
    of the 12th ACM SIGKDD International Conference on Knowledge Discovery and Data
    Mining, ACM (2006), pp. 548-553 CrossRefView in ScopusGoogle Scholar [13] Ccori
    P.C., De Biase L.C.C., Zuffo M.K., da Silva F.S.C. Device discovery strategies
    for the iot 2016 IEEE International Symposium on Consumer Electronics, ISCE, IEEE
    (2016), pp. 97-98 View in ScopusGoogle Scholar [14] S. Chakrabarty, D.W. Engels,
    A secure iot architecture for smart cities, in: 13th IEEE Annual Consumer Communications
    Networking Conference, CCNC, 2016, pp. 812–813. http://dx.doi.org/10.1109/CCNC.2016.7444889.
    Google Scholar [15] Chang C., Srirama S.N., Buyya R. Indie fog: An efficient fog-computing
    infrastructure for the internet of things Computer, 50 (9) (2017), pp. 92-98 View
    in ScopusGoogle Scholar [16] Cheng B., Zhu D., Zhao S., Chen J. Situation-aware
    iot service coordination using the event-driven soa paradigm IEEE Trans. Netw.
    Serv. Manag., 13 (2) (2016), pp. 349-361 View in ScopusGoogle Scholar [17] C.
    of Chicago, City of chicago open data, Tech. rep. https://data.cityofchicago.org/
    (last accessed date: 26.05.18). Google Scholar [18] Cuff D., Hansen M., Kang J.
    Urban sensing: out of the woods Commun. ACM, 51 (3) (2008), pp. 24-33 CrossRefView
    in ScopusGoogle Scholar [19] Endsley M.R. Design and evaluation for situation
    awareness enhancement Proceedings of the Human Factors Society Annual Meeting,
    Vol. 32, SAGE Publications Sage CA, Los Angeles, CA (1988), pp. 97-101 CrossRefGoogle
    Scholar [20] Fox G.C., Kamburugamuve S., Hartman R.D. Architecture and measured
    characteristics of a cloud based internet of things 2012 International Conference
    on Collaboration Technologies and Systems (CTS), IEEE (2012), pp. 6-12 CrossRefView
    in ScopusGoogle Scholar [21] Habak K., Ammar M., Harras K.A., Zegura E. Femto
    clouds: leveraging mobile devices to provide cloud service at the edge 2015 IEEE
    8th International Conference on Cloud Computing, CLOUD, IEEE (2015), pp. 9-16
    CrossRefView in ScopusGoogle Scholar [22] I. D. C. (IDC), Worldwide smart connected
    device shipments, Tech. rep. (March 2012). URL http://www.idc.com/getdoc.jsp?containerId=prUS23398412.
    Google Scholar [23] Katakis I., Tsoumakas G., Vlahavas I. On the utility of incremental
    feature selection for the classification of textual data streams Panhellenic Conference
    on Informatics, Springer (2005), pp. 338-348 CrossRefView in ScopusGoogle Scholar
    [24] Laya A., V.-l. Bratu, Markendahl J. Who is investing in machine-to-machine
    communications? 24th European Regional ITS Conference, Florence 2013, Vol. 88475,
    International Telecommunications Society (ITS) (2013) Google Scholar [25] H. Levesque,
    F. Pirri, R. Reiter, Foundations for the situation calculus (1998). Google Scholar
    [26] Li F., Vögler M., Claeßens M., Dustdar S. Efficient and scalable iot service
    delivery on cloud IEEE CLOUD (2013), pp. 740-747 View in ScopusGoogle Scholar
    [27] T.H. Luan, L. Gao, Z. Li, Y. Xiang, G. Wei, L. Sun, Fog computing: Focusing
    on mobile users at the edge, arXiv preprint arXiv:1502.01815. Google Scholar [28]
    Marcos S. Tolerating concept and sampling shift in lazy learning using prediction
    error context switching Lazy Learning, Springer (1997), pp. 133-155 Google Scholar
    [29] Masud M.M., Chen Q., Gao J., Khan L., Han J., Thuraisingham B. Classification
    and novel class detection of data streams in a dynamic feature space Joint European
    Conference on Machine Learning and Knowledge Discovery in Databases, Springer
    (2010), pp. 337-352 CrossRefView in ScopusGoogle Scholar [30] OASIS, Mqtt 3.1.1
    specification, Tech. rep. http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html
    (last accessed date: 26.05.18). Google Scholar [31] Perera C., Jayaraman P.P.,
    Zaslavsky A., Georgakopoulos D., Christen P. Sensor discovery and configuration
    framework for the internet of things paradigm 2014 IEEE World Forum on Internet
    of Things, WF-IoT, IEEE (2014), pp. 94-99 CrossRefView in ScopusGoogle Scholar
    [32] Puiu D., Barnaghi P., Tönjes R., Kümper D., Ali M.I., Mileo A., Parreira
    J.X., Fischer M., Kolozali S., Farajidavar N., et al. Citypulse: Large scale data
    analytics framework for smart cities IEEE Access, 4 (2016), pp. 1086-1108 View
    in ScopusGoogle Scholar [33] Roman R., Lopez J., Mambo M. Mobile edge computing,
    fog, et al.: A survey and analysis of security threats and challenges Future Gener.
    Comput. Syst., 78 (2018), pp. 680-698 View PDFView articleView in ScopusGoogle
    Scholar [34] M. Salganicoff, Density-adaptive learning and forgetting, in: Proceedings
    of the Tenth International Conference on Machine Learning, Vol. 3, 1993, pp. 276–283.
    Google Scholar [35] Saurez E., Hong K., Lillethun D., Ramachandran U., Ottenwälder
    B. Incremental deployment and migration of geo-distributed situation awareness
    applications in the fog Proceedings of the 10th ACM International Conference on
    Distributed and Event-based Systems, ACM (2016), pp. 258-269 CrossRefView in ScopusGoogle
    Scholar [36] Schaffers H., Komninos N., Pallot M., Trousse B., Nilsson M., Oliveira
    A. Smart cities and the future internet: Towards cooperation frameworks for open
    innovation The Future Internet Assembly, Springer (2011), pp. 431-446 CrossRefView
    in ScopusGoogle Scholar [37] Smartsantander, Future internet research and experimentation,
    Tech. rep. http://www.smartsantander.eu/ (2016). Google Scholar [38] SmartThings,
    Smartthings open cloud. Tech. rep. Samsung, https://blog.smartthings.com/tag/smartthings-open-cloud/
    (last accessed date: 26.05.18). Google Scholar [39] B. Suda, Soap web services,
    Retrieved June 29 (2003) 2010. Google Scholar [40] ThingWorx, Internet of things
    and m2m application platform. Tech. rep. PTC, http://www.thingworx.com (last accessed
    date: 26.05.18). Google Scholar [41] Urbieta A., González-Beltrán A., Mokhtar
    S.B., Hossain M.A., Capra L. Adaptive and context-aware service composition for
    iot-based smart cities Future Gener. Comput. Syst., 76 (2017), pp. 262-274 View
    PDFView articleView in ScopusGoogle Scholar [42] Vanelli B., da Silva M.P., Manerichi
    G., Pinto A.S.R., Dantas M.A.R., Ferrandin M., Boava A. Internet of things data
    storage infrastructure in the cloud using nosql databases IEEE Lat. Am. Trans.,
    15 (4) (2017), pp. 737-743 View in ScopusGoogle Scholar [43] Wang H., Tan C.C.,
    Li Q. Snoogle: A search engine for the physical world The 27th Conference on Computer
    Communications, INFOCOM, IEEE (2008), pp. 1382-1390 Google Scholar [44] Zanella
    A., Bui N., Castellani A., Vangelista L., Zorzi M. Internet of things for smart
    cities IEEE Internet Things J., 1 (1) (2014), pp. 22-32 Google Scholar Cited by
    (72) A novel Edge architecture and solution for detecting concept drift in smart
    environments 2024, Future Generation Computer Systems Show abstract HeRAFC: Heuristic
    resource allocation and optimization in MultiFog-Cloud environment 2024, Journal
    of Parallel and Distributed Computing Show abstract Smart city implementation
    based on Internet of Things integrated with optimization technology 2023, Measurement:
    Sensors Show abstract Task offloading paradigm in mobile edge computing-current
    issues, adopted approaches, and future directions 2023, Journal of Network and
    Computer Applications Show abstract Challenges of urban digital twins: A systematic
    review and a Delphi expert survey 2023, Automation in Construction Show abstract
    Reinforcement learning for cost-effective IoT service caching at the edge 2022,
    Journal of Parallel and Distributed Computing Show abstract View all citing articles
    on Scopus SK Alamgir Hossain received the B.Sc. Engg. degree in Computer Science
    and Engineering from Khulna University, Khulna, Bangladesh, in 2006, and the M.C.S.
    degree in Computer Science from the University of Ottawa, Ottawa, ON, Canada,
    in 2011. Currently he is working as a Ph.D. student in Computer Science and Engineering
    Discipline, Khulna University, Khulna, Bangladesh. At University of Ottawa, he
    was associated with the Multimedia Communications Research Laboratory (MCRLab),
    School of Information Technology and Engineering. He is also a faculty at Computer
    Science Department, Khulna University, Khulna, Bangladesh. He has authored or
    co-authored more than 20 publications including refereed journals, conference
    papers and book chapter. His research interests include Internet of Things (IoT),
    Smart Environment, Ambient Intelligence and Humanized Computing and Virtual reality
    with Haptic. Md. Anisur Rahman received his PhD degree in Computer Science at
    the University of Ottawa, Canada. He completed his Masters from Asian Institute
    of Technology, Thailand, in 2000. He is also a faculty at Computer Science Department,
    Khulna University, Bangladesh. His research interests are data integration, schema
    mappings, model management; He has published several research papers at international
    journals and conference proceedings. M. Anwar Hossain is an Associate Professor
    in the Department of Software Engineering, College of Computer and Information
    Sciences at King Saud University (KSU), Riyadh, KSA, since 2010. He obtained his
    master degree in Computer Science from the University of Ottawa, Canada, in 2005
    and Ph.D. degree in Electrical and Computer Engineering from the same University
    in 2010. His current research includes multimedia surveillance and privacy, ambient
    intelligence, smart cities, internet of things, and media cloud computing. He
    has authored/co-authored over 100 research articles. Dr. Hossain has co-organized
    several IEEE/ACM workshops including IEEE ICME AAMS-PS 2011-13, IEEE ICME AMUSE
    2014, ACM MM EMASC-2014, IEEE ISM CMAS-CITY2015, and IEEE ICME MMCloudCity-2016
    workshop. He served as a guest editor of Springer Multimedia Tools and Applications
    journal and International Journal of Distributed Sensor Networks, and Springer
    Multimedia Systems journal. He has secured several grants for research and innovation.
    He is a senior member of IEEE and ACM. 1 Smartsantander, www.smartsantander.eu.
    2 Amazon AWS, https://aws.amazon.com/. 3 City of Chicago, Data Set, https://data.cityofchicago.org/d/77jv-5zb8.
    View Abstract © 2018 Elsevier Inc. All rights reserved. Part of special issue
    Cloud-of-Things and Edge Computing: Recent Advances and Future Trends Edited by
    Mohammad Mehedi Hassan, Jemal Abawajy, Min Chen, Meikang Qiu, Sheng Chen View
    special issue Recommended articles Context-aware Edge Computing and Internet of
    Things in Smart Grids: A systematic mapping study Computers and Electrical Engineering,
    Volume 99, 2022, Article 107826 Jorge Arthur Schneider Aranda, …, Marcelo Pinto
    Vianna View PDF Joint optimization of data placement and scheduling for improving
    user experience in edge computing Journal of Parallel and Distributed Computing,
    Volume 125, 2019, pp. 93-105 Chunlin Li, …, JianHang Tang View PDF Edge server
    placement in mobile edge computing Journal of Parallel and Distributed Computing,
    Volume 127, 2019, pp. 160-168 Shangguang Wang, …, Ching-Hsien Hsu View PDF Show
    3 more articles Article Metrics Citations Citation Indexes: 65 Captures Readers:
    121 View details About ScienceDirect Remote access Shopping cart Advertise Contact
    and support Terms and conditions Privacy policy Cookies are used by this site.
    Cookie settings | Your Privacy Choices All content on this site: Copyright © 2024
    Elsevier B.V., its licensors, and contributors. All rights are reserved, including
    those for text and data mining, AI training, and similar technologies. For all
    open access content, the Creative Commons licensing terms apply.'
  inline_citation: '[3]'
  journal: Journal of Parallel and Distributed Computing
  limitations: null
  pdf_link: null
  publication_year: 2018
  relevance_score: 0.9
  relevance_score1: 0
  relevance_score2: 0
  title: Edge computing framework for enabling situation awareness in IoT based smart
    city
  verbatim_quote1: '"In our proposed approach, IoT data is annotated with its location
    and frequency of creation. We used ADMM (Alternating Direction Method of Multipliers)
    model [9], which we will explain in later section, sufficiently matches our case
    where we have a large set of data that we want to split and process into separate
    processing units, i.e. in the edge servers."'
  verbatim_quote2: '"For the unified representation the edge server output data is
    converted to a unified format such as ‘what–when–where’ structure. For the unified
    representation we used the concept [7], which is actually a series of questions
    that extract appropriate result from a problem. This approach is popular in software
    process and project management."'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.3390/s20010084
  analysis: 'Different data types (e.g., soil moisture, canopy temperature, weather)
    and their collection and use


    SenSE is an IoT platform-independent sensor simulation environment. It emulates
    the behavior of sensors that periodically send data that resemble what real sensors
    of different nature may generate. By using SenSE in our experiments, we could
    study the system''s behavior under many controlled conditions. This approach allowed
    us to easily change the frequency of message generation by varying the probability
    distribution of arrival times, as well as to change the payload size of the messages.
    The former has a significant impact on how fast messages are queued in the IoT
    Agent, which may affect the system''s performance. The latter has an impact on
    the amount of system resources that a component needs to process each message.


    Our performance analysis revealed the importance of using a software component
    that isolates the IoT platform from the particularities of LPWAN technologies,
    such as LoRaWAN. By using ChirpStack as a sensor data endpoint, we could observe
    a noticeable improvement in both the response time and the scalability limits.
    We conjecture that ChirpStack plays the role of a cushion for sensor data and
    softens message spikes that prevent the IoT Agent from queuing too many messages.
    Thus, the ChirpStack works to both make the system more stable, preventing crashes,
    but also to make it more robust, allowing it to handle higher workloads and making
    the system less prone to crashes.'
  authors:
  - Ivan Zyrianoff
  - Alexandre Heideker
  - Dener Silva
  - João Henrique Kleinschmidt
  - Juha-Pekka Soininen
  - Tullio Salmon Cinotti
  - Carlos Kamienski
  citation_count: 38
  full_citation: 'Architecting and Deploying IoT Smart Applications: A Performance–Oriented
    Approach'
  full_text: ">\nsensors\nArticle\nArchitecting and Deploying IoT Smart Applications:\n\
    A Performance–Oriented Approach\nIvan Zyrianoﬀ 1, Alexandre Heideker 1\n, Dener\
    \ Silva 1, João Kleinschmidt 1,\nJuha-Pekka Soininen 2\n, Tullio Salmon Cinotti\
    \ 3\nand Carlos Kamienski 1,*\n1\nFederal University of the ABC, Center of Mathematics,\
    \ Computing and Cognition, Santo\nAndré 09210-580, Brazil; ivan.dimitry@ufabc.edu.br\
    \ (I.Z.); alexandre.heideker@ufabc.edu.br (A.H.);\ndener.silva@ufabc.edu.br (D.S.);\
    \ joao.kleinschmidt@ufabc.edu.br (J.K.)\n2\nVTT Technical Research Centre of Finland,\
    \ FI-90571 Oulu, Finland; Juha-Pekka.Soininen@vtt.ﬁ\n3\nAdvanced Research Center\
    \ on Electronic Systems “Ercole De Castro” (ARCES), University of Bologna,\n40123\
    \ Bologna, Italy; tullio.salmoncinotti@unibo.it\n*\nCorrespondence: cak@ufabc.edu.br;\
    \ Tel.: +55-11-4996-0179\nReceived: 14 November 2019; Accepted: 18 December 2019;\
    \ Published: 21 December 2019\n\x01\x02\x03\x01\x04\x05\x06\a\b\x01\n\x01\x02\x03\
    \x04\x05\x06\a\nAbstract: Layered internet of things (IoT) architectures have\
    \ been proposed over the last years as they\nfacilitate understanding the roles\
    \ of diﬀerent networking, hardware, and software components of\nsmart applications.\
    \ These are inherently distributed, spanning from devices installed in the ﬁeld\
    \ up\nto a cloud datacenter and further to a user smartphone, passing by intermediary\
    \ stages at diﬀerent\nlevels of fog computing infrastructure. However, IoT architectures\
    \ provide almost no hints on where\ncomponents should be deployed. IoT Software\
    \ Platforms derived from the layered architectures\nare expected to adapt to scenarios\
    \ with diﬀerent characteristics, requirements, and constraints from\nstakeholders\
    \ and applications. In such a complex environment, a one-size-ﬁts-all approach\
    \ does\nnot adapt well to varying demands and may hinder the adoption of IoT Smart\
    \ Applications. In this\npaper, we propose a 5-layer IoT Architecture and a 5-stage\
    \ IoT Computing Continuum, as well as\nprovide insights on the mapping of software\
    \ components of the former into physical locations of the\nlatter. Also, we conduct\
    \ a performance analysis study with six conﬁgurations where components are\ndeployed\
    \ into diﬀerent stages. Our results show that diﬀerent deployment conﬁgurations\
    \ of layered\ncomponents into staged locations generate bottlenecks that aﬀect\
    \ system performance and scalability.\nBased on that, policies for static deployment\
    \ and dynamic migration of layered components into\nstaged locations can be identiﬁed.\n\
    Keywords: internet of things (IoT); IoT architecture; IoT platform; fog computing;\
    \ LoRaWAN; low\npower wide area network (LPWAN); FIWARE; smart agriculture; smart\
    \ cities\n1. Introduction\nThe internet of things (IoT) has been creating a whole\
    \ new demand for system architectures,\ninfrastructure and platform deployment\
    \ approaches, in order to fulﬁll the requirements of a new breed\nof highly distributed\
    \ smart applications. The number of devices connected to the Internet has been\n\
    increasing steadily [1,2], so smart applications will typically have to deal with\
    \ thousands or even\nmillions of devices. Customized conﬁgurations, automated\
    \ reconﬁgurability, and scalability are critical\nchallenges in any successful\
    \ deployment of IoT smart applications [3], in areas such as agriculture [4,5],\n\
    cities [6,7], healthcare [8] and industry [9].\nLayered architectures are critical\
    \ structures in computer networks and distributed systems as\nthey facilitate\
    \ the understanding of roles, locations, and levels of abstraction of diﬀerent\
    \ networking,\nhardware, and software components. Diﬀerent IoT architectures have\
    \ been proposed for facilitating\nSensors 2020, 20, 84; doi:10.3390/s20010084\n\
    www.mdpi.com/journal/sensors\nSensors 2020, 20, 84\n2 of 24\nthe understanding\
    \ and design of smart applications, with three [10], four [11,12], or ﬁve layers\
    \ [12–14].\nThe 3-layer architecture—application, network, and perception layers—was\
    \ soon replaced by a 5-layer\narchitecture by adding two new layers—middleware\
    \ and business—considered thus more adequate\nfor the rapid evolution of IoT systems.\
    \ Also, intermediate 4-layer architectures have been proposed,\nadding, for example,\
    \ a security and management layer. The reason behind the growing interest in IoT\n\
    architecture is that a complete solution for IoT smart applications requires diﬀerent\
    \ software, hardware,\nand communication technologies working together and integrating\
    \ a variety of platforms, components,\nservices, and applications. IoT smart applications\
    \ require careful consideration and new concepts to be\ndeveloped as they are\
    \ inherently distributed, spanning from sensors and actuators in the ﬁeld up to\
    \ a\ncloud datacenter and further to a user smartphone, passing by intermediary\
    \ stages at diﬀerent levels\nof fog computing infrastructure.\nIoT architectures\
    \ provide a functional view of software, hardware, and communication components\n\
    placed into layers for facilitating system design and development. However, they\
    \ do not provide\nindications on where these components should be deployed. As\
    \ the end-to-end data ﬂow occurring in\na smart application includes sensors deployed\
    \ in the ﬁeld whose data usually are processed in the\ncloud, the deployment of\
    \ architectural components is a complex task that may vary according to the\n\
    characteristics, requirements, and constraints of applications and stakeholders.\
    \ In such a complex\nenvironment, a one-size-ﬁts-all approach does not adapt well\
    \ to varying demands and may hinder the\nadoption of IoT smart applications. On\
    \ the other hand, a clean and layered architecture deﬁnition\nmight open the way\
    \ towards engineering processes that enable ﬂexible reallocation of data and services\n\
    to the diﬀerent deployment stages, for increased performance and scalability [15].\n\
    In this paper, we introduce a new IoT architecture for smart applications called\
    \ IoTecture,\ncomprising ﬁve layers, namely L1-Device, L2-Transport, L3-Data,\
    \ L4-Model, and L5-Service.\nOur experience with deploying an IoT platform derived\
    \ from the implementation of this architecture in\nfour pilots with diﬀerent characteristics\
    \ in three countries [4] taught us that there is no one-size-ﬁts-all\napproach\
    \ for this process. The need for our IoTecture is due to the acknowledgment that\
    \ the traditional\n5-layer architecture is not prone to having an active role\
    \ in the deployment of new applications since\nthe business, application, and\
    \ middleware layers are too generic with broader scopes.\nTherefore, together\
    \ with IoTecture, we developed the concept of an IoT computing continuum,\ncalled\
    \ IoTinuum, to provide a clear view of the diﬀerent deployment locations for architectural\n\
    components, divided up into ﬁve stages, namely S1-Thing, S2-Mist, S3-Fog, S4-Cloud,\
    \ and S5-Terminal.\nBy representing architecture layers and deployment stages\
    \ separately and mapping one into the other,\nwe obtain a ﬂexible mechanism for\
    \ reasoning on functionality and placement, thus allowing the\ndeployment of IoT\
    \ smart applications on diﬀerent scenarios. We advocate that IoTecture is not\
    \ just yet\nanother passive IoT architecture since it is actively used for the\
    \ deployment of software components\ninto distributed locations of IoTinuum.\n\
    Diﬀerent deployment conﬁgurations of layered IoTecture components mapped into\
    \ staged\nIoTinuum places generate diﬀerent hardware and software bottlenecks\
    \ represented by the use of\nsystem resources. In order to facilitate the understanding\
    \ of the tradeoﬀs involved in this mapping,\nwe conducted a performance analysis\
    \ study with six conﬁgurations of a FIWARE-based IoT platform,\nvarying the smart\
    \ application (agriculture and city), the low power wide area network (LPWAN)\n\
    technology [16] such as LoRaWAN [17], the workload and the use of fog computing\
    \ infrastructure\n(no fog, lightweight fog or heavyweight fog). Our results show\
    \ that diﬀerent deployment conﬁgurations\nof layered components into staged locations\
    \ generate diﬀerent hardware and software bottlenecks\nrepresented by the use\
    \ of system resources. The physical location where a software component is\nexecuted\
    \ has a signiﬁcant impact on the performance and scalability and brings diﬀerent\
    \ tradeoﬀs,\nas revealed by our performance analysis results. The concepts and\
    \ processes involved in architecting\nand deploying smart applications, together\
    \ with the practical performance analysis results, increase\nthe understanding\
    \ and awareness involved in the development and operation of a new breed of\n\
    IoT-enabled systems.\nSensors 2020, 20, 84\n3 of 24\nThe contributions of this\
    \ paper are threefold. Firstly, the proposal of IoTecture and IoT continuum\n\
    and the mapping of one into the other for facilitating the deployment of IoT smart\
    \ applications.\nSecondly, the qualitative and quantitative evaluation of diﬀerent\
    \ technologies according to the\nIoTinuum approach, analyzing tradeoﬀs, and highlighting\
    \ the suitability of each scenario. Thirdly, we\nincreased the understanding of\
    \ how diﬀerent components of FIWARE and LoRaWAN behave under\nheavy workload,\
    \ as our experiments indicate that some FIWARE components deal poorly with high\n\
    throughput applications. This problem has not been identiﬁed before in the literature\
    \ because most\nstudies with available results do not stress the system enough\
    \ to detect system bottlenecks.\nIn the remainder of this paper, Section 2 introduces\
    \ the background and related work, and\nSection 3 presents IoTecture and IoTinuum.\
    \ Section 4 details the research design and methods of our\nperformance analysis\
    \ study, whose results are presented in Section 5 and discussed in Section 6.\
    \ Finally,\nSection 7 draws some conclusions and presents future work.\n2. Background\
    \ and Related Work\n2.1. IoT Architectures and Platforms\nLayered architectures\
    \ are critical structures in computer networks and distributed systems as\nthey\
    \ facilitate the understanding of roles, locations, and levels of abstraction\
    \ of diﬀerent networking,\nhardware, and software components. In order to separate\
    \ concerns, it is pertinent to emphasize that\nfrom an IoT architecture, diﬀerent\
    \ application software architectures can be derived as they deﬁne the\nhigh-level\
    \ structure of a system comprising software components and relations [18]. However,\
    \ here\nwe do not elaborate on application software architectures.\nThe initial\
    \ proposal of a generic IoT architecture had three layers, namely application,\
    \ network,\nand perception [10]. The application layer processes large amounts\
    \ of data using computational\nintelligence techniques and interfaces with users.\
    \ The network (also called transport) layer deals with\ncommunication and networking\
    \ technologies to transfer data from sensors to the place of processing\nand send\
    \ commands back to actuators. The perception (also called sensing) layer collects\
    \ the data from\nsensors. However, soon, a 5-layer architecture was proposed to\
    \ deal with the rapid development of\nIoT solutions at the time, adding two more\
    \ layers: middleware and business [12–14]. The middleware\n(also called processing\
    \ or service) layer deals with data and databases, as well as service functions,\
    \ such\nas discovery, composition, and management. The business layer is a loosely\
    \ deﬁned one that aggregates\ngeneral functions to deal with an entire IoT system,\
    \ including business models and security/privacy.\nDiﬀerent extensions of the\
    \ 3-layer IoT architecture added only one new layer, a middleware/service\nlayer\
    \ [6,19], and a security and management layer [20]. As for the latter, here we\
    \ consider that\northogonal layers more adequately address these non-functional\
    \ requirements.\nNowadays, most eﬀort in developing and deploying new IoT smart\
    \ applications is aimed at\nimproving distributed data management in order to\
    \ make data promptly available for the processing\nof application-speciﬁc models,\
    \ both physical and data-driven ones. Also, these proposals follow a\ncommon approach\
    \ in the past where layered IoT architectures provided an initial functional view\
    \ of\nthe entire solution, and after some iterations in the development process,\
    \ they gave way to software\narchitectures and artifacts.\nIt is imperative the\
    \ need to implement and deploy highly distributed IoT applications that span\n\
    from the things, going through diﬀerent processing/storage/transmission stages,\
    \ up to the cloud, and\nfurther to the user terminal. In other words, we advocate\
    \ that IoT architectures must have an active\nrole in the deployment of new applications.\
    \ An option is to embed deployment locations within\nthe architecture, explicitly\
    \ recognizing the existence of edge processing [21]. However, we consider\nthat\
    \ a new concept is needed to separate the concerns of layered software components\
    \ from staged\ndeployment locations. In the 5-layer IoT architecture, the business,\
    \ application, and middleware layers\nare too generic with broader scopes, which\
    \ do not facilitate the activity of system deployment.\nSensors 2020, 20, 84\n\
    4 of 24\nAn IoT platform—also known as IoT software platform [22] or IoT middleware\
    \ [19,23]—\nimplements an IoT architecture providing a variety of building blocks\
    \ to facilitate the development of\nan IoT smart application, such as device connectivity,\
    \ device management, data management, data\nanalytics, security, and visualization.\
    \ An IoT platform gathers data from IoT devices and enables\nthe development and\
    \ of smart applications that control, monitor, and manage these devices. It is\n\
    often composed of several middleware components, each of then focusing on a speciﬁc\
    \ feature in a\nparticular layer to provide an end-to-end platform involving data\
    \ generation, transmission, storage,\nand processing.\nPractitioners can rely\
    \ on diﬀerent IoT platforms available, both open-source and commercial\nsolutions\
    \ [11,19,24]. These platforms may use multiple protocols and standards or even\
    \ proprietary\nsolutions.\nThis plethora of platforms leads to interoperability\
    \ problems since developers must\nadapt their applications to each platform, using\
    \ speciﬁc API, information models, and protocols [25].\nThus, standard interfaces\
    \ are needed to fulﬁll this interoperability issue among IoT applications and\n\
    heterogeneous IoT platforms. Also, security requirements must be addressed, such\
    \ as authentication,\nauthorization and access control, and secure communication\
    \ [26,27].\nFIWARE [28] is an open-source IoT platform that has been attracting\
    \ widespread attention in the\nlast years, comprised of a series of generic enablers\
    \ (GEs) that provide diﬀerent services. A combination\nof GEs builds diﬀerent\
    \ applications that exchange data through a REST API based on OMA NGSI [29].\n\
    Entities and their attributes represent the key aspect of the FIWARE NGSI context\
    \ management\ninformation model.\nOrion is the main FIWARE GE, a publish/subscribe\
    \ context broker and an eﬃcient data distributor,\nproviding an interface where\
    \ producers publish entities that are further notiﬁed to consumers. Orion\nonly\
    \ stores the last entity version published so that it must work together with\
    \ other GEs to keep\nhistorical data. The IoT Agent GE translates sensor data\
    \ in diﬀerent formats to NGSI and publishes\nit in Orion. There are diﬀerent implementations\
    \ of the IoT Agent, where each one maps diﬀerent\nIoT communication protocols\
    \ and data models to NGSI. The standard FIWARE IoT Agent receives\nMQTT data from\
    \ the sensors formatted in the Ultralight 2.0 protocol [30]—a lightweight text-based\n\
    protocol aimed to constrained devices and communications where the bandwidth and\
    \ device memory\nmay be limited resources. Currently, the oﬃcial FIWARE IoT Agent\
    \ implementation that supports\nLoRaWAN communication is unstable. Therefore,\
    \ we developed our own version of IoT Agent capable\nof mapping LoRaWAN messages\
    \ in the NGSI format.\n2.2. LPWAN Technologies for IoT\nIn recent years, LPWAN\
    \ technologies have been developed to meet the needs of IoT. LPWAN\nprovides long\
    \ transmission ranges, low energy consumption and low bandwidth [16], which make\
    \ it\nan attractive technology for IoT applications that send a few dozens of\
    \ bytes every couple of minutes\nor hours, such as street lighting, pollution\
    \ monitoring and irrigation for agriculture–i.e., smart cities\nand smart agriculture\
    \ scenarios. LPWANs follow a star topology, where sensors send data directly\n\
    to a data hub called gateway, which has a stable energy source and Internet connection.\
    \ Three\nLPWAN technologies are leading the forefront of this ﬁeld: Narrowband\
    \ IoT (NB-IoT) [31], Sigfox [32]\nand LoRaWAN [33]. NB-IoT, developed by 3GPP,\
    \ uses a subset of the LTE standard that limits the\nbandwidth to 200kH, thus\
    \ using cellular base stations for communication with devices. Sigfox uses\nunlicensed\
    \ ISM bands to connect end-devices to base stations based on patented technologies.\n\
    LoRa operates in the sub-GHz ranges, such as 433 MHz and 868 MHz (Europe) and\
    \ 915 MHz\n(USA and Brazil) [17]. The physical layer is called Long Range (LoRa),\
    \ and the upper layers are\ncalled LoRaWAN. The latter is standardized by the\
    \ LoRa Alliance [33] and can reach distances of\nsome kilometers with a bandwidth\
    \ up to 50 Kbps and a typical payload of fewer than 100 bytes. The\nLoRaWAN architecture\
    \ comprises LoRa end-nodes (i.e., sensors and actuators) and LoRa gateways that\n\
    have an active IP connection and forwards LoRa packets to a centralized server.\
    \ The server is further\ndivided into network server (deals with network issues)\
    \ and application (App) server, dealing with\nSensors 2020, 20, 84\n5 of 24\n\
    diﬀerent applications. LoRaWAN deﬁnes an ALOHA-based media access control protocol\
    \ on top of\nLoRa communication, as well as providing security features such as\
    \ authentication and cryptography.\nThere are diﬀerent ways of implementing the\
    \ LoRaWAN architecture: (a) Open source software\nthat can be installed in a cloud\
    \ datacenter or fog according to the scenario, such as ChirpStack [34],\npreviously\
    \ called LoRa Server; (b) The Things Network (TTN), a crowdfunded online community\n\
    that implements a LoRaWAN server and makes them available as a service (some services\
    \ are not\nfree, though) [35]; (c) Proprietary solutions, such as Loriot [36];\
    \ (d) The development of a new\nimplementation that means in practice reinventing\
    \ the wheel.\n2.3. Fog and Mist Computing for IoT\nFog computing is a new approach\
    \ for dealing with the enormous amount of data generated by\nIoT smart applications\
    \ [37]. It addresses three key challenges: (a) decreasing latency for real-time\n\
    application; (b) reducing data traﬃc between devices and cloud, and; (c) providing\
    \ a load balancing\nalternative to soften the processing burden of the cloud.\
    \ The fog metaphor is similar to the cloud\none, but the former is closer to the\
    \ ground and the people than the latter [38]. The underlying fog\ninfrastructure\
    \ is a virtualized platform that provides computing, storage, and communication\
    \ services\nbetween the users and the cloud datacenter [39]. In other words, fog\
    \ is the distributed computing\ninfrastructure for IoT. Here we consider fog computing\
    \ and edge computing as interchangeable terms,\neven though minor diﬀerences might\
    \ exist [40].\nWhile the fog aims at reducing bandwidth usage, latency, and data\
    \ communication with the\ndatacenter, mist computing extends this concept further\
    \ in IoT-based systems, closer to the sensors\nand actuators [12]. Although there\
    \ is no consensus about the deﬁnition of mist, some common\nunderstanding can\
    \ be found, such as being located closer to the devices [21,41]. Mist can be considered\n\
    the lowest level of a hierarchical fog computing system.\nUsually, mist nodes\
    \ host communication facilities, such as a LoRaWAN gateway or a Wi-Fi\naccess\
    \ point. Additionally, they can also host light processing and temporary storage,\
    \ typically using\nARM processors, such as Raspberry Pi and similar. According\
    \ to the Internet Engineering Task Force\n(IETF), these devices belong to a category\
    \ of general-purpose constrained nodes, making the diﬀerence\nbetween sensing\
    \ devices based on microcontrollers [42]. The mist infrastructure may be composed\
    \ of\ndiﬀerent nodes working together to provide services to devices within the\
    \ same geographical area,\nwhich not necessarily are packed into the same box.\n\
    2.4. IoT Smart Applications\nThe IoT allows people and objects to be connected\
    \ at any time, from anywhere, using standard\nnetworks and protocols to access\
    \ innovative smart services. Sensors of diﬀerent natures in diﬀerent\nspaces coupled\
    \ with ubiquitous GPS-equipped smartphones, in addition to the resources available\
    \ in\ncore or edge datacenters, allow seamless automation of typical manual activities.\
    \ The use of a variety\nof combined technologies—such as IoT, cloud computing,\
    \ big data analytics (e.g., machine learning\ntechniques) and network softwarization-make\
    \ it possible to build a myriad of new smart applications\nto the beneﬁt of our\
    \ society.\nHere we use four IoT verticals as examples of smart applications,\
    \ namely smart cities, smart\nagriculture, smart healthcare, and smart industry.\
    \ Although other smart applications exist, these four\nones represent the majority\
    \ of currents eﬀorts where IoT has been applied in real cases [3]. Cities\nare\
    \ becoming smarter for citizens and municipal governments, as new and existing\
    \ technologies\nare increasingly used to the development of a substantial variety\
    \ of services and applications [6,7].\nIn farms, the use of technology to add\
    \ intelligence to agriculture still has a vast potential to generate\nsigniﬁcant\
    \ advances. Smart agriculture (or more broadly smart farming), depends on innovative\n\
    technologies to increase the productivity of crops and animal products, to make\
    \ eﬃcient use of precious\nresources like water, and to decrease the amount of\
    \ chemical substances used (e.g., medicines and\npesticides) [5]. Notably, we\
    \ have been involved in using IoT and machine learning solutions within the\n\
    Sensors 2020, 20, 84\n6 of 24\nSWAMP project, which develops IoT-based approaches\
    \ for smart water management for a precision\nirrigation application, and pilots\
    \ them in Italy, Spain, and Brazil [4]. Healthcare is an essential area for\n\
    introducing IoT, given its enormous potential to provide quality of life to the\
    \ society in applications\nsuch as elderly monitoring, chronic diseases, ﬁtness\
    \ programs, and remote treatment [8]. Finally,\nindustrial automation has been\
    \ experiencing a signiﬁcant change in the last years, which is due to the\nrecent\
    \ technological advances that allow more profound interconnection and improved\
    \ integration\nand production control [9].\nA critical concern in the development\
    \ of IoT smart applications is security [26,27,43].\nThe applications must deal\
    \ with data privacy, conﬁdentiality, integrity, authentication, and availability\n\
    of services. The four IoT verticals have similar security requirements to protect\
    \ the data. In healthcare,\nprivacy means the health records of the patients must\
    \ be appropriately secured, using adequate\nauthentication methods to avoid access\
    \ by non-authorized users, and secure communication for\nexchanged data [27].\
    \ The data integrity is also important since incorrect sensor measurements or\n\
    prescriptions can cause serious health problems to the patient. Most embedded\
    \ sensors and wearables\nused in healthcare have resource limitations, which makes\
    \ it challenging to use traditional security\nmechanisms, usually computationally\
    \ expensive. Since many IoT devices are limited in power,\nprocessing, and memory,\
    \ this is a challenge also for applications in smart cities, smart agriculture,\
    \ and\nsmart industry.\n2.5. Performance and Scalability of IoT Systems\nDiﬀerent\
    \ forecasts have been reporting the availability of billions of connected devices\
    \ in the\nnext years [1,2]. Since smart applications will typically have to deal\
    \ with thousands of devices-or\nconsiderably more-performance and scalability\
    \ concerns are key to any successful IoT deployment. Yet,\nmost current reported\
    \ experiences show: (a) small-scale pilots [7,44]; (b) simulation-based or analytical\n\
    results [21,45]; (c) measurement-based results with limited scope [19,46]; (d)\
    \ no quantitative results at\nall [2,3,5,8,9,11,12,16,24,37,47]. Also, diﬀerent\
    \ architectural and deployment choices for IoT systems\naﬀect scalability, and\
    \ real-time decision-making is possible in an environment composed of thousands\n\
    of sensors [4,48]. Therefore, understanding the tradeoﬀs involved in planning\
    \ and deploying diﬀerent\nsoftware components of a speciﬁc scenario on diﬀerent\
    \ location infrastructures-such as cloud, fog,\nor mist—requires careful consideration\
    \ of the performance and scalability of the solution.\nCruz et al. [19] proposed\
    \ qualitative and quantitative metrics and evaluated the performance\nof various\
    \ IoT platforms. Out of 11 platforms initially analyzed by the qualitative approach,\
    \ ﬁve\nwere selected for the performance analysis. However, since they adopted\
    \ a generic approach, the\nauthors did not go into the speciﬁcs of individual\
    \ platforms, and they did not evaluate diﬀerent\ndeployment infrastructures.\n\
    Martínez et al. [46] gave a detailed description of a FIWARE testbed architecture\
    \ conﬁgured for\nprecision agriculture, which diﬀers from our approach, mainly\
    \ because our focus is to test diﬀerent\nconﬁgurations considering our IoTecture\
    \ and IoTinuum. Besides, their test application connects directly\nto Orion with\
    \ NGSI JSON, while we used an IoT Agent with an IoT sensor simulator that generates\n\
    synthetic data.\nThis paper diﬀers from previous work showing a performance analysis\
    \ study of six deployment\nconﬁgurations of FIWARE and LoRaWAN/LPWAN for smart\
    \ agriculture and smart city, involving\ndiﬀerent placement strategies of components\
    \ over fog and cloud infrastructures. It extends previous\npreliminary performance\
    \ results presented in [4] and [48], which focused on more speciﬁc scenarios of\n\
    smart irrigation.\n3. Architecting and Deploying IoT Smart Applications\nA complete\
    \ solution for IoT smart applications requires diﬀerent software, hardware, and\n\
    communication technologies working together and integrating a variety of platforms,\
    \ components,\nservices, and applications. These technologies play diﬀerent roles\
    \ and provide functions that operate in\nSensors 2020, 20, 84\n7 of 24\ndiﬀerent\
    \ perspectives of the scenarios addressed by smart applications. Figure 1 depicts\
    \ our proposed\nIoTecture, a generic 5-layer architecture based on our previous\
    \ experience with the development of\nIoT smart applications [4,49]. We recognize\
    \ that a myriad of diﬀerent layered architectures may be\nconceived having in\
    \ mind diﬀerent target applications.\nNevertheless, IoTecture is the outcome of\
    \ both an analysis of the literature (Section 2) and an\niterative reﬁnement process,\
    \ and as such, it is eﬀectively used in the speciﬁcation of pilot deployment\n\
    scenarios, as well as performance analysis studies. Compared to the 5-layer IoT\
    \ architecture [12–14],\nour 5-layer one explicitly adds support for highly distributed\
    \ data management functions and separates\nphysical and data-driven models from\
    \ application services. Also, by clearly identifying and separating\ncomponents\
    \ that are logically bound to the data, model, and service layers, IoTecture actively\
    \ helps\nthe deployment of IoT smart applications over diﬀerent distributed locations\
    \ in the mist, fog, and\ncloud. From a software architecture point of view, components\
    \ of diﬀerent layers are implemented by\nservices—actually encapsulated into Docker\
    \ containers with an exposed API, therefore microservices.\nComponents inside\
    \ each layer serve as representative examples of diﬀerent alternatives that may\
    \ vary\naccording to characteristics, requirements, and constraints of applications\
    \ and users.\n•\nLayer 1 (L1-Device): Sensors, actuators, and communication technologies—both\
    \ wired and\nwireless—make up the lowest layer of the IoT architecture. Devices\
    \ are sensors and actuators that\nrepresent IoT things. Figure 1 depicts some\
    \ examples of Layer 1 components, such as industrial\nrobots, that have many sensors\
    \ to track their actions, and actuators to control engines that make\nthem move\
    \ according to diﬀerent degrees of freedom, both exchanging messages with a smart\n\
    industry application via wired and wireless communication technologies.\n•\nLayer\
    \ 2 (L2-Transport): Collecting data from sensors, making it available to data\
    \ management\nfunctions, receiving commands from application models, and sending\
    \ them to actuators require a\ngood deal of intermediate components to make it\
    \ happen. Figure 1 depicts some examples of\ngeneric data transport functions\
    \ for sensing and actuation purposes, such as: (a) IoT protocol\n(e.g., MQTT [50])\
    \ that sends data from IP speaking devices to place where they are transformed\n\
    or ﬁltered either by other components of this layer or by data management components;\n\
    (b) IoT protocol translator (e.g., FIWARE IoT Agent) converts data from IoT protocol\
    \ format\n(e.g., byte stream for MQTT) into its internal format within data management\
    \ components\n(e.g., NGSI/JSON [29] for FIWARE) and vice-versa; (c) Sensor data\
    \ endpoint (e.g., ChirpStack [34])\ntransports, unpacks and decodes data for speciﬁc\
    \ IoT wireless communication technologies such as\nLPWAN [16]; (d) Device register\
    \ deals with the myriad of connected devices; (e) Data encryption\nand Authentication,\
    \ Authorization, and Accounting (AAA) is pervasively necessary for IoT\ncommunications\
    \ and included in Layer 2. A general function of data security and network/service\n\
    management are transversal functions, as all layers pervasively needed them (not\
    \ represented in\nFigure 1, though).\n•\nLayer 3 (L3-Data): Every stage of any\
    \ end-to-end IoT data ﬂow needs to deal with data in diﬀerent\nways, such as storing,\
    \ retrieving, distributing, transforming, and ﬁltering. Figure 1 depicts some\n\
    examples of generic data management functions, such as: (a) Context broker (e.g.,\
    \ FIWARE\nOrion [51]) for context data distribution and related storage system;\
    \ (b) Big data pipeline (e.g.,\nApache Kafka [52]) for raw data distribution and\
    \ replication; (c) Big data processing (e.g., Apache\nSpark [53]) for processing\
    \ large amounts of data; (d) Time series storage (e.g., CrateDB [54]) for\nhistorical\
    \ data, and; (e) Interfacing with external systems, such as weather forecast services,\
    \ online\ncity traﬃc management services and databases.\n•\nLayer 4 (L4-Model):\
    \ Represent application-speciﬁc models for any type of processing over data\n\
    collected from sensors and external systems, encompassing an assortment of algorithms,\
    \ equations,\nmethods and techniques that change the data into knowledge that\
    \ is used by end-users to change\nthe environment in a way that ﬁts their best\
    \ interests. For example, a smart irrigation application\nmay use soil and weather\
    \ data, as well as weather forecast information (external system), to feed\nSensors\
    \ 2020, 20, 84\n8 of 24\nphysical and machine learning models to precisely compute\
    \ when and how much crops should\nbe irrigated [4].\n•\nLayer 5 (L5-Service):\
    \ Contains services that support the interfaces and the interaction with\nend-users\
    \ of smart applications. This layer encompasses all services, applications, and\
    \ graphical\ninterfaces that provide visualization of sensor data, sensing and\
    \ actuation infrastructures, analyses,\nchoices, and decisions, as well as commands\
    \ to change the state of the system. Figure 1 depicts\nfour IoT verticals as examples\
    \ of smart applications, namely smart agriculture, smart city, smart\nhealthcare,\
    \ and smart industry.\nSensors 2020, 20, x FOR PEER REVIEW \n8 of 24 \ninterfaces\
    \ that provide visualization of sensor data, sensing and actuation infrastructures,\
    \ \nanalyses, choices, and decisions, as well as commands to change the state\
    \ of the system. Figure \n1 depicts four IoT verticals as examples of smart applications,\
    \ namely smart agriculture, smart \ncity, smart healthcare, and smart industry.\
    \ \n \nFigure 1. IoT architecture (IoTecture) for smart applications. \nIoTecture,\
    \ depicted by Figure 1 provides a high-level structural view of software, hardware,\
    \ \nand communication components placed into layers for facilitating system design\
    \ and development. \nHowever, it does not provide indications on where these components\
    \ should be deployed–i.e., mist, \nfog, or cloud-in a naturally distributed IoT\
    \ smart application. As the end-to-end data flow occurring \nin a smart application\
    \ includes sensors deployed in the field whose data usually are processed in the\
    \ \ncloud, the deployment of architectural components is a complex task that may\
    \ vary according to the \ncharacteristics, requirements, and constraints of applications\
    \ and stakeholders. \nIn order to provide a clear view of the different deployment\
    \ locations for architectural \ncomponents, we developed the concept of an IoT\
    \ computing continuum (shortened to IoTinuum), \nshown in Figure 2. IoTinuum is\
    \ divided up into stages or deployment locations, which may vary \naccording to\
    \ characteristics of the existing infrastructure, and extends the concept of IoT-fog-cloud\
    \ \nContinuum [47]. IoTinuum is an approach of formalizing the highly distributed\
    \ infrastructure of IoT \nsystems and facilitating the creation of different deployment\
    \ views for the mapping between layered \narchitectural components into staged\
    \ locations. For the sake of this paper, we identify five stages: \nS1-Thing,\
    \ S2-Mist, S3-Fog, S4-Cloud, and S5-Terminal. \n• \nS1-Thing: represents the stage\
    \ implemented by hardware devices, i.e., sensors and actuators, \nwhich convert\
    \ analog to digital signals and perform simple device-specific transformations,\
    \ \nsuch as calibration. \n• \nS2-Mist: mist nodes are installed in the field\
    \ and play the role of radio gateways [55] in the \ncontext of LPWAN—or similar\
    \ technologies—that support device data communication but also \nFigure 1. IoT\
    \ architecture (IoTecture) for smart applications.\nIoTecture, depicted by Figure\
    \ 1 provides a high-level structural view of software, hardware,\nand communication\
    \ components placed into layers for facilitating system design and development.\n\
    However, it does not provide indications on where these components should be deployed–i.e.,\
    \ mist,\nfog, or cloud-in a naturally distributed IoT smart application. As the\
    \ end-to-end data ﬂow occurring in\na smart application includes sensors deployed\
    \ in the ﬁeld whose data usually are processed in the\ncloud, the deployment of\
    \ architectural components is a complex task that may vary according to the\n\
    characteristics, requirements, and constraints of applications and stakeholders.\n\
    In order to provide a clear view of the diﬀerent deployment locations for architectural\
    \ components,\nwe developed the concept of an IoT computing continuum (shortened\
    \ to IoTinuum), shown in\nFigure 2. IoTinuum is divided up into stages or deployment\
    \ locations, which may vary according to\ncharacteristics of the existing infrastructure,\
    \ and extends the concept of IoT-fog-cloud Continuum [47].\nIoTinuum is an approach\
    \ of formalizing the highly distributed infrastructure of IoT systems and\nfacilitating\
    \ the creation of diﬀerent deployment views for the mapping between layered architectural\n\
    components into staged locations. For the sake of this paper, we identify ﬁve\
    \ stages: S1-Thing, S2-Mist,\nS3-Fog, S4-Cloud, and S5-Terminal.\nSensors 2020,\
    \ 20, 84\n9 of 24\n•\nS1-Thing: represents the stage implemented by hardware devices,\
    \ i.e., sensors and actuators,\nwhich convert analog to digital signals and perform\
    \ simple device-speciﬁc transformations, such\nas calibration.\n•\nS2-Mist: mist\
    \ nodes are installed in the ﬁeld and play the role of radio gateways [55] in\
    \ the\ncontext of LPWAN—or similar technologies—that support device data communication\
    \ but also\nprocessing, such as data aggregation. Mist nodes are close to the\
    \ devices they assist and typically\nhave modest computing resources, similar\
    \ to a Raspberry Pi.\n•\nS3-Fog: fog nodes are installed in sheltered places with\
    \ stable power supply and include equipment\nsuch as laptops, desktops, or small\
    \ servers, which provide system reliability, robustness, resilience,\nand low\
    \ latency for time-sensitive applications.\n•\nS4-Cloud: public or private clouds\
    \ host physical servers and virtual machines in a datacenter\nwith plenty of resources.\
    \ There is a noticeable increase in the processing power from S1-Thing\nto S4-Cloud\n\
    •\nS5-Terminal: the place where the end-user interacts with a smart application,\
    \ connected to\nS4-Cloud, but also S3-Fog in some conﬁgurations.\nSensors 2020,\
    \ 20, x FOR PEER REVIEW \n9 of 24 \n• \nS3-Fog: fog nodes are installed in sheltered\
    \ places with stable power supply and include \nequipment such as laptops, desktops,\
    \ or small servers, which provide system reliability, \nrobustness, resilience,\
    \ and low latency for time-sensitive applications. \n• \nS4-Cloud: public or private\
    \ clouds host physical servers and virtual machines in a datacenter \nwith plenty\
    \ of resources. There is a noticeable increase in the processing power from S1-Thing\
    \ \nto S4-Cloud \n• \nS5-Terminal: the place where the end-user interacts with\
    \ a smart application, connected to \nS4-Cloud, but also S3-Fog in some configurations.\
    \ \n \nFigure 2. The IoT computing continuum (IoTinuum). \nThe five stages of\
    \ IoTinuum define the end-to-end information path, starting with data \ncollected\
    \ by sensors up to commands executed by actuators. These five stages might not\
    \ be \nnecessarily present in all configuration scenarios. Instead, depending\
    \ on application characteristics, \nrequirements and constraints, S2-Mist, S3-Fog,\
    \ or S4-Cloud stages may not be present. \nCommunication technologies between\
    \ S1-Thing and S2-Mist are usually LPWAN (e.g., LoRaWAN), \nand between S2-Mist\
    \ and S3-Fog are usually WLAN (e.g., Wi-Fi). \nFigure 2. The IoT computing continuum\
    \ (IoTinuum).\nThe ﬁve stages of IoTinuum deﬁne the end-to-end information path,\
    \ starting with data collected\nby sensors up to commands executed by actuators.\
    \ These ﬁve stages might not be necessarily present\nin all conﬁguration scenarios.\
    \ Instead, depending on application characteristics, requirements and\nconstraints,\
    \ S2-Mist, S3-Fog, or S4-Cloud stages may not be present. Communication technologies\n\
    between S1-Thing and S2-Mist are usually LPWAN (e.g., LoRaWAN), and between S2-Mist\
    \ and S3-Fog\nare usually WLAN (e.g., Wi-Fi).\nFigure 3 represents diﬀerent mappings\
    \ of the IoT architecture into two deployment views or\nconﬁgurations of IoTinuum-with\
    \ and without S3-Fog—for the smart agriculture and smart city\nscenarios. The\
    \ end-users implicitly represent S5-Terminal. Figure 3a depicts a scenario of\
    \ a smart\nirrigation based on a center pivot that sprays water on a circular\
    \ plot where the S2-Mist is placed.\nL2-Transport components of the architecture\
    \ are located in S3-Fog-placed in the farm oﬃce-and L3-Data,\nL4-Model, and L5-Service\
    \ layers are located in S4-Cloud. Figure 3b depicts a sprinkler irrigation\nscenario\
    \ where S2-Mist is located in an environmentally protected box in the ﬁeld. S3-Fog\
    \ is not\nused by the choice of the farmer, and therefore all remaining components\
    \ are located in S4-Cloud.\nFigure 3c,d depict similar conﬁgurations for smart\
    \ traﬃc control. For both cases, S2-Mist is located in a\nlamppost, whereas for\
    \ Figure 3c, S3-Fog is located in an aggregation point (a point of presence of\
    \ the\nelectricity company).\nSensors 2020, 20, 84\n10 of 24\n \nThe five stages\
    \ of IoTinuum define the end-to-end information path, starting with data \ncollected\
    \ by sensors up to commands executed by actuators. These five stages might not\
    \ be \nnecessarily present in all configuration scenarios. Instead, depending\
    \ on application characteristics, \nrequirements and constraints, S2-Mist, S3-Fog,\
    \ or S4-Cloud stages may not be present. \nCommunication technologies between\
    \ S1-Thing and S2-Mist are usually LPWAN (e.g., LoRaWAN), \nand between S2-Mist\
    \ and S3-Fog are usually WLAN (e.g., Wi-Fi). \n(a) Smart Agriculture: 5-Stage\
    \ IoTinuum \n(b) Smart Agriculture: 4-Stage IoTinuum (no S3-Fog) \n \n \nSensors\
    \ 2020, 20, x FOR PEER REVIEW \n10 of 24 \n \n(c) Smart City: 5-Stage IoTinuum\
    \ \n(d) Smart City: 4-Stage IoTinuum (no S3-Fog) \nFigure 3. Smart applications\
    \ for deploying IoT architecture components on different configurations \nof IoTinuum.\
    \ \nFigure 3 represents different mappings of the IoT architecture into two deployment\
    \ views or \nconfigurations of IoTinuum-with and without S3-Fog—for the smart\
    \ agriculture and smart city \nscenarios. The end-users implicitly represent S5-Terminal.\
    \ Figure 3a depicts a scenario of a smart \nirrigation based on a center pivot\
    \ that sprays water on a circular plot where the S2-Mist is placed. \nL2-Transport\
    \ components of the architecture are located in S3-Fog-placed in the farm office-and\
    \ \nL3-Data, L4-Model, and L5-Service layers are located in S4-Cloud. Figure 3b\
    \ depicts a sprinkler \nirrigation scenario where S2-Mist is located in an environmentally\
    \ protected box in the field. S3-Fog \nis not used by the choice of the farmer,\
    \ and therefore all remaining components are located in \nS4-Cloud. Figure 3c,d\
    \ depict similar configurations for smart traffic control. For both cases, S2-Mist\
    \ \nis located in a lamppost, whereas for Figure 3c, S3-Fog is located in an aggregation\
    \ point (a point of \npresence of the electricity company). \nFigure 4 further\
    \ explains the mapping between architecture and continuum with a Smart \nIrrigation\
    \ scenario from the SWAMP project [4] with a deployment configuration that combines\
    \ \ncomponents of the five layers of IoTecture distributed over the five stages\
    \ of IoTinuum. For this \nsimplified example, L1-Device contains sensors (soil\
    \ moisture sensor and weather station) and \nactuators (pump and sprinkler) in\
    \ S1-Thing and a LoRaWAN Gateway in S2-Mist. Both stages are \ninstalled in the\
    \ farm field. L2-Transport is deployed into S3-Fog with the LoRaWAN server (sensor\
    \ \ndata endpoint), as well as in S4-Cloud with FIWARE IoT Agent (IoT protocol\
    \ translator). L3-Data is \nde loyed o ly i\nS4 Cloud\ne\ne e ted by FIWARE O\
    \ io\nL4 Model i al o de loyed i\nS4 Cloud\nFigure 3. Smart applications for deploying\
    \ IoT architecture components on diﬀerent conﬁgurations\nof IoTinuum.\nFigure\
    \ 4 further explains the mapping between architecture and continuum with a Smart\
    \ Irrigation\nscenario from the SWAMP project [4] with a deployment conﬁguration\
    \ that combines components of\nthe ﬁve layers of IoTecture distributed over the\
    \ ﬁve stages of IoTinuum. For this simpliﬁed example,\nL1-Device contains sensors\
    \ (soil moisture sensor and weather station) and actuators (pump and\nsprinkler)\
    \ in S1-Thing and a LoRaWAN Gateway in S2-Mist. Both stages are installed in the\
    \ farm ﬁeld.\nL2-Transport is deployed into S3-Fog with the LoRaWAN server (sensor\
    \ data endpoint), as well as in\nS4-Cloud with FIWARE IoT Agent (IoT protocol\
    \ translator). L3-Data is deployed only in S4-Cloud,\nrepresented by FIWARE Orion.\
    \ L4-Model is also deployed in S4-Cloud, represented by speciﬁc models\nfor irrigation\
    \ planning and operation. The application frontend of L5-Service runs in S5-Terminal\n\
    (SWAMP application), which is accessed by farmers via their smartphones. The application\
    \ backend\nruns in S4-Cloud, although not represented in Figure 4.\nSensors 2020,\
    \ 20, 84\n11 of 24\nTwo important observations can be made about the scenario\
    \ depicted in Figure 4. Firstly, it is\nonly one example among diﬀerent ways of\
    \ deploying architectural components (IoTecture layers)\nover deployment locations\
    \ (IoTinuum stages). For example, in a scenario where the farmer does\nnot desire\
    \ any on-premises infrastructure, S3-Fog disappears, and the LoRaWAN server could\
    \ be\ndeployed in S4-Cloud. Secondly, a real smart irrigation application demands\
    \ more components that\nare not in Figure 4, which appear in Figure 3 represented\
    \ by generic function names. By representing\narchitecture layers and deployment\
    \ stages separately and mapping one into the other, we obtain a\nﬂexible mechanism\
    \ for reasoning on functionality and placement and being able to provide deployment\n\
    views to IoT smart applications on diﬀerent scenarios. We consider it a more robust\
    \ approach compared\nto mixing both concerns in a single architecture, such as\
    \ the one proposed by Asif-Ur-Rahman et al. for\nsmart healthcare applications\
    \ [21].\nSensors 2020, 20, x FOR PEER REVIEW \n11 of 24 \ndeployment views to\
    \ IoT smart applications on different scenarios. We consider it a more robust\
    \ \napproach compared to mixing both concerns in a single architecture, such as\
    \ the one proposed by \nAsif-Ur-Rahman et al. for smart healthcare applications\
    \ [21]. \n \nFigure 4. Mapping of the 5-layered IoTecture over the 5-staged IoTinuum\
    \ for a smart irrigation \nscenario. \n4. Performance Analysis: Design and Methods\
    \ \nAs shown in Section 3, the mapping between components of the layered IoTecture\
    \ into stages of \nthe IoTinuum may result in different deployment configurations,\
    \ depending on the characteristics, \nrequirements, and constraints of applications\
    \ and users. The performance of smart applications is \ninfluenced by different\
    \ end-to-end sequences of connected software, hardware and communication \ntechnologies\
    \ through which the data flow has to pass in its way from sensors (S1-Thing) up\
    \ to the \ncloud (S4-Cloud)–and user (S5-Terminal)-and back to actuators (S1-Thing).\
    \ Depending on where \ncomponents are deployed and how they are connected, the\
    \ bottlenecks may move from one place to \nthe other, as well as the amount of\
    \ data to be processed, stored, and transmitted may increase or \ndecrease, thus\
    \ impacting performance metrics, such as response time. In this section, we conduct\
    \ a \nperformance analysis study with six configurations to help us understand\
    \ the performance tradeoffs \nof different architectural and deployment choices,\
    \ based on our IoTecture and IoTinuum presented \nin Section 3. \n4.1. Design\
    \ Decisions and Deployment Configurations \nThe scope of this performance analysis\
    \ study follows design choices focused on typical IoT \nplatform components, independent\
    \ of application and communication technologies. Figure 5 depicts \nsix deployment\
    \ configurations of layered IoTecture components into staged IoTinuum places \n\
    devised following four key design choices: \n• \nApplication independence: Layers\
    \ L4-Model and L5-Application of IoTecture represent specific \napplications.\
    \ This study addresses architectural components that comprise a common IoT \n\
    platform, oblivious of smart application particularities. Thus, application-specific\
    \ components \nare not included in our experiments. As applications must consume\
    \ data managed by L3-Data, \na simple Consumer component was added to represent\
    \ L4-Model as a generic data sink. As a \ndirect consequence of this choice, data\
    \ flows only in one way, from sensors to the consumer \nlocated at the cloud.\
    \ In other words, users are not involved, and therefore, L5-Service and \nT5-Terminal\
    \ are outside of the scope of this work. \n• \nCommunication independence: in\
    \ order to understand scalability limits, our study was \nperformed in a lab testbed,\
    \ wherein we can increase the workload by abstracting a large \nnumber of sensors\
    \ using the SenSE sensor simulator [56] that generates data at different rates.\
    \ \nTherefore, real IoT communication technologies-e.g., LPWAN-were not included\
    \ in our \nexperiments. Nevertheless, since LoRaWAN is currently a key LPWAN technology\
    \ that needs a \nFigure 4. Mapping of the 5-layered IoTecture over the 5-staged\
    \ IoTinuum for a smart irrigation scenario.\n4. Performance Analysis: Design and\
    \ Methods\nAs shown in Section 3, the mapping between components of the layered\
    \ IoTecture into stages of\nthe IoTinuum may result in diﬀerent deployment conﬁgurations,\
    \ depending on the characteristics,\nrequirements, and constraints of applications\
    \ and users. The performance of smart applications is\ninﬂuenced by diﬀerent end-to-end\
    \ sequences of connected software, hardware and communication\ntechnologies through\
    \ which the data ﬂow has to pass in its way from sensors (S1-Thing) up to the\n\
    cloud (S4-Cloud)–and user (S5-Terminal)-and back to actuators (S1-Thing). Depending\
    \ on where\ncomponents are deployed and how they are connected, the bottlenecks\
    \ may move from one place to the\nother, as well as the amount of data to be processed,\
    \ stored, and transmitted may increase or decrease,\nthus impacting performance\
    \ metrics, such as response time. In this section, we conduct a performance\n\
    analysis study with six conﬁgurations to help us understand the performance tradeoﬀs\
    \ of diﬀerent\narchitectural and deployment choices, based on our IoTecture and\
    \ IoTinuum presented in Section 3.\n4.1. Design Decisions and Deployment Conﬁgurations\n\
    The scope of this performance analysis study follows design choices focused on\
    \ typical IoT\nplatform components, independent of application and communication\
    \ technologies. Figure 5 depicts\nsix deployment conﬁgurations of layered IoTecture\
    \ components into staged IoTinuum places devised\nfollowing four key design choices:\n\
    •\nApplication independence: Layers L4-Model and L5-Application of IoTecture represent\
    \ speciﬁc\napplications. This study addresses architectural components that comprise\
    \ a common IoT platform,\noblivious of smart application particularities. Thus,\
    \ application-speciﬁc components are not\nincluded in our experiments. As applications\
    \ must consume data managed by L3-Data, a simple\nConsumer component was added\
    \ to represent L4-Model as a generic data sink. As a direct\nconsequence of this\
    \ choice, data ﬂows only in one way, from sensors to the consumer located at\n\
    the cloud. In other words, users are not involved, and therefore, L5-Service and\
    \ T5-Terminal are\noutside of the scope of this work.\nSensors 2020, 20, 84\n\
    12 of 24\n•\nCommunication independence: in order to understand scalability limits,\
    \ our study was performed\nin a lab testbed, wherein we can increase the workload\
    \ by abstracting a large number of sensors\nusing the SenSE sensor simulator [56]\
    \ that generates data at diﬀerent rates. Therefore, real IoT\ncommunication technologies-e.g.,\
    \ LPWAN-were not included in our experiments. Nevertheless,\nsince LoRaWAN is\
    \ currently a key LPWAN technology that needs a middleware component to\nwork\
    \ properly, a LoRaWAN server was included, as it belongs to L2-Transport playing\
    \ the role of\na sensor data endpoint. SenSE generates data emulating a LoRaWAN\
    \ device, in a way that the\nserver is unaware of not receiving data from real\
    \ sensors. The conﬁgurations with ChirpStack\nare compared to conﬁgurations with\
    \ a generic LPWAN technology where the sensor simulator\ngenerates data in a simple\
    \ string-based protocol–e.g., Ultralight 2.0-and does not need to go\nthrough\
    \ to the particularities of a speciﬁc LPWAN technology.\n•\nScenario simplicity:\
    \ to clearly understand the eﬀect of diﬀerent deployment conﬁgurations-i.e., the\n\
    mapping of IoTecture components into IoTinuum stages-a minimum set of components\
    \ was used\nto guarantee a data ﬂow that starts at sensors-actually, at SenSE-and\
    \ ends at the consumer. The set\nof software components included in the evaluated\
    \ IoT platform is composed of (Table 2): SenSE\nsensor simulator, ChirpStack,\
    \ FIWARE IoT Agent, FIWARE Orion, and consumer. They include\nother auxiliary\
    \ components as MQTT broker and databases (MongoDB, Redis), represented in\nFigure\
    \ 6.\n•\nFog Dilemma: S3-Fog may frequently leave behind in speciﬁc conﬁgurations\
    \ for diﬀerent reasons,\nsuch as the choice of the farmer in not hosting IoT infrastructure\
    \ within the farm in locations with\nstable and high-speed 4G connections. S2-Mist\
    \ is required in most cases, especially for LoRaWAN.\nAlso, we assume that S4-Cloud\
    \ is always present. Therefore, we tested diﬀerent conﬁgurations,\nwith and without\
    \ S3-Fog, and with heavyweight fog-local processing components-and lightweight\n\
    fog-only communication components.\nSensors 2020, 20, x FOR PEER REVIEW \n12 of\
    \ 24 \nThe configurations with ChirpStack are compared to configurations with\
    \ a generic LPWAN \ntechnology where the sensor simulator generates data in a\
    \ simple string-based protocol–e.g., \nUltralight 2.0-and does not need to go\
    \ through to the particularities of a specific LPWAN \ntechnology. \n \nFigure\
    \ 5. Deployment configurations of layered IoTecture components into staged IoTinuum\
    \ places. \n• \nScenario simplicity: to clearly understand the effect of different\
    \ deployment configurations-i.e., \nthe mapping of IoTecture components into IoTinuum\
    \ stages-a minimum set of components was \nused to guarantee a data flow that\
    \ starts at sensors-actually, at SenSE-and ends at the consumer. \nThe set of\
    \ software components included in the evaluated IoT platform is composed of (Table\
    \ \n2): SenSE sensor simulator, ChirpStack, FIWARE IoT Agent, FIWARE Orion, and\
    \ consumer. \nThey include other auxiliary components as MQTT broker and databases\
    \ (MongoDB, Redis), \nrepresented in Figure 6. \n• \nFog Dilemma: S3-Fog may frequently\
    \ leave behind in specific configurations for different \nreasons, such as the\
    \ choice of the farmer in not hosting IoT infrastructure within the farm in \n\
    locations with stable and high-speed 4G connections. S2-Mist is required in most\
    \ cases, \nespecially for LoRaWAN. Also, we assume that S4-Cloud is always present.\
    \ Therefore, we \nFigure 5. Deployment conﬁgurations of layered IoTecture components\
    \ into staged IoTinuum places.\nTable 1 further explains the six deployment conﬁgurations\
    \ that resulted from these four choices,\ncalled C1, C2, C3, C4, C5, and C6. They\
    \ were obtained by varying two factors, namely LPWAN\ntechnology (LoRaWAN vs.\
    \ Generic LPWAN) and fog dilemma (no fog vs. heavyweight fog vs.\nlightweight\
    \ fog.\nSensors 2020, 20, 84\n13 of 24\n•\nConﬁgurations C1, C2, C3, and C4 contain\
    \ S3-Fog, whereas conﬁgurations C5 and C6 preclude it.\nIt also implies that the\
    \ former conﬁgurations assume Wi-Fi WLAN connectivity between S2-Mist\nand S3-Fog,\
    \ while the latter assumes a 4G connection. The diﬀerence between Wi-Fi and 4G\
    \ here\nis related to the link characteristics emulated by the WANem WAN emulator\
    \ [57].\n•\nConﬁgurations C1, C4, and C5 use LoRaWAN, while conﬁgurations C2,\
    \ C3, and C6 assume a\ngeneric LPWAN technology–e.g., the physical LoRa modulation.\n\
    •\nConﬁgurations C1 and C2 have a heavyweight fog, which means that data are processed\
    \ and\nconsumed there with low latency. It also means that since we are using\
    \ FIWARE Orion as the\nprimary data distributor, one Orion in S3-Fog must connect\
    \ to another Orion in S4-Cloud. Since\nOrion is a publish/subscribe context broker,\
    \ the S4-Cloud Orion subscribes to the S3-Fog Orion, and\nwhenever a message is\
    \ published, the latter notiﬁes the former. On the other hand, conﬁgurations\n\
    C3 and C4 are based lightweight S3-Fog versions running only L2-Transport components,\
    \ where\nC3 only has ChirpStack, and C4 only has the IoT Agent.\nTable 1. Deployment\
    \ Conﬁgurations.\nConﬁguration\nFog Dilemma\nCommunication Technology\nHeavy-Weight\n\
    Light-Weight\nNo fog\nC1\n\x13\nLoRaWAN\nC2\n\x13\nGeneric LPWAN\nC3\n\x13\nGeneric\
    \ LPWAN\nC4\n\x13\nLoRaWAN\nC5\n\x13\nLoRaWAN\nC6\n\x13\nGeneric LPWAN\nThe main\
    \ components used in the six deployment conﬁgurations are depicted in Table 2.\n\
    Table 2. Software components for the performance analysis study.\nComponent\n\
    Layer\nImplementation\nDescription\nSenSE Sensor\nSimulator\nL1-Device\nSenSE\
    \ Tool [56]\nThe Sensor Simulating Environment (SenSE) is an\nopen-source large-scale\
    \ IoT sensor data generator able to\nabstract real devices and to model diﬀerent\
    \ complex\nscenarios, such as smart cities [58] and smart agriculture [48].\n\
    SenSE is a traﬃc workload generator that emulates\nheterogeneous sensors representing\
    \ tens of thousands of IoT\ndevices, sending data simultaneously via MQTT. Although\n\
    the sensors are synthetic, the traﬃc is real.\nChirpStack\nL2-Transport\nChirpStack\
    \ [34]\nImplementation of LoRaWAN that can be installed in a\nprivate deployment.\
    \ Composed by ChirpStack Network\nServer and ChirpStack Application Server, Redis\
    \ and\nPostgreSQL databases, and Mosquitto MQTT Broker [59].\nIoT Agent\nL2-Transport\n\
    FIWARE\nTranslates speciﬁc data formats carried by IoT Protocols\n(such as Ultralight\
    \ 2.0 over MQTT in this case) into standard\nFIWARE JSON NGSI model. IoT Agent\
    \ stores its data in\nMongoDB. We considered two implementations of the IoT\n\
    Agent: the FIWARE Ultralight 2.0 IoT Agent and a\ncustom-made LoRaWAN IoT Agent.\
    \ We developed the\nlatter one since the existing one in the FIWARE repository\
    \ is\nstill unstable.\nOrion\nL3-Data\nFIWARE\nOrion is a publish/subscribe context\
    \ broker with a central\nrole in data distribution for the FIWARE platform. Orion\n\
    works with entities deﬁned in JSON NGSI and stores them\ndirectly in MongoDB.\n\
    Consumer\nL4-Model\nSpeciﬁc purpose\nA simple consumer of IoT data playing the\
    \ role of a generic\nsmart application model.\nSensors 2020, 20, 84\n14 of 24\n\
    4.2. Experimental Design\nFigure 6 extends Figure 5, providing additional technical\
    \ information for the six deployment\nconﬁgurations introduced in, needed for\
    \ the clear understanding of both experiments and results.\n•\nSmart applications:\
    \ two scenarios of smart agriculture and smart city are considered in our\nexperiments.\
    \ The critical diﬀerence between them is the approach for sensor data generation.\n\
    In the smart agriculture scenario, we consider many soil moisture sensor probes,\
    \ continually\ngenerating and transmitting one data packet every 10 min. In the\
    \ smart city scenario, we consider\nvehicles playing the role of sensors that\
    \ communicate with a traﬃc light according to a Poisson\narrival rate. In both\
    \ scenarios, the SenSE sensor simulator synthetically generates sensor data.\n\
    •\nLPWAN Technology: data is generated by SenSE using the Ultralight 2.0 protocol\
    \ format in\nboth scenarios. Also, for LoRaWAN, sensor data packets are coded\
    \ according to the LoRa PHY\nformat and encrypted according to the AES algorithm\
    \ determined by the LoRaWAN standard.\nFor Generic LPWAN, plain sensor data is\
    \ transmitted directly to the receiving end, which is\nalways an MQTT broker.\
    \ There is a sizeable diﬀerence in the payload generated by SenSE in the\nconﬁgurations\
    \ with LoRaWAN and generic LPWAN. With LoRaWAN, SenSE sends ChirpStack a\nJSON\
    \ over MQTT message with information about the emulated LoRa modulation in addition\
    \ to\nthe actual encrypted payload, composing a message of 314 bytes. In the conﬁgurations\
    \ without\nLoRaWAN, SenSE sends an Ultralight 2.0-structured MQTT 65-byte message\
    \ to the IoT Agent,\nsigniﬁcantly smaller than the LoRa message\n•\nS1-Thing and\
    \ S2-Mist: the SenSE simulator abstracts L1-Device in both S1-Thing and S2-Mist\n\
    for all conﬁgurations. In other words, since our experiments are controlled and\
    \ performed in a\ntestbed, L1-Device is not present, except for the LoRa PHY format\
    \ that is generated by SenSE,\nin order to understand the real eﬀect of ChirpStack.\n\
    •\nChirpStack: an open source LoRa server composed of two main components, the\
    \ ChirpStack\nNetwork Server and the ChirpStack application server. Both communicate\
    \ via MQTT with each\nother and with sensors and actuators, as well as platform\
    \ components, e.g., FIWARE IoT Agent.\nAlso, they use Redis and PostgreSQL as\
    \ databases.\n•\nWAN Emulation: to emulate the network link between the fog and\
    \ the cloud, we used a WAN\nemulator (WANem) with 45 ms of latency and 5 ms of\
    \ jitter. We deﬁned the parameters to input\nin the WANem through a simple experiment\
    \ performed the ping command to a VM located in the\nAmazon cloud in São Paulo,\
    \ sent through 4G.\n•\nInfrastructure:\nexperiments were performed in an OpenStack-powered\
    \ private cloud.\nAs experiments were in a testbed, they are not inﬂuenced by\
    \ other virtual machines running in the\nsame physical servers. VMs for cloud\
    \ and fog are based on standard Amazon AWS conﬁgurations:\ncloud runs on a t2.medium\
    \ instance (2vCPU-4GB of RAM) and fog on a t2.small instance (1vCPU–2\nGB RAM).\
    \ Our testbed was composed of two physical servers with the following conﬁguration:\n\
    Intel(R) Xeon(R) CPU E3-1240 V2 @ 3.40GHz-8 cores and 16 GB of RAM.\nExperiments\
    \ with a large number of sensors-representing soil moisture sensors or cars passing\n\
    through a traﬃc light-simultaneously send messages to the platform, in order to\
    \ verify and understand\nscalability tradeoﬀs. We varied all levels of all factors\
    \ in each scenario, consisting of 36 diﬀerent\npossibilities (Table 3).\nSensors\
    \ 2020, 20, 84\n15 of 24\n \np\ny\ny\ng\nsame physical servers. VMs for cloud\
    \ and fog are based on standard Amazon AWS \nconfigurations: cloud runs on a t2.medium\
    \ instance (2vCPU-4GB of RAM) and fog on a t2.small \ninstance (1vCPU–2 GB RAM).\
    \ Our testbed was composed of two physical servers with the \nfollowing configuration:\
    \ Intel(R) Xeon(R) CPU E3-1240 V2 @ 3.40GHz-8 cores and 16 GB of \nRAM.  \n(a)\
    \ Configuration C1 \n \n(b) Configuration C2 \n \n \nSensors 2020, 20, x FOR PEER\
    \ REVIEW \n15 of 24 \n \n(c) Configuration C3 \n \n(d) Configuration C4 \n \n\
    (e) Configuration C5 \n \n(f) Configuration C6 \nFigure 6. Testbed setup for the\
    \ six deployment configurations. \nExperiments with a large number of sensors-representing\
    \ soil moisture sensors or cars passing \nthrough a traffic light-simultaneously\
    \ send messages to the platform, in order to verify and \nunderstand scalability\
    \ tradeoffs. We varied all levels of all factors in each scenario, consisting\
    \ of 36 \ndifferent possibilities (Table 3). \nTable 3. Factors and levels for\
    \ the performance analysis study. \nFactor \nLevel \nS\ni\nS\nA\ni\nl\nS\nCi\n\
    Figure 6. Testbed setup for the six deployment conﬁgurations.\nSensors 2020, 20,\
    \ 84\n16 of 24\nTable 3. Factors and levels for the performance analysis study.\n\
    Factor\nLevel\nScenario\nSmart Agriculture–Smart City\nWorkload\nSmart Agriculture:\
    \ soil sensor probes sending data every\n10 min (time-driven sensors following\
    \ a Constant distribution)\n5000–10,000–15,000\n(500–1000–1500 messages per minute)\n\
    Smart City: car arrival rate given in cars per second\n(event-driven sensors following\
    \ a Poisson Distribution)\n8–16–24 (480–960–1440 messages per minute)\nDeployment\
    \ conﬁgurations\nC1–C2–C3–C4-C5-C6\nNotice that the workload for smart agriculture\
    \ and smart city scenarios is speciﬁed in diﬀerent\nunits since they are based\
    \ on diﬀerent probability distributions for time-driven and event-driven\nsensors,\
    \ respectively. Both represent somewhat similar workloads: 500–1000–1500 messages\
    \ per\nminute for the smart agriculture scenario, and 480–960–1440 average messages\
    \ per minute for the\nsmart city scenario. Each experiment took 2 min with 30\
    \ replications, totalizing 36 h.\n4.3. Metrics\nThe experiments collected two\
    \ categories of metrics:\n•\nElapsed Time: The average time taken since a sensor\
    \ data point is generated by SenSE until the\nconsumer receives it. This metric\
    \ represents how long it takes for sensor data to be available to\nany subscribed\
    \ application. We present the Thing-to-Cloud Elapsed Time that encompasses the\n\
    end-to-end path taken by data from its inception by SenSE in S1-Thing up to its\
    \ consumption in\nS4-Cloud, and Thing-to-Fog Elapsed Time speciﬁcally for conﬁgurations\
    \ C1 and C2 that contains\nan L4-Model Consumer application in S4-Cloud.\n•\n\
    System metrics: CPU and RAM usage per Docker container, which allows observing\
    \ each\ncomponent, located in S3-Fog or in S4-Cloud, collected every 5 s.\n5.\
    \ Performance Analysis: Results\nFigure 7 summarizes the key results of Thing-to-Cloud\
    \ Elapsed Times for smart agriculture and\nsmart city for the six conﬁgurations\
    \ C1, C2, C3, C4, C5, and C6. The bars ﬁlled with horizontal, diagonal\nand zigzag\
    \ patterns mean that the experiments did not ﬁnish correctly due to higher workloads,\n\
    even after numerous repetitions. Also, conﬁguration C1 did not run at all for\
    \ smart agriculture with\n1500 messages per minute-15,000 sensor probes-as VMs\
    \ always failed shortly after the beginning of\nthe experiments.\nComparing both\
    \ scenarios, we can observe that smart city (Figure 7a) had a slightly better\
    \ result,\nespecially for the highest workload of each scenario. Those results\
    \ show that the components tested\nperformed better with messages arriving in\
    \ bursts-event-driven sensors-instead of messages arriving\nwith a constant ﬂow-time-driven\
    \ sensors. Notably, conﬁgurations, including LoRaWAN (C1, C4, and\nC5), achieved\
    \ higher scalability than the ones with generic LPWAN. Besides performing its\
    \ intrinsic\nfunction, ChirpStack works as a cushion for sensor data and softens\
    \ message spikes. Regarding an\noverall comparison of the experiments using LoRaWAN\
    \ (conﬁguration C1, C4, and C5) and generic\nLPWAN (conﬁguration C2, C3, and C6),\
    \ it can be noted that for lower workloads ChirpStack adds\nabout 200 ms to the\
    \ processing, since more software components are needed for addressing issues\n\
    such as security and authorization.\nSensors 2020, 20, 84\n17 of 24\n \nFigure\
    \ 7 summarizes the key results of Thing-to-Cloud Elapsed Times for smart agriculture\
    \ and \nsmart city for the six configurations C1, C2, C3, C4, C5, and C6. The\
    \ bars filled with horizontal, \ndiagonal and zigzag patterns mean that the experiments\
    \ did not finish correctly due to higher \nworkloads, even after numerous repetitions.\
    \ Also, configuration C1 did not run at all for smart \nagriculture with 1500\
    \ messages per minute-15,000 sensor probes-as VMs always failed shortly after\
    \ \nthe beginning of the experiments. \n \n(a) Smart Agriculture (time-driven\
    \ sensors) \n \n(b) Smart City (event-driven sensors) \nFigure 7. Device-to-Cloud\
    \ elapsed time for IoT smart applications. \nFigure 7. Device-to-Cloud elapsed\
    \ time for IoT smart applications.\nIn the smart agriculture scenario with the\
    \ highest workload (1500 messages per minute), only\ntwo conﬁgurations ran up\
    \ smoothly to the end of the experiments without failing, namely C4 and C5.\n\
    This result was not expected since C6 failed, and it is the lightest conﬁguration\
    \ in terms of the number\nof software components that are placed in the robust\
    \ VM in the cloud. Nevertheless, both scenarios\nhighlight the stability and scalability\
    \ of conﬁgurations C4 and C5, mainly due to the improved data\nﬂow control of\
    \ ChirpStack. On the other hand, when the workload is placed directly on the IoT\
    \ Agent,\nthe experiment fails, e.g., C6.Conﬁgurations C1 and C2 use a heavy fog,\
    \ where the Consumer uses\ndata directly in S3-Fog, allowing applications to process\
    \ part of the data closer to the user and thus to\nrespond to changes in real-time.\n\
    In Figure 8, we see that for C1, most of the time budget is elapsed up to S3-Fog,\
    \ whereas for C2,\nthe time to reach and process data in the cloud dominates the\
    \ path for both scenarios. This behavior\ncomes from the ChirpStack processing\
    \ time, present in C1 and absent in C2. For applications that\nrequire lower response\
    \ times-like a Smart City scenario–the LoRaWAN 200 ms processing time might\n\
    be unacceptable, which can make a case for a more straightforward LPWAN solution.\n\
    Sensors 2020, 20, 84\n18 of 24\n \nuser and thus to respond to changes in real\
    \ time. \nIn Figure 8, we see that for C1, most of the time budget is elapsed\
    \ up to S3-Fog, whereas for C2, \nthe time to reach and process data in the cloud\
    \ dominates the path for both scenarios. This behavior \ncomes from the ChirpStack\
    \ processing time, present in C1 and absent in C2. For applications that \nrequire\
    \ lower response times-like a Smart City scenario–the LoRaWAN 200 ms processing\
    \ time \nmight be unacceptable, which can make a case for a more straightforward\
    \ LPWAN solution. \n \n \n(a) Smart Agriculture (time-driven sensors) \n(b) Smart\
    \ City (event-driven sensors) \nFigure 8. Device-to-Fog elapsed time for IoT smart\
    \ applications. \nWe also measured CPU and RAM usage for all software components,\
    \ located both in S3-Fog \nand S4-Cloud, which helped us to understand the behavior\
    \ of the elapsed time metric. In all \nexperiments that did not finish correctly,\
    \ the cause was a failure in IoT Agent. However, it is \nrelevant to notice that\
    \ we used two different implementations: (a) a specially developed LoRaWAN \n\
    IoT Agent; (b) the FIWARE official Ultralight 2.0 IoT Agent. Although both play\
    \ the same role in \nconverting IoT protocols into NGSI JSON and share the same\
    \ programing language–JavaScript \nusing Node.js–they differ in terms of performance\
    \ and scalability. Some findings are worth \nhighlighting: \n• \nThe LoRaWAN IoT\
    \ Agent located at S3-Fog crashes in configuration C1 with the high workload \n\
    for the smart city scenario due to spikes in CPU usage as depicted in Figure 9.\
    \ A few seconds \nafter a certain threshold of messages per second is reached,\
    \ the CPU usage goes up to 100%, and \nFigure 8. Device-to-Fog elapsed time for\
    \ IoT smart applications.\nWe also measured CPU and RAM usage for all software\
    \ components, located both in S3-Fog and\nS4-Cloud, which helped us to understand\
    \ the behavior of the elapsed time metric. In all experiments\nthat did not ﬁnish\
    \ correctly, the cause was a failure in IoT Agent. However, it is relevant to\
    \ notice\nthat we used two diﬀerent implementations: (a) a specially developed\
    \ LoRaWAN IoT Agent; (b) the\nFIWARE oﬃcial Ultralight 2.0 IoT Agent. Although\
    \ both play the same role in converting IoT protocols\ninto NGSI JSON and share\
    \ the same programing language–JavaScript using Node.js–they diﬀer in\nterms of\
    \ performance and scalability. Some ﬁndings are worth highlighting:\n•\nThe LoRaWAN\
    \ IoT Agent located at S3-Fog crashes in conﬁguration C1 with the high workload\n\
    for the smart city scenario due to spikes in CPU usage as depicted in Figure 9.\
    \ A few seconds after\na certain threshold of messages per second is reached,\
    \ the CPU usage goes up to 100%, and this\ncomponent presents a type of instability\
    \ similar to a phase transition, leading it to crash soon after\n341 s of the\
    \ experiment.\n•\nThe Ultralight 2.0 IoT Agent located at both S3-Fog and S4-Cloud\
    \ crashes in conﬁgurations C2,\nC3, and C5 with the high workload for the smart\
    \ agriculture scenario due to a linear and constant\nincrease in memory usage.\
    \ Figure 10a shows it keeps allocation memory up to 239 s and crashes,\nwhich\
    \ corresponds to the CPU usage of MongoDB, and also Orion, at S4-Cloud. Figure\
    \ 10b shows\nthat after the IoT Agent crashes, the CPU usage of MongoDB drops\
    \ from more than 70% to almost\nzero after 40 s. In other words, the crash of\
    \ the IoT Agent in S3-Fog is instead a consequence of\nanother performance bottleneck\
    \ located at S4-Cloud. The service time of the IoT Agent is shorter\nthan the\
    \ joint service time of Orion and MongoDB so that the former queues messages waiting\
    \ for\nHTTP REST requests to be answered by the latter. In other words, the IoT\
    \ Agent waits for a TCP\nACK packet to free the memory allocated for the messages.\
    \ As the message ﬂow is constant in the\nsmart agriculture scenario, the memory\
    \ allocated by the IoT Agent increases boundlessly up to a\npoint the operating\
    \ system fails to provide more space, and it crashes. The high usage of CPU by\n\
    MongoDB does not aﬀect the performance of the platform since the IoT Agent crashes\
    \ before the\ndatabase starts to present signiﬁcant problems.\n•\nChirpStack is\
    \ a well-developed and stable software component that adequately uses system\n\
    resources. The combined CPU Usage of all individual components that make up ChirpStack\n\
    was around 40% for high workloads and 6% for low workloads, whereas the sum of\
    \ memory\nusage was approximately 30 MB for high workloads and 22 MB for low workloads.\
    \ Except for\nC1, all the conﬁgurations that crashed during the experiments were\
    \ not based on LoRaWAN and\nconsequently did not use ChirpStack. We conclude that,\
    \ in addition to performing his LoRaWAN\nfunctions, the ChirpStack also works\
    \ as a cushion for sensor data that softens message spikes that\nprevent IoT Agent\
    \ to queue too many messages.\nSensors 2020, 20, 84\n19 of 24\n•\nThe smart agriculture\
    \ and smart city scenarios presented a similar performance for low and medium\n\
    workloads. In those cases, the diﬀerence in the probability distribution for message\
    \ generation\ndid not impact the system performance, unlike for high workloads,\
    \ where all experiments with\nGeneric LPWAN (no ChirpStack) crashed for smart\
    \ agriculture. On the other hand, in the smart\ncity scenario, conﬁgurations C2\
    \ and C5 ran to the end of the experiment, and C3 was the only one\nwith LoRaWAN\
    \ that faced problems. This behavior indicates that the system can better handle\n\
    traﬃc in bursts than in a constant ﬂow of messages, because the time between bursts\
    \ is enough for\nOrion to dequeue some messages and send ACKs back to the IoT\
    \ Agent, freeing some memory in\nthe process.\n \nresources. The combined CPU\
    \ Usage of all individual components that make up ChirpStack \nwas around 40%\
    \ for high workloads and 6% for low workloads, whereas the sum of memory \nusage\
    \ was approximately 30 MB for high workloads and 22 MB for low workloads. Except\
    \ for \nC1, all the configurations that crashed during the experiments were not\
    \ based on LoRaWAN \nand consequently did not use ChirpStack. We conclude that,\
    \ in addition to performing his \nLoRaWAN functions, the ChirpStack also works\
    \ as a cushion for sensor data that softens \nmessage spikes that prevent IoT\
    \ Agent to queue too many messages. \n• \nThe smart agriculture and smart city\
    \ scenarios presented a similar performance for low and \nmedium workloads. In\
    \ those cases, the difference in the probability distribution for message \ngeneration\
    \ did not impact the system performance, unlike for high workloads, where all\
    \ \nexperiments with Generic LPWAN (no ChirpStack) crashed for smart agriculture.\
    \ On the other \nhand, in the smart city scenario, configurations C2 and C5 ran\
    \ to the end of the experiment, and \nC3 was the only one with LoRaWAN that faced\
    \ problems. This behavior indicates that the \nsystem can better handle traffic\
    \ in bursts than in a constant flow of messages, because the time \nbetween bursts\
    \ is enough for Orion to dequeue some messages and send ACKs back to the IoT \n\
    Agent, freeing some memory in the process. \n \nFigure 9. CPU usage of S3-Fog\
    \ components-Configuration C1–Smart City. \nFigure 9. CPU usage of S3-Fog components-Conﬁguration\
    \ C1–Smart City.\nSensors 2020, 20, x FOR PEER REVIEW \n19 of 24 \n \n(a) Memory\
    \ usage in S3-Fog \n \n(b) CPU usage in S4-Cloud \nFigure 10. Cloud CPU Usage\
    \ and Fog Memory Usage for Configuration C2 in a smart agriculture \nscenario\
    \ in the experiment with 1500 messages/min. \n6. Discussion \n6.1. Performance\
    \ and Scalability Concerns \nBy analyzing the performance results shown in Section\
    \ 5, we can understand that different \nFigure 10. Cloud CPU Usage and Fog Memory\
    \ Usage for Conﬁguration C2 in a smart agriculture\nscenario in the experiment\
    \ with 1500 messages/min.\nSensors 2020, 20, 84\n20 of 24\n6. Discussion\n6.1.\
    \ Performance and Scalability Concerns\nBy analyzing the performance results shown\
    \ in Section 5, we can understand that diﬀerent\ndeployment conﬁgurations of layered\
    \ IoTecture components into staged IoTinuum places generate\ndiﬀerent hardware\
    \ and software bottlenecks as far as the use of system resources is concerned.\
    \ Also,\nthat directly aﬀects the critical application metric to determine the\
    \ duration of data transfer (elapsed\ntime) from its inception in S1-Thing by\
    \ SenSE to its consumption in S4-Cloud by the consumer. Also,\nour results show\
    \ that individual software components have diﬀerent scalability behaviors that\
    \ may\nchange when they are connected to each other.\nThe complexity in understanding\
    \ diﬀerent tradeoﬀs complicates the choice of particular\ndeployment conﬁgurations\
    \ for speciﬁc IoT smart applications. In those cases, the help of an expert\n\
    on the IoT platform will be required to correctly identify the most suitable set\
    \ of components and\nconﬁguration deployment for each scenario, considering typical\
    \ workloads, as well as characteristics\nand constraints of the infrastructure\
    \ and applications.\nWe believe that our concepts related to\narchitecting and\
    \ deploying IoT smart applications, together with the practical performance analysis\n\
    results, increased the understanding and awareness involved in the development\
    \ and operation of\na new breed of IoT-enabled systems. However, there is still\
    \ the need for automating the process of\napplication deployment, not only the\
    \ static procedures for conﬁguring and installing an application\ninto the stages\
    \ of IoTinuum, but also the dynamic analysis which may generate consequent system\n\
    reconﬁgurations. The issue of static and dynamic conﬁguration is currently an\
    \ open research question.\nOur experiments revealed that FIWARE general enablers—in\
    \ their current version—are not\ndesigned for higher workload applications, which\
    \ is a paradox because IoT Platforms should be\nintrinsically able to deal with\
    \ thousands or millions of sensors simultaneously. When a FIWARE-based\nIoT platform\
    \ is submitted to a workload of 1500 messages per minute, the system crashes due\
    \ to the\nmalfunctioning of the Ultralight IoT Agent. As IoT smart applications\
    \ must handle a large number of\nconnected devices sending messages continuously,\
    \ 25 messages per second should not be considered\na workload high enough to cause\
    \ the system to fail. Therefore, even though Orion is considered a\nstable component,\
    \ its joint use with the IoT Agent produces a bottleneck that puts a ceiling in\
    \ the\nsystem scalability. This problem was not identiﬁed before in the literature\
    \ because most FIWARE-based\nimplementations are not deployed in large-scale scenarios–i.e.,\
    \ thousands of devices connected, as they\nfocus on simple examples with just\
    \ a few sensors, which does not stress the system enough to detect\nsystem bottlenecks.\
    \ The scalability of IoT platforms—–FIWARE, in our case—to support the operation\n\
    of applications using thousands or millions of sensors is another open research\
    \ question.\nWhen it comes to the six conﬁgurations analyzed in our experiments,\
    \ we conclude that all of them\nhave a practical use, depending on requirements,\
    \ characteristics, constraints, and workload of smart\napplications and deployment\
    \ scenarios. For example, in a scenario with stricter constraints on low\nlatency,\
    \ e.g., the smart city scenario for automated traﬃc lights, LoRaWAN powered by\
    \ ChirpStack\nmay not fulﬁll the demand. Also, such a conﬁguration may require\
    \ data to be consumed in the\nfog (S3-Fog), in order to avoid the latency of the\
    \ network link between the edge device (S1-Thing)\nand the cloud (S4-Cloud). On\
    \ the other hand, in smart agriculture, usually, there is no need for low\nlatency.\
    \ However, in some agriculture frontiers such as in the countryside of Brazil,\
    \ highly unstable\ninternet connections between S3-Fog and S4-Cloud are still\
    \ common. Thus, application uptime can\nbe increased, if it can survive to disconnections\
    \ from S4-Cloud by processing simpler models in\nS3-Fog, e.g., conﬁgurations C1\
    \ and C2 where Orion and consumer are placed in S3-Fog. Increasing the\nunderstanding\
    \ and awareness of design choices and best practices for deploying layered IoTecture\n\
    components into staged IoTinuum is an open research question.\nConﬁgurations C3\
    \ and C4 rely on a lightweight S3-Fog only for communication purposes,\nsince\
    \ they have no way of consuming data locally. This choice lies in the fact farm\
    \ infrastructure\nand connectivity with the Internet may be harnessed, but the\
    \ local server installed in S3-Fog may\nSensors 2020, 20, 84\n21 of 24\ncontinuously\
    \ be under a low workload, so that its resources may be used in some creative\
    \ ways, such\nas load balancing. This behavior was observed in the experiments\
    \ with C4, which achieved better\nresults compared to C6, where everything is\
    \ processed in S4-Cloud. However, the opposite happened\nwith C3, due to the poor\
    \ scalability of IoT Agent. Therefore, using up idle capacity in S3-Fog requires\n\
    careful analysis and an improved understanding of the behavior of speciﬁc software\
    \ components. The\ntradeoﬀs in using fog resources are another open research question.\n\
    6.2. IoT Architectural Layers vs. Deployment Stages\nIoTecture architectural layers\
    \ paired together with IoTinuum deployment stages provide a simple\nand unambiguous\
    \ way to bind software, hardware, and communication components to physical\ninfrastructure\
    \ in an IoT context. The physical location where a software component is executed\
    \ has\na high impact on the performance and brings diﬀerent tradeoﬀs, as revealed\
    \ by our performance\nanalysis results. IoT smart applications have their speciﬁc\
    \ characteristics and peculiarities regarding\nthe location of physical infrastructure—stages\
    \ S2-Mist, S3-Fog, and S4-Cloud—compared to traditional\nWeb-based distributed\
    \ applications.\nThere is no direct association between speciﬁc layers and stages,\
    \ even though some choices make\nfor sense than others. For example, components\
    \ from layers L2-Transport, L3-Data, L4-Model, and\neven L5-Service can be deployed\
    \ into an intermediary stage, such as conﬁgurations C1 and C2 that\nplaced L2-Transport\
    \ to L4-Model components into S3-Fog. On the other hand, all of them can be\n\
    executed in S4-Cloud, such as conﬁgurations C5 and C6. Also, if S3-Fog implements\
    \ a lightweight fog\nwith no local L4-Model, there is no way to consume data locally\
    \ from an edge device. Conﬁgurations\nbased on lightweight S3-Fog for communication\
    \ only are not able to consume data locally or decrease\napplication latency,\
    \ avoiding long internet delays. However, they can still be used for load balance\n\
    purposes. Also, we evaluated conﬁgurations where ChirpStack is deployed in S3-Fog\
    \ and S4-Cloud.\nEven though it could be installed in S2-Mist, we do not consider\
    \ it a stable solution, since the mist node\nmay not adequately fulﬁll the performance\
    \ and reliability requirements of IoT smart applications.\nApplications requiring\
    \ strict compliance with low latency—such as smart city applications—should\n\
    be designed having in mind layer L4-Service deployed in stages S2-Mist or 3S-Fog,\
    \ as data can be\nconsumed locally, thus, faster. On the other hand, for applications\
    \ with an unstable connection between\nS1-Thing and S4-Cloud—e.g., smart agriculture\
    \ applications—there is the need to store and process\ndata in an intermediary\
    \ stage, for increased uptime. Thus, such applications should have L3-Data\ncomponents\
    \ running in S2-Mist or S3-Fog. Here we presented some preliminary insights related\
    \ to the\ndeployment of layered components into staged locations, and further\
    \ research is necessary to provide\nmethods, mechanisms, algorithms, and best\
    \ practices to avoid the need of a specialist and allow an\nautomated deployment\
    \ process.\n6.3. Limitations and Future Work\nThis article does not exhaust the\
    \ subject of designing IoT architectures and using them to guide\nand support\
    \ the deployment of software, hardware, and networking components over distributed\n\
    locations. Examples of limitations of this article that are left as future work\
    \ include: (a) evaluating the\nperformance of components located in higher layers,\
    \ i.e., L4-Model and L5-Service; (b) automating\nthe deployment process, and;\
    \ (c) using diﬀerent technology sets. The performance analysis of higher\nlayer\
    \ components has not inherent challenges, though the results would be highly dependent\
    \ on\nspeciﬁc applications. On the other hand, we have already started to develop\
    \ an automated process\nfor application deployment, both for generating static\
    \ conﬁgurations at installation time, but also for\ndynamic on-the-ﬂy adaptation.\n\
    The set of IoT platforms and LPWAN technologies used in the performance analysis\
    \ study was\nﬁxed. Whereas FIWARE is a well-known IoT platform with a large user\
    \ base, other ones might reveal\ndiﬀerent results and trade-oﬀs, such as InterSCity\
    \ [60], Konker [61], and ThingsBoard [62]. As for\nLPWAN technologies, our study\
    \ only focused on LoRaWAN due to the do-it-yourself approach that\nSensors 2020,\
    \ 20, 84\n22 of 24\nfacilitates installing and using it. On the other hand, experimenting\
    \ with NB-IoT and SigFox with\na large number of sensors will require the development\
    \ of realistic emulation platforms based on\nextensive measurements with these\
    \ LPWAN technologies to capture their behaviors. Besides, other\nopen-source LoRaWAN\
    \ servers, such as the one provided by The Things Networks, could be compared\n\
    with ChirpStack.\n7. Conclusions\nAlthough IoT architectures play an essential\
    \ role in the design of distributed smart applications,\nthe development of IoT\
    \ platforms derived from these architectures and their deployment into\nreal scenarios\
    \ yield diﬀerent tradeoﬀs and thus require an improved understanding. We proposed\n\
    a layered IoT architecture (called IoTecture) whose components are mapped to stages\
    \ of an IoT\ncomputing continuum (called IoTinuum) in diﬀerent deployment conﬁgurations.\
    \ A performance\nanalysis study with six conﬁgurations revealed that diﬀerent\
    \ deployment conﬁgurations of layered\ncomponents into staged locations generate\
    \ diﬀerent hardware and software bottlenecks that aﬀect\nsystem performance and\
    \ scalability. Scalability problems that aﬀect FIWARE components under high\n\
    workloads were revealed.\nAuthor Contributions: I.Z., A.H., and D.S. designed\
    \ and conducted the experiments, collected data, and\ngenerated results. J.K.,\
    \ J.-P.S., and T.S.C. actively contributed with ideas, discussion of results,\
    \ and text revisions.\nC.K. developed the initial ideas of IoTecture and IoTinuum.\
    \ All authors contributed to the writing of this paper.\nFunding: This research\
    \ has been jointly funded by the European Commission in Europe and MCTIC/RNP in\n\
    Brazil, under the EUB-02-2017 IoT Pilots call.\nConﬂicts of Interest: The authors\
    \ declare no conﬂict of interest.\nReferences\n1.\nEricsson. Cellular Networks\
    \ for Massive IoT, White Paper, UEN 284 23-3278, January 2016. Available online:\n\
    https://www.ericsson.com/res/docs/whitepapers/wp_iot.pdf (accessed on 20 December\
    \ 2019).\n2.\nSharma, N.; Shamkuwar, M.; Singh, I. The History, Present and Future\
    \ with IoT. In Internet of Things and Big\nData Analytics for Smart Generation;\
    \ Springer: Basel, Switzerland, 2019; pp. 27–51.\n3.\nAhmed, E.; Yaqoob, I.; Gani,\
    \ A.; Imran, M.; Guizani, M. Internet-of-Things-based Smart Environments: State\n\
    of the Art, Taxonomy, and Open Research Challenges. IEEE Wirel. Commun. 2016,\
    \ 23, 10–16. [CrossRef]\n4.\nKamienski, C.; Soininen, J.-P.; Taumberger, M.; Dantas,\
    \ R.; Toscano, A.; Salmon Cinotti, T.; Filev Maia, R.;\nTorre Neto, A. Smart Water\
    \ Management Platform: IoT-Based Precision Irrigation for Agriculture. Sensors\n\
    2019, 19, 276. [CrossRef] [PubMed]\n5.\nTzounis, A.; Katsoulas, N.; Bartzanas,\
    \ T.; Kittas, C. Internet of Things in Agriculture, Recent Advances and\nFuture\
    \ Challenges. Biosyst. Eng. 2017, 164, 31–48. [CrossRef]\n6.\nDel Esposte, A.;\
    \ Kon, F.; Costa, F.; Lago, N. InterSCity: A Scalable Microservice-Based Open\
    \ Source Platform\nfor Smart Cities. In Proceedings of the 6th International Conference\
    \ on Smart Cities and Green ICT Systems,\nPorto, Portugal, 22–24 April 2017.\n\
    7.\nZanella, A.; Bui, N.; Castellani, A.; Vangelista, L.; Zorzi, M. Internet of\
    \ Things for Smart Cities. IEEE Internet\nThings J. 2014, 1, 22–32. [CrossRef]\n\
    8.\nIslam, S.; Kwak, D.; Kabir, M.; Hossain, M.; Kwak, K. The Internet of Things\
    \ for Health Care: A Comprehensive\nSurvey. IEEE Access 2015, 3, 678–708. [CrossRef]\n\
    9.\nWollschlaeger, M.; Sauter, T.; Jasperneite, J. The Future of Industrial Communication:\
    \ Automation Networks\nin the Era of the Internet of Things and Industry 4.0.\
    \ IEEE Ind. Electron. Mag. 2017, 11, 17–27. [CrossRef]\n10.\nYun, M.; Yuxin, B.\
    \ Research on the Architecture and Key Technology of Internet of Things (IoT)\
    \ Applied on\nSmart Grid. In Proceedings of the IEEE 2010 International Conference\
    \ on Advances in Energy Engineering,\nBeijing, China, 19–20 June 2010.\n11.\n\
    Guth, J.; Breitenbücher, U.; Falkenthal, M.; Leymann, F.; Reinfurt, L. Comparison\
    \ of IoT Platform Architectures:\nA Field Study Based on a Reference Architecture.\
    \ In Proceedings of the 2016 IEEE Cloudiﬁcation of the\nInternet of Things (CIoT),\
    \ Paris, France, 23–25 November 2016.\nSensors 2020, 20, 84\n23 of 24\n12.\nOmoniwa,\
    \ B.; Hussain, R.; Javed, M.A.; Bouk, S.H.; Malik, S.A. Fog/Edge Computing-based\
    \ IoT (FECIoT):\nArchitecture, Applications, and Research Issues. IEEE Internet\
    \ Things J. 2019, 6, 4118–4149. [CrossRef]\n13.\nKhan, R.; Khan, S.U.; Zaheer,\
    \ R.; Khan, S. Future Internet: The Internet of Things Architecture, Possible\n\
    Applications and Key Challenges. In Proceedings of the IEEE 10th International\
    \ Conference on Frontiers of\nInformation Technology, Islamabad, Pakistan, 17–19\
    \ December 2012.\n14.\nMashal, I.; Alsaryrah, O.; Chung, T.Y.; Yang, C.Z.; Kuo,\
    \ W.H.; Agrawal, D.P. Choices for interaction with\nthings on Internet and underlying\
    \ issues. Ad Hoc Netw. 2015, 28, 68–90. [CrossRef]\n15.\nBellavista, P.; Corradi,\
    \ A.; Foschini, L.; Scotece, D. Diﬀerentiated Service/Data Migration for Edge\
    \ Services\nLeveraging Container Characteristics. IEEE Access 2019, 7, 139746–139758.\
    \ [CrossRef]\n16.\nMekki, K.; Bajic, E.; Chaxel, F.; Meyer, F. A comparative study\
    \ of LPWAN technologies for large-scale IoT\ndeployment. ICT Express 2019, 5,\
    \ 1–7. [CrossRef]\n17.\nLoRa Alliance Technical Committee, 2017, LoRaWAN 1.1 Speciﬁcation,\
    \ October 2017. Available online:\nhttps://lora-alliance.org/resource-hub/lorawantm-speciﬁcation-v11\
    \ (accessed on 13 September 2019).\n18.\nClements, P. Documenting Software Architectures:\
    \ Views and Beyond, 2nd ed.; Addison-Wesley: Boston, MA,\nUSA, 2010.\n19.\nda\
    \ Cruz, M.A.; Rodrigues, J.J.; Sangaiah, A.K.; Al-Muhtadi, J.; Korotaev, V. Performance\
    \ Evaluation of IoT\nMiddleware. J. Netw. Comput. Appl. 2018, 109, 53–65. [CrossRef]\n\
    20.\nYaqoob, I.; Ahmed, E.; Hashem, I.; Ahmed, A.; Gani, A.; Imran, M.; Guizani,\
    \ M. Internet of Things\nArchitecture: Recent Advances, Taxonomy, Requirements,\
    \ and Open Challenges. IEEE Wirel. Commun. 2017,\n24, 10–16. [CrossRef]\n21.\n\
    Asif-Ur-Rahman, M.; Afsana, F.; Mahmud, M.; Kaiser, M.S.; Ahmed, M.R.; Kaiwartya,\
    \ O.; James-Taylor, A.\nToward a Heterogeneous Mist, Fog, and Cloud based Framework\
    \ for the Internet of Healthcare Things.\nIEEE Internet Things J. 2019, 6, 4049–4062.\
    \ [CrossRef]\n22.\nSingh, K.; Kapoor, D. Create Your Own Internet of Things: A\
    \ Survey of IoT Platforms. IEEE Consum. Electron.\nMag. 2017, 6, 57–68. [CrossRef]\n\
    23.\nRazzaque, M.; Milojevic-Jevric, M.; Palade, A.; Clarke, S. Middleware for\
    \ Internet of Things: A Survey.\nIEEE Internet Things J. 2016, 3, 70–95. [CrossRef]\n\
    24.\nHejazi, H.; Rajab, H.; Cinkler, T.; Lengyel, L. Survey of Platforms for Massive\
    \ IoT. In Proceedings of the 2018\nIEEE International Conference on Future IoT\
    \ Technologies (Future IoT), Eger, Hungary, 18–19 January 2018.\n25.\nBroring,\
    \ A.; Schmid, S.; Schindhelm, C.-K.; Khelil, A.; Kabisch, S.; Kramer, D.; Le Phuoc,\
    \ D.; Mitic, J.;\nAnicic, D.; Teniente, E. Enabling IoT Ecosystems through Platform\
    \ Interoperability. IEEE Softw. 2017, 34,\n54–61. [CrossRef]\n26.\nFrustaci, M.;\
    \ Pace, P.; Aloi, G.; Fortino, G. Evaluating Critical Security Issues of the IoT\
    \ World: Present and\nFuture Challenges. IEEE Internet Things J. 2018, 5, 2483–2495.\
    \ [CrossRef]\n27.\nKouicem, D.E.; Bouabdallah, A.; Lakhlef, H. Internet of things\
    \ security: A top-down survey. Comput. Netw.\n2018, 141, 199–221. [CrossRef]\n\
    28.\nFIWARE. FIWARE Open Source Platform. Available online: www.ﬁware.org (accessed\
    \ on 5 December 2019).\n29.\nOpen Mobile Alliance. NGSI Requirements, OMA-RD-NGSI-V1_0.\
    \ Available online:\nhttp://www.\nopenmobilealliance.org (accessed on 20 December\
    \ 2019).\n30.\nFIWARE Ultralight 2.0 Protocol. Available online: http://ﬁware-iotagent-ul.rtfd.io\
    \ (accessed on 20 December\n2019).\n31.\nGozalvez, J. New 3GPP standard for IoT.\
    \ IEEE Veh. Technol. Mag. 2016, 11, 14–20. [CrossRef]\n32.\nSigfox. Available\
    \ online: http://sigfox.com (accessed on 20 December 2019).\n33.\nLoRa Alliance.\
    \ Available online: http://lora-alliance.org, (accessed on 20 December 2019).\n\
    34.\nChirpStack. Available online: https://www.chirpstack.io (accessed on 16 December\
    \ 2019).\n35.\nThe Things Network. Available online: http://thethingsnetwork.org\
    \ (accessed on 20 December 2019).\n36.\nLoriot. Available online: http://loriot.io\
    \ (accessed on 20 December 2019).\n37.\nBonomi, F.; Milito, R.; Natarajan, P.;\
    \ Zhu, J. Fog computing: A platform for Internet of Things and analytics.\nIn\
    \ Big Data and Internet of Things: A Roadmap for Smart Environments; Springer:\
    \ Cham, Switzerland, 2014.\n38.\nMukherjee, M.; Shu, L.; Wang, D. Survey of Fog\
    \ Computing: Fundamental, Network Applications, and\nResearch Challenges. IEEE\
    \ Commun. Surv. Tutor. 2018, 20, 1826–1857. [CrossRef]\n39.\nAazam, M.; Huh, E.-N.\
    \ Fog Computing: The Cloud-IoT/IoE Middleware Paradigm. IEEE Potentials 2016,\
    \ 35,\n40–44. [CrossRef]\nSensors 2020, 20, 84\n24 of 24\n40.\nShi, W.; Cao, J.;\
    \ Zhang, Q.; Li, Y.; Xu, L. Edge computing: Vision and challenges. IEEE Internet\
    \ Things J. 2016,\n3, 637–646. [CrossRef]\n41.\nYogi, M.K.; Chandrasekhar, K.;\
    \ Kumar, G.V. Mist computing: Principles, trends and future direction. SSRG\n\
    Int. J. Comput. Sci. Eng. 2017, 4. [CrossRef]\n42.\nBormann, C.; Ersue, M.; Keranen,\
    \ A.; Gomez, C. Terminology for Constrained-Node Networks.\nIn Internet-Draft,\
    \ Draft-Bormann-Lwig-7228bis-05; IETF: Fremont, CA, USA, 2019.\n43.\nKleinschmidt,\
    \ J.H.; Kamienski, C.; Prati, R.C.; Kolehmainen, K.; Aguzzi, C. End-to-End Security\
    \ in the\nIoT Computing Continuum: Perspectives in the SWAMP Project. In Proceedings\
    \ of the 1st Workshop on\nValidation and Veriﬁcation in Future Cyber-Physical\
    \ Systems (WAFERS), Natal, Brazil, 19 November 2019.\n44.\nBabovic, Z.; Protic,\
    \ J.; Milutinovic, V. Web Performance Evaluation for Internet of Things Applications.\n\
    IEEE Access 2016, 4, 6974–6992. [CrossRef]\n45.\nMiao, Y.; Li, W.; Tian, D.; Hossain,\
    \ M.; Alhamid, M. Narrowband Internet of Things: Simulation and\nModeling. IEEE\
    \ Internet Things J. 2018, 5, 2304–2314. [CrossRef]\n46.\nMartínez, R.; Pastor,\
    \ J.Á.; Álvarez, B.; Iborra, A. A Testbed to Evaluate the FIWARE-based IoT Platform\
    \ in\nthe Domain of Precision Agriculture. Sensors 2016, 16, 1979. [CrossRef]\
    \ [PubMed]\n47.\nBittencourt, L.; Immich, R.; Sakellariou, R.; Fonseca, N.; Madeira,\
    \ E.; Curado, M.; Villas, L.; DaSilva, L.;\nLee, C.; Rana, O. The Internet of\
    \ Things, Fog and Cloud continuum: Integration and challenges. Internet\nThings\
    \ 2018, 3–4, 134–155. [CrossRef]\n48.\nZyrianoﬀ, I.; Heideker, A.; Silva, D.;\
    \ Kamienski, C. Scalability of an Internet of Things Platform for Smart\nWater\
    \ Management for Agriculture. In Proceedings of the Workshop on Advances in IoT\
    \ Based Methods for\nSmart Water Distribution and Management in Agriculture (IMSA\
    \ 2018), Bologna, Italy, 13–16 November\n2018.\n49.\nKamienski, C.; Jentsch, M.;\
    \ Eisenhauer, M.; Kiljander, J.; Ferrera, E.; Rosengren, P.; Thestrup, J.; Souto,\
    \ E.;\nAndrade, W.; Sadok, D. Application Development for the Internet of Things:\
    \ A Context-Aware Mixed\nCriticality Systems Development Platform. Comput. Commun.\
    \ 2017, 104, 1–16. [CrossRef]\n50.\nOASIS. MQTT Version 5.0. OASIS Committee Speciﬁcation\
    \ 02. May 2018. Available online: http://docs.oasis-\nopen.org/mqtt/mqtt/v5.0/cs02/mqtt-v5.0-cs02.pdf\
    \ (accessed on 17 September 2019).\n51.\nFIWARE, Orion Context Broker. Available\
    \ online: http://ﬁware-orion.rtfd.io (accessed on 20 December 2019).\n52.\nApache\
    \ Kafka. Available online: http://kafka.apache.org (accessed on 20 December 2019).\n\
    53.\nApache Spark. Available online: http://spark.apache.org (accessed on 20 December\
    \ 2019).\n54.\nCrateDB. Available online: http://crate.io (accessed on 20 December\
    \ 2019).\n55.\nFarrell, S. Low-Power Wide Area Network (LPWAN) Overview. In Internet\
    \ RFC 8376; Internet Engineering\nTask Force: Fremont, CA, USA, 2018.\n56.\nZyrianoﬀ,\
    \ I. SenSE—Sensor Simulation Environment. 2017, GitHub Repository. Available online:\
    \ https:\n//github.com/ivanzy/SenSE-Sensor-Simulation-Environment (accessed on\
    \ 16 September 2019).\n57.\nKalitay, H.K.; Nambiarz, M.K. Designing WANem: A Wide\
    \ Area Network Emulator Tool. In Proceedings\nof the 3rd IEEE International Conference\
    \ on Communication Systems and Networks (COMSNETS 2011),\nHonolulu, HI, USA, 18\
    \ January 2011.\n58.\nZyrianoﬀ, I.; Borelli, F.; Biondi, G.; Heideker, A.; Kamienski,\
    \ C. Scalability of Real-Time IoT-Based Applications\nfor Smart Cities. In Proceedings\
    \ of the IEEE Symposium on Computers and Communications (ISCC 2018),\nNatal, Brazil,\
    \ 25–28 June 2018.\n59.\nLight, R.A. Mosquitto: Server and client implementation\
    \ of the MQTT protocol. J. Open Source Softw. 2017, 2.\n[CrossRef]\n60.\nInterSCity.\
    \ Available online: http://interscity.org (accessed on 20 December 2019).\n61.\n\
    Konker. Available online: http://konkerlabs.com (accessed on 20 December 2019).\n\
    62.\nThingsBoard. Available online: http://thingsboard.io (accessed on 20 December\
    \ 2019).\n© 2019 by the authors. Licensee MDPI, Basel, Switzerland. This article\
    \ is an open access\narticle distributed under the terms and conditions of the\
    \ Creative Commons Attribution\n(CC BY) license (http://creativecommons.org/licenses/by/4.0/).\n"
  inline_citation: Zyrianoﬀ et al. 2020
  journal: Sensors
  limitations: 'Examples of limitations of this article that are left as future work
    include: (a) evaluating the performance of components located in higher layers,
    i.e., L4-Model and L5-Service; (b) automating the deployment process, and; (c)
    using different technology sets. The performance analysis of higher layer components
    has not inherent challenges, though the results would be highly dependent on specific
    applications. On the other hand, we have already started to develop an automated
    process for application deployment, both for generating static configurations
    at installation time, but also for dynamic on-the-ﬂy adaptation.

    The set of IoT platforms and LPWAN technologies used in the performance analysis
    study was fixed. Whereas FIWARE is a well-known IoT platform with a large user
    base, other ones might reveal different results and trade-oﬀs, such as InterSCity
    [60], Konker [61], and ThingsBoard [62]. As for LPWAN technologies, our study
    only focused on LoRaWAN due to the do-it-yourself approach that facilitates installing
    and using it.'
  pdf_link: https://www.mdpi.com/1424-8220/20/1/84/pdf?version=1577152116
  point_content: Different data types (e.g., soil moisture, canopy temperature, weather)
    and their collection and use
  publication_year: 2019
  relevance_score: 0.7991596638655462
  relevance_score1: 0
  relevance_score2: 0
  title: 'Architecting and Deploying IoT Smart Applications: A Performance–Oriented
    Approach'
  verbatim_quote1: This behavior comes from the ChirpStack processing time, present
    in C1 and absent in C2. For applications that require lower response times-like
    a Smart City scenario–the LoRaWAN 200 ms processing time might be unacceptable,
    which can make a case for a more straightforward LPWAN solution.
  verbatim_quote2: The crash of the IoT Agent in S3-Fog is instead a consequence of
    another performance bottleneck located at S4-Cloud. The service time of the IoT
    Agent is shorter than the joint service time of Orion and MongoDB so that the
    former queues messages waiting for HTTP REST requests to be answered by the latter.
    In other words, the IoT Agent waits for a TCP ACK packet to free the memory allocated
    for the messages.
  verbatim_quote3: '>'
- DOI: https://doi.org/10.3390/s19153287
  analysis: Ray Launching, also known as ray tracing, is a deterministic approach
    that models radio wave propagation by considering the interactions (reﬂections,
    refractions, and diffractions) of rays with environmental elements. The use of
    this deterministic approach in the design and planning of wireless networks requires
    the creation of the represented scenario where all the obstacles are included.
    This process of creation is a demanding task in large-scale and complex environments
    like the one presented in this paper, since the scenario must be accurate to obtain
    valid results. This paper conducts the validation of the developed 3D Ray-Launching
    simulation tool to evaluate LoRaWAN performance in a real campus scenario using
    two different environments to compare the simulation results with the measurements.
  authors:
  - Paula Fraga‐Lamas
  - Mikel Celaya-Echarri
  - Peio López-Iturri
  - Luis Castedo
  - Leyre Azpilicueta
  - Erik Aguirre
  - Manuel Suárez-Albela
  - Francisco Falcone
  - Tiago M. Fernández‐Caramés
  citation_count: 49
  full_citation: Design and Experimental Validation of a LoRaWAN Fog Computing Based
    Architecture for IoT Enabled Smart Campus Applications
  full_text: ">\nsensors\nArticle\nDesign and Experimental Validation of a LoRaWAN\n\
    Fog Computing Based Architecture for\nIoT Enabled Smart Campus Applications †\n\
    Paula Fraga-Lamas 1,*\n, Mikel Celaya-Echarri 2\n, Peio Lopez-Iturri 3,4\n, Luis\
    \ Castedo 1\n,\nLeyre Azpilicueta 2\n, Erik Aguirre 3\n, Manuel Suárez-Albela\
    \ 1\n, Francisco Falcone 3,4\nand\nTiago M. Fernández-Caramés 1,*\n1\nDepartment\
    \ of Computer Engineering, Faculty of Computer Science, Centro de investigación\
    \ CITIC,\nUniversidade da Coruña, 15071 A Coruña, Spain\n2\nSchool of Engineering\
    \ and Sciences, Tecnologico de Monterrey, 64849 Monterrey, NL, Mexico\n3\nDepartment\
    \ of Electric, Electronic and Communication Engineering, Public University of\
    \ Navarre,\n31006 Pamplona, Spain\n4\nInstitute for Smart Cities, Public University\
    \ of Navarre, 31006 Pamplona, Spain\n*\nCorrespondence: paula.fraga@udc.es (P.F.-L.);\
    \ tiago.fernandez@udc.es (T.M.F.-C.);\nTel.: +34-981-167-000 (ext. 6051) (P.F.-L.)\n\
    †\nThis paper is an extended version of our paper published in Fraga-Lamas, P.;\
    \ Celaya-Echarri, M.;\nLopez-Iturri, P.; Fernández-Caramés, T.M.; Azpilicueta,\
    \ L.; Aguirre, E.; Suárez-Albela, M.; Falcone, F.;\nCastedo, L. Analysis, Design\
    \ and Empirical Validation of a Smart Campus based on LoRaWAN.\nIn Proceedings\
    \ of the 5th International Electronic Conference on Sensors and Applications,\n\
    15–30 November 2018.\nReceived: 28 June 2019; Accepted: 23 July 2019; Published:\
    \ 26 July 2019\n\x01\x02\x03\x01\x04\x05\x06\a\b\x01\n\x01\x02\x03\x04\x05\x06\
    \a\nAbstract:\nA smart campus is an intelligent infrastructure where smart sensors\
    \ and actuators\ncollaborate to collect information and interact with the machines,\
    \ tools, and users of a university\ncampus. As in a smart city, a smart campus\
    \ represents a challenging scenario for Internet of Things\n(IoT) networks, especially\
    \ in terms of cost, coverage, availability, latency, power consumption, and\n\
    scalability. The technologies employed so far to cope with such a scenario are\
    \ not yet able to\nmanage simultaneously all the previously mentioned demanding\
    \ requirements. Nevertheless, recent\nparadigms such as fog computing, which extends\
    \ cloud computing to the edge of a network, make\npossible low-latency and location-aware\
    \ IoT applications. Moreover, technologies such as Low-Power\nWide-Area Networks\
    \ (LPWANs) have emerged as a promising solution to provide low-cost and\nlow-power\
    \ consumption connectivity to nodes spread throughout a wide area. Speciﬁcally,\
    \ the\nLong-Range Wide-Area Network (LoRaWAN) standard is one of the most recent\
    \ developments,\nreceiving attention both from industry and academia. In this\
    \ article, the use of a LoRaWAN fog\ncomputing-based architecture is proposed\
    \ for providing connectivity to IoT nodes deployed in\na campus of the University\
    \ of A Coruña (UDC), Spain. To validate the proposed system, the\nsmart campus\
    \ has been recreated realistically through an in-house developed 3D Ray-Launching\n\
    radio-planning simulator that is able to take into consideration even small details,\
    \ such as trafﬁc lights,\nvehicles, people, buildings, urban furniture, or vegetation.\
    \ The developed tool can provide accurate\nradio propagation estimations within\
    \ the smart campus scenario in terms of coverage, capacity, and\nenergy efﬁciency\
    \ of the network. The results obtained with the planning simulator can then be\n\
    compared with empirical measurements to assess the operating conditions and the\
    \ system accuracy.\nSpeciﬁcally, this article presents experiments that show the\
    \ accurate results obtained by the planning\nsimulator in the largest scenario\
    \ ever built for it (a campus that covers an area of 26,000 m2), which are\ncorroborated\
    \ with empirical measurements. Then, how the tool can be used to design the deployment\n\
    of LoRaWAN infrastructure for three smart campus outdoor applications is explained:\
    \ a mobility\npattern detection system, a smart irrigation solution, and a smart\
    \ trafﬁc-monitoring deployment.\nSensors 2019, 19, 3287; doi:10.3390/s19153287\n\
    www.mdpi.com/journal/sensors\nSensors 2019, 19, 3287\n2 of 30\nConsequently, the\
    \ presented results provide guidelines to smart campus designers and developers,\n\
    and for easing LoRaWAN network deployment and research in other smart campuses\
    \ and large\nenvironments such as smart cities.\nKeywords: IoT; smart campus;\
    \ sustainability; fog computing; outdoor applications; LPWAN;\nLoRaWAN; 3D Ray-Launching;\
    \ smart cities; Wireless Sensor Networks (WSN)\n1. Introduction\nA smart campus\
    \ is an infrastructure similar to a smart city that makes use of Internet of Things\n\
    (IoT) solutions [1–6] to connect, monitor, control, optimize, and automate the\
    \ systems of a university.\nToday, a smart campus represents a challenging scenario\
    \ for IoT networks, especially in terms cost,\ncoverage, availability, latency,\
    \ security, power consumption, and scalability.\nThe area covered by a campus\
    \ varies substantially depending on the university, its location,\nthe ﬁnancial\
    \ endowment, and the year of founding. For example, Berry College (Floyd County,\n\
    Georgia, United States), is often considered the largest contiguous rural campus\
    \ in the world: it covers\n27,000 acres (109.26 km2) [7] of land. Other examples\
    \ are the suburban/urban campuses of Duke\nUniversity (Durham, NC, USA), which\
    \ are deployed on 9350 acres (37.83 km2) [8], and the campus\nof Stanford University\
    \ (Stanford, CA, USA), which covers 8180 acres (33 km2) [9]. Regardless of\ntheir\
    \ initial surface area, it is common that campuses grow considerably as time goes\
    \ by [10], hence\ninstitutions usually devise long-term sustainability plans to\
    \ envision their growth in the future [11–13].\nWhen a campus provides smart IoT\
    \ services, it is necessary to provide communications\nconnectivity to IoT nodes\
    \ and gateways. Such a connectivity can be provided in a quite straightforward\n\
    way indoors thanks to the use of popular technologies such as Wi-Fi, but, outdoors,\
    \ technology selection\nbecomes more complex, since it is not only necessary to\
    \ provide good coverage and a cost-effective\ndeployment, but also to decrease\
    \ the communications energy consumption to maximize IoT node\nbattery life.\n\
    To tackle such an issue in wide areas, a set of technologies grouped under the\
    \ term Low-Power\nWide Area Network (LPWAN) seem to be a good selection, since,\
    \ in comparison to other previous\ntechnologies, they provide a wider area communications\
    \ range and reduced energy consumption.\nIn fact, LPWAN technologies have emerged\
    \ as an enabling technology for IoT and Machine-to-Machine\n(M2M) communications\
    \ [14] mainly due to their capabilities related to range, cost, power consumption,\n\
    and capacity. Examples of such technologies are NB-IoT [15], SigFox [16], Ingenu\
    \ [17], Weightless [18]\nor LoRaWAN [19] (a detailed comparison of these and other\
    \ LPWAN technologies is given later\nin Section 2.2).\nIn the case of LoRaWAN,\
    \ it is gaining momentum from both industry and academia [20–22].\nLoRaWAN deﬁnes\
    \ a communications protocol and a system architecture for the network. In addition,\n\
    it uses LoRa for its physical layer [23], which is able to create long-range communications\
    \ links\nand makes use of a Chirp Spread Spectrum (CSS) modulation that conserves\
    \ the power features\nof Frequency Shifting Keying (FSK) while increasing its\
    \ communications range. All these features\nmake LoRaWAN a good candidate for\
    \ providing wireless communications to outdoor IoT nodes in a\nsmart campus.\n\
    Traditionally, gateways connect the IoT nodes with the cloud and among them. The\
    \ cloud\nis basically one or more servers with large computational power, communication,\
    \ and storing\ncapabilities that receives, processes, and analyzes the data collected\
    \ from the IoT nodes by performing\ncomputational-intensive tasks. Although cloud-based\
    \ solutions are appropriate at a small scale, when\nthe number of IoT nodes grows\
    \ signiﬁcantly and, consequently, the network trafﬁc they generate,\ncongestion\
    \ may lead to increasing latency responses and slower data processing. Among the\
    \ different\nalternatives to confront this challenge and to guarantee a ﬂexible,\
    \ scalable, robust, secure, and\nSensors 2019, 19, 3287\n3 of 30\nenergy-efﬁcient\
    \ deployment of IoT networks, the design and implementation of a fog computing\n\
    architecture was chosen. Fog computing supports physically distributed, low-latency\
    \ (e.g., real-time\nor quasi real-time responses) and location-aware applications\
    \ that decrease the network trafﬁc and\nthe computational load of traditional\
    \ cloud computing systems by processing in the IoT nodes most\nof the data generated\
    \ by their sensors and actuators and unburdening the higher layers from data\n\
    processing [24].\nFurthermore, when designing a smart campus, it is necessary\
    \ to plan how LoRaWAN gateways\nand nodes are deployed to guarantee good IoT node\
    \ coverage while minimizing the number of\ngateways (i.e., minimizing the smart\
    \ campus communications infrastructure cost). The problem is that\nthere are only\
    \ a few examples of academic and commercial tools that create such a planning\
    \ [25,26], so\ndevelopers have to adapt tools previously optimized for other technologies\
    \ (e.g., Wi-Fi [27]) or have to\ncarry out tedious empirical measurements throughout\
    \ the campus [28,29].\nThis article confronts the mentioned challenges by designing\
    \ and implementing a cost-efﬁcient,\nscalable, and low-power consumption LoRaWAN\
    \ fog computing-based architecture for wide areas.\nSpeciﬁcally, the system was\
    \ designed with the aim of developing novel latency-sensitive IoT outdoor\napplications\
    \ that create more sustainable and intelligent campuses. The following are the\
    \ main\ncontributions of the article, which as of writing, have not been found\
    \ together in the literature:\n•\nTo establish the basics, it presents the main\
    \ characteristics of the so-called smart campuses\ntogether with a detailed review\
    \ of the state of the art of the main and the latest communications\narchitectures\
    \ and technologies, previous academic deployments, novel potential LPWAN\napplications\
    \ and relevant tools for radio propagation modeling and planning.\n•\nIt thoroughly\
    \ details the design, implementation, and practical evaluation of a scalable\n\
    LPWAN-based communications architecture for supporting the smart campus IoT applications.\n\
    •\nThe article presents the 3D modeling of a real 26,000 m2 campus whose LoRaWAN\
    \ wireless\npropagation characteristics are evaluated with an in-house developed\
    \ 3D Ray-launching\nradio-planning simulator. The results obtained by such a simulator\
    \ are validated by comparing\nthem with empirical LoRaWAN measurements obtained\
    \ throughout the campus.\n•\nIt details how the radio-planning tool can be used\
    \ to design the deployment of LoRaWAN\ninfrastructure for three smart campus applications:\
    \ a mobility pattern detection system, a smart\nirrigation solution, and a smart\
    \ trafﬁc-monitoring deployment.\nThus, it demonstrates the\nusefulness of the\
    \ proposed tools and methodology, which are able to provide fast guidelines to\n\
    smart campus designers and developers, and that can also be used for easing LoRaWAN\
    \ network\ndeployment and research in other large environments such as smart cities.\n\
    The rest of this article is structured as follows. Section 2 reviews the state\
    \ of the art on smart\ncampuses: their characteristics, technologies, architectures,\
    \ previous relevant deployments, potential\napplications, and the previous work\
    \ on modeling and planning a smart campus. Section 3 details the\narchitecture\
    \ of the proposed system and the characteristics of the LoRaWAN testbed implementation.\n\
    Section 4 describes the proposed planning simulator and the analyzed scenario.\
    \ Section 5 is dedicated\nto the experiments. Finally, Section 6 presents the\
    \ main discussion on the lessons learned from these\nexperiences, while Section\
    \ 7 is devoted to the conclusions.\n2. Related Work\n2.1. Characteristics of a\
    \ Smart Campus\nIt is ﬁrst important to note that in the literature, some authors\
    \ use the term smart campus to refer\nto digital online platforms to manage learning\
    \ content [30,31] or to strategies or solutions to increase\nthe smartness of\
    \ the students [32–34]. In this article, the term smart campus is used for referring\
    \ to the\nhardware infrastructure and software that provides smart services and\
    \ applications to the campus\nusers (i.e., to students and to the university staff).\
    \ In this regard, a smart campus, such as a smart city,\ncan be modeled along\
    \ six different smart ﬁelds [35]:\nSensors 2019, 19, 3287\n4 of 30\n•\nSmart governance.\
    \ It provides users with mechanisms to participate in decision-making or in\n\
    public services.\n•\nSmart people. It deals with social issues, including the\
    \ engagement in campus events and\nlearning activities.\n•\nSmart mobility. This\
    \ ﬁeld is related to the accessibility of the campus, including the use of efﬁcient,\n\
    clean, safe, and intelligent transport means.\n•\nSmart environment. It contemplates\
    \ the monitoring and protection of the environment, as well as\nthe sustainable\
    \ management of the available resources.\n•\nSmart living. The technologies used\
    \ in these ﬁelds can monitor diverse living aspects in the\ncampus facilities,\
    \ such as personal safety [36], health [37] or crowd sensing [38].\n•\nSmart economy.\
    \ It is related to the competitiveness of the campus in terms of entrepreneurship,\n\
    innovation, or productivity.\nThese smart campus ﬁelds can be further reﬁned to\
    \ determine speciﬁc smart services and solutions\nthat should be ideally provided\
    \ by a smart campus [39]:\n•\nSmart living services:\nroom occupation, classroom/lab\
    \ equipment access control, health\nmonitoring and alert services, classroom attendance\
    \ systems, teaching interaction services, or\ncontext-aware applications (e.g.,\
    \ guidance or navigation solutions).\n•\nSmart environment solutions: they include\
    \ solutions for monitoring waste, water consumption,\nair quality (e.g., pollution)\
    \ or the status of the campus green areas.\n•\nSmart energy systems: they control\
    \ and monitor the production, distribution, and consumption\nof energy in a campus.\n\
    These novel smart services and solutions make use of a growing number of enabling\
    \ technologies,\nbeing the most relevant represented in Figure 1.\n \nSmart\n\
    campus\n \n \nSmart mobility, \nITS \n \n \nSmart \nbuildings \n \n \n \nSmart\n\
    payments \n \n \n \nSmart cities \n \nSmart  \nconsumption \n \n \nUser  \nprofiling \n\
     \n \nContext­aware \napplications \n \n \nClassroom \natendance \n \nInfrastructure \n\
    monitoring \n \nHealth \nmonitoring \n \n \nSmart  \n governance \nCloud and  \n\
    edge \n computing Integration  \nsystems \nSimulation\nsoftware \nBlockchain\n\
    Artificial \nintelligence \nAugmented\nand virtual\nreality \nUAVs,\nautonomous\n\
    vehicles \nCybersecurity\nCyber­physical\nsystems\nIoT\n \nSmart energy, \nsmart grid \n\
    Figure 1. Most relevant enabling technologies and applications in a smart campus.\n\
    Sensors 2019, 19, 3287\n5 of 30\n2.2. Smart Campus Communications Architectures\
    \ and Technologies\nIn the literature, different approaches to smart campus architectures\
    \ can be found, but it seems\nthat two main paradigms drive clearly the most popular\
    \ designs: IoT and cloud computing [40].\nFor instance, a cloud-based smart campus\
    \ architecture is presented in [41]. In such a work the authors\nstate that they\
    \ were able to build their smart campus platform within three months thanks to\
    \ the use of\nCommercial Off-The-Shelf (COTS) hardware and Microsoft Azure cloud\
    \ services. Regarding IoT, it has\nbeen suggested as a tool to be considered in\
    \ the architecture of a smart campus to ease the development\nof learning applications,\
    \ access control systems, smart grids or water management systems [42,43].\nNonetheless,\
    \ cloud computing and IoT solutions are often helped by Big Data techniques and\
    \ Service\nOriented Architecture (SOA) architectures, since they ease the processing\
    \ and analysis of the collected\ndata [44,45].\nSome authors have suggested alternative\
    \ paradigms for developing smart campuses. For example,\nin [46] a sort of opportunistic\
    \ communications architecture called Floating Content is proposed that\nshares\
    \ data through infrastructure-less services. The idea is essentially based on\
    \ the ability of each\nFloating Content node to produce information that is shared\
    \ with the interested users within a limited\nphysical area. Other researchers\
    \ propose similar architectures, but including enhancements in aspects\nsuch as\
    \ security [47].\nOther proposals revolve around the application of the Edge Computing\
    \ paradigm and its\nsub-types (e.g., Mobile Edge Computing, Fog Computing), which\
    \ have been previously applied\nto other ﬁelds [48,49]. Essentially, Edge Computing\
    \ ofﬂoads the cloud from a relevant amount of\nprocessing and communications transactions,\
    \ delegating such tasks to devices that are closer to the IoT\nnodes. In this\
    \ way, such edge devices not only ofﬂoad the cloud, but are also able to reduce\
    \ latency\nresponse and provide location-aware services [50]. For example, in\
    \ [51] the authors propose to enhance\na smart campus architecture by including\
    \ Edge Computing devices to provide trustworthy content\ncaching and bandwidth\
    \ allocation services to mobile users. Similarly, the authors of [52] harness\n\
    street lighting to embed Edge Computing node hardware to provide different smart\
    \ campus services.\nThe Mobile Edge Computing paradigm is used in [53], where\
    \ the authors present a smart campus\nplatform called WiCloud whose servers are\
    \ accessed through mobile phone base stations or wireless\naccess points. Furthermore,\
    \ other authors propose the use of fog computing nodes to improve user\nexperience\
    \ [54].\nDifferent wireless technologies have been used to interconnect IoT nodes\
    \ with smart campus\nplatforms. For instance, BLE and ZigBee were used in [41]\
    \ to provide both short and medium range\ncommunications, although ZigBee nodes\
    \ can be used as relays to cover very long distances. For this\nlatter reason,\
    \ in [55] the authors make use of a ZigBee mesh network to interconnect the nodes\
    \ of their\ncampus smart grid.\nWi-Fi has also been suggested for providing connectivity\
    \ [56], although the proposed applications\nare usually restricted to indoor locations\
    \ and nearby places. Bluetooth beacons give more freedom to\ncertain outdoor applications\
    \ [57], but they require deploying dense networks that may be difﬁcult to\nmanage\
    \ [58].\nMobile phone communications technologies (2G/3G/4G) have also been used\
    \ in the literature [59],\nbut in most cases just for the convenience of being\
    \ already embedded into smartphones. 5G is currently\nstill being tested, but\
    \ some researchers have already proposed its use for providing fast communications\n\
    and low-latency responses to smart campus platforms [60].\nAlthough 5G technologies\
    \ seem to have a bright future, as of writing, LPWANs are arguably\none of the\
    \ best alternatives for providing long-range and low-power communications. There\
    \ are\ndifferent LPWAN technologies such as SigFox [16], Random Phase Multiple\
    \ Access (RPMA) [17],\nWeightless [18], NB-IoT [15], Telensa [61] or NB-Fi [62].\
    \ Among such technologies, NB-IoT, SigFox and\nLoRa/LoRaWAN are currently the\
    \ most popular (their main characteristics are shown in Table 1).\nSensors 2019,\
    \ 19, 3287\n6 of 30\nTable 1. Comparison of the three most popular LPWAN technologies.\n\
    Technology\nOperating\nFrequency\nModulation Maximum\nRange\nSpeed\nMax. Payload\n\
    Bandwidth\nMain\nCharacteristics\nNB-IoT\nLTE in-band,\nguard-band\nQPSK\n<35\
    \ km\n<250 kbit/s 1500 bytes\n180 kHz\nLow power\nand wide-area\ncoverage\nSigFox\n\
    868–902 MHz\nDBPSK\n50 km\n100 kbit/s\n12 bytes\n0.1 kHz\nGlobal cellular\nnetwork\n\
    LoRa,\nLoRaWAN\nDiverse UHF ISM\n(Industrial, Scientiﬁc,\nMedical) bands (e.g.,\n\
    863–870 MHz and\n433 MHz in Europe)\nCSS\n<15 km\n0.25–50 kbit/s\n51–222 bytes\n\
    125 kHz\nLow power\nand wide\nrange\nThere are several recent studies on the performance\
    \ of LoRa/LoRaWAN technology for certain\nscenarios, but only a few describe real-world\
    \ LoRaWAN deployments explicitly aimed at providing\ncommunications to a smart\
    \ campus. For instance, Loriot et al. [63] conducted LoRaWAN measurements\nin\
    \ a French campus both outdoors and indoors and showed that the technology can\
    \ provide good\nperformance over the major part of the campus. Another development\
    \ is presented in [64], where\nthe authors set up a LoRaWAN-based air quality\
    \ system in their campus. Other interesting paper\nis [65], which details the\
    \ design of a LoRa mesh network system within a campus. Finally, in [66]\nthe\
    \ authors brieﬂy describe a smart campus platform that includes a LoRaWAN network\
    \ to support\nfaculty research projects.\n2.3. Smart Campus Deployments\nDespite\
    \ the existence of many well-documented smart campus applications, there are only\
    \ a few\nacademic articles that describe in detail the deployment of real smart\
    \ campuses.\nFor instance, in [67] an overview of the neOCampus of the Toulouse\
    \ III Paul Sabatier University\n(France) is given. Such a smart campus runs different\
    \ projects to make use of collaborative Wi-Fi, it\nprovides an open-data platform,\
    \ it fosters the reduction of the ecological footprint related to human\nactivities\
    \ and it aims for protecting the biodiversity of the campus.\nAnother interesting\
    \ smart campus is detailed in [56], where an IoT platform deployed across\ndifferent\
    \ engineering schools of the Universidad Politécnica de Madrid in its Moncloa\
    \ Campus (Spain)\nis described. Such an IoT platform is based on a cloud that\
    \ provides services that follow the SOA\nparadigm. Two main applications are implemented:\
    \ one for monitoring people ﬂows and another for\nenvironmental monitoring.\n\
    The Sapienza smart campus (Italy) roadmap is described in [68]. Such a paper is\
    \ interesting since,\nalthough it is a theoretical approach, it indicates how\
    \ to structure the services to be provided by the\nsmart campus infrastructure\
    \ to scale it appropriately.\nIn [45] the author gives details on the Birmingham\
    \ City University smart campus (United\nKingdom). The smart campus platform integrates\
    \ diverse business systems and smart building\nprotocols thanks to an Enterprise\
    \ Service Bus (ESB) and to the use of a SOA architecture, which\nprovides scalability,\
    \ ﬂexibility, and service orchestration.\nIn the United States, an example of\
    \ smart campus can be found in West Texas A&M University [66].\nAccording to the\
    \ authors, the smart campus is based on the IoT principles and covers an area\
    \ of\n176 acres, requiring connecting more than 42 different buildings. The described\
    \ project is focused\non two main tasks: to foster IoT collaboration and to provide\
    \ an appropriate security framework.\nThe proposed system has already supported\
    \ diverse IoT projects, such as a LoRaWAN pilot for\nmonitoring environmental\
    \ conditions or an OpenCV-based smart parking system.\nSensors 2019, 19, 3287\n\
    7 of 30\nFinally, a smart campus for Wuhan University of Technology (China) is\
    \ proposed in [69]. In such\na paper the authors depict an architecture based\
    \ on the IoT paradigm and in cloud-computing\ninfrastructure that supports multiple\
    \ applications.\n2.4. Potential Smart Campus LPWAN Applications\nAlthough a smart\
    \ campus can support multiple indoor applications [70], in general, in such\n\
    environments IoT nodes have access to power outlets and their communications can\
    \ be usually\neasily handled with already common communications transceivers (e.g.,\
    \ Wi-Fi, Bluetooth, Ethernet).\nIn contrast, this article focuses on the challenging\
    \ environments that arise outdoors due the usual\ndependency on batteries to run\
    \ IoT nodes and the need for exchanging data at relatively long distances\n(at\
    \ least several hundred meters and up to 2 km), where LPWAN devices outperform\
    \ other popular\ncommunications technologies.\nThe following are some of the most\
    \ relevant outdoor applications that have already been\nimplemented by using LPWAN\
    \ technologies:\n•\nSmart mobility and intelligent transport services. These applications\
    \ require ubiquitous outdoor\ncoverage to provide continuous data streams. For\
    \ instance, in [71] researchers of Soochow\nUniversity (China) propose the deployment\
    \ of different smart mobility applications for their\ncampuses, which include\
    \ automatic vehicle access systems, a parking guidance service, a bus\ntracking\
    \ system, or a bicycle rental service. Other authors also proposed similar solutions\n\
    for providing campus services for smart parking [72], electric mobility [73,74],\
    \ smart electric\ncharging [75], the use of autonomous vehicles [76] or bus tracking\
    \ [77].\n•\nSmart energy and smart grid monitoring. Certain energy sources (e.g.,\
    \ renewable sources such\nas photo-voltaic panels or windmills) and smart grid\
    \ components may be in remote locations,\nso it would be helpful to make use of\
    \ LPWAN technologies to monitor them. For this reason, in\nrecent years, special\
    \ attention has been given to smart campus microgrids [78], smart grids [79]\n\
    and smart energy systems [80].\n•\nResource consumption efﬁciency monitoring.\n\
    These ﬁelds include waste collection [81],\nwater management [82], energy monitoring\
    \ [83], power consumption optimization [84] and\nsustainability [5].\n•\nCampus\
    \ user proﬁling. It is interesting for the campus managers to determine user patterns\
    \ and\nbehaviors to optimize the provided services. Thus, user proﬁling can be\
    \ helpful to obtain mobility\npatterns, student daily walks, user activities,\
    \ or social interactions, which can be obtained through\nopportunistic messaging\
    \ apps [85], Wi-Fi monitoring [86] or on-board mobile phone sensors [87].\n•\n\
    Outdoor guidance and context-aware applications. This kind of systems are usually\
    \ based on\nsensors and actuators spread throughout the campus and help people\
    \ to reach their destination.\nThere are examples in the literature of systems\
    \ for guiding hearing and visually impaired\npeople [88] or for navigating through\
    \ the campus paths [89]. There are also augmented reality\nguidance applications\
    \ [90], but it is important to note that LPWAN technologies could only help\n\
    in small packet exchanges (e.g., for transmitting certain telemetry or positioning\
    \ data), since the\nreal-time multimedia content that can be demanded by augmented\
    \ reality applications requires\nhigh-speed rates to preserve a good user experience.\n\
    •\nClassroom attendance. Some university events are carried out outdoors, what\
    \ makes it difﬁcult to\ncontrol classroom attendance. To tackle such an issue,\
    \ some researchers have proposed different\nsensor-based student monitoring systems\
    \ that can be repurposed to be used outdoors [91].\n•\nInfrastructure monitoring.\
    \ It is possible to monitor remotely the status of certain assets that are\nscattered\
    \ throughout the campus. For example, some authors presented smart campus solutions\n\
    for managing campus greenhouses [92] or for monitoring high power lines with Unmanned\n\
    Aerial Vehicles (UAVs) [93].\n•\nRemote health monitoring. Smart campus technologies\
    \ receive medical data in real time [94] or\nfor measuring student stress [95].\
    \ Some researchers have even proposed to monitor the health of\nthe campus trees\
    \ [96].\nSensors 2019, 19, 3287\n8 of 30\n2.5. Smart Campus Modeling and Planning\
    \ Simulators\nA smart campus is similar to an urban microenvironment where different\
    \ buildings coexist with\nstreets, open areas, parking lots, trees, benches, or\
    \ people, among others. Different propagation channel\nmodels have been presented\
    \ in the literature to characterize electromagnetic propagation phenomena\nin\
    \ this type of scenarios, ranging from empirical methods to deterministic methods\
    \ based on Ray\nTracing (RT) or Ray-Launching (RL) approaches.\nEmpirical methods\
    \ are based on measurements and their subsequent linear regression analysis.\n\
    These methods are accurate for scenarios with the same characteristics as the\
    \ real measurements,\nbut their main disadvantages are the lack of scalability\
    \ and the expensive cost in time and resources\nthat is required to perform a\
    \ measurement campaign. For example, in [97,98] empirical path loss\nmodels in\
    \ a typical university campus are proposed for a frequency of 1800 MHz. The authors\
    \ of [99]\npresent a spatially consistent street-by-street path loss model for\
    \ a 28 GHz channel in a micro-cell\nurban environment. The main drawback of these\
    \ results is that the suitability of these models for path\nloss prediction has\
    \ yet to be conﬁrmed by the literature in other campuses.\nOn the other hand,\
    \ deterministic methods are based on Maxwell’s equations, which provide\naccurate\
    \ propagation predictions. These approaches usually consider the three-dimensional\
    \ geometry\nof the environment and model all propagation phenomena in the considered\
    \ scenario. Their main\ndrawback is the required computational time, which may\
    \ not be afforded in large and complex\nscenarios. For this reason, RT or RL techniques,\
    \ which are based on Geometrical Optics (GO) and\nthe Uniform Theory of Diffraction\
    \ (UTD), have been widely used for radio propagation purposes\nas an accurate\
    \ approximation of full-wave deterministic techniques.\nFor example, the authors\n\
    of [100] modeled the dominant propagation mechanisms using advanced RT simulations\
    \ in an urban\nmicroenvironment at 2.1 GHz, showing that diffuse scattering plays\
    \ a key role in urban propagation.\nIn addition, in [101] the importance of scattering\
    \ when analyzing outdoor environments in the\npresence of trees is reported. In\
    \ [102,103] the authors present propagation analyses (at 949.2 MHz\nand 2162.6\
    \ MHz, respectively) that make use of RT tools in a university campus with a Universal\n\
    Mobile Telecommunications System (UMTS) base station placed on rooftops. Similarly,\
    \ in [104],\nthe radio-planning analysis of a Wi-Fi network in a university campus\
    \ is presented using an RT\napproach. In addition, it has also been reported in\
    \ the literature the calibration of RT simulators\nfor millimeter-wave propagation\
    \ analyses based on the measured results in a university campus\nat 28 GHz [105]\
    \ and 38 GHz [106]. However, all the presented works are focused on micro-cellular\n\
    environments and on analyzing the wireless propagation channel between a base\
    \ station at a certain\nheight in a building and a client in a pedestrian street.\
    \ In this work, a radio wave propagation analysis\nfor the connectivity of IoT\
    \ LoRaWAN-based nodes by means of an in-house developed RL algorithm\nis reported\
    \ (which is later detailed in Section 4).\n2.6. Key Findings\nAfter analyzing\
    \ the state of art, it is clear that a smart campus faces similar challenges to\
    \ smart\ncities and that they share certain use cases and communications technologies.\
    \ Table 2 summarizes the\ncharacteristics of the most relevant smart campuses\
    \ and related solutions, and compares them with\nthe proposed system for the University\
    \ of A Coruña.\nAs can be observed, the systems in the table make use of diverse\
    \ short-range and long-range\ncommunications technologies, multiple sensors and\
    \ actuators, different hardware and software\nplatforms, and provide services\
    \ for several practical use cases. Although some systems provide\na holistic approach\
    \ to a smart campus, devising potential outdoor use cases and applications, their\n\
    implementations are mainly focused on environmental aspects, missing other smart\
    \ ﬁelds such as the\nones deﬁned in Section 2.1.\nSensors 2019, 19, 3287\n9 of\
    \ 30\nTable 2. Comparison of the main features of the most relevant deployed smart\
    \ campuses and related solutions.\nSmart\nCampus\nArea\nAccess\nTechnology\nSensors\
    \ and\nActuators\nIoT\nHardware\nPlatform\nSoftware\nPlatform\nUse Cases\nFog\
    \ Computing\nCapabilities\nNetwork\nPlanning\nSustainable\nDevelopment Goals\n\
    (SDGs) [107], KPIs\nor Results\nSchool of\nSTEM,\nUniversity\nof\nWashington\n\
    Bothell\n(United\nStates) [41]\n-\nZigbee, BLE,\n6LowPAN\nSensor Tag 2.0\n(accelerometer,\n\
    magnetometer,\ngyroscope,\nlight,\nhumidity\nobject and\nambient\ntemperature,\n\
    microphone)\nCOTS\nhardware,\nArduino\nAWS, Microsoft\nAzure cloud\nservices\n\
    -\nNo\nNo\nBuilt in 3 months, it\nincludes monthly\ncloud service bill\nQA\nHigher\n\
    Education\n(QAHE),\nUniversity\nof\nBusiness\nand\nTechnology,\nBirmingham\n(United\n\
    Kingdom)\n[42]\n-\n-\nNFC and\nRFID tags, QR\ncodes\nWearables\nCisco Physical\n\
    Access Control\ntechnology\nLearning\napplications,\naccess control\nsystems\n\
    No\nNo\nDeliver high quality\nservices, protect the\nenvironment, and\nsave costs\n\
    Tennessee\nState\nUniversity,\nNashville\n(United\nStates) [43]\n-\n-\n-\n-\n\
    -\nSurvey on\nintelligent\nbuildings,\nsmart grid,\nlearning\nenvironment,\nwaste\
    \ and\nwater\nmanagement\nand other\napplications\nNo\nNo\n-\nSensors 2019, 19,\
    \ 3287\n10 of 30\nTable 2. Cont.\nSmart\nCampus\nArea\nAccess\nTechnology\nSensors\
    \ and\nActuators\nIoT\nHardware\nPlatform\nSoftware\nPlatform\nUse Cases\nFog\
    \ Computing\nCapabilities\nNetwork\nPlanning\nSustainable\nDevelopment Goals\n\
    (SDGs) [107], KPIs\nor Results\nNorthwestern\nPolytechnical\nUniversity\n(China)\n\
    [44]\n-\nWi-Fi,\nBluetooth\nBuilt-in\nsmartphone\nsensors\n-\nAndroid 2.1\nplatform,\
    \ Big\nData techniques\nand SOA\nWhere2Study,\nI-Sensing\n(participatory\nsensing),\n\
    BlueShare\n(media\nsharing\napplication)\nNo\nNo\n-\nBirmingham\nCity\nUniversity\n\
    (United\nKingdom)\n[45]\nTwo\ncampuses\nof circa\n18,000\nand\n24,000 m2,\nrespectively\n\
    -\n-\n-\nMicrosoft’s\nBizTalk Server as\nESB, SOA\nBusiness\nsystems,\nsmart\n\
    buildings\nNo\nNo\nCost savings;\nimproved energy\nrating from F to B;\n40% reduction\
    \ in CO2\nemissions\nIMDEA\nNetworks\nInstitute\n(Spain)\n[46]\n-\nWi-Fi,\nBluetooth\n\
    -\n-\nMobility\nmodel\nOpportunistic\nFloating Content (FC)\ncommunication\nparadigm\n\
    No\nPerformance of the\nservice in terms of\ncontent persistence,\navailability\
    \ and\nefﬁciency\nUniversity\nof Oradea\n(Romania)\n[47]\n-\n4G, Zigbee\n-\nRFID\
    \ labels,\nmobile\ndevices,\nsensor\nequipment\nPrivate/public\ncloud with\nsteganography\n\
    No. Only\narchitecture\ndesign\nNo\nNo\n-\n[51]\n-\n-\n-\nEdge\ncomputing\ndevices\n\
    Network model\nand bandwidth\nallocation scheme\nfor mobile users\nTrustworthy\n\
    content\ncaching\nEdge caching reverse\nauction game and\nbandwidth allocation\n\
    for multiple contents\nin Mobile Social\nNetworks\nNo\nResource efﬁciency\nSensors\
    \ 2019, 19, 3287\n11 of 30\nTable 2. Cont.\nSmart\nCampus\nArea\nAccess\nTechnology\n\
    Sensors and\nActuators\nIoT\nHardware\nPlatform\nSoftware\nPlatform\nUse Cases\n\
    Fog Computing\nCapabilities\nNetwork\nPlanning\nSustainable\nDevelopment Goals\n\
    (SDGs) [107], KPIs\nor Results\n[52]\n-\nMESH Wi-Fi\nEnvironmental\nsensors, IP\n\
    cameras,\nemergency\nbuttons\n-\nNeural network\nlearning\nalgorithms\nStreet\
    \ lighting\nEdge Computing\nNo\nWorkload prediction\naccuracy, resource\nmanagement\n\
    dashboard\nWiCloud\n[53]\n-\nWi-Fi\n-\nServers,\nmobile phone\nbase stations\n\
    or wireless\naccess points\nNetwork\nFunctions\nVirtualization\n(NFV),\nSoftware-Deﬁned\n\
    Network (SDN)\nSemantic\ninformation\nanalysis,\nsmart class\nMobile Edge\nComputing\
    \ paradigm\nNo\nHistorical data\nWiP [54]\n-\n3G/4G/5G,\nWi-Fi\nSmartcam,\nsmart\
    \ cards,\nlight and\ntemperature\nsensor,\nsmartphone,\ntablet,\nsmartwatch\n\
    -\n-\nEnergy\nconsumption\nsavings,\nvirtual\nsupport to\nstudents,\naugmented\n\
    reality for\nmuseum\ncollections\nYes\nNo\n-\nSmart CEI\nMoncloa,\nUniversidad\n\
    Politécnica\nde Madrid\n(Spain)\n[56]\n5.5 km2,\n144\nbuildings,\ndaily\nﬂow\n\
    up to\n120,000\npeople\nWi-Fi,\nEthernet\nSmart Citizen\nKit (SCK)\nRaspberry\
    \ Pi,\nArduino\nCloud, SOA\nparadigm\nSmart\nemergency\nmanagement\nand trafﬁc\n\
    restriction\nNo\nNo\nDashboard with\nhistorical data\nSensors 2019, 19, 3287\n\
    12 of 30\nTable 2. Cont.\nSmart\nCampus\nArea\nAccess\nTechnology\nSensors and\n\
    Actuators\nIoT\nHardware\nPlatform\nSoftware\nPlatform\nUse Cases\nFog Computing\n\
    Capabilities\nNetwork\nPlanning\nSustainable\nDevelopment Goals\n(SDGs) [107],\
    \ KPIs\nor Results\nWest Texas\nA&M\nUniversity\n(United\nStates) [66]\n176\n\
    acres\n(0.71 km2)\ncampus\nthat\nconnects\n42\nbuildings\nand a\n2393\nacres\n\
    (9.68 km2)\nworking\nranch\nLoRAWAN,\n4G/LTE\nTemperature,\nair pressure,\nrelative\n\
    humidity and\npartial\nconcentrations\nArduino\nNIST\nCybersecurity\nFramework,\n\
    standards such as\nCOBIT and ISO\nConnect cattle\nacross the\nfeed yard;\nmonitor\n\
    environmental\nconditions for\nnetwork\nequipment;\ncampus-wide\nenvironmental\n\
    monitoring\nsystem; water\nirrigation;\nsmart parking\n(GPS data, 800\nvideo\n\
    surveillance\ncameras and\nOpenCV-based)\nNo\nNo\n-\nSapienza\nsmart\ncampus,\n\
    University\nof Rome\n(Italy) [68]\n-\nN/A\nN/A\nN/A\nTheoretical and\nmethodological\n\
    framework\nLiving,\neconomy,\nenergy,\nenvironment\nand mobility\nNo\nNo\nSet\
    \ of smart campus\nindicators and\nincidence matrix\nWuhan\nUniversity\nof\nTechnology\n\
    (China)\n[69]\n-\nCable,\nwireless,\n3G/4G\nPerception\nlayer with\nRFID, cameras\n\
    and sensors\n-\nFramework\ndesign, cloud\ncomputing and\nvirtualization\n(Oracle\
    \ 10G RAC)\nLearning and\nliving\nNo\nNo\n-\nSensors 2019, 19, 3287\n13 of 30\n\
    Table 2. Cont.\nSmart\nCampus\nArea\nAccess\nTechnology\nSensors and\nActuators\n\
    IoT\nHardware\nPlatform\nSoftware\nPlatform\nUse Cases\nFog Computing\nCapabilities\n\
    Network\nPlanning\nSustainable\nDevelopment Goals\n(SDGs) [107], KPIs\nor Results\n\
    Wisdom\nCampus,\nSoochow\nUniversity\n(China)\n[71]\n4058\nacres\n(16.42 km2),\n\
    5263\nstaff\nand\nmore\nthan\n50,000\npeople\n-\n-\n-\n-\nAutomatic\nvehicle access\n\
    systems,\nparking\nguidance\nservice, bus\ntracking\nsystem and\nbicycle rental\n\
    service\nNo\nNo\n-\nIISc\ncampus\n[82]\n2 km\n× 1\nkm\nsub-GHz\nradios\nLow-cost\n\
    ultrasonic\nwater level\nsensors, solar\npanels\nMicrocontroller\nTI\nMSP432P401R\n\
    -\nWater\nmanagement\nNo\nNo\nRSSI and Packet\nError Rate (PER)\nperformance,\
    \ power\nbudget\nOttawa\nCity and\nAPEC\ncampus\n[104]\n-\nWi-Fi\n-\n-\n-\n-\n\
    No\nRT\napproach\nMeasurements and\npredictions of Path\nLoss\nUniversitas\nIndonesia\n\
    [106]\nUrban\narea\n800 MHz,\n2.3 GHz, and\n38 GHz\n-\n-\nRT simulators for\n\
    millimeter-wave\npropagation\nanalyses based on\nthe measured\nresults in a\n\
    university\ncampus\n-\nNo\nRT\napproach\nand\nphysical\noptic\nnear-to-far\nﬁeld\n\
    methods\nPath Loss models\nUniversity\nof A\nCoruña\n(This\nwork)\n26,000 m2\n\
    LoRaWAN\n-\nIoT nodes and\nSBCs\n(Raspberry\nPi 3)\nSimulations\nScalable\narchitecture\n\
    for multiple\noutdoor use\ncases\nYes\nYes (3D\nRL)\nPlanning simulator\nand empirical\n\
    validation\nSensors 2019, 19, 3287\n14 of 30\nIn addition, only a few solutions\
    \ consider the use of fog computing, and even less made use of\nnetwork planning\
    \ tools. In comparison, the solution proposed in this article is one of the few\
    \ academic\nsolutions that deploys LoRaWAN infrastructure. Moreover, the proposed\
    \ smart campus is almost the\nonly one conceived from scratch to harness the beneﬁts\
    \ of fog computing.\nRegarding the efﬁciency in the network deployment in terms\
    \ of cost, coverage, and the overall\nenergy consumption, most of the academic\
    \ papers do not give any insight regarding the heterogeneous\nnetwork planning,\
    \ although in some cases it is speciﬁed that it is low cost (without further details).\n\
    Just a couple of systems give details for the hardware used to build the demonstrator\
    \ at the level that\nis described later in this paper in Section 3.\n3. Design\
    \ and Implementation of the Smart Campus System\n3.1. Architecture for Outdoor\
    \ Applications\nThe proposed communications architecture is depicted in Figure\
    \ 2. As can be observed, it\ncomprises three different layers. The layer at the\
    \ bottom consists of the different IoT LoRaWAN\nnodes that are deployed throughout\
    \ the campus. Such nodes communicate with LoRaWAN gateways\nthat comprise the\
    \ Fog Layer, since they also act as fog computing gateways, thus providing fast\n\
    location-aware responses to the LoRaWAN node requests. Every fog gateway is essentially\
    \ a Single\nBoard Computer (SBC) that embeds Ethernet, Wi-Fi, and Bluetooth interfaces\
    \ besides a LoRaWAN\ntransceiver. Finally, the top layer is the cloud, where user\
    \ applications run together with data\nstorage services.\nFog Layer\nOther LoRaWAN\
    \ Fog Gateways\nSBC\nSBC\n…\nSBC\nMain Gateway\nLoRaWAN \nFog Gateway\nSBC\nFog\
    \ Services\nSmart Campus\nCloud\nRemote Users\nNode Layer\n…\nLoRaWAN Node\nLoRaWAN\
    \ Node\nLoRaWAN Node\nFigure 2. Proposed LoRaWAN-based smart campus architecture.\n\
    Sensors 2019, 19, 3287\n15 of 30\n3.2. Operational Requirements for Outdoor Applications\n\
    To cover potential smart campus outdoor applications, a set of operational requirements\
    \ grouped\nby capabilities was deﬁned, including:\n•\nCoverage capabilities. The\
    \ coverage of the smart campus should be maximized. The typically\nexpected coverage\
    \ should be around 1 km2 considering both Line-of-Sight (LoS) and\nNo-Line-of-Sight\
    \ (NLoS) scenarios.\n•\nRobustness capabilities. The system should provide robustness\
    \ to signal interference and/or loss\nof network operation. The network should\
    \ provide redundancy and thus be robust against single\npoints of failure.\n•\n\
    Supported services and applications. The previously mentioned applications (in\
    \ Section 2.4)\nshould be supported. Quality of Service (QoS) requirements should\
    \ include support for high-peak\nrate demand, latency-sensitive trafﬁc, and location-aware\
    \ IoT applications. A transmission speed\nof up to 50 Kbps should be expected.\n\
    •\nDeployment features and cost. It should be expected that the deployment will\
    \ depend largely on\nlow-cost IoT nodes resource-constrained in terms of memory,\
    \ battery, computing capabilities, and\nenergy consumption.\n•\nNetwork topology.\
    \ The network architecture should support Point-To-Multipoint (PMP) and\nPoint-to-Point\
    \ (PtP) links. The system should be capable of establishing ad-hoc networking\
    \ for\nspeciﬁc scenarios (i.e., by using star or mesh topologies).\n3.3. LoRaWAN\
    \ Testbed Implementation\nA LoRaWAN network consisting on a gateway and several\
    \ nodes was deployed. A RisingHF\nRHF0M301 module [108] installed on a Raspberry\
    \ Pi 3 was selected as gateway. Such a module\nis equipped with a dual digital\
    \ radio front-end interface with a typical sensitivity of −137 dBm.\nThe module\
    \ is capable of simultaneous dual-band operation and supports Adaptive Data Rate\
    \ (ADR),\nautomatically changing between LoRa spreading factors. It can use a\
    \ maximum of 10 channels: 8 multi\nSpreading Factor (SF) channels (SF7 to SF12\
    \ with 125 KHz of bandwidth), one FSK channel and\none LoRa channel. Another interesting\
    \ feature of the module is its ability to operate with negative\nSignal-to-Noise\
    \ Ratios (SNRs), with a Co-Channel Rejection (CCR) of up to 9 dB. It also supports\n\
    LoRaWAN classes A, B, and C and its maximum output power is 24.5 dBm.\nA 0 dBi\
    \ antenna was used for the tests. The module is installed on a Raspberry Pi 3\
    \ using the\nprovided bridge (RHF4T002). To access the LoRaWAN RFID module, conﬁgure\
    \ the node, and access\nthe message and the transmission parameters, the following\
    \ software was installed on the Raspberry\nPi 3: Raspbian Stretch (Linux raspberrypi\
    \ 4.14.70-v7+), LoRa Gateway v5.0.1, LoRa Packet Forwarder\nv4.0.1 and LoRaWAN-Server\
    \ v0.6.0.\nThe LoRa gateway was conﬁgured as follows:\n•\nCoding Rate: 4/5.\n\
    •\nRX1 delay: 1.\n•\nRX2 delay: 2.\n•\nPower: 14 dBm.\n•\nRX Frequency: 869.5\
    \ MHz.\nA RisingHF RHF76-052 module [109] was used by the LoRaWAN nodes (one of\
    \ such nodes can\nbe observed on the right of Figure 3). The module has a maximum\
    \ sensitivity of −139 dBm with\nspreading factor 12 (SF12) and 125 kHz of bandwidth,\
    \ channels (0–2) at 868.1, 868.3 and 868.5 MHz,\nand a maximum output power of\
    \ 14 dBm. During the experiments presented in this paper, the module\nmade use\
    \ of the pre-installed wired antenna.\nSensors 2019, 19, 3287\n16 of 30\nUSRP\
    \ B210\nLoRAWAN\nReceiver\nLaptop Acting As Data-Logger \nand Spectrum Analyzer\n\
    Figure 3. LoRaWAN IoT node during the empirical measurement campaign.\n4. LoRaWAN\
    \ Planning Simulator Setup\n4.1. Planning Simulator\nThe in-house developed 3D\
    \ Ray-Launching (3D-RL) technique is based on GO and the Uniform\nTheory of Diffraction\
    \ (UTD). The ﬁrst step of such a technique is the creation of the scenario under\n\
    analysis, which should consider all the obstacles within it, such as buildings,\
    \ vehicles, vegetation,\nor people. This design phase is essential for obtaining\
    \ accurate results for the real environment. Once\nthe scenario is properly created,\
    \ the frequency of operation, number of reﬂections, radiation pattern of\nthe\
    \ transceivers and angular and spatial resolution can be ﬁxed as input parameters\
    \ in the algorithm\nfor simulation. Then, the whole scenario is divided into a\
    \ 3D mesh of cuboids, in which all the\nelectromagnetic phenomena are saved during\
    \ simulation, emulating the electromagnetic propagation\nof the real waves. A\
    \ detailed description of the inner-workings of the 3D-RL tool is out of the scope\
    \ of\nthis article, but the interested reader can ﬁnd further information in [110].\n\
    It is worth pointing out that smart campus ecosystems are challenging environments\
    \ in terms\nof radio propagation analysis due to their large dimensions as well\
    \ as for the multipath propagation,\nwhich is caused by the multiple obstacles\
    \ within them. Hence, to achieve a good trade-off between\nsimulation computational\
    \ cost and result accuracy, it is important to determine the optimal parameters\n\
    for the number of reﬂections and the angular and spatial resolution of the RL\
    \ algorithm. For such\na purpose, an analysis of the optimal input parameters\
    \ for the RL tool applied in large complex\nenvironments is presented in [111].\
    \ Such previous results have been considered to obtain the simulation\nparameters\
    \ for the proposed smart campus scenario and the ﬁnal values are summarized in\
    \ Table 3.\nTable 3. 3D Ray-Launching parameters.\nParameter\nValue\nOperation\
    \ frequency\n868.3 MHz\nOutput power level\n14 dBm\nPermitted reﬂections\n6\n\
    Cuboid resolution\n4 m × 4 m × 2 m\nLaunched ray resolution\n1o\nAntenna type\
    \ and gain\nMonopole, 0 dBi\n4.2. Scenario under Analysis\nThis article presents\
    \ a case study conducted in the northwest of Spain at the Campus of Elviña of\n\
    the University of A Coruña. The campus covers an area of 26,000 m2 and includes\
    \ elements typically\nfound in an urban environment, such as buildings of different\
    \ heights, sidewalks, roads, green areas,\nSensors 2019, 19, 3287\n17 of 30\n\
    trees, and cars, among others. Due to the large size of the environment to be\
    \ analyzed, two different\nscenarios were created for the simulations (in Figure\
    \ 4), which correspond to the two scenarios\ndelimited by a green and a red rectangle\
    \ in the real scenario shown in Figure 5. It must be noted\nthat the two rectangular\
    \ scenarios were selected within the campus (red on the left and green on the\n\
    right) to cover eight faculties. The rectangular shape is required by the 3D Ray-Launching\
    \ simulator.\nThe points marked as M, A, Q, R correspond to different reception\
    \ distances from the transmitter (T).\nTo obtain accurate results, the created\
    \ scenarios include the urban elements previously mentioned.\nFurthermore, realistic\
    \ object sizes as well as material properties (permittivity and conductivity)\
    \ were\ntaken into account. For the experiments, the LoRaWAN gateway explained\
    \ in Section 3.3 was placed\nat the spot indicated by the red dot in the two images\
    \ shown in Figure 4. Please note that the location\ncorresponds to a single position,\
    \ which is in the third ﬂoor of the faculty of Computer Science (located\nin the\
    \ intersection of the two rectangles of Figure 5, marked in such a Figure with\
    \ a blue T).\n(a)\n(b)\nFigure 4. Simulated scenarios of the smart campus. (a)\
    \ Red scenario; (b) Green scenario.\nFigure 5. Aerial view of the Campus of Elviña,\
    \ with the areas delimited for smart campus applications\n(Source: c⃝2019 Google).\n\
    5. Experiments\n5.1. Empirical Validation: LoRaWAN Testbed\nTo evaluate LoRaWAN\
    \ performance in a real campus, the testbed described in Section 3.3 was\ndeployed\
    \ in the Campus of Elviña. A measurement campaign was designed and carried out\
    \ to\nvalidate the chosen hardware and the simulation results provided by the\
    \ 3D Ray-Launching algorithm.\nThe performed tests consisted on transmitting packets\
    \ from the LoRaWAN node to the gateway from\ndifferent spots throughout the campus\
    \ using acknowledgment messages. Figure 6 shows such spots\n(in yellow) together\
    \ with the LoRaWAN gateway location (in red) for one of the two parts of the\n\
    evaluated campus. The transmitter was placed near a window inside a building,\
    \ at a height of 3.5 m\nfrom the street ground level. In contrast, all the measurement\
    \ spots were located outdoors, at a height\nof 0.5 m. For every of the previously\
    \ mentioned spots, the Received Signal Strength Indicator (RSSI)\nSensors 2019,\
    \ 19, 3287\n18 of 30\nand Signal-to-Noise Ratio (SNR) values were recorded both\
    \ at the LoRaWAN gateway and at the device\nthat acted as a node. A Debian Virtual\
    \ machine was connected to the LoRaWAN-server WebSocket\nendpoint. Nodes were\
    \ connected through an USB port and programmed to send a 6-byte payload ten\n\
    times. The ﬁrmware of the LoRaWAN node uses the USB port to create a serial interface\
    \ and write\nthe SNR and RSSI of the received acknowledgment. With this setup,\
    \ the LoRaWAN node was moved\nto different spots and at each of them the RSSI\
    \ and SNR values of the gateway and the node were\nrecorded for a total of ten\
    \ packages per location.\nTo test for possible interference in the used Industrial,\
    \ Scientiﬁc and Medical (ISM) sub-band,\na USRP B210 [112] with the same 0 dBi\
    \ antenna used by the LoRaWAN gateway was connected to a\nlaptop that acted both\
    \ as data-logger and spectrum analyzer (such a measurement setup is shown\nin\
    \ Figure 3). As an example, the result of one of the analysis during the empirical\
    \ measurements is\nshown in Figure 7, when the system was conﬁgured to monitor\
    \ a central frequency of 868.3 MHz with\na sampling rate of 1 MHz.\nFigure 6.\
    \ Empirical measurement points in the Green Scenario (Source: c⃝2019 Google).\n\
    Figure 7. State of the radio spectrum during the performed empirical measurements.\n\
    Sensors 2019, 19, 3287\n19 of 30\nFigure 8. Comparison between empirical measurements\
    \ and 3D-Ray-Launching simulation results.\nAfter the measurement campaign within\
    \ the campus, Radio Frequency (RF) power level\nestimations for the whole volume\
    \ of the scenario were obtained with the aid of the 3D Ray-Launching\nsimulation\
    \ tool. The transmitter element was placed at the same position of the real LoRaWAN\n\
    gateway (the red dot in Figure 6) and, using the simulation parameters shown in\
    \ Table 3, a simulation\nwas launched. The comparison between the measured RF\
    \ power values and the simulation estimations\nis depicted in Figure 8. As can\
    \ be seen in the Figure, the obtained estimations follow the tendency of\nthe\
    \ measured values, obtaining a mean error of 0.53 dB with a standard deviation\
    \ of 3.39 dB (taking\ninto account the 19 measurement points of Figure 6). The\
    \ standard deviation is higher than the usual\nvalues provided by the 3D Ray-Launching.\
    \ This effect could be due to size of the scenario (and the\nchosen simulation\
    \ parameters such as cuboid size and launched ray resolution), since it is the\
    \ largest\nscenario simulated so far by the developed 3D Ray-Launching tool. In\
    \ addition, it must be noted the\nfact that measurements were based on RSSI values\
    \ provided by the motes, which inherently add a\nreceived RF power level error.\
    \ Nonetheless, the simulation results are accurate, and the simulation tool\n\
    is validated satisfactorily. Regarding the results, it is worth noting the low\
    \ RF power levels measured\nin several points of the scenario. The RF power level\
    \ in many of these points is lower than −100 dBm,\nwhich is the typical ZigBee\
    \ sensitivity. However, one of the advantages of the selected LoRaWAN\ndevices\
    \ is that their sensitivity is much lower (in the usual operating conditions,\
    \ up to −137 dBm), as\ncan it be observed in Table 4. Thus, the radio link budget\
    \ for LoRaWAN has a higher margin, which\nmeans that longer communication distances\
    \ can be achieved.\nTable 4. Sensitivity values for LoRaWAN devices at 868 MHz.\n\
    LoRaWAN Device\nSensitivity\nSeeeduino LoRaWAN\n−137 dBm\nSeeeduino LoRa/GPS Shield\
    \ for Arduino with LoRa BEE\n−148 dBm\nDragino LoRa Shield\n−148 dBm\nGrove—LoRa\
    \ Radio\n−148 dBm\nDF Robot’s LoRa MESH Radio Module\n−148 dBm\nArduino MKR WAN\
    \ 1300\n−135.5 dBm\nAdafruit RFM95W LoRa Radio Transceiver\n−148 dBm\nAdafruit\
    \ Feather 32u4 RFM95 LoRa Radio\n−148 dBm\nMicrochip LoRa Mote RN2483\n−148 dBm\n\
    The Things Network TTN-UN-868\n−148 dBm\nThe Things Network TTN-ND-868\n−148 dBm\n\
    Sensors 2019, 19, 3287\n20 of 30\n5.2. Planning of Smart Campus Use Cases\nOnce\
    \ the presented 3D Ray-Launching simulation tool was validated by comparing the\
    \ simulation\nresults with the measurements, three different outdoor use cases\
    \ were proposed for the smart campus\nenvironment, where LoRaWAN would have direct\
    \ connectivity with a gateway:\n•\nCrowdsensing/Mobility pattern detection. The\
    \ purple dots depicted in Figure 9 represent the\nlocation of SBC-type devices\
    \ (e.g., Raspberry Pi) that act as Bluetooth and Wi-Fi sniffers that will\nhelp\
    \ to determine the mobility patterns of the users that move throughout the campus,\
    \ what will\noptimize the deployed location-based services. In the same way, the\
    \ devices could also help in\ncrowdsensing tasks in certain areas.\n•\nSmart irrigation.\
    \ In this case, due to the location of the campus green areas, devices will be\n\
    deployed only in one of the modeled scenarios. The device locations are represented\
    \ by yellow\ndots shown in Figure 10. The aim of this system is to remotely control\
    \ and automate the irrigation\nof green areas where the deployment of wired infrastructure\
    \ to control the valves is very expensive\nor even unfeasible.\n•\nSmart trafﬁc\
    \ monitoring. To detect vehicular trafﬁc, sensors are deployed at the points represented\n\
    by blue dots in Figure 11. In this way, the trafﬁc behavior within the campus\
    \ can be analyzed and\nthe degree of parking occupancy could be inferred. Sustainability\
    \ and ecological measurements to\nboost public transportation, to optimize routes\
    \ and resources, and to adapt to real-time demand\ncould be taken.\nFigure 9.\
    \ Aerial view of the spots monitored in the mobility pattern detection use case\
    \ (Source:\nc⃝2019 Google).\nFigure 10. Aerial view of the smart irrigation monitoring\
    \ spots (Source: c⃝2019 Google).\nSensors 2019, 19, 3287\n21 of 30\nFigure 11.\
    \ Aerial view of the spots monitored for the smart trafﬁc use case (Source: c⃝2019\
    \ Google).\nTo validate the three mentioned smart campus use cases, 3D Ray-Launching\
    \ simulations were\nlaunched for the proposed device locations. As an example,\
    \ Figure 12 shows the estimated RF power\ndistribution for bi-dimensional planes\
    \ at two different heights (ground level and building’s third ﬂoor\nlevel -at\
    \ the gateway’s height) for the smart irrigation use case (in Figure 12a, where\
    \ the transmitter is\nat the center of the Green scenario) and the smart trafﬁc-monitoring\
    \ case (Figure 12b, transmitter at the\nfurthest point of the Red Scenario). The\
    \ used simulation parameters are also those shown in Table 3.\nAs can be observed\
    \ in Figure 12, the transmitter location (marked as a white circle with a T) and\
    \ the\nmorphology of the scenario (mainly the building location) greatly affect\
    \ wireless signal propagation.\nNevertheless, the estimated RF signal strength\
    \ is quite high, taking into account the sensitivity of the\nemployed LoRaWAN\
    \ devices (i.e., −137 dBm) and the fact that the most common sensitivity value\
    \ is\n−148 dBm (see Table 4).\nTo determine whether the chosen gateway location\
    \ will comply with the required sensitivity\nfor the proposed LoRaWAN node locations,\
    \ 3D Ray-Launching simulation results were performed.\nAs an example, Figure 13\
    \ summarizes the sensitivity analysis carried out for the use case illustrated\n\
    in Figure 12b (i.e., for the furthest LoRaWAN node deployed for the smart trafﬁc-monitoring\
    \ use\ncase). Speciﬁcally, Figure 13a shows the estimations obtained when the\
    \ transmitter is operating at\n20 dBm for different heights: ground level, third\
    \ ﬂoor, and fourth ﬂoor. Figure 13b presents the same\nresults, but for a lower\
    \ transmission power (5 dBm). Finally, Figure 14 depicts the results for the\n\
    sensitivity analysis based on the results obtained when transmitting at 5 dBm.\
    \ This last Figure shows\nthe areas and spots of the scenario that comply (dark\
    \ blue) and do not comply (light blue) with the\nselected sensitivity value (in\
    \ this case, the typical −148 dBm). The results show that for the case of\ntransmitting\
    \ at 20 dBm, there is no problem in terms of sensitivity threshold, but for the\
    \ case of using\n5 dBm, potential problems with this threshold appear within the\
    \ building where the gateway is placed\n(this represented by the light blue surfaces\
    \ at the top and left sides of the bi-dimensional planes).\nTherefore, a trade-off\
    \ decision should be made to choose a transmission power level that ensures good\n\
    sensitivity and, at the same time, the optimization of the energy consumption\
    \ of the deployed motes.\nIn fact, the results show that the gateway location\
    \ could be improved by moving it from the third ﬂoor\nto the fourth ﬂoor. Thus,\
    \ the deployment of the LoRaWAN network can be optimized by the presented\n3D\
    \ Ray-Launching algorithm in relation to its coverage and the overall energy consumption\
    \ of the\nwireless communications system.\nSensors 2019, 19, 3287\n22 of 30\n\
    (a)\n(b)\nFigure 12. Bi-dimensional planes of the estimated RF power distribution\
    \ for two different heights.\n(a) Green scenario; (b) Red scenario.\n(a)\n(b)\n\
    Figure 13. Bi-dimensional planes of the estimated RF power distribution for two\
    \ different heights.\n(a) transmission power 20 dBm, (b) transmission power 5\
    \ dBm.\nSensors 2019, 19, 3287\n23 of 30\nFigure 14. Bi-dimensional planes of\
    \ the estimated RF power distribution for three different heights:\nsensitivity\
    \ fulﬁllment (threshold = −148 dBm).\n6. Discussion\nThe results presented in\
    \ the previous section indicate the impact that the campus scenario has in\nradio-planning\
    \ analysis and hence, in the determination of the optimal network layout. It must\
    \ be\nﬁrst pointed out that the obtained results are hard to generalize, since\
    \ the analyzed campus scenarios\nhave particular characteristics that make them\
    \ almost unique. Such characteristics include the size of\nthe campus or the distribution\
    \ of elements within it (mainly the buildings and their size and material\nproperties),\
    \ which have a great impact on radio signal propagation. Moreover, the topology\
    \ of the\ndeployed wireless network (i.e., the location of the nodes) has also\
    \ a great inﬂuence on wireless\ncommunications performance. Therefore, the proposed\
    \ methodology and solution have been validated\nin the presented paper, but it\
    \ has to be noted that site-speciﬁc assessments are needed (that is, the\nresults\
    \ obtained for a speciﬁc campus environment cannot be generalized for any other\
    \ campus\nscenario). Nonetheless, some aspects and results can be generalized\
    \ up to a point (e.g., the received RF\npower for LoS situations), which are discussed\
    \ in the following paragraphs.\nOne of the advantages in the use of LoRaWAN transceivers\
    \ is their inherent low sensitivity values\n(in the range of −135.5 dBm to −148\
    \ dBm), which improve the reception range in comparison to other\ntechnologies.\
    \ In all the observed simulation and measurement results, the received power levels\
    \ are\nabove −120 dBm, providing a sound margin to consider additional losses,\
    \ such as the ones due to the\nvariable fading related to user movements or to\
    \ the dynamic elements within the campus.\nIn the speciﬁc outdoor applications\
    \ considered for the smart campus, non-directional antennas\nprovide adequate\
    \ functionality, given the fact that theoretically, users and nodes can be located\
    \ at any\ngiven location within the scenario. Nonetheless, in certain applications\
    \ directional antennas may be\nhelpful (e.g., in telemetry applications where\
    \ the receiver is static, Yagi-Uda, helical or patch array\nantennas could be\
    \ used), increasing received power levels, thus improving the communications range.\n\
    As can be observed in the experimental results, a coverage level of 20 dBm is\
    \ appropriate for all\nthe considered scenarios. However, it is desirable to reduce\
    \ transmission power to reduce overall\nSensors 2019, 19, 3287\n24 of 30\nenergy\
    \ consumption as well as potential interference. For certain applications, tailored\
    \ antennas may\nbe considered during the network planning and the deployment phases.\n\
    The presented measurement results indicate that mainly due to the characteristics\
    \ of the scenario,\nthere is an appropriate coverage for a linear distance of\
    \ 450 m with LoS (measurement point #16) and\n330 m with NLoS (measurement point\
    \ #19). The obtained results conclude that the location of the\ngateway is appropriate\
    \ in terms of coverage estimation when there is LoS and in most situations where\n\
    there is NLoS. The latter case requires in-depth analysis of the potential locations\
    \ of the nodes, in order\nto consider effective losses related to building penetration,\
    \ which on average can vary from 7 dB to\nover 25 dB depending on the building\
    \ and wall structure [113].\nIn terms of capacity, LoRa/LoRaWAN provides a transmission\
    \ speed of up to 50 Kbps, which\nis enough for a wide range of remote monitoring\
    \ applications where users send small amounts of\ninformation or where nodes are\
    \ polled with a moderate periodicity (i.e., several seconds) to provide\ninformation\
    \ from sensors. Speciﬁc applications (e.g., real-time image monitoring) that require\
    \ higher\nbandwidths can make use of alternative wireless technologies that can\
    \ coexist together with the\nproposed LoRaWAN network.\n7. Conclusions\nAfter\
    \ a thorough review of the state of the art on the most relevant aspects related\
    \ to the\ndeployment of smart campuses, this work detailed the design and deployment\
    \ of a LoRaWAN\nIoT-based infrastructure able to provide novel applications in\
    \ a smart campus. The architecture\nproposed the deployment of fog computing nodes\
    \ throughout the campus to support physically\ndistributed, low-latency, and location-aware\
    \ applications that decrease the network trafﬁc and the\ncomputational load of\
    \ traditional cloud computing systems.\nTo evaluate the proposed system,\na campus\
    \ of the University of A Coruña was recreated realistically through an in-house\
    \ developed\n3D Ray-Launching radio-planning simulator. Such a tool was tested\
    \ by comparing its output with\nempirical measurements, showing a good accuracy.\
    \ The proposed solution meets the established\noperational requirements:\n•\n\
    The provided coverage is roughly 1 km2.\n•\nThe system provides robustness against\
    \ signal losses and interference by being able to deploy\nredundant gateways.\n\
    •\nThe use of fog computing nodes supports low-latency and location-aware IoT\
    \ applications.\n•\nThe maximum provided transmission speed reaches 50 Kbps.\n\
    •\nThe system has been devised to make use of low-cost resource-constrained IoT\
    \ nodes.\n•\nThe network topology support both PMP and PtP links.\nIn addition,\
    \ three practical smart campus applications were designed and evaluated with the\n\
    planning simulator (a mobility pattern detection system, a smart irrigation solution,\
    \ and a smart\ntrafﬁc-monitoring deployment), showing that the tool is able to\
    \ provide useful guidelines and insights\nto future smart campus designers and\
    \ developers.\nAuthor Contributions: P.F.-L., P.L.-I. and T.M.F.-C. conceived\
    \ and designed the experiments; T.M.F.-C., M.S.-A.\nand P.F.-L. performed the\
    \ experiments; M.C.-E., P.L.-I. and L.A. created the scenario and performed the\
    \ simulations;\nP.L.-I., E.A. and F.F. processed the simulation results; T.M.F.-C.,\
    \ P.L.-I. and P.F.-L. analyzed the data; P.F.-L., T.M.F.-C.,\nP.L.-I., L.A. and\
    \ L.C. wrote the paper.\nFunding: This work has been funded by the Xunta de Galicia\
    \ (ED431C 2016-045, ED431G/01), the Agencia Estatal\nde Investigación of Spain\
    \ (TEC2016-75067-C4-1-R) and ERDF funds of the EU (AEI/FEDER, UE).\nConﬂicts of\
    \ Interest: The authors declare no conﬂict of interest.\nReferences\n1.\nFortes,\
    \ S.; Santoyo-Ramón, J.A.; Palacios, D.; Baena, E.; Mora-García, R.; Medina, M.;\
    \ Mora, P.; Barco, R. The\nCampus as a Smart City: University of Málaga Environmental,\
    \ Learning, and Research Approaches. Sensors\n2019, 19, 1349. [CrossRef] [PubMed]\n\
    Sensors 2019, 19, 3287\n25 of 30\n2.\nAbuarqoub, A.; Abusaimeh, H.; Hammoudeh,\
    \ M.; Uliyan, D.; Abu-Hashem, M.A.; Murad, S.; Al-Fayez, F.\nA survey on internet\
    \ of things enabled smart campus applications. In Proceedings of the International\n\
    Conference on Future Networks and Distributed Systems, Cambridge, UK, 19–20 July\
    \ 2017; p. 50.\n3.\nHernández-Rojas, D.L.; Fernández-Caramés, T.M.; Fraga-Lamas,\
    \ P.; Escudero, C.J. Design and Practical\nEvaluation of a Family of Lightweight\
    \ Protocols for Heterogeneous Sensing through BLE Beacons in IoT\nTelemetry Applications.\
    \ Sensors 2018, 18, 57. [CrossRef] [PubMed]\n4.\nSivanathan, A.; Sherratt, D.;\
    \ Gharakheili, H.H.; Radford, A.; Wijenayake, C.; Vishwanath, A.; Sivaraman, V.\n\
    Characterizing and classifying IoT trafﬁc in smart cities and campuses. In Proceedings\
    \ of the 2017 IEEE\nConference on Computer Communications Workshops (INFOCOM WKSHPS),\
    \ Atlanta, GA, USA, 1–4 May\n2017; pp. 559–564.\n5.\nBates, O.; Friday, A. Beyond\
    \ Data in the Smart City: Repurposing Existing Campus IoT. IEEE Pervasive\nComput.\
    \ 2017, 16, 54–60. [CrossRef]\n6.\nFroiz-Míguez, I.; Fernández-Caramés, T.M.;\
    \ Fraga-Lamas, P.; Castedo, L. Design, Implementation and\nPractical Evaluation\
    \ of an IoT Home Automation System for Fog Computing Applications Based on MQTT\n\
    and ZigBee-WiFi Sensor Nodes. Sensors 2018, 18, 2660. [CrossRef] [PubMed]\n7.\n\
    Berry College Ofﬁcial Web Page on Its Campus Extension. Available online: https://www.berry.edu/\n\
    eaglecam/learn/ (accessed on 31 March 2019).\n8.\nDuke University Ofﬁcial Web\
    \ Page on Its Campus Extension. Available online: https://today.duke.edu/\n2011/11/onlinemaplaunch\
    \ (accessed on 31 March 2019).\n9.\nStanford University Web Page on the Extension\
    \ of Its Lands. Available online: https://facts.stanford.edu/\nabout/lands/ (accessed\
    \ on 31 March 2019).\n10.\nGumprecht, B. The campus as a public space in the American\
    \ college town. J. Hist. Geogr. 2007, 33, 72–103.\n[CrossRef]\n11.\nNational Institute\
    \ for Education Policy Reseach, Guide to the Creation of a Strategic Campus Master\
    \ Plan.\nAvailable online: https://www.nier.go.jp/shisetsu/pdf/e-masterplan.pdf\
    \ (accessed on 31 March 2019).\n12.\nPrinceton\nUniversity\nCampus\nPlan.\nAvailable\n\
    online:\nhttps://pr.princeton.edu/doc/\nPrincetonCampusPlan2017.pdf (accessed\
    \ on 31 March 2019).\n13.\nWollongong Campus Master Plan. Available online: https://www.uow.edu.au/content/groups/public/\n\
    @web/@pmcd/@smc/documents/doc/uow220188.pdf (accessed on 31 March 2019).\n14.\n\
    Sanchez-Iborra, R.; Cano, M.-D. State of the Art in LP-WAN Solutions for Industrial\
    \ IoT Services. Sensors\n2016, 16, 708. [CrossRef]\n15.\n3GPP Completed the Standardization\
    \ of NB-IOT. Available online: http://www.3gpp.org/news-events/\n3gpp-news/1785-nb_iot_complete\
    \ (accessed on 31 March 2019).\n16.\nSigfox Ofﬁcial Webpage. Available online:\
    \ https://www.sigfox.com/ (accessed on 31 March 2019).\n17.\nIngenu Ofﬁcial Webpage.\
    \ Available online: https://www.ingenu.com/ (accessed on 31 March 2019).\n18.\n\
    Weightless Ofﬁcial Webpage. Available online: http://www.weightless.org/ (accessed\
    \ on 31 March 2019).\n19.\nLoRa-Alliance. LoRaWAN What is it? A Technical Overview\
    \ of LoRa and LoRaWAN; White Paper; The LoRa\nAlliance: San Ramon, CA, USA, 2015.\n\
    20.\nAdelantado, F.; Vilajosana, X.; Tuset-Peiro, P.; Martinez, B.; Melia-Segui,\
    \ J.; Watteyne, T. Understanding the\nLimits of LoRaWAN. IEEE Commun. Mag. 2017,\
    \ 55, 34–40. [CrossRef]\n21.\nYang, G.; Liang, H. A Smart Wireless Paging Sensor\
    \ Network for Elderly Care Application Using LoRaWAN.\nIEEE Sens. J. 2018, 22,\
    \ 9441–9448. [CrossRef]\n22.\nLuvisotto, M.; Tramarin, F.; Vangelista, L.; Vitturi,\
    \ S. On the Use of LoRaWAN for Indoor Industrial IoT\nApplications. Wirel. Commun.\
    \ Mob. Comput. 2018, 18. [CrossRef]\n23.\nSemtech AN 120022 LoRa Modulation Basics,\
    \ May 2015. Available online: https://www.semtech.com/\nuploads/documents/an1200.22.pdf\
    \ (accessed on 31 March 2019).\n24.\nSuárez-Albela, M.; Fernández-Caramés, T.;\
    \ Fraga-Lamas, P.; Castedo, L. A Practical Evaluation of a\nHigh-Security Energy-Efﬁcient\
    \ Gateway for IoT Fog Computing Applications.\nSensors 2017, 17, 1978.\n[CrossRef]\n\
    25.\nWang, S.; Chen, Y.-R.; Chen, T.-Y.; Chang, C.-H.; Cheng, Y.-H.; Hsu, C.-C.;\
    \ Lin, Y.-B. Performance of\nLoRa-Based IoT Applications on Campus. In Proceedings\
    \ of the 2017 IEEE 86th Vehicular Technology\nConference (VTC-Fall), Toronto,\
    \ ON, Canada, 24–27 September 2017; pp. 1–6.\nSensors 2019, 19, 3287\n26 of 30\n\
    26.\nCesana, M.; Redondi, A.; Ort‘ın, J. A Framework for Planning LoRaWan Networks.\
    \ In Proceedings of the\n2018 IEEE 29th Annual International Symposium on Personal,\
    \ Indoor and Mobile Radio Communications\n(PIMRC), Bologna, Italy, 9–12 September\
    \ 2018; pp. 1–7.\n27.\nSadowski, S.; Spachos, P. RSSI-Based Indoor Localization\
    \ with the Internet of Things. IEEE Access 2018, 6,\n30149–30161. [CrossRef]\n\
    28.\nCasino, F.; Azpilicueta, L.; Lopez-Iturri, P.; Aguirre, E.; Falcone, F.;\
    \ Solanas, A. Optimized Wireless\nChannel Characterization in Large Complex Environments\
    \ by Hybrid Ray Launching-Collaborative Filtering\nApproach. IEEE Antennas Wirel.\
    \ Propag. Lett. 2017, 16, 780–783. [CrossRef]\n29.\nVargas, C.E.O.; Silva, M.M.;\
    \ Arnez, J.J.A.; Mello, L.D.S. Initial Results of Millimeter Wave Outdoor\nPropagation\
    \ Measurements in a Campus Environment. In Proceedings of the 2018 IEEE-APS Topical\n\
    Conference on Antennas and Propagation in Wireless Communications (APWC), Cartagena\
    \ de Indias,\nColombia, 10–14 September 2018; pp. 901–904.\n30.\nChen, X.; Jin,\
    \ R.; Suh, K.; Wang, B.; Wei, W. Network performance of smart mobile handhelds\
    \ in a university\ncampus Wi-Fi network. In Proceedings of the 2012 Internet Measurement\
    \ Conference, Boston, MA, USA,\n14–16 November 2012; pp. 315–328.\n31.\nAtif,\
    \ Y.; Mathew, S.S.; Lakas, A. Building a smart campus to support ubiquitous learning.\
    \ J. Ambient. Intell.\nHumaniz. Comput. 2015, 6, 223–238. [CrossRef]\n32.\nHirsch,\
    \ B.; Ng, J.W. Education beyond the cloud: Anytime-anywhere learning in a smart\
    \ campus\nenvironment. In Proceedings of the 2011 IEEE International Conference\
    \ for Internet Technology and\nSecured Transactions, Abu Dhabi, UAE, 11–14 December\
    \ 2011; pp. 718–723.\n33.\nBakken, J.P.; Uskov, V.L.; Penumatsa, A.; Doddapaneni,\
    \ A. Smart universities, smart classrooms and students\nwith disabilities. In\
    \ Smart Education and e-Learning; Springer: Cham, Switzerland, 2016; pp. 15–27.\n\
    34.\nKwok, L.F. A vision for the development of i-campus. Smart Learn. Environ.\
    \ 2015, 2, 1–12. [CrossRef]\n35.\nVienna University of Technology, University\
    \ of Ljubljana, Delft University of Technology, Technical Report:\nSmart Cities,\
    \ Ranking of European Medium-Size Cities, 2007. Available online: http://www.smart-cities.\n\
    eu/download/smart_cities_ﬁnal_report.pdf (accessed on 31 March 2019).\n36.\nWu,\
    \ F.; Rüdiger, C.; Redouté, J.; Yuce, M.R. WE-Safe: A wearable IoT sensor node\
    \ for safety applications\nvia LoRa. In Proceedings of the 2018 IEEE 4th World\
    \ Forum on Internet of Things (WF-IoT), Singapore,\n5–8 February 2018; pp. 144–148.\n\
    37.\nBlanco-Novoa, O.; Fernández-Caramés, T.M.; Fraga-Lamas, P.; Castedo, L. A\
    \ Cost-Effective IoT System for\nMonitoring Indoor Radon Gas Concentration. Sensors\
    \ 2018, 18, 2198. [CrossRef] [PubMed]\n38.\nFernández-Caramés, T.M.; Fraga-Lamas,\
    \ P.\nDesign of a Fog Computing, Blockchain and IoT-Based\nContinuous Glucose\
    \ Monitoring System for Crowdsourcing mHealth. Proceedings 2019, 4, 37. [CrossRef]\n\
    39.\nPompei, L.; Mattoni, B.; Bisegna, F.; Nardecchia, F.; Fichera, A.; Gagliano,\
    \ A.; Pagano, A. Composite\nIndicators for Smart Campus: Data Analysis Method.\
    \ In Proceedings of the IEEE International Conference\non Environment and Electrical\
    \ Engineering and the IEEE Industrial and Commercial Power Systems Europe,\nPalermo,\
    \ Italy, 12–15 June 2018.\n40.\nCao, J.; Li, Z.; Luo, Q.; Hao, Q.; Jiang, T. Research\
    \ on the Construction of Smart University Campus Based on\nBig Data and Cloud\
    \ Computing. In Proceedings of the International Conference on Engineering Simulation\n\
    and Intelligent Control (ESAIC), Changsha, China, 10–11 August 2018.\n41.\nHaghi,\
    \ A.; Burney, K.; Kidd, F.S.; Valiente, L.; Peng, Y. Fast-paced development of\
    \ a smart campus IoT\nplatform. In Proceedings of the Global Internet of Things\
    \ Summit, Geneva, Switzerland, 6–9 June 2017.\n42.\nMajeed, A.; Ali, M. How Internet-of-Things\
    \ (IoT) making the university campuses smart? QA higher\neducation (QAHE) perspective.\
    \ In Proceedings of the IEEE 8th Annual Computing and Communication\nWorkshop\
    \ and Conference (CCWC), Las Vegas, NV, USA, 8–10 January 2018.\n43.\nAlghamdi,\
    \ A.; Shetty, S. Survey Toward a Smart Campus Using the Internet of Things. In\
    \ Proceedings of\nthe IEEE 4th International Conference on Future Internet of\
    \ Things and Cloud (FiCloud), Vienna, Austria,\n22–24 August 2016.\n44.\nYu, Z.;\
    \ Liang, Y.; Xu, B.; Yang, Y.; Guo, B. Towards a Smart Campus with Mobile Social\
    \ Networking.\nIn Proceedings of the International Conference on Internet of Things\
    \ and 4th International Conference on\nCyber, Physical and Social Computing, Dalian,\
    \ China, 19–22 October 2011.\n45.\nHipwell, S. Developing smart campuses — A working\
    \ model. In Proceedings of the International Conference\non Intelligent Green\
    \ Building and Smart Grid (IGBSG), Taipei, Taiwan, 23–25 April 2014.\nSensors\
    \ 2019, 19, 3287\n27 of 30\n46.\nAli, S.; Rizzo, G.; Mancuso, V.; Marsan, M.A.\
    \ Persistence and availability of ﬂoating content in a campus\nenvironment. In\
    \ Proceedings of the IEEE Conference on Computer Communications, Hong Kong, China,\n\
    26 April–1 May 2015.\n47.\nPopescu, D.E.; Prada, M.F.; Dodescu, A.; Hemanth, D.J.;\
    \ Bungau, C. A secure conﬁdent cloud computing\narchitecture solution for a smart\
    \ campus. In Proceedings of the 7th International Conference on Computers\nCommunications\
    \ and Control (ICCCC), Oradea, Romania, 8–12 May 2018.\n48.\nMarjanovi´c, M.;\
    \ Antoni´c, A.; Žarko, I.P. Edge Computing Architecture for Mobile Crowdsensing.\
    \ IEEE Access\n2018, 6, 10662–10674. [CrossRef]\n49.\nFernández-Caramés, T.M.;\
    \ Fraga-Lamas, P.; Suárez-Albela, M.; Díaz-Bouza, M. A Fog Computing Based\nCyber-Physical\
    \ System for the Automation of Pipe-Related Tasks in the Industry 4.0 Shipyard.\
    \ Sensors 2018,\n18, 1961. [CrossRef]\n50.\nFernández-Caramés, T.M.; Fraga-Lamas,\
    \ P.; Suárez-Albela, M.; Vilar-Montesinos, M. A Fog Computing and\nCloudlet Based\
    \ Augmented Reality System for the Industry 4.0 Shipyard. Sensors 2018, 18, 1798.\
    \ [CrossRef]\n51.\nXu, Q.; Su, Z.; Wang, Y.; Dai, M. A Trustworthy Content Caching\
    \ and Bandwidth Allocation Scheme with\nEdge Computing for Smart Campus. IEEE\
    \ Access 2018, 6, 63868–63879. [CrossRef]\n52.\nChang, Y.; Lai, Y. Campus Edge\
    \ Computing Network Based on IoT Street Lighting Nodes. IEEE Syst. J. 2018,\n\
    doi.10.1109/JSYST.2018.2873430. [CrossRef]\n53.\nLiu, Y.; Shou, G.; Hu, Y.; Guo,\
    \ Z.; Li, H.; Beijing, F.P.; Seah, H.S. Towards a smart campus:\nInnovative applications\
    \ with WiCloud platform based on mobile edge computing. In Proceedings of\nthe\
    \ 12th International Conference on Computer Science and Education (ICCSE), Houston,\
    \ TX, USA,\n22–25 Auguat 2017.\n54.\nAgate, V.; Concone, F.; Ferraro, P. WiP:\
    \ Smart Services for an Augmented Campus. In Proceedings of the\nIEEE International\
    \ Conference on Smart Computing (SMARTCOMP), Taormina, Italy, 18–20 July 2018.\n\
    55.\nGhosh, A.; Chakraborty, N. Design of smart grid in an University Campus using\
    \ ZigBee mesh networks.\nIn Proceedings of the IEEE 1st International Conference\
    \ on Power Electronics, Intelligent Control and Energy\nSystems (ICPEICES), Delhi,\
    \ India, 4–6 July 2016.\n56.\nAlvarez-Campana, M.; López, G.; Vázquez, E.; Villagrá,\
    \ V.A.; Berrocal, J. Smart CEI Moncloa: An IoT-based\nPlatform for People Flow\
    \ and Environmental Monitoring on a Smart University Campus. Sensors 2017,\n17,\
    \ 12. [CrossRef] [PubMed]\n57.\nBai, S.; Chiu, C.; Hsu, J.; Leu, J. Campus-wide\
    \ wireless indoor positioning with hybrid iBeacon and Wi-Fi\nsystem. In Proceedings\
    \ of the 6th International Symposium on Next Generation Electronics (ISNE), Keelung,\n\
    Taiwan, 23–24 May 2017.\n58.\nWang, M.; Brassil, J. Managing large scale, ultra-dense\
    \ beacon deployments in smart campuses.\nIn Proceedings of the IEEE Conference\
    \ on Computer Communications Workshops (INFOCOM WKSHPS),\nHong Kong, China, 26\
    \ April–1 May 2015.\n59.\nHan, T.-D.; Cheong, C.; Ann, J.-W.; Kim, J.-Y.; Yoon,\
    \ H.-M.; Lee, C.-S.; Shin, H.-G.; Lee, Y.-J.; Yook, H.-M.;\nJeon, M.-H.; et al.\
    \ Implementation of new services to support ubiquitous computing for campus life.\n\
    In Proceedings of the Second IEEE Workshop on Software Technologies for Future\
    \ Embedded and Ubiquitous\nSystems, Vienna, Austria, 12 May 2004.\n60.\nXu, X.;\
    \ Li, D.; Sun, M.; Yang, S.; Yu, S.; Manogaran, G.; Mastorakis, G.; Mavromoustakis,\
    \ C.X. Research\non Key Technologies of Smart Campus Teaching Platform Based on\
    \ 5G Network. IEEE Access 2019, 7,\n20664–20675. [CrossRef]\n61.\nTelensa Ultra\
    \ Narrow Band (UNB) Ofﬁcial Webpage.\nAvailable online: https://www.telensa.com/\n\
    technology#top (accessed on 31 March 2019).\n62.\nWaviot NB-Fi Ofﬁcial Webpage.\
    \ Available online: https://waviot.com/technology/what-is-nb-ﬁ (accessed\non 31\
    \ March 2019).\n63.\nLoriot, M.; Aljer, A.; Shahrour, I. Analysis of the use of\
    \ LoRaWan technology in a large-scale smart city\ndemonstrator. In Proceedings\
    \ of the 2017 Sensors Networks Smart and Emerging Technologies (SENSET),\nBeirut,\
    \ Lebanon, 12–14 September 2017; pp. 1–4.\n64.\nWang, S.; Zou, J.; Chen, Y.; Hsu,\
    \ C.; Cheng, Y.; Chang, C. Long-Term Performance Studies of a\nLoRaWAN-Based PM2.5\
    \ Application on Campus. In Proceedings of the 2018 IEEE 87th Vehicular Technology\n\
    Conference (VTC Spring), Porto, Portugal, 3–6 June 2018; pp. 1–5.\nSensors 2019,\
    \ 19, 3287\n28 of 30\n65.\nLee, H.; Ke, K. Monitoring of Large-Area IoT Sensors\
    \ Using a LoRa Wireless Mesh Network System: Design\nand Evaluation. IEEE Trans.\
    \ Instrum. Meas. 2018, 67, 2177–2187. [CrossRef]\n66.\nWebb, J.; Hume, D. Campus\
    \ IoT collaboration and governance using the NIST cybersecurity framework.\nIn\
    \ Proceedings of the Living in the Internet of Things: Cybersecurity of the IoT,\
    \ London, UK, 28–29 March\n2018.\n67.\nVerstaevel, N.; Boes, J.; Gleizes, M. From\
    \ smart campus to smart cities issues of the smart revolution.\nIn Proceedings\
    \ of the IEEE SmartWorld, Ubiquitous Intelligence & Computing, Advanced & Trusted\n\
    Computed, Scalable Computing & Communications, Cloud & Big Data Computing, Internet\
    \ of People and\nSmart City Innovation, San Francisco, CA, USA, 4–8 August 2017.\n\
    68.\nPagliaro, F.; Mattoni, B.; Gugliermenti, F.; Bisegna, F.; Azzaro, B.; Tomei,\
    \ F.; Catucci, S. A roadmap toward\nthe development of Sapienza Smart Campus.\
    \ In Proceedings of the IEEE 16th International Conference on\nEnvironment and\
    \ Electrical Engineering (EEEIC), Florence, Italy, 7–10 June 2016.\n69.\nGuo,\
    \ M.; Zhang, Y. The research of smart campus based on Internet of Things & cloud\
    \ computing.\nIn Proceedings of the 11th International Conference on Wireless\
    \ Communications, Networking and Mobile\nComputing (WiCOM 2015), Shanghai, China,\
    \ 21–23 September 2015.\n70.\nMuhamad, W.; Kurniawan, N.B.; Suhardi; Yazid, S.\
    \ Smart campus features, technologies, and applications:\nA systematic literature\
    \ review. In Proceedings of the International Conference on Information Technology\n\
    Systems and Innovation (ICITSI), Bandung, Indonesia, 23–24 October 2017.\n71.\n\
    Hengliang, T.; Chuanrong, C. The Construction of Intelligent Transportation System\
    \ Based on the\nConstruction of Wisdom Campus—Take Soochow University as an Example.\
    \ In Proceedings of the Eighth\nInternational Conference on Measuring Technology\
    \ and Mechatronics Automation (ICMTMA), Macau,\nChina, 11–12 March 2016.\n72.\n\
    Bandara, H.M.A.P.K.; Jayalath, J.D.C.; Rodrigo, A.R.S.P.; Bandaranayake, A.U.;\
    \ Maraikar, Z.; Ragel, R.G.\nSmart campus phase one: Smart parking sensor network.\
    \ In Proceedings of the Manufacturing & Industrial\nEngineering Symposium (MIES),\
    \ Colombo, Sri Lanka, 22 October 2016.\n73.\nBracco, S.; Brenna, M.; Delfmo, F.;\
    \ Foiadelli, F.; Longo, M. Preliminary study on electric mobility applied to a\n\
    University Campus in North Italy. In Proceedings of the 6th International Conference\
    \ on Clean Electrical\nPower (ICCEP), Santa Margherita Ligure, Italy, 27–29 June\
    \ 2017.\n74.\nBrenna, M.; Foiadelli, F.; Longo, M.; Bracco, S.; Delﬁno, F. Sustainable\
    \ electric mobility analysis in the\nSavona Campus of the University of Genoa.\
    \ In Proceedings of the IEEE 16th International Conference on\nEnvironment and\
    \ Electrical Engineering (EEEIC), Florence, Italy, 7–10 June 2016.\n75.\nYagcitekin,\
    \ B.; Uzunoglu, M.; Ocal, B.; Turan, E.; Tunc, A. Development of Smart Charging\
    \ Strategies for\nElectric Vehicles in a Campus Area. In Proceedings of the European\
    \ Modelling Symposium, Manchester, UK,\n20–22 November 2013.\n76.\nBásaca-Preciado,\
    \ L.C.; Orozco-Garcia, N.A.; Terrazas-Gaynor, J.M.; Moreno-Partida, A.S.; Rosete-Beas,O.A.;\n\
    Rizzo-Aguirre, J.; Martinez-Grijalva, L.F.; Ponce-Camacho, M.A. Intelligent Transportation\
    \ Scheme for\nAutonomous Vehicle in Smart Campus. In Proceedings of the 44th Annual\
    \ Conference of the IEEE Industrial\nElectronics Society, Washington, DC, USA,\
    \ 21–23 October 2018.\n77.\nChit, S.M.; Chaw, L.Y.; Thong, C.L.; Lee, C.Y. A pilot\
    \ study: Shuttle bus tracker app for campus users.\nIn Proceedings of the International\
    \ Conference on Research and Innovation in Information Systems (ICRIIS),\nLangkawi,\
    \ Malaysia, 10 August 2017.\n78.\nBracco, S.; Delﬁno, F.; Laiolo, P.; Rossi, M.\
    \ The Smart City Energy infrastructures at the Savona Campus of\nthe University\
    \ of Genoa. In Proceedings of the AEIT International Annual Conference (AEIT),\
    \ Capri, Italy,\n5–7 October 2016.\n79.\nSharma, H.; Kaur, G. Optimization and\
    \ simulation of smart grid distributed generation: A case study\nof university\
    \ campus. In Proceedings of the IEEE Smart Energy Grid Engineering (SEGE), Oshawa,\
    \ ON,\nCanada, 21–24 August 2016.\n80.\nLazaroiu, G.C.; Dumbrava, V.; Costoiu,\
    \ M.; Teliceanu, M.; Roscia, M. Smart campus-an energy integrated\napproach. In\
    \ Proceedings of the International Conference on Renewable Energy Research and\
    \ Applications\n(ICRERA), Palermo, Italy, 22–25 November 2015.\nSensors 2019,\
    \ 19, 3287\n29 of 30\n81.\nPagliaro, F.; Mattoni, B.; Ponzo, V.; Corona, G.; Nardecchia,\
    \ F.; Bisegna, F.; Gugliermetti, F. Sapienza smart\ncampus: From the matrix approach\
    \ to the applicative analysis of an optimized garbage collection system.\nIn Proceedings\
    \ of the IEEE International Conference on Environment and Electrical Engineering\
    \ and the\nIEEE Industrial and Commercial Power Systems Europe, Milan, Italy,\
    \ 6–9 June 2017.\n82.\nVerma, P.; Kumar, A.; Rathod, N.; Jain, P.; Mallikarjun,\
    \ S.; Subramanian, R.; Amrutur, B.; Kumar, M.S.M.;\nSundaresan, R. Towards an\
    \ IoT based water management system for a campus. In Proceedings of the IEEE\n\
    First International Smart Cities Conference (ISC2), Guadalajara, Mexico, 25–28\
    \ October 2015.\n83.\nLiu, R.; Kuo, C.; Yang, C.; Chen, S.; Liu, J. On Construction\
    \ of an Energy Monitoring Service Using Big Data\nTechnology for Smart Campus.\
    \ In Proceedings of the 7th International Conference on Cloud Computing and\n\
    Big Data (CCBD), Macau, China, 16–18 November 2016.\n84.\nLazaroiu, G.C.; Dumbrava,\
    \ V.; Costoiu, M.; Teliceanu, M.; Roscia, M. Energy-informatic-centric smart campus.\n\
    In Proceedings of the IEEE 16th International Conference on Environment and Electrical\
    \ Engineering (EEEIC),\nFlorence, Italy, 7–10 June 2016.\n85.\nBacanli, S.S.;\
    \ Solmaz, G.; Turgut, D. Opportunistic Message Broadcasting in Campus Environments.\n\
    In Proceedings of the IEEE Global Communications Conference (GLOBECOM), San Diego,\
    \ CA, USA,\n6–10 December 2015.\n86.\nZhang, S.; Li, X. Mobility patterns of human\
    \ population among university campuses. In Proceedings of the\nIEEE Asia Paciﬁc\
    \ Conference on Circuits and Systems, Jeju, Korea, 25–28 October 2016.\n87.\n\
    Concone, F.; Ferraro, P.; Lo Re, G. Towards a Smart Campus Through Participatory\
    \ Sensing. In Proceedings\nof the IEEE International Conference on Smart Computing\
    \ (SMARTCOMP), Taormina, Italy, 18–20 June 2018.\n88.\nBilgi, S.; Ozturk, O.;\
    \ Gulnerman, A.G. Navigation system for blind, hearing and visually impaired people\n\
    in ITU Ayazaga campus. In Proceedings of the International Conference on Computing\
    \ Networking and\nInformatics (ICCNI), Lagos, Nigeria, 29–31 October 2017.\n89.\n\
    Yong, Q.; Cheng, B.; Xing, Y. A Novel Quantum Ant Colony Algorithm Used for Campus\
    \ Path.\nIn Proceedings of the IEEE International Conference on Computational\
    \ Science and Engineering (CSE)\nand IEEE International Conference on Embedded\
    \ and Ubiquitous Computing (EUC), Guangzhou, China,\n21–24 July 2017.\n90.\nÖzcan,\
    \ U.; Arslan, A.; ˙Ilkyaz, M.; Karaarslan, E. An augmented reality application\
    \ for smart campus\nurbanization: MSKU campus prototype. In Proceedings of the\
    \ 5th International Istanbul Smart Grid and\nCities Congress and Fair (ICSG),\
    \ Istanbul, Turkey, 19–21 April 2017.\n91.\nSutjarittham, T.; Habibi Gharakheili,\
    \ H.; Kanhere, S.S.; Sivaraman, V. Data-Driven Monitoring and\nOptimization of\
    \ Classroom Usage in a Smart Campus. In Proceedings of the17th ACM/IEEE International\n\
    Conference on Information Processing in Sensor Networks (IPSN), Porto, Portugal,\
    \ 11–13 April 2018.\n92.\nLiang, T.; Tsai, C. Application of Intelligent Monitoring\
    \ System in Campus Greenhouse. In Proceedings of\nthe International Conference\
    \ on Information, Communication and Engineering (ICICE), Xiamen, China,\n17–20\
    \ November 2017.\n93.\nLu, J.; Xu, X.; Li, X.; Li, L.; Chang, C.-C.; Feng, X.;\
    \ Zhang, S. Detection of Bird’s Nest in High Power Lines in\nthe Vicinity of Remote\
    \ Campus Based on Combination Features and Cascade Classiﬁer. IEEE Access 2018,\
    \ 6,\n39063–39071. [CrossRef]\n94.\nLiang, Y.; Chen, Z. Intelligent and Real-Time\
    \ Data Acquisition for Medical Monitoring in Smart Campus.\nIEEE Access 2018,\
    \ 6, 74836-74846. [CrossRef]\n95.\nGjoreski, M.; Gjoreski, H.; Lutrek, M.; Gams,\
    \ M. Automatic Detection of Perceived Stress in Campus Students\nUsing Smartphones.\
    \ In Proceedings of the International Conference on Intelligent Environments,\
    \ Prague,\nCzech Republic, 15–17 July 2015.\n96.\nPérez, L.E.; Pardiñas-Mir, J.A.;\
    \ Guerra, O.; de la Mora, J.; Pimienta, M.; Hernández, N.; de Atocha Lopez, M.\n\
    A wireless sensor network system: For monitoring trees’ health related parameters\
    \ in a university campus.\nIn Proceedings of the 12th International Joint Conference\
    \ on e-Business and Telecommunications (ICETE),\nColmar, France, 20–22 July 2015.\n\
    97.\nPopoola, S.I.; Atayero, A.A.; Popoola, O.A. Comparative assessment of data\
    \ obtained using empirical models\nfor path loss predictions in a university campus\
    \ environment. Data Brief 2018, 18, 380–393. [CrossRef]\n98.\nPopoola, S.I.; Atayero,\
    \ A.A.; Arausi, O.D.; Matthews, V.O. Path loss dataset for modeling radio wave\n\
    propagation in smart campus environment. Data Brief 2018, 17, 1062–1073. [CrossRef]\n\
    Sensors 2019, 19, 3287\n30 of 30\n99.\nKarttunen, A.; Molisch, A.F.; Hur, S.;\
    \ Park, J.; Zhang, C.J. Spatially Consistent Street-by-Street Path Loss\nModel\
    \ for 28-GHz Channels in Micro Cell Urban Environments. IEEE Trans. Wirel. Commun.\
    \ 2017, 16,\n7538–7550. [CrossRef]\n100. Fuschini, F.; El-Sallabi, H.; Degli-Esposti,\
    \ V.; Vuokko, L.; Guiducci, D.; Vainikainen, P. Analysis of Multipath\nPropagation\
    \ in Urban Environment Through Multidimensional Measurements and Advanced Ray\
    \ Tracing\nSimulation. IEEE Trans. Antennas Propag. 2008, 56, 848–857. [CrossRef]\n\
    101. Mani, F.; Oestges, C. A Ray Based Method to Evaluate Scattering by Vegetation\
    \ Elements. IEEE Trans.\nAntennas Propag. 2012, 60, 4006–4009. [CrossRef]\n102.\
    \ Chio, C.H.; Pang, C.K.; Ting, S.W.; Tam, K.W. Field prediction in urban environment\
    \ using ray tracing.\nIn Proceedings of the 2013 IEEE Antennas and Propagation\
    \ Society International Symposium (APSURSI),\nOrlando, FL, USA, 7–13 July 2013;\
    \ pp. 1926–1927.\n103. Un, L.K.; Chio, C.; Ting, S. Mobile communication site\
    \ planning in campus using ray tracing. In Proceedings\nof the 2014 IEEE Antennas\
    \ and Propagation Society International Symposium (APSURSI), Memphis, TN,\nUSA,\
    \ 6–11 July 2014; pp. 959–960.\n104. Thirumaraiselvan, P.; Jayashri, S. Modeling\
    \ of Wi-Fi signal propagation under tree canopy in a college\ncampus. In Proceedings\
    \ of the 2016 International Conference on Communication and Signal Processing\n\
    (ICCSP), Melmaruvathur, India, 24 November 2016; pp. 2273–2277.\n105. Wei, S.;\
    \ Ai, B.; He, D.; Guan, K.; Wang, L.; Zhong, Z. Calibration of ray-tracing simulator\
    \ for millimeter-wave\noutdoor communications. In Proceedings of the 2017 IEEE\
    \ International Symposium on Antennas and\nPropagation & USNC/URSI National Radio\
    \ Science Meeting, San Diego, CA, USA, 9–14 July 2017;\npp. 1907–1908.\n106. Fathurrahman,\
    \ S.Z.; Rahardjo, E.T. Coverage of Radio Wave Propagation at UI Campus Surrounding\
    \ Using\nRay Tracing and Physical Optics Near to Far Field Method. In Proceedings\
    \ of the TENCON 2018—IEEE\nRegion 10 Conference, Jeju, Korea, 28–31 October 2018;\
    \ pp. 1123–1126.\n107. UN Sustainable Development Goals. Available online: https://sustainabledevelopment.un.org/\
    \ (accessed\non 14 July 2019).\n108. RHF0M301 LoRaWAN Module Datasheet. Available\
    \ online: https://www.robotshop.com/media/ﬁles/\npdf/915mhz-lora-gateway-raspberry-pi-hat-datasheet1.pdf\
    \ (accessed on 31 March 2019).\n109. LoRaWAN Module RHF76-052 Datasheet. Available\
    \ online: https://fccid.io/2AJUZ76052/User-Manual/\nUsers-Manual-3211050.pdf (accessed\
    \ on 31 March 2019).\n110. Azpilicueta, L.; Rawat, M.; Rawat, K.; Ghannouchi,\
    \ F.; Falcone, F. Convergence Analysis in Deterministic 3D\nRay Launching Radio\
    \ Channel Estimation in Complex Environments. ACES J. 2014, 29, 256–271.\n111.\
    \ Azpilicueta, L.; Lopez-Iturri, P.; Aguirre, E.; Vargas-Rosales, C.; León, A.;\
    \ Falcone, F. Inﬂuence of Meshing\nAdaption in Convergence Performance of Deterministic\
    \ Ray Launching Estimation in Indoor Scenarios. J.\nElectromagn. Waves Appl. 2017,\
    \ 31, 544–559. [CrossRef]\n112. Ettus Research USRP B210.\nAvailable online:\n\
    https://www.ettus.com/product/details/UB210-KIT\n(accessed on 31 March 2019).\n\
    113. Allen, K.C.; DeMinco, N.; Hoffman, J.R.; Lo, Y.; Papazian, P.B. Building\
    \ Penetration Loss Measurements at\n900 MHz, 11.4 GHz, and 28.8 GHz; NTIA Report\
    \ 94-306; U.S. Department of Commerce: Washington, DC,\nUSA, 1994.\nc⃝ 2019 by\
    \ the authors. Licensee MDPI, Basel, Switzerland. This article is an open access\n\
    article distributed under the terms and conditions of the Creative Commons Attribution\n\
    (CC BY) license (http://creativecommons.org/licenses/by/4.0/).\n"
  inline_citation: Sensors 2019, 19, 3287; doi:10.3390/s19153287
  journal: Sensors
  limitations: null
  pdf_link: https://www.mdpi.com/1424-8220/19/15/3287/pdf?version=1564127748
  publication_year: 2019
  relevance_score: 0.9
  relevance_score1: 0
  relevance_score2: 0
  title: Design and Experimental Validation of a LoRaWAN Fog Computing Based Architecture
    for IoT Enabled Smart Campus Applications
  verbatim_quote1: '"the system provides robustness against signal losses and interference
    by being able to deploy redundant gateways."'
  verbatim_quote2: '"the use of fog computing nodes supports physically distributed,
    low-latency, and location-aware applications that decrease the network trafﬁc
    and the computational load of traditional cloud computing systems."'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.1109/access.2019.2907793
  analysis: 'The paper titled “Application Specific Internet of Things (ASIoTs): Taxonomy,
    Applications, Use Case and Future Directions” reviews advancements made in customized,
    domain-specific applications of IoT technologies. It emphasizes the need to optimize
    IoT systems for specific sectors and use cases, rather than relying on general-purpose
    IoT solutions.


    One of the key aspects discussed in the paper is the classification of ASIoTs
    into three categories: user domain-driven, communications medium-driven, and technology
    constraint-driven. User domain-driven ASIoTs are designed to meet specific requirements
    of a particular industry or application, such as the Internet of Battlefield Things
    (IoBT) for military applications or the Internet of Medical Things (IoMT) for
    healthcare. Communications medium-driven ASIoTs are optimized for network communications
    in different environments, such as the Internet of Underwater Things (IoUWT) for
    underwater communication or the Internet of Underground Things (IoUGT) for underground
    communication. Technology constraint-driven ASIoTs are designed to meet the limitations
    of a specific technology implementation, such as the Internet of Nano Things (IoNT)
    for nanoscale communication.


    The paper provides examples of representative studies and applications for each
    category of ASIoTs, highlighting the challenges and design considerations specific
    to each domain. For instance, the IoBT requires high levels of security and reliability
    due to its use in military operations, while the IoUWT faces challenges related
    to acoustic communication and energy efficiency in underwater environments. The
    paper also emphasizes the importance of interoperability, standardization, and
    security in enabling the integration and seamless operation of ASIoTs.


    In addition to the taxonomy and use cases, the paper presents a use case for a
    biometrics-based ASIoT (IoBioT) and discusses the design considerations and customizations
    required for security, key management, and Big Data processing in such systems.
    The authors propose a layer architecture for the IoBioT and describe how the different
    layers can be customized to address the specific challenges of biometrics applications.


    Overall, the paper provides a comprehensive overview of the current state and
    future potential of ASIoTs, emphasizing the need for domain-specific optimization,
    interoperability, and security. It offers valuable insights for researchers and
    practitioners working on the development and implementation of ASIoTs for various
    applications and domains.'
  authors:
  - Li-Minn Ang
  - Jasmine Kah Phooi Seng
  citation_count: 65
  full_citation: 'Application Specific Internet of Things (ASIoTs): Taxonomy, Applications,
    Use Case and Future Directions'
  full_text: '>

    This website utilizes technologies such as cookies to enable essential site functionality,
    as well as for analytics, personalization, and targeted advertising purposes.
    To learn more, view the following link: Privacy Policy Manage Preferences IEEE.org
    IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account Personal
    Sign In Browse My Settings Help Access provided by: University of Nebraska - Lincoln
    Sign Out All Books Conferences Courses Journals & Magazines Standards Authors
    Citations ADVANCED SEARCH Journals & Magazines >IEEE Access >Volume: 7 Application
    Specific Internet of Things (ASIoTs): Taxonomy, Applications, Use Case and Future
    Directions Publisher: IEEE Cite This PDF Kenneth Li-Minn Ang; Jasmine Kah Phooi
    Seng All Authors 63 Cites in Papers 10311 Full Text Views Open Access Comment(s)
    Abstract Document Sections I. Introduction II. Studies in ASIoT Research III.
    Use Case for a Biometrics-Based ASIoT IV. Future Directions and Research for ASIoTs
    V. Conclusion Authors Figures References Citations Keywords Metrics Abstract:
    As more and more applications are deployed using the Internet of Things (IoT)
    technologies, the fragmentation of general purpose IoT technologies to target
    particular sectors with different requirements is becoming necessary. In this
    paper, we summarize the latest developments of application-specific IoTs (ASIoTs)
    (a term to conceptualize the development of IoTs targeted toward specific domains,
    communications mediums, and industry sectors) in eight representative studies
    (Internet of Battlefield Things (IoBT), Internet of Medical Things (IoMT), Internet
    of Animal Things (IoAT), Internet of Waste Things (IoWT), Internet of Underwater
    Things (IoUWT), Internet of Underground Things (IoUGT), Internet of Nano Things
    (IoNT), and Internet of Mobile Things (IoMobT) such as the Internet of Vehicles).
    The paper gives contributions to ASIoTs from three perspectives: First, we offer
    a basic classification taxonomy for ASIoTs and discuss various representative
    studies and applications which can be found in the literature; Second, we discuss
    a use case for a biometrics-based ASIoT (termed IoBioT) for illustration and experiments
    of face-based biometric recognition on IoBioT are also performed; and Third, we
    give discussions and future directions for ASIoTs. An objective of this paper
    is to spur researchers and facilitate the development of ASIoTs for the different
    user-defined domains, communication mediums, and technology constrained platforms.
    Application Specific Internet of Things (ASIoT) for Biometrics. Published in:
    IEEE Access ( Volume: 7) Page(s): 56577 - 56590 Date of Publication: 06 May 2019
    Electronic ISSN: 2169-3536 DOI: 10.1109/ACCESS.2019.2907793 Publisher: IEEE SECTION
    I. Introduction Internet-of-Things (IoT) which combines advancements in sensing,
    mobile computing and cloud server technologies and platforms have in recent years
    become highly important and ubiquitous in the modern world [1], [2]. As more and
    more applications are deployed using IoT technologies, the fragmentation of general
    purpose IoT technologies to target particular sectors with different requirements
    is becoming necessary. For example, a customized IoT for environmental water monitoring
    would have different requirements from a customized IoT for medical patient monitoring.
    The latter IoT application would require much higher and stringent requirements
    for real-time data transfer and security. This leads to the emergence and development
    of IoTs to realize specific requirements for various domains, communications mediums
    and industry sectors which for convenience we term as application specific IoTs
    (ASIoTs). On observation, the development of ASIoTs is mirroring the development
    of application specific integrated circuits (ASICs) in digital electronics technology
    with the realization that different application domains (e.g. high speed logic
    processing, implementation on low power devices) required different design parameters
    to be optimized. In the case of ASICs, some requirements and parameters to be
    customized include clock speed, chip area, power consumption, etc [3]. For ASIoTs,
    some parameters and requirements to be customized include the end-to-end delay
    or network data latency, robustness of the network towards node failures, node
    power consumption, security aspects, etc. Although ASIoTs are an emerging research
    area, some examples of IoTs for customized and specific applications can be found
    in the literature. The authors in [4] proposed the medical Internet of Things
    which they termed mIoT. Further examples of ASIoTs are the Internet of Underwater
    Things (IoUWT) [5] as a network of smart interconnected underwater objects, the
    Internet of Battlefield Things (IoBT) [6] worn by military personnel and embedded
    within military equipment, the Internet of Nano Things [7] and the Internet of
    Vehicles (IoV) [8], [22] which utilizes vehicles on highways as mobile nodes and
    roadside sensing and computational infrastructure for intelligent transportation
    and safety applications. The design of the different ASIoTs will prioritize meeting
    different design factors. Some design factors will remain common towards most
    ASIoTs whereas others may only apply towards ASIoTs in particular domains. A common
    requirement for many ASIoTs is the requirement for low power and low complexity
    implementation in battery-powered sensor nodes or devices. Many IoT devices cannot
    afford resource demanding algorithms (e.g. cryptographic & video [9] protocols)
    to be implemented within the hardware constrained devices. For example, a medical
    sensor device to be authenticated with fingerprint recognition technology would
    need the biometric traits to be encrypted before transmission to the cloud server.
    This encryption would need to be performed on the device itself which would have
    severe constraints on computational power, memory storage and power consumption
    while still ensuring the requirements are met for secure communications. However,
    this requirement for low power consumption is not required in IoV applications
    as the chemical or electric batteries in vehicles can provide ample power for
    sensing, communications and information processing. In the case for IoV networks,
    the requirement is geared towards very low network latency and fast response time
    to meet the safety requirements for intelligent transportation. Here, we see a
    contrast between the design factors and tradeoffs (e.g. power consumption vs network
    response time) for different ASIoTs. This paper aims to spur researchers and facilitate
    the development of ASIoTs for different user-defined domains, communication mediums
    and technology constrained platforms. It gives contributions for ASIoTs from three
    perspective. First, a basic classification taxonomy for ASIoTs is presented. This
    is followed by the discussion on various representative studies and applications
    which can be found in the literature. Second, we present a use case for a biometrics-based
    ASIoT (termed IoBioT) for illustration. A case study of face-based biometric recognition
    and experiments is included to confirm our approach in the Big biometrics data
    computation layer of IoBioT. Third, the discussions and future directions for
    ASIoTs are presented. The paper is organized as follows: Section II discusses
    a basic classification taxonomy and several representative studies and applications
    for ASIoTs which can be found in the literature. A focus here is to identify some
    important design parameters and challenges to be addressed in these ASIoTs. A
    use case study for a biometric-based ASIoT (IoBioT) is discussed in Section III
    to illustrate some design parameters and customizations for security, key management
    and Big data information processing. Experiments are also included. Section IV
    gives future directions and discussions to spur researchers and facilitate the
    development of ASIoTs for different user domains, communication mediums and technology
    constrained platforms. Section IV concludes the paper. SECTION II. Studies in
    ASIoT Research This section surveys advancements made in the developments and
    applications of ASIoTs in eight representative studies (Internet of Battlefield
    Things, Internet of Medical Things, Internet of Animal Things, Internet of Waste
    Things, Internet of Underwater Things, Internet of Underground Things, Internet
    of Nano Things, and Internet of Mobile Things). An important focus is the identification
    of the various design factors and challenges to be prioritized for the different
    ASIoTs. We also offer a basic taxonomy and classification of ASIoTs into three
    categories: (1) User domain-driven; (2) Communications medium-driven; and (3)
    Technology constraint-driven. The design parameters for user domain-driven ASIoTs
    are optimized for parameters defined by the specific user domain. Examples of
    user domain-driven ASIoTs would be the Internet of Battlefield Things, Internet
    of Medical Things, Internet of Animal Things and Internet of Waste Things. The
    design of communications medium-driven ASIoTs are dominated by the network communications
    in the medium (e.g. terrestrial, underwater, underground mediums) with different
    properties and characteristics. Examples of these classes of ASIoTs are the Internet
    of Underwater Things and the Internet of Underground Things. The third classification
    for ASIoTs are the technology constraint-driven ASIoTs. An example of this class
    is the Internet of Nano Things where the constraints of the nanotechnology implementation
    drives the design factors for the ASIoT. Table 1 shows a summary of the different
    types of ASIoTs and its taxonomy classification, the smart things or objects in
    the ASIoT, the challenges and the design parameters to be prioritized and optimized,
    and some representative works discussed in this section. The lessons learnt from
    the case studies and the important factors and future directions for designing
    and building ASIoTs are discussed in Section IV. TABLE 1 Summary of ASIoTs Characteristics
    and its Taxonomy Classification A. Internet of Battlefield Things (IoBT) The Internet
    of Battle Things or also known as the Internet of Battlefield Things (IoBT) [6],
    [10], [11], [12] is an illustrative example of an ASIoT which has been designed
    for military and defense applications. The design of the IoBT would be strongly
    influenced by two technologies (machine intelligence and networked communications).
    The “smart things” in the IoBT would include sensors, munitions, weapons, vehicles,
    robots, and human-wearable devices which are capable of collecting and processing
    information, acting as agents to support decision making and situational awareness,
    undertaking coordinated defensive actions, and unleashing a variety of effects
    on the adversary [6]. The IoBT can be seen as a user defined-domain ASIoT with
    extremely stringent requirements for fast and adaptively robust network communications,
    rapid real-time information processing to deal with a large volume and complexity
    of information for human decision-making and requiring very high security. As
    remarked by the authors in [6], the IoBT will itself become a battleground, as
    the adversary will attempt to take control and subvert the IoBT for its own ends.
    The authors identified three security challenges for the IoBT to be addressed:
    (1) Physical survival and functioning of IoBT from kinetic, directed-energy and
    electronic attacks against its things, jamming the RF channels, destroying fiber
    channels and by depriving IoBT of its power sources; (2) Threats to the confidentiality,
    integrity, availability of the information within IoBT, by electronic eavesdropping,
    and by deploying malware into IoBT; and (3) Human deceptions and loss of confidence
    that the information in the IoBT is trustworthy or that some elements of IoBT
    are being controlled by the adversary. Other authors have proposed various improvements
    to address the challenges faced by the IoBT. A significant challenge for the IoBT
    compared with other IoTs is the need for information dissemination in the presence
    of adversaries. The authors in [10] studied the problem of network connectivity
    for the IoBT in which an attacker aims at disrupting the connectivity of the network
    by choosing to compromise one of the IoBT nodes at each time epoch. The authors
    formulate the scenario as a dynamic multistage Stackelberg connectivity game that
    explicitly takes into account the characteristics and requirements of the IoBT
    network such as the IoBT latency and the sum of weights of disconnected nodes
    at each stage of the game. Their results showed that the expected number of disconnected
    sensors using the feedback Stackelberg equilibrium (FSE) decreased up to 46% compared
    to a baseline equal probability policy. Another approach for secure information
    dissemination in the presence of adversaries was proposed by [11]. In this work,
    the authors used stochastic geometry (SG) based models to characterize the connectivity
    of IoBT networks in terms of the degree distribution and employed epidemic spreading
    models to model data dissemination among different types of battlefield devices
    according to the assigned missions. Their results showed that the objectives of
    the battlefield mission could be achieved by either changing the deployment of
    the combat units or by changing their transmission power. The authors in [12]
    investigated the problem of detecting malware in the IoBT. Their approach employed
    eigenspace learning and deep learning methods to detect IoBT malware using the
    operational code sequences (OpCode) of the devices. The authors showed that their
    approach achieved an accuracy rate of 98.37%, a precision rate of 98.59% and also
    had the capability to mitigate against junk code insertion attacks. B. Internet
    of Medical Things (IoMT) The Internet of Medical Things (IoMT) is another example
    of a customized user domain-driven ASIoT for healthcare and patient monitoring
    with its own specific requirements and challenges. Examples of “smart things”
    in the IoMT would include sensor wearables (e.g. for Parkinson’s disease, multiple
    sclerosis), sensors and devices for diabetes, heart rate and electrocardiogram
    (ECG), and smart things for insulin and inhalers. The authors in [4] identified
    the requirement of interoperability as a major challenge for the IoMT. This important
    issue deals with the need for proprietary protocols from medical sensors/devices
    and smart things from one manufacturer to be able to communicate with devices
    and servers from other manufacturers in order that the collected data can be utilized
    fully for the diagnosis and health applications and not marooned on separate data
    islands. Other challenges identified by the authors for the IoMT include: (1)
    Simple connectivity for the smart things and devices to connect to and access
    the cloud-based services; (2) Easy device management for improved device availability
    and reduced maintenance; and (3) Informative analytics to gain insight from huge
    volumes of medical and healthcare data for better decision-making. Although the
    security requirements for the IoMT may not be as stringent as for the IoBT, the
    security and privacy of the patients’ records also require protection from unauthorized
    access. The privacy of patients’ can be breached if the personal and medical information
    are posted in the public domain or otherwise used without their consent. Similarly,
    attacks can be made to interfere with the proper functioning of essential medical
    devices such as pacemakers. The authors in [13] proposed authentication mechanisms
    for ECG monitoring signals from IoT devices using watermarking techniques. In
    their approach, a watermark is introduced into the ECG signal on the client side
    which is then authenticated on the cloud server. Their watermarking approach is
    based on dividing the ECG signal into a number of beats and applying the discrete
    wavelet transform singular value decomposition (DWT-SVD) on each beat. On the
    cloud side, seven features (heartbeat rate, P wave duration, PR interval, QRS
    complex, QT interval, shape and T wave) are extracted from the ECG signal and
    the classification is performed using a one-class support vector machine (OCSVM).
    The authors in [14] proposed the Wearable IoT (WIoT) for person-centered healthcare.
    The architectural composition of the WIoT includes three elements: (1) Wearable
    body area sensors (WBAS); (2) Internet-connected gateways; and (3) Cloud and Big
    data support. The WBAS serves as the frontend for the WIoT ecosystem and performs
    two functions: (1) Data collection from the body through contact sensors or peripheral
    sensors; and (2) Data preparation for on-board device analysis or remote transmission
    for comprehensive analysis and decision support. The Internet-connected gateways
    serves to exchange data with the wearable sensor devices via short range communication
    technology (e.g Bluetooth) and transmit the data to the cloud via heterogeneous
    networks communication technology (e.g. WiFi and GSM). The Cloud and Big data
    support provides the computing infrastructure for large-scale and advanced functionalities
    for medical data analytics, machine learning and data mining. C. Internet of Animal
    Things (IoAT) The Internet of Animal Things (IoAT) [15] is as an example of an
    ASIoT where the smart objects and devices are used to monitor living creatures
    (e.g. livestock such as dairy cows, sheep, cattle) within the IoT. The IoAT would
    have significant advantages for monitoring the health of livestock for smart farming
    applications. Examples of smart things in the IoAT would include smart cattle
    collars to monitor rumination, temperature and activity movements, RFID ear tags
    and sound analyzers for early detection of respiratory diseases [16]. A recent
    work by the authors in [26] proposed a method to detect and classify the screams
    of pigs for indications of stressful situations. Their approach used classification
    of sound spectrograms and achieved results of 71.83% sensitivity, 91.43% specificity
    and 83.61% precision. Some challenges for the IoAT include energy efficiency for
    the on-animal measuring devices. The authors in [15] proposed the use of sub-GHz
    long range (LoRA) for use in animal monitoring and characterized the off-body
    wireless channel in indoor (barn) environments at 868 MHz using LoRa nodes. D.
    Internet of Waste Things (IoWasteT) The Internet of Waste Things (or also known
    as the Internet of Bins [17]) is a very useful application for deployment in smart
    cities [18], [20]. The smart things and objects in the IoWasteT include smart
    garbage bins (SGBs) [19], RFID tags, sensors, cameras and actuators. The IoT-based
    smart garbage system (SGS) proposed in [19] was operated as a pilot project in
    Seoul for a one-year period. The battery-based SGBs communicated information with
    each other using wireless mesh networks and a router and server collected and
    analyzed the information for service provisioning. A header SGB (HSGB) located
    within each region was used to analyze and manage the other SGBs within its region
    after collecting their information. Their approach included a cooperation-based
    operation to increase the battery lifetime in the IoT for energy-efficient operations
    of the SGBs where the HSGB was adaptively selected according to the battery and
    memory status of each SGB in the region. An important challenge for the IoWasteT
    is the large scale data collection and delivery to thousands of sensors and actuators
    integrated within the smart objects. A potential solution is to use the Internet
    of Vehicles (IoV) to serve as data MULES (Mobile Ubiquitous LAN Extensions) [21]
    in smart city environments as a cost effective approach for the large scale data
    collection, transportation and information processing from smart objects within
    the smart city environment [22]. E. Internet of Underwater Things (IoUWT) The
    Internet of Underwater Things (IoUWT) is an example of a communications medium
    driven ASIoT targeted for application in oceans and other water-based domains.
    The “smart things” in the IoUWT would include underwater sensors, smart buoys,
    autonomous underwater vehicles (AUVs) and ships. The design of the IoUWT would
    be strongly influenced by the unique factors for network communications in the
    water-based medium compared to communications in a traditional terrestrial medium.
    The network communications in the IoUWT would employ acoustic links compared to
    radio waves for a terrestrial-based IoT. The acoustic medium for network communications
    would suffer from long propagation delays, high bit error rates and short network
    bandwidth [5]. The authors in [23] identified some further challenges for the
    IoUWT: (1) Energy efficiency and difficulty to recharge. Due to the high deployment
    costs of the underwater sensors and the difficulty to recharge the devices, energy
    efficiency is an important challenge for the IoUWT; (2) Changes to network topology
    due to movement of the underwater sensors; and (3) Unstable and low reliability
    due to transmission loss of the acoustic signals being absorbed by the water environment.
    Two approaches for energy efficient medium access control (MAC) and routing protocols
    for the IoUWT can be found in the works by [24], [25]. Medium access control (MAC)
    protocols developed for terrestrial IoTs such as carrier-sense multiple access
    (CSMA) or time-division multiple access (TDMA) do not perform well underwater.
    The authors in [24] proposed an energy efficient MAC protocol for underwater sensor
    networks termed EE-MAC. The EE-MAC protocol achieves the energy efficiency by
    minimizing the idle listening period and reduces the energy loss due to packet
    collisions. The authors in [25] proposed an energy efficient routing protocol
    which is efficient in packet forwarding and energy consumption for the IoUWT termed
    E-CARP. The E-CARP protocol uses a greedy routing strategy to deliver packets
    hop-by-hop and reduces the number of control packets to lower the energy consumption
    and increase the lifetime of the sensor nodes in the IoUWT. F. Internet of Underground
    Things (IoUGT) The Internet of Underground Things (IoUGT) [27], [28] is another
    example of a communications medium-driven ASIoT targeted in this case for underground
    network communications. The IoUGT is particularly useful for applications in environmental
    monitoring, landslide and earthquake monitoring and precision agriculture (e.g.
    for real-time soil sensing and monitoring [27]). The smart things in the IoUGT
    include underground (UG) objects (e.g. buried soil sensors for temperature, moisture,
    pH sensing, buried seismometers), above ground (AG) smart objects (e.g. base stations
    and mobile sinks), smart interfaces for field machinery and irrigation systems.
    Being a communications-medium driven ASIoT, the design of the IoUGT would be influenced
    by the underground network communications (in this case through electromagnetic
    (EM) wave propagation through a dense substance such as soil or rock). The authors
    in [28] identified four design challenges for wireless sensor communications in
    underground channels: (1) Power conservation and recharge ability – The IoUGT
    faces similar challenges to the IoUWT for recharging or replacing the deployed
    smart devices (in this case, the smart devices would be buried underground with
    difficulty to access physically). The factors which affect communication with
    EM waves in underground environments include path loss due to material absorption,
    reflection/refraction, multi-path fading, reduced propagation velocity and noise
    [28]; (2) Topology design – The topology and deployment of the sink/relay objects
    could be completely underground or utilize a hybrid structure where field vehicles
    or machinery function as mobile sinks for data collection from the underground
    sensors; (3) Antenna design – some challenges include antenna size and directionality
    (e.g. using a single omni-directional or a group of independent directional antennas);
    and (4) Environmental extremes – threats from extreme temperatures, water, animals
    and insects. A recent work by the authors in [29] performed a comprehensive connectivity
    analysis of underground sensors in wireless underground sensor networks for the
    effects of environment parameters such as soil moisture and composition, and for
    system parameters such as node density and propagation techniques. The authors
    remarked that their connectivity analysis can be used as a framework when considering
    the connectivity of wireless underground sensor nodes with other kinds of environment
    and system parameters. G. Internet of Nano Things (IoNT) The Internet of Nano
    Things (IoNT) [7], [30] serves as an example of an ASIoT which is targeted towards
    realization for a specific technology constraint-domain (in this case nanotechnology)
    and the design parameters are strongly influenced by what communications and information
    processing can be performed in this (nanotechnology) domain. Communications on
    the nanoscale can take two forms: (1) Molecular communication – utilizing the
    transmission and reception of information encoded in molecules; and (2) Nano-electromagnetic
    communication – utilizing the transmission and reception of EM radiation based
    on novel nanomaterials [7]. The smart things in the nanotechnology domain include
    nano-sensors, nano-actuators, nano-nodes, nano-routers, nano-micro interface and
    gateways (e.g. smartphones) to connect the IoNT to the global Internet. The design
    challenges for the IoNT stems from the properties of the nanomaterials used (e.g.
    graphene nanoribbon (GNR) or carbon nanotube (CNT)). The works in [30] and [31]
    extended the concept of the IoNT to the Internet of Multimedia Nano Things (IoMNT)
    and the Internet of Bio Nano Things (IoBNT). The IoBNT requires the development
    of connections between the biochemical domain of molecular nanonetworks and the
    electrical domain of electromagnetic networks with the promise of continuous health
    monitoring and bacterial sensor-actuator networks inside the human body. The authors
    in [32] proposed the use of field effect transistor based biosensors (bioFETs)
    to construct a molecular antenna capable of transducing molecular messages into
    electrical signals. H. Internet of Mobile Things In the traditional IoT, the sensor
    nodes and devices are mostly static within the network. The Internet of Mobile
    Things (IoMobT) [33] represents an ASIoT where the smart things can move independently
    and remain accessible within the network. The “smart things” in the IoMobT would
    include mobile personal devices (e.g. smartphones, tablets), mobile robots and
    vehicles on highways. The Internet of Vehicles (IoV) is a good example of the
    IoMobT. The authors in [33] identified four challenges to be addressed for the
    IoMobT: (1) Mobile Data Collection – Movement of the smart objects within the
    network generates unpredictability and an increased number of faults and disruptions
    for data collection; (2) Mobile Data Analytics – Characterizing and utilizing
    learnt mobility patterns of the smart objects to improve data analysis tasks;
    (3) Energy Management – Allowing the direct energy exchange among the different
    smart objects (e.g. an electric vehicle within the IoV can transfer available
    energy to another vehicle or to the smart grid (i.e. V2G technology)); and (4)
    Security and Privacy – Authenticating new smart devices and objects and preserving
    location privacy of the objects. The works in [34], [35] further proposed improvements
    towards the IoMobT. The authors in [34] proposed a middleware concept termed Mobile
    Hub for the IoMobT which allows the smart objects in the IoMobT to move autonomously
    and remain remotely accessible over the Internet. The authors in [35] proposed
    a platform as a service (PaaS) fog computing model termed Mobile Fog for the IoMobT
    that has the advantages of being geospatially distributed, large-scale and latency-sensitive.
    SECTION III. Use Case for a Biometrics-Based ASIoT This section gives an illustration
    for a user domain-driven ASIoT for biometrics termed IoBioT. The section first
    gives an introduction to biometric systems for the IoT. We then give discussions
    for a layer architecture for the IoBioT, and some design parameters and customizations
    for security, key management and Big data information processing. A. Biometrics
    and IoT Systems Biometric systems are becoming essential for authentication purposes
    particularly for usage in embedded devices such as the IoT. In 2000, the Gartner
    Group remarked that biometric identification (e.g. fingerprints, face and voice)
    will emerge as the only way to truly authenticate an individual, which will become
    increasingly important as security and privacy concerns grow. Initial systems
    for biometrics applications used standalone devices connected to a central server
    which performed the information processing and authentication tasks. With the
    rapid proliferation and increasing processing capability of smartphone and IoT
    devices, together with wide-scale network connectivity, distributed approaches
    where the processing tasks are performed at the edge of the network (or termed
    as edge or fog computing techniques) are becoming popular. Fig. 1 shows the Hype
    Cycle for Emerging Technologies from Gartner in 2017 [36]. FIGURE 1. Gartner 2017
    Hype Cycle for Emerging Technologies showing IoT and edge computing technologies
    [36]. Show All An interesting observation as shown in Fig. 1 is the closeness
    for the technology trends for edge computing and IoT. This also motivates the
    development of the biometrics ASIoT (IoBioT) which requires fast response times
    to perform the authentication tasks. In the IoBioT, this can be achieved by performing
    the information processing on the IoT devices instead of having to transmit the
    biometrics data across the IoT network and waiting for the response from the central
    server. Some examples of works for implementing biometrics on the IoT or embedded
    devices can be found in [37], [38]. These works used the Raspberry Pi as the IoT
    device for implementation. Compared to the works in [37], [38] which focused the
    discussion on implementation in embedded devices, this section takes a broader
    perspective for the IoBioT to serve as an illustration for developing domain-driven
    IoT technologies and aims to spur researchers towards developing ASIoTs for different
    domains and platforms in general, and towards the development of the IoBioT specifically.
    B. Biometrics ASIoT Layer Architecture This section introduces the major elements
    in the Biometrics ASIoT (IoBIoT) infrastructure. Fig. 2 shows a diagram of the
    Biometrics ASIoT elements and the building blocks components in its layers. Fig.
    3 shows an overview of the IoBioT layer architecture. There are seven core layers
    within this architecture (Identification Layer, Biometrics Object Layer, Device
    Layer, Communication Layer, Cloud Services Layer, Big Biometrics Data Computation
    Layer and Application layer). We will give particular focus for two customizations
    which are important for the biometrics IoT domain: (1) End-to-end security and
    key management; and (2) Big data information processing using divide-and-conquer
    approaches. The layer customizations for end-to-end security and key management
    for the IoBioT will be discussed in Section III-(C). As shown in Fig. 3, the Big
    Biometrics Data Computation Layer is designed specifically for biometrics processing
    and contains dedicated computational units for data centralization, data aggregation,
    divide and conquer feature extraction, data fusion and decision making. This customized
    layer for Big data information processing will be discussed further in Section
    III-(D). FIGURE 2. Elements and components in the Biometrics ASIoT (IoBIoT) layers.
    (a) Biometrics ASIoT elements. (b) IoBIoT components. Show All FIGURE 3. The proposed
    Biometric ASIoT (IoBioT) architecture. Show All The first layer in the IoBioT
    is the Identification (ID) Layer. The ID layer functions to uniquely identify
    the smart things and objects within the IoBioT. Examples of ID codes are electronic
    product codes (EPC), uCodes and IP addresses (e.g. IPv6 addresses can be used
    to uniquely identify billions of objects and devices). The second layer (Biometrics
    Object Layer) functions to gather data from multiple biometrics sensors (e.g.
    face, fingerprint, voice/speech, iris and palm data) or objects from users within
    the network, and transmits the data to a central cloud for further processing.
    The biometric data can be collected from various locations (e.g. smartphones,
    smart cars, smart devices, smart appliances and smart homes). Some biometrics
    data are not scalar data and may involve different types of sensors. Multi-biometrics
    authentications would require data from multiple modalities to be collected from
    various biometrics sensors. The Device Layer in the IoBioT consists of components
    (e.g. wearable devices, body sensor nodes, wireless motes, etc.) to transmit the
    sensed biometrics data to the higher layers of the IoBioT. An important issue
    in this layer is to secure the biometric data before an attacker can get hold
    of it. Security issues and challenges in this layer include the need to avoid
    resource-demanding cryptographic protocols to meet the hardware-constrained (e.g.
    low computational power, memory and limited energy resources) requirements for
    IoT devices. Lightweight cryptography protocols [39], [40] which are suitable
    for implementation on hardware-constrained devices can be utilized in this layer.
    Security issues for the IoBioT nodes in this layer include attacks from an adversary
    to deplete the energy resources of the nodes by repeatedly making excessive requests
    or transmissions so that the nodes would have to make unnecessary transmissions.
    The fourth layer (Communication Layer) in the IoBioT serves the same function
    as that within the conventional IoT with three sub-layers or components: (1) Link
    sub-layer – responsible for the MAC protocols to be used within the IoBioT; (2)
    Network sub-layer – responsible for connectivity and routing decisions within
    the IoBioT (e.g. can utilize RPL protocol for routing over low Power and lossy
    networks [41]); and (3) Transport sub-layer – responsible for end-to-end communications
    by providing flow and congestion control mechanisms (e.g. can utilize UDP or TCP
    protocols). The Cloud Services Layer provides the core hardware infrastructure,
    servers, platform and storage and gives flexibility and scalability for the IoBioT
    applications. Using virtualization technology, it provides a system architecture
    with distributed parallel environments which can run multiple computational units
    to give fast computational response and high reliability. The elements in the
    IoBioT cloud could be formed from the private cloud within an organization or
    the public cloud (e.g. can utilize Amazon EC2 or Microsoft Azure). The Big Biometrics
    Data Computation Layer functions as a customized processing layer in the IoBioT
    to serve the need for Big data information processing. It contains the hardware
    components (e.g. data centers, GPUs, parallel platforms, FPGAs, SOCs) and software
    components (e.g. MapReduce, Hadoop, Spark) to perform computations in the IoT.
    For the IoBioT, we also include a software component to perform the multimodal
    Big data analytics using a divide and conquer paradigm which is discussed in Section
    III-(D). The smart objects send their data to the cloud for processing in real-time
    and then deliver results to end users from the extracted Big data. The final layer
    (Application Layer) in the IoBioT is responsible for providing services and determines
    a set of protocols for message passing. The IEEE 802.15.4 proposes the CoAP [42]
    as a key component for the low power IoT to reduce overheads and enhance packet
    delivery. The CoAP has two layers where the first layer is the messaging layer
    and the second layer is the request/response layer. The CoAP protocol uses the
    Datagram Transport-Layer Security (DTLS) to secure the CoAP messages. The authors
    in [43] proposed a fully implemented end-to-end application layer security architecture
    for the IoT based on existing Internet standards and communication stacks that
    use UDP/IPv6 networking for Low Power Wireless Personal Area Networks (6LoWPANs).
    C. IoBioT Customizations for Security and Key Management This section gives some
    customizations for end-to-end security and key management for the IoBioT for securing
    the biometrics data from the device to the central collector (e.g. gateway) at
    the edge of the wireless network. The gateway provides the nodes in the IoBioT
    access to the global Internet. As in wireless sensor networks, messages are relayed
    from node to node until it reaches the gateway. There is also no requirement that
    all nodes in the network are under control or there may be imposter nodes as shown
    in Fig. 4. Thus, end-to-end security is essential to ensure that messages cannot
    be intercepted on the route from the sending IoBioT node to the gateway. FIGURE
    4. Adversary or imposter nodes and gateways in the IoBioT. Show All The authors
    in [44] identified a security issue to be addressed when a malicious compromised
    node forges a communication message and transmits to the gateway. The issue of
    forged nodes or gateways is highly important for the IoBioT especially for biometrics
    applications requiring high security such as hospital and medical monitoring systems.
    We consider the scenario when both malicious adversary nodes ( N A ) and gateways
    ( G A ) are forged and inserted into the IoBioT as shown in Fig. 4. Thus, there
    is a need to authenticate a new IoBioT node to the gateway, as well as to authenticate
    the gateway to an IoBioT node. We assume the presence of a Trusted Authority (TA)
    in the network for the following approach to authenticate IoBioT node i ( IoBio
    T i ) to Gateway j ( G j ) and vice versa. The secure data transfer from node
    to gateway can then take place using a shared key ( K ij ) after successful authentication.
    Initally, the TA generates a master secret key (sk) and public key (pk). The p
    k is made available to all devices on the network. When a new IoBioT node is added
    to the network, it first needs to authenticate itself to G j . The node sends
    to TA its node identity ( IoBio T i ), G j and the current timestamp ( T c ) all
    encrypted by pk. IoBioT i →TA:{ IoBioT i , G j , T c }pk (1) View Source The TA
    checks the timestamp, and if valid sends back to IoBio T i the shared key (Kij),
    a nonce ( N 1 ), the timestamp and a message encrypted with s k Gj all encrypted
    by the public key of the node. TA→ IoBioT i :{ K ij , N 1 , T c ,{ K ij ,pk} sk
    Gj } pk IoBioTi (2) View Source IoBioTi checks T c and N 1 and if valid sends
    to G j the shared key ( K ij ), a new nonce ( N 2 ), the timestamp and the secret
    message for G j received from the TA all encrypted by the public key of G j .
    IoBioT i → G j :{ K ij , N 2 , T c ,{ K ij ,pk} sk Gj } pk Gj (3) View Source
    G j checks T c and if valid decrypts the message encrypted with s k Gj from the
    TA and retrieves the shared key ( K ij ). G j then replies to IoBio T i with N
    2 and another new nonce ( N 3 ) encrypted by the public key of IoBio T i all encrypted
    by the shared key K ij . G j → IoBioT i :{{ N 2 , N 3 } pk IoBioTi , T c } K ij
    (4) View Source IoBio T i checks T c and N 2 and if valid, it is assured that
    G j is authenticated with the TA. IoBio T i sends to G j N 3 and the timestamp
    all encrypted by the shared key K ij . IoBioT i → G j :{ N 3 , T c } K ij (5)
    View Source G j checks T c and N 3 and if valid, it is assured that IoBio T i
    is authenticated with the TA. IoBio T i and G j can then communicate securely
    using the shared key K ij and be assured that they are communicating with legitimate
    and not forged entities within the IoBioT. These security and key management customizations
    would enable the realization for biometrics applications requiring high security.
    The generation of the sk and pk could use low complexity elliptic curve techniques
    [45]. D. IoBioT Customizations for Big Data Processing This section gives some
    customizations for Big data information processing and analytics for the IoBioT.
    This is performed in the Big Biometrics Data Computation Layer as shown in Fig.
    3. The processing layer caters for all kinds of biometric data. It also allows
    the multi-modalities fusion and decision making at the final stage. The divide
    and conquer feature extraction mechanism is presented to process these data blocks
    to obtain the feature blocks. The proposed structure of this layer is composed
    of four units: (1) Biometrics Data Centralized Unit (Bio_Data_CU); (2) Biometrics
    Data Aggregation & Pre-processing Unit (Bio_Data_APU); (3) Divide & Conquer Biometrics
    Feature Extraction Unit (D&C_Bio_FEU); and (4) Biometrics Decision Making Unit
    (Bio_DMU). The Bio_Data_CU is the first component in the Computation Layer and
    processes the raw data from various biometrics objects or devices with their own
    identity. The data from these objects can be video, images, voice, etc. This unit
    is also responsible for combining the objects data with their unique identity.
    This process of the Bio_Data_CU is illustrated in Fig. 3. After the raw data pre-processing
    in Bio_Data_CU has been completed, the processed data is passed to the Bio_Data_APU.
    This unit is responsible to perform data aggregation and arranges the data into
    blocks for the same object source based on its identity and biometrics modality
    and tries to create equal sizes of data blocks. In this unit, the aggregation
    and compilation service is supported by various algorithms that compile, organize,
    store and transmit the results. It also has some pre-processing functions for
    different modalities of biometrics data before performing the data analytics in
    the next units. The Bio_Data_CU and the Bio_Data_APU serves different functions
    in the Big Biometrics Data Computation Layer for the IoBioT. As illustrated in
    Fig. 3, The focus of the Bio_Data_CU is towards data arrangement and processing
    for biometric objects, whereas the focus of the Bio_Data_APU is towards data arrangement
    and processing for the different modalities (e.g. face, fingerprint, iris, etc.)
    found in multimodal biometrics data. The D&C_Bio_FEU is the third component in
    the layer. The divide and conquer mechanism in this unit plays an important role
    to enhance the scalability of the IoBioT architecture and improve the computational
    efficiency of the processing. The divide and conquer mechanism with their own
    servers processes the data of each biometrics modality efficiently for performing
    the parallel processing or tasks. The deployment of the specific feature extraction
    function depends on the biometrics data and its modality to extract the target
    features (e.g. ridge features for fingerprints, visual features for face biometrics
    and audio features for audio signal/speech). Fig. 5 shows the flow chart of the
    proposed divide and conquer mechanism for the aggregated biometrics data blocks.
    FIGURE 5. Customized divide and conquer mechanism to extract important features
    of different biometric data. Show All The type of biometrics data of the aggregated
    data blocks decides which feature function for the divide and conquer mechanism
    in the D&C_Bio_FEU is to be deployed. There are three main functions in the general
    mechanism: (1) Divide function; (2) Conquer function; and (3) Customized feature
    extraction function to target the specific feature. The divide function is responsible
    for divisions of block recursively until the block size reaches its threshold.
    The function takes the aggregated data block and divides the incoming block into
    two equal parts or sub-blocks (e.g. horizontally or vertically) recursively until
    it reaches to the block size threshold. Then the target feature extraction function
    is called for each divided or sub-block to extract the local features. The type
    and number of features vary and depends on the need of the biometrics application
    (e.g. minutiae for fingerprint features, spectral, mel-frequency cepstral coefficients
    (MFCC), zero-crossing rate (ZCR), linear prediction coefficients (LPC) for audio
    or speech features, optical flows and motion patterns for gait features). Other
    biometric features include hand geometry, palm print, knuckle print, vein patterns,
    etc. These features are extracted from the sub-blocks during the divide and conquer
    mechanism. The conquer function then is initiated to combine and process the features
    in reverse order by taking each two neighbors’ sub-blocks local features. These
    feature blocks will be sent to the next stage of Bio_DMU for combination or fusion
    of feature blocks before decision making. Some examples for divide and conquer
    approaches for feature processing can be found in the works by [46], [47]. The
    Bio_DMU is the final stage of the computation layer. It contains fundamental support
    components (e.g. features/results storage devices, decision-making servers and
    communications infrastructure). The servers are supported by various algorithms
    that organize, store, and transmit the features/results with the intention that
    the data can be used by any server for its processing at any time. The algorithms
    to be used depend on the user domain biometric requirements. The Decision Making
    Server is also supported by various algorithms in order to make decisions for
    different scenarios and requirements. The decision making algorithm should be
    intelligent and efficient enough to efficiently produce a good decision. After
    the decision has been made, Bio_DMU returns the final desired output so that any
    application can utilize these decisions at real-time or offline for their respective
    requirements. The decision-making in the Bio_DMU depends on the data modality
    of the biometrics data: (1) Single modality; and (2) Multi-modality. The feature
    blocks of biometrics data with single modality are sent to the Single Modality
    Decision Making module in the Bio_DMU. The decision making process is straightforward.
    There is a customized design of decision mechanism for the single modality and
    also specific applications. This unit can operate in two modes with built-in functionalities:
    (1) Verification; and (2) Identification. The verification process is described
    as a 1–to–1 matching system because the system tries to match the biometric presented
    by the individual against a specific biometric already in the database. The identification
    process is described as a 1-to- n matching system, where n is the total number
    of biometric templates in the database. Biometrics templates stored in the database
    can be obtained from the cloud and this computation layer also provides the access
    to the cloud database in the previous cloud services as illustrated in Fig. 3.
    The decision making for the modality can be made using machine learning techniques
    such as supervised learning, unsupervised learning or reinforcement learning.
    If the decision involves more than one type/modality of biometrics data, the sets
    of multimodal features blocks for each input multimodal partitioned data block
    are sent to the Multimodal Decision Making module in Bio_DMU. The final process
    is required to integrate and perform fusion of the features from different modalities
    in order to make the decision. Two scenarios need to be considered: (1) Decision
    Level Fusion; and (2) Feature Level Fusion. For decision level fusion and decision
    making, the target analysis first provides the local decisions based on individual
    modality feature blocks. The local decisions are then combined using a final decision
    fusion module to make a fused decision vector that is analyzed further to obtain
    a final decision. For feature level fusion and decision making, the feature blocks
    are first combined and then sent as input to the feature fusion module which merges
    the sets of features blocks from different modalities before the decision making.
    E. Biometrics Face Recognition and Experiments Sections III(B)–(D) have proposed
    the architecture of Biometrics ASIoT (IoBIoT) and customizations for Big Data
    Processing. One of the main components in the proposed architecture is the Biometrics
    Data Divide & Conquer Feature Extraction Unit which consists of the divide and
    conquer sub-systems. This section provides a case study of biometrics face recognition
    where the single modality is the face image. In many biometrics applications,
    principal component analysis (PCA) and linear discriminant analysis (LDA) are
    two well-known and widely used feature extraction techniques. PCA and LDA are
    normally used together in a cascade operation to extract features in biometrics.
    The original versions of PCA, LDA or PCA-LDA (Fisherface technique) and their
    current extensions were not designed for Big data computation and do not scale
    well for Big data applications. To conduct the experiments for biometrics face
    recognition in Big biometric data computation layer in IoBIoT, our previous research
    work on divide-and-conquer approaches [55], Divide and Conquer PCA (DC-PCA) and
    Divide and Conquer LDA (DC-LDA) for Big data information processing are applied
    as shown in Fig. 6. FIGURE 6. Experimental approach of Biometrics Face Recognition.
    Show All Experimental results using the ORL [56] and Yale [57] datasets containing
    real-world variations for face recognition are presented to validate the approach
    and comparisons are given for the classification performance of the approach versus
    other traditional techniques which do not use the divide and conquer approach.
    The ORL dataset contains 400 images of 40 people containing 10 samples for each
    person with variations such as facial expressions and appearance. The experiments
    used five samples for each person for training and the remaining samples were
    used for testing. The Yale face database demonstrate variations in lighting conditions,
    facial expressions and facial details. The database contains 11 different images
    for each of 15 people. The experiments used 90 samples from the 15 people for
    training and the remaining samples were used for testing. Table 2. shows a summary
    of the performance comparisons. For the ORL dataset, the DC-PCA+LDA gave a recognition
    rate of 86% compared to 71% and 83% for PCA and Fisherface respectively, while
    for the Yale dataset, the DC-PCA+LDA gave a recognition rate of 62% compared to
    18% and 60% for PCA and Fisherface respectively. The results validated the performance
    efficacy of the DC-PCA+LDA compared with the traditional PCA and Fisherface methods.
    Although the experimental objectives were to validate the divide and conquer feature
    extraction approach for Big data computation, the results for DC-PCA+LDA gave
    better performance than the established Fisherface approach. TABLE 2 Summary of
    the Performance Comparisons for ORL and Yale Datasets SECTION IV. Future Directions
    and Research for ASIoTs This section discusses lessons learnt from the use case
    studies and some important challenges and future directions for designing and
    building ASIoTs. From the discussions in Section III and the observations in Table
    1, we identify four areas and perspectives towards future research for ASIoTs:
    (1) Interoperability among ASIoTs; (2) Energy efficient operation in ASIoTs; (3)
    Edge and fog machine learning models for ASIoTs; and (4) Security and privacy
    challenges for ASIoTs. A. Interoperability Among ASIoTs ASIoTs may contain a wide
    range of sensors, smart objects/devices and platforms from different manufacturers
    and vendors to be deployed within a specific domain. To achieve deployment of
    the ASIoT on a large-scale, these smart objects which may come from different
    manufacturers and vendors require the capabilities to interoperate and communicate
    with other smart objects within the IoT. The authors in [48] discuss a useful
    taxonomy for interoperability in IoT from five perspectives: (1) Device interoperability
    – mechanisms for integrating new devices into the IoT and message exchange among
    heterogeneous communication protocols within devices; (2) Network interoperability
    – mechanisms for end to end communication through diverse (wireless and wired)
    and heterogeneous communication networks; (3) Syntactical interoperability – interoperation
    of the data structure, format and interface for information exchange among the
    IoT entities; (4) Semantic interoperability – data and information models to allow
    IoT systems, services and applications to exchange information, data and knowledge
    in a meaningful way; and (5) Platform interoperability – mechanisms for information
    exchange across cross-platforms and cross-domains IoTs with diverse operating
    systems, architectures, access mechanisms for smart objects and data. The authors
    in [49] proposed a novel interoperability deployment for the industrial IoT domain
    using software-defined networks (SDNs) to manage different types of physical devices
    (industrial robot, automated guided vehicle, RFID reader, etc.), industrial wireless
    networks and cloud services and provide an interface for information exchange.
    B. Energy Efficient Operation in ASIoTs Many smart objects and devices in ASIoTs
    may rely on battery-powered sources with limited energy and/or may not be easily
    accessible for recharging purposes (e.g. in communications medium-driven IoUGTs
    and IoUWTs). Similar as for WSNs, the energy efficient operation and the need
    to optimize the network lifetime remains a critical challenge for ASIoTs. Novel
    and customized solutions for energy efficiency can be designed for different ASIoTs
    based on their specific deployment environment and requirements. The energy efficient
    solution used for one ASIoT may be different from solutions for other ASIoTs.
    The authors in [50] give an illustrative example of analyzing and designing an
    energy efficient ASIoT for the user domain of heritage artwork conservation. Their
    design considered the measurement requirements (e.g. sampling rate), aspects of
    the node design (e.g. sleep modes), gateway design, cloud infrastructure and user
    interface to determine the energy efficient requirements of the IoT operation.
    Using a small 1.7 mAh lithium-thionyl battery, their design was able to achieve
    a node lifespan of over twenty years by utilizing LoRa technology without the
    need for battery replacement. C. Edge and Fog Machine Learning Models for ASIoTs
    The authors in [51] remarked on the importance of cross-domain and multimodal
    inference and analytics for large-scale networked sensor systems which is also
    applicable towards ASIoTs where data is collected from a variety of sensing sources
    and domains. It is expected that new machine learning algorithms, data science
    and analytics will play a key role to extract value from the next generation of
    IoTs. A recent survey of machine learning techniques for the IoT can be found
    in [52]. A critical challenge for IoTs is to implement the machine learning algorithms
    (which can be computationally and/or storage intensive) on the resource-constrained
    smart objects or devices itself (or termed as edge or fog computing models). The
    authors in [53] remarked that the implementation of machine learning inference
    analytics on edge devices has huge potential and is still in its early stages.
    They also demonstrated the feasibility and effectiveness of implementing and testing
    three machine learning algorithms (random forests, support vector machine and
    multi-layer perceptron) on the Raspberry Pi to profile their performance in terms
    of speed, accuracy and power consumption. The implementation of new machine learning
    algorithms such as deep learning techniques and convolutional neural networks
    on edge devices remain a significant challenge to be addressed. D. Security and
    Privacy Challenges for ASIoTs The security requirements for different ASIoTs may
    vary considerably and this gives opportunities for cost-effective and energy efficient
    customizations (e.g. the requirements for the IoBT would be much stringent and
    higher than for the IoAT). The IoAT can be deployed with less stringent and computationally
    lower (or no) cryptographic protocols to reduce the power consumption requirements
    for the sensor nodes. Similarly, the security and privacy requirements for an
    IoT-based smart home would be different from that for an IoT to be deployed in
    a manufacturing environment. The number of potential threats, vulnerabilities
    and attacks towards an IoT is wide ranging due to the large number of attack surfaces
    and domains. The authors in [54] give a survey of potential security attacks and
    countermeasures in three IoT domains: (1) Sensing domain (e.g. jamming, vampire,
    selective forwarding, sinkhole attacks); (2) Cloud domain (e.g. hidden channel,
    VM escape, theft of service, VM migration, insider attacks); and (3) Fog domain
    (e.g. authentication and trust issues, privacy issues, denial-of-service (DoS)
    attacks). The privacy issues in the fog domain occur because fog devices will
    be able to infer the location of all the smart objects that are connected to the
    fog device and by extension track the location of users that are operating the
    devices. SECTION V. Conclusion This paper has reviewed and summarized the emerging
    area of application specific Internet of Things (ASIoTs) and given a basic taxonomy
    into three categories (user domain-driven, communications medium-driven, and technology
    constraint-driven ASIoTs). Several representative examples of the different classes
    of ASIoTs have been drawn from the literature for illustration of the challenges
    and design parameters to be optimized for the various ASIoTs. The design parameters
    for user domain-driven ASIoTs will require optimization for parameters defined
    by the specific user domain. The design parameters for communications medium-driven
    ASIoTs wil require optimization for the network communications in the medium (e.g.
    terrestrial, underwater, underground mediums) with different properties and characteristics.
    The design parameters for technology-driven ASIoTs will require optimization to
    meet the constraints of the technology implementation. The paper has also given
    a use case illustration for a biometrics-based ASIoT (IoBioT) and some layer customizations
    for security, key management and Big data information processing. Experiments
    on face-based biometrics have been performed to validate the Big biometric data
    computation layer in the IoBioT. Finally, perspectives and directions have also
    been discussed for future research covering interoperability, energy efficient
    operation, edge/fog machine learning models, and security/privacy challenges for
    ASIoTs. Authors Figures References Citations Keywords Metrics More Like This A
    Survey of Security Challenges, Attacks Taxonomy and Advanced Countermeasures in
    the Internet of Things IEEE Access Published: 2020 Security Risk Assessment Methodologies
    in The Internet of Things: Survey and Taxonomy 2021 IEEE 21st International Conference
    on Software Quality, Reliability and Security Companion (QRS-C) Published: 2021
    Show More IEEE Personal Account CHANGE USERNAME/PASSWORD Purchase Details PAYMENT
    OPTIONS VIEW PURCHASED DOCUMENTS Profile Information COMMUNICATIONS PREFERENCES
    PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help? US & CANADA: +1 800 678
    4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow About IEEE Xplore | Contact
    Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics
    Reporting | Sitemap | IEEE Privacy Policy A not-for-profit organization, IEEE
    is the world''s largest technical professional organization dedicated to advancing
    technology for the benefit of humanity. © Copyright 2024 IEEE - All rights reserved.'
  inline_citation: null
  journal: IEEE Access
  limitations: null
  pdf_link: https://ieeexplore.ieee.org/ielx7/6287639/8600701/08707089.pdf
  publication_year: 2019
  relevance_score: 0.9
  relevance_score1: 0
  relevance_score2: 0
  title: 'Application Specific Internet of Things (ASIoTs): Taxonomy, Applications,
    Use Case and Future Directions'
  verbatim_quote1: In this paper, we summarize the latest developments of application-specific
    IoTs (ASIoTs) (a term to conceptualize the development of IoTs targeted toward
    specific domains, communications mediums, and industry sectors) in eight representative
    studies (Internet of Battlefield Things (IoBT), Internet of Medical Things (IoMT),
    Internet of Animal Things (IoAT), Internet of Waste Things (IoWT), Internet of
    Underwater Things (IoUWT), Internet of Underground Things (IoUGT), Internet of
    Nano Things (IoNT), and Internet of Mobile Things (IoMobT) such as the Internet
    of Vehicles).
  verbatim_quote2: For example, a customized IoT for environmental water monitoring
    would have different requirements from a customized IoT for medical patient monitoring.
  verbatim_quote3: '>'
- DOI: https://doi.org/10.3390/electronics11101604
  analysis: 'The paper emphasizes the importance of using deep learning methods for
    Internet of Things (IoT) data analysis, particularly in applications such as image
    recognition, natural language processing, and time series forecasting. The authors
    provide a concise analysis of how the unique characteristics of IoT data, such
    as its large volume, velocity, variety, veracity, variability, and value, present
    both opportunities and challenges for deep learning techniques. They discuss the
    need for efficient algorithms, handling missing data, and ensuring security and
    privacy when applying deep learning to IoT data. The authors also highlight the
    importance of designing deep learning models that can learn from limited and noisy
    data, as is often encountered in IoT applications.


    The paper provides a comprehensive review of the current state-of-the-art deep
    learning architectures and approaches for IoT applications, including supervised
    learning (e.g., recurrent neural networks, convolutional neural networks), unsupervised
    learning (e.g., autoencoders, restricted Boltzmann machines, deep belief networks),
    and reinforcement learning. The authors discuss the strengths and weaknesses of
    each approach and provide examples of their successful applications in various
    IoT domains, such as smart homes, smart cities, healthcare, transportation, and
    agriculture. They also highlight the challenges and limitations of using deep
    learning for IoT applications, such as the need for specialized hardware, the
    computational cost of training deep learning models, and the difficulty of interpreting
    and explaining the predictions made by these models.'
  authors:
  - Kuruva Lakshmanna
  - Rajesh Kaluri
  - Nagaraja Gundluru
  - Zamil S. Alzamil
  - Dharmendra Singh Rajput
  - Arfat Ahmad Khan
  - Mohd Anul Haq
  - Ahmed Alhussen
  citation_count: 61
  full_citation: A Review on Deep Learning Techniques for IoT Data
  full_text: '>

    Citation: Lakshmanna, K.; Kaluri, R.;

    Nagaraja, G.; Alzamil, Z.S.; Rajput,

    D.S.; Khan, A.A.; Haq, M.A.;

    Alhussen, A. A Review on Deep

    Learning Techniques for IoT Data.

    Electronics 2022, 11, 1604. https://

    doi.org/10.3390/electronics11101604

    Academic Editor: Ping-Feng Pai

    Received: 7 April 2022

    Accepted: 6 May 2022

    Published: 18 May 2022

    Publisher’s Note: MDPI stays neutral

    with regard to jurisdictional claims in

    published maps and institutional afﬁl-

    iations.

    Copyright:

    © 2022 by the authors.

    Licensee MDPI, Basel, Switzerland.

    This article is an open access article

    distributed

    under

    the

    terms

    and

    conditions of the Creative Commons

    Attribution (CC BY) license (https://

    creativecommons.org/licenses/by/

    4.0/).

    electronics

    Review

    A Review on Deep Learning Techniques for IoT Data

    Kuruva Lakshmanna 1

    , Rajesh Kaluri 1

    , Nagaraja Gundluru 1, Zamil S. Alzamil 2

    ,

    Dharmendra Singh Rajput 1,*, Arfat Ahmad Khan 3,*, Mohd Anul Haq 2,*

    and Ahmed Alhussen 4,*

    1

    Vellore Institute of Technology (VIT), Vellore 632014, India; lakshman.kuruva@vit.ac.in
    (K.L.);

    rajesh.kaluri@vit.ac.in (R.K.); nagaraja.g@vit.ac.in (N.G.)

    2

    Department of Computer Science, College of Computer and Information Sciences,
    Majmaah University,

    Al-Majmaah 11952, Saudi Arabia; z.alzamil@mu.edu.sa

    3

    School of Manufacturing Engineering, Suranaree University of Technology,

    Nakhon Ratchasima 30000, Thailand

    4

    Department of Computer Engineering, College of Computer and Information Sciences,
    Majmaah University,

    Al-Majmaah 11952, Saudi Arabia

    *

    Correspondence: dharmendrasingh@vit.ac.in (D.S.R.); khansatwat@gmail.com (A.A.K.);

    m.anul@mu.edu.sa (M.A.H.); aa.alhussen@mu.edu.sa (A.A.)

    Abstract: Continuous growth in software, hardware and internet technology has
    enabled the growth

    of internet-based sensor tools that provide physical world observations and data
    measurement.

    The Internet of Things(IoT) is made up of billions of smart things that communicate,
    extending the

    boundaries of physical and virtual entities of the world further. These intelligent
    things produce or

    collect massive data daily with a broad range of applications and ﬁelds. Analytics
    on these huge

    data is a critical tool for discovering new knowledge, foreseeing future knowledge
    and making

    control decisions that make IoT a worthy business paradigm and enhancing technology.

    Deep

    learning has been used in a variety of projects involving IoT and mobile apps,
    with encouraging

    early results. With its data-driven, anomaly-based methodology and capacity to
    detect developing,

    unexpected attacks, deep learning may deliver cutting-edge solutions for IoT intrusion
    detection.

    In this paper, the increased amount of information gathered or produced is being
    used to further

    develop intelligence and application capabilities through Deep Learning (DL) techniques.
    Many

    researchers have been attracted to the various ﬁelds of IoT, and both DL and IoT
    techniques have

    been approached. Different studies suggested DL as a feasible solution to manage
    data produced by

    IoT because it was intended to handle a variety of data in large amounts, requiring
    almost real-time

    processing. We start by discussing the introduction to IoT, data generation and
    data processing.

    We also discuss the various DL approaches with their procedures. We surveyed and
    summarized

    major reporting efforts for DL in the IoT region on various datasets. The features,
    application and

    challenges that DL uses to empower IoT applications, which are also discussed
    in this promising

    ﬁeld, can motivate and inspire further developments.

    Keywords: big data; deep learning; data analytics; internet of things; IoT

    1. Introduction

    Applications based on smartphones, sensors and actuators are becoming more and

    more intelligent over the past decade and facilitate communication between devices
    and

    the performance of more complex tasks. The number of network devices exceeded
    the

    world population [1] in 2008 and the ﬁgure continues to increase exponentially
    until today.

    In the age of the Internet of Things (IoT), smartphones, built-in systems, wireless
    sensors

    and most every device are connected by a local network or the internet. The growth
    in

    Internet-of-Things (IoT), which includes smartphones [2], sensor networks [3],
    sensors

    unusual aerial vehicles (UAV) [4,5], cognitively smart systems [6], and so on
    has created a

    multitude of new applications across various mobile and remote platforms. The
    amount

    of data obtained from such devices often increases with the growing number of
    devices.

    Electronics 2022, 11, 1604. https://doi.org/10.3390/electronics11101604

    https://www.mdpi.com/journal/electronics

    Electronics 2022, 11, 1604

    2 of 23

    New technologies are emerging that evaluate data gathered for practical connections
    and

    decision making, progressing to Artiﬁcial Intelligence (AI) using Machine Learning(ML)

    and Deep learning (DL) algorithms.

    We generally adopt a work ﬂow model, which consists of collecting data, analysis
    of

    data, visualizing data and evaluating data [7,8], in order to build successful
    IoT applications.

    Data analysis is a crucial, computer-intensive dimension in which historically
    developed

    technologies typically combine technical expertise and ML (e.g., logistical regression,

    vector support, and the random forest) for classiﬁcation or regression problems
    such as

    trafﬁc conditions forecast [9], tracking vehicles [10], estimating delivery time
    [11], etc.

    Furthermore, as society enters the “big data” generation, these traditional methods
    are not

    strong enough to process huge, volatile, and irregular data from invisible, heterogeneous,

    IoT-based databases. Nearly all conventional systems focus on fully enclosed features
    and

    their efﬁciency relies heavily on the previous knowledge of particular areas.
    Most learning

    techniques used in those systems usually use shallow architectures, whose modeling
    and

    representational capacity are very small. As such, it is essential to have a much
    more

    effective analytical tool to exploit the maximum potential of the invaluable raw
    data

    produced in various IoT operations.

    The annual economic effect of IoT in 2025 will range from $2:7 to $6:2 trillion
    based

    on McKinsey’s study on the IoT global economic consequences [12]. Healthcare is
    the

    largest share of this sector about 41%, followed by industry and oil with 33%
    and 7%,

    respectively, of the IoT sector. Additional ﬁelds such as transport, irrigation,
    public infras-

    tructure, security and retailers account for approximately 15% of the entire IoT
    sector. Such

    expectations mean the immense and rapid growth of IoT services, their data generation
    and,

    therefore, their corresponding demand in the upcoming years. In McKinsey’s report
    [12],

    the economic impact of machine learning is characterized by automated learning;
    ’the

    use of computers to carry out tasks that rely on complex assessments, precise
    evaluations

    and innovative problem solving’. The study addresses the key proponents of information

    automation in ML techniques, such as DL and neural networks.

    Communication from Machine-To-Machine can be short distance using Wi-Fi, Blue-

    tooth and ZigBee technologies or broad-band mobile networks such as LoRa, M1 CAT,

    Sigfox, GSM, 4G, LTE and 5G [13].Since IoT devices are used extensively in all
    sorts of ev-

    eryday applications, the cost of IoT devices needs to be kept low. Furthermore,
    IoT devices

    should be able to handle fundamental tasks such as collection of data, M2M interaction,

    etc. IoT is also tightly linked to “big data” as IoT devices collect and exchange
    vast data

    continuously. In general, therefore, an IoT infrastructure uses methods to manage,
    store

    and evaluate massive data [14,15]. In order to facilitate the communication of
    the M2M

    with protocols such as AMQP, MQTT, CoAP and HTTP [16], it has become necessary
    in

    IoT infrastructure to use IoT-platforms such as Thingsboard, Thingspeak DeviceHive
    or

    Mainﬂux. It is often necessary for certain data processing to occur on IoT devices
    instead of

    other centralized nodes in the “cloud computing” network according to the application.

    As the processing moves partially to the end network elements, a new data processing

    model, called “edge computing”, is introduced [17]. Furthermore, they may not
    be ideal

    for heavy workloads due to these devices often being low-end devices. Therefore,
    an in-

    termediate node with enough resources is required to manage advanced processing
    tasks

    which are physically close to the end network components so that the burden caused
    by

    massive transmission of all data to a number of the internal cloud nodes is reduced.
    Here,

    “Fog nodes” [18] are introduced to assist big data management on IoT devices through

    the provision of storage, processing and networking services. Finally, the data
    is stored in

    cloud storage, where advanced testing by means of different ML and DL technologies
    and

    sharing with other devices leads to the establishment of smart apps with modern
    value

    added. DL has this intense publicity because conventional methods of machine learning
    do

    not meet the current analytical criteria of IoT systems. Instead, according to
    the structure of

    data generation and processing of IoT as shown in Figure 1, IoT systems require
    speciﬁc

    conventional data analytic methods, and AI methods. Dl methods used to analyze
    the big

    Electronics 2022, 11, 1604

    3 of 23

    data in IoT cloud and streaming and fast data analysis in the edge or fog computing
    and

    data from IoT devices.

    Figure 1. Data generation and processing of IoT.

    While an IoT has been conducted in recent years, the entire ﬁeld of deep learning
    in

    IoT applications remains in infancy. Few researchers [19–24], reviewed papers
    in wireless

    sensor network(WSN) with ML, implementation of DL methods for healthcare department,

    mai DL approaches and applicability in IoT applications focusing on Big and streaming
    data

    analysis and DL Algorithms with its applications to make smart development, respectively.

    After taking the survey on existing papers, there is still no survey that explores
    a wide range

    of IoT devices thoroughly using DL. We also agree that it is time to review and
    inspire future

    study recommendations in current literature. To this end, this paper summarizes
    current

    research developments and patterns in using DL techniques to promote IoT applications.

    We will demonstrate how using DL to enhance IoT applications can be implemented

    from various perspectives. For example, monitoring of safety, analysis of diseases,
    indoor

    locations, artiﬁcial control, predicting the trafﬁc, residential robots, drive
    automation, fault

    assessment and inspection of manufacturing. The issues, challenges and possible
    research

    directions for DL in IoT applications are also discussed to encourage future developments

    in this promising area and empower them.

    The rest of this paper is organized as follows: Section 2 includes a variety of
    popular

    and common DNN architectures. This also offers a concise overview of advances
    and

    fast DL architectures along with state-of-the-art DL algorithms. Section 3 will
    review IoT

    applications and challenges in various domains (e.g., education, manufacturing,
    smart city,

    healthcare, and Intelligent Transportation Systems(ITS), agriculture) using DL.
    This article

    concludes in Section 4.

    2. Deep Learning Techniques

    Stakeholders must clearly grasp the meaning, building blocks, potentials and chal-

    lenges of the IoT and its derivatives big data. IoT and Big Data connect in two
    ways; an IoT

    is one of the leading producers and a major target for Big Data research in order
    to enhance

    IoT processes and services [25]. In addition, IoT Big Data Research has shown
    that it gives

    value to society. The IoT data is distinct from the overall big data. We need
    to explore the

    properties of IoT data [26] and how they vary from the traditional big data to
    analyze the

    requirements of IoT data analytics.

    Here, discussing the advantages of DL over conventional methods of ML, which

    highlight the beneﬁts of DL in IoT applications [27,28]. DL has more powerful
    capacity

    to generalize the dynamic relation of vast raw data in different IoT applications
    when

    Electronics 2022, 11, 1604

    4 of 23

    compared with normal ML methods. The ability to process data is generally dependent

    upon the depths and the different architectures of learning models, including
    convolutional

    architectures; thus, in big data, DL models can most likely perform better while
    common

    learning models can easily be over-touched when dealing with a ﬂood of data. Deep

    learning is an end-to-end process that is capable of learning how to derive successful

    features from raw data, without taking time and labor-intensive hand-made applications.

    In recent years, DL models have been more conscious than the other conventional
    ML

    approaches. Figure 2 shows the search pattern in Google trends, in which DL is
    increasingly

    popular amongst other ML algorithms such as random forest, k-means, SVM and decision

    tree. Moreover, as per the Google trend, Figure 3 shows that the CNN method became

    more popular out of all DL methods.

    Figure 2. Google trend shows more interest on DL in recent years.

    Figure 3. Google trend shows more interest on CNN in recent years.

    Deep learning is a recently developed multilayer neural network learning algorithm.

    It has revolutionized the concept of machine learning, propelling artiﬁcial intelligence

    and human–computer interaction forward in leaps and bounds. They have performed
    the

    Electronics 2022, 11, 1604

    5 of 23

    evaluation test for CNN and DBN on the MNIST database and the real-world handwritten

    character database which gave 99.28% and 98.12% accuracy [29]. Despite its complex

    structure and the diversity of registered user data, the researchers [30] work
    here assumes

    the MIA in a semi-white box scenario where system model structures and parameters
    are

    available but no user data information is available, and veriﬁes it as a serious
    threat even

    for a deep-learning-based face recognition system. The impact of power plants
    on GEP

    over their lifetime is studied in this article [31]. Deep learning-based techniques
    are also

    commonly employed for time series forecasting.

    DL contains powerful methods for boosting knowledge which allow a large number

    of unstructured information to be processed [32]. These techniques are ideal for
    managing

    big data and for computer intensive processes such as image pattern recognition,
    voice

    acknowledgment and analysis, etc. DL needs strong computing skills and is known
    to take

    up time in the model training cycle, which has been one of the biggest challenges
    in the past.

    Efﬁcient GPUs are widely used to carry out DL tasks with increased requirements
    for CPU

    capacity. Thus, in the period of big data, DL has become a popular form of data
    processing

    and modeling [27]. In the DL methodology, the number of layers is tight with determined

    characteristics. In DL, the functionality is automatically estimated and feature
    calculation

    and extraction are not required before such a method is applied. In addition,
    the progress

    of DL introduces a wide range of network structures. The goal of the authors [33,34]

    project is to quantify EEG features in order to better understand task-induced
    neurological

    impairments caused by stroke and to assess biomarkers to distinguish between ischemic

    stroke patients and healthy adults.

    In the two phases of training and forecasting, DL models typically offer two major

    improvements over conventional ML approaches [21]. Initially, they minimize the
    need for

    human training and then remove those features that may not be obvious for the
    human

    view [35]. DL methods also improve the accuracy. DL, like traditional ML, can
    be parti-

    tioned into two cases: non-supervised learning (unlabeled data models) and supervised

    learning (labeled data models).

    2.1. Supervised Learning

    The system model for supervised learning is built into a labeled training set.
    The

    backpropagation method is the primary approach used in supervised learning [36].

    2.1.1. Recurrent Neural Networks (RNNs)

    The RNN is a discriminative categorical method which can process the serial and

    time series data mainly. In several tasks, the estimation relies on many previous
    tests

    in order to evaluate the sequences of inputs, besides the classiﬁcation of individual
    tests.

    A neural feeder network does not apply in such applications because it does not
    rely on

    input and output layers. The RNN data contains the present sample as well as the
    previous

    observed sample as the input. The output at stage m can be affected by the output
    at stage

    m-1. Every neuron has a feedback loop that produces the output to the next step
    as an

    input. This step says that each neuron has an internal memory to store the previous
    level

    data estimates in RNN. We can not use the original back propagation here, despite
    the

    presence of neuronal cycles, because it works depending on loss derivation in
    relation

    to the weight in the previous layer even though we do not have a stacked layer
    model

    in RNNs. The center of Backpropagation Through Time(BPTT) [37] is a technique
    called

    “unrolling the RNN”, so that we build a feeder network over time. Figure 4 depicts
    the

    structure of an RNN and unrolled concept.

    Electronics 2022, 11, 1604

    6 of 23

    Figure 4. The Structure of Recurrent Neural Network Model.

    However, due to the diffusion of gradient problems and longer term dependency,

    RNNs are constrained by looking back only a few steps. New methods are proposed,
    such

    as GRU (Gated Recurrent Unit) [38], LSTM (Long Short-Term Memory) [39], designing

    the hidden state simulation to decide what to hold in past and present memory.
    In order

    to tackle problems sequentially such as text or speech and time-series data problems
    in

    different lengths, RNNs were developed. The RNNs can be applied to processes include

    detecting drivers’ actions in intelligent cars, deﬁning the patterns of movements
    of individ-

    ual persons and estimating household consumption. Consequently, RNN is mainly
    used in

    the ﬁeld of natural language processing (NLP) [40–42]. Table 1 shows the where
    RNN used

    in IoT ﬁelds.

    Table 1. RNN model in IoT ﬁelds.

    Applications in IoT

    Reference

    Dataset Used

    Prediction of Transport or

    Group density

    [43,44]

    data of the Telecommunication depart-

    ment/CDR

    Smart city

    [44–46]

    data of the Telecommunication depart-

    ment/CDR, Climate data, IDS data

    Energy

    [47]

    Electric power consumption http://

    archive.ics.uci.edu/ml (accessed on 5

    May 2022).

    Recognising images

    [48,49]

    SportVU dataset

    Education

    [50,51]

    MOOC dataset

    Sport and Retail

    [52,53]

    Sports data and MPII Cooking dataset,

    MERL Shopping Dataset

    Detection in physiology and

    psychology

    [54,55]

    Montalbano

    gesture

    recognition

    dataset, Google Abacus Dataset

    2.1.2. Long Short Term Memory (LSTM)

    The LSTM is discriminative method which can work on time-stamp, sequential and

    long time-dependent data. Figure 5 shows the model of LSTM. LSTMs are a form of
    RNN

    that can learn order-dependence in series estimation. LSTM uses its unit gate
    deﬁnition,

    each based on its input calculating a value from 0 to 1. Every neuron having four
    gates to

    maintain the data such as feedback loop, multiplying forget, read and write gates.
    These

    Electronics 2022, 11, 1604

    7 of 23

    gates control the accessing memory cells and preventing distractions by unrelated
    inputs.

    The neuron writes its data into itself when the gate forget is working, otherwise
    it forgets

    its last data by sending a 0. The other neurons that are inter connected will
    write to it and

    read the content of it, when write and read gate is ﬁxed to 1. By knowing what
    LSTM

    data are to be recalled, the stored memory cell computations will not be corrupted
    over

    time. The common way to reduce the error by training network is BPTT. LSTM models
    are

    stronger than RNN models if the data is characterized by a long time dependence
    [38].

    Figure 5. The Structure of Long Short Term Memory Model.

    Generally, LSTM is the expanding model of RNN. Various LSTM methods are pro-

    posed based on the original network [39,56]. LSTMs and standard RNNs were implemented

    for predicting sequence and sequence labeling tasks successfully. These models
    performed

    better than RNNs on context-sensitive(CS) and context free(CF) languages [57].
    For con-

    nected models with small sizes, LSTMs converge rapidly and provide state-of-the-art

    machine translation, voice recognition efﬁciently [58]. LSTM networks are not
    well devel-

    oped for larger networks on one single multi-core computer. Table 2 shows where
    LSTM is

    used in IoT ﬁelds.

    Table 2. LSTM model in IoT ﬁelds.

    Applications in IoT

    Reference

    Dataset Used

    Prediction

    of

    Transport

    or

    Group density

    [44]

    data of the Telecommunication depart-

    ment/CDR

    Small period trafﬁc prediction

    [59]

    Caltrans Performance Measurement

    System (PeMS) database

    Autonomous driving

    [60]

    Large scale video dataset

    Detection in physiology and

    psychology

    [61,62]

    OPPORTUNITY [63], Skoda Dataset,

    NMHA Dataset

    Localization

    [64]

    locations and environment data

    Smart home and city

    [43,65]

    electrical consumption data, GPS data

    in Japan

    Electronics 2022, 11, 1604

    8 of 23

    Table 2. Cont.

    Applications in IoT

    Reference

    Dataset Used

    Energy

    [66–68]

    GermanSolarFarm data set, Forecast

    dataset, Beach dataset

    Health-care

    [69–71]

    Opportunity dataset [72,73], PAMAP2

    dataset [74], Daphnet Gait dataset

    (DG) [75], Diagnoses clinical data

    Education

    [51]

    MOOC dataset

    Sport

    [49,76]

    NBA SportVu data, the Collective Ac-

    tivity Dataset and volleyball dataset.

    2.1.3. Convolutional Neural Networks (CNN’s)

    The CNN is a discriminatory method which can used more for identifying images

    and differentiating one from the another. The CNN is made up of an input, an output
    and

    some hidden layers. The sub sample layers, pooling layer, convolutional layers,
    pooling,

    fully connected (FC) or non-linear layers are hidden layers in the architecture
    of CNNs.

    The CNN is the main version of the FCs. All neurons are connected from one layer
    to

    the each and every neuron in the another layer. So, FCs makes them overwrite the
    data.

    Figure 6 depicts the structure of a CNN.

    Figure 6. The Structure of Convolutional Neural Network model.

    DNNs with a dense relation between the layers are difﬁcult to train and do not
    test well

    for vision-based tasks due to the characterization of the translation-invariance
    [77]. These

    problem can be solved by the CNN with the support of the above said property.
    A CNN

    will obtain a 2D input and will extract high quality characters from a range of
    hidden

    layers (e.g., image or speech). The convolution layer is the heart of a CNN which
    contains

    ﬁlters with the same input shape but small size. In order to streamline the underling

    computing, complex networks can involve global or local pooling layers which decrease

    the data dimensions by integrating neuron cluster outputs into one neuron in one
    layer

    in the next. Usually, a RELU layer is the activation function [78,79], accompanied
    by

    additional convolutions such as pooling layers, FC layers and hidden layers since
    the

    activating feature and the ﬁnal convolution cover their inputs and outputs. Table
    3 shows

    where the CNN is used in IoT ﬁelds.

    Electronics 2022, 11, 1604

    9 of 23

    Table 3. CNN model in IoT ﬁelds.

    Applications in IoT

    Reference

    Dataset Used

    Healthcare

    [70,71,80–84]

    Opportunity dataset [72], PAMAP2

    dataset [74], Daphnet Gait dataset

    (DG) [75], human action recognition

    dataset, Cardiology dataset, Knee Car-

    tilage dataset, Food Image dataset,

    Parkinson’s Disease data

    Smart home and city

    [65,85–88]

    Home Robotcs data, Brainrobotdata,

    Electric consumption data, CNRPark-

    EXT dataset, PKLot datasets

    Transportation

    [89–93]

    Trafﬁc data, KITTI Object Detecion

    dataset, Driving dataset

    Recognizing images

    [76,84,87,88,

    94–100]

    PKLot datasets, CNRPark-EXT dataset,

    Garbage In Images (GINI) dataset,

    UEC-256/UEC-100 Dataset, Leaf Image

    dataset, German Trafﬁc data, LISA US

    trafﬁc sign dataset, parkinson’s disease

    dataset, full-ﬁeld digital mammograms

    (FFDMs)

    Detection of physiology and

    psychology

    [54,61,101]

    Frames Labeled In Cinem, Leeds Sports

    Dataset, OPPORTUNITY, Skoda and

    Actitracker datasets, Gesture Data

    Agriculture

    [96,102,103]

    Leaf Image data, U.S. Geological Sur-

    vey (USGS), Agriculture data

    Sport and Retail

    [76,100,104–

    107]

    Basket ball data, Vollyball data Group

    activity data, Real-world internet data,

    clothing image dataset, INRIA dataset

    Localization

    [108–110]

    Fingerprint data, GPS data

    Government

    [111]

    Climate Dataset

    2.1.4. Transformer-Based Deep Neural Networks

    In the deep learning context, the transformer denotes a sequence-to-sequence archi-

    tecture of neural networks that depend on the self-attention process to capture
    global

    dependencies [112]. It attracted the thoughtfulness of several researchers from
    the ﬁeld

    of natural language processing (NLP) due to the transformer being designed to
    take se-

    quence data as input. One of the most successful transformer-based models which
    achieved

    state-of-the-art performance in many NLP tasks is Bidirectional Encoder Representations

    from Transformers (BERT) [113]. Recently, the transformer is also charming progressively

    standard in the computer vision community. Image classiﬁcation with the transformer

    that takes patches of images as input was proposed by Dosovitskiy et al. [114].
    One of

    the successful project works carried out for an end-to-end object detection framework

    based on the transformer named it as a detection transformer (DETR) [115]. DETR
    sim-

    pliﬁes the object detection pipeline by dropping multiple hand-designed components

    that encode prior knowledge, such as spatial anchors and non-maximal suppression.
    So,

    the transformer-based deep neural network is also a promising mechanism to handle
    the

    artiﬁcial intelligence tasks such as NLP and computer vision related areas.

    2.2. Unsupervised Learning

    Unsupervised learning must be used as a complement to traditional learning methods

    to deal with massive unlabeled data. Training can be performed using stacked restricted

    Electronics 2022, 11, 1604

    10 of 23

    Boltzmann machines (RBMs) or stacked auto-encoders to initialize, replicate back
    and

    modify globally.

    2.2.1. Autoencoder (AE)

    The AE is a generative method which can be suitable for extracting the features
    and

    reducing the size with same number of input and output units. These input and
    output

    layers are connected with one or more hidden layers. A neuronal network conﬁgured
    to

    copy its input to its output is an auto-encoder [116]. The layer of the code is
    private (hidden)

    to show the input. The layer is made up of two major parts: an encryption encoder
    which

    maps the code input and a decoder which maps the code in order to decrypt the
    original

    input. The auto-encoder is equipped by reducing input-output errors. The AEs are
    used

    mainly for diagnostics and fault identiﬁcation due to their action in creating
    the input at the

    output layer. It will shows many application in IoT. Sparse auto-encoders [117],
    denoising

    auto-encoders [118] and contractive auto-encoders are included in the AE variants.
    Figure 7

    shows a brief architecture of an auto-encoder and a concrete example. Table 4
    shows where

    the AE is used in IoT ﬁelds.

    Table 4. AE Model in IoT ﬁelds.

    Applications in IoT

    Reference

    Dataset Used

    Fault Assessment

    [119,120]

    Diagnosis dataset, multivariate signal

    datasets

    Image Recognition

    [121]

    optical remote sensing images from

    Google Earth

    Detection in physiology and

    psychology

    [122]

    H3.6M dataset [123]

    Energy

    [66]

    GermanSolarFarm data set

    Localization

    [124,125]

    HTC

    Sensation

    data,

    Fingerprint

    dataset

    Public Sector

    [121]

    optical remote sensing images from

    Google Earth

    IoT Infrastructure

    [126,127]

    IDS dataset

    2.2.2. Restricted Boltzmann Machines (RBMs)

    The RBM is a generative method which can work on various kinds of data and its
    suit-

    able for classifying data, reducing the dimensionality, extracting features, etc.
    RBMs [128]

    are probabilistic graphic models which can be viewed as deep stochastic networks.
    A Boltz-

    mann version of the RBMs is a constraint on the fact that their neurons can form
    a bipartite

    chart; there can be a symmetrical relation between a pair of nodes in both visible
    and

    hidden groups. However, there is no connection among the nodes in the same group.
    In

    addition, all visible and secret (hidden) neurons are linked to the bias device.
    It may be

    necessary to stock RBMs to make DNNs. They are also the backbone of the networks
    of

    DBNs. DBNs can be built in particular by stacking RBMs and alternatively ﬁne-tuning

    the associated deep gradient descent and backpropagation networks. The goal of
    RBM

    training is to optimize the product for the visible units in all probabilities.
    RBM has a

    similar feature to AEs, which is used to measure the latent parameters, which
    are used in

    turn to reconstruct the data input with the backward stream. Figure 8 shows the
    structure

    of an RBM. Table 5 shows the where RBM used in IoT ﬁelds.

    Electronics 2022, 11, 1604

    11 of 23

    Figure 7. Architecturee of Auto-Encoder Model.

    Table 5. RBM model in IoT ﬁelds.

    Applications in IoT

    Reference

    Dataset Used

    Energy

    [47,129]

    Reference

    Energy

    Disaggregation

    Dataset (REDD) [130], Energy Con-

    sumption data

    Localization

    [131–133]

    Fingerprint dataset, received signal

    strength (RSS) data

    Health Sector

    [69]

    e International Classiﬁcation of Dis-

    eases (ICD-9) codes

    Intelligent

    Transportation

    System

    [134]

    Trafﬁc dataset

    2.2.3. Deep Belief Networks (DBNs)

    The DBN is a generative method which can work on various types of data. DBNs can

    be seen as a combination of basic, unsupervised networks (e.g., RBMs and AEs),
    where a

    hidden layer of each sub-network is used as a visible layer for the next one.
    Such a network

    has connections between the layers, but not inside the layer. DBNs can also be
    trained

    greedily layer by layer. This composition leads to a rapid and unregulated training
    process,

    which is carried out by the “lowest” layers, where contrasting divergence is applied
    in turn

    for each sub-network. The DBN training is performed layer by layer to view each
    layer as

    an RBM trained above the previously trained layer. Hence, DBN can be fast and
    efﬁcient

    in DL methods. The ﬁrst is intended for learning about data processing with unlabeled

    data, and the second attempts to achieve an optimum solution through the harmonization’s

    of DBN with marked data [135]. DBN combines unsupervised training and supervised

    methods to create model designs. Figure 9 shows the structure of a DBN model.
    Table 6

    shows the where the DBN is used in IoT ﬁelds.

    Electronics 2022, 11, 1604

    12 of 23

    Figure 8. The Structure of Restricted Boltzmann Machine Model.

    Figure 9. The Structure of Deep Belief Networks Model.

    Electronics 2022, 11, 1604

    13 of 23

    Table 6. DBN model in IoT ﬁelds.

    Applications in IoT

    Reference

    Dataset Used

    Transport

    [120,136]

    PeMS data set, Multivariat Time Series

    Dataset

    Energy

    [66]

    GermanSolarFarm data set

    Health Sector

    [69,137]

    International Classiﬁcation of Diseases

    (ICD-9) codes

    Intelligent

    Transportation

    System

    [138]

    IDS dataset

    Image Recognition

    [120]

    Multivariat Time Series Dataset

    Detection of physiology and

    psychology

    [139]

    AFEW4 dataset

    Security

    [140,141]

    Security dataset, Malicious Dataset

    3. IoT Applications and Challenges

    The data analysis leads signiﬁcantly to IoT as discussed in the previous section.
    In this

    section, we ﬁrst review the IoT data features and its applications. Then, we review
    several

    issues (challenges) important for the implementation and development of IoT analysis

    from the point of view of DL.

    3.1. Data Features of IoT

    As data is the basis for the extraction of knowledge, high-quality information
    is

    important. The IoT has many features and is a complex program. The features vary
    from

    domain to domain. Here, some features are discussed.

    Connectivity allows the Internet of Things to bring ordinary objects together.
    Such

    objects are important for their communication since simple interactions of the
    object level

    lead to IoT collective intelligence. With this connection, the networking of smart
    devices

    and applications will build new business opportunities for the IoT. The key operation
    of

    the IoT is the gathering of data from the world, accomplished through the complex
    changes

    across the devices. Dynamically, the state of such devices varies, such as sleep
    and wake up,

    connection and/or disconnection and the contexts of devices such as temperature,
    position

    and speed and also number of machines can change with time, place and person.

    IoT is nothing without sensors which can detect or quantify any changes in the

    environment in order to produce data that can report on their status or even communicate

    with the environment. IoT sensors and machine learning techniques combined have
    taken

    a major role in health informative systems such as discovering heart failure,
    lung infections,

    brain movement and many more [142,143]. The sensing data give a rich view to the

    dynamic world, even though it is basically equivalent to the input from the physical
    world.

    Sensors can be used in many applications including our daily life activities.
    For example,

    an Automatic Aircraft Control System is made up of multiple sensors that are used
    for

    a variety of activities such as speed control, height monitoring, position tracking,
    door

    status, avoid obstacles, fuel level, navigating, and more. A computer analyzes
    the data

    from all of these sensors by comparing it to predetermined values. IoT is smart
    because of

    its group of smart computing methods, software and hardware. Despite smart technology’s

    widespread popularity, IoT intelligence is only concerned with the interaction
    between

    devices while traditional input methods and visual user interface ensure the user
    and

    system interaction. Securing endpoints, networks and data that are passed over
    all of this

    means developing a security framework is critical.

    Several papers deﬁned the overall characteristics of big data in terms of volume,
    speed

    and variety from different aspects [144–146]. However, to characterize the IoT
    big data by

    the following 6V features:

    Electronics 2022, 11, 1604

    14 of 23

    1.

    Volume: In IoT, a billion devices will generate the huge data.

    2.

    Velocity: How the IoT data can be accessed quickly and efﬁciently in real time?

    3.

    Variety: Basically, IoT data is text, video, audio, sensor data, etc. It may be
    structured

    or unstructured data.

    4.

    Veracity: Refers to the accuracy, consistency and trust of data, which leads to
    precise

    analytics in effect.

    5.

    Variability: Basically, Data ﬂow rate depends on IoT applications, generating
    data

    components, time and space.

    6.

    Value: To transform IoT big data into useful information and insights that offer
    many

    advantages to organizations.

    3.2. Deep Learning Using IoT Devices

    The availability of the latest IoT frameworks and their open source libraries
    for con-

    tinuous monitoring, real-time edge-level processing and encrypted storage of generated

    data such as text, tabular data, audio and video leads to enormous increasing
    rate of IoT

    datasets [147]. Such data are produced by diverse hardware systems working in
    outdoor

    and indoor ground-works which includes smart city sensors, smart organization
    ﬁelds,

    AR/VR practice centers, etc. In order to do the training of such large scale high-quality

    IoT datasets that have been collected over a period of time within a reasonable
    amount of

    time, we need a distributed training system which is scalable and efﬁciently utilizes
    the

    hardware resources of millions of IoT devices. Speciﬁcally, such a system environment

    should consider the current network connectivity among these devices, and be able
    to

    work together during training to generate the ﬁnal deep learning (DL) models at
    very high

    speeds for real-time problem-solving [148].

    The authors in [149] proposed distributed training on multiple IoT devices instead
    of

    following the traditional approach that loads such large scale datasets to train
    and build a

    model locally within a data center or GPU cluster. In this method, instead of
    using a GPU

    cluster available within a data center, the DL model trains and builds on the
    hardware

    of millions of medium-sized IoT devices across the context of the infrastructure.
    They

    addressed model convergence of the subsequently generated model and scalability
    of the

    system. The key issues during involvement of the all IoT devices for training
    are privacy to

    the data, time consuming dataset loading I/O, the slow exchange of model gradients
    while

    training, and high computational operations. These are the some of the challenges
    yet to

    address elaborately in order to train and build a DL model using global infrastructure.

    3.3. Applications of IoT

    The IoT application is classiﬁed according to its basic attributes and characteristics.

    Some problems should be taken into consideration for the effective operation of
    IoT data

    analysis. Some of the IoT applications shown in Figure 10. The IoT applications
    may be

    categorized in the following ways:

    1.

    Smart Home: Probably, the ﬁrst application of the IoT is smart home. As per the
    IoT

    analytics, more than 70,000 people are searching about the ‘smart home’ every
    month.

    Many big companies funding the IoT startup for smart home projects. The smart

    home appliances include washing machines, refrigerators, bulbs, fans, televisions,

    smart doors which can built and communicate online each other with approves users

    to provide better monitoring and managing the appliances and also optimizing the

    energy consumption.

    2.

    Smart City: The hypothesis of the optimized trafﬁc system I mentioned earlier,
    is one

    of the many aspects that constitute a smart city. This category is most speciﬁc
    to the

    cities. Mostly, the problems are common in all cities. However, sometimes, they
    may

    vary city to city. Global problems are also emerging in numerous cities, including
    safe

    drinking water, declining air quality and rising urban density. The IoT applications
    in

    city areas are water management, waste management, security, climate monitor,
    trafﬁc

    Electronics 2022, 11, 1604

    15 of 23

    management, etc. We can reduce the noise, pollution, accidents, parking problems,

    street light problems and public transport because of the smart transportation
    in cities.

    3.

    Health care: Relevant real-world knowledge is missing in the tools of modern medical

    science. It uses the remaining data, managed environments and medical examination

    volunteers mainly. By research, real-time ﬁeld data, and testing, IoT opens the
    door to

    a sea of useful data. To improve the health of a patient, new technologies have
    been

    developed using the IoT in the medical ﬁeld [150,151]. The sensors can monitor
    a

    wound’s state, blood pressure, heart rate, sugar and oxygen levels, body temperature,

    etc., without the presence of the doctors and medical practitioners. In the article
    [152],

    physiological signals are instantaneous and sensitive to neurological changes
    caused

    by the cognitive load imposed by diverse driving conditions, and are used to assess

    the relationship between neurological results and driving environments.

    4.

    Security: IoT can improve security everywhere in the world using smart cameras.

    Smart security systems can identify criminals or avoid dangerous situations by
    means

    of real-time digital image recognition. Security is the biggest challenge in the
    IoT ﬁeld.

    5.

    Smart Retail: It is one of the biggest applications in the IoT ﬁeld. Solutions
    for

    tracking goods while they are on the road, or getting suppliers to exchange inventory

    information have been on the market for years. However, it is also limited. The
    use

    of intelligent GPS and RFID technologies makes it easy to track the product between

    the output and the store and greatly reduce costs and time. The applications of

    IoT in retail are tracking location, inventory management, equipment maintenance,

    analyzing mall trafﬁc, etc.

    6.

    Agriculture: Many researchers have already worked in this emerging application
    of

    IoT [153,154]. Through the growing use of the IoT, connected devices have penetrated

    everything from health and well-being to home automation, car and logistics to

    intelligent cities, security, retail and industrial IoT. However, since farming
    operations

    are remote and there are many resources that the IoT can monitored, the way farmers

    operate can be completely changed. Here, the major problem is to change farmers

    to smart farming. They can be beneﬁted in many ways such as checking soil quality,

    weather conditions, cost management, reducing wastage, managing crop etc.

    7.

    Wearables: Now a days, we can see wearables with anyone which can monitor heart

    rate, sugar and oxygen levels, blood pressure, temperature, sleeping status, walk

    distance, etc. Wearable technology is an excellent aspect in IoT applications
    and is

    undoubtedly one of the ﬁrst industries to use IoT.

    8.

    Industrial Automation: Remote access and control are enabled with industrial IoT

    networking, but more signiﬁcantly data extraction, processing, sharing and analysis

    by various data sources. This has tremendous productivity and performance improve-

    ment potential. Their low cost and rapid development characterize the IIoT solutions.

    In order to achieve a better result in cost and customer service, IoT Applications

    can also re-engineer devices and their packages with IoT automation easily. Some

    applications are product ﬂow monitoring, digitization, quality control, safety
    and

    security, package optimization, logistics and supply chain optimization.

    3.4. Challenges

    Data sources are a foundation for the success of DL methods. To apply DL to IoT
    is

    having a problem with the lack of big datasets, to make DL more accurate, we need
    more

    data. Another difﬁculty in IoT applications is to generate raw data in a suitable
    form to

    be fed into DL models. Many DL methods need preprocessing data to get more accurate

    results. For IoT applications, preprocessing is more complex since the system
    deals with

    data from different sources that may have various formats and distributions while
    showing

    missing data. The way data collection systems are applied is really a vital research
    topic.

    The number of sensors working and the way the sensors are deployed have an inﬂuence
    on

    data quality. Even if the model architecture is well built, you must build a data
    collection

    Electronics 2022, 11, 1604

    16 of 23

    module for the entire IoT system layout. It should be more reliable, cost effective
    and

    trustworthy model.

    Security is the biggest challenge in the IoT ﬁled as we collect data from many
    sources.

    In many IoT applications, maintaining data protection and conﬁdentiality is a
    major concern

    as IoT large data is distributed for review through the Internet, making this
    accessible

    worldwide. In several applications, anonymization can be used, but these methods
    can be

    exploited and re-identiﬁed as anonymized data. DL models are learning the characteristics

    of raw data and thus can beneﬁt from any invalid data stream. Here, DL models
    must be

    updated using certain methods for ﬁnding irregular or invalid data.

    Figure 10. IoT Applications.

    For IoT system designers, designing DL is a great challenge to meet the needs
    of man-

    aging DNNs on resource-restricted devices. This is expected to increase as the
    dimensions

    of the datasets expand daily and new algorithms are included in DL’s IoT solutions.
    DL

    also has many limitations. The authors [155] published on DDN’s false faith in
    human-

    recognizable images. The other drawback is that DL models concentrate on classiﬁcation,

    while other IoT applications have a sort of regression in their analysis core.
    Few researchers

    attempted to introduce regression capabilities to DNNs, for example, in [156]
    proposing

    the DBN and Support Vector Regression (SVR) ensemble.

    Off-road vehicles’ digital monitoring is hampered by their sophisticated and pricey

    IoT sensor technologies. In remote off-network locations, the high reliance on
    cloud/fog

    compute, network availability, and expert knowledge make it a handicap. The answer
    that

    has yet to be commercialized is the use of edge devices, such as smartphones,
    with compu-

    tation capability. The researchers offer a hybridized computational intelligence
    technique

    for developing an edge-device-enabled AI system for off-road vehicle health monitoring

    and diagnosis (HM&D) using super-cheap microphones as sensors [157]. The authors

    have shown their results as the taxonomy clearly demonstrates how an EC method
    may be

    utilized to improve and optimize DL. Furthermore, this survey addresses potential
    research

    avenues that could lead to the development of EDL in the future [158] .

    Deep learning is a strong tool to process IoT big data and thus requires high-level

    hardware requirements. The design of a DL model of an embedded system with limitations

    on resources remains a challenge. We may get network failure, data disclosure
    while

    collecting and transferring data to the servers and analyzed. A movement to develop
    a

    cloud-based learning framework that includes leading devices and the cloud is
    emerging.

    A cloud-based device will use the edge to reduce delay, maximize safety and protection

    Electronics 2022, 11, 1604

    17 of 23

    and use smart techniques for data retention [159]. It can also use the cloud to
    exchange

    data around cutting edges and to train high-quality computational models [160].

    4. Conclusions

    In this paper, a review has been presented on the DL and IoT techniques exploited

    in various domains such as smart home, smart city, smart transport, energy, localization,

    health sector, security, agriculture, etc. In recent years, DL and IoT have attracted
    the

    attention of researchers and business units, both of which have shown their positive
    impact

    on our life, cities, and the earth. Many IoT applications are obviously supported
    by DL

    resources. DL models are effective methods for solving large-scale problems with
    data

    analysis. We addressed the issue of training and building the DL model using large
    scale

    datasets which are being produced at ever increasing rates due to the availability
    of the

    latest IoT frameworks and open source libraries to collect the same. The literature
    suggested

    that using distributed IoT devices themselves for training a model is better than
    centralized

    cluster-like infrastructure. However, distributed approach needs to address the
    challenges

    such as data privacy, time consuming for IO operations and high complex operations.
    We

    reviewed the latest research on how supervised (RNN, LSTM, Transformer-based deep

    neural networks and CNN) and unsupervised (AE, RBM and DBN) can create a profound

    DL model for IoT applications. Deep learning ensures that attempts to construct
    speciﬁc

    characteristics are futile. In addition, the major advances in various domains
    have been

    made with IoT and DL, while a further development is expected in the next few
    years.

    Moreover, how to design a highly accurate and resource-efﬁcient architecture remains
    a

    challenge, and exploration of this area has not yet ended.

    Author Contributions: K.L., D.S.R., Z.S.A. and A.A.: Application of statistical,
    mathematical, com-

    putational, or other formal techniques to analyze or synthesize study data. R.K.:
    Management and

    coordination responsibility for the research activity planning and execution.
    N.G., M.A.H. and A.A.K.:

    Preparation, creation and/or presentation of the published work, speciﬁcally visualization/data

    presentation. Z.S.A.: Preparation, creation and/or presentation of the published
    work. A.A. and

    Z.S.A. contributed to data visualization of the revised manuscript. M.A.H. and
    A.A.K. addition of

    new review materials. Z.S.A., A.A.K., M.A.H. and A.A. performed the data curation
    and English

    editing. M.A.H. and A.A. artwork in the revised version. Z.S.A. and A.A.K. M.A.H.,
    A.A.K., A.A.

    and Z.S.A Writing—review & editing and validation. A.A., Z.S.A., M.A.H. and A.A.K.
    acquisition of

    the ﬁnancial support for the project leading to this publication. All authors
    have read and agreed to

    the published version of the manuscript.

    Funding: Ahmed Alhussen would like to thank Deanship of Scientiﬁc Research at
    Majmaah Univer-

    sity for supporting this work under Project No. R-2022-145.

    Acknowledgments: Ahmed Alhussen would like to acknowledge Deanship of Scientiﬁc
    Research at

    Majmaah University for supporting this work under Project No. R-2022-145.

    Conﬂicts of Interest: The authors declare that they have no conﬂict of interest.

    References

    1.

    Swan, M. Sensor mania! the internet of things, wearable computing, objective metrics,
    and the quantiﬁed self 2.0. J. Sens. Actuator

    Netw. 2012, 1, 217–253. [CrossRef]

    2.

    Cai, C.; Hu, M.; Cao, D.; Ma, X.; Li, Q.; Liu, J. Self-deployable indoor localization
    with acoustic-enabled IoT devices exploiting

    participatory sensing. IEEE Internet Things J. 2019, 6, 5297–5311. [CrossRef]

    3.

    Wang, C.; Lin, H.; Jiang, H. CANS: Towards congestion-adaptive and small stretch
    emergency navigation with wireless sensor

    networks. IEEE Trans. Mob. Comput. 2015, 15, 1077–1089. [CrossRef]

    4.

    Hu, M.; Liu, W.; Peng, K.; Ma, X.; Cheng, W.; Liu, J.; Li, B. Joint routing and
    scheduling for vehicle-assisted multidrone

    surveillance. IEEE Internet Things J. 2018, 6, 1781–1790. [CrossRef]

    5.

    Hu, M.; Liu, W.; Lu, J.; Fu, R.; Peng, K.; Ma, X.; Liu, J. On the joint design
    of routing and scheduling for vehicle-assisted multi-UAV

    inspection. Future Gener. Comput. Syst. 2019, 94, 214–223. [CrossRef]

    6.

    Chen, M.; Herrera, F.; Hwang, K. Cognitive computing: Architecture, technologies
    and intelligent applications. IEEE Access 2018,

    6, 19774–19783. [CrossRef]

    Electronics 2022, 11, 1604

    18 of 23

    7.

    Huang, T.; Lan, L.; Fang, X.; An, P.; Min, J.; Wang, F. Promises and challenges
    of big data computing in health sciences. Big Data

    Res. 2015, 2, 2–11. [CrossRef]

    8.

    RM, S.P.; Bhattacharya, S.; Maddikunta, P.K.R.; Somayaji, S.R.K.; Lakshmanna,
    K.; Kaluri, R.; Hussien, A.; Gadekallu, T.R. Load

    balancing of energy cloud using wind driven and ﬁreﬂy algorithms in internet of
    everything. J. Parallel Distrib. Comput. 2020, 142,

    16–26.

    9.

    Castro-Neto, M.; Jeong, Y.S.; Jeong, M.K.; Han, L.D. Online-SVR for short-term
    trafﬁc ﬂow prediction under typical and atypical

    trafﬁc conditions. Expert Syst. Appl. 2009, 36, 6164–6173. [CrossRef]

    10.

    Mahfouz, S.; Mourad-Chehade, F.; Honeine, P.; Farah, J.; Snoussi, H. Target tracking
    using machine learning and Kalman ﬁlter in

    wireless sensor networks. IEEE Sens. J. 2014, 14, 3715–3725. [CrossRef]

    11.

    Wang, F.; Zhu, Y.; Wang, F.; Liu, J.; Ma, X.; Fan, X. Car4Pac: Last mile parcel
    delivery through intelligent car trip sharing. IEEE

    Trans. Intell. Transp. Syst. 2019, 21, 4410–4424. [CrossRef]

    12.

    Manyika, J.; Chui, M.; Bughin, J.; Dobbs, R.; Bisson, P.; Marrs, A. Disruptive
    Technologies: Advances that will Transform Life, Business,

    and the Global Economy; McKinsey Global Institute: San Francisco, CA, USA, 2013;
    Volume 180.

    13.

    Vangelista, L.; Zanella, A.; Zorzi, M. Long-range IoT technologies: The dawn of
    LoRa™. In Future Access Enablers of Ubiquitous

    and Intelligent Infrastructures; Springer: Cham, Switzerland, 2015; pp. 51–58.

    14.

    Hashem, I.A.T.; Chang, V.; Anuar, N.B.; Adewole, K.; Yaqoob, I.; Gani, A.; Ahmed,
    E.; Chiroma, H. The role of big data in smart

    city. Int. J. Inf. Manag. 2016, 36, 748–758. [CrossRef]

    15.

    Iwendi, C.; Maddikunta, P.K.R.; Gadekallu, T.R.; Lakshmanna, K.; Bashir, A.K.;
    Piran, M.J. A metaheuristic optimization approach

    for energy efﬁciency in the IoT networks. Softw. Pract. Exp. 2020, 51, 2558–2571.
    [CrossRef]

    16.

    Naik, N. Choice of effective messaging protocols for IoT systems: MQTT, CoAP,
    AMQP and HTTP. In Proceedings of the 2017

    IEEE International Systems Engineering Symposium (ISSE), Vienna, Austria, 11–13
    October 2017; pp. 1–7.

    17.

    Satyanarayanan, M. The emergence of edge computing. Computer 2017, 50, 30–39.
    [CrossRef]

    18.

    Luan, T.H.; Gao, L.; Li, Z.; Xiang, Y.; Wei, G.; Sun, L. Fog computing: Focusing
    on mobile users at the edge.

    arXiv 2015,

    arXiv:1502.01815.

    19.

    Alsheikh, M.A.; Lin, S.; Niyato, D.; Tan, H.P. Machine learning in wireless sensor
    networks: Algorithms, strategies, and

    applications. IEEE Commun. Surv. Tuts 2014, 16, 1996–2018. [CrossRef]

    20.

    Miotto, R.; Wang, F.; Wang, S.; Jiang, X.; Dudley, J.T. Deep learning for healthcare:
    Review, opportunities and challenges. Brieﬁngs

    Bioinform. 2018, 19, 1236–1246. [CrossRef]

    21.

    Mohammadi, M.; Al-Fuqaha, A.; Sorour, S.; Guizani, M. Deep learning for IoT big
    data and streaming analytics: A survey. IEEE

    Commun. Surv. Tutorials 2018, 20, 2923–2960. [CrossRef]

    22.

    Wang, J.; Ma, Y.; Zhang, L.; Gao, R.X.; Wu, D. Deep learning for smart manufacturing:
    Methods and applications. J. Manuf. Syst.

    2018, 48, 144–156. [CrossRef]

    23.

    Reddy, G.T.; Reddy, M.P.K.; Lakshmanna, K.; Kaluri, R.; Rajput, D.S.; Srivastava,
    G.; Baker, T. Analysis of Dimensionality

    Reduction Techniques on Big Data. IEEE Access 2020, 8, 54776–54788. [CrossRef]

    24.

    Lakshmanna, K.; Khare, N. Mining DNA Sequence Patterns with Constraints Using
    Hybridization of Fireﬂy and Group Search

    Optimization. J. Intell. Syst. 2018, 27, 349–362. [CrossRef]

    25.

    Mohammadi, M.; Al-Fuqaha, A. Enabling cognitive smart cities using big data and
    machine learning: Approaches and challenges.

    IEEE Commun. Mag. 2018, 56, 94–101. [CrossRef]

    26.

    Chen, M.; Mao, S.; Zhang, Y.; Leung, V.C. Big Data: Related Technologies, Challenges
    and Future Prospects; Springer: Heidelberg,

    Germany, 2014.

    27.

    Ma, X.; Yao, T.; Hu, M.; Dong, Y.; Liu, W.; Wang, F.; Liu, J. A Survey on Deep
    Learning Empowered IoT Applications. IEEE Access

    2019, 7, 181721–181732. [CrossRef]

    28.

    Rodrigues, A.P.; Fernandes, R.; Shetty, A.; Lakshmanna, K.; Shaﬁ, R.M. Real-Time
    Twitter Spam Detection and Sentiment Analysis

    using Machine Learning and Deep Learning Techniques. Comput. Intell. Neurosci.
    2022, 2022. [CrossRef]

    29.

    Wu, M.; Chen, L. Image recognition based on deep learning. In Proceedings of the
    2015 Chinese Automation Congress (CAC),

    Wuhan, China, November27–29 2015; pp. 542–546.

    30.

    Khosravy, M.; Nakamura, K.; Hirose, Y.; Nitta, N.; Babaguchi, N. Model Inversion
    Attack by Integration of Deep Generative

    Models: Privacy-Sensitive Face Generation from a Face Recognition System. IEEE
    Trans. Inf. Forensics Secur. 2022. [CrossRef]

    31.

    Dehghani, M.; Taghipour, M.; Sadeghi Gougheri, S.; Nikoofard, A.; Gharehpetian,
    G.B.; Khosravy, M. A Deep Learning-Based

    Approach for Generation Expansion Planning Considering Power Plants Lifetime.
    Energies 2021, 14, 8035. [CrossRef]

    32.

    Zantalis, F.; Koulouras, G.; Karabetsos, S.; Kandris, D. A review of machine learning
    and IoT in smart transportation. Future

    Internet 2019, 11, 94. [CrossRef]

    33.

    Hussain, I.; Park, S.J. Quantitative evaluation of task-induced neurological outcome
    after stroke. Brain Sci. 2021, 11, 900.

    [CrossRef]

    34.

    Hussain, I.; Hossain, M.A.; Jany, R.; Bari, M.A.; Uddin, M.; Kamal, A.R.M.; Ku,
    Y.; Kim, J.S. Quantitative Evaluation of

    EEG-Biomarkers for Prediction of Sleep Stages. Sensors 2022, 22, 3079. [CrossRef]

    35.

    LeCun, Y.; Bengio, Y.; Hinton, G. Deep learning. Nature 2015, 521, 436–444. [CrossRef]

    36.

    Rumelhart, D.E.; Hinton, G.E.; Williams, R.J. Learning representations by back-propagating
    errors. Nature 1986, 323, 533–536.

    [CrossRef]

    Electronics 2022, 11, 1604

    19 of 23

    37.

    Werbos, P.J. Backpropagation through time: What it does and how to do it. Proc.
    IEEE 1990, 78, 1550–1560. [CrossRef]

    38.

    Chung, J.; Gulcehre, C.; Cho, K.; Bengio, Y. Empirical evaluation of gated recurrent
    neural networks on sequence modeling. arXiv

    2014, arXiv:1412.3555.

    39.

    Hochreiter, S.; Schmidhuber, J. Long short-term memory. Neural Comput. 1997, 9,
    1735–1780. [CrossRef]

    40.

    Yu, A.W.; Lee, H.; Le, Q.V. Learning to skim text. arXiv 2017, arXiv:1704.06877.

    41.

    Lai, S.; Xu, L.; Liu, K.; Zhao, J. Recurrent convolutional neural networks for
    text classiﬁcation. In Proceedings of the Twenty-Ninth

    AAAI Conference on Artiﬁcial Intelligence, Austin, TX, USA, 25–30 January 2015.

    42.

    Cho, K.; Van Merriënboer, B.; Gulcehre, C.; Bahdanau, D.; Bougares, F.; Schwenk,
    H.; Bengio, Y. Learning phrase representations

    using RNN encoder-decoder for statistical machine translation. arXiv 2014, arXiv:1406.1078.

    43.

    Song, X.; Kanasugi, H.; Shibasaki, R. DeepTransport: Prediction and Simulation
    of Human Mobility and Transportation Mode at

    a Citywide Level. In Proceedings of the IJCAI, New York, NY, USA, 9–15 July 2016;
    Volume 16, pp. 2618–2624.

    44.

    Liang, V.C.; Ma, R.T.; Ng, W.S.; Wang, L.; Winslett, M.; Wu, H.; Ying, S.; Zhang,
    Z. Mercury: Metro density prediction with

    recurrent neural network on streaming CDR data. In Proceedings of the 2016 IEEE
    32nd International Conference on Data

    Engineering (ICDE), Helsinki, Finland, 16–20 May 2016; pp. 1374–1377.

    45.

    HaddadPajouh, H.; Dehghantanha, A.; Khayami, R.; Choo, K.K.R. A deep recurrent
    neural network based approach for internet

    of things malware threat hunting. Future Gener. Comput. Syst. 2018, 85, 88–96.
    [CrossRef]

    46.

    Roy, B.; Cheung, H. A deep learning approach for intrusion detection in internet
    of things using bi-directional long short-term

    memory recurrent neural network. In Proceedings of the 2018 28th International
    Telecommunication Networks and Applications

    Conference (ITNAC), Sydney, Australia, 21–23 November 2018; pp. 1–6.

    47.

    Mocanu, E.; Nguyen, P.H.; Gibescu, M.; Kling, W.L. Deep learning for estimating
    building energy consumption. Sustain. Energy

    Grids Netw. 2016, 6, 91–99. [CrossRef]

    48.

    Wang, K.C.; Zemel, R. Classifying NBA offensive plays using neural networks. In
    Proceedings of the MIT Sloan Sports Analytics

    Conference, Toronto, ON, Canada, 11–12 March 2016; Volume 4.

    49.

    Shah, R.; Romijnders, R. Applying deep learning to basketball trajectories. arXiv
    2016, arXiv:1608.03793.

    50.

    Yang, T.Y.; Brinton, C.G.; Joe-Wong, C.; Chiang, M. Behavior-based grade prediction
    for MOOCs via time series neural networks.

    IEEE J. Sel. Top. Signal Process. 2017, 11, 716–728. [CrossRef]

    51.

    Piech, C.; Bassen, J.; Huang, J.; Ganguli, S.; Sahami, M.; Guibas, L.J.; Sohl-Dickstein,
    J. Deep knowledge tracing. In Proceedings of

    the Advances in Neural Information Processing Systems, Montreal, QC, Canada, 7–12
    December 2015; pp. 505–513.

    52.

    Steinberg, L. Changing the game: The rise of sports analytics. Forbes. Retrieved
    March 2015, 14, 2017.

    53.

    Singh, B.; Marks, T.K.; Jones, M.; Tuzel, O.; Shao, M. A multi-stream bi-directional
    recurrent neural network for ﬁne-grained

    action detection. In Proceedings of the IEEE Conference on Computer Vision and
    Pattern Recognition, Las Vegas, NV, USA, 27–30

    June 2016; pp. 1961–1970.

    54.

    Pigou, L.; Van Den Oord, A.; Dieleman, S.; Van Herreweghe, M.; Dambre, J. Beyond
    temporal pooling: Recurrence and temporal

    convolutions for gesture recognition in video. Int. J. Comput. Vis. 2018, 126,
    430–439. [CrossRef]

    55.

    Neverova, N.; Wolf, C.; Lacey, G.; Fridman, L.; Chandra, D.; Barbello, B.; Taylor,
    G. Learning human identity from motion

    patterns. IEEE Access 2016, 4, 1810–1820. [CrossRef]

    56.

    Asghar, M.Z.; Lajis, A.; Alam, M.M.; Rahmat, M.K.; Nasir, H.M.; Ahmad, H.; Al-Rakhami,
    M.S.; Al-Amri, A.; Albogamy, F.R.

    A Deep Neural Network Model for the Detection and Classiﬁcation of Emotions from
    Textual Content. Complexity 2022, 2022.

    [CrossRef]

    57.

    Gers, F.A.; Schmidhuber, E. LSTM recurrent networks learn simple context-free
    and context-sensitive languages. IEEE Trans.

    Neural Netw. 2001, 12, 1333–1340. [CrossRef] [PubMed]

    58.

    Sak, H.; Senior, A.; Beaufays, F. Long short-term memory based recurrent neural
    network architectures for large vocabulary

    speech recognition. arXiv 2014, arXiv:1402.1128.

    59.

    Lv, Y.; Duan, Y.; Kang, W.; Li, Z.; Wang, F.Y. Trafﬁc ﬂow prediction with big
    data: A deep learning approach. IEEE Trans. Intell.

    Transp. Syst. 2014, 16, 865–873. [CrossRef]

    60.

    Xu, H.; Gao, Y.; Yu, F.; Darrell, T. End-to-end learning of driving models from
    large-scale video datasets. In Proceedings of the

    IEEE Conference on Computer Vision and Pattern Recognition, Honolulu, HI, USA,
    21–26 July 2017; pp. 2174–2182.

    61.

    Ordóñez, F.J.; Roggen, D. Deep convolutional and lstm recurrent neural networks
    for multimodal wearable activity recognition.

    Sensors 2016, 16, 115. [CrossRef]

    62.

    Tao, D.; Wen, Y.; Hong, R. Multicolumn bidirectional long short-term memory for
    mobile devices-based human activity

    recognition. IEEE Internet Things J. 2016, 3, 1124–1134. [CrossRef]

    63.

    Dataset, O. OPPORTUNITY+ Activity+ Recognition. 2012. Available online: https://archive.ics.uci.edu/ml/datasets
    (accessed

    on 19 November 2015).

    64.

    Lu, W.; Zhang, J.; Zhao, X.; Wang, J.; Dang, J. Multimodal sensory fusion for
    soccer robot self-localization based on long short-term

    memory recurrent neural network. J. Ambient Intell. Humaniz. Comput. 2017, 8,
    885–893. [CrossRef]

    65.

    Manic, M.; Amarasinghe, K.; Rodriguez-Andina, J.J.; Rieger, C. Intelligent buildings
    of the future: Cyberaware, deep learning

    powered, and human interacting. IEEE Ind. Electron. Mag. 2016, 10, 32–49. [CrossRef]

    Electronics 2022, 11, 1604

    20 of 23

    66.

    Gensler, A.; Henze, J.; Sick, B.; Raabe, N. Deep Learning for solar power forecasting—An
    approach using AutoEncoder and

    LSTM Neural Networks. In Proceedings of the 2016 IEEE International Conference
    on Systems, Man, and Cybernetics (SMC),

    Budapest, Hungary, 9–12 October 2016; pp. 002858–002865.

    67.

    Hada-Muranushi, Y.; Muranushi, T.; Asai, A.; Okanohara, D.; Raymond, R.; Watanabe,
    G.; Nemoto, S.; Shibata, K. A deep-learning

    approach for operation of an automated realtime ﬂare forecast. arXiv 2016, arXiv:1606.01587.

    68.

    Reddy, T.; RM, S.P.; Parimala, M.; Chowdhary, C.L.; Hakak, S.; Khan, W.Z.

    A deep neural networks based model for uninterrupted marine environment monitoring.
    Comput. Commun. 2020, 157, 64–75.

    [CrossRef]

    69.

    Lipton, Z.C.; Kale, D.C.; Elkan, C.; Wetzel, R. Learning to diagnose with LSTM
    recurrent neural networks.

    arXiv 2015,

    arXiv:1511.03677.

    70.

    Hammerla, N.Y.; Halloran, S.; Plötz, T. Deep, convolutional, and recurrent models
    for human activity recognition using wearables.

    arXiv 2016, arXiv:1604.08880.

    71.

    Gao, Y.; Xiang, X.; Xiong, N.; Huang, B.; Lee, H.J.; Alrifai, R.; Jiang, X.; Fang,
    Z. Human action monitoring for healthcare based on

    deep learning. IEEE Access 2018, 6, 52277–52285. [CrossRef]

    72.

    Chavarriaga, R.; Sagha, H.; Calatroni, A.; Digumarti, S.T.; Tröster, G.; Millán,
    J.d.R.; Roggen, D. The Opportunity challenge: A

    benchmark database for on-body sensor-based activity recognition. Pattern Recognit.
    Lett. 2013, 34, 2033–2042. [CrossRef]

    73.

    Reddy, G.T.; Reddy, M.P.K.; Lakshmanna, K.; Rajput, D.S.; Kaluri, R.; Srivastava,
    G. Hybrid genetic algorithm and a fuzzy logic

    classiﬁer for heart disease diagnosis. Evol. Intell. 2020, 13(2), 185–196. [CrossRef]

    74.

    Reiss, A.; Stricker, D. Introducing a new benchmarked dataset for activity monitoring.

    In Proceedings of the 2012 16th

    International Symposium on Wearable Computers, Newcastle, UK, 18–22 June 2012;
    pp. 108–109.

    75.

    Bächlin, M.; Roggen, D.; Tröster, G.; Plotnik, M.; Inbar, N.; Maidan, I.; Herman,
    T.; Brozgol, M.; Shaviv, E.; Giladi, N.; et al.

    Potentials of Enhanced Context Awareness in Wearable Assistants for Parkinson’s
    Disease Patients with the Freezing of Gait

    Syndrome. In Proceedings of the ISWC, Linz, Austria, 4–7 September 2009; pp. 123–130.

    76.

    Ibrahim, M.S.; Muralidharan, S.; Deng, Z.; Vahdat, A.; Mori, G. A hierarchical
    deep temporal model for group activity recognition.

    In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,
    Las Vegas, NV, USA, 27–30 June 2016;

    pp. 1971–1980.

    77.

    Asghar, M.Z.; Albogamy, F.R.; Al-Rakhami, M.S.; Asghar, J.; Rahmat, M.K.; Alam,
    M.M.; Lajis, A.; Nasir, H.M. Facial Mask

    Detection Using Depthwise Separable Convolutional Neural Network Model During
    COVID-19 Pandemic. Front. Public Health

    2022, 10, 855254. [CrossRef]

    78.

    Krizhevsky, A.; Sutskever, I.; Hinton, G.E. Imagenet classiﬁcation with deep convolutional
    neural networks. In Advances in Neural

    Information Processing Systems; Curran Associates, Inc.: Red Hook, NY, USA, 2012;
    pp. 1097–1105.

    79.

    Alghazzawi, D.; Bamasag, O.; Albeshri, A.; Sana, I.; Ullah, H.; Asghar, M.Z. Efﬁcient
    Prediction of Court Judgments Using an

    LSTM+ CNN Neural Network Model with an Optimal Feature Set. Mathematics 2022,
    10, 683. [CrossRef]

    80.

    Zhu, J.; Pande, A.; Mohapatra, P.; Han, J.J. Using deep learning for energy expenditure
    estimation with wearable sensors. In

    Proceedings of the 2015 17th International Conference on E-health Networking,
    Application & Services (HealthCom), Boston,

    MA, USA, 14–17 October 2015; pp. 501–506.

    81.

    Hannun, A.Y.; Rajpurkar, P.; Haghpanahi, M.; Tison, G.H.; Bourn, C.; Turakhia,
    M.P.; Ng, A.Y. Cardiologist-level arrhythmia

    detection and classiﬁcation in ambulatory electrocardiograms using a deep neural
    network. Nat. Med. 2019, 25, 65. [CrossRef]

    [PubMed]

    82.

    Prasoon, A.; Petersen, K.; Igel, C.; Lauze, F.; Dam, E.; Nielsen, M. Deep feature
    learning for knee cartilage segmentation using a

    triplanar convolutional neural network. In International Conference on Medical
    Image Computing and Computer-Assisted Intervention;

    Springer: Cham, Switzerland, 2013; pp. 246–253.

    83.

    Liu, C.; Cao, Y.; Luo, Y.; Chen, G.; Vokkarane, V.; Ma, Y. Deepfood: Deep learning-based
    food image recognition for computer-

    aided dietary assessment. In International Conference on Smart Homes and Health
    Telematics; Springer: Cham, Switzerland, 2016;

    pp. 37–48.

    84.

    Pereira, C.R.; Pereira, D.R.; Papa, J.P.; Rosa, G.H.; Yang, X.S. Convolutional
    neural networks applied for parkinson’s disease

    identiﬁcation. In Machine Learning for Health Informatics; Springer: Cham, Switzerland,
    2016; pp. 377–390.

    85.

    Erol, B.A.; Majumdar, A.; Lwowski, J.; Benavidez, P.; Rad, P.; Jamshidi, M. Improved
    deep neural network object tracking

    system for applications in home robotics. In Computational Intelligence for Pattern
    Recognition; Springer: Cham, Switzerland, 2018;

    pp. 369–395.

    86.

    Levine, S.; Pastor, P.; Krizhevsky, A.; Ibarz, J.; Quillen, D. Learning hand-eye
    coordination for robotic grasping with deep learning

    and large-scale data collection. Int. J. Robot. Res. 2018, 37, 421–436. [CrossRef]

    87.

    Amato, G.; Carrara, F.; Falchi, F.; Gennaro, C.; Meghini, C.; Vairo, C. Deep learning
    for decentralized parking lot occupancy

    detection. Expert Syst. Appl. 2017, 72, 327–334. [CrossRef]

    88.

    Valipour, S.; Siam, M.; Stroulia, E.; Jagersand, M. Parking-stall vacancy indicator
    system, based on deep convolutional neural

    networks. In Proceedings of the 2016 IEEE 3rd World Forum on Internet of Things
    (WF-IoT), Reston, VA, USA, 12–14 December

    2016; pp. 655–660.

    89.

    Zhang, J.; Zheng, Y.; Qi, D. Deep spatio-temporal residual networks for citywide
    crowd ﬂows prediction. In Proceedings of the

    Thirty-First AAAI Conference on Artiﬁcial Intelligence, San Francisco, CA, USA,
    4–9 February 2017.

    Electronics 2022, 11, 1604

    21 of 23

    90.

    Li, H.; Li, Y.; Porikli, F. Deeptrack: Learning discriminative feature representations
    online for robust visual tracking. IEEE Trans.

    Image Process. 2015, 25, 1834–1848. [CrossRef]

    91.

    Wu, B.; Iandola, F.; Jin, P.H.; Keutzer, K. Squeezedet: Uniﬁed, small, low power
    fully convolutional neural networks for real-time

    object detection for autonomous driving. In Proceedings of the IEEE Conference
    on Computer Vision and Pattern Recognition

    Workshops, Honolulu, HI, USA, 21–26 July 2017; pp. 129–137.

    92.

    Bojarski, M.; Del Testa, D.; Dworakowski, D.; Firner, B.; Flepp, B.; Goyal, P.;
    Jackel, L.D.; Monfort, M.; Muller, U.; Zhang, J.; et al.

    End to end learning for self-driving cars. arXiv 2016, arXiv:1604.07316.

    93.

    Shin, M.; Paik, W.; Kim, B.; Hwang, S. An IoT platform with monitoring robot applying
    CNN-based context-aware learning.

    Sensors 2019, 19, 2525. [CrossRef]

    94.

    Mittal, G.; Yagnik, K.B.; Garg, M.; Krishnan, N.C. Spotgarbage: Smartphone app
    to detect garbage using deep learning. In

    Proceedings of the 2016 ACM International Joint Conference on Pervasive and Ubiquitous
    Computing, Heidelberg, Germany,

    12–16 September 2016; pp. 940–945.

    95.

    Liu, C.; Cao, Y.; Luo, Y.; Chen, G.; Vokkarane, V.; Yunsheng, M.; Chen, S.; Hou,
    P. A new deep learning-based food recognition

    system for dietary assessment on an edge computing service infrastructure.

    IEEE Trans. Serv. Comput. 2017, 11, 249–261.

    [CrossRef]

    96.

    Sladojevic, S.; Arsenovic, M.; Anderla, A.; Culibrk, D.; Stefanovic, D. Deep neural
    networks based recognition of plant diseases

    by leaf image classiﬁcation. Comput. Intell. Neurosci. 2016, 2016. [CrossRef]

    97.

    Cire¸sAn, D.; Meier, U.; Masci, J.; Schmidhuber, J. Multi-column deep neural network
    for trafﬁc sign classiﬁcation. Neural Netw.

    2012, 32, 333–338. [CrossRef]

    98.

    Lim, K.; Hong, Y.; Choi, Y.; Byun, H. Real-time trafﬁc sign recognition based
    on a general purpose GPU and deep-learning. PLoS

    ONE 2017, 12, e0173317. [CrossRef]

    99.

    Wang, J.; Ding, H.; Bidgoli, F.A.; Zhou, B.; Iribarren, C.; Molloi, S.; Baldi,
    P. Detecting cardiovascular disease from mammograms

    with deep learning. IEEE Trans. Med. Imaging 2017, 36, 1172–1181. [CrossRef] [PubMed]

    100. Liu, W.; Liu, J.; Gu, X.; Liu, K.; Dai, X.; Ma, H. Deep learning based intelligent
    basketball arena with energy image. In International

    Conference on Multimedia Modeling; Springer: Cham, Switzerland, 2017; pp. 601–613.

    101. Toshev, A.; Szegedy, C. Deeppose: Human pose estimation via deep neural networks.
    In Proceedings of the IEEE conference on

    computer vision and pattern recognition, Columbus, OH, USA, 23–28 June 2014; pp.
    1653–1660.

    102. Kussul, N.; Lavreniuk, M.; Skakun, S.; Shelestov, A. Deep learning classiﬁcation
    of land cover and crop types using remote

    sensing data. IEEE Geosci. Remote Sens. Lett. 2017, 14, 778–782. [CrossRef]

    103. Steen, K.A.; Christiansen, P.; Karstoft, H.; Jørgensen, R.N. Using deep learning
    to challenge safety standard for highly autonomous

    machines in agriculture. J. Imaging 2016, 2, 6. [CrossRef]

    104. Kautz, T.; Groh, B.H.; Hannink, J.; Jensen, U.; Strubberg, H.; Eskoﬁer, B.M.
    Activity recognition in beach volleyball using a Deep

    Convolutional Neural Network. Data Min. Knowl. Discov. 2017, 31, 1678–1705. [CrossRef]

    105. Bell, S.; Bala, K. Learning visual similarity for product design with convolutional
    neural networks. ACM Trans. Graph. (TOG)

    2015, 34, 1–10. [CrossRef]

    106. Xiao, L.; Yichao, X. Exact clothing retrieval approach based on deep neural
    network. In Proceedings of the 2016 IEEE Information

    Technology, Networking, Electronic and Automation Control Conference, Chongqing,
    China, 20–22 May 2016; pp. 396–400.

    107. Advani, S.; Zientara, P.; Shukla, N.; Okafor, I.; Irick, K.; Sampson, J.;
    Datta, S.; Narayanan, V. A multitask grocery assist system for

    the visually impaired: Smart glasses, gloves, and shopping carts provide auditory
    and tactile feedback. IEEE Consum. Electron.

    Mag. 2016, 6, 73–81. [CrossRef]

    108. Liu, Z.; Zhang, L.; Liu, Q.; Yin, Y.; Cheng, L.; Zimmermann, R. Fusion of
    magnetic and visual sensors for indoor localization:

    Infrastructure-free and more effective. IEEE Trans. Multimed. 2016, 19, 874–888.
    [CrossRef]

    109. Becker, M. Indoor positioning solely based on user’s sight. In International
    Conference on Information Science and Applications;

    Springer: Singapore, 2017; pp. 76–83.

    110. Njima, W.; Ahriz, I.; Zayani, R.; Terre, M.; Bouallegue, R. Deep CNN for
    Indoor Localization in IoT-Sensor Systems. Sensors 2019,

    19, 3127. [CrossRef]

    111. Liu, Y.; Racah, E.; Correa, J.; Khosrowshahi, A.; Lavers, D.; Kunkel, K.;
    Wehner, M.; Collins, W. Application of deep convolutional

    neural networks for detecting extreme weather in climate datasets. arXiv 2016,
    arXiv:1605.01156.

    112. Hu, R.; Chen, J.; Zhou, L. A transformer-based deep neural network for arrhythmia
    detection using continuous ECG signals.

    Comput. Biol. Med. 2022, 144, 105325. [CrossRef]

    113. Devlin, J.; Chang, M.W.; Lee, K.; Toutanova, K. Bert: Pre-training of deep
    bidirectional transformers for language understanding.

    arXiv 2018, arXiv:1810.04805.

    114. Dosovitskiy, A.; Beyer, L.; Kolesnikov, A.; Weissenborn, D.; Zhai, X.; Unterthiner,
    T.; Dehghani, M.; Minderer, M.; Heigold, G.;

    Gelly, S.; et al. An image is worth 16x16 words: Transformers for image recognition
    at scale. arXiv 2020, arXiv:2010.11929.

    115. Carion, N.; Massa, F.; Synnaeve, G.; Usunier, N.; Kirillov, A.; Zagoruyko,
    S. End-to-end object detection with transformers. In

    Proceedings of the European Conference on Computer Vision; Springer: Cham, Switzerland,
    2020; pp. 213–229.

    116. Goodfellow, I.; Bengio, Y.; Courville, A. Deep Learning; MIT Press: Cambridge,
    MA, USA, 2016.

    117. Lee, H.; Battle, A.; Raina, R.; Ng, A.Y. Efﬁcient sparse coding algorithms.
    In Advances in Neural Information Processing Systems; The

    MIT Press: Cambridge, MA, USA, 2007; pp. 801–808.

    Electronics 2022, 11, 1604

    22 of 23

    118. Vincent, P.; Larochelle, H.; Bengio, Y.; Manzagol, P.A. Extracting and composing
    robust features with denoising autoencoders. In

    Proceedings of the 25th International Conference on Machine Learning, Helsinki,
    Finland, 5–9 July 2008; pp. 1096–1103.

    119. Shao, H.; Jiang, H.; Wang, F.; Zhao, H. An enhancement deep feature fusion
    method for rotating machinery fault diagnosis.

    Knowl.-Based Syst. 2017, 119, 200–220. [CrossRef]

    120. Lee, H.; Kim, Y.; Kim, C.O. A deep learning model for robust wafer fault
    monitoring with sensor measurement noise. IEEE Trans.

    Semicond. Manuf. 2016, 30, 23–31. [CrossRef]

    121. Liu, Y.; Wu, L. Geological disaster recognition on optical remote sensing
    images using deep learning. Procedia Comput. Sci. 2016,

    91, 566–575. [CrossRef]

    122. Fragkiadaki, K.; Levine, S.; Felsen, P.; Malik, J. Recurrent network models
    for human dynamics. In Proceedings of the IEEE

    International Conference on Computer Vision, Santiago, Chile, 7–13 December 2015;
    pp. 4346–4354.

    123. Ionescu, C.; Papava, D.; Olaru, V.; Sminchisescu, C. Human3. 6m: Large scale
    datasets and predictive methods for 3d human

    sensing in natural environments. IEEE Trans. Pattern Anal. Mach. Intell. 2013,
    36, 1325–1339. [CrossRef]

    124. Gu, Y.; Chen, Y.; Liu, J.; Jiang, X. Semi-supervised deep extreme learning
    machine for Wi-Fi based localization. Neurocomputing

    2015, 166, 282–293. [CrossRef]

    125. Zhang, W.; Liu, K.; Zhang, W.; Zhang, Y.; Gu, J. Deep neural networks for
    wireless localization in indoor and outdoor

    environments. Neurocomputing 2016, 194, 279–287. [CrossRef]

    126. Shone, N.; Ngoc, T.N.; Phai, V.D.; Shi, Q. A deep learning approach to network
    intrusion detection. IEEE Trans. Emerg. Top.

    Comput. Intell. 2018, 2, 41–50. [CrossRef]

    127. Lopez-Martin, M.; Carro, B.; Sanchez-Esguevillas, A.; Lloret, J. Conditional
    variational autoencoder for prediction and feature

    recovery applied to intrusion detection in iot. Sensors 2017, 17, 1967. [CrossRef]

    128. Fischer, A.; Igel, C. An introduction to restricted Boltzmann machines. In
    Iberoamerican Congress on Pattern Recognition; Springer:

    Berlin/Heidelberg, Germany, 2012; pp. 14–36.

    129. Mocanu, D.C.; Mocanu, E.; Nguyen, P.H.; Gibescu, M.; Liotta, A. Big IoT data
    mining for real-time energy disaggregation

    in buildings. In Proceedings of the 2016 IEEE International Conference on Systems,
    Man, and Cybernetics (SMC), Budapest,

    Hungary, 9–12 October 2016; pp. 003765–003769.

    130. Kolter, J.Z.; Johnson, M.J. REDD: A public data set for energy disaggregation
    research. In Proceedings of the Workshop on Data

    Mining Applications in Sustainability (SIGKDD), San Diego, CA, USA, 21 August
    2011; Volume 25, pp. 59–62.

    131. Wang, X.; Gao, L.; Mao, S.; Pandey, S. DeepFi: Deep learning for indoor ﬁngerprinting
    using channel state information. In

    Proceedings of the 2015 IEEE Wireless Communications and Networking Conference
    (WCNC), New Orleans, LA, USA, 9–12

    March 2015; pp. 1666–1671.

    132. Wang, X.; Gao, L.; Mao, S.; Pandey, S. CSI-based ﬁngerprinting for indoor
    localization: A deep learning approach. IEEE Trans.

    Veh. Technol. 2016, 66, 763–776. [CrossRef]

    133. Wang, J.; Zhang, X.; Gao, Q.; Yue, H.; Wang, H. Device-free wireless localization
    and activity recognition: A deep learning

    approach. IEEE Trans. Veh. Technol. 2016, 66, 6258–6267. [CrossRef]

    134. Ma, X.; Yu, H.; Wang, Y.; Wang, Y. Large-scale transportation network congestion
    evolution prediction using deep learning theory.

    PLoS ONE 2015, 10, e0119044. [CrossRef] [PubMed]

    135. Hinton, G.E.; Salakhutdinov, R.R. Reducing the dimensionality of data with
    neural networks.

    Science 2006, 313, 504–507.

    [CrossRef]

    136. Huang, W.; Song, G.; Hong, H.; Xie, K. Deep architecture for trafﬁc ﬂow prediction:
    Deep belief networks with multitask learning.

    IEEE Trans. Intell. Transp. Syst. 2014, 15, 2191–2201. [CrossRef]

    137. Chang, C.Y.; Bhattacharya, S.; Raj Vincent, P.; Lakshmanna, K.; Srinivasan,
    K. An Efficient Classification of Neonates Cry Using Extreme

    Gradient Boosting-Assisted Grouped-Support-Vector Network. J. Healthc. Eng. 2021,
    2021. [CrossRef]

    138. Kang, M.J.; Kang, J.W. Intrusion detection system using deep neural network
    for in-vehicle network security. PLoS ONE 2016, 11,

    e0155781. [CrossRef]

    139. Kahou, S.E.; Bouthillier, X.; Lamblin, P.; Gulcehre, C.; Michalski, V.; Konda,
    K.; Jean, S.; Froumenty, P.; Dauphin, Y.; Boulanger-

    Lewandowski, N.; et al. Emonets: Multimodal deep learning approaches for emotion
    recognition in video. J. Multimodal User

    Interfaces 2016, 10, 99–111. [CrossRef]

    140. He, Y.; Mendis, G.J.; Wei, J. Real-time detection of false data injection
    attacks in smart grid: A deep learning-based intelligent

    mechanism. IEEE Trans. Smart Grid 2017, 8, 2505–2516. [CrossRef]

    141. Yuan, Z.; Lu, Y.; Wang, Z.; Xue, Y. Droid-sec: Deep learning in android malware
    detection. In Proceedings of the 2014 ACM

    conference on SIGCOMM, Chicago, IL, USA, 17–22 August 2014; pp. 371–372.

    142. Hussain, I.; Park, S.J. Big-Ecg: Cardiographic Predictive Cyber-Physical
    System for Stroke Management. IEEE Access 2021, 9,

    123146–123164. [CrossRef]

    143. Hussain, I.; Park, S.J. HealthSOS: Real-Time Health Monitoring System for
    Stroke Prognostics. IEEE Access 2020, 8, 213574–213586.

    [CrossRef]

    144. Hilbert, M. Big data for development: A review of promises and challenges.
    Dev. Policy Rev. 2016, 34, 135–174. [CrossRef]

    145. Fan, W.; Bifet, A. Mining big data: Current status, and forecast to the future.
    ACM SIGKDD Explor. Newsl. 2013, 14, 1–5.

    [CrossRef]

    Electronics 2022, 11, 1604

    23 of 23

    146. Hu, H.; Wen, Y.; Chua, T.S.; Li, X. Toward scalable systems for big data
    analytics: A technology tutorial. IEEE Access 2014, 2,

    652–687. [CrossRef]

    147. Mahdavinejad, M.S.; Rezvan, M.; Barekatain, M.; Adibi, P.; Barnaghi, P.;
    Sheth, A.P. Machine learning for Internet of Things data

    analysis: A survey. Digit. Commun. Netw. 2018, 4, 161–175. [CrossRef]

    148. Saleem, T.J.; Chishti, M.A. Deep learning for Internet of Things data analytics.
    Procedia Comput. Sci. 2019, 163, 381–390. [CrossRef]

    149. Sudharsan, B.; Patel, P.; Breslin, J.; Ali, M.I.; Mitra, K.; Dustdar, S.;
    Rana, O.; Jayaraman, P.P.; Ranjan, R. Toward distributed,

    global, deep learning using iot devices. IEEE Internet Comput. 2021, 25, 6–12.
    [CrossRef]

    150. Lakshmanna, K.; Khare, N. Constraint-based measures for DNA sequence mining
    using group search optimization algorithm.

    Int. J. Intell. Eng. Syst. 2016, 9, 91–100. [CrossRef]

    151. Lakshmanna, K.; Khare, N. FDSMO: Frequent DNA sequence mining using FBSB
    and optimization. Int. J. Intell. Eng. Syst. 2016,

    9, 157–166. [CrossRef]

    152. Hussain, I.; Young, S.; Park, S.J. Driving-induced neurological biomarkers
    in an advanced driver-assistance system. Sensors 2021,

    21, 6985. [CrossRef]

    153. Gupta, N.; Khosravy, M.; Patel, N.; Dey, N.; Gupta, S.; Darbari, H.; Crespo,
    R.G. Economic data analytic AI technique on IoT edge

    devices for health monitoring of agriculture machines. Appl. Intell. 2020, 50,
    3990–4016. [CrossRef]

    154. Garg, D.; Khan, S.; Alam, M. Integrative use of IoT and deep learning for
    agricultural applications. In Proceedings of ICETIT 2019;

    Springer: Cham, Switzerland, 2020; pp. 521–531.

    155. Nguyen, A.; Yosinski, J.; Clune, J. Deep neural networks are easily fooled:
    High conﬁdence predictions for unrecognizable

    images. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,
    Boston, MA, USA, 7–12 June 2015;

    pp. 427–436.

    156. Qiu, X.; Zhang, L.; Ren, Y.; Suganthan, P.N.; Amaratunga, G. Ensemble deep
    learning for regression and time series forecasting.

    In Proceedings of the 2014 IEEE Symposium on Computational Intelligence in Ensemble
    Learning (CIEL), Orlando, FL, USA,

    9–12 December 2014; pp. 1–6.

    157. Gupta, N.; Khosravy, M.; Patel, N.; Dey, N.; Crespo, R.G. Lightweight Computational
    Intelligence for IoT Health Monitoring of

    Off-Road Vehicles: Enhanced Selection Log-Scaled Mutation GA Structured ANN. IEEE
    Trans. Ind. Informatics 2021, 18, 611–619.

    [CrossRef]

    158. Zhan, Z.H.; Li, J.Y.; Zhang, J. Evolutionary deep learning: A survey. Neurocomputing
    2022, 483, 42–58. [CrossRef]

    159. Zhao, P.; Li, J.; Zeng, F.; Xiao, F.; Wang, C.; Jiang, H. ILLIA: Enabling
    k-Anonymity-Based Privacy Preserving Against Location

    Injection Attacks in Continuous LBS Queries. IEEE Internet Things J. 2018, 5,
    1033–1042. [CrossRef]

    160. Stoica, I.; Song, D.; Popa, R.A.; Patterson, D.; Mahoney, M.W.; Katz, R.;
    Joseph, A.D.; Jordan, M.; Hellerstein, J.M.; Gonzalez, J.E.;

    et al. A berkeley view of systems challenges for ai. arXiv 2017, arXiv:1712.05855.

    '
  inline_citation: Lakshmanna, K.; Kaluri, R.; Nagaraja, G.; Alzamil, Z.S.; Rajput,
    D.S.; Khan, A.A.; Haq, M.A.; Alhussen, A. A Review on Deep Learning Techniques
    for IoT Data. Electronics 2022, 11, 1604.
  journal: Electronics
  limitations: While the paper provides a comprehensive overview of deep learning
    techniques for IoT data analysis, it does not delve deeply into specific implementation
    details or provide a detailed comparison of different deep learning algorithms
    for specific IoT applications. Additionally, the paper does not discuss the potential
    ethical and societal implications of using deep learning for IoT data analysis,
    such as concerns about privacy, bias, and discrimination.
  pdf_link: https://www.mdpi.com/2079-9292/11/10/1604/pdf?version=1652866886
  publication_year: 2022
  relevance_score: 0.8571428571428571
  relevance_score1: 0
  relevance_score2: 0
  title: A Review on Deep Learning Techniques for IoT Data
  verbatim_quote1: Deep learning methods have been used in a variety of projects involving
    IoT and mobile apps, with encouraging early results.
  verbatim_quote2: With its data-driven, anomaly-based methodology and capacity to
    detect developing, unexpected attacks, deep learning may deliver cutting-edge
    solutions for IoT intrusion detection.
  verbatim_quote3: '>'
- DOI: https://doi.org/10.1007/s11227-020-03288-w
  analysis: '"In this paper, we explore edge computing as a solution for bridging
    the gaps between AI and IoT in rural environment. We evaluate the training and
    inference stages of a deep-learning-based precision agriculture application for
    frost prediction in modern Nvidia Jetson AGX Xavier in terms of performance and
    power consumption. Our experimental results reveal that cloud approaches are still
    a long way off in terms of performance, but the inclusion of GPUs in edge devices
    offers new opportunities for those scenarios where connectivity is still a challenge."
    The authors of this study evaluated the use of edge computing for frost prediction
    in agriculture, specifically using a deep learning model to predict low temperatures.
    They found that edge computing platforms, such as the Nvidia Jetson AGX Xavier,
    offer significant performance advantages over cloud-based approaches, particularly
    in terms of inference time. This makes edge computing a viable solution for real-time
    precision agriculture applications, where timely predictions are crucial.'
  authors:
  - Miguel Ángel Guillén
  - Antonio Llanes
  - Baldomero Imbernón
  - Raquel Martínez‐España
  - Andrés Bueno-Crespo
  - Juan-Carlos Cano
  - José M. Cecilia
  citation_count: 56
  full_citation: Performance evaluation of edge-computing platforms for the prediction
    of low temperatures in agriculture using deep learning
  full_text: '>

    Your privacy, your choice We use essential cookies to make sure the site can function.
    We also use optional cookies for advertising, personalisation of content, usage
    analysis, and social media. By accepting optional cookies, you consent to the
    processing of your personal data - including transfers to third parties. Some
    third parties are outside of the European Economic Area, with varying standards
    of data protection. See our privacy policy for more information on the use of
    your personal data. Manage preferences for further information and to change your
    choices. Accept all cookies Skip to main content Advertisement Log in Find a journal
    Publish with us Track your research Search Cart Home The Journal of Supercomputing
    Article Performance evaluation of edge-computing platforms for the prediction
    of low temperatures in agriculture using deep learning Published: 29 April 2020
    Volume 77, pages 818–840, (2021) Cite this article Download PDF Access provided
    by University of Nebraska-Lincoln The Journal of Supercomputing Aims and scope
    Submit manuscript Miguel A. Guillén, Antonio Llanes, Baldomero Imbernón, Raquel
    Martínez-España, Andrés Bueno-Crespo, Juan-Carlos Cano & José M. Cecilia   2249
    Accesses 58 Citations Explore all metrics Abstract The Internet of Things (IoT)
    is driving the digital revolution. AlSome palliative measures aremost all economic
    sectors are becoming “Smart” thanks to the analysis of data generated by IoT.
    This analysis is carried out by advance artificial intelligence (AI) techniques
    that provide insights never before imagined. The combination of both IoT and AI
    is giving rise to an emerging trend, called AIoT, which is opening up new paths
    to bring digitization into the new era. However, there is still a big gap between
    AI and IoT, which is basically in the computational power required by the former
    and the lack of computational resources offered by the latter. This is particularly
    true in rural IoT environments where the lack of connectivity (or low-bandwidth
    connections) and power supply forces the search for “efficient” alternatives to
    provide computational resources to IoT infrastructures without increasing power
    consumption. In this paper, we explore edge computing as a solution for bridging
    the gaps between AI and IoT in rural environment. We evaluate the training and
    inference stages of a deep-learning-based precision agriculture application for
    frost prediction in modern Nvidia Jetson AGX Xavier in terms of performance and
    power consumption. Our experimental results reveal that cloud approaches are still
    a long way off in terms of performance, but the inclusion of GPUs in edge devices
    offers new opportunities for those scenarios where connectivity is still a challenge.
    Similar content being viewed by others Machine Learning: Algorithms, Real-World
    Applications and Research Directions Article 22 March 2021 An improved fire detection
    approach based on YOLO-v8 for smart cities Article Open access 28 July 2023 A
    survey of smart dustbin systems using the IoT and deep learning Article Open access
    15 February 2024 1 Introduction Smart agriculture is an emerging field where the
    concepts, techniques and systems of Industry 4.0 are applied to the agrarian world
    [10]. The combination of both IoT and AI provides sustainable procedures to optimize
    crops, reduce the use of pesticides, optimize irrigation and, in general, avoid
    the most egregious problems in agricultural processes [6, 28, 29, 38]. Of particular
    interest to us is the prevention of frost. In Mediterranean areas, low temperatures
    at certain times of the agricultural cycle are a major problem that can result
    in losses of millions of euros. 1 However, it is not an easy task as it depends
    on several factors, including temperature, humidity, wind speed, etc. [30], but
    also on the particular location of the plot. Actually, the global weather forecast
    provides coarse grain information which is not valid to predict frost at the plot
    level. Some palliative measures are available to avoid crop loss, such as connecting
    windmills and stoves or connecting heating in a greenhouse to avoid crop losses.
    However, these measures need to be activated some time in advance, between 2 and
    4 h, to be really effective. Therefore, this is a scenario where both accuracy
    and performance are equally critical. A false positive, i.e., the application
    predicts a frost but eventually does not occur, means an economic and environmental
    impact, as these techniques are often too costly in both terms. A false negative,
    i.e., the application does not predict a frost but eventually occurs, can mean
    the loss of the crop which usually has dramatic consequences. Equally important
    is to predict the frost early enough in order to be able to take palliative actions,
    because otherwise, the consequences would be the same. Deep Learning is a area
    within machine learning which relies on a set of artificial neural networks organized
    as complex hierarchical levels [11]. Deep learning models are applied in agriculture
    to deal with problems such as the automatic identification of plant disease through
    images or yield predictions in crops [19]. In the field of deep learning, Long
    short-term memory (LSTM) [18] is a recurrent neural network (RNN), first proposed
    by Hochreiter and Schmidhuber, which has feedback connections. LSTM goes beyond
    processing single data points such as images, but also entire sequences of data
    such as speech, video or time-series data in general. Thus, they are well suited
    to classifying, processing and making predictions based on data capture from IoT
    infrastructures [26]. In our previous work, an IoT system was proposed to obtain
    fine-grained information from a particular plot area [15] and some prepossessing
    tasks were carried out to remove outliers and out-of-range values. Moreover, we
    develop a deep learning model for the frost prediction based on a long short-term
    memory (LSTM) with satisfactory accuracy results, i.e., an average quadratic error
    of less than a Celsius degree and a determination coefficient \(R^{2}\) greater
    than 0.95 [14]. However, the computational cost of this model was too high and
    therefore it should be executed offline. This limits the success of this technique
    of because several reasons. The IoT infrastructure should be connected to the
    Internet with high-speed connection or, at least, with a minimum number of cloud
    outages. This is actually not the scenario in rural areas where IoT infrastructures
    are often found in inhospitable conditions, where high temperatures, lack of connectivity
    and security are just a few examples that limit the existence of responsive Web
    services. With a low-bandwidth connection plus the training and inference time
    of the LSTM model in the cloud, the maximum prediction window allowed for decision
    making (i.e., 2–3 h) would be difficult to achieve. Edge computing [32] is an
    emerging area where processing in close proximity to mobile devices or sensors
    may provide energy savings, highly responsive Web services for mobile computing,
    scalability and privacy-policy enforcement for the Internet of Things, as well
    as the ability to mask transient cloud outages. Indeed, edge computing platforms
    are designed to be energy efficient and therefore performance is not their primary
    objective. Some computing platforms are emerging to enable edge computing with
    a reduced power budget and ever-increasing performance. Among them, we may highlight
    Nvidia Jetson family which can run between 7.5 and 10 W of power, offering a good
    performance ratio [17]. In this article, we provide a performance and energy evaluation
    of edge vs. cloud computing platforms for a LSTM deep learning model to predict
    the possibility of frost in crops, taking as input data captured from an IoT system.
    The main contributions of this paper include the following: 1. The LSTM model
    for frost prediction previously published in [14] has been adapted to be executed
    on high-end and low-power GPUs. 2. CPU and GPU code is evaluated in terms of performance
    and power on the Nvidia Jetson AGX Xavier to find out whether the inclusion of
    GPUs on the edge devices is a compelling alternative for running heavy workloads
    like the LSTM model. The GPU-based code of out LSTM model shows 1.6x speedup factor
    compared to multicore counterpart version. 3. We also compare the edge solution
    with its cloud-based counterpart for both stages: training and inference, showing
    that Nvidia Jetson may offer enough computational horsepower to create an autonomous
    decision support systems for frost prediction. Training could be developed during
    the warmest part of the day when frost is unlikely to occur and inference can
    be made from midday. 4. The quality of the results obtained is also evaluated
    to ensure that our version of the GPU draws similar conclusions to its CPU counterpart.
    The rest of the paper is structured as follows. Section 2 shows the necessary
    background to better understand our proposal. Section 3 introduces the deep learning
    model based on LSTM to predict temperature. Section 4 includes the empirical results
    in which both quality and performance evaluations are presented. Section 5 summarizes
    the conclusions and gives some directions for future work. 2 Background 2.1 Edge
    versus cloud computing Since the early days, computing has alternated between
    centralization and decentralization. At the beginning, batch processing and time-sharing
    prevailed in a centralized fashion. With the advent of personal computing in the
    1980s, we then move to a decentralized approach that was centralized again in
    the mid-2000s through the cloud. Nowadays, cloud computing is established as the
    most obvious infrastructure to leverage from a mobile device. However, the optimal
    cloud infrastructure may be too far away from the mobile device. Li et al. show
    the average round trip time from 260 global vantage points to their optimal Amazon
    EC2 instances was 74 ms [24]. In addition, the latency of the wireless first hop
    should be added. Therefore, in some emergent applications, this latency is not
    tolerable and some authors pointed out the necessity of moving again toward distribution.
    Satyanarayanan et al. [32] propose two-level architecture to look for mobile applications''
    interactive performance. The first level was the unmodified cloud computing architecture,
    and a second level was a network of dispersed elements called cloudlets with state
    cached from the first level [33]. Moreover, Bonomi et al, motivated by IoT infrastructure
    scalability instead, introduced the term fog computing that consists again of
    a multilevel hierarchy of fog nodes spanning from the cloud to IoT edge devices
    [4]. As stated in [32], the proximity of cloudlets (or fog nodes) provides different
    benefits but of particular interest to us are two of them: 1. Highly responsive
    cloud services, achieving low end-to-end latency, high bandwidth and low jitter
    to services located on the edge. Edge computing brings, through cloudlets, computational
    power within one wireless hop of sensors or mobile devices. Indeed, applications
    that are both latency-sensitive and computation-intensive would not become possible
    without this technology. Interactive mobile applications such as virtual or augmented
    are leading examples. 2. Scalability via edge analytics, lowering the bandwidth
    required by high-data-rate IoT sensors processing applications. Reducing the amount
    of information to be transferred to the cloud through a data analytics on the
    edge may avoid network overloading and may provide energy saves. A leading example
    of this is GigaSight framework [35] where video from mobile devices only goes
    to the nearby cloudlet. The cloudlet runs computer vision application and sends
    the results and some metadata to the cloud, reducing drastically the application
    bandwidth. Edge computing is a compelling alternative to enable smart environments
    in agriculture ubiquitously. Actually, agriculture procedures are usually developed
    in rural areas where several technological challenges often cohabit. Among them,
    we may highlight technical issues such as bandwidth, connectivity, power supply
    and scaling sensors but also environmental issues that complicate the deployment
    of IoT, such as extreme weather conditions. Some recent works have carried out
    studies considering edge computing for smart agriculture or farming. For instance,
    Zamora-Izquierdo et al. [36] proposes a platform to deal with soilless culture
    needs in full recirculation greenhouses using moderately saline water. Edge computing
    here is in charge of monitoring and managing main PA tasks near the access network
    to increase system reliability against network access failures. However, they
    do not introduce computationally heavy workloads such as deep learning models
    at this level as they require higher computational horsepower. Singh, Chana and
    Buya propose Agri-Info, a cloud-based autonomic system for delivering agriculture
    as a service. They do provide intelligent procedures to diagnose the agriculture
    status automatically using fuzzy logic but they execute so in the cloud, offering
    a mobile interface to see the output. Indeed, this is a good approach as long
    as high connectivity is guaranteed. Moreover, they do not use information from
    the ground; they use expert knowledge taken from their mobile or tablets where
    connectivity is somehow guaranteed. Finally, a survey on the role of IoT in agriculture
    for the implementation of smart farming is provided in [9]. They clearly state
    that IoT-based solutions are at the forefront of automatically maintaining and
    monitoring agricultural farms with minimal human involvement. Indeed, this requires
    the involvement of AI models that can provide predictions in real time. 2.2 Deep
    learning in precision agriculture Deep learning is made up of a set of techniques
    that allow the construction of models with great potential and outstanding results
    [19]. Recurrent neural network (RNN) architectures have been widely applied for
    regression [20]. RNNs are a type of artificial neural networks (ANNs) in which
    connections between nodes create a graph directed over a time sequence, allowing
    to have a temporal dynamic behavior. The main difference between RNNs and other
    ANNs architectures is that they use their internal state (memory) to process input
    sequences. RNNs work well in problems with short-term dependencies where the model
    only needs to look at recent (or close) information to carry out the current task
    [12]. However, there are some problems that require less recent or more distant
    information to perform the current task. This is called long-term dependency,
    and RNNs do not work well in such scenarios. The long short-term memory (LSTM)
    is type of RNNs, which is designed to deal with long-term dependencies such as
    those within time series based on learning from previous observations to predict
    the next value in the sequence [18]. While Standard RNNs are based on chain of
    very simple ANNs, such as a single tanh layer, LSTMs are also based on chain of
    ANNs, but the ANNs has a different structure. Deep learning models have drastically
    improved the state of the art in many sectors of industry including agriculture
    [25]. In the field of agriculture, different deep learning techniques (mainly
    convolutional neural networks for image classification and LSTM for the prediction
    of temporal variables) are applied to multiple problems such as plant diseases
    [27], the classification of plant species [13], identification of soil cover and
    classification of crop type [22], estimation of yields [23], identification of
    weeds [3], predictions on climatology [31], just to mention a few recent studies
    within the umbrella of precision agriculture. Focusing on the problem of climatology,
    some works have been published for climatic prediction, showing very good results.
    For instance, Salman et al. [31] propose the construction of a robust statistical
    model to predict meteorological visibility based on other intermediate variables
    (temperature, pressure, humidity and dew point). They use two- and four-layer
    LSTM networks. The data are normalized and rescaled in the range of [0, 1] and
    using a moving average. Here, the multilayered LSTM model was most effective.
    However, this work was not applied to precision agriculture but for forecasting
    visibility based on temperature, pressure, humidity, dew point in airport area
    context. LSTM was also used to predict climate variables in [37]. The targeted
    variables used as an input were temperature, humidity and wind speed. In this
    case, the network architecture consists of two LSTM layers with the activation
    function being the RELU and the optimizer RMSProp. The data were also normalized
    and rescaled in the range of [\(-1\), 1]. The results were generated for a coarse-grained
    prediction in cities. Again, it is not applied to precision agriculture context
    and therefore data were obtained for historical datasets instead of real-time
    information like us. Kratzert et al. [21] proposed a model for rain and runoff
    also using LSTM, which predicts discharge for a variety of watersheds. The authors
    demonstrate the potential of this method by using some variables such as day length,
    rainfall, temperature or humidity. Here, the LSTM is composed of two LSTM layers,
    and between them is a dropout layer to avoid overtraining of the network but in
    the context of water management scheduling not in precision agriculture. Finally,
    we have explored the bibliography of combining deep learning methods with edge
    computing architectures. Chen et al. [7] propose ThriftyEdge, a resource-efficient
    edge computing for intelligent IoT applications, and one of the case studies is
    precision agriculture. However, this work is not tailored to deep learning-based
    applications. Boubin et al. [5] explore fully autonomous precision agriculture
    where fully autonomous aerial systems (FAAS) map crop fields frequently. They
    develop the full-stack architecture, including a software driven by reinforcement
    learning and ensemble models. The early results presented in this paper do not
    show any relevant results in the field of edge computing. Actually, they work
    at simulation level, running their experiments in a Laptop. Finally, we refer
    the reader to [39] for a review in Edge Intelligence, where efforts for bridging
    the gaps between deep learning and edge computing are summarized. Even though
    the area of precision agriculture is cited as one of the main domains for edge
    intelligence, it is worth highlighting that any work is cited for this domain.
    3 LSTM model for temperature prediction on IoT infrastructures This section introduces
    the proposed LSTM model for the temperature prediction in IoT infrastructures.
    First of all, we briefly introduce the IoT infrastructure to capture information
    from a plot that was previously introduced in [15]. Next, the proposed LSTM model
    for the prediction of temperature is explained in depth. Fig. 1 IoT system architecture
    Full size image 3.1 The IoT infrastructure Figure 1 shows the IoT architecture
    previously presented in [15]. This infrastructure is deployed in two different
    crops at Murcia (South East Spain). The system monitors the hydro-climatological
    information of a plot, and depending on the data and models developed, the system
    can alert farmers to take appropriate action if necessary. The infrastructure
    is based on three main components: (1) hydro-climatological sensors, (2) an intelligent
    data processing system and (3) a monitoring component. The intelligent data processing
    system only performs a preprocessing of outliers values to avoid showing incorrect
    values to the farmer. In this article, we are evaluating the possibility of introducing
    the computation of intelligent algorithm at the edge of the network. Therefore,
    the intelligent data processing system would be physically at the edge or in the
    cloud, depending on the requirements set by the users. The algorithm will allow
    farmers to obtain a temperature prediction in real time at their plots. The workflow
    begins at the sensor level in which the climate data are captured. The sensor
    network is the 4H remote control system of Hidroconta. 2 Figure 2 shows the IoT
    node composed of temperature, humidity and wind speed sensors. They are connected
    to the analog inputs available on the IoT node. In our case, we only use the information
    provided by the temperature sensor. Sensors provide information every 10 min.
    Fig. 2 IoT node (we refer the reader to [15] for insights) Full size image The
    IoT node has connectivity capabilities. For this study, there are three IoT nodes
    where one of them is acting as a gateway to send data to the cloud via GPRS connection.
    The slave nodes are connected to the gateway using LoRa technology. 3 Moreover,
    all of them have a 6 volts (V) and 12 amp (A) battery and a 12V and 5 watts solar
    panel. Finally, each IoT node has a microcontroller with 256 KB of firmware storage
    and 96 KB of volatile memory for data, and it is able to store up to 20.000 records.
    Therefore, the IoT nodes store the information in their internal memory for fault
    tolerance. Fig. 3 Two computing models are presented; a a cloud-based approach
    where the computation is carried out in the backend and b an edge computing approach
    where the computation is carried out in the IoT node Full size image Figure 3
    shows the different computing schemes under evaluation for air temperature prediction
    using LSTM deep learning model. On the one hand, a centralized computing system
    has been used where the IoT nodes have sent the temperature by means of GPRS to
    the centralized module, in which an outliers cleaning has been carried out to
    be able to estimate the temperature using the LSTM. Also, this module allows to
    visualize the data (3a). The second scheme presents the computational component
    within the IoT module. In this way, the LSTM is executed locally, which allows
    temperature prediction without the need to send the information to a centralized
    module. Finally, the prediction is sent by GPRS to a module that allows data to
    be displayed (3b). 3.2 The LSTM model for temperature prediction Analysis of sensor
    data from IoT infrastructures as the one described above can provide valuable
    information for creating new applications to deal with the emergent problems that
    are currently unsolved. We are particularly interested in air temperature modeling
    for early identification of frost on crops. In our previous work, we designed
    a deep learning model, which offered very good results in the prediction of this
    variable. In what follows, we introduce this model and refer the reader to [14]
    for insights. In the Mediterranean area, there is a large diurnal temperature
    variation, which implies that the data time series of air temperature is nonlinear,
    containing sensitive information, making very difficult to predict with traditional
    autoregressive (AR) models such as ARIMA [2]. As previously explained in Sect.
    2, the LSTM is type of RNNs which is designed to deal with long-term dependencies,
    and therefore, it has shown very good results for predicting values in time series.
    LSTM is usually composed of four layers, interacting in several ways, and the
    key idea of LSTMs is the cell state which is basically like a conveyor belt. The
    information runs through the entire chain, with only some minor linear interactions.
    The LSTM can add or remove information to the cell state through the Gates. They
    are an optional way to let information pass and are based on a sigmoid neural
    network layer and a point multiplication operation. The sigmoid layer produces
    numbers between zero and one, describing how much of each component must pass.
    An LSTM has three of these gates in order to protect and control the cell state.
    Figure 4 shows the interaction of the three gates in detail, as well as how the
    LSTM modules exchanges information with each other. An LSTM module receives the
    temperature at time t as input, which is processed together with the temperature
    prediction at time \(t-1\), received from the previous LSTM module. Both temperatures
    are processed and sent to the next module, which also receives the temperature
    at \(t+1\). As an example, let us assume that the LSTM receives the temperature
    at the instant t, where \(t=3.41\,^\circ \)C. After processing this temperature,
    which is now considered as the previous temperature (\({t-1}\)), it returns as
    output the temperature at the instant \(t+1\), let us assume the temperature \({t+1}\)
    = 3.05 °C, that is, the output of the temperature for the next 10 min interval
    would be 3.05 °C. Fig. 4 LSTM scheme developed to deal with the frost prediction.
    Each LSTM module interacts with the previous and subsequent one. The schema shows
    the three gates that compose each LSTM module, which allow it to remember or delete
    the information that passes through them Full size image The first step in our
    LSTM is to decide the input layer. This is an importance decision as it decides
    what information goes through the cell state. In our case, it is a sigmoid layer,
    which receives as input the air temperature taken from the sensors (see Fig. 3a).
    Moreover, a hidden stacked LSTM layer that is made by LSTM blocks contains four
    interacting layers. These four neuronal layers are made up of three sigmoids and
    a hyperbolic tangent, which have been tested from 50 to 200 neurons. So in each
    step, the LSTM block has to decide what information will be stored in the state
    of the cell. To do this, the two types of neural networks work differently: the
    neural layers with sigmoids decide which values of air temperatures have to be
    updated, while the neuronal layer of the hyperbolic tangent creates a vector of
    new values of candidate air temperatures that could be added to the state. The
    two processes are combined to create a status update. Finally, the output layer
    gives the predicted air temperature based on previous air temperatures. The parameters
    used have been optimized, such as learning factor (0.001), optimizer (Adam), activation
    function (hyperbolic tangent), etc. A more detailed explanation of the parameters
    (batch size, number of epochs, number of delay sequences...) used for the experiments
    is shown in Sect. 4.1.1. 3.3 CPU and GPU implementation Two different implementations
    of the LSTM model previously described have been developed for this article. Both
    of them are based on Keras (version 2.2.4) [16]. Keras is a Python-based open-source
    neural network library, which is capable of running on top of many neural network
    frameworks such as Tensorflow [1] or CNTK [34], just to mention a few. Keras contains
    implementations of commonly used neural networks, including convolutional and
    RNN neural networks. Moreover, it includes the main building blocks such as objectives,
    optimizers, layers, activation functions. Algorithm 1 shows the code baselines
    of our LSTM implementation. First, we create the model as a linear stack of layers
    with the sequential function from Keras. Then, different layers are added to the
    model, depending on an input parameter which is actually defined by the user.
    The influence of this parameter in terms of performance will be studied in Sect.
    4.2. Moreover, the code is able to decide wheather the user wants to build the
    model on GPU through cuDNNLSTM or on CPU through LSTM. cuDNNLSTM is a Keras function
    which offers fast LSTM implementation with CuDNN [8]. It can only be run on Nvidia
    GPU, with the TensorFlow backend. cuDNN is a GPU-accelerated library of primitives
    for deep neural networks created by Nvidia. It provides GPU counterpart versions
    for standard routines such as forward and backward convolution, pooling, normalization
    and activation layers. LSTM function is the standard LSTM model defined by Hochreiter
    [18]. Finally, once the model has defined your model, it is compiled with compile
    function. This creates the structures previously defined by the underlying backend
    (in our case TensorFlow 10.11.1) in order to efficiently execute your model during
    training. 4 Results and discussion This section introduces the performance, energy
    and quality evaluation of our LSTM model as applied to predict the air temperature
    of a particular plot in an IoT infrastructure with edge computing capabilities.
    First of all, the experimental environment is described, providing the main metrics,
    hardware and software environment and datasets used in the experiments shown below.
    Then, the execution time and power consumption of the edge computing platform
    and the high-performance server are shown and discussed in detail before the quality
    evaluation of the LSTM to predict air temperature is provided. 4.1 Experimental
    setup 4.1.1 Metrics The performance and energy evaluations are carried out by
    varying the most relevant parameters of the LSTM model, i.e., number of epochs
    and number of neurons. Moreover, this study analyzes the two main stages of this
    model, i.e., training and inference, which are carried out in both an edge computing
    platform (Nvidia Jetson Xavier) and a high-performance computing server. Energy
    of the system is measured by polling once every second the power supply of the
    Jetson architecture with the Watts Up Pro power meter, which provides individual
    energy measurements for the server connected to it, and therefore, energy measurements
    refer to the entire node executing the LSTM model. As for the quality of the results,
    the prediction of temperature is a regression task and the metric measures used
    to assess the quality of the results obtained with the LSTM model are the root
    mean quadratic error, the mean absolute error (MAE), the Pearson correlation coefficient
    (PCC) and determination coefficient (R\(^2\)). The results are positive when the
    RMSE and MAE measurements are less than one degree Celsius and PCC, and the closer
    to one \(R^2\) is, the more acceptable and suitable the model is. For both experiments,
    95% of the data are used to train the model and 5% of the data are used to perform
    the inference task. The optimum parameters used for the experiments are shown
    in Table 1. Parameters that do not influence the computational performance of
    the LSTM have been validated in previous experiments. Table 1 LSTM parameters
    used for the different proposed experiments Full size table 4.1.2 Datasets Table
    2 Each row’s format collected every 10 min. 6 per hour. 144 per day Full size
    table The dataset to evaluate the LSTM model is obtained from the IoT system previously
    described in Sect. 3.1. Table 2 shows an example of the data collected by this
    architecture. The IoT infrastructure generates 144 rows per day (i.e., 1 row each
    10 min), and the data layout is as follows: Date: in dd/mm/aaaa format. Hour:
    in hh:mm format. Air temperature: decimal number in Celsius degrees. Wind speed:
    decimal number in m/s. Relative air humidity: decimal number in %. Our LSTM model
    only works with air temperature, which is collected every 10 min. For the experimental
    environment, four different datasets have been created to test scalability of
    edge and cloud solutions. They include a number of air temperature measurements
    from different periods, including 3,6,12 and 18 months, respectively (see Table
    3). Table 3 Description of the datasets used in the experiments. It shows the
    number of instances, the start and end date period of the air temperature data
    Full size table 4.1.3 Hardware and software environment Experiments have been
    carried out in two different GPU-based platforms: The former is the edge computing
    like architecture Jetson AGX Xavier Developer Kit. It has four-core ARM v8.0 64-bit
    CPU, 8MB L2 + 4MB L3, 512-core Volta GPU with Tensor Cores and 16GB 256-Bit LPDDR4x
    running at 137GB/sec. The latter is called HETEROLISTIC, and it is composed of
    two hexa-core Intel Xeon E5-2650 at 2.20 GHz, 128 GB of RAM, private L1 and L2
    caches of 32 KB and 256 KB per node, and a L3 cache of 32 MB shared by all the
    cores of a socket. It includes an Nvidia GTX 1080 Ti(Pascal), with 12 GB and 3584
    cores (28 SM and 128 SP per SM). The software environment is based on gcc 7.4.0
    and cuda 10 and Python 3.6.5. The design of our LSTM model is based on Tensorflow
    1.10.1 and Keras 2.2.4. 4.2 Evaluation Fig. 5 Execution time (in seconds) of LSTM
    training stage with multicore CPU and GPU on AGX Xavier, varying the number of
    epochs for training. The training is carried out with information of 3 months
    with 150 neurons Full size image Fig. 6 Energy (in KWh) on AGX Xavier of LSTM
    training stage with multicore CPU and GPU on AGX Xavier, varying the number of
    epochs for training. The training is carried out with information of 3 months
    with 150 neurons Full size image One of the main goals of this paper is to validate
    edge computing for complex tasks such as those under the umbrella of deep learning.
    Computational devices at the edge are traditionally low power and therefore have
    limited computational horsepower. Recently, more powerful edge computing devices
    have emerged, such as those from the Nvidia Jetson family, which include an accelerator
    to speed up parts of the code. Figure 5 shows the performance difference between
    a GPU-based code of our LSTM model compared to multithreaded CPU counterpart version,
    executed in the Nvidia Jetson AGX Xavier for the training stage and varying the
    number of epochs. Although the GPU architecture included in Xavier only includes
    a multiprocessor with 512 cores, more than 1.6x speedup factor is reported. Moreover,
    Fig. 6 shows the energy in KWh of the two implementations. Xavier’s power consumption
    is higher when the GPU is enabled. Actually, the Xavier consumes 10W when the
    GPU code is running and only 8W when only CPU code does. However, the performance
    difference between these codes makes the GPU code more efficient compared to the
    CPU code in terms of energy consumption. Fig. 7 Execution time (in seconds) of
    LSTM training stage, varying the number of epochs for training. The training is
    carried out with information of 3 and 6 months with 150 neurons Full size image
    Fig. 8 Execution time (in seconds) of LSTM inference stage, varying the number
    of epochs for training. The inference is carried out with information of 3 and
    6 months with 150 neurons Full size image Figures 7 and 8 show the execution time
    of the proposed LSTM model to predict the temperature of a plot. Experiments are
    carried with the GPU version of the LSTM model on the edge computing platform
    Jetson AGX Xavier and the high-performance computing server HETEROLISTIC. Two
    performance figures are provided for main stages of the LSTM model, i.e., training
    and inference, and in both scenarios, HETEROLISTIC is defeated by a wide-margin
    Jetson Xavier (peak performance difference of 3.5x speed-up factor). However,
    the magnitude of the execution time for each of these stages is very different.
    Computationally speaking, the training process is more time-consuming than the
    inference process; a difference reaches up to five orders of magnitude, and thus
    different conclusions can be drawn. As previously explained, the LSTM is designed
    to be a part of intelligent component of an IoT infrastructure. The IoT infrastructure
    sends information periodically every 10 min, and therefore, this is time limit
    for making instantaneous predictions. Otherwise, the prediction will become obsolete,
    and the farmer would not be able to take actions before a temperature drops. Therefore,
    the execution time obtained for inference in Xavier is valid for performing instantaneous
    prediction on edge computing. There are scenarios where the deadline to obtain
    the prediction is, at least, 12 h or even more. This is the case of frost prediction
    in places where there is a large diurnal temperature variation as it is the targeted
    region (South East, Spain). Frost prediction is a scenario where the farmer needs
    to know the prediction several hours in advance to activate the antifreeze mechanisms.
    In addition, climate change makes the weather even more unpredictable and changing.
    Therefore, the deep learning models need to be retrained periodically. Execution
    time for the training stage for 3000 epochs and 6-month dataset is less than 12
    h (i.e., 11.01 h) in the case of Jetson Xavier, which is actually the worst of
    the cases presented in Figs. 7 and 8. The execution time is drastically reduced
    when the dataset size and the number of epochs are reduced. For instance, it takes
    less than 6 h to train with 3-month dataset, running 3000 epochs and less than
    1 h if the training is performed with 3-month dataset and 200 epochs. Therefore,
    Jetson Xavier can offer great performance to enable an autonomous decision support
    system for frost prediction, in which both training and inference are performed
    at the edge. Fig. 9 Execution time (in seconds) of LSTM training stage, varying
    the number of epochs for training. The training is carried out with information
    of 12 and 18 months Full size image Fig. 10 Execution time (in seconds) of LSTM
    inference stage, varying the number of epochs for training. The inference is carried
    out with information of 12 and 18 months Full size image Figures 9 and 10 show
    large-scale (12- and 18-month datasets) training and inference on both Jetson
    Xavier and HETEROLISTIC. The training execution time grows exponentially along
    with the number of epochs, and inference stays flat. Table 4 Execution time (in
    seconds) of LSTM training and inference stages, varying the number of neurons
    for training and setting the number of epochs to 2500 Full size table Finally,
    Table 4 shows the scalability of the LSTM when the number of neurons increases,
    setting the number of epochs to 2500. The execution time is not affected too much
    by increasing the number of neurons. The usage of GPUs allows high-performance
    data training of the LSTM on both architectures. 4.3 Quality evaluation This section
    shows the results obtained from the LSTM model designed to predict the temperature
    from IoT information. First, we show and analyze the results of the three cross-validations
    and then we show the results of the test of 95% for training and 5% for testing
    (considering 24 consecutive hours). Table 5 Quality results for 3-month, 6-month
    and 12-month datasets varying the number of epochs. RMSE (root-mean-square error),
    MAE (mean absolute error), PCC (Pearson correlation coefficient) and \(R^2\) (determination
    coefficient) Full size table After analyzing the results of the computational
    performance of the models in their training phase and given the high computational
    cost with the 18-month datasets, we have only analyzed the quality of the results
    for the 3-, 6- and 12-month datasets, since the time of 18 months was excessive,
    even the time for the 12-month datasets is considered excessive for an autonomous
    system, but we have considered it necessary to study the quality of the results,
    in case the prediction results were very remarkable. Table 5 shows the error after
    model inference by setting the number of neurons to 150 and varying the number
    of epochs for 3-, 6- and 12-month datasets. The most suitable models are those
    obtained by the 3-month dataset, whose value of \(R^2\) is 99%. For datasets of
    6 and 12 months, the value is also acceptable but it is much better that of the
    3-month dataset. Regarding the error, both RMSE and MAE, there is a remarkable
    fact and it is the increase above a Celsius degree of the 6-month dataset. This
    error increase is due to the fact that the datasets include summer months, which
    causes the model to have noise since the objective is to predict low temperatures.
    As can be seen, this error decreases for the 12-month dataset. Analyzing in depth
    the results, we see how the smallest error and the most adjusted model are produced
    with 3000-epoch configuration. Nevertheless, looking at the difference in time
    in the experiment of computational performance between the configurations of 2500
    and 3000 epochs, we have an hour of difference, being slower the training with
    3000 epochs. Studying the difference of error between 2500 and 3000 epochs with
    the increase of 1 h, we consider more satisfactory considering performance vs.
    quality the result obtained with 2500 epochs. The two best results are highlighted
    in Table 5. Once the quality of the results has been studied after varying the
    number of epochs, Table 6 analyzes the quality of the model by varying the number
    of input neurons to the model between 50 and 200. This is done for 3-, 6- and
    12-month datasets. The behavior obtained is similar to the variation in the number
    of epochs. The 6-month dataset obtains a greater error than the 3-month and 12-month
    datasets. The most suitable model taking into account the determination coefficient
    \(R^2\) is the 3-month dataset with 150 neurons. Already with 200 neurons, the
    model starts with overlearning and the error increases slightly. Table 6 Quality
    results for 3-month, 6-month and 12-month datasets, varying the number of neurons.
    RMSE (root-mean-square error), MAE (mean absolute error), PCC (Pearson correlation
    coefficient) and \(R^2\)(determination coefficient) Full size table Therefore,
    in view of the results, we can conclude that the data indicate that it is possible
    to run the prediction model of the LSTM at the edge, since with a training of
    5 h, there is enough time between frost and frost, even if these occur on consecutive
    days. The most optimal configuration found is to train the data with the last
    3 months collected by the node IoT taking as input 150 neurons and making a maximum
    of 2500 epochs. With this configuration, the mean quadratic error obtained is
    less than 0.8 Celsius degrees. 5 Conclusions and future work Prior knowledge of
    low temperatures can help the farmer to anticipate resources and apply frost control
    techniques early enough to ensure maximum efficiency. The overall objective is
    to create an autonomous decision support system for precision agriculture, and
    in such hostile environments, connectivity is limited and there are transient
    clouds that limit the effectiveness of these systems. Edge computing provides
    a framework in which connectivity and security problems are addressed by computing
    at the edge of the network, but today’s edge computing architectures are not able
    to handle heavy workloads. This article evaluates edge computing for frost prediction
    in crops by estimating low temperatures through LSTM deep learning models. LSTM
    deep learning models are computationally heavy workloads, but provide very good
    results for predicting time series. Our results demonstrate that novel edge computing
    platforms including low-power GPUs such as Nvidia Jetson Xavier provide an excellent
    framework for driving edge computing as a real alternative to smart applications.
    Our best LSTM model obtains a deviation less than 1 degree centigrade, being trained
    with information of 3 months, 2500 epochs and 150 neurons, and its execution time
    is less than 5 h which allows training before the prediction is required. As future
    work, new variables will be incorporated into the LSTM to create a multivariate
    LSTM and study the influence of other variables on temperature prediction, as
    well as the network adjustment creating a new architecture with more layers and
    different activation functions and different learning factors. Notes https://www.laverdad.es/murcia/ultimas-heladas-region-20190404113101-nt.html.
    http://www.hidroconta.com/. https://lora-alliance.org/. References Abadi M, Barham
    P, Chen J, Chen Z, Davis A, Dean J, Devin M, Ghemawat S, Irving G, Isard M, et
    al. (2016) Tensorflow: a system for large-scale machine learning. In: 12th \(\{\)USENIX\(\}\)
    Symposium on Operating Systems Design and Implementation (\(\{\)OSDI\(\}\) 16),
    pp 265–283 Aliberti A, Bottaccioli L, Macii E, Di Cataldo S, Acquaviva A, Patti
    E (2019) A non-linear autoregressive model for indoor air-temperature predictions
    in smart buildings. Electronics 8(9):979 Article   Google Scholar   Bah MD, Dericquebourg
    E, Hafiane A, Canals R (2018) Deep learning based classification system for identifying
    weeds using high-resolution UAV imagery. In: Science and Information Conference.
    Springer, pp 176–187 Bonomi F, Milito R, Zhu J, Addepalli S (2012) Fog computing
    and its role in the internet of things. In: Proceedings of the First Edition of
    the MCC Workshop on Mobile Cloud Computing. ACM, pp 13–16 Boubin J, Chumley J,
    Stewart C, Khanal S (2019) Autonomic computing challenges in fully autonomous
    precision agriculture. In: 2019 IEEE International Conference on Autonomic Computing
    (ICAC), pp 11–17. IEEE Cass S (2019) Taking AI to the edge: Google’s TPU now comes
    in a maker-friendly package. IEEE Spectr 56(5):16–17 Article   Google Scholar   Chen
    X, Shi Q, Yang L, Xu J (2018) Thriftyedge: Resource-efficient edge computing for
    intelligent IoT applications. IEEE Netw 32(1):61–65 Article   Google Scholar   Chetlur
    S, Woolley C, Vandermersch P, Cohen J, Tran J, Catanzaro B, Shelhamer E (2014)
    cuDNN: efficient primitives for deep learning. arXiv preprint arXiv:1410.0759
    Farooq MS, Riaz S, Abid A, Abid K, Naeem MA (2019) A survey on the role of IoT
    in agriculture for the implementation of smart farming. IEEE Access 7:156237–156271
    Article   Google Scholar   Gondchawar N, Kawitkar R (2016) Iot based smart agriculture.
    Int J Adv Res Comput Commun Eng 5(6):838–842 Google Scholar   Goodfellow I, Bengio
    Y, Courville A (2016) Deep learning. MIT Press, Cambridge MATH   Google Scholar   Graves
    A, Mohamed Ar, Hinton G (2013) Speech recognition with deep recurrent neural networks.
    In: 2013 IEEE International Conference on Acoustics, Speech and Signal Processing,
    pp 6645–6649. IEEE Grinblat GL, Uzal LC, Larese MG, Granitto PM (2016) Deep learning
    for plant identification using vein morphological patterns. Comput Electron Agric
    127:418–424 Article   Google Scholar   Guillén-Navarro MA, Martínez-España R,
    Llanes A, Bueno-Crespo A, Cecilia JM (2020) A deep learning model to predict lower
    temperatures in agriculture. J Ambient Intell Smart Environ 12(1):21–34 Article   Google
    Scholar   Guillén-Navarro MA, Martínez-España R, López B, Cecilia JM (2019) A
    high-performance IoT solution to reduce frost damages in stone fruits. Concurr
    Comput Pract Exper. https://doi.org/10.1002/cpe.5299 Article   Google Scholar   Gulli
    A, Pal S (2017) Deep learning with Keras. Packt Publishing Ltd, Birmingham Google
    Scholar   Halawa H, Abdelhafez HA, Boktor A, Ripeanu M (2017) Nvidia Jetson platform
    characterization. In: EuropEan Conference on Parallel Processing. Springer, pp
    92–105 Hochreiter S, Schmidhuber J (1997) Long short-term memory. Neural Comput
    9(8):1735–1780 Article   Google Scholar   Kamilaris A, Prenafeta-Boldu FX (2018)
    Deep learning in agriculture: a survey. Comput Electron Agric 147:70–90 Article   Google
    Scholar   Khosravi A, Koury R, Machado L, Pabon J (2018) Prediction of wind speed
    and wind direction using artificial neural network, support vector regression
    and adaptive neuro-fuzzy inference system. Sustain Energy Technol Assessm 25:146–160
    Google Scholar   Kratzert F, Klotz D, Brenner C, Schulz K, Herrnegger M (2018)
    Rainfall-Runoff modelling using Long-Short-Term-Memory (LSTM) networks. Hydrol.
    Earth Syst. Sci. Discuss., https://doi.org/10.5194/hess-2018-247 Kussul N, Lavreniuk
    M, Skakun S, Shelestov A (2017) Deep learning classification of land cover and
    crop types using remote sensing data. IEEE Geosci Remote Sens Lett 14(5):778–782
    Article   Google Scholar   Kuwata K, Shibasaki R (2015) Estimating crop yields
    with deep learning and remotely sensed data. In: 2015 IEEE International Geoscience
    and Remote Sensing Symposium (IGARSS). IEEE, pp 858–861 Li Y, Zhao K, Chu X, Liu
    J (2013) Speeding up k-means algorithm by gpus. J Comput Syst Sci 79(2):216–229
    Article   MathSciNet   Google Scholar   Liakos K, Busato P, Moshou D, Pearson
    S, Bochtis D (2018) Machine learning in agriculture: a review. Sensors 18(8):2674
    Article   Google Scholar   Mohammadi M, Al-Fuqaha A, Sorour S, Guizani M (2018)
    Deep learning for iot big data and streaming analytics: A survey. IEEE Commun
    Surv Tutor 20(4):2923–2960 Article   Google Scholar   Mohanty SP, Hughes DP, Salathé
    M (2016) Using deep learning for image-based plant disease detection. Front Plant
    Sci 7:1419 Article   Google Scholar   Pierpaoli E, Carli G, Pignatti E, Canavari
    M (2013) Drivers of precision agriculture technologies adoption: a literature
    review. Proc Technol 8:61–69 Article   Google Scholar   Qi S, Wan L, Fu B (2018)
    Multisource and multiuser water resources allocation based on genetic algorithm.
    J Supercomput, pp 1–9 Rodriguez SAB, Klein L, Schrott AG, Van Kessel TG (2019)
    Autonomous mobile platform and variable rate irrigation method for preventing
    frost damage . US Patent App. 10/219,448 Salman AG, Heryadi Y, Abdurahman E, Suparta
    W (2018) Single layer & multi-layer long short-term memory (lstm) model with intermediate
    variables for weather forecasting. Proc Comput Sci 135:89–98 Article   Google
    Scholar   Satyanarayanan M (2017) The emergence of edge computing. Computer 50(1):30–39
    Article   Google Scholar   Satyanarayanan M, Bahl P, Caceres R, Davies N (2009)
    The case for VM-based cloudlets in mobile computing. IEEE Pervasive Comput 8(4):14–23
    Article   Google Scholar   Seide F, Agarwal A (2016) CNTK: Microsoft’s open-source
    deep-learning toolkit. In: Proceedings of the 22nd ACM SIGKDD International Conference
    on Knowledge Discovery and Data Mining, pp 2135–2135 Simoens P, Xiao Y, Pillai
    P, Chen Z, Ha K, Satyanarayanan M (2013) Scalable crowd-sourcing of video from
    mobile devices. In: Proceeding of the 11th Annual International Conference on
    Mobile Systems, Applications, and Services, pp 139–152. ACM Zamora-Izquierdo MA,
    Santa J, Martínez JA, Martínez V, Skarmeta AF (2019) Smart farming iot platform
    based on edge and cloud computing. Biosyst Eng 177:4–17 Article   Google Scholar   Zaytar
    MA, El Amrani C (2016) Sequence to sequence weather forecasting with long short-term
    memory recurrent neural networks. Int Comput Appl 143(11):7–11 Google Scholar   Zhang
    N, Wang M, Wang N (2002) Precision agriculture a worldwide overview. Comput Electron
    Agric 36(2–3):113–132 Article   Google Scholar   Zhou Z, Chen X, Li E, Zeng L,
    Luo K, Zhang J (2019) Edge intelligence: Paving the last mile of artificial intelligence
    with edge computing. Proc IEEE 107(8):1738–1762 Article   Google Scholar   Download
    references Acknowledgements This work was partially supported by the Fundación
    Séneca del Centro de Coordinación de la Investigación de la Región de Murcia under
    Project 20813/PI/18, and by Spanish Ministry of Science, Innovation and Universities
    under grants RTI2018-096384-B-I00 (AEI/FEDER, UE) and RTC-2017-6389-5. Author
    information Authors and Affiliations Universidad Católica San Antonio de Murcia
    (UCAM), Campus de los Jerónimos S/N, 30107, Murcia, Spain Miguel A. Guillén, Antonio
    Llanes, Baldomero Imbernón, Raquel Martínez-España & Andrés Bueno-Crespo Universitat
    Politècnica de València, Camino de Vera S/N, 46022, Valencia, Spain Juan-Carlos
    Cano & José M. Cecilia Corresponding author Correspondence to José M. Cecilia.
    Additional information Publisher''s Note Springer Nature remains neutral with
    regard to jurisdictional claims in published maps and institutional affiliations.
    Rights and permissions Reprints and permissions About this article Cite this article
    Guillén, M.A., Llanes, A., Imbernón, B. et al. Performance evaluation of edge-computing
    platforms for the prediction of low temperatures in agriculture using deep learning.
    J Supercomput 77, 818–840 (2021). https://doi.org/10.1007/s11227-020-03288-w Download
    citation Published 29 April 2020 Issue Date January 2021 DOI https://doi.org/10.1007/s11227-020-03288-w
    Share this article Anyone you share the following link with will be able to read
    this content: Get shareable link Provided by the Springer Nature SharedIt content-sharing
    initiative Keywords Edge computing LSTM Deep learning Precision Agriculture Use
    our pre-submission checklist Avoid common mistakes on your manuscript. Sections
    Figures References Abstract Introduction Background LSTM model for temperature
    prediction on IoT infrastructures Results and discussion Conclusions and future
    work Notes References Acknowledgements Author information Additional information
    Rights and permissions About this article Advertisement Discover content Journals
    A-Z Books A-Z Publish with us Publish your research Open access publishing Products
    and services Our products Librarians Societies Partners and advertisers Our imprints
    Springer Nature Portfolio BMC Palgrave Macmillan Apress Your privacy choices/Manage
    cookies Your US state privacy rights Accessibility statement Terms and conditions
    Privacy policy Help and support 129.93.161.222 Big Ten Academic Alliance (BTAA)
    (3000133814) - University of Nebraska-Lincoln (3000134173) © 2024 Springer Nature'
  inline_citation: Guillén et al. (2020)
  journal: The Journal of Supercomputing
  limitations: The evaluation is strictly focused on the context of frost prediction
    application to temperature prediction. The applicability of the solution to different
    domains and use-cases is not verified and discussed.
  pdf_link: null
  publication_year: 2020
  relevance_score: 0.8
  relevance_score1: 0
  relevance_score2: 0
  title: Performance evaluation of edge-computing platforms for the prediction of
    low temperatures in agriculture using deep learning
  verbatim_quote1: '"Our experimental results reveal that cloud approaches are still
    a long way off in terms of performance, but the inclusion of GPUs in edge devices
    offers new opportunities for those scenarios where connectivity is still a challenge."'
  verbatim_quote2: Training could be developed during the warmest part of the day
    when frost is unlikely to occur and inference can be made from midday.
  verbatim_quote3: '>'
- DOI: https://doi.org/10.1109/fmec.2018.8364046
  analysis: 'The paper "An architecture pattern for trusted orchestration in IoT edge
    clouds" by Pahl et al. explores the use of blockchain technology to implement
    a trusted orchestration management (TOM) system for IoT edge clouds. The authors
    argue that trust is an essential ingredient for the successful deployment of IoT
    systems, and that blockchain technology can provide a secure and reliable platform
    for managing the identity, data provenance, and orchestration of IoT devices and
    applications. The paper proposes an architecture pattern for TOM that is based
    on the W3C Provenance framework and uses a blockchain to record all orchestration
    actions. The authors demonstrate the feasibility of their approach through a use
    case involving the management of smart city traffic. Overall, the paper provides
    a valuable contribution to the literature on IoT security and management by demonstrating
    how blockchain technology can be used to build more secure and trustworthy IoT
    systems.


    The paper is particularly relevant to the point "Different data types (e.g., soil
    moisture, canopy temperature, weather) and their collection and use" because it
    provides a detailed discussion of how blockchain technology can be used to ensure
    the provenance and integrity of data collected from IoT devices. The authors argue
    that blockchain technology can be used to create a tamper-proof record of all
    data collection and processing activities, which can help to improve the trust
    and reliability of IoT systems. The paper also provides a number of concrete examples
    of how blockchain technology can be used to improve the security of IoT data collection
    and processing, such as using smart contracts to define the terms of data sharing
    agreements between different IoT devices and applications.


    The paper''s most important quote is: "Our aim is to propose a conceptual reference
    architecture that enables secure, trustworthy processing of IoT edge architectures.
    Furthermore, provenance is the central concept to organize the storage of orchestration
    information."


    A second important quote is: "We present an architectural pattern, with its underlying
    principles, that combines IoT edge orchestration with a blockchain-based provenance
    mechanism."


    A third important quote is: "We formalize the architecture pattern in the format
    of a state machine that describes the basic processing of the orchestration activities,
    supported by a blockchain to enable trusted orchestration management (TOM)."'
  authors:
  - Claus Pahl
  - Nabil El Ioini
  - Sven Helmer
  - Brian Lee
  citation_count: 46
  full_citation: Claus Pahl; Nabil El Ioini; Sven Helmer; Brian Lee. An architecture
    pattern for trusted orchestration in IoT edge clouds. 2018 Third International
    Conference on Fog and Mobile Edge Computing (FMEC)., 2018, pp.1-8.
  full_text: '>

    This website utilizes technologies such as cookies to enable essential site functionality,
    as well as for analytics, personalization, and targeted advertising purposes.
    To learn more, view the following link: Privacy Policy Manage Preferences IEEE.org
    IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account Personal
    Sign In Browse My Settings Help Access provided by: University of Nebraska - Lincoln
    Sign Out All Books Conferences Courses Journals & Magazines Standards Authors
    Citations ADVANCED SEARCH Conferences >2018 Third International Conf... An architecture
    pattern for trusted orchestration in IoT edge clouds Publisher: IEEE Cite This
    PDF Claus Pahl; Nabil El Ioini; Sven Helmer; Brian Lee All Authors 44 Cites in
    Papers 1650 Full Text Views Abstract Document Sections I. Introduction II. Architecture,
    Trust and Blockchain Basics III. Trusted Orchestration Management (TOM) Requirements
    and Principles IV. A Blockchain-Based Architectural Pattern for Trusted Orchestration
    Management (TOM) V. Formalisation-a State Machine for Blockchain-Based Orchestration
    Show Full Outline Authors Figures References Citations Keywords Metrics Footnotes
    Abstract: Fog and edge architectures provide a link between centralised clouds
    and the world of IoT and sensors. The architectures consist of devices of different
    sizes that coordinate the communication with sensors and cloud services, and that
    process data from or for the sensors and the cloud locally. In dynamic settings
    that allow resources to be created, placed, used and removed at any time, advanced
    orchestration techniques are needed for the activities. Often, these architectures
    cross organisational boundaries, which causes trust concerns. The origin of data
    and the identity of sensors or actuators needs to be identified. Additionally,
    data needs to be stored securely. Orchestration activities across boundaries are
    subject to a contractual perspective. We present here an architecture pattern
    that supports trusted orchestration for edge clouds. The W3C Provenance standard
    is the conceptual foundation of the pattern. Permissioned blockchain technology
    serves as the platform to implement the provenance framework. Published in: 2018
    Third International Conference on Fog and Mobile Edge Computing (FMEC) Date of
    Conference: 23-26 April 2018 Date Added to IEEE Xplore: 31 May 2018 ISBN Information:
    DOI: 10.1109/FMEC.2018.8364046 Publisher: IEEE Conference Location: Barcelona,
    Spain SECTION I. Introduction An IoT edge cloud architecture is a distributed
    system, typically consisting of an outer rim of IoT, sensor devices and networks,
    an intermediate layer of local processing capabilities and more centralised cloud
    systems for data processing and storage [17]. We specifically consider containerised
    edge orchestration, since this introduces mobile containers [28] as an additional
    challenge into this architectural setting. Key benefits of such a platform are
    (i) a lightweight virtualisation platform for flexible configuration and (ii)
    a dynamic cluster architecture where devices might join or leave, which are suitable
    for varying data processing needs for sensors and actuators [19]. The orchestration
    of all activities, i.e., the management of joining and leaving IoT devices, the
    dynamic placement and change of containers as software devices [3], the creation
    and processing of data, all need to be managed in a secure and trustworthy way
    in an inherently insecure, untrusted fog or edge computing environment. An important
    concern for edge architectures is the secure management of orchestration tasks.
    IoT networks are distributed environments, in which trust between sensor owners,
    network and device providers does not necessarily exist. Equally, infrastructure
    devices might be owned and managed by parties that do not trust each other. In
    order to support key orchestration activities from a trust perspective, we need
    to consider different security concerns: Record the identity of all entities in
    the system Record the provenance of sensor data and other entities entering the
    processing system Record the fact that certain processing steps (in the form of
    smart contracts) have actually been carried out. We employ blockchain technology
    to manage the security concerns by recording the above information in a tamper-proof
    way to create trust. Our aim is to propose a conceptual reference architecture
    that enables secure, trustworthy processing of IoT edge architectures. Furthermore,
    provenance is the central concept to organise the storage of orchestration information.
    We present an architectural pattern, with its underlying principles, that combines
    IoT edge orchestration with a blockchain-based provenance mechanism. We formalise
    the architecture pattern in the format of a state machine that describes the basic
    processing of the orchestration activities, supported by a blockchain to enable
    trusted orchestration management (TOM). We discuss several use cases to motivate
    the needs, picking one of them later in order to validate the state machine definition.
    Our paper is organised as follows. We start with basic architecture, trust and
    blockchain concepts in Section II, before identifying requirements and architectural
    principles in Section III. Section IV then defines the architecture pattern conceptually,
    before we formalise it as a state machine in Section V. We validate the design
    through a use case in Section VI and discuss implementation options in Section
    VII, before ending with related work and conclusions. SECTION II. Architecture,
    Trust and Blockchain Basics An architectural pattern, sometimes called an architectural
    style, is a set of principles and coarse-grained structures that provides an abstract
    framework for a family of software systems [8]. Architecture styles are sets of
    principles and patterns that shape an application. Garlan and Shaw define an architectural
    style as ‘a family of systems in terms of a pattern of structural organisation.
    More specifically, an architectural style determines the vocabulary of components
    and connectors that can be used in instances of that style, together with a set
    of constraints on how they can be combined’ [6]. To make principles and patterns
    more explicit, we follow [7]: ‘an architectural style consists of a set of architectural
    principles and patterns that are aligned with each other to make designs recognisable
    and design activities repeatable: The principles express architectural design
    intent; the patterns adhere to the principles and are commonly occurring in practice’.
    A key element of our architecture pattern is the incorporation of assured, maybe
    certifiable security to enable trust [5]. Edge/fog and cloud computing infrastructures
    allow users to cut costs by distributing and outsourcing computations on-demand.
    However, users of these services have often no means of verifying the confidentiality
    and integrity of data and computation as well as the identity of the service providers
    [1], [2]. Thus, the trustworthiness of the environment is undermined. Blockchain
    technology is a solution for security needs in an untrusted environment. Many
    security problems can be addressed using the decentralised, autonomous, and trusted
    capabilities of blockchains, which provide inherent security mechanisms capable
    of operating in an unreliable network, without relying on a central authority
    [13]. Furthermore, blockchains are tamper-proof, distributed and shared databases
    in which all participants can append and read transactions but no one has full
    control over it. Every new transaction is digitally signed and timestamped, which
    means that all operations can be traced back, and their provenance can be determined
    [24]. The security model implemented by blockchains insures data integrity using
    consensus-driven mechanisms to enable the verification of all the transactions
    in the network [15], which makes all records easily auditable. This is particularly
    important since it allows tracking all sources of insecure transactions in the
    network (e.g., vulnerable IoT devices) [25]. Additionally, blockchains can strengthen
    the security of edge components in terms of the identity management and access
    control and prevent data manipulation. Key blockchain principles are: Blocks (transactions)
    are appended to the chain. Each transaction is hashed/digitally signed to maintain
    integrity and enforce non-repudiation. Then this is sent to all nodes to obtain
    consensus using a specific consensus method and respective coordination protocol.
    Consensus is essentially driven by collective self-interest. Finally, the result
    is passed on to the recipient. Public keys act as addresses in this context. A
    key concept here is a smart contract: if there is agreement (condition met) then
    contracts (operations) are executed. These contracts are attached to the blockchain.
    The problem is that due to massive data replication, performance and scalability
    need to be evaluated. This is of course a challenge in the constrained environment
    in question here. SECTION III. Trusted Orchestration Management (TOM) Requirements
    and Principles The orchestration of data, software and hardware components in
    edge clouds is the key architectural concern in behavioural terms that will be
    addressed through the pattern [18]. This will be combined with a security layer
    to enable trust. We start gathering functional and platform requirements in order
    identify the core principles that guide the pattern. A. Core Requirements and
    Platform Assumptions We now look at security requirements for IoT edge architectures
    in more detail. There is a lack of trust in these architectures that requires
    security features to be applied. Things (be that sensors, devices or software)
    might dynamically join and need to be identified. Data is generated and communicated,
    but needs to be traceable to its origin (provenance). Decisions in the architecture
    management and orchestration need to be taken dynamically and locally, and need
    to be agreed by all participants involved. What is needed is a trustworthy mechanism
    for the secure management of edge architectures that focuses on the transactional
    aspects, but including here identity, provenance and orchestration as aspects
    of a facetted smart contracts approach. To explore this setting deeper, we make
    some assumptions regarding the specific devices and software platform, although
    these do not impact on the generality of the approach. We assume a cluster-based
    architecture for the outer and middle layers, allowing for some hierarchical organisation
    of the edge architecture to take place. We also introduce lightweight smaller
    devices such as single-board computers, while we still assume that more capable
    gateway servers and cloud infrastructures are also integrated into the scenario.
    Basic cluster orchestration for containers could be provided by platforms like
    Kubernetes or Docker Swarm [9], [10], [12]. At the core are classical orchestration
    activities such as deploying activities on nodes of the network. Since all entities
    (devices, containers, data producers/consumers) can join and leave the system
    at any time, two additional activities need to be supported: identification and
    recording of activities, resulting in the following activities to be supported:
    identify, orchestrate and record. B. Architectural Principles In this IoT edge
    cloud context, a number of key principles arise from the requirements that are
    security-related: Identification: Identify all things as authentication and data
    origin are issues. Data Provenance: important if, for instance, incidents happen
    and records need to be examined. Non-Repudiation of architecture management operations
    in a contract situation, e.g., change of software in maintenance or emergency
    situations. The key aim is to manage trust without central authorities in lightweight
    edge clusters and possibly limited connectivity. We need technologies that can
    be applied to identity management, data provenance and transaction processing.
    What is required is advanced distributed trust management including concepts such
    as smart contracts of identity and orchestration management in an environment
    that is constrained in terms of computational power and connectivity. C. Application
    Areas and Secure Orchestration Needs To demonstrate the need for a trusted orchestration
    management (TOM), we look at different application scenarios. We summarise in
    a schematic way the key entities and orchestration needs. Lightweight sensor architectures
    are about data collection and processing with containers and data input/output.
    First, we briefly look at an agricultural domain: Devices: RPi clusters in remote,
    exposed areas (assumed to be in fixed locations) Sensors: rain, temperature, sun,
    humidity Actuators: irrigation system Containers: regular sensor data collection,
    data filtering and analysis, local storage, maintenance and testing Data: sensor
    data (raw, filtered), analysis results, actuator instructions Orchestration: data
    provenance, container identification, container orchestration on devices (contract
    execution). Logistics is another use case with vehicle-based mobile sensors that
    could detect loading/unloading in different locations: Devices: mobile (moving
    vehicles that might join or leave locations), single-board computers Sensors:
    e.g., RFID to detect item movement Actuators: none Containers: item movement (origin
    and target), system testing and maintenance Data: item movement, from and to locations
    Orchestration: data provenance, device identification, container identification,
    orchestration of containers on devices (smart contract execution). Our proposed
    pattern addresses security needs as described in the above use cases. D. Suitability
    of Blockchains to Support Security Requirements and Principles We now discuss
    the suitability of blockchain technologies for providing a secure platform that
    addresses the above requirements and principles for IoT edge architecture orchestration.
    Blockchain management forms a distributed software architecture, where agreement
    on shared state for decentralised and transactional data can be established across
    a network of untrusted participants-as it is the case in edge clouds. This approach
    avoids to rely on central trusted integration points that control the system in
    question-which is a single point of failure. Edge platforms that build trust on
    blockchains can take advantage of common blockchain properties such as data immutability,
    integrity, fair access, transparency, and nonrepudiation of transactions. By building
    on container-based orchestration, software becomes another artefact that is subject
    to identity and authorisation concerns, since edge computing is essentially based
    on the idea to bring software to the edge (to process data locally) rather than
    to bring data to the cloud centre. Often, large amounts of data are collected
    at the edge, transferred to and stored in the cloud, causing high resource consumption
    there without a clear need for all the data. Edge cloud computing involves resource-constrained
    devices that link sensors with central cloud processing. These devices can carry
    out critical filtering and processing activities, relieving the central components
    of the architecture from overload. SECTION IV. A Blockchain-Based Architectural
    Pattern for Trusted Orchestration Management (TOM) The two extended trusted orchestration
    management (TOM) activities in addition to deployment and execution of the components
    that we need to take care of are identity management and logging (recording) of
    all orchestration-related actions. Identity management is supported for instance
    in cluster management tools like Docker Swarm. Here authentication is used in
    the cluster setup to define the capabilities of processing nodes. Logging orchestration
    actions and generated data supports auditability, which is of importance in untrusted
    environments. As explained, we propose a blockchain to record all orchestration
    actions. A. Blockchains for Edge Architecture Orchestration Blockchain technology
    has been applied for transactional processing, but the novelty here is the application
    to lightweight dynamic edge architectures, i.e., blockchain methods and protocols
    in localised clusters of edge devices. Smart contracts define orchestration decisions
    in the architecture (as transactions). We use blockchains to manage security (identity,
    origin, non-repudiation) in distributed autonomous clusters. Specifically, the
    following blockchain architectural configurations [14] are proposed: Permissioned
    blockchains with brokers to enable a degree of local control by the orchestrator.
    Partially centralised/decentralised settings with permissioned blockchains with
    permissions for fine-grained operations on the transaction level (e.g., permission
    to create assets such as data). Consider both permissioned blockchains with permissioned
    miners (write) and also permission-less normal nodes (read). With respect to concerns
    such as cost efficiency, performance, and flexibility, a key problem for an orchestrator
    is choosing what data and computation should be placed on-chain and what should
    be kept off-chain. This might, however, be decided depending on the concrete implementation
    of the pattern. Smart contracts are another aspect of blockchain configuration.
    Smart contracts are not processed until their invoking transactions are included
    in a new block. Blocks impose an order on transactions, thus resolving non-determinism
    which might otherwise affect their execution results. This can be implemented
    for device and container orchestration [16], [22] within the contract transaction
    of the blockchain. B. Provenance to Enable Trust We singled out data origin and
    provenance, identity management and orchestration non-repudiation as important
    security concerns in our framework. We describe now how a blockchain can be utilised
    to support the requirements. Provenance actually plays the key role here, as it
    is the mechanism to capture all identity, orchestration and data origin actions
    in a systematic uniform way. Our starting point is the W3C PROV standard (https://www.w3.org/TR/prov-overview/).
    According to PROV, provenance is information about entities, activities, and people
    involved in producing in our case data. This provenance data in general aids the
    assessment of quality, reliability or trustworthiness in the data production and
    processing. The goal of PROV is to enable the representation and interchange of
    provenance information. Fig. 1. W3C PROV provenance model [based on https://www.w3.org/tr/2013/note-prov-primer-20130430/].
    Show All Fig. V-B shows the PROV conceptual model with entities, activities and
    agents. Here, entities are data objects as well as software containers and hardware
    devices. Provenance records describe the provenance of entities. An entity''s
    provenance can refer to other entities, e.g., compiled sensor data to the original
    records. Activities, which are the dynamic parts (i.e. processing components),
    create and change entities, often making use of previously existing entities to
    achieve this. The two fundamental activities are generation and usage of entities,
    which are represented by relationships in the model. There are also two types
    of activities-usage and generation. Those carried out by devices (sensors): sensors
    can generate data, actuators can consume/use them. Those carried out by containers
    (deployed on devices), which can also generate and use data. Activities are carried
    out on behalf of agents that also act as owners of entities, i.e. are responsible
    for the processing. An agent takes a role in an activity such that the agent can
    be assigned some degree of responsibility for the activity taking place. Actors
    are for instance orchestrators in charge of deploying software and managing the
    infrastructure. All entities (device, container, data) are dynamic, i.e., can
    join (be created or deployed) or leave (be destroyed or terminated) the system.
    Three operations arise: (i) on joining, or before accepting data as a processing
    component, they need to be identified; (ii) data origins need to be remembered
    (stored); (iii) placement of entities, which is an orchestration decision. C.
    An Architecture Pattern for TOM We propose to implement TOM through provenance-based
    orchestration logging. 1 Following Section II, we define the architecture pattern
    for trusted orchestration management in terms of: (i) a structural architecture
    consisting of entities: orchestrator (agent), containers (running on devices,
    implementing services on data), data (being processed by container-based services),
    (ii) a set of core activities, (iii) a behavioural architecture (interaction of
    key entities). Furthermore, we provide a mapping of PROV to the architecture pattern
    in this section, which we formalise as a state machine in Section V. Fig. 2. Structural
    architecture: Sample configuration Show All We first outline some core properties
    of the architectural pattern. The orchestrator decides where the data and activities
    are located. Data processing means to identify a source of data, create a PROV
    record and orchestrate (i.e., assign a target service for the data processing
    by orchestrator), which is based on the execution of a smart contract. The smart
    contract is based on the provenance record (which is in our case more declarative
    in nature, but the orchestrator can interpret this). Table 1 (Section V) will
    formalise this. We note that in case of orchestrator failure, other nodes can
    be promoted to a manager role, or a if an orchestration mechanism such as docker
    swarm is used, multiple nodes can be defined with a manager role, then a consensus
    mechanism (i.e., raft) can be used to make sure that all the managing nodes have
    an exact copy of the orchestration configuration. This removes the problem of
    single point of failure. In the sample architecture scenario in Fig. 2, the orchestrator
    is the agent that orchestrates, i.e., deploys in this case the collector and analyser
    containers on some available computing devices. This effectively forms a contract
    between orchestrator and nodes, whereby the nodes are contracted to carry out
    the activities, i.e., in this case the collection of data into a joint representation
    and the consecutive analysis, providing some results. We can define a set of principle
    activities for the collection and analyser functions from Fig. 2 based on the
    PROV relationships USES and GENERATES: the collector USES sensor data and GENERATES
    the joint data; the analyser USES the joint data and GENERATES the results. This
    sequence of activities forms an orchestration plan. This plan is enacted based
    on the blockchain smart contract concept, requiring the contracted activity to
    (i) obtain permissions (credentials) to retrieve the data (USES) and (ii) create
    output entities (GENERATE) as an obligation defined in the contract. A smart contract
    is defined through a program that defines the implementation of the work to be
    done. It includes the obligations to be carried out, the benefits (in terms of
    SLAs) and the penalties for not achieving the obligations. Generally, fees paid
    to the contractor and possible penalties to compensate the contract issuer shall
    be neglected here. Each processing step based on the contract is recorded in the
    blockchain: (i) the generation of data through a provenance entry: what, by whom,
    when; (ii) the creation of a credentials object defining, based on the identity
    of the processing component, the authorised activities; (iii)the formalised contract
    between the orchestrator and the activity node. The obligations formalised include
    in the IoT edge context data-oriented activities such as storage, filtering and
    analysis and container-oriented activities such as deploying or redeploying (updating)
    a container. Fig. 3. Structural architecture: Blockchain-based orchestration-with
    an orchestration layer (based on prov) and a trust layer (based on blockchains,
    reflecting the PROV activities) Show All The structural architecture is presented
    in Fig. 3. Some key assumptions are as follows: sensors are also considered as
    devices, as are computational devices such as gateway servers or smaller computers.
    Sensors in this way are also considered as being service providers, e.g. providing
    monitored data as a stream or in discrete packages. Actuators are in a similar
    way services that process incoming instructions and configuration data. We assume
    the computational devices to host containers that are dynamically updateable.
    Sensors and actuators might not have that dynamic capability. Next, we provide
    a PROV-to-Pattern Mapping, focusing on the Orchestrator (PROV-AGENT) and the Orchestration
    Plan (formalised by a BCOR state machine in the next section). The orchestration
    plan is based on the following ORCHESTRATION operations (PROV-ACTIVITY) on the
    entities (PROV-ENTITY) in Fig. 3: IDENTIFY (Device/Host, Container/Service, Data)
    PLACE (Container on Host; Data on Service), which is a send/deployment action
    EXEC (Host. Container → Service; Service. Data → Results), which is one of two
    processing actions, CONsuME and PROVIDE, that are applicable to hosts (con-sumes
    container or provides service) or services (con-sumes (in)data and provides (out)data/results).
    Sample operations are Collect and Analyse. These correspond to PROV.USES and PROV.GENERATES.
    Additionally, the following BLOCKCHAIN STORAGE operations from Fig. 3, generally
    for accountability, are needed for the following entities to be stored: Identity:
    for authentication Data Provenance: for data origin and integrity Orchestration:
    for contract non-repudiation Table I summarises the dependencies between the PROV
    elements ENTITY, ACTIVITY and AGENT. Fig. 4. Behavioural architecture of the blockchain
    orchestration integration. Show All Table I Entity to activity, managed by orchestrator
    (agent) Fig. 4 shows the behavioural interaction architecture of the solution
    focusing on the interactions between the components. All actions are recorded
    in the blockchain to guarantee data provenance. Additionally, the identity of
    all entities is stored. The actions are executed by invoking the appropriate smart
    contract. For instance, when a sensor container collects data, it invokes the
    send_collected_data smart contract defined by the collector container by passing
    a signed hash of the collected data. At this point the collected container checks
    the identity of the sensor container (e.g., signature) and the integrity of the
    data (e.g., the hash of the data), then downloads the data in order to process
    it. SECTION V. Formalisation-a State Machine for Blockchain-Based Orchestration
    In the previous sections we introduced the principles of our architecture and
    the basic characteristics of the architectural pattern. Now, we formalise the
    concept using a state machine definition: we start with the data structures underlying
    the operation and the introduction of key features of the operations. We introduce
    the syntax of the state machine specification and specify the state transitions
    in a table format. We finally define the full state machine based on the transition
    table. A. Data Structure and Operations The blockchain data structure is a timestamped
    sequence of blocks, which records and aggregates data about transactions that
    have occurred within the blockchain network. A block consists of: (i) a hash for
    maintaining integrity, (ii) a pointer to the previous block and (iii) the stored
    content. The data structure for the stored content on the blockchain contains
    one of following three structures: PROV (data: entity, origin:activitity-generates,
    receiver: activity-uses) IDENTITY(object:identity, id-proof:proof) ORCHESTRATE(deployed:
    entity, location: entity) Operations on blockchains include in principle Read
    (extract content or execute smart contract), Validate and Insert. The second is
    concerned with the chain management and validation process and shall be ignored
    here. Our focus is reading/executing and creating/inserting blocks. We can detail
    them according to their task in the IoT edge orchestration context. The full list
    of actions includes (in three categories): Orchestration Actions: Device-identify,
    Device-terminate, Container-identify, Container-terminate, Activity-invoke SmartContract-execute
    Blockchain Actions: store prov(id-create), store prov(id-delete), store prov(data),
    store prov(orchestrate) Auxiliary: Ack-Acknowledgements of received input B. State
    Chart Definition We assume a basic state machine here that formalises the sequence
    of Fig. 4. States reflect the results of IoT processing and are stored on the
    blockchain. Outcomes of the transitions below that result in blocks added to the
    blockchain, i.e. the state is reflected in the blockchain through a new block.
    All transitions are orchestrator-managed: triggered through previous states, constrained
    by conditions and having an orchestration action executed. The state machine syntax
    is based on transitions in the form Show All The BC-based ORchestration (BCOR)
    State Machine is defined as a 5-tuple: BCOR−SM=[S,T,C,A,δ] where: S = (BCS1, BCS2,
    … BCSn) is the set of (blockchain-oriented) states that indicate the record created
    in the blockchain, i.e., (PROV-ID-create, PROV-ID-delete, PROV-DATA, PROV-ORCH);
    δ:S×T×C×A→S is the high-level state transition function. It specifies the next
    state depending on the present state and the conditions; see Table 1; T = (T1,
    T2, … Tk) is the set of triggers, i.e., events that initiate the state transition
    for entities joining or leaving (container-join/leave, device-join/leave); C =
    (C 1, C2, … Cl) are control conditions that constrain a transition depending on
    a previous state, e.g., devices or containers need to be joined before they can
    leave or data needs to have left its generating entity, i.e., the conditions are
    (joined(device), joined(container), left(data)); A = (A1, A2, … Am) is the set
    of actions carried out by the orchestrator, which here are (identify-device, identify-container,
    terminate-device, terminate-container, determine-activity, orchestrate(smart contract)).
    SECTION VI. Validation Example In order to validate the architectural pattern,
    we discuss a use case-smart cities-to illustrate the need for identity management
    (for devices, software, data), contracts, and data provenance. As an example,
    we take a closer look at cars. These are mobile devices, which can determine their
    position (e.g., consume information from beacons). They can also provide location
    and direction of travel to traffic management, which results in some requirements.
    For identification of the device, they need to register to a local network (similar
    to mobile phone hand-over). Traffic management is a component that might use an
    analyser function (which might be a third-party service). This needs the identification
    of the software service. The platform could use a flexible software infrastructure
    with frequent updates of the containers that run the analysis and other features.
    Another separate component is the road infrastructure management, which requires
    data identification. Data structures-as defined above-provide structure for the
    parameters of the orchestration and blockchain actions. We can make good use of
    contracts in this example. For instance, the traffic management could invoke a
    contract on the traffic infrastructure, i.e., could instruct the traffic lights
    to be changed (actuator setting). A dynamic contract management scenario is, e.g.
    a car connecting to traffic management: in this case a passive contract is created:
    Show All In a second scenario, the traffic management connects to the traffic
    infrastructure: in this case an executable contract is created: Show All The benefits
    include a tamper-proof record that can be examined in the case of accidents. SECTION
    VII. Implementation-Orchestration and Blockchain Engines In this section, we discuss
    possible implementation platforms for the architecture pattern. In Fig. 3, we
    identified two layers: orchestration and blockchain. We illustrate them in the
    next two subsections. A. Orchestration Engines Docker Swarm and Kubernetes are
    possible container cluster engines. Container technologies are lightweight virtual-isation
    mechanisms. Docker and Kubernetes as the most prominent examples have been successfully
    placed on edge devices such as Raspberry Pis [20], [26] to form local computation
    clusters. We note that our architecture is orchestration engine agnostic, meaning
    that any engine that implements an orchestration mechanism can be used. As our
    focus is here on edge cloud architectures, we investigate the core components
    for a container middleware platform for edge clouds. Different containers for
    a specific processing problem are composed, which forms an orchestration plan.
    This plan defines the edge cloud topology on which the orchestration is enacted.
    Table II State machine definition 1) Swarm Cluster Architecture and Security To
    illustrate the orchestration need better, we select Docker Swarm that we also
    used to carry out experiments [12], [26]. The cluster nodes can have different
    roles. A selected node becomes the user gateway into the cluster. Docker Machines
    can manage remote hosts by sending the commands from the Docker client to the
    Docker daemon on the remote machine over a secured connection. When the first
    Docker Machine is created, in order to create a trusted network, new TLS protocol
    certificates are created on the local machine and then copied to the remote machines.
    For the management of the cluster we use Docker Swarm. Normal nodes run one container
    that identifies them as a Swarm node. The Swarm managers deploy an additional
    dedicated container that provides the management interface. There are mechanisms
    to avoid inconsistencies in the Swarm that could lead to potential misbehaviour.
    If several Swarm managers exist, they can also share their knowledge about the
    swarm by communicating information from a non-leading manager to the one in charge.
    While some identity and reliability management is in place, provenance of these
    activities is important to enable trust. These activities can be captured in the
    form of smart contracts, e.g., ORCH(create(DockerMachine)), ORCH(deploy(Container))
    or ORCH(retrieve(Statuslnformation)) in our solution. 2) Orchestration Information
    Information about a Swarm needs to be shared. In a multi-host network, we can
    use a key-value store that keeps information about network state (e.g., discovery,
    networks, endpoints and IP addresses). Information about an image and how it can
    be reached needs to be provided. The orchestrator uses this key-value store for
    selecting a lead node in a cluster and managing information distribution across
    the nodes. This is similar to data generated by sensors subject to provenance
    activities. The data can be used in the smart contracts that implement the orchestration:
    Network-State(Endpoints, lPAddresses) or ManagerInfo(Status). B. Blockchain Engines
    While a container engine can form the core of the orchestrator, we need a blockchain
    engine to run the provenance layer. A permissioned blockchain platform supporting
    smart contracts is Hyperledger Fabric. Hyperledger fabric is an open-source, distributed
    ledger computing platform featuring smart contract (Chaincode) functionality.
    It provides a decentralised environment replicated across different network participants.
    Hyperledger fabric employs smart contracts to manage controlled access to the
    ledger as well as a modular and extendable architecture that allows plug-in/out
    of different components to perform specific functions. As a permissioned blockchain,
    it supports different types of transactions and variable block sizes, while maintaining
    a high level of control over transaction execution and validation time. Within
    fabric, nodes assume different roles (i.e., clients, peers and orderers), where
    clients act on behalf of the client applications, the peers maintain copies of
    the ledger and orderers provide the communication channels and generate the new
    blocks (mining). This approach reduces latency and increases throughput. Since
    in a permissioned blockchain all the parties are known (identity vs anonymity),
    to increase privacy fabric uses channels, which are private subnets of communication
    between two or more participants in the network. SECTION VIII. Related Work Our
    pattern resembles a reference architecture for an edge cloud. For instance, Kratzke
    has investigated lightweight architectures for cloud environments, focusing on
    the clustering mechanism [11], without considering security and trust in-depth.
    In [27], Zhu et al. have used the Hyperledger Fabric blockchain as a platform
    to implement a distributed control system based on the IEC 61499 standard. The
    standard is designed to support distributed automation control systems through
    the implementation of function blocks containing the logic of each participating
    component of the system. The function blocks are implemented as Docker containers
    and Kubernetes is used for orchestrating the execution of the containers. The
    blockchain layer is used to secure and validate all transactions as a result of
    executing the different containers. If we want to consider a management platform
    for an IoT edge architecture, be it in constrained or mobile environments, the
    functional scope of a middleware layer needs to be suitably adapted [4], [21].
    Key requirements are robustness and security-both significant contributors to
    trust. In [29], Stanciu presents a blockchain-based architecture named EdgeChain,
    with the corresponding algorithm to manage a decentralised placement service for
    mobile edge applications (MEC). While in traditional cloud computing environments
    the resource management is the responsibility of the cloud provider, in MEC, a
    degree of collaboration between service providers is needed for an effective use
    of resources. The main aspects addressed by EdgeChain are i ) providing a transparent
    selection process for hosts to process the incoming requests, ii) a trustworthy
    and democratic environment to determine the best place to deploy applications,
    and iii) high service availability independent from vendors or service providers.
    Robustness is a requirement that needs to be facilitated through fault tolerance
    mechanisms that deal with failure of connections and nodes. Flexible orchestration
    and load balancing are such functions. Security is another requirement, here relevant
    in the form of identity management in unsecured environments. Other security concerns
    such as data provenance or smart contracts accompanying orchestration instructions
    are also relevant. De Coninck et al. [23] also approach this problem from a middleware
    perspective. Dupont et al. [21] look at container migration to enhance the flexibility,
    which is an important concern in IoT settings. In [30], Hardjono and Smith present
    a privacy preserving technique that relies on blockchain to anonymously record
    device commissioning. The technique assures the different parties about the identity
    of the devices and their manufactures while incentivising device owners to share
    sensor data in a privacy-preserving fashion. SECTION IX. Conclusion Trust is an
    essential ingredient to make the Internet of Things work. Edge and fog computing
    can provide an operational platform to manage the behavioural aspects. However,
    in an open environment that is subject to security problems and that crosses organisational
    boundaries, trust needs to be addressed. The problems are the identity of hardware
    devices and software applications, the origin and integrity of data and the contractual
    nature of orchestration in this context. We have presented an architecture pattern
    for trusted orchestration management (TOM) in an edge cloud, guided by the security
    principles identity, data provenance and nonrepudiation. An architecture pattern
    was presented in terms of its structural and behavioural properties. A state machine
    definition formalises the conceptual architecture presentation. We have demonstrated
    that a blockchain-based solution can ideally map trust concerns to an architecture
    level, which are conceptually captured by the W3C Provenance framework. We have
    presented an architecture pattern, i.e., a solution that is abstracted from more
    specific performance and other implementation concerns. For instance, the complete
    storage of extensive sensor data in a blockchain is not feasible due to the performance
    problems of most blockchain solutions. Here, off-chain storage and other specific
    blockchain configurations, which we only briefly touched, need to be further investigated.
    ACKNOWLEDGMENT The authors would like to thank the Free University of Bozen-Bolzano
    for supporting the ECO and ECORE projects. Authors Figures References Citations
    Keywords Metrics Footnotes More Like This BodyCloud: Integration of Cloud Computing
    and body sensor networks 4th IEEE International Conference on Cloud Computing
    Technology and Science Proceedings Published: 2012 Wireless sensor networks and
    cloud computing integrated architecture for agricultural environment applications
    2017 Eleventh International Conference on Sensing Technology (ICST) Published:
    2017 Show More IEEE Personal Account CHANGE USERNAME/PASSWORD Purchase Details
    PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS Profile Information COMMUNICATIONS PREFERENCES
    PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help? US & CANADA: +1 800 678
    4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow About IEEE Xplore | Contact
    Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics
    Reporting | Sitemap | IEEE Privacy Policy A not-for-profit organization, IEEE
    is the world''s largest technical professional organization dedicated to advancing
    technology for the benefit of humanity. © Copyright 2024 IEEE - All rights reserved.'
  inline_citation: Pahl et al. (2018)
  journal: ''
  limitations: The paper does not provide a detailed evaluation of the performance
    of the proposed TOM system. Additionally, the paper does not discuss the scalability
    of the TOM system to large-scale IoT deployments.
  pdf_link: null
  publication_year: 2018
  relevance_score: 0.8
  relevance_score1: 0
  relevance_score2: 0
  title: An architecture pattern for trusted orchestration in IoT edge clouds
  verbatim_quote1: Our aim is to propose a conceptual reference architecture that
    enables secure, trustworthy processing of IoT edge architectures. Furthermore,
    provenance is the central concept to organize the storage of orchestration information.
  verbatim_quote2: We present an architectural pattern, with its underlying principles,
    that combines IoT edge orchestration with a blockchain-based provenance mechanism.
  verbatim_quote3: '>'
- DOI: https://doi.org/10.1007/978-3-031-15175-0_27
  analysis: 'The paper proposes a Fog computing-enabled IoT architecture for precision
    agriculture, demonstrating the following benefits:


    * Reduced round-trip time (RTT) for data transmission, significantly improving
    service response times.

    * Lightweight protocol (MQTT) is utilized for communication between edge devices,
    minimizing latency and improving throughput.

    * Power consumption is optimized through energy-efficient network design and the
    use of low-power devices.

    * The distance between Fog IoT nodes is considered a critical factor in reducing
    latency.

    * Real-time data collection and processing enable farmers to make informed decisions,
    improve crop yields, and optimize resource utilization.


    Overall, the paper highlights the advantages and feasibility of implementing Fog
    computing for real-time irrigation management in precision agriculture.'
  authors:
  - Meenaxi M. Raikar
  - S M Meena
  citation_count: 0
  full_citation: 'Raikar, M. M., & S M, M. (2023). Fog Computing-Enabled Internet
    of Things for Resource Optimization. In: Misra, R., Omer, R., Rajarajan, M., Veeravalli,
    B., Kesswani, N., Mishra, P. (eds) Machine Learning and Big Data Analytics. ICMLBDA
    2022. Springer Proceedings in Mathematics & Statistics, vol 401. Springer, Cham.
    https://doi.org/10.1007/978-3-031-15175-0_27'
  full_text: '>

    Your privacy, your choice We use essential cookies to make sure the site can function.
    We also use optional cookies for advertising, personalisation of content, usage
    analysis, and social media. By accepting optional cookies, you consent to the
    processing of your personal data - including transfers to third parties. Some
    third parties are outside of the European Economic Area, with varying standards
    of data protection. See our privacy policy for more information on the use of
    your personal data. Manage preferences for further information and to change your
    choices. Accept all cookies Skip to main content Advertisement Log in Find a journal
    Publish with us Track your research Search Cart International Conference on Machine
    Learning and Big Data Analytics ICMLBDA 2022: Machine Learning and Big Data Analytics
    pp 329–339Cite as Home Machine Learning and Big Data Analytics Conference paper
    Fog Computing-Enabled Internet of Things for Resource Optimization Meenaxi M.
    Raikar & Meena S M   Conference paper First Online: 07 June 2023 392 Accesses
    Part of the book series: Springer Proceedings in Mathematics & Statistics ((PROMS,volume
    401)) Abstract Internet of Things (IoT) has evolved and penetrated in different
    sectors such as healthcare, agriculture, manufacturing, transportation, and logistics.
    The IoT services are deployed in the cloud for accessing it virtually independent
    of location. The data-intensive IoT applications when deployed in the cloud have
    high response time. To overcome this challenge, the fog computing techniques is
    proposed to access the data from the sensors in real time. In this paper, the
    Fog-enabled IoT architecture for precision agriculture is presented. Precision
    agriculture is the usage of information technology to increase yield of crops
    and improve health of plants by ensuring accurate and controlled supply of nutrients.
    The sensors are deployed in the fields, and data is sent to the edge devices used
    for improving the produce. The different services available are automated irrigation
    and fertigation, recommendation by experts, decision support system, and protection
    from rodents. The farmers can subscribe to the service and make the best use.
    The advantage of Fog-enabled IoT is the reduction in round-trip time (RTT) compared
    to Cloud IoT architecture. The result demonstrates 40% reduction in RTT when Fog-enabled
    IoT architecture is used for different services. Keywords MQTT Raspberry Pi Publish
    Subscribe Edge device Access provided by University of Nebraska-Lincoln. Download
    conference paper PDF 1 Introduction The Fog-enabled Internet of Things (IoT) architecture
    is used for resource optimization. The agriculture sector use case is considered
    for providing service to the farmers. The farmer can enable the services using
    the mobile application. The lightweight protocol is chosen for communication between
    the devices for energy-efficient transmission of the data. The network topology
    consists of heterogeneous nodes such as things and edge devices. The nodes in
    the network are power constraint devices; hence, the lightweight protocol is opted
    for the communication. The Message Queue Telemetry Transport (MQTT) is the lightweight
    protocol that is used for communication between the edge devices such as Raspberry
    Pi. The MQTT protocol uses publish-subscribe communication model. It is assumed
    that the service provider will have the infrastructure for facilitating the different
    services mentioned. The recommendation by experts regarding which crop to be grown
    in the field based on region, season, and climate conditions is available to the
    farmers. Advice related to the appropriate time for sowing the seed to get better
    yield is facilitated on request through mobile. This paper outlines the use of
    IoT devices such as rain sensor, soil moisture sensor, and temperature sensor
    to sense the agricultural data and store into edge device database. The stored
    data is monitored through big data analytics, and prediction is performed using
    data mining techniques. The energy efficiency is computed in terms of the packet
    size and the round trip time for the transmission of the data between the devices.
    The organization of the paper: In Sect. 2, related work on Fog IoT services is
    presented. In Sect. 3, the architecture for Fog IoT taking precision agriculture
    as a use case is described. The energy model for the Fog IoT devices is discussed
    in Sect. 4. The distance between the Fog IoT nodes, a factor to reduce latency,
    is presented in Sect. 5. The result analysis and conclusion is presented in Sects.
    6, and 7, respectively. 2 State of the Art in Fog-Enabled IoT Services In [1],
    the system that collects soil properties and stores it in cloud for further analysis
    is mentioned. It also speaks about building a scalable sensor data analysis for
    smart farming with commercially available IoT devices which reduces maintenance
    cost and provides data analytics resulting in increased crop yield. In [2], cloud-based
    IoT application for precision agriculture with three-layer architecture is described.
    The top layer deals with collecting information and applying necessary agricultural
    actions. The next layer connects the top layer to IoT. The last layer deals with
    data storage and processing. AgroTick, a novel hybrid system for smart agriculture,
    is discussed in [3]. AgroTick is an Internet of Things (IoT) system with a mobile
    interface that was created using technological modules such as cloud computing,
    embedded firmware, hardware, and big data analytics. AgroTick is built to increase
    agricultural efficiency, develop a well-connected farming network, and provide
    a knowledge-sharing platform for farmers. In [4,5,6,7], the lightweight protocol,
    Message Queue Telemetry Transport (MQTT), is the communication model used. It
    has opened its way in many sectors since its invention in 1999. The different
    cloud deployments and services available for the Internet users are presented
    in [8]. The various applications of IoT such as smart parking, waste management,
    and home automation are described in [9]. The power efficiency for IoT devices
    is enhanced using the software-defined networks (SDN) architecture [10]. The energy
    efficiency of the IoT devices is improved using load balancing and fault tolerance
    techniques [11]. The IoT services of the smart city are described in [12]. The
    6LoWPAN and CoAP protocol in development of the applications are presented in
    [13]. The security issues are concerns in the IoT network presented in [14, 15].
    3 Fog Computing-Enabled IoT Architecture The Fog computing-enabled IoT architecture
    for precision agriculture using lightweight protocol is shown in Fig. 1. The objective
    is to provide different service for farmers that aid in precision agriculture
    such as: 1. Irrigation and fertigation as a service 2. Crop-related decision support
    system as a service 3. Recommendation as a service 4. Pest control as a service
    The farmers have to subscribe for the services by registration process. The metering
    and billing module at the service provider (SP) side keeps track of the unit amount
    of resource utilized by the farmers. Irrigation and Fertigation As a Service:
    This service is used by farmers to irrigate and fertigate the land. The controlled
    amount of water and fertilizers are supplied to the plants based on the different
    parameters such as soil moisture content, temperature, and rainfall in the region.
    Crop-Related Decision Support System As a Service This service aids the farmer
    in making decisions related to the type of crop to be sowed or the suitable time
    for sowing in the region. To facilitate this service at the SP side, big data
    analytics technique are applied as shown in Fig. 1. Recommendation As a Service
    The farmers who have subscribed to this service get recommendation related to
    the crop. The data related to each farmers land is collected using sensors and
    stored at the data center for analysis. The data mining techniques are applied
    for recommendation to the farmers. Pest Control As a Service This service enables
    the farmers to combat the loss in yield due to pests and rodents. The automated
    fertigation unit is installed at the service provider location. The metering unit
    aids in determining the amount of unit consumed by the farmers for accounting
    and billing. The virtualization technique is applied for efficient utilization
    of resources at the data centers. The virtual private network (VPN) component
    enables the user to have private network for security reasons. These services
    are deployed at the edge device closer to the sensors to minimize the latency.
    In the Fig. 1, end devices could be the mobile, laptop, or the tablet. The services
    could be accessed using a browser or an application. The service response time
    could be greatly enhanced by deploying these on the edge devices closer to the
    sensors. In the next section, the energy efficiency model for fog IoT architecture
    is presented. Fig. 1 Fog-enabled IoT architecture using lightweight protocol Full
    size image 4 Energy Model for the Fog IoT Devices The evolution of Fog computing-enabled
    Internet of Things is at its peak as represented in Gartner’s predictions in the
    recent days. Here, the things connect to the Internet anytime, anywhere providing
    the ubiquity to the users. These things are fueled by energy sources. Hence, energy
    efficient utilization of the IoT resources is an important research domain. With
    the invention of Industrial IoT, the need for low power technology is increasing
    tremendously. Thus, the power consumption model for IoT applications plays an
    important role in network resource optimization. A trade-off is to be achieved
    between cost incurred, network lifetime, and the power consumption of the devices.
    The power efficiency model for IoT devices is presented in [16]. The effect of
    power consumption based on the traffic pattern in IoT devices of smart city applications
    is described in [17]. In an IoT application, energy is consumed during data acquisition,
    processing, and communication. The alternate to save energy is to use energy harvesting
    technologies, which is out of the scope of this paper. The analysis of energy
    in the life cycle of an IoT application is presented here. The objective is to
    minimize the power consumption of the IoT applications. In the literature, system
    level conservation of energy is described vastly. The focus of this paper is mainly
    from the perspective of energy consumption during communication between the devices.
    In an IoT application, the pattern observed is data acquisition by the sensors/things,
    processing performed by the controller, and the transmission of the data. Based
    on this pattern, the power consumption of the IoT application is broken into four
    different blocks. The first block being the power consumed at the system/device
    level (PSYS) to perform the operations at the operating system level. The second
    block being the power consumption during the data acquisition by the sensors/things
    (PDACQ). The third block is power consumed for processing (PPROC) and finally
    the power utilized for communicating between the networking devices (PCOMMN).
    The mathematical representation of the observed pattern in IoT application is
    given in Eq. (1). $$ {P}_{NDEV}={P}_{SYS}+{P}_{DACQ}+{P}_{PROC}+{P}_{COMMN} $$
    (1) With the main objective being the power conservation during communication,
    the lightweight protocol is used in the development of the IoT applications. The
    payload in case of lightweight protocol such as MQTT for IoT applications is 2
    bytes. Since the IoT devices are battery powered, the objective is to minimize
    the power consumed during transmission for increasing the network lifetime. 4.1
    Power Consumption Model for Data Communication The average power consumed during
    communication is represented as energy required to send a message (EM) and the
    time interval between consecutive messages (TM) as given in Eq. (2). $$ {P}_{COMMN}=\sum
    \limits_{k=1}^n\frac{E_M^{(k)}}{T_M^{(k)}} $$ (2) where n is the number of messages
    sent during the experimental period and k varies from 1 to n. The factors that
    influence EM are based on whether it is a wired medium or wireless medium for
    transmission, embedded chip type on the sensor/thing and the period for every
    transmission. The IoT applications can be categorized into two types such as periodic
    and event trigger-based reporting. In case of periodic reporting such as temperature
    monitoring, the value for \( {T}_{\textrm{M}}^{(k)} \) is constant. Therefore,
    Eq. (2) is rewritten as: $$ {P}_{COMMN}=\frac{1}{T_M^0}\sum \limits_{k=1}^n{E}_M^{(k)}
    $$ (3) Here, \( {T}_M^0 \) is constant time interval between consecutive reporting
    instances. 4.2 Power Consumption Model for Data Acquisition The IoT applications
    are classified into two types such as periodic reporting and nonperiodic or event
    trigger-based reporting. The power consumption for the data acquisition is given
    by Eq. (4): $$ {P}_{DACQ}=\left\{\begin{array}{c}{P}_{DACQ-1- SAMPLE}\cdot {SN}_1.\dots
    (periodic)\\ {}{P}_{DACQ-1- SAMPLE}\cdot {SN}_2\cdot \Pr ob(E)\end{array}\right.
    $$ (4) where SN1 and SN2 are the number of samples for periodic and event trigger-based
    reporting, respectively. In case of the event trigger-based reporting, the probability
    of occurrence of an event (E) is taken into consideration. 4.3 Power Consumption
    Model of a System/Device The different states of a networking device are active,
    idle/sleep, transmit, and receive. The power consumption of a networking device
    (PSYS) is given as: $$ {P}_{SYS}={P}_{active}+{P}_{sleep/ idle}+{P}_{transmit}+{P}_{receive}
    $$ (5) The power consumption during each of these states is presented in this
    section. Data Transmission The power consumption for transmission of data in an
    IoT environment, considering periodic transmission, is represented as: $$ {E}_{DataTx}={P}_{DataTx}(mW)\times
    {T}_M^0(ms)\vspace*{-1.5pc} $$ (6) Data Reception Similarly, the power consumed
    to receive the data is given as: $$ {E}_{DataRx}={P}_{DataRx}(mW)\times {T}_{Rx}(ms)
    $$ (7) where TRx(ms) is the duration for data reception. Active/Sleep Modes Based
    on the active and sleep modes of the networking device, power consumption is modelled
    as: $$ {P}_{active+ sleep}={P}_s\times {T}_s+\left({T}_{total}-{T}_s\right)\ast
    {P}_{active} $$ (8) where Ttotal and Ts are the total time spent and time spent
    in sleep mode, respectively. The power consumption of an IoT device can be reduced
    by increasing the sleep modes. Based on the deviation of the sensed data, the
    sleep modes can be increased for prolonged network lifetime. The deviation of
    the sensed data is computed as: $$ Deviation\mbox{\_ }of\mbox{\_ }sensed\mbox{\_}data=\frac{\sqrt{\sum
    \left({y}_i-\mu \right)}}{\mu } $$ (9) where yi is the sensed data and μ is the
    mean computed for “n” sensed data values. μ is computed as \( \sum \limits_{i=1}^n{y}_i/n
    \). The data reduction is performed by monitoring the deviation in the data sensed.
    The voluminous data, variety of sensors, and velocity of data generated are the
    aspects to be considered in Fog computing. 4.4 Power Consumption Model for Data
    Processing The power consumed for data processing depends on the number of operations
    performed such as arithmetic operations. It depends on the hardware architecture
    chosen for the deployment of the IoT applications. In this section, the different
    units of power consumption in the IoT applications are outlined. With the proposed
    architecture, the latency for the services is reduced which aids in decreasing
    the power consumed. 5 Distance Between Nodes in Fog IoT Assuming there exists
    “M” routers between the source and destination, the end-to-end delay (dE-to-E)
    is given by Eq. (10), when the queuing delay is negligible: $$ {d}_{E- to-E}=M\ast
    \left({d}_{proc}+{d}_{trans}+{d}_{prop}\ \right) $$ (10) where dproc is the processing
    delay, dtrans is the transmission delay, and dprop is the propagation delay [18].
    If the link length is doubled from d to 2d, the propagation delay is dprop = 2
    * dprop. The propagation delay is proportional to the distance between the nodes.
    Hence, the Fog computing reduces the end-to-end delay when the distance between
    the data gathering nodes and edge devices is reduced. 6 Result Analysis The Raspberry
    Pi 3 is used as the end node at the fog computing layer for aggregation, computation,
    and processing. The lightweight protocol is used for data transmission between
    the nodes. MQTT protocol is chosen as the lightweight protocol for transmission
    of the sensor-captured data. The “publish-subscribe” communication model is applied
    in MQTT. The mosquito broker is utilized to send the sensor-captured data between
    the subscriber (farmers) and publisher (SP). The mosquito broker is configured
    to function as a broker on Raspberry Pi system. An instance is created on broker
    with the port number. The topic with name as “IrrigationFertigation” is created.
    The subscribers connect to the broker using this topic. The message to “ON” the
    irrigation/fertigation unit is sent using this topic. The Wireshark tool is used
    to capture the packet information. The filter is applied to compare the packet
    length during transmission using “http” and “mqtt” protocol. The area covered
    with blue represents the packet length for HTTP, and the red color presents the
    packet length for MQTT as shown in Fig. 2. The other lightweight protocol is CoAP
    (Constrained Application Protocol) used for power-constrained devices. In Fig.
    3, the average, minimum, and maximum packet length of non-lightweight protocol
    – Hyper Text Transfer Protocol (HTTP) – and lightweight protocol (MQTT) is represented.
    In Fig. 4, the round-trip time comparison for Cloud IoT and Fog IoT architecture
    is presented. Fig. 2 Comparison of packet length for HTTP and MQTT protocol Full
    size image Fig. 3 Packet length for lightweight protocol and non-lightweight protocol
    Full size image Fig. 4 RTT comparison of Fog IoT and Cloud IoT architecture Full
    size image 7 Conclusion The Fog-enabled IoT architecture proposed reduces the
    round-trip time as the edge devices are closer to the sensor devices. The case
    study presented benefits the farmer to deploy precision agriculture techniques
    in the farm for increasing the crop yield. This model could be scaled to the entire
    rural area. The lightweight protocol is selected for service providing, because
    it aids in lowering the latency and achieving higher throughput. References S.
    Rajeswari and et al., “A smart agricultural model by integrating IoT, mobile and
    cloud-based big data analytics”, 2017 International Conference on Intelligent
    Computing and Control (I2C2), Coimbatore, 2017, pp. 1–5. Google Scholar   A. Khattab
    and et al., “Design and implementation of a cloud-based IoT scheme for precision
    agriculture,” 2016 28th International Conference on Microelectronics (ICM), Giza,
    2016, pp. 201–204. Google Scholar   S. Roy et al., “IoT, big data science & analytics,
    cloud computing and mobile app based hybrid system for smart agriculture,” 2017
    8th Annual Industrial Automation and Electromechanical Engineering Conference
    (IEMECON), 2017, pp. 303–304, https://doi.org/10.1109/IEMECON.2017.8079610. W.
    R. Heinzelman and et al., “Energy-efficient communication protocol for wireless
    microsensor networks,” Proceedings of the 33rd Annual Hawaii International Conference
    on System Sciences, Maui, HI, USA, 2000, pp. 10 pp. vol.2. Google Scholar   P.
    R. Deshmukh and D. Bhalerao, “An implementation of MQTT through the application
    of warehouse management system for climacteric fruits and vegetables”, 2nd International
    Conference on Communication and Electronics Systems (ICCES), Coimbatore, 2017,
    pp. 844–849. Google Scholar   J. Velez and et al., “IEEE 1451-1-6: Providing common
    network services over MQTT,” 2018 IEEE Sensors Applications Symposium (SAS), Seoul,
    2018, pp. 1–6. Google Scholar   M. M. Raikar and et al., “Blend of Cloud and Internet
    of Things (IoT) in agriculture sector using light weight protocol”, 2018 IEEE
    ICACCI, Bangalore. Google Scholar   M. M. Raikar, P. Desai, M. Vijayalakshmi and
    P. Narayankar, “Augmenting Cloud concepts learning with Open source software environment,”
    2018 International Conference on Advances in Computing, Communications and Informatics
    (ICACCI), Bangalore, 2018, pp. 1405–1411. https://doi.org/10.1109/ICACCI.2018.8554826
    M. M. Raikar, P. Desai, V. M and P. Narayankar, “Upsurge of IoT (Internet of Things)
    in engineering education: A case study,” 2018 International Conference on Advances
    in Computing, Communications and Informatics (ICACCI), Bangalore, 2018, pp. 191–197.
    https://doi.org/10.1109/ICACCI.2018.8554546 N. Kaur and S. K. Sood, “An Energy-Efficient
    Architecture for the Internet of Things (IoT),” in IEEE Systems Journal, vol.
    11, no. 2, pp. 796–805, June 2017. https://doi.org/10.1109/JSYST.2015.2469676.
    Farzad Kiani, “A Survey on Management Frameworks and Open Challenges in IoT,”
    Wireless Communications and Mobile Computing, vol. 2018, Article ID 9857026, 33
    pages, 2018. https://doi.org/10.1155/2018/9857026. A. Zanella, N. Bui, A. Castellani,
    L. Vangelista and M. Zorzi, “Internet of Things for Smart Cities,” in IEEE Internet
    of Things Journal, vol. 1, no. 1, pp. 22–32, Feb. 2014. https://doi.org/10.1109/JIOT.2014.2306328
    Izal, Mikel et al. “Computation of Traffic Time Series for Large Populations of
    IoT Devices” Sensors (Basel, Switzerland) vol. 19, 1 78. 26 Dec. 2018, https://doi.org/10.3390/s19010078.
    M. M. Raikar and S. M. Meena, “SSH brute force attack mitigation in Internet of
    Things (IoT) network: An edge device security measure,” 2021 2nd International
    Conference on Secure Cyber Computing and Communications (ICSCCC), 2021, pp. 72–77,
    https://doi.org/10.1109/ICSCCC51823.2021.9478131. M. M. Raikar and M. S M, “Vulnerability
    assessment of MQTT protocol in Internet of Things (IoT),” 2021 2nd International
    Conference on Secure Cyber Computing and Communications (ICSCCC), 2021, pp. 535–540,
    https://doi.org/10.1109/ICSCCC51823.2021.9478156. B. Martinez, M. Montón, I. Vilajosana
    and J. D. Prades, “The Power of Models: Modeling Power Consumption for IoT Devices,”
    in IEEE Sensors Journal, vol. 15, no. 10, pp. 57775789, Oct. 2015. https://doi.org/10.1109/JSEN.2015.2445094.
    A. Ikpehai, B. Adebisi and K. Anoh, “Effects of Traffic Characteristics on Energy
    Consumption of IoT End Devices in Smart City,” 2018 Global Information Infrastructure
    and Networking Symposium (GIIS), Thessaloniki, Greece, 2018, pp. 1–6. https://doi.org/10.1109/GIIS.2018.8635744.
    Kurose, J. F., & Ross, K. W. (2001). Computer networking: A top-down approach
    featuring the Internet. Boston: Addison-Wesley. Google Scholar   Download references
    Author information Authors and Affiliations K. L. E. Technological University,
    Hubballi, India Meenaxi M. Raikar & Meena S M Corresponding author Correspondence
    to Meenaxi M. Raikar . Editor information Editors and Affiliations Dept. of Computer
    Science & Engineering, Indian Institute of Technology Patna, Patna, Bihar, India
    Rajiv Misra Cardiff University, Cardiff, UK Rana Omer Dept. of EE Engineering,
    University of London, London, UK Muttukrishnan Rajarajan Dept. of ECE, National
    University of Singapore, Singapore, Singapore Bharadwaj Veeravalli Dept. of Computer
    Science, Central University of Rajasthan, Tehsil Kishangarh, Rajasthan, India
    Nishtha Kesswani Dept. of CSE, Indian Institute of Information Technology, Kota,
    Jawahar Lal Nehru Marg, Rajasthan, India Priyanka Mishra Rights and permissions
    Reprints and permissions Copyright information © 2023 The Author(s), under exclusive
    license to Springer Nature Switzerland AG About this paper Cite this paper Raikar,
    M.M., S M, M. (2023). Fog Computing-Enabled Internet of Things for Resource Optimization.
    In: Misra, R., Omer, R., Rajarajan, M., Veeravalli, B., Kesswani, N., Mishra,
    P. (eds) Machine Learning and Big Data Analytics. ICMLBDA 2022. Springer Proceedings
    in Mathematics & Statistics, vol 401. Springer, Cham. https://doi.org/10.1007/978-3-031-15175-0_27
    Download citation .RIS.ENW.BIB DOI https://doi.org/10.1007/978-3-031-15175-0_27
    Published 07 June 2023 Publisher Name Springer, Cham Print ISBN 978-3-031-15174-3
    Online ISBN 978-3-031-15175-0 eBook Packages Mathematics and Statistics Mathematics
    and Statistics (R0) Share this paper Anyone you share the following link with
    will be able to read this content: Get shareable link Provided by the Springer
    Nature SharedIt content-sharing initiative Publish with us Policies and ethics
    Download book PDF Download book EPUB Sections Figures References Abstract Introduction
    State of the Art in Fog-Enabled IoT Services Fog Computing-Enabled IoT Architecture
    Energy Model for the Fog IoT Devices Distance Between Nodes in Fog IoT Result
    Analysis Conclusion References Author information Editor information Rights and
    permissions Copyright information About this paper Publish with us Discover content
    Journals A-Z Books A-Z Publish with us Publish your research Open access publishing
    Products and services Our products Librarians Societies Partners and advertisers
    Our imprints Springer Nature Portfolio BMC Palgrave Macmillan Apress Your privacy
    choices/Manage cookies Your US state privacy rights Accessibility statement Terms
    and conditions Privacy policy Help and support 129.93.161.222 Big Ten Academic
    Alliance (BTAA) (3000133814) - University of Nebraska-Lincoln (3000134173) © 2024
    Springer Nature'
  inline_citation: Raikar & S M, 2023
  journal: Springer proceedings in mathematics & statistics
  limitations: The paper mainly focuses on the architecture and benefits of using
    Fog computing for IoT in precision agriculture, but it does not provide detailed
    information on specific data types collected or their utilization in irrigation
    management. Additionally, it does not discuss the challenges or limitations of
    implementing such a system in real-world scenarios.
  pdf_link: null
  publication_year: 2023
  relevance_score: 0.8
  relevance_score1: 0
  relevance_score2: 0
  title: Fog Computing-Enabled Internet of Things for Resource Optimization
  verbatim_quote1: '"The Fog-enabled IoT architecture proposed reduces the round-trip
    time as the edge devices are closer to the sensor devices. The case study presented
    benefits the farmer to deploy precision agriculture techniques in the farm for
    increasing the crop yield. This model could be scaled to the entire rural area."'
  verbatim_quote2: '"The lightweight protocol is selected for service providing, because
    it aids in lowering the latency and achieving higher throughput."'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.1007/s12083-021-01191-6
  analysis: The paper introduces the concept of Flying Edge computing, a UAV-based
    platform that acts as an edge node and can be deployed in remote or harsh environments.
    It operates in a distributed manner, moving between edge nodes to provide computing
    resources and services, particularly for smart agriculture applications. The paper
    highlights the benefits of Flying Edge computing compared to traditional edge
    computing, cloud computing, and other techniques. It presents a system architecture,
    discusses potential configurations, and evaluates the performance of a Flying
    Edge prototype through simulation and lab tests. The results demonstrate the effectiveness
    of the proposed computational mechanism for providing services to IoT devices,
    especially in terms of latency and resource utilization.
  authors:
  - Mohammad Ammad Uddin
  - Muhammad Ayaz
  - Ali Mansour
  - El‐Hadi M. Aggoune
  - Zubair Sharif
  - Imran Razzak
  citation_count: 22
  full_citation: Uddin, M. A., Ayaz, M., Mansour, A., et al. Cloud-connected flying
    edge computing for smart agriculture. Peer-to-Peer Netw. Appl. 14, 3405–3415 (2021).
    https://doi.org/10.1007/s12083-021-01191-6
  full_text: '>

    Your privacy, your choice We use essential cookies to make sure the site can function.
    We also use optional cookies for advertising, personalisation of content, usage
    analysis, and social media. By accepting optional cookies, you consent to the
    processing of your personal data - including transfers to third parties. Some
    third parties are outside of the European Economic Area, with varying standards
    of data protection. See our privacy policy for more information on the use of
    your personal data. Manage preferences for further information and to change your
    choices. Accept all cookies Skip to main content Log in Find a journal Publish
    with us Track your research Search Cart Home Peer-to-Peer Networking and Applications
    Article Cloud-connected flying edge computing for smart agriculture Published:
    07 June 2021 Volume 14, pages 3405–3415, (2021) Cite this article Download PDF
    Access provided by University of Nebraska-Lincoln Peer-to-Peer Networking and
    Applications Aims and scope Submit manuscript M. Ammad Uddin, Muhammad Ayaz, Ali
    Mansour, el-Hadi M. Aggoune, Zubair Sharif & Imran Razzak   967 Accesses 22 Citations
    Explore all metrics Abstract Due to recent advancements and the success of versatile
    mobile applications, more and more services around the globe are being moved to
    the cloud. As a result, its limitations have become more evident. The major issues
    that cloud-based applications face include large latency, bottlenecks because
    of central processing, compromised security, and lack of offline processing. The
    drawbacks of cloud computing are reduced by fog and edge computing, where data
    are processed near the places where it is generated—at network edges or fog nodes—most
    importantly in a distributed way. Smart agriculture is an approach based on the
    Internet of Things (IoT) where cloud computing is not an option as the internet
    is usually not available at remote sites. In addition, pure edge computing also
    is not practical, as most sensor nodes are very small and they do not have enough
    computing power. Intermediate fog computing also is not a good choice, as fixed
    fog nodes (getaway nodes) do not work well with high node fluctuation caused by
    bad weather or harsh conditions. Considering these issues and limitations, we
    have proposed the idea of flying edge computing where an unmanned aerial vehicle
    (UAV) acts as an edge-computing machine. This can be an ideal solution for smart
    agriculture, given the size and remoteness of many agricultural areas. This technique
    can be called “wind or breeze computing” because the data are “blown” or moved
    by the current of computing. The Flying-Edge offers fast deployment of edge facilities
    in challenging locations and it can be a major step to accomplish the goal of
    IoT-based smart agriculture. Similar content being viewed by others Enabling Edge
    Computing in an IoT-Based Weather Monitoring Application Chapter © 2020 Computing
    paradigms for smart farming in the era of drones: a systematic review Article
    18 November 2023 UAV and Fog Computing for IoE-Based Systems: A Case Study on
    Environment Disasters Prediction and Recovery Plans Chapter © 2020 1 Introduction
    The agriculture sector faces continuous pressure to feed the population of over
    9 billion that is expected by 2050 amid challenges like climate change and the
    limited availability of arable land. To address this situation, scientists and
    researchers have suggested augmenting this sector with modern technologies including
    the Internet of Things (IoT) and unmanned aerial vehicles (UAVs) [1]. For example,
    IoTs provide updates about crop health, which helps farmers make the right decision
    at the right time. Precision agriculture is all about collecting the right data
    at the right time so that the use of resources can be optimized by considering
    the requirements of every inch of farmland. To make agriculture sustainable using
    the IoT has moved to the forefront of various agricultural operations. Moreover,
    UAVs are being used for various purposes in agriculture like monitoring, aerial
    sensing, tracking, data collection, communication, and security. UAVs, more precisely
    called flying-robots, are used in a wide range of applications where they often
    act as the first responder because of their fast, cost-effective, and safe deployment
    capabilities [2,3,4]. Further, with improved technology and facilities like three-dimensional
    maneuverability, UAVs are playing the crucial role of airborne base stations in
    almost all emerging networks. Because of their involvement in a wide range of
    daily applications, UAVs have become the best candidates to achieve the goal of
    precision farming [5]. Due to these capabilities, UAVs can be used throughout
    the life cycle of crops in such functions as soil health inspections [6], plantation
    [7], plant counting [8], crop health monitoring [9] [10], irrigation, spraying
    fertilizers and pesticides [11], and estimating crop yield. This technology has
    become the point of interest for all the stakeholders related to agriculture—including
    farmers, agronomists, crop insurers, and researchers—because of its suitability
    and advanced functionalities. These include the variety of models, longer flight
    times, greater payload capacities, and the ability to fly in varying conditions.
    In this article UAVs are proposed as an option to overcome the wide range of challenges
    from remote agriculture: They need to cover large geographical areas. A wide range
    of sensors and other devices are needed to monitor various parameters in this
    highly heterogeneous environment. They need to operate in remote locations, where
    sensors operate unattended. Connecting the sensors is a challenge because of unreliable
    and fluctuating communications. Some parameters must report in real-time. Many
    parameters require scalable data storage and processing capabilities. In this
    article, UAVs provide communication and data collection service to IoT nodes.
    Once data are collected, the next question is where to process it and what computation
    model is best suitable to provide the required services to the IoT nodes. For
    instance, cloud services can be used to access information from predictive analysis
    institutes so farmers apply products according to their specific requirements.
    However, for critical IoT-based agriculture applications to operate in such challenging
    areas, they need a reliable communication medium between the deployed objects
    and processing devices, which cannot be guaranteed in large and remote areas.
    Under these circumstances, cloud computing is not a good option because the internet
    may not be available in wide agriculture fields [12]. Furthermore, so-called fog
    computing also does not fit well since fog nodes are difficult to fix in harsh
    environments where node fluctuations are often. Most importantly, when we talk
    about specific applications in agriculture, edge computing may suffer from the
    fact that most nodes are very small, and they might not have sufficient processing
    capabilities. The need for scalability, economy, and node updates can generate
    more challenges. In short, in large farming areas where no reliable communication
    network is available to connect a large number of sensors to provide timely data,
    it is difficult to use existing fog and edge computing platforms. Considering
    the challenge, this paper presents the idea of a Flying-Edge, a UAV-based computing
    platform that aims to fulfill the requirements of smart agriculture. Flying Edge
    platforms, which can comprise one or multiple UAVs, offer the computing capabilities
    of IoT applications operating in remote locations. The proposed platform is highly
    dynamic and flexible, so it can be deployed and can collect data quickly. Most
    importantly, it can be used in tough terrains like the desert and hilly areas,
    removing the barriers to smart agriculture in such locations. The proposed edge
    platform builds an IoT network to collect crop data that will then be used to
    analyze crop health so, ultimately, the farmer can take timely smart actions.
    The rest of the paper is organized as follows. Section 2 includes a short background
    of mobile edge computing. Section 3 provides the details of the proposed platform
    along with all the design and functionalities it can perform. Section 4 evaluates
    the proposed idea and compares the results of different parameters while, Section
    5 presents concluding remarks and thoughts for future study. 2 Related work Using
    mobile edge computing is not new. Various authors have proposed mobile systems
    that offer computing facilities. Prominent efforts include mobile fog computing
    [13] [14], mobile cloud computing [15], and mobile edge computing [16]. However,
    these platforms work differently from the proposed idea of flying edge computing.
    The system proposed in [13] offers mobile edge services from a fixed machine.
    It enables integrating mobile devices such as smartphones and vehicles to the
    cloud, but only from a certain geographical area. The important thing about that
    work is that it offers low-latency with the facility of mobility and location
    awareness. Further, [15] [17] proposes mobile cloud computing that offers an infrastructure
    where both data storage and data processing occur in the cloud to support mobile
    devices. In that approach, mobile cloud computing frees mobile devices from storing
    large data and conducting heavy processing. In [13], mobile edge computing extends
    cloud computing capabilities at the edge of the cellular network. Different services
    with low latency can be provided to smartphones and other applications that rely
    on cellular communications. Using UAVs in smart agriculture also is not new. These
    flying robots are used in many ways. Authors in [18] present a hierarchical structure
    based on the collaboration between the UAVs and associated wireless sensors for
    crop monitoring in precision agriculture. That integration of UAVs with ground
    sensors and IoT applications proved to be a robust and efficient solution for
    data collection, control, analysis, and decisions in such specialized applications.
    Key advantages lay in online data collection and relaying the data to a central
    monitoring point, while effectively managing network load and latency through
    optimized UAV trajectories and in situ data processing. Two important aspects
    of the collaboration were considered: designing the UAV trajectories for efficient
    data collection and implementing effective data processing algorithms (consensus
    and symbolic aggregate approximation) at the network level to transmit the relevant
    data. Considering the worth of Information and Communications Technology (ICT)
    for smart agriculture, researchers have begun to use edge computing to enhance
    crop production. In a similar effort in [19], the authors proposed a data link
    management solution based on mobile edge computing (MEC) to monitor water requirements
    for agriculture. The results showed that the scheme realizes the network and intelligence
    of agricultural water monitoring system management, and it has a broad market
    prospect. Edge computing plays an important role in smart agriculture, and it
    can be considered an ideal paradigm because of features like its ability to operate
    in remote locations, cover large areas, endure hostile conditions, provide sufficient
    bandwidth, and address connectivity issues. Collecting data at the right time
    and then performing the right steps for a given situation is possible only by
    using edge computing. So, it is crucial for agriculture. Edge computing can be
    the appropriate choice whenever there are connectivity issues. According to the
    proposal in [20], sensors and edge devices collect data from the monitoring area
    and send the data to an edge node. The node conducts a preprocess analysis of
    the data needed then sends the outcome to a server. The server collects and accumulates
    the results to predict and estimate the total harvest yield. By using this framework
    many decisions can be taken according to circumstances. Authors in [21] focus
    on an efficient solution for collecting data and exploiting tasks using edge computing
    for smart agriculture, global food security, and the pervasive issue of internet
    access. Further, [22] presents a platform that can manage the minerals for agriculture
    using saline water. It relies on transferable low-cost hardware which operates
    with edge computing to interact with crop sensors and devices to collect the data
    and perform atomic control actions in real-time monitoring scenarios. In all these
    studies, various features and services are provided to mobile devices to integrate
    with the cloud. However, they rely on fixed locations, such as stationary fog
    machines, fixed wireless stations, or fixed cellular towers. By contrast, Flying
    Edge offers these facilities from a mobile device instead of using only stationary
    devices. 3 Proposed flying edge computing The traditional model has been to use
    cloud computing to acquire and process data from the edge to offer useful services.
    Large cloud data centers provide different services (computing, platform, security,
    and storage) to edge devices through high bandwidth connectivity. Two key challenges
    emerge with this hub-and-spoke model. Public cloud data centers are globally distributed,
    but they are typically limited to one or a few per country (depending on its size).
    The network distance from the edge to the cloud can result in a long round trip
    time (RTT) in the order of thousands of milliseconds. For latency-sensitive cloud
    applications, this may compromise their performance. To overcome this, fog, mist,
    and edge computing have been introduced as extensions of cloud networks, which
    are collections of servers comprising a distributed network. Cloud, fog, and mist
    computing are also known as wet computing in the literature. The difference between
    them is the degree of distribution of services from the internet cloud to edge
    devices. We are introducing a new concept called Flying Edge computing (FEC).
    In contrast to previous forms of computing, we name it “dry” computing because
    data are blown along and dried by with the current of the computing wind. The
    speed and direction of the wind also matter. The faster the speed, the more the
    throughput. At slower speeds, a network is more tightly squeezed to collect the
    data. 3.1 Data evaporation UAV activates ground sensor nodes and provides them
    local computation, database, and communications infrastructure services. In contrast
    to typical fixed-edge computing machines installed near or inside the edge node,
    the UAV acts like a flying edge that moves between edge nodes to provide them
    the desired local and global services. Typical cloud, fog, and mist computing
    are called wet computing, but for Flying Edge we name it dry, wind, or breeze
    computing where data are evaporated from the sensor node to the air and collected
    by a UAV. UAV generates a computing wind in its vicinity, and data are evaporated
    (extracted from sensors) with the current of computing (movement of UAV). The
    speed of the UAV is taken as the current of computing wind, while several UAVs
    act like wind temperature. The more the UAVs, the faster the evaporation process
    (more throughput). Fast-moving UAVs produce shorter clusters with fewer sensor
    nodes, so slowing the computing wind ensures that the sensor nodes are squeezed
    well. We have taken agriculture in the Kingdom of Saudi Arabia (KSA) as a case
    study. Crops are mostly grown in circular farms to save water. Our contribution
    is to modernize the KSA agriculture with state-of-the-art technologies to monitor
    crop health so resources can be managed tightly, especially the maximal use of
    water. We map flying edge computing with the perspective of KSA agriculture. Hundreds
    of crop fields are dispersed in a very large and remote area where there is no
    fixed communications infrastructure. It is assumed that all fields are equipped
    with a large number of sensors that monitor crops, soil, and environmental parameters
    at the same time. However, predefined network topologies (cluster heads, communication
    routes) are not possible because of the high fluctuation of sensor nodes caused
    by harsh water. In this scenario, cloud computing does not fit well as IoT devices
    do not have cloud access. In this presentation, a flying edge machine (UAV) moves
    in a predefined path. As it blows the computing wind, the underlying sensors form
    a cluster in the direction of the wind, and they choose a Cluster Head (CH) dynamically.
    As a result, the data are evaporated from CH to UAV, as shown in Fig. 1. Fig.
    1 Tabuk region KSA agriculture farms and proposed flying edge computing Full size
    image 3.2 Comparison of flying edge computing with existing methods A comparison
    of flying edge computing with other technologies, including cloud, fog, mist,
    and edge computing, is shown in Table 1 and represented in Fig. 2. Table 1 Comparison
    of different computing techniques Full size table Fig. 2 Similarities and differences
    of computing techniques Full size image As mentioned above, the Flying Edge is
    a UAV-based platform that acts as an edge node. Most importantly, the acting edge
    node can be reallocated to different locations where various sensors or devices
    need some edge node to complete certain IoT tasks. Moreover, it can provide the
    facility of a gateway to link or integrate IoT services and cloud computing. The
    Flying Edge can be equipped with resources like processors, storage facilities,
    communication devices, and an edge computational platform. This edge platform
    can execute several services to support IoT applications required for smart agriculture.
    One possible configuration for flying edge computing is shown in Fig. 3. In that
    figure, a UAV with edge computing facilities can move in any area where IoT services
    are required. It provides a set of services like low latency to the IoT applications
    in that area while it enables the integration of the IoT applications and the
    cloud. Fig. 3 Flying Edge supporting the smart agriculture Full size image The
    Flying Edge can facilitate smart agriculture based on IoT applications. Major
    opportunities that it can provide are: Fast deployment: because of its nature,
    the Flying Edge can be deployed at remote locations to facilitate IoT services.
    It is a turnkey system that can be used even where there is no communications
    infrastructure. Scalability: the system can be upgraded or enhanced in terms of
    coverage area, number of sensing devices, number of UAVs operated, and services
    provided. Flexibility: the system is flexible enough to adapt to any change in
    applications, required services, or the geography of the monitoring area. Location
    awareness: location services are provided by the flying edge machine, so IoT nodes
    do not require a GPS device. Power effectiveness: this scheme is very power efficient
    for end nodes (IoT nodes), as most of the services that require computation are
    provided by flying edge robots (UAVs). Because the Flying Edge can be deployed
    in an area where IoT devices are already deployed, most of the communication between
    these IoT devices and UAV is done through a personal area network (PAN) such as
    IEEE 802.15.4 (Zigbee) and 801.15.1 (Bluetooth). Both protocols are characterized
    by lower bandwidths and shorter communication ranges. However, they also need
    low energy during the communication phase. Depending on the requirements, communication
    can be done through alternative protocols that support longer ranges like a local
    area network (LAN) such as IEEE 802.11 (Wi-Fi). On the other hand, all the communication
    between the Flying Edge and the cloud is done through protocols that are commonly
    used for wide area networks (WANs) including IEEE 802.16 (WiMAX) and cellular.
    The choice of communications medium and protocol depends on the nature of the
    application and its location. 3.3 Proposed system architecture The proposed system
    has two components: an edge device and the Flying Edge computing machine, as shown
    in Fig. 4. The edge device (sensor or actuator) can get services from a UAV through
    a services request interface. Most of the computational services required by the
    IoT are provided by the local service response module, which is connected to several
    services built into the flying machine. In rare cases, the IoTs might require
    global services from the cloud, and they will be granted through a global services
    response module. Fig. 4 Flying Edge computing architecture Full size image 3.4
    Proposed system models Mobile devices and Internet-of-things (IoT) have been introduced
    in our lives very rapidly. They have brought ease to our work, but they also raised
    new challenges that needed cloud-based solutions including i) the need to transfer
    huge amounts of data to the cloud, ii) high communication latencies, and iii)
    the inability of this model to respond in some domains that require a rapid reaction
    to events. Different computing techniques like cloud, fog, and mist/edge computing
    have been introduced to address these issues and provide three basic services
    to the IoT devices: Infrastructure as a Service (IaaS), “Platform as a Service
    (PaaS), and Software as a Service (SaaS). The basic difference between these techniques
    is the layer in the network hierarchy from which the service is provided. This
    means the distance between the services and the source of data, as shown in Fig.
    5. In cloud computing, all the services are provided from the cloud (a central
    location) while fog computing is a distributed computing technique in which services
    are provided in network fabrics. In edge or mist computing, processing and services
    are provided near the end node (the source of data). Fig. 5 Typical cloud-to-edge
    computing hierarchy Full size image A typical computing hierarchy is shown in
    Fig. 5. As far as WSN is involved, many factors (lack of a communication link,
    limited processing capabilities, insufficient power) may restrict the use of any
    kind of computing technique. In such conditions, a UAV can replace any of the
    computing layers. In this article, we introduce four basic types of UAV replacement:
    1- UAV as a flying cloud 2- UAV as a flying fog 3- UAV as a flying edge 4- A swarm
    of UAVs as a distributed services provider 3.4.1 UAV as a flying cloud This configuration
    is applicable in a scenario where all the ground sensing nodes can communicate
    with each other but do not have access to the outer world (no internet). This
    type of scenario is applicable in battlefields, disaster areas, wildlife habitats,
    and remote farm fields. As all sensors are connected with each other, they maintain
    their local network in terms of clusters and routes independently. Local decisions
    are made either at the edge or the fog layer. Global services (data collection,
    localization, security, or software) and decisions are provided by the UAV as
    a Flying Cloud Machine (FCM) on a demand basis (see Fig. 6). Fig. 6 UAV a Flying
    cloud machine Full size image 3.4.2 UAV as a flying fog In this configuration,
    field sensors are equipped with local services (network and storage) through edge
    nodes. The UAV provides only communication services as a flying fog machine (FFM)
    to approach the cloud layer where all global services exist. FFM provides a bridge
    between the edge layer and the cloud layer, as shown in Fig. 7. Fig. 7 Flying
    fog computing Full size image 3.4.3 UAV as a flying edge In this scheme, UAV provides
    computation and services to the IoT nodes by visiting them, and it provides services
    and computation close to the data source. It helps to improve latency and bandwidth,
    and it also enhances the network life by improving battery utilization of end
    nodes. All the sensors’ nodes are dump nodes. Their functionality is limited to
    sense and log parameters from the environment only. All the services (clustering,
    network, storage) and computation are provided to them by a UAV. If the UAV cannot
    fulfill a demanded service, it can render it from the cloud. A flying edge machine
    (FEM) is shown in Fig. 8. Fig. 8 Flying edge computing Full size image 3.4.4 UAV
    as a distributed flying edge machine A coordinated swarm of UAVs can provide edge
    services as shown in Fig. 9. Different services like network, storage, and localization
    are provided by separate UAVs. Hence each service will be provide by a specialized
    flying machine which will enhance the provided quality of service, throughput,
    and data collection. Swarm of UAVs can also work in a coordinated way such that
    they can share or take over the responsibilities if any one fails, distracted
    or power exhausted. This model will provide robust solutions in hardship conditions.
    Fig. 9 Distributed flying edge computing machine Full size image 4 Simulation
    and results A Flying Edge prototype was implemented using a distributed Java agent
    environment. This environment provides a middleware infrastructure that enables
    the implementation of different distributed programming models and advanced platform
    services for distributed heterogeneous environments. These heterogeneous environments
    may comprise multiple heterogeneous nodes with different capabilities. In addition,
    this middleware infrastructure provides scalability solutions to deploy, operate,
    monitor, and control large-scale distributed applications. Each agent in the environment
    can provide runtime support to securely execute some code. An edge machine provides
    broker services, invocation services, and location-based services. There is also
    a mechanism that allows each edge broker to forward a service search request to
    other brokers if it does not have the requested service. Both local and remote
    service invocations also are implemented and added to the prototype implementation.
    For the IoT side, we used the Arduino board, which is open-source hardware for
    embedded systems. For this prototype implementation, the Arduino was used as the
    IoT payload subsystem—the onboard device requesting services. Some sensors were
    connected to the Arduino board, such as the DHT11 sensor to measure temperature
    and humidity. Some LEDs and a buzz were installed to represent actuators. In addition,
    we installed an Adafruit CC3000 Wi-Fi board to connect the Arduino to a local
    area network and the Flying Edge machine. The Arduino code was developed using
    the Arduino IDE with the Adafruit CC3000 library. Each IoT service was implemented
    with a RESTful API. At the UAV edge computing side, there is a service that represents
    each sensor or actuator attached to the Arduino. The primary function of these
    services is to map a call from the SOAP APIs to RESTful APIs. All sensor and actuator
    services are registered with the local broker. In addition, the global broker
    is periodically updated with these services. For the experiments, we used three
    computers, which represented the cloud, the Flying Edge machine, and the IoT node.
    In addition, we used WAN emulators among these machines to introduce the effects
    of using long distances and/or the internet to connect the machines. Experiments
    were conducted for four configurations: Call1: a local IoT service call responded
    by the distributed flying edge machine Call2: a local IoT service call responded
    by the flying edge machine Call3: a remote IoT service call responded by the cloud
    through a flying fog machine Call4: a remote IoT service call responded by the
    flying cloud The experiment was repeated for two types of services. The first
    was to get the current temperature (CurTemp) and the second was to turn on the
    LED (LEDon). The average results of 10 runs of multiple service calls are shown
    in Fig. 10. The recorded times for these calls do not include the service lookup
    times. The response times for all service calls are shown in Fig. 10. It is evident
    that flying edge shows best results in term of response time by adding the benefits
    of battery efficiency of end nodes. It is also analyzed that the services provided
    by flying fog machine or through flying fog machine gives same results and are
    better than cloud. Fig. 10 IoT service call response time Full size image The
    average service lookup times for three services are shown in Fig. 11. Local services
    were provided by the local network. Remote 1 services were provided by the flying
    machine UAV to the end node. Remote 2 services were provided by the cloud through
    flying machines. There is a big difference between Remote 1 and Remote 2 service
    lookup times. This means that flying computing machines (UAVs) can provide services
    to IoT devices in a much faster way. Fig. 11 IoT service lookup Full size image
    5 Conclusion In this research article, we proposed a new concept of a computation
    mechanism for IoT devices. The processing and the services will be provided to
    the end devices neither from central location (cloud) nor by end device itself.
    Both cloud and edge computing have different pros and cons ranging from bottlenecks
    to poor resource utilization. The proposed system fulfills the service demand
    very close to the point of data generation without using additional network resources
    (energy, memory, or processor). Our aim is to provide these services to the IoTs
    by using the Flying Edge machine. This means the computational machine itself
    goes closer to the data-generation node and provides the demanded services. The
    architecture of the proposed Flying Edge machine is introduced, and the performance
    of the system is evaluated through simulation and lab test bed. The results showed
    the effectiveness of the proposed computational mechanism. As a result, we can
    say this system is very suitable for implementation in the case study presented
    (agriculture) but it is not limited to that use. References Friha O, Ferrag MA,
    Shu L, Maglaras L, Wang X (Apr. 2021) Internet of things for the future of smart
    agriculture: a comprehensive survey of emerging technologies. IEEE/CAA J Autom
    Sin 8(4):718–752 Article   Google Scholar   Ammad Uddin M, Ayaz M, Aggoune EHM,
    Mansour A, Le Jeune D (2019) “Affordable broad agile farming system for rural
    and remote area,” IEEE Access, vol. 7 Mishra A, Gupta N, Gupta BB (2021) “Defense
    mechanisms against DDoS attack based on entropy in SDN-cloud using POX controller,”
    Telecommun. Syst Yu C, Li J, Li X, Ren X, Gupta BB (Feb. 2018) Four-image encryption
    scheme based on quaternion Fresnel transform, chaos and computer generated hologram.
    Multimed Tools Appl 77(4):4585–4608 Article   Google Scholar   Maddikunta PKR
    et al (2021) Unmanned aerial vehicles in smart agriculture: applications, requirements,
    and challenges. IEEE Sensors J:1–1 Ivushkin K et al (Mar. 2019) UAV based soil
    salinity assessment of cropland. Geoderma 338:502–512 Article   Google Scholar   Suab
    SA, Avtar R (2020) Unmanned aerial vehicle system (UAVS) applications in forestry
    and plantation operations: experiences in Sabah and Sarawak, Malaysian Borneo.
    In: Unmanned aerial vehicle: applications in agriculture and environment. Springer
    International Publishing, pp 101–118 Valente J, Sari B, Kooistra L, Kramer H,
    Mücher S (Dec. 2020) Automated crop plant counting from very high-resolution aerial
    imagery. Precis Agric 21(6):1366–1384 Article   Google Scholar   M. A. Uddin,
    A. Mansour, D. Le Jeune, M. Ayaz, and el-H. M. Aggoune, “UAV-Assisted Dynamic
    Clustering of Wireless Sensor Networks for Crop Health Monitoring,” Sensors, vol.
    18, no. 2, p. 555, Feb. 2018 Ammad-Uddin M, Mansour A, Le Jeune D, Aggoune EHM,
    Ayaz M (2016) “UAV Routing Protocol for Crop Health Management,” in 24th European
    Signal Processing Conference (EUSIPCO), pp. 1818–1822 Aggoune EH, Alwakeel S,
    Alwakeel M, Ammad-Uddin M (2014) “Wireless Sensor Networks with Dynamic Nodes
    for Water and Crop Health Management,” in Sensor Networks for Sustainable Development,
    CRC Press, pp. 27–40 El-Shamy AM, El-Fishawy NA, Attiya G, Mohamed MAA (2021)
    “Anomaly detection and bottleneck identification of the distributed application
    in cloud data center using software–defined networking,” Egypt. Informatics J
    Hong K, Lillethun D, Ramachandran U, Ottenwälder B, Koldehofe B (2013) “Mobile
    fog,” in Proceedings of the second ACM SIGCOMM workshop on Mobile cloud computing
    - MCC ‘13, p. 15 Stergiou CL, Psannis KE, Gupta BB (2020) IoT-based big data secure
    management in the fog over a 6G wireless network. IEEE Internet Things J:1–1 Dinh
    HT, Lee C, Niyato D, Wang P (Dec. 2013) A survey of mobile cloud computing: architecture,
    applications, and approaches. Wirel Commun Mob Comput 13(18):1587–1611 Article   Google
    Scholar   Ahmed A, Ahmed E (2016) “A survey on mobile edge computing,” in 2016
    10th International Conference on Intelligent Systems and Control (ISCO), 2016,
    pp. 1–8 Esposito C, Ficco M, Gupta BB (Mar. 2021) Blockchain-based authentication
    and authorization for smart city applications. Inf. Process. Manag 58(2):102468
    Article   Google Scholar   Chen X, Shi Q, Yang L, Xu J (Jan. 2018) ThriftyEdge:
    resource-efficient edge computing for intelligent IoT applications. IEEE Netw
    32(1):61–65 Article   Google Scholar   Milics G (2019) Application of UAVs in
    precision agriculture. In: International climate protection. Springer International
    Publishing, Cham, pp 93–97 Chapter   Google Scholar   Sethi P, Sarangi SR (2017)
    Internet of things: architectures, protocols, and applications. J Electr Comput
    Eng 2017:1–25 Article   Google Scholar   Li X, Ma Z, Zheng J, Liu Y, Zhu L, Zhou
    N (2020) An Effective Edge-Assisted Data Collection Approach for Critical Events
    in the SDWSN-Based Agricultural Internet of Things. Electronics 9(6):907 Article   Google
    Scholar   Zamora-Izquierdo MA, Santa J, Martínez JA, Martínez V, Skarmeta AF (Jan.
    2019) Smart farming IoT platform based on edge and cloud computing. Biosyst Eng
    177:4–17 Article   Google Scholar   Download references Acknowledgements The authors
    gratefully acknowledge the support of SNCS Research Center at the University of
    Tabuk, Saudi Arabia. Author information Authors and Affiliations Sensor Networks
    and Cellular Systems Research Center, University of Tabuk, Tabuk, Saudi Arabia
    M. Ammad Uddin, Muhammad Ayaz & el-Hadi M. Aggoune Lab STICC, ENSTA Bretagne,
    Brest, France M. Ammad Uddin, Muhammad Ayaz & Ali Mansour Department of CIS, Universiti
    Teknologi PETRONAS, Seri Iskandar, Perak, Malaysia Zubair Sharif School of Information
    Technology, Deakin University, Geelong, Victoria, Australia Imran Razzak Corresponding
    author Correspondence to M. Ammad Uddin. Additional information Publisher’s note
    Springer Nature remains neutral with regard to jurisdictional claims in published
    maps and institutional affiliations. This article is part of the Topical Collection:
    Special Issue on Security of Mobile, Peer-to-peer and Pervasive Services in the
    Cloud Guest Editors: B. B. Gupta, Dharma P. Agrawal, Nadia Nedjah, Gregorio Martinez
    Perez, and Deepak Gupta Rights and permissions Reprints and permissions About
    this article Cite this article Uddin, M.A., Ayaz, M., Mansour, A. et al. Cloud-connected
    flying edge computing for smart agriculture. Peer-to-Peer Netw. Appl. 14, 3405–3415
    (2021). https://doi.org/10.1007/s12083-021-01191-6 Download citation Received
    24 September 2020 Accepted 17 May 2021 Published 07 June 2021 Issue Date November
    2021 DOI https://doi.org/10.1007/s12083-021-01191-6 Share this article Anyone
    you share the following link with will be able to read this content: Get shareable
    link Provided by the Springer Nature SharedIt content-sharing initiative Keywords
    Smart agriculture Cloud computing Edge computing Unmanned aerial vehicles Security
    issues Use our pre-submission checklist Avoid common mistakes on your manuscript.
    Associated Content Part of a collection: Special Issue on Security of Mobile,
    Peer-to-peer and Pervasive Services in the Cloud Sections Figures References Abstract
    Introduction Related work Proposed flying edge computing Simulation and results
    Conclusion References Acknowledgements Author information Additional information
    Rights and permissions About this article Advertisement Discover content Journals
    A-Z Books A-Z Publish with us Publish your research Open access publishing Products
    and services Our products Librarians Societies Partners and advertisers Our imprints
    Springer Nature Portfolio BMC Palgrave Macmillan Apress Your privacy choices/Manage
    cookies Your US state privacy rights Accessibility statement Terms and conditions
    Privacy policy Help and support 129.93.161.222 Big Ten Academic Alliance (BTAA)
    (3000133814) - University of Nebraska-Lincoln (3000134173) © 2024 Springer Nature'
  inline_citation: null
  journal: Peer-to-Peer Networking and Applications
  limitations: The paper does not provide specific details on how the Flying Edge
    platform addresses data collection and integration in the context of different
    data types (e.g., soil moisture, canopy temperature, weather). While the paper
    mentions that the Flying Edge can provide services such as data processing and
    analysis, it does not delve into the specific algorithms or techniques used for
    these tasks. Additionally, the paper does not discuss the scalability and reliability
    of the Flying Edge platform when dealing with large amounts of data or in scenarios
    with high node fluctuation due to weather or harsh conditions.
  pdf_link: null
  publication_year: 2021
  relevance_score: 0.8
  relevance_score1: 0
  relevance_score2: 0
  title: Cloud-connected flying edge computing for smart agriculture
  verbatim_quote1: The Flying-Edge offers fast deployment of edge facilities in challenging
    locations and it can be a major step to accomplish the goal of IoT-based smart
    agriculture.
  verbatim_quote2: The system proposed in [13] offers mobile edge services from a
    fixed machine.
  verbatim_quote3: null
- DOI: https://doi.org/10.3390/drones5040148
  analysis: "This paper provides a comprehensive analysis of the current state and\
    \ future potential of real-time, automated irrigation management systems that\
    \ integrate Internet of Things (IoT) and machine learning (ML) technologies. Specifically,\
    \ the paper focuses on the role of unmanned aerial vehicles (UAVs) in these systems\
    \ and reviews the latest research and technological advancements in UAV-enabled\
    \ mobile edge-computing (MEC) architectures. The paper highlights the key issues\
    \ and challenges associated with implementing real-time, automated irrigation\
    \ management systems, including data collection and transmission, processing,\
    \ analysis, decision-making, and automated action. \n\nThe paper also discusses\
    \ the potential benefits of UAV-enabled MEC architectures for addressing these\
    \ challenges, such as improved connectivity, reduced latency, and increased energy\
    \ efficiency. Overall, the paper provides a valuable overview of the current state\
    \ and future potential of UAV-enabled MEC architectures for real-time, automated\
    \ irrigation management systems."
  authors:
  - Yassine Yazid
  - Imad Ez‐zazi
  - Antonio Guerrero-González
  - Ahmed El Oualkadi
  - Mounir Arioua
  citation_count: 46
  full_citation: '>'
  full_text: ">\ndrones\nReview\nUAV-Enabled Mobile Edge-Computing for IoT Based on\
    \ AI:\nA Comprehensive Review\nYassine Yazid 1,2,*, Imad Ez-Zazi 3\n, Antonio\
    \ Guerrero-González 2, Ahmed El Oualkadi 1\nand Mounir Arioua 1\n\x01\x02\x03\x01\
    \x04\x05\x06\a\b\x01\n\x01\x02\x03\x04\x05\x06\a\nCitation: Yazid, Y.; Ez-Zazi,\
    \ I.;\nGuerrero-González, A.; El Oualkadi,\nA.; Arioua, M. UAV-Enabled Mobile\n\
    Edge-Computing for IoT Based on AI:\nA Comprehensive Review. Drones\n2021, 5,\
    \ 148. https://doi.org/\n10.3390/drones5040148\nAcademic Editors: Vishal Sharma,\n\
    Abderrahmane Lakas, Mohammed\nAtiquzzaman, Omar Sami Oubbati,\nSahar Hoteit and\
    \ Taieb Znati\nReceived: 27 October 2021\nAccepted: 9 December 2021\nPublished:\
    \ 13 December 2021\nPublisher’s Note: MDPI stays neutral\nwith regard to jurisdictional\
    \ claims in\npublished maps and institutional afﬁl-\niations.\nCopyright: © 2021\
    \ by the authors.\nLicensee MDPI, Basel, Switzerland.\nThis article is an open\
    \ access article\ndistributed\nunder\nthe\nterms\nand\nconditions of the Creative\
    \ Commons\nAttribution (CC BY) license (https://\ncreativecommons.org/licenses/by/\n\
    4.0/).\n1\nLaboratory of Information and Communication Technologies (LabTIC),\
    \ National School of Applied Sciences\nof Tangier (ENSATg), Abdelmalk Essaadi\
    \ University, ENSA Tanger, Route Ziaten, Tangier BP 1818, Morocco;\naeloualkadi@uae.ac.ma\
    \ (A.E.O.); m.arioua@uae.ac.ma (M.A.)\n2\nDepartment of Automation, Electrical\
    \ Engineering and Electronic Technology, Universidad Politécnica de\nCartagena,\
    \ Plaza del Hospital 1, 30202 Cartagena, Spain; antonio.guerrero@upct.es\n3\n\
    National School of Applied Sciences of Fez (ENSAF), Sidi Mohamed Ben Abdellah\
    \ University, Fez BP 2626,\nMorocco; imad.ezzazi@usmba.ac.ma\n*\nCorrespondence:\
    \ y.yazid@uae.ac.ma\nAbstract: Unmanned aerial vehicles (UAVs) are becoming integrated\
    \ into a wide range of modern\nIoT applications. The growing number of networked\
    \ IoT devices generates a large amount of data.\nHowever, processing and memorizing\
    \ this massive volume of data at local nodes have been deemed\ncritical challenges,\
    \ especially when using artiﬁcial intelligence (AI) systems to extract and exploit\n\
    valuable information. In this context, mobile edge computing (MEC) has emerged\
    \ as a way to bring\ncloud computing (CC) processes within reach of users, to\
    \ address computation-intensive ofﬂoading\nand latency issues. This paper provides\
    \ a comprehensive review of the most relevant research works\nrelated to UAV technology\
    \ applications in terms of enabled or assisted MEC architectures. It details\n\
    the utility of UAV-enabled MEC architecture regarding emerging IoT applications\
    \ and the role of\nboth deep learning (DL) and machine learning (ML) in meeting\
    \ various limitations related to latency,\ntask ofﬂoading, energy demand, and\
    \ security. Furthermore, throughout this article, the reader gains\nan insight\
    \ into the future of UAV-enabled MEC, the advantages and the critical challenges\
    \ to be\ntackled when using AI.\nKeywords: UAVs; IoT; cloud computing; edge computing;\
    \ MEC; AI; review\n1. Introduction\nThe Internet of Things (IoT) paradigm is constantly\
    \ expanding to cover many ﬁelds\nand applications. IoT devices present many beneﬁts\
    \ for improving services in a broad\nrange of contexts. The number of connected\
    \ devices is forecasted to reach impressive\nheights in the coming years. According\
    \ to CISCO, more than 70 billion devices will be\nconnected by the end of 2025\
    \ [1,2]. Recently, unmanned aerial vehicles (UAVs), typically\nknown as drones,\
    \ have attracted considerable attention from academia and industrial\ncommunities\
    \ due to their excellent capabilities and attractive features. They promise to\n\
    bring an ideal contribution to the ﬁeld of IoT, based on their unique characteristics.\
    \ They\noffer elastic and ﬂexible mobile features, as required in many omnipresent\
    \ IoT applications,\nmaking their integration into wireless network communication\
    \ easy and feasible.\nMoreover, integrating embedded intelligent devices such\
    \ as cameras and sensors on\nUAVs offer many advantages when monitoring hostile\
    \ and unreachable environments.\nIn addition, they can potentially provide many\
    \ services in the context of modern IoT\ninterconnection, such as smart cities,\
    \ smart farming, smart factories, smart grids, and\nintelligent transportation.\
    \ The development of communication protocols and networks\nhas also improved the\
    \ tracking and maneuverability of drones to cover many application\nrequirements,\
    \ as well as their contribution as a critical component of the communication\n\
    network [3]. UAVs can also guarantee reliable connectivity in hostile areas with\
    \ limited\nDrones 2021, 5, 148. https://doi.org/10.3390/drones5040148\nhttps://www.mdpi.com/journal/drones\n\
    Drones 2021, 5, 148\n2 of 30\nor unavailable communication infrastructure. Typically,\
    \ UAVs can be deployed as aided\ncommunication networks by integrating them into\
    \ the peripheral network as ﬂying base\nstations (BSs) [4,5], relay nodes [6],\
    \ or terminal nodes [7]. Therefore, they act primarily as a\nmeans of enabling\
    \ ﬂexible communication services in remote areas when interconnections\nwith existing\
    \ networks are lost. To this end, UAVs can be used in edge-computing (EC),\nfog-computing\
    \ (FC), and as crucial equipment in cellular networks [8].\nIoT networks enable\
    \ comprehensive connectivity for many mobile users by enabling\nvarious emerged\
    \ application services (e.g., automatic surveillance, unmanned control\nvehicles\
    \ and object recognition). Centralized servers, such as cloud computing (CC)\n\
    facilities and data centers, generally process and analyze the generated data\
    \ by carrying out\ncomputational intelligence based on artiﬁcial intelligence\
    \ (AI). These centralized systems\nare quick to deploy, inexpensive to maintain,\
    \ and practical when data need to be centrally\ncontrolled. However, they are\
    \ mostly constrained by their high failure rate, security risks\nand access delay.\
    \ Data processing at the central level causes considerable time delays that\n\
    affect the overall system quality of service (QoS), especially regarding the response-time\n\
    requirement for latency-sensitive applications. Decentralized and distributed\
    \ systems have\nemerged to solve the issue of centralized system constraints.\
    \ The decentralized system relies\non servers that are supposed to store a copy\
    \ of the resources. Users in distributed systems\nhave equal access to data, yet\
    \ user rights can be enabled as necessary, and data ownership\ncan be shared efﬁciently.\
    \ Hardware and software resources are also allocated between\nusers, increasing\
    \ truthfulness, reducing component failure, and enhancing reliability.\nEC has\
    \ recently been introduced to provide intermediate devices between the data\n\
    generator and CC services. This reduces latency and provides efﬁcient bandwidth\
    \ uti-\nlization. However, due to their limited computing power and battery life,\
    \ mobile devices\nstruggle to provide these services. To this end, mobile edge\
    \ computing (MEC) solutions\nhave been employed to ameliorate the intensive computation\
    \ and ofﬂoading bottlenecks\nbetween end-nodes and centralized data servers [9].\
    \ They allow mobile devices to ofﬂoad\ntheir computation duties onto servers at\
    \ the edge of the IoT network, such as cellular BSs\nor access points. In contrast\
    \ to traditional CC, MEC servers can be close to end-users. As a\nresult, MEC\
    \ servers can deliver low latency and secure services, while saving energy for\n\
    mobile users.\nRecently, UAVs have been integrated as air–ground equipment to\
    \ fulﬁll the processing\nand storage needs at IoT network edges. As a promising\
    \ solution, they could provide ultra-\nlow latency support for latency-sensitive\
    \ applications, facilitate the distribution of big data\nprocessing and analysis,\
    \ improve the scalability and management of massive mobile con-\nnectivity, as\
    \ well as content caching and mobile delivery [10]. The advantage presented by\n\
    their ﬂexible mobility has facilitated the integration of UAVs with MEC services\
    \ to provide\nUAV-enabled MEC networks. UAV-enabled MEC is typically deployed\
    \ in unpredictable\nenvironments such as in wild, desert, and complex landscapes.\
    \ Furthermore, the computa-\ntion performance may be adapted based on the distance\
    \ that UAVs can smoothly control.\nThis combination of UAV technology with MEC\
    \ makes the system more advantageous\nand ﬂexible than traditional MEC systems,\
    \ which are constrained by high deployment\ncosts due to their ﬁxed architecture.\
    \ In addition, the integration of UAV-enabled MEC\nwith the most recent security\
    \ approaches, such as the blockchain structure, increases the\nsecurity level\
    \ [11]. The blockchain is a distributed ledger that gives a secure, immutable,\n\
    transparent, and trustworthy environment for the UAVs to store their data as a\
    \ transaction\nin a chain of blocks [12]. This is a viable solution to mitigate\
    \ the security and privacy issues\nrelated to UAV networks. Therefore, integrating\
    \ blockchain into UAVs ensures the MEC\nsystem’s trustworthiness with the additional,\
    \ advantageous features of automating data\ntransaction, decision-making, storage,\
    \ and veriﬁcation [13]. Therefore, UAVs can play a\ncrucial role in enabling MEC\
    \ capability in IoT applications. However, many critical issues\nhave yet to be\
    \ addressed to improve the performance of UAV-enabled MEC. Most of the\nimpairments\
    \ are related to drones as they are autonomous and battery-powered, with\nlimited\
    \ resources. Furthermore, given the broadcast nature of communications between\n\
    Drones 2021, 5, 148\n3 of 30\nground-based users and UAVs, many performance aspects\
    \ should be addressed, including\nsecurity, task ofﬂoading, energy consumption,\
    \ resource allocation, computing capacity, and\nuser latency performance under\
    \ various channel circumstances.\nSince this topic is revolutionary in the IoT\
    \ research ﬁeld, reviewing the current sci-\nentiﬁc achievements and technological\
    \ limitations of UAV-enabled MEC networks is of\nparamount importance. Furthermore,\
    \ the limits of existing surveys on UAV-enabled MEC\nin IoT applications have\
    \ motivated us to put forward a detailed review. This paper explores\nthe use\
    \ of UAVs in emerging IoT applications and the utility of both deep learning (DL)\n\
    and machine learning (ML) in UAV-enabled MEC systems. For instance, the authors\
    \ of [14]\nhave elaborated a review about the energy efﬁciency constraints related\
    \ to UAV-enabled\nMEC systems for IoT devices. Additionally, the authors of [15,16]\
    \ have presented a survey\nabout communication and networking technologies for\
    \ UAVs. The research work presented\nin [17] has addressed both fundamental and\
    \ recent advances of computation ofﬂoading\nin UAV-enabled MEC. However, only\
    \ a few of the challenges are mentioned in the above\nworks, including energy,\
    \ communication facilities, and limited resource allocation issues.\nIn this paper,\
    \ the most critical issues and challenges of UAV-enabled MEC based on AI are\n\
    accurately outlined and discussed.\nIndeed, there are several recent reviews about\
    \ the UAV-enabled MEC paradigm. How-\never, most of the previous reviews have\
    \ focused on UAV energy efﬁciency, communication\ntechnologies connecting various\
    \ UAVs, and computation ofﬂoading in UAV-enabled MEC.\nOur review considers a\
    \ more practical and recent scenario wherein massively generated\ndata need to\
    \ be processed and analyzed using AI algorithms for decision-making at the\nedge\
    \ of networks. This has not been considered in the previous works. Adopting AI\n\
    methods would affect all the requirements that have already been investigated,\
    \ such as\nenergy efﬁciency, communication technologies, processing capacity,\
    \ privacy and security,\nand the autonomy of UAV-enabled MEC. Almost all domains\
    \ are currently relying on AI\nto outperform the traditional systems and provide\
    \ decision-making systems. For instance,\nIndustry 4.0 has newly emerged as a\
    \ revolutionary paradigm in which intelligent and\nautonomous drones based on\
    \ AI would be the key element. However, the integration of\nautonomous UAVs based\
    \ on AI is not obvious in most practical cases. This is why UAV-\nenabled MEC\
    \ based on AI would enable many applications in the industry community to\ndeploy\
    \ their solutions, by cooperatively executing and processing the massive volumes\n\
    of conﬁdential data near the users at the edge of the network. Consequently, the\
    \ current\nreview highlights the most recent challenges and open issues of UAV-enabled\
    \ MEC based\non AI, considering their various architectures and applications.\
    \ We will discuss the most\nrecent related works on data processing at the edge,\
    \ based on AI, and their advantages and\ninconveniences regarding the UAV environment.\
    \ We will even emphasize the effect of AI\non energy efﬁciency, communication\
    \ technologies, processing capacity, and security when\nUAV-enabled MEC architecture\
    \ is considered. In addition, we propose a list of applications\nwith open issues\
    \ that have to be taken into account when considering a UAV-enabled MEC\narchitecture.\n\
    The rest of this paper is structured as follows. Section 2 gives an overview of\
    \ UAVs and\nhighlights some of their related applications. Section 3 focuses on\
    \ the possible opportunities\nenabled by UAVs, focusing on MEC servers. Section\
    \ 4 highlights the UAV-enabled MEC\nbased on AI. Section 5 lists signiﬁcant issues\
    \ and open research directions related to UAV-\nenabled MEC systems. Finally,\
    \ Section 6 presents a conclusion.\n2. UAV System Model\nRecently, there has been\
    \ an increase in customer demand for airborne intelligence\nmissions, which has\
    \ led to the design and development of various types of UAVs in various\nshapes\
    \ and ﬂight modes. This section highlights the different styles and characteristics\
    \ of\nUAVs and their application scenarios.\nDrones 2021, 5, 148\n4 of 30\n2.1.\
    \ UAVs Classiﬁcation\nDeploying a UAV network (known as swarms in IoT contexts)\
    \ is becoming a practical\nand necessary requirement for many applications. Various\
    \ UAVs are currently available\non the market, with distinctive features such\
    \ as supportable altitude, speed, and battery\nautonomy, for multiple applications.\
    \ Generally, the selection of any UAV model should\nfulﬁll many of the criteria\
    \ of the targeted application, such as QoS, energy capacity, envi-\nronmental\
    \ restrictions, and federal rules [18]. There are three types of UAVs: low-altitude\n\
    platforms (LAPs), high-altitude platforms (HAPs), and satellites. Since this work\
    \ focuses\non UAV-enabled MEC, UAVs are described based on many aspects.\nFigure\
    \ 1 categorizes UAVs into the LAPs category based on their type, size, range,\n\
    and type of rotors. Figure 2 shows the shape and form of three kinds of commercialized\n\
    UAVs: a rotary-wing drone (Figure 2a), a ﬁxed-wing drone (Figure 2b), and a ﬁxed\
    \ wing\nhybrid VTOL UAV (Figure 2c).\nautonomy, for multiple applications. Generally,\
    \ the selection of any UAV model should \nfulfill many of the criteria of the\
    \ targeted application, such as QoS, energy capacity, \nenvironmental restrictions,\
    \ and federal rules [18]. There are three types of UAVs: low-\naltitude platforms\
    \ (LAPs), high-altitude platforms (HAPs), and satellites. Since this work \nfocuses\
    \ on UAV-enabled MEC, UAVs are described based on many aspects.  \nFigure 1 categorizes\
    \ UAVs into the LAPs category based on their type, size, range, \nand type of\
    \ rotors. Figure 2 shows the shape and form of three kinds of commercialized \n\
    UAVs: a rotary-wing drone (Figure 2a), a fixed-wing drone (Figure 2b), and a fixed\
    \ wing \nhybrid VTOL UAV (Figure 2c). \nTypically, UAVs present unique characteristics,\
    \ being dynamic, agile, easy to repair, \neasy to deploy, and offering the potential\
    \ to provide various measurements wherever and \nwhenever required. They provide\
    \ a low-cost alternative for collecting and providing \ninformation to intelligent\
    \ systems that can undertake the necessary data analysis (e.g., \nreal-time image\
    \ or video analysis). UAVs will substantially promote the progress of \nfarming,\
    \ defense, insurance inspection, law enforcement, emergency assistance, pollution\
    \ \nmonitoring, disaster recovery, and package delivery. \nThe data are collected\
    \ remotely through controllable devices installed on UAVs, each \ntriggered via\
    \ the platform. The collected data are processed locally onboard the UAVs or \n\
    are offloaded to cloud servers, based on the required power. Deploying a practical\
    \ UAV-\nbased IoT framework requires an orchestrator platform that recognizes\
    \ various contextual \ninformation about UAVs, such as flight trajectories, IoT\
    \ equipment, and battery status. \n \nFigure 1. Classification of LAP UAVs. \n\
    \ \n \n(a) \n(b) \nLAP UAV classification\nSize\nMicro UAV\nMini UAV\nMedium \n\
    UAV\nLarge UAV\nRange\nMedium \nShort\nClose\nRotors\nTricopter\nQuadcopter\n\
    Hexacopter\nOctacopter\nLanding\nHTOL\nVTOL\nAerodynamics\nFixed wing\nFlapping\
    \ wing\nDucted fan\nMulti rotor\nType\nAircraft\nBalloon\nFigure 1. Classiﬁcation\
    \ of LAP UAVs.\nDrones 2021, 5, x FOR PEER REVIEW \n5 of 30 \n \n \n \n \n(a)\
    \ \n(b) \n \n(c) \nFigure 2. Examples of several types of UAV: (a) rotary-wing\
    \ drone, (b) fixed-wing drone, (c) fixed-\nwind hybrid vertical take-off and landing\
    \ (VTOL) drone (modified from [19]). \nTwo main UAV communication networks exist:\
    \ ad hoc UAV networks and UAV-\nassisted aided communication networks. The former\
    \ is characterized by a flexible \ntopology and self-organized architecture, while\
    \ the latter’s main feature comprises \nflexible scheduling at the edge side of\
    \ the network. \nUAVs can collect data massively by being equipped with sensors\
    \ of different sizes, \nforms, features, and capabilities. Many remote sensing\
    \ devices for airborne and satellite \nplatforms are now adopting miniature and\
    \ low-cost versions for UAV platforms, such as \nmultispectral, hyperspectral,\
    \ short/medium-wave range cameras (e.g., thermal imaging \ncamera), and light\
    \ LiDAR. Table 1 gives a list of the sensors and cameras integrated with \nFigure\
    \ 2. Examples of several types of UAV: (a) rotary-wing drone, (b) ﬁxed-wing drone,\
    \ (c) ﬁxed-\nwind hybrid vertical take-off and landing (VTOL) drone (modiﬁed from\
    \ [19]).\nTypically, UAVs present unique characteristics, being dynamic, agile,\
    \ easy to repair,\neasy to deploy, and offering the potential to provide various\
    \ measurements wherever\nand whenever required. They provide a low-cost alternative\
    \ for collecting and providing\ninformation to intelligent systems that can undertake\
    \ the necessary data analysis (e.g.,\nDrones 2021, 5, 148\n5 of 30\nreal-time\
    \ image or video analysis). UAVs will substantially promote the progress of\n\
    farming, defense, insurance inspection, law enforcement, emergency assistance,\
    \ pollution\nmonitoring, disaster recovery, and package delivery.\nThe data are\
    \ collected remotely through controllable devices installed on UAVs, each\ntriggered\
    \ via the platform. The collected data are processed locally onboard the UAVs\
    \ or\nare ofﬂoaded to cloud servers, based on the required power. Deploying a\
    \ practical UAV-\nbased IoT framework requires an orchestrator platform that recognizes\
    \ various contextual\ninformation about UAVs, such as ﬂight trajectories, IoT\
    \ equipment, and battery status.\nTwo main UAV communication networks exist: ad\
    \ hoc UAV networks and UAV-\nassisted aided communication networks. The former\
    \ is characterized by a ﬂexible topology\nand self-organized architecture, while\
    \ the latter’s main feature comprises ﬂexible schedul-\ning at the edge side of\
    \ the network.\nUAVs can collect data massively by being equipped with sensors\
    \ of different sizes,\nforms, features, and capabilities. Many remote sensing\
    \ devices for airborne and satellite\nplatforms are now adopting miniature and\
    \ low-cost versions for UAV platforms, such as\nmultispectral, hyperspectral,\
    \ short/medium-wave range cameras (e.g., thermal imaging\ncamera), and light LiDAR.\
    \ Table 1 gives a list of the sensors and cameras integrated with\nUAVs and their\
    \ usefulness for monitoring various applications. The characteristics and\nspeciﬁcations\
    \ of each type differ according to speciﬁcations. For example, the RGB camera\n\
    can be helpful for visual analysis, mapping and classifying objects and tracking\
    \ animals\nand people. Moreover, UAVs with lightweight thermal infra-red sensors\
    \ can deal with\ncomplex natural tracking such as monitoring volcanoes and forest\
    \ ﬁres, tracking animals,\nand in hydrothermal scientiﬁc studies.\nTable 1. Examples\
    \ of UAV onboard sensors and cameras.\nSensor/Camera\nUtility\nRef.\nRGB Camera\n\
    •\nVisual analysis\n•\nMapping\n•\nLanding\n•\nObject classiﬁcation\n•\nVehicle\
    \ detection\n•\nTracking animals and people\n[20]\nUAV LiDAR\n•\nVegetation canopy\
    \ analysis\n•\nEstimation of forest carbon\n•\nAbsorption\n•\nMapping cultural\
    \ heritage\n•\nBuilding information\n[21]\nHyperspectral sensors\n•\nLand cover/land\
    \ use mapping\n•\nVegetation indices estimation\n•\nBiophysical, physiological,\
    \ or biochemical parameter estimation\n•\nAgriculture and vegetation disease\n\
    •\nDetection, including disaster damage\n•\nAssessment\n[22]\nLightweight cameras\n\
    •\nVisual analysis, vegetation detection and analysis, crop monitoring\n•\nMining\n\
    •\nSoil moisture estimation, ﬁres\n•\nDetection, water level measurement\n•\n\
    Land cover/land use mapping\n[23]\nLightweight thermal infra-red sensors\n•\n\
    Tracking creatures\n•\nVolcanoes\n•\nDetection, including forest ﬁres\n•\nHydrothermal\
    \ studies, urban heat monitoring\n•\nIslands and hazardous area tracking\n[24]\n\
    Drones 2021, 5, 148\n6 of 30\n2.2. UAV-Enabled Services\nUAV technology’s appealing\
    \ ﬂexibility and mobility characteristics have drawn atten-\ntion in terms of\
    \ integration with other networks as a way to address various challenging\napplications.\
    \ UAVs can be a part of IoT networks, referred to as the Internet of Flying\n\
    Things (IoFT) [25]. The IoFT can improve the availability of IoT services in areas\
    \ with poor\ncommunication coverage and limited infrastructures. For instance,\
    \ UAVs can provide FC\nand EC services and cellular communications in rural or\
    \ developing regions and submarine\nenvironments. As a result, reaching hostile\
    \ and congested environments has become easier\nand faster, thus improving emergent\
    \ intervention wherever and whenever it is required.\nAs support to communication\
    \ networks, UAVs can be dispatched as peripheral nodes with\nvarious operating\
    \ units, such as ﬂying BSs, relay nodes, or end-node stations [7]. UAVs act\n\
    as relay/terminal nodes related to disconnected nodes, stabilizing communication\
    \ links\nin an ad hoc manner. A set of deployed UAVs can thereby form a ﬂying\
    \ ad hoc network\n(FANET), which is a subclass of the mobile ad hoc network (MANET)\
    \ [26].\nIn IoT networks, UAVs can potentially adopt many recent cellular and\
    \ non-cellular\nwireless communication networks to control the UAV on the one\
    \ hand, and to enhance\nthe coverage and latency services on the other. The most\
    \ prominent communication pro-\ntocols that can be used with UAVs are IEEE 802.11\
    \ (Wi-Fi), IEEE 802.16 (WiMax), IEEE\n802.15.4 (LRWPAN), cellular networks (3G/4G),\
    \ IEEE 802.15.1 (Bluetooth), LoRaWAN\n(LoRa), SigFox and narrowband IoT (NB-IoT)\
    \ [27–31]. Typically, the choice of communica-\ntion protocol depends on the desired\
    \ achievable throughput, power consumption, range,\nimplementation cost, reliability,\
    \ delay, and security. Grouped according to application\nrequirements, the characteristics\
    \ of the most-used communication protocols are presented\nin [32]. As described\
    \ in Table 2, there are various available communication protocols that\ncan be\
    \ used in UAV-enabled MEC. Each protocol is given a list of advantages and disad-\n\
    vantages regarding data rate, coverage, deployment cost, energy consumption, latency,\n\
    spectrum availability, and the number of supported users. Thus, the use of communication\n\
    technology depends literally on the application requirements.\nAlong with high\
    \ mobility and scalability, UAVs can offer many potential opportu-\nnities in\
    \ terms of enabling services such as pervasive connectivity, aerial intelligence,\n\
    self-maintenance capabilities for communications, and sensor deployment. Therefore,\n\
    UAVs act as airborne BSs [33], data collectors, relay nodes [34], jammers [35],\
    \ monitors [36],\nedge- and cloud computing servers [37], and power suppliers\
    \ [38] to support IoT applica-\ntions. These will extend network coverage and\
    \ provide diversiﬁed and ﬂexible intelligence\nfacilities for new potentialities\
    \ in modern IoT applications. In summary, as illustrated\nin Figure 3, UAVs can\
    \ facilitate a wide range of solutions in IoT applications. They can\nprovide\
    \ intelligent communications by establishing wireless networks in inaccessible\
    \ and\nhazardous environments; they also enable parallel intelligent areal services,\
    \ such as CC,\nEC, and LC.\nDrones 2021, 5, 148\n7 of 30\nTable 2. Characteristics\
    \ of the most-used communication technologies employed in UAV applications.\n\
    Protocol\nMax Data Rate\nMax Range\nDeployment Cost\nEnergy\nLatency\nSpectrum\n\
    Max Connectivity\nPros/Cons\nNB-IoT\nUL: 158.5 kbps\nDL: 106 kbps\n15 km\nHigh\n\
    (>15,000 $/BS)\nLow\n(3 µA rest,\nTx: 74–220 mA,\nRx: 46 mA)\n1.6 s\nLicensed\
    \ Sub-GHz\nMassive\n(>50,000 sensor\ndevices)\n+\nSupport remote healthcare monitoring,\n\
    +\nEnergy-efﬁciency\n+\nProvide fast, reliable network\n−\nHigh maintenance costs\n\
    −\nOperational cost since it is on the\nlicensed spectrum\n−\nCost of SIM card\
    \ purchase\n−\nNo mobility support\nLoRa\nLoRa CSS: 0.3–5 kbps\nFSK: 50 kbps\n\
    5 km\n(Urban) 15 km (Rural)\nHigh\n(100–1000 $/BS)\nVery Low\n(2 µA resting, 12\
    \ mA\nListening)\n>1 s\nSub-GHz ISM band\nMassive\n(40,000 sensor devices)\n+\n\
    Long communication range\n+\nEnergy efﬁciency\n+\nLow operational cost\n−\nLow\
    \ data reliability\n−\nInterference issue\n−\nHigh deployment cost\nSigFox\nUL:\
    \ 100/600 bps\nDL: 600 bps\n10 km (urban), 50 km\n(rural)\nHigh\n(>4000 $/BS)\n\
    Very Low\n10–100 mW\n(<0.01 mA resting, Tx:\n28 mA, Rx: 10.5 mA)\n10 s\nSub-GHz\
    \ ISM band\nMassive\n(40,000 sensor devices)\n+\nLong communication range\n+\n\
    Energy efﬁciency\n+\nLow operational cost\n−\nInterference issue\n−\nHigh deployment\
    \ cost\n−\nLow data reliability\n−\nNo mobility supports\n−\nLimited number of\
    \ messages per day\n(140 Message/day, 12 bytes/message)\nZigBee\n250 Kbps\n<1\
    \ km\nLow\n(1–5 $)\nHigh\n30 mA\n(3.16 µW–1 mW)\n−25 to 0 dBm\n15 ms\nISM\nModerate\n\
    (255)\n+\nFree license\n+\nThe node supports\n+\nFlexible architecture and ease\
    \ to install\n+\nSupport mesh networking\n+\nEasy to control and monitor\n−\n\
    Security issues\n−\nEnergy consumption\n−\nShort transmission distance\n−\nProne\
    \ to network interference due to the\nuse of 2.4 GHz band\nBluetooth\nIEEE 802.15.1\n\
    3 Mbps\n100 m\nLow\n(5–10 $)\nLow\n(1 W)\n1–10 mW\n0–10 dBm\n3 ms\nISM\n(2.4–2.4835\
    \ GHz)\nLow\n(Over 1000 in Bluetooth\nmesh networking)\n+\nFree of charge\n+\n\
    Simplicity\n−\nLow connectivity\n−\nEnergy consumption\n−\nShort coverage\n−\n\
    Security\nBLE\n2 Mbps\n240 m\nHigh\n(>25 $)\nLow\n(0.01–0.5 W)\n50 ms\nISM\n(2.4–2.5\
    \ GHz)\nLow\n+\nLow power consumption\n+\nFast Connection establishment\n+\nFree\
    \ of charge\n+\nReliable for small size data transfer,\nespecially in IoT\n−\n\
    Open to interception and attack\n−\nShort coverage\n−\nLimited data rates\nDrones\
    \ 2021, 5, 148\n8 of 30\nTable 2. Cont.\nProtocol\nMax Data Rate\nMax Range\n\
    Deployment Cost\nEnergy\nLatency\nSpectrum\nMax Connectivity\nPros/Cons\n5G/6G\n\
    1 Gbps (5G)\n>10 Gbps (6G)\n200 m\nHigh\n(>13,000 $)\nMedium\n1 ms (5G)\n0.1 ms\
    \ (6G)\nLicensed cellular\nMassive\n1 million/km2 (5G)\n10 million/km2 (6G)\n\
    +\nIncreased connectivity\n+\nLower latency\n+\nEnergy efﬁciency plans\n+\nAI\
    \ adoption\n−\nHigh deployment cost\n−\nSecurity and privacy issues\n−\nLimited\
    \ coverage\nWi-Fi\nIEEE 802.11\n11/54/300 Mbps\n7 Gbps\n250 m\n100 m\nHigh\n(100–1000\
    \ $ per BS)\nMedium\n>20 ms\nUnlicensed ISM\n(2.4–5 GHz)\nModerate\n(255)\n+\n\
    Mobility\n+\nCost\n+\nConvenience\n−\nRange\n−\nSecurity\n−\nReliability\nLTE\
    \ M (Rel13\nand Rel14)\n1 Mbps\n(LTE M Rel13)\n4 Mbps\n(LTE M Rel14)\n12 km\n\
    High\n(>5000 $)\nMedium\n>150 ms\nLicensed LTE frequency\nband\nMassive\n(20,000\
    \ sensor devices)\n+\nSupport remote healthcare monitoring,\n+\nEnergy efﬁciency\n\
    +\nProvide fast reliable network\n−\nLimited network capacity\nDrones 2021, 5,\
    \ 148\n9 of 30\np\ng\n[\n],\np\npp\n[\n]\npp\npp\nThese will extend network coverage\
    \ and provide diversified and flexible intelligence fa-\ncilities for new potentialities\
    \ in modern IoT applications. In summary, as illustrated in \nFigure 3, UAVs can\
    \ facilitate a wide range of solutions in IoT applications. They can pro-\nvide\
    \ intelligent communications by establishing wireless networks in inaccessible\
    \ and \nhazardous environments; they also enable parallel intelligent areal services,\
    \ such as CC, \nEC, and LC. \n \nFigure 3. UAV-enabled intelligent services in\
    \ IoT. \n2.3. UAV Applications \nDespite the strict restrictions on the civilian\
    \ usage of drones, they play a promotional \nrole in providing many facilities\
    \ and enhancements in different application scenarios. \nMoreover, with the rapid\
    \ development and emergence of new communication paradigms \nto achieve global\
    \ connectivity, drones will positively facilitate many intelligent features. \n\
    Table 3 shows a list of UAV applications in various domains, their advantages\
    \ and \ndisadvantages, and current research challenges. \n• \nAgriculture: \n\
    Drones have been used to monitor large agricultural fields to detect specific\
    \ diseases \nthat threaten the quality of plants at an early stage. The implemented\
    \ system can predict \nfarm diseases in real-time by exploiting image processing\
    \ and AI classification based on \nIoT architecture, using real-time data acquisition\
    \ [39]. In ref. [40], the authors have \nproposed an architecture combining UAVs\
    \ and wireless sensor networks (WSNs) with \nIoT approaches to provide precise\
    \ ecological agriculture. Another architecture for crop \nmapping monitoring and\
    \ disease assessment-based satellite imagery using the DL \napproach has been\
    \ proposed to analyze the images acquired through UAV airborne \nmultispectral\
    \ sensors [41]. Additionally, UAVs can efficiently enhance the productivity of\
    \ \nfarming activities, as referenced in [42–44]. In addition, UAVs play an exciting\
    \ role in crop \nmonitoring by facilitating many tasks previously restricted to\
    \ the laborer and farmer [45–\n47]. \n• \nIndustry 4.0: \nUAV\nIntelligent communications\n\
    Communications\nNetworks\nApplication layer\nIntelligent aerial services \nLC\n\
    EC\nCC\nFigure 3. UAV-enabled intelligent services in IoT.\n2.3. UAV Applications\n\
    Despite the strict restrictions on the civilian usage of drones, they play a promotional\n\
    role in providing many facilities and enhancements in different application scenarios.\n\
    Moreover, with the rapid development and emergence of new communication paradigms\n\
    to achieve global connectivity, drones will positively facilitate many intelligent\
    \ features.\nTable 3 shows a list of UAV applications in various domains, their\
    \ advantages and disad-\nvantages, and current research challenges.\n•\nAgriculture:\n\
    Drones have been used to monitor large agricultural ﬁelds to detect speciﬁc diseases\n\
    that threaten the quality of plants at an early stage. The implemented system\
    \ can predict\nfarm diseases in real-time by exploiting image processing and AI\
    \ classiﬁcation based on IoT\narchitecture, using real-time data acquisition [39].\
    \ In ref. [40], the authors have proposed an\narchitecture combining UAVs and\
    \ wireless sensor networks (WSNs) with IoT approaches to\nprovide precise ecological\
    \ agriculture. Another architecture for crop mapping monitoring\nand disease assessment-based\
    \ satellite imagery using the DL approach has been proposed\nto analyze the images\
    \ acquired through UAV airborne multispectral sensors [41]. Addi-\ntionally, UAVs\
    \ can efﬁciently enhance the productivity of farming activities, as referenced\n\
    in [42–44]. In addition, UAVs play an exciting role in crop monitoring by facilitating\
    \ many\ntasks previously restricted to the laborer and farmer [45–47].\n•\nIndustry\
    \ 4.0:\nThe increasing demand for fast and low-cost productivity has encouraged\
    \ the indus-\ntrial and research communities to incorporate robotics into the\
    \ industrial process. UAVs\nhave recently attracted the attention of industrial\
    \ solution providers in response to the\nincreased need for productivity; for\
    \ instance, the authors proposed an industrial IoT-based\nsystem that collects\
    \ data by a UAV camera and sends it to a cloud server for process-\ning [48].\
    \ The design aims to monitor the industrial zone to prevent undesirable incidents\n\
    in the production process, relying on the robust intelligence of computer vision\
    \ (CV) ap-\nproaches [49,50]. The mining industry has also increased the level\
    \ of interest in drones for\n3D mapping, mine safety, and mine management [51].\n\
    •\nEnvironment:\nUAVs are being adopted as a means to monitor and survey various\
    \ environmental\nareas. They can be used for the monitoring and data aggregation\
    \ of archeological sites. For\nexample, the authors of [52] have reported that\
    \ UAVs can present accurate and precise\nimages of the studied archeological space,\
    \ compared to terrestrial measurements. UAV\nDrones 2021, 5, 148\n10 of 30\ntechnologies\
    \ can also be deployed in ecological monitoring systems to track wildlife in\n\
    heterogeneous territories and topographically challenging areas as a supporting\
    \ platform\nfor traditional techniques [53]. Besides, this technology may facilitate\
    \ geological researchers\nwhen collecting remote data about many species and animals\
    \ [54]. Moreover, the authors\nof [55] proposed an intelligent model based on\
    \ UAV, dedicated to monitoring several types\nof plants using the latest computer\
    \ vision algorithms and cloud computing technologies.\nUAVs are also used to track\
    \ wild animals over large areas [56].\n•\nHealth and emergency:\nDrones can offer\
    \ several beneﬁts for public health emergencies, for instance, tackling\nepidemics\
    \ and contagious diseases such as COVID-19. For instance, during the COVID-19\n\
    pandemic, some governments and countries adopted drones to survey the rapid spread\n\
    of the virus, diagnose patients, and then predict the mortality risk factor by\
    \ applying AI\napproaches to the collected data. The drones have been used to\
    \ observe crowds, broadcast\ncritical public announcements and information, spray\
    \ disinfectants, and carry out extensive\ntemperature measurements in several\
    \ residential areas [57]. Additionally, the lifeguard\ncommunity uses UAVs for\
    \ search and rescue missions requiring rapid intervention. Their\nversatility\
    \ also allows obtaining a quick overview of the rescue situation instead of using\n\
    human-crewed airplanes that may take extra time to deploy [58]. Relying on UAV-enabled\n\
    MEC, AI, and CV schemes could lead to new applications that simulate visual reality,\n\
    thus enabling faster and real-time decisions in emergency interventions. For instance,\n\
    UAVs typically detect obstacles by ﬂying over them, gathering data, extracting\
    \ the most\nprominent features, and making decisions based on machine vision and\
    \ pattern recognition\ntechnologies. In this manner, people with visual impairments\
    \ can maneuver comfortably.\nThis technology is expected to be a key solution\
    \ in the healthcare revolution [58].\n•\nSmart cities and smart homes:\nThe urban\
    \ environment is expected to acquire a massive number of dynamically\nconnected\
    \ devices due to diverse activities wherein UAVs as mobile vehicles will have\
    \ many\npivotal roles, including real-time trafﬁc control [59], transportation\
    \ [60], infrastructure\ncontrol and management [61], and buildings observation\
    \ [62]. Accordingly, UAVs are\nexpected to provide communication services to heterogeneous\
    \ smart devices in urban\nareas, to improve the smart city from application perspectives\
    \ [63]. For example, the\nauthors of [64] have proposed an architecture for 5G\
    \ hierarchical IoT networks where the\nUAVs play a fundamental role as a data\
    \ fusion center, formation controller, and network\ngateway. In another context,\
    \ UAVs were used to perform lightweight parts delivery to\nworkstation operators\
    \ within a manufacturing plant, where GPS could not provide a\npractical solution\
    \ for indoor positioning, in addition to intelligent shipping, intelligent\nmonitoring,\
    \ and intelligent control [65].\n•\nNatural disaster tracking:\nDuring natural\
    \ disasters, a rapid and effective response is required to assist the popu-\n\
    lation, avoid increasing the number of victims, and minimize the economic impact.\
    \ UAVs\ncan respond quickly to earthquake help requests, ﬁnd missing people, and\
    \ facilitate the\nmonitoring and rescue of victims in danger of drowning during\
    \ ﬂoods [66,67]. Collecting\na large amount of data from different sensors deployed\
    \ in the environment, using UAV-\nenabled MEC with AI algorithms, can help to\
    \ rapidly predict and intervene in natural\ndisasters such as tornadoes, volcanic\
    \ eruptions, tsunamis, and storms.\n•\nConstruction:\nUAV-enabled MEC and computer\
    \ vision techniques are promising solutions for the\ncondition assessment of civilian\
    \ and public infrastructures. UAVs are being used increas-\ningly in many construction\
    \ tasks, such as building inspections [68], building condition\nmonitoring, damage\
    \ assessments of buildings after disasters [69], public site surveying\nand mapping\
    \ [70], safety inspections of construction sites and workers, and monitoring\n\
    the progress of construction [71].\nDrones 2021, 5, 148\n11 of 30\nTable 3. Comparative\
    \ study of UAV application objectives.\nApplication Domains\nObjectives\nPros/Cons\n\
    Future Insights\nRef.\nAgriculture/Precision agriculture\n\x13\nOptimizing spraying\
    \ process\n\x13\nCrop monitoring\n\x13\nCrop maturity monitoring\n\x13\nDetection\
    \ and prediction of various\ncrop diseases\n\x13\nIrrigation management\n\x13\n\
    Artiﬁcial pollination\n\x13\nGreenhouse temperature and humidity\nmonitoring\n\
    \x13\nWater assessment\n+\nBasic knowledge and skills are required to\noperate\n\
    +\nUAVs with greater capabilities cost more\n−\nWeather conditions limit the utilization\n\
    of UAVs\n−\nLimited energy of drones\n\x13\nMulti-UAV integration\n\x13\nDifﬁcult\
    \ to ﬂy in harsh conditions\n\x13\nEnergy efﬁciency\n\x13\nUAV-based autonomous\
    \ decisions\n\x13\nAutonomous decision-making based on DL\n\x13\nShort-range coverage\
    \ of BLE-enabled UAVS\n(100 m)\n\x13\nInterference (Wi-Fi, Zigbee, and regular\n\
    Bluetooth technologies)\n\x13\nInteroperability with new raised\ncommunication\
    \ technologies\n\x13\nMore work on using AI to model crop growth\nand disease\
    \ management is expected based on\non-farm and meteorological data\n\x13\nWhen\
    \ developing laws and regulations for IoT\nin agriculture, the involvement of\
    \ the\ngovernment or agricultural department must\nbe assured\n\x13\nMore effort\
    \ should be addressed to enhance\nreal-time monitoring features\n[72]\nIndustry/Construction\n\
    \x13\nMining industry (surface mining, underground\nmines, abandoned mines)\n\x13\
    \nRegular (e.g., monthly) routines and control of\nsafety and risk management\n\
    \x13\nStrategic planning\n+\nEasy to control\n+\nFast and real-time intervention\n\
    −\nThe battery life limits the ﬂying time of drones.\n−\nCoexistence of obstacles\
    \ in underground mines\n−\nHumidity or water leakage damage the\nelectronic components\n\
    −\nBattery issues\n\x13\nMore effort should be addressed to the design\nand structure\
    \ of UAVs dedicated to\nunderground environments\n\x13\nApplying ML techniques\n\
    \x13\nReal-time processing of drone photos, recorded\nmovies, and efﬁcient data\
    \ collection algorithms\n\x13\nEnhance the security through blockchain\n[51]\n\
    Environment/Natural disasters\n\x13\nMonitoring, forecasting, early warning systems\n\
    \x13\nDisaster information fusion\n\x13\nSearch and rescue missions\n\x13\nDamage\
    \ assessment\n\x13\nStandalone communication systems\n+\nReducing cost and economic\
    \ losses\n+\nFast intervention\n+\nEasy to install\n−\nBad weather conditions\n\
    −\nLimited battery\n−\nLimited ﬂying time\n\x13\nData fusion and handover issues\n\
    \x13\nImprove the UAV localization systems\n\x13\nDesign efﬁcient schemes for\
    \ UAVs\n[32]\nDrones 2021, 5, 148\n12 of 30\nTable 3. Cont.\nApplication Domains\n\
    Objectives\nPros/Cons\nFuture Insights\nRef.\nSmart cities\n\x13\nUrban security\
    \ management\n\x13\nTrafﬁc and crowd management\n\x13\nCivil security control\
    \ (smart home)\n\x13\nMobile processing units\n\x13\nNatural disaster monitoring\n\
    \x13\nHealth emergencies\n\x13\nUsed to maintain connectivity\n+\nEnhance energy\
    \ efﬁciency of IoT devices on the\nground in intelligent cities\n+\nDelivering\
    \ collected data in real-time\n+\nEnhancing the quality of life\n+\nReducing cost\
    \ and economic losses\n+\nLow latency services (fog-computing architecture)\n\
    −\nDrone equips many different IoT devices,\nwhich affect processing services\
    \ and energy\n\x13\nBig data processing issues\n\x13\nEthical and privacy\n\x13\
    \nLicensing and legislations\n\x13\nDevelopment of automated image data\ncompression\
    \ algorithms,\n\x13\nDevelopment of a network-centric infrastructure\n\x13\nPrecision\
    \ ﬂying should be improved under all\nweather conditions\n\x13\nCommunication\
    \ constraints\n\x13\nSecurity threats should be addressed by using\nnew emerged\
    \ technologies (i.e., blockchains)\n\x13\nApplying ML techniques between edge/fog\n\
    computing (drone) and the IoT cloud\n\x13\nReal-time processing of swarms of drones’\n\
    photos, recorded movies, and data collection\nnecessitates implementing and designing\n\
    efﬁcient power-distributed algorithms\n[72]\nLogistics and Transportation\n\x13\
    \nFood delivery services\n\x13\nDelivery of ofﬁcial documents\n\x13\nDelivery\
    \ of lightweight commercial products\n+\nFaster delivery of food\n+\nFaster response\n\
    −\nData security on the transmission line\n−\nDrones’ batteries are limited\n\x13\
    \nAir trafﬁc control\n\x13\nBad weather conditions\n\x13\nLiability insurance\n\
    \x13\nLegislations\n\x13\nNavigation system should be developed to\nenable autonomous\
    \ ﬂying of UAVs\n\x13\nLimited ﬂight time\n\x13\nEquations of motion\n[73]\nWireless\
    \ and cellular systems\n\x13\nProvide aerial wireless BSs\n\x13\nUsed to maintain\
    \ connectivity\n\x13\nEnable cellular communications\n+\nLow cost and no signiﬁcant\
    \ infrastructure\nare required\n+\nAllows on-demand communication\n+\nPossibility\
    \ of coverage and network\ncapacity enhancement\n+\nIoT support\n+\nEnhancing\
    \ the performance of delivering\ncommunication services\n+\nMaintaining QoS\n\
    −\nBattery limitation\n−\nInterference\n−\nInteroperability\n\x13\nEnergy limitation\
    \ of the UAVs\n\x13\nChannel modeling and interference\nmanagement\n\x13\nThe\
    \ autonomy and self-control of drones can\nbe improved\n\x13\nFlight time constraints\n\
    \x13\nPerformance analysis under mobility\nconsiderations\n\x13\nSpectrum sharing\
    \ with cellular networks\n\x13\nMobile edge computing with UAV-BSs requires\n\
    more research efforts to enhance its applicability\n[3]\nDrones 2021, 5, 148\n\
    13 of 30\n•\nWireless and cellular networks:\nMany efforts have been dedicated\
    \ to harnessing the full potential of UAV communi-\ncations for cellular and wireless\
    \ communications in the networks industry. The research\ncommunity explored the\
    \ opportunity of UAV-mounted utilization via ﬂying relays and BSs\nthat can dynamically\
    \ reposition themselves to boost network coverage, increase spectral\nefﬁciency,\
    \ and improve user QoS. The UAVs enable low-altitude supports beyond line-of-\n\
    sight (LOS) control and reliable communications [72]. Furthermore, UAVs can bring\
    \ many\nfacilities to cellular IoT-based networks by providing processing facilities\
    \ near the ground\nfor users.\n2.4. UAV-Enabled and -Assisted MEC Architecture\n\
    Centralized networks are easy to maintain because they have just one point of\
    \ failure.\nHowever, due to the instability of the system categories, this design\
    \ is insufﬁcient to\nrespond to ubiquitous applications. A single issue affecting\
    \ the core server might destroy\nthe entire system. Unlike centralized networks,\
    \ distributed networks are deemed more\nstable due to their decentralized architecture,\
    \ since the entirety of the information system\nis dispersed among a vast number\
    \ of nodes that maintain similar conditions. This feature\nimproves distributed\
    \ system security by making it challenging to target many users.\nFurthermore,\
    \ blockchain is a peer-to-peer (P2P) distributed ledger that provides a\nsecure,\
    \ immutable, transparent, and trustless environment due to its distributed architec-\n\
    ture. Integrating this approach with UAVs allows them to record their data in\
    \ the chain of\nblocks as a transaction, ensuring their trustworthiness [74].\
    \ The essential foundations of\nblockchain technology are intelligent contracts\
    \ and consensus mechanisms. This method\neliminates the requirement for a trusted\
    \ third-party system to protect data privacy since\nconsensus techniques maintain\
    \ data integrity. The use of cryptographic methods guaran-\ntees that data on\
    \ blockchains are secure. These exciting blockchain characteristics increase\n\
    the applicability of UAVs in a variety of civil and mission-critical applications\
    \ that use\nUAV-enabled MEC architecture. Moreover, distributed systems outperform\
    \ centralized\nsystems in terms of network speed, since the information is not\
    \ stored in a central lo-\ncation, and the number of users attempting to access\
    \ a server is more signiﬁcant than\nthe server can support, causing long waiting\
    \ times and slowing down the system for\ndecentralized architecture.\nMoving all\
    \ computing activities to the cloud has proven an effective mechanism to\nprocess\
    \ data since the cloud offers greater processing capacity than network edge devices.\n\
    However, data-processing speeds have risen rapidly due to the size of communicated\
    \ data\nand the networks’ bandwidth. Therefore, CC suffers from bottlenecks due\
    \ to the massive\nvolume of data generated in real time. Cameras in UAVs capture\
    \ a tremendous amount\nof video data, which the system should process in real-time\
    \ to enable good decision-\nmaking. Sending data from UAVs to the cloud server\
    \ would mostly result in longer\ndelays. Deploying a large number of IoT devices,\
    \ such as UAVs, would restrict bandwidth,\nreliability and security. Therefore,\
    \ processing data at the network edge would yield shorter\nresponse times, more\
    \ efﬁcient processing, and less pressure on the network.\nMEC is widely acknowledged\
    \ as a vital technology to implement many methods for\nnext-generation IoT applications.\
    \ Due to their versatility and ease of deployment, UAVs\ncan play various roles\
    \ in delivering edge computing services. UAV-enabled MEC designs\ncan be classiﬁed\
    \ and dedicated to a speciﬁc application scenario. A UAV can be considered\nas\
    \ a mobile EC server, an IoT node, or a relay. Firstly, UAVs can participate in\
    \ the system as\nmobile devices when they ofﬂoad their computing to an MEC server.\
    \ Secondly, the UAV\ncan act as the MEC responsible for monitoring a group of\
    \ mobile end nodes. Thirdly, the\nUAV can serve as a relay or gateway between\
    \ mobile end nodes and an MEC server.\nThe UAV may be regarded as a speciﬁc user\
    \ that could ofﬂoad those computing tasks\nexceeding its memory and processing\
    \ capacity to a MEC server, as shown in Figure 4a.\nUAVs typically have limited\
    \ battery capacity and insufﬁcient memory and computing\npower to execute complex\
    \ computational tasks. As a result, ofﬂoading their processing to\nDrones 2021,\
    \ 5, 148\n14 of 30\nthe ground MEC server for computation may increase its battery\
    \ life. In another situation,\nas shown in Figure 4b, the UAV may keep the MEC\
    \ server on board and ﬂy to assist the\nground-based users with the task of computing\
    \ once the ground-based users ofﬂoad their\ncomputation responsibilities to the\
    \ latter. In the third scenario depicted in Figure 4c, the\nUAV serves as a central\
    \ relay, assisting mobile users to ofﬂoad their computing tasks to a\nspeciﬁc\
    \ MEC server.\nDrones 2021, 5, x FOR PEER REVIEW \n13 of 29 \n \nground-based\
    \ users with the task of computing once the ground-based users offload their \n\
    computation responsibilities to the latter. In the third scenario depicted in\
    \ Figure 4c, the \nUAV serves as a central relay, assisting mobile users to offload\
    \ their computing tasks to a \nspecific MEC server. \n \nFigure 4. UAV-enabled\
    \ architecture. \nDespite the substantial benefits afforded by the architecture\
    \ of UAV-enabled MECs \nto provide low latency and high-reliability services to\
    \ IoT devices, numerous challenges \nremain. These challenges are found in intra-UAV\
    \ communication, UAV security, air data \nsecurity, data storage, and management.\
    \ Moreover, the coordination between UAVs and \nground-based users requires considerable\
    \ improvement due to the system’s mobility \ncharacteristics, which complicate\
    \ communication. Another significant limitation of UAVs \nis found in their low\
    \ onboard battery capacity. In addition to the energy spent in hovering, \naccelerating/decelerating,\
    \ and climbing up/down, additional energy is consumed due to \nonboard computations.\
    \ Therefore, designing efficient methods for resource and energy \nmanagement\
    \ is urgently required. \nFurthermore, one of the major design problems regarding\
    \ computation task \nrequirements is the joint trajectory design in UAV-enabled\
    \ MEC networks. In this regard, \nresearch efforts should emphasize how to forecast\
    \ mobile user movement and follow the \ntrajectory so that computing activities\
    \ can be offloaded quickly, and computation results \nmay be sent back to users\
    \ on time. The trajectory design is especially challenging when \ndealing with\
    \ multi-UAV-enabled MEC services. Another challenge is found in the \nintegration\
    \ of the blockchain into UAVs. As standalone technologies, UAVs face many \nchallenges\
    \ such as privacy issues, air traffic violations, quantum attacks, ML, and \n\
    algorithmic game-theory-based attacks [13]. \n3. UAV-Enabled and Assisted MEC\
    \ State of the Art \nThe rapid spread of smart devices has led to intensive computation\
    \ in many \napplications, such as virtual reality, face and object recognition,\
    \ and automatic driving. \nThis poses a severe challenge when intelligent devices\
    \ with limited computing and energy \nresources need to perform the required tasks\
    \ locally [75]. CC can be considered as an \nexpensive solution to overcome these\
    \ impairments. In addition, the CC solution suffers \nfrom high communication\
    \ expenses and high transmission delays due to the core \nFigure 4. UAV-enabled\
    \ architecture.\nDespite the substantial beneﬁts afforded by the architecture\
    \ of UAV-enabled MECs\nto provide low latency and high-reliability services to\
    \ IoT devices, numerous challenges\nremain. These challenges are found in intra-UAV\
    \ communication, UAV security, air data\nsecurity, data storage, and management.\
    \ Moreover, the coordination between UAVs and\nground-based users requires considerable\
    \ improvement due to the system’s mobility\ncharacteristics, which complicate\
    \ communication. Another signiﬁcant limitation of UAVs\nis found in their low\
    \ onboard battery capacity. In addition to the energy spent in hovering,\naccelerating/decelerating,\
    \ and climbing up/down, additional energy is consumed due to\nonboard computations.\
    \ Therefore, designing efﬁcient methods for resource and energy\nmanagement is\
    \ urgently required.\nFurthermore, one of the major design problems regarding\
    \ computation task require-\nments is the joint trajectory design in UAV-enabled\
    \ MEC networks. In this regard, research\nefforts should emphasize how to forecast\
    \ mobile user movement and follow the trajectory\nso that computing activities\
    \ can be ofﬂoaded quickly, and computation results may be sent\nback to users\
    \ on time. The trajectory design is especially challenging when dealing with\n\
    multi-UAV-enabled MEC services. Another challenge is found in the integration\
    \ of the\nblockchain into UAVs. As standalone technologies, UAVs face many challenges\
    \ such as pri-\nvacy issues, air trafﬁc violations, quantum attacks, ML, and algorithmic\
    \ game-theory-based\nattacks [13].\n3. UAV-Enabled and Assisted MEC State of the\
    \ Art\nThe rapid spread of smart devices has led to intensive computation in many\
    \ appli-\ncations, such as virtual reality, face and object recognition, and automatic\
    \ driving. This\nposes a severe challenge when intelligent devices with limited\
    \ computing and energy\nDrones 2021, 5, 148\n15 of 30\nresources need to perform\
    \ the required tasks locally [75]. CC can be considered as an\nexpensive solution\
    \ to overcome these impairments. In addition, the CC solution suffers\nfrom high\
    \ communication expenses and high transmission delays due to the core network’s\n\
    involvement. To this end, some prominent alternatives have been proposed to explore\
    \ the\nlatency delay, including recalling the computation resources from the cloud\
    \ to the edge of\nthe network.\nAs an extension of the edge concept, recently,\
    \ MEC was intensively investigated.\nMEC can bring information technology (IT)\
    \ services and cloud-computing capabilities\nto a mobile network, guaranteeing\
    \ ultra-low delays and offering high bandwidth to the\nuser [76]. UAVs can be\
    \ embedded with lightweight CPUs (central processing units) or\nGPUs (graphics\
    \ processing units) to offer computation services. Therefore, UAVs ﬂy MEC\nservers\
    \ in the sky, offering controllable mobility and high-quality communication links,\n\
    supplying the existing MEC servers on the ground. In this regard, we summarize\
    \ the\nstate-of-the-art situation regarding UAVs’ possibilities as MEC enablers\
    \ or as part of a\nMEC system in an IoT environment where end-nodes and actuators\
    \ cannot deal with the\ngenerated data onboard.\nThe research on UAV-enabled MEC\
    \ or UAV-assisted MEC is in its early phases, includ-\ning using the fog and edge\
    \ computing concepts instead of cloud computing to enhance\nlatency and computation\
    \ performances in IoT users. A summary of related research activi-\nties regarding\
    \ UAV opportunities as an MEC enabler or as part of a MEC system in the IoT\n\
    is listed and highlighted in Table 4.\nTable 4. UAV-enabled MEC and assisted MEC\
    \ research activities.\nRef.\nYear\nEvaluated Performance Metrics\nSummary\n[77]\n\
    2021\n•\nCommunication security issue\nin the dual-UAV-MEC system\nA secure communication\
    \ mechanism was created, dedicated to the\ndual-UAV-MEC system. The main objective\
    \ of this task was to\nmaximize the user’s security and computing capacity by\
    \ optimizing\nthe resources and trajectory of the UAV server. The authors relied\
    \ on\nmathematical techniques, including the sequential convex\napproximation\
    \ (SCA) and block coordinate descent (BCD) algorithms\nto enhance UAV-enabled\
    \ MEC security and computing capacity.\n[37]\n2020\n•\nComputation ofﬂoading\n\
    A hybrid DL and fuzzy c-means clustering-based algorithms were\nproposed to predict\
    \ the positions of ground-based users and UAVs in\na hybrid MEC (H-MEC) network.\
    \ As a result, IoT devices can\nefﬁciently ofﬂoad their intensive tasks to the\
    \ UAV servers.\n[78]\n2020\n•\nComputation ofﬂoading\n•\nLatency\nThe authors\
    \ proposed an intelligent task-ofﬂoading algorithm (iTOA)\nfor UAV-enabled MEC\
    \ services. The proposed approach intelligently\nperceives the network’s environment\
    \ and decides the ofﬂoading\naction using the deep Monte Carlo tree algorithm.\
    \ This method\noutperforms game theory and greedy search-based methods in\nlatency\
    \ performance.\n[79]\n2021\n•\nComputation ofﬂoading\n•\nLatency\nUAVs were adopted\
    \ in 5G mobile networks to reduce the end-to-end\nlatency and improve communication\
    \ reliability. Using UAVs with\nMEC has provided effective trafﬁc management,\
    \ resulting in\ndecreased latency and better ofﬂoading operations.\n[80]\n2021\n\
    •\nEnergy\nA novel system called GEESE was proposed to provide computation\nservices\
    \ on the network’s edge by integrating cloudlets on multiple\naerial UAVs. The\
    \ system performance has been investigated to\nunderstand the relationship between\
    \ energy efﬁciency and\ncomputation task ofﬂoading.\nDrones 2021, 5, 148\n16 of\
    \ 30\nTable 4. Cont.\nRef.\nYear\nEvaluated Performance Metrics\nSummary\n[81]\n\
    2021\n•\nEnergy\n•\nComputation handling for\ninnovative logistic applications\n\
    The energy management of UAV-enabled MEC was investigated in\nthe context of a\
    \ realistic autonomous delivery network. A\ncomputational management solution\
    \ was designed explicitly for\nMEC-based task ofﬂoading and scheduling strategies.\
    \ The integrated\nsolution includes both static task ofﬂoading and dynamic resource\n\
    scheduling. The experimental results have revealed that the system\ncan handle\
    \ a greater UAV payload while using less energy.\n[82]\n2021\n•\nEnergy consumption\n\
    The authors addressed the issue of the energy consumption of IoT\ndevices in UAV-enabled\
    \ MEC networks. The energy and ofﬂoading\nrequirements have been improved by optimizing\
    \ the UAV trajectory\nplanning, communications, and computing resource allocation.\n\
    [83]\n2020\n•\nEnergy consumption\n•\nTrajectory planning for UAVs\nA UAV-assisted\
    \ MEC system, in which the UAVs acts as edge servers,\nwas designed to provide\
    \ computing services for IoT devices. The\nproposed approach is based on a k-means\
    \ clustering algorithm to\nminimize the energy consumption of the system by planning\
    \ the\ntrajectories of UAVs efﬁciently.\n[84]\n2020\n•\nEnergy consumption\nThe\
    \ Lagrangian duality method and successive convex\napproximation techniques were\
    \ proposed to reduce UAV-assisted\nMEC computational complexity. The proposed\
    \ approach aimed to\nminimize total energy consumption, including\ncommunication-related\
    \ energy, computation-related energy, and\nUAV energy. This was achieved by optimizing\
    \ bits allocation,\ntime-slot scheduling, power allocation, and UAV trajectory\
    \ design.\n[85]\n2019\n•\nEnergy consumption\n•\nBandwidth allocation\nThe authors\
    \ proposed a UAV-enabled MEC architecture in which the\nUAVs were considered as\
    \ MEC servers. The objective of this\napproach was to minimize the energy consumption\
    \ of both UAV and\nground-based users by scheduling computation resources and\n\
    optimizing the UAV trajectories.\n[86]\n2019\n•\nEnergy consumption\n•\nTime slot\
    \ allocation\n•\nComputation tasks\nThe authors have investigated a UAV-enabled\
    \ MEC system based on\nthe time division multiple access (TDMA) model. A TDMA-based\n\
    scheme was proposed to minimize the user’s energy consumption by\noptimizing the\
    \ UAV coordinates, time-slot allocation, and\ntask partitioning.\n[87]\n2020\n\
    •\nEnergy consumption\n•\nMEC deployment\nA two-layer optimization method was\
    \ provided to address\ndeployment and task-planning issues in a UAV-enabled MEC\
    \ system.\nThis approach proved efﬁcient for power consumption optimization.\n\
    The proposed method was based on a differential evolution\nalgorithm with a removal\
    \ agent.\n[88]\n2021\n•\nEnergy minimization\n•\nUAV trajectory optimization\n\
    A multi-UAV architecture was proposed in which the UAVs act as\ncomputer servers\
    \ to process the ground-based user’s data and to\nminimize energy consumption.\
    \ In this approach, a two-layer strategy\nwas used to optimize the UAV’s task\
    \ scheduling based on dynamic\nscheduling-based bidding, whereas the second layer\
    \ addressed bits\nallocation and the UAV’s ﬂight path.\n[89]\n2021\n•\nEnergy\
    \ optimization\n•\nTasks ofﬂoading\nUAV-enabled MEC architecture based on the\
    \ Markov decision\nprocess (MDP) was proposed to optimize mobile users’ energy\n\
    demands and task ofﬂoading. In this work, the UAVs were\nconsidered intelligent\
    \ mobile users.\n[90]\n2020\n•\nEnergy-saving\n•\nTask ofﬂoading\nAn algorithm\
    \ based on block coordinate descent and successive\nconvex approximation techniques\
    \ was proposed to optimize data\nofﬂoading. By considering a single UAV, the proposed\
    \ system\nimproved the tasks of ofﬂoading and energy consumption.\nDrones 2021,\
    \ 5, 148\n17 of 30\nTable 4. Cont.\nRef.\nYear\nEvaluated Performance Metrics\n\
    Summary\n[91]\n2020\n•\nLatency\nA UAV-assisted MEC method was proposed, in which\
    \ the UAVs\nacted as intermediate devices between the ground-based users and\n\
    MEC servers. This method leveraged airborne computing and\nstorage facilities\
    \ to minimize the execution time of ofﬂoaded tasks for\nIoT users. Therefore,\
    \ the task scheduling and ﬂight path of the UAVs\nwere jointly optimized.\n[92]\n\
    2020\n•\nLatency\n•\nOfﬂoading tasks\n•\nSecurity\nThe authors proposed a low-complexity\
    \ iterative algorithm to\noptimize security and privacy, subject to latency, offloading,\
    \ and energy\nconstraints. This method was proposed to optimize the UAV location,\n\
    the user’s transmission power, UAV jamming power, offloading ratio,\nUAV computing\
    \ capacity, and offloading user association.\n[93]\n2018\n•\nLatency\n•\nReliability\n\
    •\nComputation\nAn air/ground framework for MEC was proposed to combine the\n\
    capabilities of ground vehicles with UAVs in terms of\ncommunication, computing,\
    \ and storage.\n[11]\n2020\n•\nLimited ofﬂoading tasks\nAn automatic ofﬂoading\
    \ approach based on the MEC architecture\nhas been proposed to deal with the limited\
    \ processing capabilities of\nMEC servers and ground-based users. The UAVs have\
    \ been used to\ncache the generated data from the IoT devices and then send it\
    \ to the\nMEC servers, which operate in a private blockchain network.\n[94]\n\
    2017\n•\nNetwork connectivity\nA UAV-based MEC infrastructure was proposed to\
    \ improve the\nnetwork connectivity in uncovered areas. The system helped terrestrial\n\
    users to compute their tasks in circumstances such as natural\ncatastrophes or\
    \ in rural locations without communication coverage.\n[95]\n2019\n•\nOfﬂoading\
    \ tasks\n•\nQoS\nUAVs were used as MEC-aided systems in wireless communication\n\
    systems to ensure high QoS for ground-based users. The UAVs ﬂew\naround the users\
    \ to provide computing services in an orthogonal way\nover time.\n[96]\n2021\n\
    •\nPath planning\n•\nQoS\nA multi-UAV-enabled MEC platform was investigated to\
    \ assess RL\nQoS and path planning. The study studied the autonomy and\nself-hovering\
    \ ability of a network of UAVs relying on RL algorithms.\n[97]\n2019\n•\nPower\
    \ consumption\n•\nComputing services\n•\nResources allocation\nMobile peripheral\
    \ computing was deemed a promising technique to\naddress computationally intensive\
    \ issues. UAV-assisted MEC based\non NOMA (non-orthogonal multiple access) can\
    \ provide ﬂexible\ncomputing services for mobile terminals (MTs) in large-scale\
    \ access\nnetworks, as NOMA methods can be adaptive to massive\nconnectivity.\
    \ In this work, an optimization approach was presented\nto minimize the power\
    \ consumption of MTs by jointly optimizing\ntrajectory, task ofﬂoading, computing,\
    \ and resource allocations.\n[98]\n2018\n•\nPropagation losses\n•\nEnergy harvesting\n\
    The authors proposed a UAV-enabled MEC and wireless-powered\narchitecture to tackle\
    \ propagation packet loss in the IoT era.\n[8]\n2019\n•\nQoS\nA joint architecture\
    \ using the edge and cloud models based on UAV\nswarms was proposed to assure\
    \ high service qualities in\nresource-intensive and real-time applications.\n\
    [10]\n2018\n•\nRadio access networks\n•\nEdge caching and computing\nAn AGMEN\
    \ (aerial–ground integrated mobile edge network)\narchitecture was proposed to\
    \ address many EC network issues, such\nas communication, computing, and caching.\
    \ The objective of this\napproach was to optimally allocate computing and storage\
    \ resources.\nThe authors deployed a set of UAVs to ensure spatial and temporal\n\
    coverage, as well as ensuring data delivery for mobile IoT users.\n[99]\n2021\n\
    •\nReal-time\n•\nComputation overhead\nA trafﬁc monitoring system based on the\
    \ multi-EYE method was\npresented to detect and estimate the velocity of unmanned\
    \ vehicles using\naerial image tracking. The image processing was executed in\
    \ real-time\non an embedded edge-computing platform installed on the UAV.\nDrones\
    \ 2021, 5, 148\n18 of 30\nTable 4. Cont.\nRef.\nYear\nEvaluated Performance Metrics\n\
    Summary\n[100]\n2020\n•\nReduce cost\nThe concept of EC with UAV was used to perform\
    \ mapping and\nlodging assessment in a rice crop without human interaction to\n\
    reduce maneuvering cost and improve the quality of productivity.\nThe process\
    \ relies mainly on UAV as an edge server to execute the\nDNN algorithm while processing\
    \ the images.\n[101]\n2021\n•\nResource allocation\nIn this work, AI methods have\
    \ been used in a UAV-enabled MEC\nbased on the NOMA system. This approach allows\
    \ terrestrial mobile\nusers to ofﬂoad their computing duties intelligently. This\
    \ is intended\nto increase connectivity and minimize transmission latency and\n\
    power consumption.\n[102]\n2019\n•\nResource allocation\n•\nEnergy\nThe authors\
    \ intended to extend a 5G network for a video surveillance\napplication using\
    \ a ﬂying ad hoc network consisting of UAVs and EC\nservices. The authors aimed\
    \ to increase the performance of the entire\nMEC aerial platform, reduce latency,\
    \ and ameliorate the reliability of\nthe system’s source usage.\n[103]\n2021\n\
    •\nResource allocation\n•\nPower control in a MEC\nbased system\nTwo approaches\
    \ were proposed to deal with resource allocation and\npower control in a UAV-enabled\
    \ MEC system. The ﬁrst approach was\na centralized multi-agent RL (MARL) algorithm,\
    \ which has been\nused to optimize the system’s power consumption and resource\n\
    allocation. The second approach is a federated multi-agent\nreinforcement learning\
    \ (MAFRL) algorithm, which has been\nproposed to guarantee security and privacy.\n\
    [104]\n2019\n•\nSecurity\nA cyber-defense approach based on a non-cooperative\
    \ game\nalgorithm was proposed to protect a UAV-enabled MEC from\nnetwork and\
    \ ofﬂoading attacks.\n[105]\n2019\n•\nSecurity\n•\nPrivacy\nA MEC server-based\
    \ authentication framework was proposed to be\nintegrated into UAVs. This was\
    \ mainly to enhance the privacy and\nauthentication of UAVs.\n[106]\n2020\n•\n\
    Task ofﬂoading\n•\nResource allocation\nA UAV-assisted multi-user MEC system based\
    \ on frequency division\nmultiple access (FDMA) under Rician’s fading channels\
    \ was proposed\nto test task offloading and resource allocation performances.\n\
    [107]\n2019\n•\nTask ofﬂoading\nA theoretical game strategy based on three types\
    \ of players was\nproposed to formulate and solve the problem of ofﬂoading task\n\
    calculations in UAV-enabled MEC networks.\n[108]\n2018\n•\nTask ofﬂoading\n•\n\
    Throughput\nIn this work, a UAV was used as a mobile edge server to manage\nofﬂoading\
    \ processing tasks in real-time for ground-based users. A\nhybrid scheme based\
    \ on a semi-Markov decision process and DL was\nproposed to maximize the throughput\
    \ requirement.\n[109]\n2020\n•\nTask ofﬂoading\nTwo ofﬂoading schemes for multiple\
    \ UAVs-enabled MEC networks\nwere proposed to optimize computation time and energy\n\
    consumption. A game theory model was adopted to validate the\nproposed strategies.\n\
    [110]\n2018\n•\nTransmission power\n•\nUAV trajectory\nA UAV-assisted MEC environment\
    \ over the social internet of vehicles\n(SIoV) with a three-layer integrated architecture\
    \ was adopted. Total\nutility maximization was achieved by jointly optimizing\
    \ the\ntransmission power of the vehicle and the UAV trajectory.\n4. UAV-Enabled\
    \ MEC and Assisted MEC Based on AI\nMEC is an effective method for overcoming\
    \ time-constrained computing challenges\nin resource-constrained mobile IoT devices.\
    \ The objective is to bring CC services closer\nto customers to minimize latency\
    \ and backhaul network congestion. UAVs with storage\nunits, processing, and communication\
    \ capabilities can function as ﬂying MEC servers at\nthe IoT system’s edge. In\
    \ this context, resource-constrained IoT devices may ofﬂoad their\nDrones 2021,\
    \ 5, 148\n19 of 30\ncomputing activities, either partially or totally, to MEC-server-mounted\
    \ UAVs through\ndirect line-of-sight connectivity. Nevertheless, the system faces\
    \ many challenges related to\ntask prediction, UAV deployment, users’ association,\
    \ signal processing, and joint resource\nallocation. Considering the EC architecture,\
    \ UAVs with ﬂexibility and mobility are likely\nto deliver decentralized solution\
    \ perspectives signiﬁcantly. The ﬂying edge architecture is\nintended to improve\
    \ the CC capabilities of latency-sensitive and real-time IoT applications.\nThis\
    \ enables computing ofﬂoading at the edge of IoT devices rather than centralized\
    \ data\ncenters, reducing communication latency and facilitating real-time decision-making\
    \ and\ncontrol. Since the IoT system operates with many end-devices, a large quantity\
    \ of data\nis ofﬂoaded to the edge devices; this requires developing mechanisms\
    \ that manage and\nexploit the data for various purposes, such as auto-maintenance,\
    \ self-monitoring, and\nprediction. There is a considerable difference between\
    \ EC devices and centralized cloud\nservers regarding their processing capacities\
    \ and memory, limiting multiple AI technolo-\ngies for data processing at the\
    \ edge. Therefore, numerous criteria should be considered\nwhen incorporating\
    \ any AI technique to proﬁt from their robustness, due to memory ca-\npacity and\
    \ energy consumption constraints [111]. EC delivers resources in a decentralized\n\
    manner, allowing faster addressing of user demands than a regular CC, even with\
    \ limited\ncomputational capability. Various challenges arise, such as task scheduling,\
    \ resource allo-\ncation, and ofﬂoading, substantially inﬂuencing the overall\
    \ performance. Nevertheless,\nmost of the proposed solutions are characterized\
    \ by non-convexity and complexity, as\nthey enable continuous learning ability\
    \ for the dynamic environment and make a real-time\ninference with low computational\
    \ complexity. Applying AI to networking challenges has\ngained popularity over\
    \ the past few decades. For instance, ML has been widely used\nin the networking\
    \ domain due to its ability to interact with complex environments and\nmake decisions.\
    \ It may also provide eminent solutions to improve network performance in\nmany\
    \ subdomains, such as resource allocation, network trafﬁc prediction and classiﬁcation,\n\
    congestion control, and routing [32].\nIn most UAV-enabled MEC architectures,\
    \ a controller called the follow-me cloud\n(FMC) collects information about overall\
    \ system states (i.e., users, UAVs, and MEC servers).\nThis control unit is in\
    \ charge of managing ofﬂoading activities using AI technologies.\nFigure 5 displays\
    \ an example of a cloudlet mounted on a UAV for a UAV-assisted MEC\nsystem. The\
    \ UAV receives ofﬂoaded tasks from an IoT device and sends the results back\n\
    upon fulﬁllment of the task’s execution. Furthermore, the UAV could transport\
    \ the received\ndata to the nearest ground servers in case of complex processing\
    \ requirements that overﬁt\nthe onboard cloudlet’s capabilities. The system may\
    \ contain a set of UAVs that serve a\nmassive area of deployed IoT devices that\
    \ include mobile phones, sensors, vehicles, and\nrobots. The data generated by\
    \ the users is analyzed and treated via onboard cloudlets with\nthe help of the\
    \ AI approach.\nAs shown in Table 5, the DRL, DL, and GA can be utilized to solve\
    \ task ofﬂoading\nchallenges such as energy consumption limits, processing, and\
    \ latency. Furthermore,\nfor resource allocation management issues, the algorithms\
    \ RL, DRL, GA, and RL-ACO\nmight be utilized to regulate the energy consumption\
    \ in UAVs and reduce the latency and\nreaction time. Moreover, the later algorithms,\
    \ DE and ACO, can be applied to address\njoint optimization difﬁculties, whereas\
    \ DL may enhance UAVs’ security and path planning\nperformance.\nMEC networks\
    \ should offer seamless connection, meet the QoS needs of many sensors,\nand handle\
    \ a vast volume of data created by physical surroundings. AI approaches offering\n\
    robust analysis, learning, optimizing, and intelligent recognition capabilities\
    \ may be inte-\ngrated into UAV-enabled MEC systems to intelligently carry out\
    \ performance optimization,\ninformation discovery, advanced learning, structure\
    \ organization, and complex decision-\nmaking. Relevant AI techniques include\
    \ supervised learning, unsupervised learning, and\nreinforcement learning.\nDrones\
    \ 2021, 5, 148\n20 of 30\nassisted MEC system. The UAV receives offloaded tasks\
    \ from an IoT device and sends the \nresults back upon fulfillment of the task’s\
    \ execution. Furthermore, the UAV could \ntransport the received data to the nearest\
    \ ground servers in case of complex processing \nrequirements that overfit the\
    \ onboard cloudlet’s capabilities. The system may contain a \nset of UAVs that\
    \ serve a massive area of deployed IoT devices that include mobile phones, \n\
    sensors, vehicles, and robots. The data generated by the users is analyzed and\
    \ treated via \nonboard cloudlets with the help of the AI approach. \n \nFigure\
    \ 5. UAV-enabled MEC architecture. \nAs shown in Table 5, the DRL, DL, and GA\
    \ can be utilized to solve task offloading \nchallenges such as energy consumption\
    \ limits, processing, and latency. Furthermore, for \nresource allocation management\
    \ issues, the algorithms RL, DRL, GA, and RL-ACO might \nbe utilized to regulate\
    \ the energy consumption in UAVs and reduce the latency and \nreaction time. Moreover,\
    \ the later algorithms, DE and ACO, can be applied to address \njoint optimization\
    \ difficulties, whereas DL may enhance UAVs’ security and path \nplanning performance.\
    \ \nMEC networks should offer seamless connection, meet the QoS needs of many\
    \ \nsensors, and handle a vast volume of data created by physical surroundings.\
    \ AI \napproaches offering robust analysis, learning, optimizing, and intelligent\
    \ recognition \ncapabilities may be integrated into UAV-enabled MEC systems to\
    \ intelligently carry out \nperformance optimization, information discovery, advanced\
    \ learning, structure \norganization, and complex decision-making. Relevant AI\
    \ techniques include supervised \nlearning, unsupervised learning, and reinforcement\
    \ learning. \nFigure 5. UAV-enabled MEC architecture.\nFor instance, DRL does\
    \ not require labeled training data for resource allocation. Thus,\nit may enhance\
    \ the process of ofﬂoading choices based on various states of the channel en-\n\
    vironment. This results in reducing the energy bandwidth and computations. To\
    \ that end,\nan MDP method was provided to reduce the delay, energy consumption,\
    \ and bandwidth\nin UAV-assisted MEC by analyzing the instability of energy arrival,\
    \ stochastic computation\ntasks that are provided by wireless users, and a time-varying\
    \ channel state [112]. According\nto the authors of [113], UAV-assisted MEC-based\
    \ DL and DRL would ease the develop-\nment of next-generation communications.\
    \ This is particularly true for joint optimization\nchallenges to improve system\
    \ efﬁciency. Furthermore, UAV communication will be incor-\nporated with 6G networks,\
    \ where IoT device mobility might lead to position uncertainty. In\nthis case,\
    \ DRL, as a hybrid of DL and RL, can offer decision-making solutions and optimize\n\
    handover issues in real-time. This approach allows UAVs to move dynamically and\
    \ in\nreal-time while assuring and minimizing communication delay [114].\nTable\
    \ 5. AI-based approaches used in UAV-enabled MEC.\nAddressed Issues\nAI Approach\n\
    Metrics\nReferences\nTask ofﬂoading\nRL\nEnergy consumption, processing time,\
    \ latency\n[115]\nDRL\nEnergy consumption, latency, cost\n[116]\nGA\nEnergy consumption,\
    \ latency\n[117,118]\nDL\nSecurity, privacy, task prediction, and\ncomputation\
    \ ofﬂoading\n[119,120]\nFI\nExecution time\n[121]\nResources allocation\nRL\n\
    Resources allocation, energy\n[122,123]\nDRL\nLatency, response time, resource\
    \ utilization,\nenergy consumption\n[124,125]\nGA\nEnergy consumption, latency\n\
    [126]\nRL-ACO\nThroughput\n[123]\nJoint optimization issue\nRL\nSecurity and privacy,\
    \ energy consumption\n[127]\nDRL\nCost, energy consumption, latency\n[128]\nGA\n\
    Energy consumption, makespan\n[129]\nDL\nEnergy consumption, cost\n[130]\nRL-ACO\n\
    Energy consumption\n[131]\nSecurity\nRL\nSecurity caching\n[127]\nPath planning\n\
    RL\nPath planning\n[35,132,133]\nDrones 2021, 5, 148\n21 of 30\nAuthors in [134]\
    \ have proved that the deep supervised learning (DSL) method min-\nimizes the\
    \ computation and ofﬂoading overheads and cost of mobile users in the MEC\nsystem.\
    \ This technique allows terrestrial users to obtain an optimal ofﬂoading policy,\
    \ with\nenergy-saving and processing speed enhancement.\nThe authors of [91] have\
    \ investigated the challenges associated with applying AI\ntechniques to UAV-NOMA-MEC\
    \ networks. They proposed an architecture that relies\non AI-based approaches,\
    \ particularly on federated learning and reinforcement learning.\nThe proposed\
    \ framework was dedicated to enabling terrestrial mobile users to ofﬂoad\ntheir\
    \ computational tasks simultaneously, intelligently, and ﬂexibly, thus enhancing\
    \ their\nconnectivity and reducing their transmission latency and energy consumption.\n\
    The authors of [135] used RL and transfer learning algorithms to reduce the latency\
    \ and\nenergy consumption in UAV-enabled MEC networks. They proved that transfer\
    \ learning,\nwhen combined with RL, could signiﬁcantly enhance the system training\
    \ performance\nwhen the users operated dynamically.\nAn optimization problem based\
    \ on MDP was formulated by the authors of [35] to\naddress UAV trajectory optimization\
    \ in UAV-mounted MEC networks. The approach\naimed to enhance the overall system\
    \ QoS, maximize the long-term system reward, and\nmeet the QoS constraint, including\
    \ the computation tasks of mobile users. In [136], the\nauthors have used the\
    \ semi-Markov process and DRL-based algorithms to address the\nUAV-enabled MEC\
    \ networks’ ofﬂoading decisions and resource management policies.\nThe authors\
    \ of [137] have developed a platform known as a ﬂying UAV MEC, in which\nUAVs\
    \ are outﬁtted with computing resources and provide task-ofﬂoading services to\
    \ users.\nThe suggested architecture’s primary purpose was to maximize UAV aerial\
    \ trajectory,\nuser association, and resource allocation. The trajectory control\
    \ method has been used\nto address the optimization issue, assisted by an RL-based\
    \ technique. The results of this\napproach outperformed the results of the equivalent\
    \ benchmark methods. Moreover, the\nauthors of [138] formulated an ML-based novel\
    \ framework to optimize UAV trajectories\nby estimating the user’s mobility data\
    \ to ﬁnd optimal initial UAV placement locations.\nThe joint problem, consisting\
    \ of UAVs trajectories and power control to improve the sum\nrate and maintain\
    \ the data rate requirements of mobile users, was also addressed in the\nemployment\
    \ of a multi-agent Q-learning-based technique. A smart ofﬂoading based on the\n\
    deep Q-learning approach was proposed by the authors of [139] to optimize performance\n\
    in terms of the delay perceived by ground devices connected to the FANET, to enable\
    \ MEC\nin the 5G ﬁeld.\n5. Discussion and Open Issues\nComputational intelligence,\
    \ when combined with UAVs, has improved the underlying\ntechnologies and implementations\
    \ of IoT applications. Nevertheless, researchers should\naddress the remaining\
    \ challenges. Therefore, some signiﬁcant issues need more attention\nin order\
    \ to beneﬁt from UAVs for the realization of ﬂying ECs. These issues may be\n\
    related to scientiﬁc, technological, and societal problems, including challenges\
    \ regarding\nthe technical aspects of the technology, security and privacy concerns,\
    \ and standardization.\nThe challenges concern both the UAVs themselves and EC\
    \ devices. Therefore, great effort\nis needed to address the following challenges.\n\
    Energy consumption: In any UAV-enabled IoT system, most sensors, edge devices,\
    \ and\ndrones are battery-powered and can only remain powered for a limited period.\
    \ Therefore,\nefﬁcient energy consumption protocols and mechanisms are essential\
    \ for UAVs and IoT de-\nvices to ensure a long network lifetime. Improvement efforts\
    \ should address the hardware\nand software architecture of the IoT components\
    \ by integrating energy-harvesting solutions\nor efﬁcient routing protocols. For\
    \ example, AI schemes can be adopted to predict a UAV’s\nresidual energy and energy\
    \ dissipation through the precise adjustment of transmission\nand control parameters\
    \ concerning channel changes. The processing energy dissipation,\ncommunication\
    \ energy, storage energy, and environmental reliability should be considered\n\
    to mitigate the energy of UAVs [115,140]. Moreover, the issues listed below should\
    \ also\nDrones 2021, 5, 148\n22 of 30\nbe considered to mitigate energy consumption,\
    \ to extend the on-air ﬂying time of the\nUAVs employed.\nInterference: The communication\
    \ links between UAVs and IoT devices may become\ndisconnected due to interference,\
    \ which reduces latency performance and may also affect\nthe overall network,\
    \ especially when the UAVs act as a mobile BS. Therefore, the problem\nof interference\
    \ should be addressed, especially in urban and industrial environments,\nwhere\
    \ the number of interconnected devices on the same frequency band is very dense.\
    \ An\nAI-based solution can be applied in UAV-enabled MEC to predict the signal-to-interference\n\
    ratio, based on the collected channel state information (CSI). It is then possible\
    \ to decide on\nthe most appropriate scheme to combat the impact of interference\
    \ or to adjust transmission\nparameters in order to reduce power consumption.\n\
    Interoperability: In any IoT environment, many devices are expected to handle\
    \ the\nrequired tasks without any effort from the end-users. These devices try\
    \ to connect and\ninteract with each other using different protocols and communication\
    \ paradigms. With\nthis diversity, it is sometimes challenging to orchestrate\
    \ the system smoothly. Therefore,\nfurther investigations are necessary to unify\
    \ the controller and communication protocols to\nensure interoperability among\
    \ them.\nMobility and path planning: UAVs require auto-maneuvering without distant\
    \ hu-\nman pilot intervention in random dynamic IoT applications. Therefore, many\
    \ intelligent\nmethods should be considered to enable autonomous UAV ﬂights that\
    \ include collision\navoidance. AI algorithms are the most viable solutions that\
    \ can be used to detect obsta-\ncles and avoid collisions [141]. For instance,\
    \ DL techniques can enable learning from the\ngathered data, which makes their\
    \ integration into UAV a signiﬁcant solution. A serious\neffort should be considered\
    \ to develop green-federated AI solutions, such as RL, to ensure\naccurate auto-ﬂying\
    \ decisions and path and trajectory planning [35,132].\nScalability: The scalability\
    \ challenges concern resources, applications, load balancing,\nand connections.\
    \ Enabling high scalability requires designing efﬁcient schemes that could\neffectively\
    \ manage heterogeneous mobile devices and servers in a UAV-enabled MEC\nenvironment,\
    \ with its highly dynamic demand behavior. For example, some mobile appli-\ncations,\
    \ such as UAVs and autonomous driving, require high data throughput ofﬂoading\
    \ to\nsuccessfully provide such services, despite heterogeneity in the number\
    \ of mobile devices\nand the dynamic demand behavior of the applications mentioned\
    \ in the MEC environment.\nThe MEC system should have an acceptable degree of\
    \ scalability regarding the number\nof servers and services required. As a result,\
    \ it is challenging for difﬁcult areas to estab-\nlish connections and communications\
    \ between mobile devices and servers. To achieve\nconvenient and cost-effective\
    \ mobility and scalability, resulting in continuous service, it is\nnecessary\
    \ to have a stable connection, even in adverse environmental conditions.\nSecurity:\
    \ Drones enable ubiquitous services on an IoT scale. The communications\nand controls\
    \ are realized through P2P wireless transmissions and thus are open to many\n\
    security threats. Therefore, unauthorized connections threaten the system’s privacy.\
    \ It is\nnecessary to propose and design security mechanisms to improve UAV-enabled\
    \ MEC sys-\ntems’ security [142]. The effort should focus on the physical, application,\
    \ and MAC layers.\nThe solutions should integrate recent robust techniques such\
    \ as blockchains, especially\nin IoT applications where UAVs are expected to facilitate\
    \ communication networks. The\ncombination of UAVs with blockchain and AI is now\
    \ an exciting avenue of research to\npredict all sorts of attacks and malware\
    \ that threaten the system’s privacy [127]. However,\nwhile there has been signiﬁcant\
    \ progress in this area, more work needs to be done. Power\nconsumption might\
    \ be a critical constraint for blockchain-based applications as they need\nmore\
    \ computing power. Increasingly complex attacks, such as quantum attacks, ML,\
    \ and\ntheory-based game attacks, could challenge the privacy of blockchain systems\
    \ [143]. More\nresearch is needed to make private blockchain networks more immutable\
    \ and secure in\nUAV-enabled MEC architectures. Moreover, blockchain-enabled softwarization\
    \ for secure\nUAV network systems is also a critical challenge. Blockchain implementation\
    \ in UAV\nDrones 2021, 5, 148\n23 of 30\nsystems presents a complex system integration\
    \ problem requiring rigorous testing before\nconcrete implementation [12].\nIntegration\
    \ of AI schemes: Recently, the utilization of AI schemes among DL, ML, and\nRL\
    \ has become increasingly of interest, to beneﬁt from their powerful performance.\
    \ AI\nschemes are being integrated into UAV-enabled MEC systems as a way to make\
    \ contextual\ndecisions and learn from aggregated data gathered from previous\
    \ tracking experiences. The\ndata collected by the sensors in real-time can be\
    \ proﬁtably exploited for the autonomous\npiloting of UAVs. Therefore, processing\
    \ tasks demand strict computing and storage\nrequirements at computing facilities,\
    \ to be executed exceptionally at the edge. UAVs\nalso have energy and storage\
    \ limitations; thus, portable and lightweight RL, ML, and DL\nalgorithms should\
    \ be designed to cope with these constraints.\nRegulations: Despite the rapid\
    \ emergence of this technology, UAV regulations are\nstill in their infancy, and\
    \ a lack of heterogeneity of national rules and varying levels of\nimplementation\
    \ can be observed. These regulations differ from state to state, and the type\n\
    of regulation is based on the requirements of that use. Several problems are associated\
    \ with\nUAV regulation, including delays in ﬂight approval and poorly documented\
    \ administrative\nprocesses limiting the desired ﬂexibility, preventing widespread\
    \ use of the technology [144].\nLatency and computation issues: Communication\
    \ latency and computing optimization\nremain concerns in MEC-enabled UAV applications,\
    \ affecting transmission efﬁciency and\nreaction time under communication and\
    \ computing constraints. UAV transmission success\nmay be accomplished by offering\
    \ effective methods that decrease response delay. In\none study [145], for example,\
    \ stochastic geometry and queueing theory approaches were\nstudied to minimize\
    \ the response delay for a MEC-enabled UAV network.\nResource allocation: Due\
    \ to UAV battery concerns and trajectory constraints, resource\nallocation is\
    \ critical in UAV-enabled MEC networks. Resources allocation is involved in\n\
    three processes: computing task ofﬂoading, local computing, and UAV hovering.\
    \ Design-\ning an appropriate trajectory can ultimately compromise the calculated\
    \ performance and\noperating costs. According to the authors of [146], resource\
    \ allocation may be structured to\nmeet various goals, including computing bit\
    \ maximization, energy minimization, compu-\ntational efﬁciency maximization,\
    \ cost minimization, completion time minimization, and\nthe consideration of fairness.\n\
    UAV-enabled IoT for B5G and 6G issues: Data-gathering faces several problems in\
    \ IoT\nthat extend beyond the ﬁfth-generation (B5G) and upcoming sixth-generation\
    \ (6G) wireless\nmobile networks. A large amount of data will be generated by\
    \ heterogeneous devices,\nparticularly IoT devices and smartphones at the mobile\
    \ edge; these data are fragmented and\ndispersed among several machines. Therefore,\
    \ distributed solutions such as UAV-enabled\nMEC should be leveraged near mobile\
    \ users to ofﬂoad and process the data. Meanwhile,\ngrowing privacy concerns make\
    \ data collecting increasingly challenging. This consumes\nmore energy and decreases\
    \ the system’s ofﬂoading time [147].\n6. Conclusions\nThe development of wireless\
    \ communication technologies and IT services has made\nthe role of drones more\
    \ ubiquitous in various ﬁelds of application. Drones can serve\nas a link between\
    \ smart devices and cloud data centers, to provide many services that\ncan increase\
    \ the performance of a given IoT system. To the best of our knowledge, this\n\
    paper is considered the ﬁrst work that provides a review of drone-enabled MECs\
    \ based on\nAI. This work discusses the current research trends and provides future\
    \ insights into the\npotential uses of UAV-enabled MEC in the ﬁeld of IoT. It\
    \ highlights the potential roles that\nUAVs can play in enabling communications\
    \ and intelligent computing in the IoT era, by\nreferring to the most widely emerging\
    \ AI techniques that are employed. As mentioned,\nUAVs as MECs are attracting\
    \ considerable interest in scientiﬁc research, to address the\nvarious problems\
    \ and challenges experienced in order to improve the performance of such\napplications\
    \ in different scenarios, such as resource allocation, energy efﬁciency, latency,\n\
    task ofﬂoading, and security. UAV-enabled MEC present an emerging concept that\
    \ require\nDrones 2021, 5, 148\n24 of 30\nmore effort to achieve the necessary\
    \ performance in every scenario of UAV application in\nIoT environments, especially\
    \ regarding MEC.\nAuthor Contributions: Y.Y. carried out this research as part\
    \ of his Ph.D. thesis, under the supervision\nof A.E.O. and M.A. Y.Y., I.E.-Z.,\
    \ A.G.-G., M.A. and A.E.O. contributed to the design and implementa-\ntion of\
    \ the research review, upon the analysis and the selection of the papers, and\
    \ the writing of the\nmanuscript. All authors have read and agreed to the published\
    \ version of the manuscript.\nFunding: This research received no external funding.\n\
    Institutional Review Board Statement: Not applicable.\nInformed Consent Statement:\
    \ Not applicable.\nConﬂicts of Interest: The authors declare no conﬂict of interest.\n\
    Abbreviations\nThe following abbreviations are used in this manuscript.\nAbbreviation\n\
    Deﬁnition\nAI\nArtiﬁcial intelligence\nCC\nCloud computing\nCPU\nCentral processing\
    \ units\nCV\nComputer vision\nDRL\nDeep reinforcement learning\nEC\nEdge computing\n\
    FANET\nFlying ad hoc network\nFI\nFuzzy inference\nGA\nGenetic algorithm\nGPU\n\
    Graphics processing units\nIoFT\nInternet of Flying Things\nIoT\nInternet of Things\n\
    ISM\nIndustrial scientiﬁc medical\nLC\nLocal computing\nLoRa\nLong-range\nTDMA\n\
    Time division multiple access\nMEC\nMobile edge computing\nML\nMachine learning\n\
    NOMA\nNon-orthogonal multiple access\nQoS\nQuality of service\nRL\nReinforcement\
    \ learning\nUAV\nUnmanned aerial vehicle\nVANET\nVehicular ad hoc network\nBLE\n\
    Bluetooth low energy\nRL-ACO\nReinforcement learning based on ant-colony optimization\n\
    DRL\nDeep reinforcement learning\nVTOL\nVertical take-off and landing\nHTOL\n\
    Horizontal take-off and landing\nLiDAR\nLight detection and ranging\nReferences\n\
    1.\nNižeti´c, S.; Šoli´c, P.; López-de-Ipiña González-de-Artaza, D.; Patrono,\
    \ L. Internet of Things (IoT): Opportunities, issues and\nchallenges towards a\
    \ smart and sustainable future. J. Clean. Prod. 2020, 274, 122877. [CrossRef]\n\
    2.\nShaﬁque, K.; Khawaja, B.A.; Sabir, F.; Qazi, S.; Mustaqim, M. Internet of\
    \ things (IoT) for next-generation smart systems: A review\nof current challenges,\
    \ future trends and prospects for emerging 5G-IoT Scenarios. IEEE Access 2020,\
    \ 8, 23022–23040. [CrossRef]\n3.\nMozaffari, M.; Saad, W.; Bennis, M.; Nam, Y.H.;\
    \ Debbah, M. A Tutorial on UAVs for Wireless Networks: Applications, Challenges,\n\
    and Open Problems. IEEE Commun. Surv. Tutor. 2019, 21, 2334–2360. [CrossRef]\n\
    4.\nLyu, J.; Zeng, Y.; Zhang, R.; Lim, T.J. Placement Optimization of UAV-Mounted\
    \ Mobile Base Stations. IEEE Commun. Lett. 2017,\n21, 604–607. [CrossRef]\nDrones\
    \ 2021, 5, 148\n25 of 30\n5.\nAlzenad, M.; El-Keyi, A.; Lagum, F.; Yanikomeroglu,\
    \ H. 3-D Placement of an Unmanned Aerial Vehicle Base Station (UAV-BS) for\nEnergy-Efﬁcient\
    \ Maximal Coverage. IEEE Wirel. Commun. Lett. 2017, 6, 434–437. [CrossRef]\n6.\n\
    Zhang, S.; Zhang, H.; Di, B.; Song, L. Joint trajectory and power optimization\
    \ for UAV sensing over cellular networks. IEEE\nCommun. Lett. 2018, 22, 2382–2385.\
    \ [CrossRef]\n7.\nMotlagh, N.H.; Bagaa, M.; Taleb, T. UAV-Based IoT Platform:\
    \ A Crowd Surveillance Use Case. IEEE Commun. Mag. 2017, 55,\n128–134. [CrossRef]\n\
    8.\nChen, W.; Liu, B.; Huang, H.; Guo, S.; Zheng, Z. When UAV Swarm Meets Edge-Cloud\
    \ Computing: The QoS Perspective.\nIEEE Netw. 2019, 33, 36–43. [CrossRef]\n9.\n\
    Mao, Y.; You, C.; Zhang, J.; Huang, K.; Letaief, K.B. A Survey on Mobile Edge\
    \ Computing: The Communication Perspective.\nIEEE Commun. Surv. Tutor. 2017, 19,\
    \ 2322–2358. [CrossRef]\n10.\nCheng, N.; Xu, W.; Shi, W.; Zhou, Y.; Lu, N.; Zhou,\
    \ H.; Shen, X. Air-ground integrated mobile edge networks: Architecture,\nchallenges,\
    \ and opportunities. IEEE Commun. Mag. 2018, 56, 26–32. [CrossRef]\n11.\nLiu,\
    \ J.; Zhou, A.; Liu, C.; Zhang, T.; Qi, L.; Wang, S.; Buyya, R. Reliability-Enhanced\
    \ Task Ofﬂoading in Mobile Edge Computing\nEnvironments. IEEE Internet Things\
    \ J. 2021, 124–129. [CrossRef]\n12.\nKumari, A.; Gupta, R.; Tanwar, S.; Kumar,\
    \ N. A taxonomy of blockchain-enabled softwarization for secure UAV network. Comput.\n\
    Commun. 2020, 161, 304–323. [CrossRef]\n13.\nMehta, P.; Gupta, R.; Tanwar, S.\
    \ Blockchain envisioned UAV networks: Challenges, solutions, and comparisons.\
    \ Comput. Commun.\n2020, 151, 518–538. [CrossRef]\n14.\nAbrar, M.; Ajmal, U.;\
    \ Almohaimeed, Z.M.; Gui, X.; Akram, R.; Masroor, R. Energy Efﬁcient UAV-Enabled\
    \ Mobile Edge Computing\nfor IoT Devices: A Review. IEEE Access 2021, 9, 127779–127798.\
    \ [CrossRef]\n15.\nSharma, A.; Vanjani, P.; Paliwal, N.; Basnayaka, C.M.W.; Jayakody,\
    \ D.N.K.; Wang, H.C.; Muthuchidambaranathan, P. Communica-\ntion and networking\
    \ technologies for UAVs: A survey. J. Netw. Comput. Appl. 2020, 168, 102739. [CrossRef]\n\
    16.\nZhang, W.; Li, L.; Zhang, N.; Han, T.; Wang, S. Air-Ground Integrated Mobile\
    \ Edge Networks: A Survey. IEEE Access 2020, 8,\n125998–126018. [CrossRef]\n17.\n\
    Shakarami, A.; Ghobaei-Arani, M.; Shahidinejad, A. A survey on the computation\
    \ ofﬂoading approaches in mobile edge\ncomputing: A machine learning-based perspective.\
    \ Comput. Netw. 2020, 182, 107496. [CrossRef]\n18.\nKorchenko, A.G.; Illyash,\
    \ O.S. The generalized classiﬁcation of Unmanned Air Vehicles. In Proceedings\
    \ of the 2013 IEEE 2nd\nInternational Conference Actual Problems of Unmanned Air\
    \ Vehicles Developments Proceedings (APUAVD), Kiev, Ukraine,\n15–17 October 2013;\
    \ pp. 28–34. [CrossRef]\n19.\nChamola, V.; Kotesh, P.; Agarwal, A.; Naren; Gupta,\
    \ N.; Guizani, M. A Comprehensive Review of Unmanned Aerial Vehicle\nAttacks and\
    \ Neutralization Techniques. Ad Hoc Netw. 2021, 111, 102324. [CrossRef]\n20.\n\
    Guo, Y.; Yin, G.; Sun, H.; Wang, H.; Chen, S.; Senthilnath, J.; Wang, J.; Fu,\
    \ Y. Scaling effects on chlorophyll content estimations\nwith RGB camera mounted\
    \ on a UAV platform using machine-learning methods. Sensors 2020, 20, 5130. [CrossRef]\n\
    21.\nLin, Y.C.; Cheng, Y.T.; Zhou, T.; Ravi, R.; Hasheminasab, S.M.; Flatt, J.E.;\
    \ Troy, C.; Habib, A. Evaluation of UAV LiDAR for\nmapping coastal environments.\
    \ Remote Sens. 2019, 11, 2893. [CrossRef]\n22.\nMiyoshi, G.T.; Arruda, S.; Osco,\
    \ L.P.; Junior, M.; Gonçalves, D.N.; Imai, N.N. A Novel Deep Learning Method to\
    \ Identify Single\nTree Species in UAV-Based Hyperspectral Images. Remote Sens.\
    \ 2020, 12, 1294. [CrossRef]\n23.\nCen, H.; Wan, L.; Zhu, J.; Li, Y.; Li, X.;\
    \ Zhu, Y.; Weng, H. Dynamic monitoring of biomass of rice under different nitrogen\n\
    treatments using a lightweight UAV with dual image—Frame snapshot cameras. Plant\
    \ Methods 2019, 15, 32. [CrossRef] [PubMed]\n24.\nHill, A.C.; Laugier, E.J. Archaeological\
    \ Remote Sensing Using Infrared (NIR) Imagery: A Case Study at the Enﬁeld Shaker\
    \ Village,\nNew Hampshire. Remote Sens. 2020, 12, 690. [CrossRef]\n25.\nZaidi,\
    \ S.; Atiquzzaman, M.; Calafate, C.T. Internet of Flying Things (IoFT): A Survey.\
    \ Comput. Commun. 2021, 165, 53–74.\n[CrossRef]\n26.\nNazib, R.A.; Moh, S. Routing\
    \ Protocols for Unmanned Aerial Vehicle-Aided Vehicular Ad Hoc Networks: A Survey.\
    \ IEEE Access\n2020, 8, 77535–77560. [CrossRef]\n27.\nAl-Fuqaha, A.; Guizani,\
    \ M.; Mohammadi, M.; Aledhari, M.; Ayyash, M. Internet of Things: A Survey on\
    \ Enabling Technologies,\nProtocols, and Applications. IEEE Commun. Surv. Tutor.\
    \ 2015, 17, 2347–2376. [CrossRef]\n28.\nMekki, K.; Bajic, E.; Chaxel, F.; Meyer,\
    \ F. A comparative study of LPWAN technologies for large-scale IoT deployment.\
    \ ICT Express\n2019, 5, 1–7. [CrossRef]\n29.\nYazid, Y.; Ez-Zazi, I.; Arioua,\
    \ M.; Oualkadi, A.E.L. On the LoRa performances under different physical layer\
    \ parameter selection.\nIn Proceedings of the 2020 International Symposium on\
    \ Advanced Electrical and Communication Technologies (ISAECT), Kenitra,\nMorocco,\
    \ 25–27 November 2020; pp. 13–18. [CrossRef]\n30.\nAkpakwu, G.A.; Silva, B.J.;\
    \ Hancke, G.P.; Abu-Mahfouz, A.M. A Survey on 5G Networks for the Internet of\
    \ Things: Communica-\ntion Technologies and Challenges. IEEE Access 2017, 6, 3619–3647.\
    \ [CrossRef]\n31.\nMignardi, S.; Marini, R.; Verdone, R.; Buratti, C. On the performance\
    \ of a uav-aided wireless network based on nb-iot. Drones\n2021, 5, 94. [CrossRef]\n\
    32.\nErdelj, M.; Król, M.; Natalizio, E. Wireless Sensor Networks and Multi-UAV\
    \ systems for natural disaster management.\nComput. Netw. 2017, 124, 72–86. [CrossRef]\n\
    Drones 2021, 5, 148\n26 of 30\n33.\nSohail, M.F.; Member, S. Non-Orthogonal Multiple\
    \ Access for Unmanned Aerial Vehicle Assisted Communication. IEEE Access\n2018,\
    \ 6, 22716–22727. [CrossRef]\n34.\nLiu, D.; Xu, Y.; Wang, J.; Chen, J.; Yao, K.;\
    \ Wu, Q.; Anpalagan, A. Opportunistic UAV utilization in wireless networks: Motivations,\n\
    applications, and challenges. IEEE Commun. Mag. 2020, 58, 62–68. [CrossRef]\n\
    35.\nLiu, Q.; Shi, L.; Sun, L.; Li, J.; Ding, M.; Shu, F.S. Path Planning for\
    \ UAV-Mounted Mobile Edge Computing with Deep\nReinforcement Learning. IEEE Trans.\
    \ Veh. Technol. 2020, 69, 5723–5728. [CrossRef]\n36.\nAli, N.; Jhanjhi, N.Z.;\
    \ Nawaz, S.; Sher, R.; Usmani, A. Smart trafﬁc monitoring system using Unmanned\
    \ Aerial Vehicles (UAVs).\nComput. Commun. 2020, 157, 434–443. [CrossRef]\n37.\n\
    Jiang, F.; Wang, K.; Dong, L.; Pan, C.; Xu, W.; Yang, K. Deep Learning Based Joint\
    \ Resource Scheduling Algorithms for Hybrid\nMEC Networks. IEEE Internet Things\
    \ J. 2020, 7, 6252–6265. [CrossRef]\n38.\nZhou, F.; Wu, Y.; Sun, H.; Chu, Z. UAV-Enabled\
    \ mobile edge computing: Ofﬂoading optimization and trajectory design. In\nProceedings\
    \ of the 2018 IEEE International Conference on Communications (ICC), Kansas City,\
    \ MO, USA, 20–24 May 2018;\npp. 1–6. [CrossRef]\n39.\nKitpo, N.; Inoue, M. Early\
    \ rice disease detection and position mapping system using drone and IoT architecture.\
    \ In Proceedings of\nthe 2018 12th South East Asian Technical University Consortium\
    \ (SEATUC), Yogyakarta, Indonesia, 12–13 March 2018. [CrossRef]\n40.\nPopescu,\
    \ D.; Stoican, F.; Stamatescu, G.; Ichim, L.; Dragana, C. Advanced UAV–WSN System\
    \ for Intelligent Monitoring in\nPrecision Agriculture. Sensors 2020, 20, 817.\
    \ [CrossRef]\n41.\nMazzia, V.; Comba, L.; Khaliq, A.; Chiaberge, M.; Gay, P. UAV\
    \ and Machine Learning Based Reﬁnement of a Satellite-Driven\nVegetation Index\
    \ for Precision Agriculture. Sensors 2020, 20, 2530. [CrossRef]\n42.\nMaddikunta,\
    \ P.K.R.; Hakak, S.; Alazab, M.; Bhattacharya, S.; Gadekallu, T.R.; Khan, W.Z.;\
    \ Pham, Q.V. Unmanned Aerial Vehicles\nin Smart Agriculture: Applications, Requirements,\
    \ and Challenges. IEEE Sens. J. 2021, 21, 17608–17619. [CrossRef]\n43.\nGrosso,\
    \ R.; Mecca, U.; Moglia, G.; Prizzon, F.; Rebaudengo, M. Collecting built environment\
    \ information using UAVs: Time and\napplicability in building inspection activities.\
    \ Sustainability 2020, 12, 4731. [CrossRef]\n44.\nPanday, U.S.; Shrestha, N.;\
    \ Maharjan, S.; Pratihast, A.K.; Shahnawaz; Shrestha, K.L.; Aryal, J. Correlating\
    \ the plant height of\nwheat with aboveground biomass and crop yield using drone\
    \ imagery and crop surface model, a case study from Nepal. Drones\n2020, 4, 28.\
    \ [CrossRef]\n45.\nHentschke, M.; de Freitas, E.P.; Hennig, C.H.; da Veiga, I.C.G.\
    \ Evaluation of altitude sensors for a crop spraying drone. Drones\n2018, 2, 25.\
    \ [CrossRef]\n46.\nSuen, H.K.; Ary, D. Reliability: Conventional Methods. Anal.\
    \ Quant. Behav. Obs. Data 2020, 111–142. [CrossRef]\n47.\nAgapiou, A. Vegetation\
    \ extraction using visible-bands from openly licensed unmanned aerial vehicle\
    \ imagery. Drones 2020, 4, 27.\n[CrossRef]\n48.\nSharma, V.; Choudhary, G.; Ko,\
    \ Y. Behavior and Vulnerability Assessment of Drones-Enabled Industrial Internet\
    \ of Things (IIoT).\nIEEE Access 2018, 6, 43368–43383. [CrossRef]\n49.\nSalhaoui,\
    \ M.; Guerrero-González, A.; Arioua, M.; Ortiz, F.J.; El Oualkadi, A.; Torregrosa,\
    \ C.L. Smart industrial iot monitoring and\ncontrol system based on UAV and cloud\
    \ computing applied to a concrete plant. Sensors 2019, 19, 3316. [CrossRef] [PubMed]\n\
    50.\nNooralishahi, P.; Ibarra-Castanedo, C.; Deane, S.; López, F.; Pant, S.; Genest,\
    \ M.; Avdelidis, N.P.; V Maldague, X.P.; González\nJorge, H.; Miguel González\
    \ de Santos, L. Drone-Based Non-Destructive Inspection of Industrial Sites: A\
    \ Review and Case Studies.\nDrones 2021, 5, 106. [CrossRef]\n51.\nShahmoradi,\
    \ J.; Talebi, E.; Roghanchi, P.; Hassanalian, M. A Comprehensive Review of Applications\
    \ of Drone Technology in the\nMining Industry. Drones 2020, 4, 34. [CrossRef]\n\
    52.\nCowley, D.C.; Moriarty, C.; Geddes, G.; Brown, G.L.; Wade, T.; Nichol, C.J.\
    \ UAVs in context: Archaeological airborne recording in\na national body of survey\
    \ and record. Drones 2018, 2, 2. [CrossRef]\n53.\nMangewa, L.J.; Ndakidemi, P.A.;\
    \ Munishi, L.K. Integrating UAV technology in an ecological monitoring system\
    \ for community\nwildlife management areas in Tanzania. Sustainability 2019, 11,\
    \ 6116. [CrossRef]\n54.\nRees, A.F.; Avens, L.; Ballorain, K.; Bevan, E.; Broderick,\
    \ A.C.; Carthy, R.R.; Christianen, M.J.A.; Duclos, G.; Heithaus, M.R.;\nJohnston,\
    \ D.W.; et al. The potential of unmanned aerial systems for sea turtle research\
    \ and conservation: A review and future\ndirections. Endanger. Species Res. 2018,\
    \ 35, 81–100. [CrossRef]\n55.\nSalhaoui, M.; Molina-molina, J.C.; Guerrero-gonz,\
    \ A.; Arioua, M.; Ortiz, F.J. Autonomous Underwater Monitoring System for\nDetecting\
    \ Life on the Seabed by Means of Computer Vision Cloud Services. Remote Sens.\
    \ 2020, 12, 198. [CrossRef]\n56.\nWang, D.; Shao, Q.; Yue, H. Surveying wild animals\
    \ from satellites, manned aircraft and unmanned aerial systems (UASs):\nA review.\
    \ Remote Sens. 2019, 11, 1308. [CrossRef]\n57.\nChamola, V.; Hassija, V.; Gupta,\
    \ V.; Guizani, M. A Comprehensive Review of the COVID-19 Pandemic and the Role\
    \ of IoT, Drones,\nAI, Blockchain, and 5G in Managing its Impact. IEEE Access\
    \ 2020, 8, 90225–90265. [CrossRef]\n58.\nJeyabalan, V.; Nouvet, E.; Meier, P.;\
    \ Donelle, L. Context-speciﬁc challenges, opportunities, and ethics of drones\
    \ for healthcare\ndelivery in the eyes of program managers and ﬁeld staff: A multi-site\
    \ qualitative study. Drones 2020, 4, 44. [CrossRef]\n59.\nZhu, J.; Sun, K.; Jia,\
    \ S.; Li, Q.; Hou, X.; Lin, W.; Liu, B.; Qiu, G. Urban Trafﬁc Density Estimation\
    \ Based on Neural Network. IEEE J.\nSel. Top. Appl. Earth Obs. Remote Sens. 2018,\
    \ 11, 4968–4981. [CrossRef]\n60.\nCongress, S.S.C.; Puppala, A.J.; Lundberg, C.L.\
    \ Total system error analysis of UAV-CRP technology for monitoring transportation\n\
    infrastructure assets. Eng. Geol. 2018, 247, 104–116. [CrossRef]\nDrones 2021,\
    \ 5, 148\n27 of 30\n61.\nOutay, F.; Abdullah, H.; Adnan, M. Applications of unmanned\
    \ aerial vehicle (UAV) in road safety, trafﬁc and highway infrastruc-\nture management:\
    \ Recent advances and challenges. Transp. Res. Part A 2020, 141, 116–129. [CrossRef]\n\
    62.\nMalihi, S.; Javad, M.; Zoej, V.; Hahn, M. Large-Scale Accurate Reconstruction\
    \ of Buildings Employing Point Clouds Generated\nfrom UAV Imagery. Remote Sens.\
    \ 2018, 10, 1148. [CrossRef]\n63.\nMohamed, N.; Al-jaroodi, J.; Jawhar, I.; Idries,\
    \ A.; Mohammed, F. Technological Forecasting & Social Change Unmanned aerial\n\
    vehicles applications in future smart cities. Technol. Forecast. Soc. Chang. 2020,\
    \ 153, 119293. [CrossRef]\n64.\nQi, F.; Zhu, X.; Mang, G.; Kadoch, M.; Li, W.\
    \ Internet of things for smart citites: Technologies and applications UAV Network\
    \ and\nIoT in the Sky for Future Smart Cities. IEEE Netw. 2019, 33, 96–101. [CrossRef]\n\
    65.\nOrgeira-crespo, P.; Ulloa, C.; Rey-gonzalez, G.; Antonio, P. Methodology\
    \ for Indoor Positioning and Landing of an Unmanned\nAerial Vehicle in a Smart\
    \ Manufacturing Plant for Light Part Delivery. Electronics 2020, 9, 1680. [CrossRef]\n\
    66.\nErdelj, M.; Natalizio, E. UAV-assisted disaster management: Applications\
    \ and open issues. In Proceedings of the 2016 International\nConference on Computing,\
    \ Networking and Communications (ICNC), Kauai, HI, USA, 15–18 February 2016; pp.\
    \ 1–5. [CrossRef]\n67.\nErdelj, M.; Natalizio, E.; Chowdhury, K.R.; Akyildiz,\
    \ I.F. Help from the Sky: Leveraging UAVs for Disaster Management.\nIEEE Pervasive\
    \ Comput. 2017, 16, 24–32. [CrossRef]\n68.\nLiu, D.; Xia, X.; Chen, J.; Li, S.\
    \ Integrating Building Information Model and Augmented Reality for Drone-Based\
    \ Building\nInspection. J. Comput. Civ. Eng. 2021, 35, 04020073. [CrossRef]\n\
    69.\nChen, S.; Laefer, D.F.; Mangina, E.; Zolanvari, S.M.I.; Byrne, J. UAV Bridge\
    \ Inspection through Evaluated 3D Reconstructions.\nJ. Bridg. Eng. 2019, 24, 05019001.\
    \ [CrossRef]\n70.\nHildmann, H.; Kovacs, E. Review: Using Unmanned Aerial Vehicles\
    \ (UAVs) as Mobile Sensing Platforms (MSPs) for Disaster\nResponse, Civil Security\
    \ and Public Safety. Drones 2019, 3, 59. [CrossRef]\n71.\nBang, S.; Kim, H.; Kim,\
    \ H. Automation in Construction UAV-based automatic generation of high-resolution\
    \ panorama at a\nconstruction site with a focus on preprocessing for image stitching.\
    \ Autom. Constr. 2017, 84, 70–80. [CrossRef]\n72.\nLin, X.; Yajnanarayana, V.;\
    \ Muruganathan, S.D.; Gao, S.; Asplund, H.; Maattanen, H.L.; Bergstrom, M.; Euler,\
    \ S.; Wang, Y.P.E. The\nSky is Not the Limit: LTE for Unmanned Aerial Vehicles.\
    \ IEEE Commun. Mag. 2018, 56, 204–210. [CrossRef]\n73.\nVilla, D.K.D.; Brandão,\
    \ A.S.; Sarcinelli-Filho, M. A Survey on Load Transportation Using Multirotor\
    \ UAVs. J. Intell. Robot. Syst.\nTheory Appl. 2020, 98, 267–296. [CrossRef]\n\
    74.\nAlladi, T.; Chamola, V.; Sahu, N.; Guizani, M. Applications of blockchain\
    \ in unmanned aerial vehicles: A review. Veh. Commun.\n2020, 23, 100249. [CrossRef]\n\
    75.\nRen, J.; Guo, H.; Xu, C.; Zhang, Y. Serving at the Edge: A Scalable IoT Architecture\
    \ Based on Transparent Computing. IEEE Netw.\n2017, 31, 96–105. [CrossRef]\n76.\n\
    Mach, P.; Becvar, Z. Mobile Edge Computing: A Survey on Architecture and Computation\
    \ Ofﬂoading. IEEE Commun. Surv. Tutor.\n2017, 19, 1628–1656. [CrossRef]\n77.\n\
    Lu, W.; Ding, Y.; Gao, Y.; Hu, S.; Wu, Y.; Zhao, N.; Gong, Y. Resource and Trajectory\
    \ Optimization for Secure Communications in\nDual-UAV-MEC Systems. IEEE Trans.\
    \ Ind. Inform. 2021, 3203, 1–10. [CrossRef]\n78.\nChen, J.; Chen, S.; Luo, S.;\
    \ Wang, Q.; Cao, B.; Li, X. An intelligent task of ﬂ oading algorithm (iTOA) for\
    \ UAV edge computing\nnetwork. Digit. Commun. Netw. 2020, 6, 433–443. [CrossRef]\n\
    79.\nZhu, S.; Lin, G.; Zhao, D.; Cheng, N.; Zhang, Q.; Lang, X. Learning-Based\
    \ Computation Ofﬂoading Approaches in UAVs-Assisted\nEdge Computing. IEEE Trans.\
    \ Veh. Technol. 2021, 70, 928–944. [CrossRef]\n80.\nLiyanage, M.; Dar, F.; Sharma,\
    \ R.; Flores, H. GEESE: Edge computing enabled by UAVs. Pervasive Mob. Comput.\
    \ 2021, 72, 101340.\n[CrossRef]\n81.\nXu, J.; Liu, X.; Li, X.; Zhang, L.; Jin,\
    \ J.; Yang, Y. Energy aware Computation Management Strategy for Smart Logistic\
    \ System with\nMEC. IEEE Internet Things J. 2021, 4662, 1–17. [CrossRef]\n82.\n\
    Li, W.T.; Zhao, M.; Wu, Y.H.; Yu, J.J.; Bao, L.Y.; Yang, H.; Liu, D. Collaborative\
    \ ofﬂoading for UAV—enabled time—sensitive MEC\nnetworks. EURASIP J. Wirel. Commun.\
    \ Netw. 2021, 2021, 1. [CrossRef]\n83.\nLiu, Y.; Xiong, K.; Ni, Q.; Member, S.;\
    \ Fan, P.; Member, S.; Letaief, K.B. UAV-assisted Wireless Powered Cooperative\
    \ Mobile Edge\nComputing: Joint Ofﬂoading, CPU Control and Trajectory Optimization.\
    \ IEEE Internet Things J. 2019, 7, 2777–2790. [CrossRef]\n84.\nZhang, T.; Xu,\
    \ Y.; Loo, J.; Yang, D.; Xiao, L. Joint Computation and Communication Design for\
    \ UAV-Assisted Mobile Edge\nComputing in IoT. IEEE Trans. Ind. Inform. 2019, 16,\
    \ 5505–5516. [CrossRef]\n85.\nHu, X.; Wong, K.K.; Yang, K.; Zheng, Z. UAV-Assisted\
    \ Relaying and Edge Computing: Scheduling and Trajectory Optimization.\nIEEE Trans.\
    \ Wirel. Commun. 2019, 18, 4738–4752. [CrossRef]\n86.\nDu, Y.; Yang, K.; Wang,\
    \ K.; Zhang, G.; Zhao, Y.; Chen, D. Joint Resources and Workﬂow Scheduling in\
    \ UAV-Enabled Wirelessly-\nPowered MEC for IoT Systems. IEEE Trans. Veh. Technol.\
    \ 2019, 68, 10187–10200. [CrossRef]\n87.\nWang, Y.; Ru, Z.Y.; Wang, K.; Huang,\
    \ P.Q. Joint Deployment and Task Scheduling Optimization for Large-Scale Mobile\
    \ Users in\nMulti-UAV-Enabled Mobile Edge Computing. IEEE Trans. Cybern. 2020,\
    \ 50, 3984–3997. [CrossRef] [PubMed]\n88.\nLuo, Y.; Ding, W.; Zhang, B. Optimization\
    \ of Task Scheduling and Dynamic Service Strategy for Multi-UAV-enabled Mobile\
    \ Edge\nComputing System. IEEE Trans. Cogn. Commun. Netw. 2021, 7, 970–984. [CrossRef]\n\
    89.\nOuyang, W.; Chen, Z.; Wu, J.; Yu, G.; Zhang, H. Dynamic Task Migration Combining\
    \ Energy Efﬁciency and Load Balancing\nOptimization in Three-Tier UAV-Enabled\
    \ Mobile Edge Computing System. Electronics 2021, 10, 190. [CrossRef]\nDrones\
    \ 2021, 5, 148\n28 of 30\n90.\nGuo, H.; Liu, J. UAV-Enhanced Intelligent Ofﬂoading\
    \ for Internet of Things at the Edge. IEEE Trans. Ind. Inform. 2020, 16,\n2737–2746.\
    \ [CrossRef]\n91.\nZhang, B.; Zhang, G.; Ma, S.; Yang, K.; Wang, K. Efﬁcient Multitask\
    \ Scheduling for Completion Time Minimization in UAV-\nAssisted Mobile Edge Computing.\
    \ Mob. Inf. Syst. 2020, 2020, 8791030. [CrossRef]\n92.\nZhou, Y.; Pan, C.; Yeoh,\
    \ P.L.; Wang, K.; Elkashlan, M.; Vucetic, B.; Li, Y. Secure Communications for\
    \ UAV-Enabled Mobile Edge\nComputing Systems. IEEE Trans. Commun. 2020, 68, 376–388.\
    \ [CrossRef]\n93.\nZhou, Z.; Feng, J.; Tan, L.; He, Y.; Gong, J. An air-ground\
    \ integration approach for mobile edge computing in IoT. IEEE Commun.\nMag. 2018,\
    \ 56, 40–47. [CrossRef]\n94.\nNarang, M.; Xiang, S.; Liu, W.; Gutierrez, J.; Chiaraviglio,\
    \ L. UAV-assisted Edge Infrastructure for Challenged Networks. In\nProceedings\
    \ of the 2017 IEEE Conference on Computer Communications Workshops (INFOCOM WKSHPS),\
    \ Atlanta, GA, USA,\n1–4 May 2017. [CrossRef]\n95.\nHu, Q.; Cai, Y.; Yu, G.; Qin,\
    \ Z.; Zhao, M.; Li, G.Y. Joint ofﬂoading and trajectory design for UAV-enabled\
    \ mobile edge computing\nsystems. IEEE Internet Things J. 2019, 6, 1879–1892.\
    \ [CrossRef]\n96.\nChang, H.; Chen, Y.; Zhang, B.; Doermann, D. Multi-UAV Mobile\
    \ Edge Computing and Path Planning Platform Based on\nReinforcement Learning.\
    \ IEEE Trans. Emerg. Top. Comput. Intell. 2021, 1–10. [CrossRef]\n97.\nDiao, X.;\
    \ Zheng, J.; Wu, Y.; Cai, Y.; Anpalagan, A. Joint Trajectory Design, Task Data,\
    \ and Computing Resource Allocations for\nNOMA-Based and UAV-Assisted Mobile Edge\
    \ Computing. IEEE Access 2019, 7, 117448–117459. [CrossRef]\n98.\nZhou, F.; Wu,\
    \ Y.; Hu, R.Q.; Qian, Y. Computation rate maximization in UAV-Enabled wireless-powered\
    \ mobile-edge computing\nsystems. IEEE J. Sel. Areas Commun. 2018, 36, 1927–1941.\
    \ [CrossRef]\n99.\nBalamuralidhar, N.; Tilon, S.; Nex, F. MultEYE: Monitoring\
    \ System for Real-Time Vehicle Detection, Tracking and Speed\nEstimation from\
    \ UAV Imagery on Edge-Computing Platforms. Remote Sens. 2021, 13, 573. [CrossRef]\n\
    100. Yang, M.; Boubin, J.G.; Ping, H.; Tseng, H.; Hsu, Y.; Stewart, C.C. Adaptive\
    \ autonomous UAV scouting for rice lodging assessment\nusing edge computing with\
    \ deep learning EDANet. Comput. Electron. Agric. 2020, 179, 105817. [CrossRef]\n\
    101. Yang, Z.; Chen, M.; Liu, X.; Liu, Y.; Chen, Y.; Cui, S.; Poor, H.V. Aerial\
    \ Computing: Drones for Multi-Access Edge Computing\nAI-Driven UAV-NOMA-MEC in\
    \ Next Generation Wireless Networks. IEEE Wirel. Commun. 2021, 28. [CrossRef]\n\
    102. Grasso, C.; Schembra, G. A Fleet of MEC UAVs to Extend a 5G Network Slice\
    \ for Video Monitoring with Low-Latency Constraints.\nJ. Sens. Actuator Netw.\
    \ 2019, 8, 3. [CrossRef]\n103. Nie, Y.; Member, S.; Zhao, J.; Member, S.; Gao,\
    \ F.; Yu, F.R. Semi-Distributed Resource Management in UAV-Aided MEC Systems:\n\
    A Multi-Agent Federated Reinforcement Learning Approach. IEEE Trans. Veh. Technol.\
    \ 2021, 1–12. [CrossRef]\n104. Sedjelmaci, H.; Boudguiga, A.; Ben, I.; Mohammed,\
    \ S. Ad Hoc Networks An efﬁcient cyber defense framework for UAV-Edge\ncomputing\
    \ network. Ad Hoc Netw. 2019, 94, 101970. [CrossRef]\n105. Tian, Y.; Yuan, J.;\
    \ Song, H. Journal of Information Security and Applications Efﬁcient privacy-preserving\
    \ authentication framework\nfor e dge-assiste d Internet of Drones. J. Inf. Secur.\
    \ Appl. 2019, 48, 102354. [CrossRef]\n106. Wang, G.; Yu, X.; Xu, F.; Cai, J. Task\
    \ ofﬂoading and resource allocation for UAV-assisted mobile edge computing with\
    \ imperfect\nchannel estimation over Rician fading channels. EURASIP J. Wirel.\
    \ Commun. Netw. 2020, 8, 1–19. [CrossRef]\n107. Messous, M.; Arfaoui, A.; Alioua,\
    \ A.; Senouci, S.; Ea, D.; Comté, F. A Sequential Game Approach for Computation-Ofﬂoading\n\
    in an UAV Network. In Proceedings of the GLOBECOM 2017—2017 IEEE Global Communications\
    \ Conference, Singapore,\n4–8 December 2017; pp. 1–7. [CrossRef]\n108. Li, J.;\
    \ Liu, Q.; Wu, P.; Shu, F.; Jin, S. Task Ofﬂoading for UAV-based Mobile Edge Computing\
    \ via Deep Reinforcement Learning. In\nProceedings of the 2018 IEEE/CIC International\
    \ Conference on Communications, Beijing, China, 16–18 August 2018; pp. 798–802.\n\
    [CrossRef]\n109. Ren, Y.; Xie, Z.; Ding, Z.; Sun, X.; Xia, J.; Tian, Y. Computation\
    \ ofﬂoading game in multiple unmanned aerial vehicle-enabled\nmobile edge computing\
    \ networks. IET Commun. 2021, 15, 1392–1401. [CrossRef]\n110. Zhang, L.; Zhao,\
    \ Z.; Wu, Q.; Zhao, H.; Xu, H.; Wu, X. Energy-Aware Dynamic Resource Allocation\
    \ in UAV Assisted Mobile Edge\nComputing Over Social Internet of Vehicles. IEEE\
    \ Access 2018, 6, 56700–56715. [CrossRef]\n111. Wang, X.; Han, Y.; Leung, V.C.M.;\
    \ Niyato, D.; Yan, X.; Chen, X. Convergence of Edge Computing and Deep Learning:\
    \ A Compre-\nhensive Survey. IEEE Commun. Surv. Tutor. 2020, 22, 869–904. [CrossRef]\n\
    112. Wang, H.; Ke, H.; Sun, W. Unmanned-aerial-vehicle-assisted computation ofﬂoading\
    \ for mobile edge computing based on deep\nreinforcement learning. IEEE Access\
    \ 2020, 8, 180784–180798. [CrossRef]\n113. Ullah, Z.; Al-Turjman, F.; Moatasim,\
    \ U.; Mostarda, L.; Gagliardi, R. UAVs joint optimization problems and machine\
    \ learning to\nimprove the 5G and Beyond communication. Comput. Netw. 2020, 182,\
    \ 107478. [CrossRef]\n114. Pourghasemian, M.; Abedi, M.R.; Salarhosseini, S.;\
    \ Mokari, N.; Javan, M.R.; Jorswieck, E.A. AI-Based and Mobility-Aware Energy\n\
    Efﬁcient Resource Allocation and Trajectory Design for NFV Enabled Aerial Networks.\
    \ arXiv 2021, arXiv:2105.10282. Available\nonline: https://arxiv.org/abs/2105.10282v1\
    \ (accessed on 12 November 2021).\n115. Xu, J.; Chen, L.; Ren, S. Online Learning\
    \ for Ofﬂoading and Autoscaling in Energy Harvesting Mobile Edge Computing.\n\
    IEEE Trans. Cogn. Commun. Netw. 2017, 3, 361–373. [CrossRef]\n116. Wang, J.; Hu,\
    \ J.; Min, G.; Zhan, W.; Ni, Q.; Georgalas, N. Computation Ofﬂoading in Multi-Access\
    \ Edge Computing Using a Deep\nSequential Model Based on Reinforcement Learning.\
    \ IEEE Commun. Mag. 2019, 57, 64–69. [CrossRef]\nDrones 2021, 5, 148\n29 of 30\n\
    117. Bozorgchenani, A.; Member, S.; Mashhadi, F.; Member, S. Multi-Objective Computation\
    \ Sharing in Energy and Delay Constrained\nMobile Edge Computing Environments.\
    \ IEEE Trans. Mob. Comput. 2020, 20, 2992–3005. [CrossRef]\n118. Tang, L.; Tang,\
    \ B.; Kang, L.; Zhang, L. A Novel Task Caching and Migration Strategy in Multi-Access\
    \ Edge Computing Based on\nthe Genetic Algorithm. Futur. Internet 2019, 11, 181.\
    \ [CrossRef]\n119. Dinh, T.Q.; Member, S.; La, Q.D.; Quek, T.Q.S. Distributed\
    \ Learning for Computation Ofﬂoading in Mobile Edge Computing.\nIEEE Trans. Commun.\
    \ 2018, 66, 6353–6367. [CrossRef]\n120. Miao, Y.; Wu, G.; Li, M.; Ghoneim, A.;\
    \ Al-rakhami, M. Intelligent task prediction and computation ofﬂoading based on\
    \ mobile-\nedge cloud computing. Futur. Gener. Comput. Syst. 2020, 102, 925–931.\
    \ [CrossRef]\n121. Li, G.; Zhou, H.; Feng, B.; Li, G.; Li, T.; Xu, Q.; Quan, W.\
    \ Fuzzy Theory Based Security Service Chaining for Sustainable\nMobile-Edge Computing.\
    \ Mob. Inf. Syst. 2017, 2017, 8098394. [CrossRef]\n122. Vimal, S.; Khari, M.;\
    \ Dey, N.; González, R.; Robinson, Y.H. Enhanced resource allocation in mobile\
    \ edge computing using\nreinforcement learning based MOACO algorithm for IIOT.\
    \ Comput. Commun. 2020, 151, 355–364. [CrossRef]\n123. Li, J.; Gao, H.; Lv, T.;\
    \ Lu, Y. Deep reinforcement learning based computation ofﬂoading and resource\
    \ allocation for MEC. In\nProceedings of the 2018 IEEE Wireless Communications\
    \ and Networking Conference (WCNC), Barcelona, Spain, 15–18 April\n2018; pp. 1–6.\
    \ [CrossRef]\n124. Wang, J.; Member, S.; Zhao, L.; Member, S.; Liu, J.; Member,\
    \ S. Smart Resource Allocation for Mobile Edge Computing: A Deep\nReinforcement\
    \ Learning Approach. IEEE Trans. Emerg. Top. Comput. 2019, 9, 1529–1541. [CrossRef]\n\
    125. Zhang, Q.; Lin, M.; Yang, L.T.; Chen, Z.; Li, P. Energy-Efﬁcient Scheduling\
    \ for Real-Time Systems Based on Deep Q-Learning\nModel. IEEE Trans. Sustain.\
    \ Comput. 2017, 4, 132–141. [CrossRef]\n126. Luo, Z.; Liwang, M.; Lin, Z.; Huang,\
    \ L.; Du, X. Energy-Efﬁcient Caching for Mobile Edge Computing in 5G Networks.\
    \ Appl. Sci.\n2017, 7, 557. [CrossRef]\n127. Xiao, L.; Wan, X.; Dai, C.; Du, X.;\
    \ Chen, X.; Guizani, M. Security in Mobile Edge Caching with Reinforcement Learning.\
    \ IEEE Wirel.\nCommun. 2018, 25, 116–122. [CrossRef]\n128. Huang, L.; Feng, X.;\
    \ Zhang, C.; Qian, L.; Wu, Y. Deep reinforcement learning-based joint task of\
    \ ﬂ oading and bandwidth\nallocation for multi-user mobile edge computing. Digit.\
    \ Commun. Netw. 2019, 5, 10–17. [CrossRef]\n129. Li, Z. Genetic Algorithm-Based\
    \ Optimization of Ofﬂoading and Resource Allocation in Mobile-Edge Computing.\
    \ Information\n2020, 11, 83. [CrossRef]\n130. Huang, L.; Feng, X.; Feng, A.; Huang,\
    \ Y.; Qian, L.P. Distributed Deep Learning-based Ofﬂoading for Mobile Edge Computing\n\
    Distributed Deep Learning-based Ofﬂoading for Mobile Edge. Mob. Netw. Appl. 2018,\
    \ 1–8. [CrossRef]\n131. Guo, F.; Zhang, H.; Ji, H.; Li, X.; Leung, V.C.M. An efﬁcient\
    \ computation ofﬂoading management scheme in the densely deployed\nsmall cell\
    \ networks with mobile edge computing. IEEE/ACM Trans. Netw. 2018, 26, 2651–2664.\
    \ [CrossRef]\n132. Wang, L.; Wang, K.; Pan, C.; Xu, W.; Aslam, N.; Hanzo, L. Multi-Agent\
    \ Deep Reinforcement Learning-Based Trajectory Planning\nfor Multi-UAV Assisted\
    \ Mobile Edge Computing. IEEE Trans. Cogn. Commun. Netw. 2021, 7, 73–84. [CrossRef]\n\
    133. Liu, Y.; Member, S.; Chen, Y.; Member, S. Artiﬁcial Intelligence Driven UAV-NOMA-MEC\
    \ in Next Generation Wireless Networks.\narXiv 2021, arXiv:2101.11681. Available\
    \ online: https://arxiv.org/abs/2101.11681v1 (accessed on 12 November 2021).\n\
    134. Yu, S.; Wang, X.; Langar, R. Computation ofﬂoading for mobile edge computing:\
    \ A deep learning approach. In Proceedings of the\nIEEE International Symposium\
    \ on Personal, Indoor and Mobile Radio Communications, Bologna, Italy, 9–12 September\
    \ 2018;\npp. 1–6. [CrossRef]\n135. Chen, L.; Zhao, R.; He, K.; Zhao, Z.; Fan,\
    \ L. Intelligent ubiquitous computing for future UAV-enabled MEC network systems.\n\
    Cluster Comput. 2021. [CrossRef]\n136. Liu, Y.; Xie, S.; Zhang, Y. Cooperative\
    \ Ofﬂoading and Resource Management for UAV-Enabled Mobile Edge Computing in Power\n\
    IoT System. IEEE Trans. Veh. Technol. 2020, 69, 12229–12239. [CrossRef]\n137.\
    \ Liu, X.; Liu, Y.; Chen, Y.; Hanzo, L. Trajectory design and power control for\
    \ multi-UAV assisted wireless networks: A machine\nlearning approach. IEEE Trans.\
    \ Veh. Technol. 2019, 68, 7957–7969. [CrossRef]\n138. Ma, X.; Yin, C.; Liu, X.\
    \ Machine Learning Based Joint Ofﬂoading and Trajectory Design in UAV Based MEC\
    \ System for IoT\nDevices. In Proceedings of the 2020 IEEE 6th International Conference\
    \ on Computer and Communications (ICCC), Chengdu,\nChina, 11–14 December 2020;\
    \ pp. 902–909. [CrossRef]\n139. Grasso, C.; Raftopoulos, R.; Schembra, G. Deep\
    \ Q-Learning for Job Ofﬂoading Orchestration in a Fleet of MEC UAVs in 5G\nEnvironments.\
    \ In Proceedings of the 2021 IEEE 7th International Conference on Network Softwarization\
    \ (NetSoft), Tokyo, Japan,\n28 June–2 July 2021; pp. 186–190. [CrossRef]\n140.\
    \ Zhang, C.; Zheng, Z. Task migration for mobile edge computing using deep reinforcement\
    \ learning. Futur. Gener. Comput. Syst.\n2019, 96, 111–118. [CrossRef]\n141. Fraga-Lamas,\
    \ P.; Ramos, L.; Mondéjar-Guerra, V.; Fernández-Caramés, T.M. A review on IoT\
    \ deep learning UAV systems for\nautonomous obstacle detection and collision avoidance.\
    \ Remote Sens. 2019, 11, 2144. [CrossRef]\n142. Lagkas, T.; Argyriou, V.; Bibi,\
    \ S.; Sarigiannidis, P. UAV IoT framework views and challenges: Towards protecting\
    \ drones as\n“things”. Sensors 2018, 18, 4015. [CrossRef]\n143. Jensen, I.J.;\
    \ Selvaraj, D.F.; Ranganathan, P. Blockchain technology for networked swarms of\
    \ unmanned aerial vehicles (UAVs).\nIn Proceedings of the 2019 IEEE 20th International\
    \ Symposium on A World of Wireless, Mobile and Multimedia Networks\n(WoWMoM),\
    \ Washington, DC, USA, 10–12 June 2019. [CrossRef]\nDrones 2021, 5, 148\n30 of\
    \ 30\n144. Stöcker, C.; Bennett, R.; Nex, F.; Gerke, M.; Zevenbergen, J. Review\
    \ of the Current State of UAV Regulations. Remote Sens. 2017, 9,\n459. [CrossRef]\n\
    145. Zhang, Q.; Chen, J.; Ji, L.; Feng, Z.; Han, Z.; Chen, Z. Response Delay Optimization\
    \ in Mobile Edge Computing Enabled UAV\nSwarm. IEEE Trans. Veh. Technol. 2020,\
    \ 69, 3280–3295. [CrossRef]\n146. Zhou, F.; Hu, R.Q.; Li, Z.; Wang, Y. Mobile\
    \ edge computing in unmanned aerial vehicle networks. IEEE Wirel. Commun. 2020,\
    \ 27,\n140–146. [CrossRef]\n147. Tang, S.; Zhou, W.; Chen, L.; Lai, L.; Xia, J.;\
    \ Fan, L. Battery-constrained federated edge learning in UAV-enabled IoT for B5G/6G\n\
    networks. Phys. Commun. 2021, 47, 101381. [CrossRef]\n"
  inline_citation: '>'
  journal: Drones
  limitations: '>'
  pdf_link: https://www.mdpi.com/2504-446X/5/4/148/pdf?version=1639379359
  publication_year: 2021
  relevance_score: 0.9
  relevance_score1: 0
  relevance_score2: 0
  title: 'UAV-Enabled Mobile Edge-Computing for IoT Based on AI: A Comprehensive Review'
  verbatim_quote1: '"UAV-enabled MEC architecture regarding emerging IoT applications
    and the global food challenge: Addressing the technical issues and proposing solutions"'
  verbatim_quote2: '"Different data types (e.g., soil moisture, canopy temperature,
    weather) and their collection and use"'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.1007/978-3-030-18468-1_2
  analysis: 'The paper titled "IoT Architecture" provides a comprehensive review of
    the architectural framework of the Internet of Things (IoT). While the paper touches
    upon the role of different data types (e.g., soil moisture, canopy temperature,
    weather) in IoT systems and their collection and use, it does not delve deeply
    into the specific technical aspects of data collection and transmission. The paper
    focuses primarily on the overall architectural components and security considerations
    of IoT systems, rather than providing detailed insights into the intricacies of
    data management and communication.


    In terms of the relevance to the outline point "Different data types (e.g., soil
    moisture, canopy temperature, weather) and their collection and use," the paper
    provides a general overview of the importance of data collection in IoT systems
    but does not offer specific guidance or technical details on how different data
    types are collected and utilized. It does not provide novel or insightful information
    on the subject and does not offer a comprehensive exploration of the topic.'
  authors:
  - Mohammad Ali Jabraeil Jamali
  - Bahareh Bahrami
  - Arash Heidari
  - Parisa Allahverdizadeh
  - Farhad Norouzi
  citation_count: 34
  full_citation: Mohammad Ali Jabraeil Jamali, Bahareh Bahrami, Arash Heidari, Parisa
    Allahverdizadeh & Farhad Norouzi, “IoT Architecture”, Towards the Internet of
    Things, EAI/Springer Innovations in Communication and Computing, Springer, Cham,
    https://doi.org/10.1007/978-3-030-18468-1_2
  full_text: '>

    Your privacy, your choice We use essential cookies to make sure the site can function.
    We also use optional cookies for advertising, personalisation of content, usage
    analysis, and social media. By accepting optional cookies, you consent to the
    processing of your personal data - including transfers to third parties. Some
    third parties are outside of the European Economic Area, with varying standards
    of data protection. See our privacy policy for more information on the use of
    your personal data. Manage preferences for further information and to change your
    choices. Accept all cookies Skip to main content Advertisement Log in Find a journal
    Publish with us Track your research Search Cart Towards the Internet of Things
    pp 9–31Cite as Home Towards the Internet of Things Chapter IoT Architecture Mohammad
    Ali Jabraeil Jamali, Bahareh Bahrami, Arash Heidari, Parisa Allahverdizadeh &
    Farhad Norouzi  Chapter First Online: 13 June 2019 3858 Accesses 34 Citations
    Part of the book series: EAI/Springer Innovations in Communication and Computing
    ((EAISICC)) Abstract The domain of the internet of things will encompass a wide
    range of technologies. Thus, single reference architecture cannot be used as a
    blueprint for all possible concrete implementations. While a reference model can
    probably be identified, it is likely that several reference architectures will
    coexist in the internet of things. In this context, architecture is specifically
    defined as a framework for specifying the physical components and functional organization
    and configuration of a network, operational principles, and procedures, as well
    as data formats used in its operation. In fact, IoT is like an umbrella around
    all possible computer devices around us. Therefore, the IoT architecture should
    be open enough with open protocols to support a variety of existing network applications.
    Additionally, some middleware for scalability, security, and semantic representation
    should also be included to promote data world integration with the internet. This
    chapter provides a comprehensive review of the internet of things architectures.
    Keywords Architecture Domain Platform Framework Access provided by University
    of Nebraska-Lincoln. Download chapter PDF 1 Introduction The internet of things
    is a network of physical objects, intelligent devices, vehicles, buildings and
    sensors, communication protocols, and software which collect, exchange, store,
    analyze, and process data. The IoT is based on the strict connectivity between
    the digital and the physical world by the sensor [1]. According to the Gartner
    report, by 2020, 25 billion devices will be connected to the internet and these
    communications will make it easier to use data independently for analysis, preplanning,
    management, and decision-making [2]. In this context, architecture is defined
    as a framework to define the physical components of a network and its functional
    organization and configuration, its operating principles and procedures, and the
    data formats used in its operation. IoT architecture comprises a collection of
    physical objects, sensors, cloud services, developers, actuators, communication
    layers, users, business layers, and IoT protocols. Because of the wide domain
    of internet objects, there is no single consensus on IoT architecture, which is
    universally agreed. Different architectures were proposed by different researchers.
    This chapter describes a range of domain-specific architectures based on RFID,
    supply chain management, industry, service-oriented architecture, wireless sensor
    network, logistics, healthcare, smart cities, connected living, big data, social
    computing, security, and cloud computing. IoT Functional Blocks The sensing layer,
    communication layer, management layer, cloud layer, services, and application
    layer are the number of IoT systems functional blocks [3]. Sensing Layer The main
    function of the sensing layer is to detect changes in the physical condition of
    connected things in real time. It includes sensors that are the main components
    of this layer. The sensor is responsible for measuring the physical environment,
    identifying and locating intelligent objects, collecting data, and sending data
    to the cloud layer for processing and storage. The actuators in this layer are
    generally mechanical devices, such as switches, which execute the desired device.
    Communication Layer The layer of communication is responsible for the interaction
    of the IoT architecture layers. The data collected in the sensing layer are transferred
    directly to the cloud or the service and application layer. It comprises routers,
    switches, and gateways connected to devices that cannot connect to the cloud directly.
    Protocols such as CoAP [4], Message Queuing Telemetry Transportation (MQTT) [5],
    and Lightweight Machine to Machine (LwM2M) connect different IoT devices to send
    data to upper layers [6]. Cloud Layer It is also known as the IoT system processing
    unit. Data collected from sensors and devices are ingested into the cloud layer.
    Data storage, processing, and analysis are its functions. In general, the cloud
    uses a data center as a central server to process the data generated by the edge
    device. Cloud computing research in the next generation is continuing to decentralize
    certain processing tasks from cloud to edge nodes to improve computing performance
    [7]. Management Layer It is responsible for operating and monitoring all other
    layers with the features of the cloud management tools, which are normally implemented.
    Services and Applications Layer The layer of services and applications provides
    applications and a variety of services, including data collection, data analysis,
    data visualization, and security. They depend on the use cases and the desired
    features for the end-users. IoT Device Management Tools In this section, we have
    selected a variety of tools on the market, which have the potential to play an
    essential role in monitoring smart things in the IoT solutions. These tools were
    selected because they are suitable stand-alone IoT device management tools with
    extensive implementation in several industrial use cases. Xively CPM Xively Connected
    Product Management (CPM) is a tool that offers solutions for enterprises building
    connected products and services. Moreover, it enables companies to easily build
    and manage IoT security, connected devices, and products including home automation
    and capturing their IoT data. It provides a simple and scalable platform enriched
    with tools necessary to connect, manage, and engage things. It has standard APIs
    for integrating data with primary enterprise systems, such as Customer Relationship
    Management (CRM) [8, 9]. DevicePilot DevicePilot implements locating, monitoring,
    and managing connected devices at scale. It is completely agnostic, providing
    platform connectivity to any device, and easily integrates with IoT platforms.
    It is a cloud-based application, which scales with the deployed infrastructure,
    schemaless, and provides all functionalities via a REST API [10]. Wind River HDC
    Wind River Helix Device Cloud (HDC) is a tool that helps reduce the complexities
    of building and managing large-scale IoT deployments. It enables device health
    monitoring, bidirectional file transfer, remote access to help service engineers
    detect, and diagnose problems before they impact critical data collection. HDC
    provides tools one needs for deploying, monitoring, servicing, updating, and decommissioning
    IoT devices [11]. QuickLink IoT QuickLink is a resource efficient device management
    solution based on LwM2M and OMA-DM standards. It supports device provisioning,
    configuration, diagnostics management, and over-the-air updates. It has a plug-in
    API architecture with encrypted data collection using CoAP with Transport Layer
    Security (TLS) [12]. ThingWorx Utilities ThingWorx Utilities is a set of tools
    rich in features that enable and support the rapid deployment and adoption of
    powerful IoT applications. It provides device management capabilities for day-to-day
    management of the connected devices and includes utilities to provide, remotely
    monitor, and update the connected devices and assets. With its standard framework,
    it is also possible to integrate new IoT applications into existing business systems
    [13]. Particle Particle is a full-stack IoT device management platform that provides
    all the necessary tools to securely and reliably connect IoT devices to the web/cloud.
    The solution can be used on different scales of deployment from large enterprises
    to innovative start-ups and everyone in between. It is secured by using encrypted
    communication protocols, easy to use, and provides an interface to see devices,
    push software updates, and make changes and improvements on an ongoing basis.
    It offers several development tools, such as Web IDE, Desktop IDE, and a Command
    Line Interface (CLI). The device management console can manage team permissions
    from a single administrative interface. Support for cross-vendor devices are limited
    and continuously developed [14]. Losant Helm Losant Helm is a fully integrated
    IoT device management and connectivity tool directly embedded in the Losant IoT
    platform, an enterprise-ready cloud platform that enables developers to easily
    make use of real-time data by rapidly developing smart, connected solutions for
    IoT. It serves as a control hub for connecting production facilities and its hardware
    agnostic platform is easily integrated with a broad variety of sensors, controllers,
    machines, and device gateways. This enables many-to-many interoperability across
    disparate systems and technologies. Its open communication standards (REST, MQTT)
    provide simple connectivity to millions of devices [15]. DataV IoT Device Management
    This tool makes equipment and device management a priority as industrial companies
    connects more business-crucial assets together with IoT. It gives the power to
    manage the full lifecycle of all assets from a centralized location, including
    configuration, inventory, and OTA software updates and configuration [16]. 1.1
    Three-and Five-Layer Architectures According to most of the researcher’s opinions,
    IoT architecture is considered to be three layers. Figure 2.1 represents the conventional
    IoT architecture. Fig. 2.1 Conventional IoT architecture Full size image 1. The
    perception layer is the physical layer with environmental information sensors.
    In the environment, some physical parameters are sensed, or other intelligent
    objects are identified. 2. The network layer connects to other intelligent devices,
    network devices, and servers. Its functions are also used for transmitting and
    processing sensor data. 3. The application layer is responsible for providing
    the user with specific application services. It defines different applications
    for the IoT, such as smart homes, smart cities, and intelligent health. The three-layer
    architecture defines the main idea of IoT, but it is not sufficient for IoT research,
    because research often focuses on the finer aspects of IoT. Hence, the five-layer
    architecture is defined. Figure 2.2 shows the five-layer architecture of IoT.
    Fig. 2.2 The five-layer IoT architecture Full size image The role of the perception
    and application layers in this architecture is the same as three-layer architecture.
    The functions of the other three layers are as follows [17]: 1. The transport
    layer transfers sensor data from the perception layer to the processing layer
    and vice versa via networks such as Bluetooth, wireless, 3G, LAN (Near Field Communications),
    NFC, and RFID. 2. The processing layer is also referred to as the middleware layer.
    It can store, analyze, and process large quantities of transportation data. Also,
    it can manage and provide a variety of lower layers of services. It uses many
    technologies, such as databases, cloud computing, and big data processing modules.
    3. The entire IoT system is managed by the business layer, including applications,
    business and business models, and user privacy [18]. Another architecture proposed
    by Ning and Wang [19] is inspired by the processing layers in the human brain.
    It is inspired by the intelligence and ability of human beings to think, feel,
    remember, take decisions, and react to the physical environment. It consists of
    three parts. First, the human brain is similar to the processing and data management
    unit or data center. Second, the spinal cord is analogous to the distributed network
    of nodes and intelligent data processing gates. Third, the nerve network corresponds
    to the network components and sensors [20]. 2 Survey on Domain-Specific Useful
    IoT Architectures As presented at the beginning of this chapter, the internet
    of things has a wide range of objects. Therefore, there is no particular architecture
    for it and it is based on different domains of different architectures provided
    by the researchers. Figure 2.3 shows IoT application domains. Fig. 2.3 IoT application
    domains Full size image 2.1 RFID Wireless Sensor and Actuator Networks (WSAN),
    NFC, Wireless Platforms for Identification and Sensing (WISP), and RFID will show
    a new horizon for IoT. Recently, a report by the United Nations (UN) reported
    that humanity is approaching a new decade of ubiquitous RFID-enabled systems in
    which people are dwarfed by internet-oriented objects, as they are the majority
    [21]. Appropriate IoT-based modeling can solve the situation through valuable
    savings and communication [22]. In this context, RFID readers and tags [23] are
    a new holistic system in which a unique identity can characterize each tag. These
    forms of tags are suitable for the monitoring of cattle in remote homes and for
    human personification. The RFID reader transmits a signal to its periphery, which
    activates the nearby tags to respond with its unique key. The transmission of
    real-time information may help to implement rigorous stratification between objects
    of interest [24]. The RFID tag acts as an ID of concern device in the form of
    an adhesive sticker [25]. Many manufacturers are currently producing smaller versions
    of RFID tags. 2.1.1 Electronic Product Code Based IoT Architecture The first introduction
    to IoT comes from a “things-oriented” perspective, where very simple RFID tags
    are considered. The concept of IoT architecture for several scenarios, such as
    Auto-ID laboratories, Electronic Product Code (EPC), and Object Name Service (ONS),
    is all designed for architecture IoT with a global design. The EPC objective supports
    the use of RFID and extends it to the global network for the modern future of
    the network, and also creates the intelligent industry as a global standard for
    the EPC global network. EPC was developed by Auto-ID from the Massachusetts Institute
    of Technology to share data in real-time by finding a unique identifier and using
    RFID, wireless communication technology, via internet infrastructure and platform
    [26]. In the EPC global architecture, the EPC is the unique identifier associated
    with a physical object. The EPC Global Tag Data Standard defines its structure
    and code rules. The unique structure of the encoding (to avoid collisions between
    names) is guaranteed by the use of a central registration authority. In Fig. 2.4,
    the EPC Network Services are the responsibility of the EPC’s global central authority
    and are responsible for providing discovery services to global EPC parties (end-users).
    The root management of the Object Naming Service (ONS) is also responsible for
    the central authority since it allocates the EPC blocks. Local ONS is the responsibility
    of the EPC manager (one per registered end-user) [27]. Fig. 2.4 EPC global system
    architecture Full size image Upon receipt of the address of the EPC Information
    Service (EPCIS), which is responsible for the EPC of interest, the EPCIS Accessing
    Application will use the EPCIS query interface (i/f) to request additional information
    on the EPC (e.g., class/instance level or transactional data on the EPC). The
    EPCIS query interface uses both push and pulls mode, so observations concerning
    a particular EPC can also be notified. The EPCIS Repository is a functional block
    located on the “end-user A” side of the EPC Global Network, which deals with the
    storage of information (of any kind) that it wishes to share with other parties
    (e.g., end-user B). All interfaces must be implemented according to EPCglobal
    standards, but “end-users” have a certain degree of freedom to implement these
    blocks [27]. The ONS block is a simple search service mapping an EPC to the address
    of a designated EPCIS service containing EPC information. The functional block
    Filtering & Collection is responsible for collecting raw tag data in accordance
    with the policies of the EPCIS Capturing Application Box. Example of this policy
    is: The collection of all EPCs of a certain class read at a certain date, location,
    and time interval. The EPCIS Capturing Application monitors the operation at the
    lower level of the model and provides a business context through coordination
    with other components involved in a particular business process. Once again, the
    end-user has a great deal of freedom to implement this box, since the Application
    Level Event (ALE I/f) and the capture of I/f are implemented in accordance with
    EPCglobal standards. The Data Capture Device Box (Tag Reader) is the only observing
    event related to RFID tags that completes the lower level. These events are provided
    by the corresponding reader i/f in the Filtering & Collection box [28]. The reverse
    mapping is intended to verify that the EPCglobal architecture is compatible with
    the IoT reference model. The EPCglobal architecture shown in Fig. 2.4 above is
    not a specific EPCglobal domain model, but a high-level diagram of a specific
    architecture. Since the two models are not exactly similar in nature (i.e., the
    IoT domain model is clearly “concept” while the EPCglobal is a description of
    the high-level system architecture), the reverse mapping of the EPCglobal architecture
    to the IoT domain model is not easy or simple [29]. 2.2 Service-Oriented Architecture
    (SOA) Service-Oriented Architecture is a software system architecture (Fig. 2.5)
    that can be achieved by connecting to an independent functional entity that can
    perform specific tasks to meet the needs of business integration in the internet
    environment. SOA is a component of the model. It connects the different functional
    application units through well-defined interfaces and contracts between these
    services [30]. Fig. 2.5 Thing-based SOA Full size image SOA is an architectural
    pattern in computer software design in which application components provide services
    to other components via a communication protocol, usually over a network. The
    principles of service orientation are independent of any supplier, product, or
    technology. In the IoT domain, the integrated SOA approach is currently invoked
    using the concept of middleware, i.e., a software layer superimposed between the
    application and the technology layer, which hides unnecessary relevant details
    from the development time of the developed product, helping the design workflow
    to simplify the process of marketing commercial results [31]. 2.2.1 IoT Middleware
    Architecture A three-layer middleware architecture based on RFID relies on three
    associative functionalities, such as Tag association, place association, and user
    antenna association. The three layer structure consists of device access layer,
    event processing layer and application interaction layer. The device layer can
    collect data from the entity. It does not have a simple processing and filtration
    function. The equipment layer consists of IoT perception, such as the barcode,
    RFID, ZigBee, sensors, PDA, and wireless network. In the computer world and the
    information system, these devices can display physical world information in real
    time in digital form [32]. However, the difficulty in program development is increased
    by different types, different manufacturers, and different device models. The
    addition or reduction of all types of equipment can make many system changes [33].
    Process and store information for the upper application based on the application
    system or user requirements for secondary processing. The middleware layer consists
    of the device’s access layer, the information processing layer and the application’s
    interaction [34]. It is connected by a web interface between different layers.
    The application layer consists of the ERP, the business system, and each connection
    of the intelligent logistics system subsystems, including an intelligent management
    system based on UHF RFID technology, an intelligent shelf system, a storage environment
    monitoring system, and an intelligent inventory system. ERP or other business
    systems provide business orders to the middleware system, each warehouse subsystem
    coordinates with each other homework, each subsystem also requests and subscribes
    business orders to the middleware system according to the different operations,
    middleware system releases the corresponding incident reporters after completing
    the corresponding business operations (Fig. 2.6). Fig. 2.6 IOT middleware architecture
    Full size image A holistic IoT architecture consisting of heterogeneous devices,
    Embedded Internet Systems (EIS), standard communication protocols, and the SOA
    paradigm using the CoAP protocol and standard services enables the exchange of
    sensor data with an IoT-based cloud and a private cloud while disseminating web-based
    human–machine interfaces for configuration, monitoring, and visualization [35].
    The INOX platform [36] advocates a similar approach consisting of three layers,
    such as (a) the service layer supports and contains services using APIs; (b) the
    platform layer contains the necessary management and orchestration to enrich the
    hardware layer for the deployment of services and virtualization technologies;
    and (c) the hardware layer contains sensors and intelligent objects. The authors
    advocate the reuse of integrated techniques during the joint composition of hardware
    and software in the establishment of the company at the time of the implementation
    of SOA. A common connection between the SOA and the middleware was proposed with
    an integrated architectural approach that improves the functionality of the device,
    communication, and integrated services. Buckl et al. (2009) and Spiess et al.
    [37] show an IoT middleware architecture based on five-layer SOA, where objects
    are located at the bottom of an object abstraction, service management (provides
    services such as dynamic discovery, status monitoring, and configuration of objects).
    Semantic operations [38], such as QoS, lock, police, and context management (Hydra
    Middleware Project), service layer composition, and application layers are in
    a row. In addition, a domestic infrastructure based on SOA-oriented IoT is developed
    in the literature, in which the logic of automatic energy consumption based on
    sensors and actuators is implied. From this point of view, the authors of Spiess
    et al. [37] and Buckl et al. used two advanced computer languages, such as: Business
    Process Execution Language (BPEL) (defined as: Business processes that interact
    with external entities via Web Service (Web Service Definition Language (WSDL))
    (OASIS) and Jolie (target application, specific set of objects or limitations)).
    2.3 Wireless Sensor Network (WSN) The wireless sensor network is a network of
    sensor nodes where each node is equipped with a sensor to detect physical phenomena
    such as light, heat, and pressure. WSNs are considered a revolutionary method
    of collecting information to create an information and communication system that
    greatly improves infrastructure systems’ reliability and efficiency. WSNs feature
    easier deployment and better device flexibility compared to the wired solution
    [39]. WSNs will become the key technology for IoT with the rapid technological
    development of sensors. WSN [40] is one of the IoT system’s key components. It
    consists of a limited number of sensor nodes (mote) mastered using a multi-layered
    protocol organization using a special purpose node (sink) [41]: energy efficiency,
    scalability, reliability, robustness, etc., in particular. When designing a WSN-powered
    system, parameters are sought. The IEEE 802.15.4 protocol for the provision of
    wireless personal area networks (WPAN) is the most commonly used WSN systems for
    communication purposes. The most important standard for WSN communication is IEEE
    802.5.14. It defies the physical and connecting layer for wireless short-range
    transmission, low power consumption, low complexity, and low cost. It uses 800/900
    MHz and 2.4 GHz ISM frequency bands. IEEE 802.15.4 is the basis for other standards
    such as ZigBee, Wireless, Hart, WIA-PA, and ISA.100.11a that challenge regional
    or market-specific versions. The base standard was published in 2003 and revisions
    in 2006 and 2011. Several changes have been added to cover additional protocols
    for the physical layer, regional frequency bands, and specific application areas.
    Current work includes other frequency bands (e.g., TV white space and regional
    bands), ultra-low power operation, and specific applications such as train control
    [42]. 2.3.1 Agricultural Monitoring IoT Architecture Agriculture is the primary
    occupation in our country for ages. But now due to the migration of people from
    rural to urban, there is a hindrance in agriculture. So to overcome this problem
    we go for smart agriculture techniques using IoT. This project includes various
    features like GPS-based remote controlled monitoring, moisture and temperature
    sensing, intruders scaring, security, leaf wetness, and proper irrigation facilities.
    It makes use of wireless sensor networks for noting the soil properties and environmental
    factors continuously. Various sensor nodes are deployed at different locations
    on the farm. Controlling these parameters are through any remote device or internet
    services and the operations are performed by interfacing sensors, Wi-Fi, and a
    camera with a microcontroller. This concept is created as a product and given
    to the farmer’s welfare [43]. Agriculture-based IoT is envisaged by developing
    a prototype platform [44] that controls network information integration to study
    the actual situation of agricultural production while operating from a remote
    location. This study employs WSN as the backbone of the implementation. Recent
    work has proposed a six-layered agriculture architecture that incorporates WSN
    as a subsidiary element to enhance multi-culture analysis, user experience, and
    predictive analysis [45]. 2.4 IoT Architecture for Smart Cities By leveraging
    innovative IoT architectural concepts, the present world can be shaped into a
    well-connected, intelligent society. This section develops research to bring the
    world to an intelligent place where logistics and intelligent living formulations
    can live and develop into an intelligent city. Figure 2.7 shows an IoT platform
    that could serve as a generic architectural basis for the development of smart
    cities. The main element is the integrated information center, which an IoT service
    provider operates. At the bottom, this center is linked to a range of services,
    including electricity, water, central heating and gas, Intelligent Transport (ITS),
    urban fire protection and security, cooperative medical services, commercial and
    tourism services, and the payment of taxes and fees. Additional platforms in this
    architecture include support for these services: cloud computing and data center,
    management center, application platform, urban eGovernment development platform,
    controlling emergency plans, a mobile service platform, and internet infrastructure
    [46]. Fig. 2.7 A generic IoT architecture for a smart city Full size image 2.5
    IoT-Fog Architecture The intelligent network uses numerous IoT applications to
    support its intelligent network monitoring and control. The requirements of IoT
    applications vary due to different tasks in the intelligent grid. Fog computing
    extends computing to the edge of a network that matches IoT applications perfectly.
    However, the distributed coordination within fog computing nodes in the intelligent
    grid cannot be met by existing schemes. Figure 2.8 presents an architecture based
    on fog for IoT applications in the smart grid architecture consisting of three
    layers: the terminal layer, the fog layer, and the cloud layer [47]. Fig. 2.8
    Fog computing-based architecture for IoT application in smart grid Full size image
    The terminal node layer is the lower layer consisting of intelligent devices that
    transmit sensed data and event logs to the top layer. The middle layer of Fog
    Nodes (FN) is the layer of fog. The FN is deployed on a network edge to expand
    the processing capacity of a cloud center. The cloud layer is the architecture’s
    top layer. This layer consists of powerful servers that analyze massive historical
    data, such as data centers. There is a fog layer in this architecture. Our fog
    layer is divided into sub-layer FN and sub-layer FN Coordination (FNC) compared
    to the traditional fog computing model. The FNs in the FN sub-layer provide a
    mechanism for migrating processing logic to the edge of the network with computing
    and storage capabilities. The FN sub-layer can also aggregate sensed data from
    the terminal node. After collection and analysis, some of the data are returned
    to the active nodes in the terminal node layer to complete the response and process
    in real time to the emergency event. The rest of the data are sent to the FNC
    sub-layer. The FNC sub-layer consists of several coordinators in service areas.
    FNs are divided into several clusters in this layer, some of which are computerized
    and stored in accordance with certain principles. For simplicity, such equipment
    is called Fog Computing Coordinators (FCN). The FCNs are focused on coordinating
    the FNs for complex tasks [47]. 2.6 IoT-Based Architecture for Healthcare Development
    IoT devices can mainly be used to facilitate further monitoring of health and
    emergency health systems. The internet and the World Wide Web (www) were the main
    drivers of globalization, promoting the convergence of electronic communications
    and media services. The internet is now a medium of social interaction. It is
    an important development that can change the way people work, learn, and live
    [48]. The authors proposed the iHome Health-IoT in home health services platform
    based on IoT, which illustrates a three-layer open platform intelligent medicine
    box (iMedBox) for various medical facilities integrated with sensors, devices,
    and communication via WAN, GPRS, and/or 3G [49]. RFID and performance capabilities
    enabled by functional materials, flexible and wearable biomedical sensors (Bio-Patch)
    enable services such as intelligent pharmaceutical packaging (iMedPack). Bio-Patch
    decides when to call remote doctors, emergency centers, hospitals, test clinics,
    and retailers in the supply chain. The Home Health Hub IoT (H3IoT) is intended
    to disseminate elderly health care at home (see Fig. 2.9) [50]. It is a five-layer
    approach (i.e., Information Processing Layer (IPL), Local Communication Layer
    (LCL), Internet Application Layer (IAL), Physiological Sensing Layer (PSL), and
    User Application Layer (UAL)) in order to assess and monitor the physiological
    changes of the elderly and to carry out subsequent health checks by doctors and
    caregivers. Fig. 2.9 Fog Home Health Hub IoT (H3IoT) platform Full size image
    2.7 Object-Based Security Architecture (OSCAR) The object-based security architecture
    is based on the concept of the security of objects related to the security of
    the application. The architecture includes authorization servers that provide
    customers with secrets of access that allow them to request resources from restricted
    CoAP nodes. OSCAR supports facilities such as caching and multicasting, while
    providing a mechanism to protect against attacks by replaying DTLS with the CoAP,
    and does not affect the operation of restricted objects by radio cycling. The
    authors evaluate OSCAR in two cases: (a) 802.15.4 Lossy Networks enabled by low
    power (LLN) and (b) communication between machine and machine (M2M) for two different
    hardware platforms and MAC layers on a real testbed using the Cooja emulator.
    The architecture was evaluated according to an intelligent city paradigm. This
    work is based on the concept of object security related to the application’s payload.
    Researchers move expensive radio communications from restricted CoAP nodes to
    more powerful servers in the proposed OSCAR architecture. They introduce authorization
    servers that store certificates and provide consumer access secrets to enable
    producers to request resources [51]. 2.8 Cyber-Physical and Social Security Architecture
    A cyber-physical–social security architecture (IPM) proposed to address information,
    physical and management security perspectives on the basis of the IoT and Ubiquitous
    IoT (U2IoT) model. Figure 2.10 shows the U2IoT security architecture (IPM) in
    three perspectives. Fig. 2.10 Security architecture (IPM). Information security
    includes two perspectives (i.e., security layer and security requirement). P:
    Physical security relates to monitoring of the environment, detection of movement,
    location, monitoring, perimeter control, and monitoring of consumption. The artificial
    immunity concept is used to detect passive and active homeostasis defenses. M:
    Management security provides the recommended requirement for human social activities
    and events, industry/local/national regulations, and international policies and
    standards. In order to guarantee U2IoT security and privacy, IPM realizes the
    union of the cyber world, the physical world, and human society [52] Full size
    image 2.9 Hierarchical Architecture of Security This architecture covers most
    security technologies and ensures full compatibility of various security mechanisms.
    The proposed architecture aims to improve the entire security system’s efficiency,
    reliability, and controllability. In order to combat vulnerability, a coarse-grained
    security cell is designed to protect the IoT-enabled system in the form of information,
    data, control, and behavior together with a refined secure subject. The security
    of the longitudinal 2D security architecture is further classified according to
    the environment: security of the perceptual layer, network layer security, middleware
    layer, and application layer security. In each layer, division by function consists
    of identity security, data security, control security, and security behavior [53].
    Vertically, in a complicated environment, the hierarchical security architecture
    can isolate various subjects and analyze the relevant security technology in a
    relatively closed application and attack scene. The security mechanism sorted
    by the data flow processing sequence consists of identity security, data security,
    and control security horizontally in the same layer. A brief analysis of the security
    architecture structure is as follows: First, because of its controllable and closed
    backbone network and mature technology, network layer security is the simplest
    compared to the other layers. Second, although the application layer environment
    is open, its mature infrastructure (e.g., web and database server and operating
    system) and the absence of a unified security mode have led to numerous studies
    of its security technology. Cloud computing is an important technology in the
    middleware layer. Although the technology itself remains incomplete, related field
    research focuses on security technology (especially user data and privacy protection).
    In contrast, for several reasons, the perceptual layer environment is the most
    complicated. First, the difficulty of using only one type of security technology
    is determined by different perceptual networks. Second, the perceptual environment
    is open, which means that security measures previously used in closed environments
    can cause open environmental problems. Limited resources, poor performance, and
    heterogeneity of several perceptive nodes can eventually lead to numerous security
    problems. However, related studies of these perceptive layer characteristics are
    limited. Therefore, security research in the perceptual network is essential [54].
    From the point of view of application logic, the perceptual layer and the application
    layer of the mechanism are closely related. Therefore, perceptual security, together
    with the security of the entire system, must be considered rather than separated
    from the safety of other layers. Privacy protection, terminal identity privacy,
    and perceptual layer privacy are, for example, closely linked to storage security
    and user data protection in the application layer. Intrusion detection also requires
    cross-layer cooperation to effectively identify malicious terminals, facilities,
    and institutions [53]. 2.10 Media-Aware Traffic Security Architecture Zhou et
    al. [55] propose an efficient Media Traffic Security Architecture (MTSA) that
    facilitates various IoT multimedia applications. Multimedia applications running
    on IoT can use MTSA as one of the first traffic management strategies with security
    awareness. MTSA provides a general security architecture that is aware of the
    media, taking into account the characteristics of multimedia traffic, security,
    and IoT. MTSA uses a context-aware multimedia service security framework. The
    MTSA framework is shown in Fig. 2.11. The distribution of the inactive paradigm
    of visual sharing is used in this architecture. It uses a visual confidentiality
    measure that degrades proportionally to the number of shares in an eavesdropper’s
    possession [55]. Fig. 2.11 Media-aware traffic security architecture (MTSA) Full
    size image 2.11 HIMMO-Based Security Architecture “HIMMO” is a comprehensive,
    lightweight safety architecture designed to protect IoT throughout the device’s
    life cycle. HIMMO is not only resourced efficiently but also allows advanced IoT
    protocols and deployments. HIMMO can be integrated into existing communication
    protocols such as IEEE 802.15.4 or OMA LWM2 M with a number of advantages, such
    as performance and operation. The main features of this type of security architecture
    are full collusion resistance, device authentication, and verification and backend,
    an agreement between key pairs, support for multiple TTPs and key controls, or
    protection from DoS attacks [56]. Some of the HIMMO architecture features are
    presented below. A solution that is light (time and energy) and scalable and compatible
    with the life cycle is required to protect IoT. Security architecture based on
    HIMMO allows: Key pair agreement + implicit certification and verification of
    credentials Multiple TTP support While being Lightweight Scalable Resistant to
    collusion and possibly quantity safe The identity-based security of HIMMO is easily
    integrated with existing protocols (DTLS, IEEE 802.15.4) with many advantages.
    For other primitives, such as stream cipher, HIMMO algorithm can be reused. Implementation
    of HIMMO open source available for research (Oscar dot Garcia at Philips dot com)
    Operation Easy integration in protocols Collusion resistance Key agreement Credential
    verification Infrastructure Efficient resistance to root capture Ensures privacy
    Key escrow Facilitates secure manufacturing Long-term security Network access
    Device authentication/authorization Backend authentication/authorization DoS prevention
    Device identification/blacklisting [56]. 2.12 Security Architecture Based on IoTNetWar
    The architectural framework of IoTNetWar has a defense basis to introduce advanced
    network-based technologies into defense. This architecture (Fig. 2.12) has four
    layers: the physical sensing layer, the gateway communication layer, the C4ISR
    management layer (transport protocol), and the application layer invasion designed
    to assimilate integrated military communication, intellectual intelligence, and
    control of C4ISR under one roof. C4ISR layer monitors the interaction between
    the defense headquarters and its data center through voice cooperation [57]. Fig.
    2.12 IoTNetWar architectural framework Full size image 3 Conclusion The objective
    of this chapter was to provide a review of the most critical aspects of IoT with
    a specific focus on IoT device architecture. Therefore, first the background and
    definition of IoT are given. Second, thorough discussions on the fundamentals
    behind IoT architectures are elaborated. Next, several key domains where IoT-based
    research works are currently going on are visited. References L. Atzori, A. Iera,
    G. Morabito, The internet of things: a survey. Comput. Netw. 54(15), 2787–2805
    (2010) Article   Google Scholar   S. Walsh, http://www.gartner.com/newsroom/id/2905717
    [Accessed on 21 June 2015] (2017) M. Mohammadi, M. Aledhari, A. Al-Fuqaha, Internet
    of things: a survey on enabling technologies, protocols and applications. IEEE
    Commun. Surveys Tuts. 17(4), 2347–2376 (2015) Article   Google Scholar   J. Guth,
    U. Breitenbucher, M. Falkenthal, F. Leymann, L. Reinfurt, Comparison of IoT platform
    architectures: a field study based on a reference architecture. In 2016 Cloudification
    of the Internet of Things (CIoT), Paris, 23–25 November 2016 Google Scholar   C.
    Bormann et al., CoAP (Constrained Application Protocol) over TCP TLS and WebSockets,
    IETF Internet Draft (2018) Google Scholar   OASIS.org, MQTT version 3.1.1. (OASIS
    Standard, October 2014), http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqttv3.1.1-os.html.
    Accessed June 2018 B. Varghese, R. Buyya, Next generation cloud computing: new
    trends and research directions. Futur. Gener. Comput. Syst. 79, 849–861 (2018)
    Article   Google Scholar   Connected Product Management (Xively, [online]), https://www.xively.com/xively-IoT-platform/connected-productmanagement.
    Accessed May 2018 Guide to Connected Product Management (CPM) (Xively, [online]),
    https://www.xively.com/resources/guide-toconnected-product-management. Accessed
    May 2018 Device Pilot Features (Device Pilot, [online]), https://www.devicepilot.com/about/features/.
    Accessed May 2018 Wind River Helix Device Cloud (Wind River, [online]), https://www.windriver.com/products/helix/devicecloud/.
    Accessed May 2018 Overview of QuickLink IoT Services Platform (SmithMicroSoftware,
    [online]), https://www.smithmicro.com/IoToem/products/quicklink-IoT-services-platform/overview.
    Accessed May 2018 Manage Your Industrial IoT with ThingWorx (ThingWorx, [online]),
    https://www.ptc.com/en/products/IoT/thingworxplatform/manage. Accessed May 2018
    Device Cloud (Particle, [online]), https://www.particle.io/products/software/device-cloud.
    Accessed May 2018 Data and Device Management (Losant, [online]), https://www.losant.com/IoT-platform/data-and-devicemanagement.
    Accessed May 2018 DataV IoT Device Management (BSquare, [online]), https://www.bsquare.com/IoT-device-management/.
    Accessed May 2018 Q.Z.S.A.H. Ngu, M. Gutierrez, V. Metsis, S. Nepal, IoT middleware:
    a survey on issues and enabling technologies. IEEE Internet Things J. 4, 1–20
    (2017) Article   Google Scholar   M. Mukherjee, I. Adhikary, S. Mondal, A.K. Mondal,
    M. Pundir, V. Chowdary, A vision of IoT: applications challenges and opportunities
    with Dehradun perspective. Adv. Intell. Syst. Comput 479(4), 553–559 (2017) Google
    Scholar   H. Ning, Z. Wang, Future IoT architecture – like mankind neural system
    or social organization framework. IEEE Com. Lett. 15(4), 461–463 (2011) Article   Google
    Scholar   M. Bilal, “A review of internet of things architecture”, technologies
    and analysis smartphone-based attacks against 3D printers. arXiv preprint arXiv:1708.04560,
    1–21 (2017) Google Scholar   M. Botterman, For the European Commission Information
    Society and Media Directorate General, Networked Enterprise & RFID Unit – D4.
    Internet of Things: An Early Reality of the Future Internet, Report of the Internet
    of Things Workshop, Prague, 2009 Google Scholar   I. Toma, E. Simperl, G. Hench,
    A joint roadmap for semantic technologies and the internet of things. in Proceedings
    of the Third STI Road mapping Workshop, Crete, 2009 Google Scholar   Ahson, S.A.,
    Ilyas, M, Near Field Communications Handbook (Internet and Communications) (CRC
    Press Taylor and Francis, 2011, 23 September). ISBN-10: 1420088149 Google Scholar   A.
    Kos, D. Pristov, U. Sedlar, J. Sterle, M. Volk, T. Vidonja, M. Bajec, D. Bokal,
    J. Beṧter, in Open and Scalable IoT Platform and Its Applications for Real Time
    Access Line Monitoring and Alarm Correlation. Conference on Internet of Things
    and Smart Spaces. International Conference on Next Generation Wired/Wireless Networking.
    Lecture Notes in Computer Science (Springer, Berlin, 2012), pp. 22–38 Chapter   Google
    Scholar   A. Jules, A research survey: RFID security and privacy issue. Comput.
    Sci. 24, 381–394 (2006) Google Scholar   M.H. Asghar, RFID and EPC as key technology
    on internet of things (IoT). Int. J. Comput. Sci. Technol. 6, 121–123 (2015) Google
    Scholar   F. A. Johnson et al., The GS1 EPCglobal Architecture Framework, 1–72,
    Version 1.6 (2014) Google Scholar   E. Ho, T. Jacobs, S. Meissner, S. Meyer, M.
    Monjas, A.S. Segura, ARM testimonials, in Enabling Things to Talk, (Springer,
    Berlin, Heidelberg, 2013), pp. 279–322 Chapter   Google Scholar   A. Jain, A.
    Tanwer, Modified Epc global network architecture of internet of things for high
    load Rfid systems: free download & streaming: internet archive. Proc. Int. Conf.
    Adv. Comput. Sci. 1(3), 3–7 (2010) Google Scholar   J.H. Yunsong Tan, A service-oriented
    IOT middleware model [J]. Comput. Sci. 4, 115–120 (2015) Google Scholar   S. De
    Deugd, R. Carroll, K.E. Kelly, B. Millett, J. Ricker, SODA: Service-oriented device
    architecture. IEEE Pervasive Comput. 5, 94–96 (2006) Article   Google Scholar   A.
    A.-J. M. M. A. Burhanuddin, IoT architecture section I: the issue / challenge.
    Eng. Res. 12, 11055–11061 (2017) Google Scholar   H. Deng, Research and implementation
    of the RFID middleware based on SOA [J]. J. Shanxi Norm. Univ. 10, 1–7 (2008)
    Google Scholar   X.H. Qing Hu, Y. Shan, Based on internet of things and RFID middleware
    technology research. Micro Comput. Inf 25, 105–185 (2009) Google Scholar   P.P.
    Pereira, J. Eliasson, R. Kyusakov, J. Delsing, Enabling cloud connectivity for
    mobile internet of things applications. in Proceedings IEEE 7th International
    Symposium on Service Oriented System Engineering (SOSE), Redwood City, CA, 25–28
    March 2013, pp. 518–526 Google Scholar   S. Clayman, A. Gali, INOX: a managed
    service platform for interconnected smart objects. Proc. of the workshop on Internet
    of Things and Service Platforms (loTSP’11), 1–8 (2011) Google Scholar   P. Spiess
    et al., SOA-based integration of the internet of things in enterprise services.
    In Proceedings of IEEE ICWS, Los Angeles, CA, 6–10 July 2009 Google Scholar   NoOASI,
    0000. Web Services Business Process Execution Language Version 2.0, Working Draft,
    http://docs.oasis-open.org/wsbpel/2.0/wsbpelspecificationdraft.pdf F.J. Kang Lee,
    P. Lanctot, Internet of Things: Wireless Sensor Networks (International Electrotechnical
    Commission, 2017) Google Scholar   F. Xia, Wireless sensor technologies and applications.
    Sensors 9(11), 8824–8830 (2009) Article   Google Scholar   I.F. Akyildiz, W. Su,
    Y. Sankarasubramaniam, E. Cayirci, Wireless sensor networks: a survey. Comput.
    Netw. 38, 393–422 (2002) Article   Google Scholar   F. Chen, N. Wang, R. German,
    F. Dressler, LR-WPAN for industrial applications. In 2008 Fifth Annual Conference
    on Wireless on Demand Network Systems and Services, Garmisch-Partenkirchen, 23–25
    January 2008 Google Scholar   T. Jyothi, C. Vineetha, J. Vandana, B. Vamsikrishna,
    C. Rammohan reddy, WIFI based agriculture environment monitoring system using
    android mobile application, in National Conference on Emerging Trends in Information,
    Management and Engineering Sciences, (2018), pp. 1–5 Google Scholar   J.C. Zhao,
    J.F. Zhang, Y. Feng, J.X. Guo, The study and application of the IOT technology
    in agriculture. In 3rd International Conference on Computer Science and Information
    Technology, vol. 2, Chengdu, 9–11 July 2010, pp. 462–465 Google Scholar   S. Sebastian,
    P.P. Ray, When soccer gets connected to internet. In International Conference
    on Computing and Communication Systems (I3CS), Shillong, 2015, pp. 84–88 Google
    Scholar   Z. Ji, I. Ganchev, M. O’Droma, A generic IoT architecture for smart
    cities. in 2014, 25th IET Irish Signals & Systems Conference 2014 and 2014 China-Ireland
    International Conference on Information and Communications Technologies (ISSC
    2014/CIICT 2014), Limerick, 26–27 June 2013, pp. 196–199 Google Scholar   P. Wang,
    S. Liu, F. Ye, and X. Chen, A fog-based architecture and programming model for
    IoT applications in the smart grid. Netw. Internet Archit. (2018, April) Google
    Scholar   B.M. Lee, J. Ouyang, Intelligent healthcare service by using collaborations
    IOT personal health device. Int. J. BioSci. BioTechnol. 6(1), 155–164 (2014) Google
    Scholar   G. Yang, L. Xie, M. Mäntysalo, X. Zhou, Z. Pang, L.D. Xu, S. Kao-Walter,
    Q. Chen, L.R. Zheng, A health-IoT platform based on the integration of intelligent
    packaging, unobtrusive bio-sensor, and intelligent medicine box. IEEE Trans. Ind.
    Informatics 10(4), 2180–2191 (2014) Article   Google Scholar   P.P. Ray, Internet
    of things based physical activity monitoring (PAMIoT): an architectural framework
    to monitor human physical activity. in IEEE CALCON, Kolkata, 2014, pp. 32–34 Google
    Scholar   M. Vucinic, B. Tourancheau, F. Rousseau, A. Duda, L. Damon, R. Guizzetti,
    OSCAR: object security architecture for the internet of things. in Proceeding
    of IEEE International Symposium on a World of Wireless, Mobile and Multimedia
    Networks 2014, WoWMoM 2014, Sydney, NSW, 19 June 2014 Google Scholar   H. Ning,
    H. Liu, Cyber-physical-social based security architecture for future internet
    of things. Adv. Internet Things 2(1), 1–7 (2012) Article   Google Scholar   W.
    Zhang, B. Qu, Security architecture of the internet of things oriented to perceptual
    layer. Int. J. Comput. Consum. Control 2(2), 37–45 (2013) Google Scholar   M.
    Bhabad, B. Sudhir, Internet of things: architecture, security issues and countermeasures.
    Int. J. Comput. Appl. 125(14), 1–4 (2015) Google Scholar   L. Zhou et al., Context-aware
    multimedia service in heterogeneous networks. IEEE Intell. Syst. 25(2), 40–47
    (2010) Article   Google Scholar   O. Garcia-Morchon, R. Rietman, S. Sharma, L.
    Tolhuizen, J.L. Torre-Arce, A comprehensive and lightweight security architecture
    to secure the IoT throughout the lifecycle of a device based on HIMMO. in Algorithms
    for Sensor Systems. Lecture Notes Computer Science, vol. 9536 (Springer, Cham,
    2016), pp. 112–128 Chapter   Google Scholar   P.P. Ray, Towards an internet of
    things based architectural framework for defence. in International Conference
    on Control, Instrumentation, Communication and Computational Technologies (ICCICCT),
    Kumaracoil, 18–19 December 2015, pp. 411–416 Google Scholar   Download references
    Author information Authors and Affiliations Department of Computer Engineering,
    Shabestar Branch, Islamic Azad University, Shabestar, Iran Mohammad Ali Jabraeil
    Jamali, Arash Heidari, Parisa Allahverdizadeh & Farhad Norouzi Young Researchers
    and Elite Club, Khoy Branch, Islamic Azad University, Khoy, Iran Bahareh Bahrami
    Rights and permissions Reprints and permissions Copyright information © 2020 Springer
    Nature Switzerland AG About this chapter Cite this chapter Jabraeil Jamali, M.A.,
    Bahrami, B., Heidari, A., Allahverdizadeh, P., Norouzi, F. (2020). IoT Architecture.
    In: Towards the Internet of Things. EAI/Springer Innovations in Communication
    and Computing. Springer, Cham. https://doi.org/10.1007/978-3-030-18468-1_2 Download
    citation .RIS.ENW.BIB DOI https://doi.org/10.1007/978-3-030-18468-1_2 Published
    13 June 2019 Publisher Name Springer, Cham Print ISBN 978-3-030-18467-4 Online
    ISBN 978-3-030-18468-1 eBook Packages Engineering Engineering (R0) Share this
    chapter Anyone you share the following link with will be able to read this content:
    Get shareable link Provided by the Springer Nature SharedIt content-sharing initiative
    Publish with us Policies and ethics Download book PDF Download book EPUB Sections
    Figures References Abstract Introduction Survey on Domain-Specific Useful IoT
    Architectures Conclusion References Author information Rights and permissions
    Copyright information About this chapter Publish with us Discover content Journals
    A-Z Books A-Z Publish with us Publish your research Open access publishing Products
    and services Our products Librarians Societies Partners and advertisers Our imprints
    Springer Nature Portfolio BMC Palgrave Macmillan Apress Your privacy choices/Manage
    cookies Your US state privacy rights Accessibility statement Terms and conditions
    Privacy policy Help and support 129.93.161.222 Big Ten Academic Alliance (BTAA)
    (3000133814) - University of Nebraska-Lincoln (3000134173) © 2024 Springer Nature'
  inline_citation: Jamali, Bahrami, Heidari, Allahverdizadeh & Norouzi  (2019)
  journal: EAI/Springer Innovations in Communication and Computing
  limitations: The paper lacks specific technical details on data collection and transmission
    mechanisms and does not provide in-depth analysis of the challenges and solutions
    associated with handling different data types in IoT systems.
  pdf_link: null
  publication_year: 2019
  relevance_score: 0.6
  relevance_score1: 0
  relevance_score2: 0
  title: IoT Architecture
  verbatim_quote1: null
  verbatim_quote2: null
  verbatim_quote3: '>'
