- DOI: https://doi.org/10.1109/jiot.2018.2876088
  analysis: '>'
  authors:
  - Md. Asif-Ur-Rahman
  - Fariha Afsana
  - Mufti Mahmud
  - M. Shamim Kaiser
  - Muhammad Ejaz Ahmed
  - Omprakash Kaiwartya
  - Anne James
  citation_count: 149
  full_citation: '>'
  full_text: '>

    This website utilizes technologies such as cookies to enable essential site functionality,
    as well as for analytics, personalization, and targeted advertising purposes.
    To learn more, view the following link: Privacy Policy Manage Preferences IEEE.org
    IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account Personal
    Sign In Browse My Settings Help Access provided by: University of Nebraska - Lincoln
    Sign Out All Books Conferences Courses Journals & Magazines Standards Authors
    Citations ADVANCED SEARCH Journals & Magazines >IEEE Internet of Things Journal
    >Volume: 6 Issue: 3 Toward a Heterogeneous Mist, Fog, and Cloud-Based Framework
    for the Internet of Healthcare Things Publisher: IEEE Cite This PDF Md. Asif-Ur-Rahman;
    Fariha Afsana; Mufti Mahmud; M. Shamim Kaiser; Muhammad R. Ahmed; Omprakash Kaiwartya;
    Anne James-Taylor All Authors 144 Cites in Papers 4769 Full Text Views Open Access
    Under a Creative Commons License Abstract Document Sections I. Introduction II.
    State-of-the-Art of IoHT Frameworks III. Proposed IoHT Framework IV. Optimal Resource
    Allocation and Load Balancing V. Results Show Full Outline Authors Figures References
    Citations Keywords Metrics Footnotes Abstract: Rapid developments in the fields
    of information and communication technology and microelectronics allowed seamless
    interconnection among various devices letting them to communicate with each other.
    This technological integration opened up new possibilities in many disciplines
    including healthcare and well-being. With the aim of reducing healthcare costs
    and providing improved and reliable services, several healthcare frameworks based
    on Internet of Healthcare Things (IoHT) have been developed. However, due to the
    critical and heterogeneous nature of healthcare data, maintaining high quality
    of service (QoS)-in terms of faster responsiveness and data-specific complex analytics-has
    always been the main challenge in designing such systems. Addressing these issues,
    this paper proposes a five-layered heterogeneous mist, fog, and cloud-based IoHT
    framework capable of efficiently handling and routing (near-)real-time as well
    as offline/batch mode data. Also, by employing software defined networking and
    link adaptation-based load balancing, the framework ensures optimal resource allocation
    and efficient resource utilization. The results, obtained by simulating the framework,
    indicate that the designed network via its various components can achieve high
    QoS, with reduced end-to-end latency and packet drop rate, which is essential
    for developing next generatione-healthcare systems. Published in: IEEE Internet
    of Things Journal ( Volume: 6, Issue: 3, June 2019) Page(s): 4049 - 4062 Date
    of Publication: 14 October 2018 ISSN Information: DOI: 10.1109/JIOT.2018.2876088
    Publisher: IEEE Funding Agency: CCBY - IEEE is not the copyright holder of this
    material. Please follow the instructions via https://creativecommons.org/licenses/by/4.0/
    to obtain full-text articles and stipulations in the API documentation. SECTION
    I. Introduction With the sudden growth of electronic devices and improved connectivity
    of the Internet, nowadays more devices are connected to the Internet than people
    [1]. This has been facilitated by a concept, called “Internet of Things” or IoT,
    which was coined back in 1999 by Kevin Ashton and was meant to connect Radio-frequency
    identification (RFID) devices in the supply chain of a consumer goods manufacturer
    [2]. However, currently the term is used in almost every field to describe a network
    of communicable devices [3], [4]. In recent years, IoT enabled devices have emerged
    exponentially and the estimated number of connected devices are to exceed 28 billion
    by 2021 [see Fig. 1(a)]. As a technology, the IoT has been adopted at a varied
    pace among different industries and sectors with their respective applications.
    The healthcare sector, which is slow in adopting new technologies, however, shows
    an incredible estimated growth and is expected to have over 50 million connected
    devices worldwide by 2021 [see Fig. 1(b)] [5]. Also, different application domains
    in healthcare have shown varied opportunities in applying IoT and, as per the
    current trend, the smart healthcare products application domain [e.g., smart pills,
    smart dispensing devices and syringes, smart monitoring devices, smart RFID cabinets,
    electronic health record (eHR), etc.] is the hottest [see Fig. 1(c)] [6]. Fig.
    1. Global connectivity through IoT devices. (a) Global estimation of connected
    IoT devices by the year 2021. (b) Global estimation of IoHT devices by the year
    2021. (c) Heatmap of current IoHT application opportunities. Show All Considering
    the increase of life expectancy, the Population Reference Bureau projected that
    by 2050 the World’s population will grow by 31% reaching 9.8 billion [7]. With
    this unprecedented growth rate, the older population (aged 65 and over) is expected
    to raise 16% more than the total population between 2025 and 2050 [8]. This will
    eventually result in increased vulnerability of the aging population toward chronic
    diseases which is expected to account for 73% of all deaths and 60% of the global
    burden diseases by 2020 [9]. On the other hand, as predicted by the World Health
    Organization, there will be a distressing shortage of 12.9 million healthcare
    workforce worldwide by 2035 [10]. Hence, energy-efficient, low cost, and scalable
    healthcare solutions are needed to meet the shortage of healthcare workforce to
    support disease prevention, treatment, care, and cure. Leveraging the fast advancements
    in information and communication technology, electronic healthcare ( e -healthcare)
    emerged itself as a revolutionary new paradigm [11]. Following the technological
    improvements, e -healthcare is rapidly swapping the means of conventional healthcare
    [12], and fostering development of novel healthcare applications [13]. In this
    ever changing scenario of healthcare, IoT plays a key role [14] in redefining
    e -healthcare as the Internet of Healthcare Things (IoHT), where both people and
    devices interact, communicate, collect, and exchange data through integration
    of physical objects, hardware, softwares, and computing devices [15]. Connecting
    the digital world to the physical world [16], IoHT—with the help of pervasive
    and ubiquitous computing, and e -healthcare systems—allows healthcare devices
    (e.g., Fitbits, sensors, Bluetooth, mobile devices, etc.) to collect health related
    information (e.g., blood oxygen saturation, blood pressure, weight, glucose level,
    respiratory and heart rate, etc.) [17], [18] over an extended period of time and
    save as eHR. However, the various players of the e -healthcare ecosystem generate
    a large amount of heterogeneous, multidimensional and multimodal data databasing
    which is a big challenge [19], [20]. In North America, during 2010 to 2015, the
    volume of healthcare data raised from 3 million Terabyte (TB) to 14 million TB
    [see Fig. 2(a)] [21] with general unstructured data and eHR had an incredible
    increment from 0.95 millon TB in 2010 to 3.26 million TB in 2015 [see Fig. 2(b)]
    and from 0.22 millon TB in 2010 to 2.36 million TB in 2015 [see Fig. 2(c)], respectively.
    In order to process this huge volume of healthcare data, systems with enormous
    storage and processing power are needed which can analyze the big data, thus,
    cloud computing was used [22], [23]. Therefore, to shape next generation of e
    -healthcare systems, IoHT, big data, and cloud computing needed to converge to
    create the IoHT ecosystem [24]. Cloud computing plays a prominent role in the
    IoHT ecosystem by providing ubiquitous and on-demand access to shared pool of
    reconfigurable resources. Nonetheless, the current number of growing IoHT devices
    cause increasing latency due to network overloading, thus, reducing the suitability
    of the system for real-time applications. To overcome this situation, the concept
    of fog computing was introduced, by Cisco Systems Inc., in 2012, which complemented
    the cloud by providing a substantial amount of storage, communication control,
    configuration, measurement and management at the edge devices [25], [26]. The
    concept of fog computing is to deploy cloud-like services closer to user end for
    local storage and preliminary data processing to reduce congestion and latency.
    The added flexibility of computation, geographical distribution and user mobility
    support make fog computing appealing for healthcare related applications which
    require secure data transfer with low latency [27]. However, fog computing architecture
    may susceptible to single point of failure as it mostly depends on gateway device
    [28]. To further increase the response time by reducing the data traffic on fog
    nodes in local networks, mist computing can be used to create an integrated network
    [29] which bridges the IoHT devices to the virtual computing world, thus, reducing
    the response latency and enhancing the performance and lifetime of IoHT devices.
    Fig. 2. Estimated data volume generated by different healthcare applications at
    North America between 2010 and 2015. (a) Aggregated volume of healthcare data,
    (b) volume of general unstructured data only, and (c) volume of electronic health
    records data only. Show All Different data types and applications of the IoHT
    ecosystem require different processing and response times. To this aim, this paper
    proposes a novel heterogeneous cloud-based IoHT communication framework supported
    by fog and mist computing. This heterogeneous IoHT framework consists of five
    layers—perception, mist, fog, cloud, and application. The novelty of this architecture
    lies in its capability to handle separately data routing paths for different data
    types coming from real-time as well as conventional data sources, optimally balance
    the network load on demand, and optimally allocate network resources as needed.
    The obtained results show that the proposed IoHT framework provides better quality
    of service (QoS) with low power consumption and reduced latency, thus, improving
    the existing e -healthcare systems. SECTION II. State-of-the-Art of IoHT Frameworks
    Majority of the contributions concerning IoHT frameworks have been in integrating
    IoT technology to healthcare systems. Islam et al. [14] surveyed diverse aspects
    of IoT-based healthcare technologies with descriptions of various existing network
    architectures, platforms, industrial trends, and applications which facilitate
    healthcare solutions in the context of IoT. Additionally, the trends of IoT-based
    healthcare research activities were examined to showcase how IoT can address various
    healthcare issues like—pediatric and elderly care, private healthcare, chronic
    disease supervision and fitness management, and pointed out different research
    problems along with current security requirements and challenges. Through a brief
    discussion on an intelligent collaborative security model, the authors provided
    means for anomaly detection. The survey concluded with some e -health and IoT
    policies and regulations across the world to healthcare stakeholders better understand
    IoT-based healthcare technologies for sustainable development [14]. IoT enabled
    personalized healthcare systems (PHS) were systematically reviewed by Qi et al.
    [30], where the authors focused on identifying the breadth and diversity of existing
    IoT enabled PHS, the underlying key technologies along with their applications
    and case studies on healthcare, and listed future research trends and challenges.
    Farahani et al. [31] surveyed the existing literature on IoT related e -healthcare
    systems from a viewpoint of transitioning from the conventional clinic-centric
    treatment to patient-centric treatment. The authors discussed existing challenges
    of IoT-based e -healthcare systems and proposed a multilayer e -healthcare ecosystem
    with their respective applications, such as, assisted living, mobile health, warning
    systems, e-medicine, and population monitoring. Kraemer et al. [32] were among
    the first to survey the benefits and challenges of fog computing within pervasive
    healthcare applications. The authors provided a summary of deployment scenarios,
    requirement of future healthcare and variety of fog processing tasks. Mutlag et
    al. [33] performed a systematic literature review of the existing technologies
    focusing on fog computing’s usage in the field of healthcare IoT systems. The
    study further identified the flaws of the current fog-based frameworks and provided
    some recommendations toward more secure and reliable IoT systems. Ahmad et al.
    [34] proposed HealthFog, a fog computing-based framework, capable of successfully
    removing additional E2E communication costs in comparison to their counterparts.
    Their framework also ensured enhanced privacy and security using cryptographic
    primitives. To enhance reliability of IoT architecture for healthcare, Rahmani
    et al. [35] combined fog computing with smart e-Health gateways and demonstrated
    that the proposed system is capable of coping with many challenges of pervasive
    healthcare systems. They also implemented it as an IoT-based early warning score
    health monitoring system. In addition to the studies mentioned above, other reported
    works on IoT-based healthcare include: emergency medical service [36], smart rehabilitation
    system [37], do-it-yourself solution focusing on patient oriented infrastructure
    development [38], smart hospital system [39], anomaly detection [40], body sensor
    network-based healthcare system [41], cardiac arrhythmia management system [42],
    and self-aware early warning system [43]. Laplante and Laplante discussed about
    their view on negetive effects of IoT in healthcare and showcased an example of
    the dissociation between patient and caregiver resulting in loss of care [44].
    With the growing amount of data, their processing and storage requirements also
    escalated. To tackle this need, the IoT-based healthcare systems were integrated
    into more extensive cloud computing architectures. This integration of “IoT” and
    “Cloud computing” has contributed toward the development of many innovative solutions
    [45]–[47] spanning in different fields including e -healthcare. With the aim of
    seamless integration of various remote health monitoring techniques (e.g., sensing
    analytics, visualization, etc.), Hassanalieragh et al. [48] discussed on the existing
    challenges related to such integration and their views on integrating those techniques
    in the clinical practice. Biswas et al. introduced e -health cloud, a three-layered
    cloud-based framework—capable of mining eHR data—where the network layer was designed
    using Rich Internet Application1-based client, the server layer with SimpleDB,2
    and a logic layer [49]. Pathinarupothi et al. [50] presented a multilayered architecture
    consisting of IoT devices coupled with body sensors which was implemented to remotely
    monitor cardiac patients. The cloud HealthIIoT (Health-care Industrial IoT) framework
    proposed by Hossain and Muhammad [51] transmitted healthcare data securely to
    the cloud to be accessed by healhcare professionals, and was validated through
    an IoT driven ECG-based health monitoring application. Suciu et al. proposed an
    e -health architecture based on exalead cloudview3 which securely integrates big
    data analytics with cloud-based Remote Telemetry Units4 [52]. Ma et al. [53] proposed
    a four-layered big health application, system supported by IoHT and big data,
    for remote disease diagnosis, smart clothing-based healthcare, LTE assisted telemedicine,
    and robotic interactions. Similar frameworks include: monitoring systems for chronic
    diseases, such as cardiovascular and respiratory diseases through IoT sensors
    [54], mobile healthcare systems for patient monitoring using big data analytics
    applied on sensor data [55], [56], heterogeneous healthcare big data analytics
    system for decision making in risk management and patient care [57]. The cloud
    can also be deployed to process and manage the IoT data online [58], [59]. Dehury
    and Sahoo [60] implemented a cloud-based service management framework for analyzing
    real-time IoT data. Various cloud-IoT (cIoT) frameworks have been suggested for
    pervasive healthcare [61]–[63]. A case study of voice pathology monitoring was
    proposed using an cIoT model [64]. Bagula et al. [65] introduced cIoT model to
    prioritize situation aware patients. Hasan et al. [66] introduced a cIoT model,
    called Aura, which allowed mobile clients to create ad-hoc clouds using IoT devices
    in their adjacent environments and provided the clients full control of the range
    of analyses to be performed regardless of their physical locations. Many studies
    have been reported which utilized the cIoT model to remotely monitor patients
    [67]–[69] using: ECG android application [70] along with other helathcare data
    [51], FIWARE5 platform [71], and wearable sensors (IoT) and body area network
    [72]. Additionally, other cIoT frameworks include: personnel altering system regarding
    lifestyle diseases from physical activity data [73], [74], collecting real-time
    patient data from wireless body area network [75], accumulating physiological
    and healthcare data smart clothing with IoT sensors [76], [77], selecting personalized
    treatment plan [78], providing personalized medical diagnosis [79], supporting
    the physically challenged with assistive devices [80]. The transmission and processing
    latency is the major bottleneck for real-time handling of data in the cloud. Dastjerdi
    and Buyya [81] proposed fog computing along with edge and cloud computing to handle
    the big data generated by IoT sensors. Shi et al. [82] outlined the various characteristics
    of fog computing to manage real-time IoT healthcare data. A low-cost fog-IoT healthcare
    system was presented which collected the ECG, respiration rate, and body temperature
    using energy-efficient sensor nodes and analyzed those data for automatic decision
    making which can be given to appropriate caregivers in real-time [83]. SECTION
    III. Proposed IoHT Framework Large scale IoT implementation results in large number
    of connected devices. By default, most of these connected devices are with limited
    processing power and resources. But, the voluminous and heterogeneous data generated
    by these devices require efficient and data type specific processing. Centralized
    cloud-based IoT scheme brings out an effective solution in this regard. However,
    solo cloud dependent processing is constrained by latency and power consumption
    issues which can be solved—up to certain extent—by introducing a fog layer. The
    fog assisted IoT framework with smart gateways (as proposed in [35]) is an approach
    to enhance reliability, energy-efficiency and performance of IoT frameworks. Nonetheless,
    there are still QoS issues with sensitive data transmission and there is no need
    to process various types of data (e.g., delay-sensitive and loss-sensitive) in
    each layer of a framework. An effective solution to this problem is to allow the
    framework to be able to handle different types of “on demand” data processing
    in different layers. This has been achieved in the proposed framework consisting
    of five layers (perception, mist, fog, cloud, and application). The introduction
    of an additional layer (i.e., the mist layer) to the existing fog-based architecture
    reduces data volume to be transmitted by the IoT devices through rule-based preprocessing
    of data. This reduction in data volume in turn reduces power consumption of the
    IoT devices, and latency (processing as well as transmission) and computational
    complexity of the framework. Therefore, the proposed IoHT framework is capable
    of selecting appropriate data transmission policies based on the disparate data
    sources to minimize latency; ensuring optimal resource utilization through delegating
    and delivering processes to layers with relatively less loads; guaranteeing minimal
    transmission delay through appropriate load balancing; and assuring most favorable
    data-sensitive resource allocation for prioritized data transmission. The following
    sections describes the various components of the framework. A. Ecosystem An interoperable
    ecosystem consisting of diverse devices, applications, and back-end systems is
    essential for successful architectural design of an IoHT framework which will
    ensure undisrupted information flow for accurate and timely decision making [84],
    [85]. A conceptual overview of the proposed IoHT ecosystem is shown in Fig. 3.
    As the ecosystem diagram indicates, various IoHT stakeholders who reside at the
    outer circle (e.g., healthcare organizations and professionals, patients, applications,
    and information systems) connect to their relevant counterparts to the inner circles
    aiming seamless information exchange. Outer circle is the most interactive and
    responsive one with very little analytical capabilities. Gradually moving toward
    the inner circles, the analytical capabilities along with latency and data storage
    increase. So, to ensure delay tolerant data transmission of real-time data as
    well as big data, the proposed architecture adopts appropriate layer-specific
    data transmission polices. Fig. 3. Overview of an IoHT ecosystem with its various
    stakeholders which implements the proposed framework. Show All B. Network Architecture
    Fig. 4 shows the proposed IoHT framework’s architecture. The five layers are:
    1) perception layer; 2) mist layer; 3) fog layer; 4) cloud layer; and 5) application
    layer. Each of these layers has been designed with predefined functionalities
    relevant to the IoHT framework’s data transmission and processing pipeline. Fig.
    5 shows a block diagram with the functionality of individual layers. Fig. 4. Architecture
    of the proposed IoHT framework indicating different layers and possible connectivities
    among them. The arrow directions indicate the flow of data. Show All Fig. 5. Layer-wise
    functionality of the proposed IoHT framework. Show All 1) Perception Layer: The
    perception layer is the lowest layer of the proposed IoHT framework. This layer
    is responsible for recognizing physical objects, and gathering contextual and
    healthcare data from devices generating (near) real-time as well as nonreal-time
    data. The data are mainly measured from individuals and their surroundings through
    small sensors, embedded systems, RFID tags, and readers, small to medium to large
    diagnostic and healthcare devices, medical and clinical imaging devices, and any
    data acquisition and transmission enabled devices. These hardware devices are,
    in general, connected to the data communication network. Besides the real-time
    healthcare data, there are healthcare big data [e.g., structured eHR, electronic
    medical record (eMR), (non-)clinical/medical imaging data, unstructured clinical
    notes, etc.] which demand separate handling due to their requirement of advanced
    data analytics [86], [87]. In the proposed framework, both kinds of healthcare
    data are transmitted to specific overlaying layer (either mist or fog or cloud)
    based on the data type and their processing requirements. 2) Mist Layer: To facilitate
    time-critical data processing, the mist computing layer has been introduced in
    the model. Mist computing resides directly within the network fabric and operates
    on the extreme edge of it with the help of sensor and actuator controllers. This
    layer is responsible for performing basic rule-based preprocessing of the sensor
    data (e.g., data aggregation, fusion, and filtering). At the edge of the IoT network,
    a fair share of the “Things” are with limited resources (e.g., power, communication
    bandwidth, and memory). Mist computing contributes to optimal resource utilization
    of the Things. For example, since communication consumes ∼5× the power of computing,
    ensuring required transmission instead of on demand transmission will facilitate
    in optimizing the power consumption [88]. 3) Fog Layer: One of the main driving
    forces behind development of the IoT technology is the necessity to process data
    “on the fly” to detect anomalies, provide alerts at real-time, and activate necessary
    actions automatically. This clearly demands a system with high responsiveness
    and minimal latency. To this goal, using centralized cloud-based models are inappropriate
    due to their high latency. In such situations, decentralizing and delegating the
    processing loads on different layers based on the application’s demand is needed.
    The fog layer forms a decentralized architectural pattern for bringing computing
    resources and application services closer to the edge, thus, reducing the response
    latency. As for the functional components, the fog layer supports—local data storage,
    data filtering, data compression, data fusion, and intermediate data analytics
    to reduce disposable load on the cloud, improve system performance and QoS, and
    save backbone bandwidth. 4) Cloud Layer: The cloud layer is capable of connecting
    to perception layer, fog layer, and application layer. Aggregated healthcare data
    from fog layer are sent to the cloud layer for long-term storage, and big data
    and advanced analytics. Also data from nonsensor sources, such as eMR, eHR, e-prescription
    platform, etc. get seamlessly integrated at this layer. In order to extract meaningful
    insights from the heterogeneous healthcare data, the cloud layer performs various
    advanced data analytics including, machine learning, data mining, rule-based processing,
    and automated reasoning-based algorithms. However, delegating appropriate computing
    loads to fog layer and using cloud layer for computationally expensive operations
    will improve system performance. 5) Application Layer: The application layer is
    the topmost layer of the proposed IoHT framework. It provides user interfaces
    between the IoHT stakeholders/consumers and the framework itself to directly reflect
    the generated economic and social benefits. Through these user interfaces various
    healthcare applications are delivered to the respective stakeholders. This layer
    also provides access—subject to access rights and privileges—to relevant resources
    from the cloud or fog layer directly to the healthcare application developers
    and consumers. C. Data Transmission Policy To facilitate seamless communication
    of heterogeneous data, a data-centric transmission scheme has been utilized in
    the proposed five-layered architecture of the IoHT framework. The perception layer
    generates three possible types of delay-sensitive data, i.e., real-time, near-real-time,
    and offline/batch mode data. In order to achieve better QoS, reduced latency,
    and optimized power consumption, separate transmission paths for real-time data
    and big data have been used. Fig. 6 represents the transmission and processing
    flow of data in the proposed model. Based on data traffic and resource availability,
    the computational loads (e.g., rule-based preprocessing, pretrained machine learning,
    advanced machine learning, big data analytics, etc.) are delegated to an appropriate
    layer (either mist or fog or cloud) in the layered architecture. This resulted
    in different scenarios with specific transmission paths as detailed in the following
    sections and shown in Fig. 7. Fig. 6. Flowchart of data transmission and processing
    taking place at different layers of the IoHT framework. Show All Fig. 7. Possible
    data transmission and processing paths in the IoHT framework’s layer stack. Show
    All 1) Real-Time Data Transmission: a) Scenario 1: Many healthcare applications
    require data to be processed at real-time. In the proposed IoHT model, real-time
    data analytics are hosted at the closest possible location, where the data is
    generated. As indicated in Fig. 7 by the red-dashed lines with arrows, the generated
    time-sensitive sensor data are at first forwarded to the mist layer for preprocessing,
    followed by the fog layer for necessary intermediate analytics, and finally rendering
    decision to the application layer. For example, if a patient experiences high
    blood pressure fluctuations along with symptomatic discomforts, it is necessary
    to process the generated data and forward a decision to the caregiver as soon
    as possible to prevent a possible stroke. In this case, the preprocessed data
    from mist layer are further processed in fog layer and forwarded to the application
    layer for necessary actions by the stakeholders. b) Scenario 2: The intermediate
    data analytics performed at the fog layer is not sufficient for some healthcare
    applications. Rendering a decision for these types of applications may require
    big data analytics and advanced machine learning or long-term data storage for
    longitudinal studies. In those cases, data are offloaded to the cloud layer for
    the required processing, analysis, and storage. This transmission path is shown
    in Fig. 7 using the green dotted-dashed line with arrows. The data and the analysis
    results are usually stored in the cloud for further reference. Adverse drug reaction
    (ADR) service can be an example of this scenario. Medication for a particular
    disease needs diagnosis as well as patients previous history as ADR is inherently
    generic. So, in this case, data sensed from patient’s terminal are forwarded to
    mist layer for recognizing the drug. Later on, fog forwards the identified drug
    to the cloud, where after careful analysis of relevant eMR and allergy profiles
    the drug compatibility is decided and the decision is sent to the application
    layer to be accessed by the healthcare professionals. 2) Conventional Data Transmission:
    a) Scenario 3: Massive data generated from advanced medical instruments, test
    results, eMR requires data mining, predictive analysis, and other advanced analytics.
    Only cloud computing is capable of performing these computationally demanding
    processing. So, in this scenario, data from conventional sources are directly
    offloaded to the cloud for processing. This transmission path is indicated by
    the arrowed blue dotted lines in Fig. 7. An example of such a scenario is that,
    MRI produces thousands of high resolution images per examination which require
    more computation power and storage, and can be efficiently served only by the
    cloud. In this scenario, data are directly forwarded to the cloud without any
    processing or holding in the mist or fog layers. SECTION IV. Optimal Resource
    Allocation and Load Balancing The IoHT nodes in the perception layer collect the
    (near) real-time as well as nonreal-time healthcare data to monitor patients.
    These collected data are forwarded to the IoT hub(s) (also called access point
    or AP). Based on the traffic class and processing requirements, these data can
    be processed in the mist, fog, and cloud layers as discussed in Sections III-B
    and III-C. In the process of effective handling of these data, the end-to-end
    (E2E) delay, throughput, packet loss, energy efficiency are crucial for maintaining
    the QoS of the proposed IoHT framework. To handle these heterogeneous data efficiently
    while maintaining the high QoS, the network resources are to be dynamically allocated.
    To this goal, the proposed IoHT framework relies on software defined networking
    (SDN), which is a programmable network structure that can be deployed on the top
    of IoHT framework as a centralized/distributed control layer for resources (e.g.,
    bandwidth and buffer size) allocation, scheduling, routing, and flow control through
    SDN controller (SDNC) [89]. As SDN fulfills the requirements of various applications
    and workloads through network virtualization by decoupling control plane from
    data plane [90], it has been considered with the IoHT framework to manage the
    resource demand of exponentially growing IoT devices. A. Traffic Classification
    The perception layer of the IoHT framework (as discussed in Section III-B1) generates
    heterogeneous data or network traffic. In order to achieve better QoS, these network
    traffic are classified as the delay-sensitive ( DS ), loss-sensitive ( LS ), and
    both delay- as well as loss-sensitive (termed as “Mixed”) ( M ) traffic. This
    classification is mainly based on transmission data rate ( C ) and queuing delay
    ( tQ ), and is used to prioritize the network traffic. Table I shows various traffic
    classes, their service types, transmission priority ( P ), and exemplary applications.
    TABLE I Traffic Classification of IoHT Healthcare Data B. Resource Allocation
    In order to achieve better QoS, the objective is to reduce the time delay ( tD
    ) and packet drop rate ( Pkt drop ) during the transmission process. All the IoHT
    nodes in the mist layer achieve the minimum threshold requirement for both of
    these parameters through an optimal resource allocation. Fig. 8(a) illustrates
    an example scenario of the resource allocation problem. Fig. 8. Exemplary scenario
    of the IoHT framework with mist, fog, and cloud layers. The network is configured
    using SDN. The AP allocates resources based on the latency and packet drop rate
    demand of each IoHT nodes. Show All Consider the output link capacity of an AP
    is C , there are N IoT devices in a mist (see Fig. 8), each IoHT device has packet
    size of Pkt size . In order to ensure the QoS requirement of i th IoT device,
    the user requirement is <t D i , Pkt drop i > and the corresponding resource demand
    is < B d i , L d i > , where B d i and L d i are the bandwidth demand and buffer
    length demand of the i th IoHT user node (see Table II). As the allocated resource
    to i th IoHT device is proportional to the requirement of that user, the maximum
    resource ( Γ i ) awarded to the i th IoHT node by the SDN-based resource allocator
    is Γ i = = max[ B i C , L i L ] max[ B d i C B i B d i , L d i L L i L d i ]=max[
    D c i U c i , D l i U l i ] (1) View Source where D c i = B d i /C and D l i =
    L d i /L are the ratios of bandwidth demand of the i th node and the maximum capacity,
    and buffer length demand of the i th node and the total buffer length of AP, respectively.
    The U c i = B i / B d i and U l i = L i / L d i are the requirement to demand
    ratio of bandwidth and buffer length, respectively, for the i th node. TABLE II
    QoS Requirement and Corresponding Resource Demand to Achieve the QoS Requirement
    of the i th IoHT Node Using the M/D/1 queue model [91], the E2E delay tD includes
    the transmission delay tTx , processing delay tP , and queuing delay tQ which
    are calculated by tD= = tT x i +tP+tQ ∑ cl ∑ fog ∑ sen [ N pkt Pkt size C +( λ
    2μ(μ−λ) + 1 μ )+cλ] (2) View Source where λ and μ are the arrival and service
    rate, N pkt is the number of packets, c is the constant duration required to complete
    a job by a processor, sen refers to sensor and cl refers to the cloud. The packet
    drop occurs when the average queuing length E[ Q i ] is higher than demanded buffer
    length L d i / Pkt size . Based on [91], the packet drop rate is expressed by
    Pkt drop i = E[ Q i ]− L d i / Pkt size E[ Q i ] . (3) View Source Finally, the
    resource allocation optimization problem is formulated as max s.t  [( U c 1 ,
    U l 1 ),( U c 2 , U l 2 ),…,( U c N , U l N )]  ∑ n=1 N B n ≤C ∑ n=1 N L n ≤L.
    (4) View Source C. Load Distribution In the Fog/access layer, the E2E latency
    can be reduced by link distribution and link fusion techniques. As illustrated
    in Fig. 8, a link scheduler selects multiple links, distributes the traffic to
    reduce the E2E delay and finally aggregates the traffic at the other end of the
    access layer. If the link scheduler selects M links based on the demand of the
    IoHT users, the link adaptation optimization problem can be formulated as max
    s.t.  f(T,1/ Pkt drop )  ∑ m=1 M γ m B d ≤C  ∑ m=1 M γ m L d ≤L (5) View Source
    where T is throughput, B d and L d are the bandwidth demand and buffer length
    demand of an AP. γ m is the fraction of bandwidth/buffer length allocated by the
    load balancer and is expressed by γ m = = Fraction of allocation in the mlink
    ( B m ∑ m B m )β+( L m ∑ m L m )(1−β) (6) View Source where β= ⎧ ⎩ ⎨ 0, 1, 0.5,
    if Traffic type is LS if Traffic type is DS if Traffic type is M. View Source
    The proposed load balancing scheme is shown in Algorithm 1. The central SDN, as
    a logical controller, selects M multiple links according to traffic demand to
    coordinate load distribution. At the beginning of the process, network controller
    specifies traffic classes based on demand. For each outgoing link i the value
    of γ i is calculated from (6). For delay-sensitive and loss-sensitive traffics,
    loads are distributed based on demanded bandwidth and demanded buffer length,
    respectively. For mixed type data traffic, load distribution is done based on
    comparatively greater requirement of demand. Algorithm 1 Algorithm for Load Balancing
    Require: Output link capacity of AP as C , Queuing buffer length as L , Bandwidth
    length demand of AP as B d , Buffer length demand of AP as L d Ensure: Distributed
    Load 1: procedure BalanceLoads( C , L , B d , L d ) 2: Initialize β , ν , η ,
    Ω , ω ; 3: SDNC selects M links based on traffic demand; 4: if TrafficPriorityClass
    == 1 then 5: β⟵1 ; 6: else if TrafficPriorityClass == 2 then 7: β⟵0 ; 8: else
    9: β⟵0.5 ; 10: end if 11: for all Selected Links as i do 12: Calculate γ i using
    equation (6); 13: Ω i = γ i B d ; and ω i = γ i L d ; 14: if β==1 then 15: Distribute
    load to link i using Ω i value; 16: else if β==0 then 17: Distribute load to link
    i using ω i value; 18: else 19: B= B d ∑ i B i ;L= L d ∑ i L i ; and η = max f(
    B,L ); 20: if η==B then 21: Distribute load to link i using Ω i value; 22: else
    23: Distribute load to link i using ω i value; 24: end if 25: end if 26: end for
    27: end procedure D. Computational Complexity Considering the decentralized data
    processing capability offered by the proposed framework enables it to perform
    processing at multiple levels reducing the amount of computations needed at subsequent
    levels. This is mainly because aggregating raw data from various IoT devices results
    in matrices with very large dimensions, leading to a resource demanding system
    with intolerable computation complexity. Therefore, the computational complexity
    of the proposed framework is lesser in comparison to other existing frameworks.
    Additionally, the proposed load balancing algorithm’s complexity has an upper
    bound of O(n) , where n is the number of active selected links of the network.
    SECTION V. Results An example model is considered in this section to demonstrate
    the feasibility and advantages of the proposed multilayer mist-fog-cloud architecture
    for the IoHT framework. Considering, there are 100 IoHT nodes collecting delay-sensitive
    and loss-sensitive healthcare data from a hospital/home. The links between IoHT
    nodes (through microcontroller or microcomputer) and APs are IEEE 802.11. There
    are 5 fog nodes, 1 cloud server, and the link data rate is 54 Mb/s. The raw data
    generated by these IoHT nodes can be processed using the resources available at
    the mist layer. When the process is high (i.e., high processing delay), the mist
    can offload the processing to the fog nodes (also called fog processors). The
    process availability are generated randomly. Also, the link bandwidth and the
    queue length in the router are assumed to be distributed randomly. The fog nodes
    can be selected based on the demand and the processing delay. Finally, the information
    extracted from the mist/fog layer are sent to the server in the cloud layer. The
    link speed between the fog and the cloud is 10 Gb/s. The processing speed ratio
    of the mist to fog and fog to cloud are 1: 1000 and 1: 100, respectively. The
    parameters used to simulate the heterogeneous mist-fog-cloud for the delay-sensitive
    and loss-sensitive IoHT healthcare data are listed in Table III. TABLE III Simulation
    Parameters for the Heterogeneous Mist-Fog-Cloud-Based IoHT Framework Simulation
    Fig. 9 shows the E2E delay (or latency) for the simulation settings given in Table
    III. The results indicate that the E2E delay decreases when mist-fog nodes are
    involved in the computation along with the cloud. However, involvement of more
    fog neighbors and mist resources can reduce the E2E delay as this process reduces
    the queuing and transmission delays. The computational latency decreases when
    the number of neighboring fog nodes increase. Fig. 9. E2E delay of cloud, fog-cloud,
    and mist-fog-cloud for the simulation setting listed in Table III. The latency
    is minimal when all the mist-fog-cloud layers are involved in the process of data
    transmission and processing. Show All Fig. 10 shows the effect of buffer size
    on the packet delivery rate. The buffer size reduces the packet drop. When the
    buffer size increases the packet delivery rates in mist and mist-fog layers reduce.
    However, it should also be noted that the increase of buffer size also increases
    the queuing delay and total latency. Thus, the appropriate size of the buffer
    must be selected to ensure high delivery rate and low latency. Fig. 10. Increase
    in buffer size reduces packet drop. When buffer size increases, packet delivery
    ratios improve for all the layers. Show All Fig. 11 illustrates the outcome of
    involving fog neighbors on the task distribution of fog and cloud layers. The
    simulation results suggest that when the flow controller includes more fog neighbors
    in the task distribution process, the load on the cloud decreases as the processing
    performance on the fog nodes increase. The load on the cloud is about 60% with
    one fog node, and the load drops exponentially to 37% when the number of fog neighbors
    are four. Fig. 11. Effect of number of fog neighbors on the task distribution
    of fog/fog-cloud layers. In both cases inclusion of more fog nodes decreases the
    work load on the layers. Show All While evaluating the efficacy of the proposed
    framework, we compared its transmission time with one of the state-of-the-art
    fog computing-based framework [35]. As shown in Fig. 12, the proposed heterogeneous
    framework (denoted by mist-fog-cloud) requires comparable or less time to transmit
    same amount of processed samples in comparison to fog-based framework (denoted
    by Fog-Cloud) proposed in [35]. The mist plays its role in reducing the transmission
    time while handling real-time data (i.e., smaller sample size). In transmitting
    60 KB samples in different network conditions defined in [35] (e.g., light load,
    medium load, and heavy load), the proposed mist-fog-cloud framework would require
    1.5, 2.16, and 3.39 ms in comparison to Fog-Cloud-based framework which would
    require 1.67, 2.4, and 3.395 ms. Fig. 12. Mist facilitates reduction in transmission
    time. At different network conditions the Mist-based proposed framework showed
    an improvement in the transmission time. Show All The above specified lower transmission
    time is also facilitated by the fact that there are multiple levels of data filtering
    in our proposed model. This reduces the amount of real-time data to be transmitted
    along the network, thus, reducing computational complexity of the proposed framework
    [92]–[94]. Additionally, sophisticated data analytic schemes can also be employed
    to further reduce the computational complexity [95]. SECTION VI. Conclusion This
    paper proposes a heterogeneous cloud-based IoHT communication framework with mist
    and fog computing. The framework consists of perception, mist, fog, cloud, and
    application layers which can handle separately data routing paths for real-time
    as well as conventional data sources. To ensure high QoS of such heterogeneous
    communication frameworks, reducing E2E latency and packet drop rate are two main
    challenges. Through optimizing resource allocation and flow control, the proposed
    framework delivers improved overall QoS. Simulation results show that the proposed
    framework can achieve low E2E latency and packet drop rate. The obtained results
    clearly indicate the suitability of the proposed IoHT framework in the healthcare
    domain. Nonetheless, this paper can be extended by incorporating advanced machine
    learning techniques (e.g., deep learning) in identifying the heterogeneous traffic,
    and employing bio-inspired models to ensure effective resource usage, schedule
    optimal flow to improve performance and increase data distribution to reduce overall
    computational complexity of next generation IoHT-based healthcare systems. Authors
    Figures References Citations Keywords Metrics Footnotes More Like This Integration
    of IoT, Edge Computing and Cloud Computing for Monitoring and Controlling Automated
    External Defibrillator Cabinets in Emergency Medical Service 2019 5th International
    Conference on Information Management (ICIM) Published: 2019 Quality of Service-Adaptive
    Industrial Internet of Things leveraging Edge Computing and Deep Reinforcement
    Learning : The Deep QoS-Adaptive Learning Environment (DeQALE) Architectu... 2022
    17th Iberian Conference on Information Systems and Technologies (CISTI) Published:
    2022 Show More IEEE Personal Account CHANGE USERNAME/PASSWORD Purchase Details
    PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS Profile Information COMMUNICATIONS PREFERENCES
    PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help? US & CANADA: +1 800 678
    4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow About IEEE Xplore | Contact
    Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics
    Reporting | Sitemap | IEEE Privacy Policy A not-for-profit organization, IEEE
    is the world''s largest technical professional organization dedicated to advancing
    technology for the benefit of humanity. © Copyright 2024 IEEE - All rights reserved.'
  inline_citation: '>'
  journal: IEEE internet of things journal (Online)
  limitations: '>'
  pdf_link: https://ieeexplore.ieee.org/ielx7/6488907/8738925/08491315.pdf
  publication_year: 2019
  relevance_score1: 0
  relevance_score2: 0
  title: Toward a Heterogeneous Mist, Fog, and Cloud-Based Framework for the Internet
    of Healthcare Things
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.1016/j.jksuci.2021.09.015
  analysis: '>'
  authors:
  - Olivier Debauche
  - Saïd Mahmoudi
  - Pierre Manneback
  - Frédéric Lebeau
  citation_count: 10
  full_citation: '>'
  full_text: '>

    Skip to main content Skip to article Journals & Books Search Register Sign in
    Brought to you by: University of Nebraska-Lincoln View PDF Download full issue
    Outline Highlights Abstract Graphical abstract Keywords 1. Introduction 2. Related
    works 3. Methodology 4. Architectures 5. New trends 6. Towards Agriculture 5.0
    7. Conclusion Declaration of Competing Interest Acknowledgment References Show
    full outline Cited by (28) Figures (14) Show 8 more figures Tables (17) Table
    1 Table 2 Table 3 Table 4 Table 5 Table 6 Show all tables Journal of King Saud
    University - Computer and Information Sciences Volume 34, Issue 9, October 2022,
    Pages 7494-7514 Cloud and distributed architectures for data management in agriculture
    4.0 : Review and future trends Author links open overlay panel Olivier Debauche
    a b c, Saïd Mahmoudi a, Pierre Manneback a, Frédéric Lebeau b c Show more Share
    Cite https://doi.org/10.1016/j.jksuci.2021.09.015 Get rights and content Under
    a Creative Commons license open access Highlights • Cloud architectures used in
    Agriculture 4.0. • Distributed Architectures and Cloud Computing complements.
    • Strategies of association between Edge, Fog, Cloud. • New architectural and
    computing trends. Abstract The Agriculture 4.0, also called Smart Agriculture
    or Smart Farming, is at the origin of the production of a huge amount of data
    that must be collected, stored, and processed in a very short time. Processing
    this massive quantity of data needs to use specific infrastructure that use adapted
    IoT architectures. Our review offers a comparative panorama of Central Cloud,
    Distributed Cloud Architectures, Collaborative Computing Strategies, and new trends
    used in the context of Agriculture 4.0. In this review, we try to answer 4 research
    questions: (1) Which storage and processing architectures are best suited to Agriculture
    4.0 applications and respond to its peculiarities? (2) Can generic architectures
    meet the needs of Agriculture 4.0 application cases? (3) What are the horizontal
    development possibilities that allow the transition from research to industrialization?
    (4) What are the vertical valuations possibilities to move from algorithms trained
    in the cloud to embedded or stand-alone products? For this, we compare architectures
    with 8 criteria (User Proximity, Latency & Jitter, Network stability, high throughput,
    Reliability, Scalability, Cost Effectiveness, Maintainability), and analyze the
    advantages and disadvantages of each of them. Graphical abstract Download : Download
    high-res image (103KB) Download : Download full-size image Previous article in
    issue Next article in issue Keywords Agriculture 4.0Smart farmingSmart agricultureLambda
    architectureKappa architectureEdge computingFog computingMicro-service architectureData
    lakeData houseBlockchainOsmotic computingDew computing 1. Introduction Nowadays,
    the Internet of Things (IoT), also formerly named pervasive Internet, is present
    in all domains of our daily life and follows exponential growth. The number of
    connected devices is estimated at the horizon of 2022 at 42.5 billion and at the
    horizon of 2025 at 75.5 billion1. The global IP traffic is estimated to 333 ZB
    per month in 20222 with the need to store and treat this data (Carnevale et al.,
    2019). The European Commission has predicted that 18 billion of 29 billion connected
    devices will be related to the IoT in 2022 (Agency, 2020). Cisco in a white paper
    has announced that connected devices to the Internet will generate 850 ZB/year
    by 2021 (Cisco, 2018). It is difficult to precisely determine the number of connected
    devices on a world scale, but their number is about several billion. In addition,
    McKinsey Global Institute predicts a total economic impact of IoT and Edge Computing
    devices that will reach 11 trillion USD by 2025 (Manyika and Chui, 2015). In the
    sector of the agriculture, nearly 12 million agricultural sensors installed globally
    by 2023 with an increase of 20% annually, which is predicted by the Business Insider
    Intelligence Service (Meola, 2021). Moreover, the smart agriculture business was
    estimated at USD 13.8 billion in 2020 and is projected to reach USD 22 billion
    by 2025 at a Compound Annual Growth Rate (CAGR) of 9.8% (Meola, 2021). Within
    the IoT era, the type of clients is becoming increasingly lightweight. IoT devices
    and the network environment is gradually changing from high-speed wired networks
    to unstable wireless communication. Meanwhile, users'' demand IoT applications
    is also shifting to real-time and context-aware service provisioning, making the
    focus moving progressively from the cloud to the edge (Ren et al., 2017). The
    cloud is located within the Internet and is geographically centralized, is constituted
    of a few resourceful server nodes, and is inserted in multi hops in terms of distance
    among the clients (Munir et al., 2017). Cloud Computing (CC) is a paradigm widely
    available that offers benefits like minimal management effort, convenience, rapid
    elasticity, pay per use, ubiquity (Ai et al., 2018), easy maintenance, centralized
    management, and high server utilization (Shi et al., 2016). Furthermore, resources
    centralization implies an increase of average network latency, heavy bandwidth
    utilization, and high processing delay. Indeed, the tremendous amount of data
    handled in a unique server point can create congestion in the cloud servers and
    backhaul links (El-Sayed et al., 2017). Nevertheless, the rapid parallel development
    of the pervasive intelligent device, ubiquitous network, growth in popularity
    of virtual and augmented reality, self-driving vehicles, UAVs, social networks,
    networks applications, and services are not without consequences. As a matter
    of fact, the network bandwidth and speed limit performance and effectiveness of
    cloud computing especially for real-time and mission-critical applications cannot
    be guaranteed. Moreover, cloud computing can be hardly adapted or applied to various
    types of technologies and applications scenarios (Zhou et al., 2017). To address
    these issues, various extensions of central cloud computing have been proposed
    by industrial and academics to move computing and storage at the edge of the network
    close to users. Fog computing uses network elements between the central cloud
    and the edge of network and absolute edge elements such as microcontrollers close
    to sensors to process and store data with a distributed manner close to nodes.
    Whereas, with the developments of mobile devices, some new paradigms close to
    mobiles users have been proposed. For example, cloudlets or micro data centers
    are geographically implanted and accessible by means of Wi-Fi protocols; but,
    this approach does not always guarantee enough network quality. Manufacturers
    of cellular network equipment have proposed the Mobile Edge Computing (MEC) paradigm
    that associates fog servers with base stations to provide services to mobile devices.
    MEC associated with 5G allows to combine an ultra-low latency network with high
    available bandwidth, and processing resources accessible in the vicinity. The
    MEC original concept has been extended then to wireless networks and consequently
    renamed in “Multi-access Edge Computing” (Wang et al., 2020). Agriculture has
    previously undergone two waves of revolution. The first one was mechanization
    and the second was called the green revolution with genetic modifications (Saiz-Rubio
    and Rovira-Más, 2020). Since the late 1990s, the digital transformation of the
    agriculture in Agriculture 3.0 also called Precision Agriculture has begun with
    the integration of Geographical Information System (GIS), Global Positioning Systems
    (GPS), and the usage of sensors have invaded agriculture. They allowed the emergency
    of image processing, techniques using deep learning, and machine learning in the
    field of computer vision. This latter is implemented to discriminate weed, identify
    crops, detect diseases,…etc. The production of a large amount of data by agriculture
    3.0 has required the development of big data technologies to process them, reflecting
    important changes in various fields of research. Collected data must be recorded
    in a specific format in order to discover patterns, curate errors, eliminate duplicated
    or inconsistent data, or solve noise problems (Triantafyllou et al., 2019). Smart
    Farming also called Smart Agriculture or Agriculture 4.0 is a domain of IoT in
    full growth which bring innovative paths to improve the adaptability, the efficiency,
    and the resilience of the agriculture of production systems (Iaksch et al., 2021)
    boost competitiveness and profit (Triantafyllou et al., 2019), allocate resources
    reasonably, and avoid food waste (Zhai et al., 2020, Wolfert et al., 2017) thanks
    to the contribution of autonomous context awareness provided by sensors and the
    capability to execute autonomous or remote actions (Wolfert et al., 2017). Smart
    Farming displaces the strict application from the farm location to affect related
    fields such as decision making by farmers, biodiversity, supply chains management,
    food availability and quality, insurance, and research in environment and earth
    sciences,… Smart Farming is distinct from other domains of the Internet of Things
    (IoT) by the observation and action of biological objects (animals or plants).
    It differs from medical IoT by the fact that there are no issues related to privacy;
    but, the confidentiality of data is related to production processes. Like most
    areas of the IoT, Wireless Sensing and Actuating Network (WSAN) use Low-power
    and Lossy Network organized in hierarchical routing to collect data and actuate
    devices. Multi-path routing protocols can also be implemented to balance the data
    transfer load and conserve the energy of limited battery life, basic computational
    skills, unique communication identifier, and resources-constrained nodes. Due
    to the limited battery life, it is difficult and sometimes impossible to recharge
    or replace (Debauche et al., 2021). Moreover, energy-saving and ambient energy
    techniques must be applied to deal with the active and inactive operational time
    and schedule information transmission (Triantafyllou et al., 2019). To which objects
    can be added like connected agricultural vehicles, milking robots, Unmanned Aerial
    Vehicle (UAV) commonly known as drones, Unmanned Ground Vehicle (UGV) also called
    robots, mobile devices such as tablets used to encode punctual observations (Debauche
    et al., 2021), and external sources such as public geo-services (Triantafyllou
    et al., 2019). The use of IoT in agriculture 4.0 ranges from family farming as
    for example in India on a very small scale with a few low-cost sensors and actuators
    to very large scales with thousands of expensive commercial sensors and many connected
    agricultural pieces of machineries as in the American mid-west. Smart Farming
    is characterized as aforementioned by a wide variety of objects that can produce
    the highly contrasted amounts of data from few bytes/s to Gb/s. In addition, the
    availability of network protocols in rural areas to transmit this data impact
    also the type of architecture to implement. Applications need treatments in real-time
    and/or at a different time. The ”real-time” requirements are also very variable
    depending on the use case. For instance, remote control of drones requires reaction
    times of at most a few milliseconds while the Variable Rate Fertilizer (VRF) or
    Variable Spraying (VS) application aim to optimize nutrients and herbicides application
    respectively need reaction time in a range of few milliseconds to few seconds.
    The real-time processing for monitoring a herd of cattle is of the order of a
    few minutes to a few hours. The data retention time is very variable and is highly
    dependent on each use case. For example, UAVs produce tremendous quantities of
    images to transfer to the cloud in real-time where they must be quickly processed
    and stored. They can also be post-processed to extract additional data in batch
    processing. While UGVs images lose their value after processing and eventually
    actuating. However, if data is of a special, new or exceptional nature, it can
    be stored with a view, for example, to improving artificial intelligence algorithms.
    Other sensors transmit data only when anomalies are detected while others transmit
    at regular intervals a tiny amount of data. However, the adoption of Smart Farming
    is hampered by the lack of models to guide stakeholders on how to implement and
    to deploy dense and heterogeneous IoT-based monitoring systems and manage their
    interoperability (Triantafyllou et al., 2019). Commercial sensors are very expensive
    making it impossible for small farms to implement them (Garcia et al., 2020).
    In addition, two trends are currently opposed. That coming from the manufacturers
    of agricultural machinery who have developed their ecosystems and who want to
    extend the services offered to farmers by attracting them into the captive ecosystems
    in which they are locked. Furthermore, another trend is the development of open
    ecosystems in which farmers can preserve the ownership of their data and keep
    control of the processing carried out on this data and of their use. On one hand,
    farmers are therefore faced with a dilemma where they are in any case forced to
    use agricultural equipment that collects their data against their will; on the
    other hand, they want to keep control of their data collected through IoT sensors.
    Currently, it is difficult to predict which of these two trends will take precedence
    over the other or whether one of the two will coexist (Wolfert et al., 2017).
    In this context, both private and public researchers can either use generic commercial
    platforms offered by cloud players on which they have limited possibilities of
    adaptation or develop their own architecture on the basis of commercial or free
    bricks, but with much greater possibilities of adaptation. In this case, the choice
    is also delicate, and a bad evaluation of the constraints can jeopardize the research
    project. Due to the recent advances in big data, we present a survey that provides
    an overview of the state of the art regarding Smart Farming. It aims at summarizing
    parameters that condition the choice of architecture to collect, process, and
    store agricultural data. Since there is a wide variety of use cases, it is important
    to make an informed choice when it comes to architecture. In this way, we address
    the current gap in the literature with a review of cloud architecture used in
    Agriculture 4.0 to collect, process, and store data to enlighten the reader about
    the possible choices and the new trends that emerge. The rest of this paper is
    structured as follows: The second section is composed of two parts. In the first
    part, we summarize related previous review in the domain and their contributions,
    in order to contextualize our contribution to the literature. In the second part,
    we identify architectures implemented in Agriculture 4.0 use cases. In the third
    section, we describe the methodology used to identify papers, the conceptual framework
    used to analyze the literature, and the criteria used to compare the selected
    architectures. In the fourth section, we present architectures used to collect,
    process, and store data. We describe successively the cloud-centric architectures,
    the extension of cloud paradigm, the distributed architecture. In the fifth section,
    new trends and futures directions are presented. In the sixth section, we discuss
    the future evolution of Agriculture 4.0 to Agriculture 5.0. Finally, the last
    section concludes this paper with recommendations and perspectives. 2. Related
    works We begin our review by identifying the previous review realized in the field
    of Internet of Things applied to Smart Agriculture to take stock of the state
    of art and highlighting aspects that have not been explored at the present time.
    In this section, we focus to achieve two objectives. The first aims to position
    our work in relation to the existing literature. The second aims to identify architectures
    commonly used in the case of applications in Agriculture 4.0. 2.1. Previous reviews
    Reviewed papers presented in Table 1 were selected in the timeframe from January
    2017 to July 2021. The major contribution of each paper was extracted and highlighted
    to show our contribution to the literature. Table 1. Summary of previous review
    achieved on big data management in a context of Smart Farming. Major Contribution
    Reference Survey of agro-industrial and environmental solutions for monitoring,
    control, logistics, and prediction. (Talavera et al., 2017) Diagnosis and analysis
    of existing IoT deployments in regards to communication protocols. (Ray, 2017)
    Survey of IoT technologies in agriculture and highlighted the challenges going
    forward. (Tzounis et al., 2017) Identification of IoT challenges, its application
    in smart agriculture, and presentation of trends and technological innovation
    (Elijah et al., 2018) Review of IoT applications in Precision Agriculture, evaluation
    of previous contributions by researchers, and pathways to future innovation (Khanna
    and Kaur, 2019) Review of IoT deployment in protected agriculture, identification
    of its challenges, and prospection of the new research domain. (Shi et al., 2019)
    Review of existing IoT-based precision agriculture solutions for further achievement.
    (Ruan et al., 2019) Review, comparison, prospection, and challenges of wireless
    communication technologies applications in the field of Precision Agriculture.
    (Feng et al., 2019) Review, case study, and challenges of WSN in environmental
    behavior. (Shafi et al., 2019) Review, identification, challenges of current and
    future trends of IoT agriculture. (Ayaz et al., 2019) Survey of IoTbased agriculture,
    presentation of connection between IoT, big data, and cloud computing, regulation
    and policies of IoT, and its application in the field of agriculture. (Farooq
    et al., 2019) Survey of the use of UAVs, an overview of PA, and investigation
    of 20 UAV applications. (Radoglou-Grammatikis et al., 2020) Challenges of IoT-based
    agriculture architecture, a summary of existing surveys of smart agriculture.
    and classification of threats models, study, analysis of challenges and future
    works of security and privacy of green IoT-based agriculture. (Ferrag et al.,
    2020) Discuss the role of IoT and big data analysis in agriculture with an emphasis
    on the commercial status of applications and translational research outcomes.
    (Misra et al., 2020) resent different solutions to address IoT in arable farming
    challenges. (Villa-Henriksen et al., 2020) Systematic review presenting how IoT
    is used with smart farming (Navarro et al., 2020) Methodological review and analysis
    of IoT components and their applications in smart farming. (Debauche et al., 2021)
    Review of emerging technologies towards agriculture 4.0 and new pathways to agricultural
    practitioners. (Liu et al., 2020) Review, classification, presentation, comparison,
    and challenges of emerging technologies for IoT-based agriculture. (Friha et al.,
    2021) In the following paragraphs, we will draw a panoramic summary of the existing
    reviews during the past four years (2017–2021). In 2017, Ray (Ray, 2017) reviewed
    throughout his paper IoT applications and the challenges that have been faced
    while IoT deployment to improve farming. Talavera. et al. (Talavera et al., 2017)
    reviewed agro-industrial and environmental applications that are using the Internet
    of Things (IoT) for monitoring, control, logistics, and prediction. Tzounis et
    al. conducted a survey of IoT technologies in agriculture and the challenges that
    farmers face going forward (Tzounis et al., 2017). Elijah et al. identified the
    most encountered challenges in the field of IoT applications in smart agriculture
    and presented common trends for innovative ideas (Elijah et al., 2018). In 2019,
    Ayaz et al. provided a state-of-art about IoT-based architectures applied in agriculture
    and identified present and future trends in the same field of study (Ayaz et al.,
    2019). Farooq et al. presented the ingredients of IoT-based smart farming with
    used technologies that apply the utilization of network architecture and protocols;
    in addition to that, they provided an overview of the regulations and policies
    of the use of IoT in farming regarding security and privacy. They concluded their
    study by summarizing the main challenges encountered in this discipline (Farooq
    et al., 2019). Feng et al. provided an overview of the wireless communication
    technologies in the precision agriculture domain. They benchmarked the prospection
    and challenges of existing technologies with the regular communication time used
    (Feng et al., 2019). Shafi et al. conducted a literature review about IoT-based
    automation of agriculture along with Wireless Sensor Network (WSN). These authors
    presented a case study based upon two models: 1- a WSN to monitor real-time crop
    of health conditions, 2- system-base remote sensing imagery to classification
    between healthy and unhealthy yield (Shafi et al., 2019). In terms of agriculture
    protection, Shi et al. drew a panoramic review during the last decade to address
    the challenge and future works to further the research in the field of protected
    agriculture (Shi et al., 2019). Khanna et Kaur called into an evolutionary scenario
    to highlight the most significant impact of IoT in Precision Agriculture (PA).
    They evaluated the contribution of their predecessors and enhanced the challenges
    to open up a new direction of inspiration and innovation in IoT applied to PA
    (Khanna and Kaur, 2019). Ruan et al. reviewed literature works from 2009 to 2018
    to suggest new ideas for folks interested to conduct research in the field of
    agriculture IoT, infrastructures, data security, and data sharing (Ruan et al.,
    2019). In 2020, two studies have been carried out about 20 UAV applications that
    are devoted to either aerial crop monitoring processes or spraying tasks (Radoglou-Grammatikis
    et al., 2020) and about the dilemmas that researchers must overcome while deploying
    IoT in the green agriculture domain (Ferrag et al., 2020). Villa-Henriksen et
    al. identified different challenges encountered during the implementation of IoT
    in various applications and proposed different solutions to address them (Villa-Henriksen
    et al., 2020). Misra et al. discuss the role of IoT and big data analysis in Smart
    Farming (Misra et al., 2020). In 2021, a recent study conducted by Friha et al.
    hypothesize the use, application, classification, and comparison of the most developed
    emerging technologies such as Internet of Things (IoT), Unmanned Aerial Vehicles
    (UAV), Wireless Technologies, open-source IoT platforms, Software Defined Networking
    (SDN), Network Function Virtualization (NFV) technologies, cloud/fog computing,
    and middleware platforms (Friha et al., 2021). In the same year, Debauche et al.
    conducted a literature review to describe the main components of IoT and its applications
    in the field of Smart Farming (Debauche et al., 2021). 2.2. Platforms implemented
    in use cases We grouped applications into 4 categories: (1) Water Management in
    which we have aggregate all types of water use such as irrigation and watering
    animals. (2) Plant Disease and Pest groups all use cases in plant’s pathologies
    detection and treatment of plant pathologies (spraying of fungicides, pesticides,
    etc). (3) Crop Management brings together all the use cases relating to cropping
    operations: soil management (plowing, fertilizer application), sowing, weeding,
    and harvesting. (4) Livestock includes everything related to the breeding of farm
    animals (nutrition, behavior, diseases, treatments). Table 2 summarizes platform
    used to implement use cases in Smart Farming classified following our four categories.
    Table 2. Summary of cloud platforms, databases mentioned in Smart Farming reviews.
    Empty Cell Water Management Plant Diseases & Pest Crop Management Livestock Reference
    IoT platform Thingspeak x (Maureira et al., 2011) FIWARE x (Rodriguez et al.,
    2018) NETPIE x x (NECTEC, 2020) Ubidots x (Ubidots, 2021) SmartFarmNET x x (Jayaraman
    et al., 2016) Thinger.io x x (Luis Bustamante et al., 2019) Kaa IoT Platform x
    x (KaaIoT, 2021) IBM Watson IoT Platform x x x x (IBM, 2015) Microsoft Azure IoT
    Platform x x x (Microsoft, 2021b) AT&T M2X Cloud x (AT&T, 2021) Blynk x (Blynk,
    2021) MACQU x (Sigrimis et al., 2002) ERMES x (Granell et al., 2017) Agrocloud
    x x x (Kodati and Jeeva, 2019) CropInfra x (Pesonen et al., 2014) SensorCloud
    x (Corp, 2020) LoRaFarM x x x (Codeluppi et al., 2020)  Cloud platform Amazon
    Web Service x x x x (Amazon, 2021b) IBM Cloud x x x x (IBM, 2021) Microsoft Azure
    x x x x (Microsoft, 2021a) Integra x x (Souces and I., 2021)  Cloud Database DynamoDB
    x x x (Amazon, 2021) MongoDB Atlas x x x (Mongo, 2021) Firebase x x x (Google,
    2021) InfluxDB Cloud x x x (Influxdata, 2021)  Local Database MySQL x (Oracle,
    2021) SQLite x (SQLite, 2021) PostgreSQL/PostGIS x x (The PostgreSQL Global Development
    Group, 2021) Apache Cassandara x (Apache Software Foundation, 2021a) Apache Druid
    x x (Apache Software Foundation, 2021b) Garcia et al. give an overview on trends
    in Smart Irrigation in which they showed that data is stored in the database or
    in the cloud. On 151 reviewed papers, one uses Raspberry Pi, 18 databases, 53
    clouds, and 79 are self-developed or not mentioned (Garcia et al., 2020). Navarro
    et al. identified 21 Platforms used in 50 various use cases classified into 5
    categories: Artificial Intelligence, Big Data, Machine Learning, Computer Vision,
    and Other/Not Identified (Navarro et al., 2020). Jayaraman et al. present SmartFarmNet,
    an IoT platform offering effortless integration of sensors, supporting scalable
    data analytics, and proposing do-it-yourself tools to analyze and visualize data
    (Jayaraman et al., 2016). Codeluppi et al. describe LoRaFarM a general architecture
    modulated depending on the farm’s characteristics and requirements (Codeluppi
    et al., 2020). The monitoring of crops particularly more sensitive to them as
    saffron is crucial. The DIAS Architecture (Triantafyllou et al., 2019) uses different
    ground and leaf sensors to monitor the real-time 24/24 h cultivation process of
    saffron. This data is transmitted by LoRaWAN with IPv6 protocol and MQTT-SN protocol
    to FIWARE’s context broker. The broker manages all networking devices by means
    of sixteen types of messages exchanged following publish-subscribe model. The
    FIWARE NGSI API of oversees the consumption, subscription, and processing of all
    the information collected and its publication. Afterward, the data is stored and
    analyzed with a random forest algorithm which allows extracting information about
    the crop growth and health. Vegetation indexes: Normalized Difference Index (NDI),
    Excess Greenness Index (ExG) are calculated with PiX4D3 image processing tools.
    Object-based image analysis (OBIA) is used to recognize weeds or discriminate
    species. Finally, collected data are categorized and evaluated accordingly with
    vegetation index values, moisture level, and plant developing state by means of
    the Apache Spark framework for the Big Data analysis and Waikato Environment (WEKA)
    a framework specialized in data mining to produce reports and predictions. Decision-making
    is a very important task in the farmers’ activities but with the amount of data
    always increasing, they encounter difficulties on one hand to make proper decision
    about agricultural management and on the other hand translate this data into practical
    knowledge (Zhai et al., 2020). On the other hand, there is a need for platforms
    of the Agricultural Decision Support System (ADSS) to assist farmers to make precise
    decisions evidence-based. For example, Watson Decision Platform for Agriculture
    combines IBM Watson with IoT and Cloud Computing to detect crop disease from UAV
    images. It is also possible to optimize time for crop operations to obtain a better
    price on trading market. The second example is Digital Farming System4 takes advantage
    of computer vision, cloud computing, and AI to propose a better timing for corp
    operations, notify when a crop is infected by any disease. Smart Irrigation Decision
    Support System (SIDSS) is composed on one hand of a set of sensors and a weather
    station and on the other hand a DSS based on two machine learning algorithms.
    Partial Least Squares Regression (PLSR) to deduct unnecessary variables and Adaptive
    Neuro -Fuzzy Inference Systems (ANFIS) used to minimize estimated errors under
    a target threshold (Navarro-Hellin et al., 2016). SIDSS generates planning of
    water amount and time for irrigation. Multi-robot sense-act system (Conesa-Munoz
    et al., 2016) is a planner of aerial and ground vehicles which assign tasks to
    the most appropriate work units. A Harmony Search Algorithm is used to optimize
    plans for UAVs while meta heuristic is running for ground vehicles. 2.3. Analysis
    of previous literature The analysis of existing reviews about smart farming shows
    that applications use whether open source or commercial cloud architecture whether
    developing specific architecture responding to their aims or do not describe their
    storage and processing system. The latter represents more than half of the papers
    and means that some of the processing architectures remain unknown because they
    have never been specifically described and studied. Moreover, the fact that further
    development is being made in architecture may be the fact that commercial platforms
    do not fully address the needs of Agriculture 4.0. This brings us to our research
    questions and their respective motivation: 1. Which storage and processing architectures
    are best suited to Agriculture 4.0 applications and address its particularities?
    Motivation: On one hand generic architectures dedicated or not to IoT are able
    to address a large number of use cases but not specifically the needs of Agriculture
    4.0 exist. On the other hand, researchers develop architectures to address specific
    issues or requirements of use cases. The selection of an adapted architecture
    is crucial for the correct implementation of identified use cases. 2. Can generic
    architectures meet the needs of Agriculture 4.0 application cases? Motivation:
    Agriculture 4.0 has specific requirements described in the introduction section
    which cannot all be addressed by a single classical generic architecture. A comparison
    between the pros and the cons of major generic architecture in the context of
    agriculture 4.0 is important to highlight the choice during the conceptualization
    step. 3. What are the horizontal valuation possibilities that allow the transition
    from research to industrialization? Motivation: The use of architectural solutions
    which can be for example free of fees during the research phase but needs a reimplementation
    caused by license limitations, the cost of the license in the use cases budget,
    etc. The use of products in closed or semi-closed ecosystems is a barrier to the
    research valuation. 4. What are the vertical valuation possibilities to move from
    algorithms trained in the cloud to embedded or autonomous products? Motivation:
    The massive collection of data in the cloud allows to development of complex algorithms
    that need a large amount of computing resources to be elaborated. Afterward, they
    can be compressed, reduced, optimized in order to be deployed in embedded devices
    or divided and establish a collaboration between devices and computing resources
    such as cloud, fog, etc. In order to answer these questions, a review of the literature
    will make it possible to synthesize the different approaches currently used, to
    identify new trends and to consider new lines of research to be explored. 3. Methodology
    In order to address, our first and second research questions, we achieve a systematic
    review to identify generic architectures and combination of architectural elements
    used by researchers to implement concrete use cases. Moreover, we attempt also
    identify commercial products and existing services/ platforms used to implement
    projects in agriculture. 3.1. Systematic review methodology The research questions
    outlined at the end of the related work section has been addressed by combining
    keywords of the first group that refers to architectures (i.e. cloud architecture,
    distributed architecture, big data, Internet of Things, IoT) and of the second
    group contained keywords related to agriculture (i.e. agriculture, smart farming,
    food, agri-food, precision agriculture). Our methodology is based on 3 consecutive
    steps: literature identification, reading literature, and information extraction.
    During the first step, we have read and have collected individual papers based
    on the achieved of previous papers. We have reviewed and completed by a systematic
    survey of white literature (full articles and conference papers) from January
    2016 to December 2020. In addition, we targeted solely and exclusively papers
    written in English and focusing on architecture design have been considered. Our
    bibliographic review was limited to the last 5 years because the rapid development
    of IoT. The systematic review was retrieved from the following major bibliographic
    databases: Scopus (Elsevier), IEEE Xplore Digital Library, Wiley Online Library,
    ACM Digital Library, and Springer. These bibliographic databases have been chosen
    widely covering relevant bibliography and relevant advanced bibliometric features
    especially number of citation and relevant literature suggestion. From these databases
    1058 peer-reviewed articles were retrieved. After their screening 55 papers were
    classified relevant while remaining articles were considerate not relevant and
    therefore excluded from further reading and analysis. The high number of excluded
    papers is due to numerous papers describe i.e. conceptual or theoretic architectures
    which were never implemented, experimental architectures that have been the subject
    of a single article or that have never been proven by other research teams. We
    discard also papers that were not a directly related Big data and the agricultural
    sector. Table 3. Table 3. Keywords used for achieved the systematic review. Area
    Keywords Related concepts Agriculture Agriculture, Agricultural e-Agriculture
    Agri-Food Agribusiness Smart Farming Farming Precision Agriculture, Precision
    Farming  Internet of things IoT, Internet of Things, internet-of-things Big data
    Big Data Big Data Data Management Data Management Architecture Cloud Architecture,
    Distributed Architecture In a second step, we included English grey literature
    (reports, blogs, magazines, and web-items) into our review using Web of Science
    and Google Scholar. Table 4. We discarded papers that were written in other languages
    than English, Master and doctoral dissertation, and duplicated articles gathered
    from Google Scholar. Afterward, we have selected literature that has carefully
    been read in detail to extract relevant information of research questions. The
    extracted information was analyzed and summarized in a conceptual framework illustrated
    in the Fig. 1. Table 4. Sources of collected literature. Data source URL IEEE
    Xplore Digital Library https://ieeexplore.ieee.org Scopus https://www.scopus.com
    Springer https://link.springer.com/search Wiley Online Library https://onlinelibrary.wiley.com
    Google Scholar https://scholar.google.com Web of Science https://publons.com/publon
    ACM Digital Library https://dl.acm.org Download : Download high-res image (171KB)
    Download : Download full-size image Fig. 1. Conceptual framework of data processing.
    Three ways of treatment of data are possible. The first process data in real-time
    (left branch identified by (1) on Fig. 1), this one is generally not stored except
    eventually particular or exceptional data in order to enrich the training database
    of artificial intelligence algorithms. This way of data treatment is used for
    example by robots that inspect a crop, discover a pest, and then eliminate it.
    After intervention the value data is near null. The second way is a mixed way
    in which data must be processed as quickly as possible. This one addresses use
    cases where latency required must be comprised between few milliseconds to few
    seconds with data, which conserves a value during a certain period of time. This
    latter justifies its storage according to the use case data management plan that
    predicts the time after which the data will be aggregated and then deleted. This
    way in identified by (2) on Fig. 1. It addresses use cases where all data must
    be processed and then stored for eventual post-processing for example to estimate
    trends of parameters such as the milk quality, volume of palatable species available
    in a pasture. The third way is stored data theirs native format without transformation
    (Identified by (3) on Fig. 1). This way is implemented on use cases that do not
    require real time processing or use cases where the amount data is so important,
    which makes treatment impossible. In this latter case, data are consumed by micro
    services that sample data to exact knowledge. This way is also employed for data
    which have a low value or lose their value so quickly that there is no point in
    transforming them for long-term storage. For instance, a UGV identifies and eliminates
    a pest. The image of the insect is no longer relevant after its elimination. 3.2.
    Architecture comparison criteria In order to compare selected architectures, we
    chose to select 8 criteria:(1) User Proximity expresses the necessity to be close
    to the user. This criterion is important for applications where privacy and response
    time to query are critical. Attribute a value of one * when privacy is not crucial;
    ** when the proximity with user is desirable but not crucial for the development
    of the use case; *** when the user proximity is the corner stone of the application.
    (2) Latency & Jitter criterion describes the importance for the architecture to
    have a minimal latency and jitter. This criterion is particularly important for
    use cases where response time to query in quasi (real time) is required and/or
    time between data production and ingestion by the processing and storage architecture
    is essential. (3) Network stability criterion translate the necessity to have
    a stable network or if is interruption can be tolerated. Use a value of * if the
    use case implemented can tolerate the absence of network during few hours; **
    if few minutes of interruption are tolerable; *** is stability of the network
    is an essential element of the use case. (4) The high throughput criterion expresses
    the capability of the architecture to process quickly a wide amount of data arriving
    at high frequency; Use a value of * if the data arrive mostly at regular intervals;
    a value of ** if the data arrive in bursts, and *** if the data arrive continuously
    at high frequency ( 10 Hz). (5) Reliability is a criterion that expresses if the
    infrastructure is critical in other terms whether an interruption in infrastructure
    could cause loss of life or not. Attribute a weight of * if the data is not critical
    and potential damages caused by an interruption of the architecture are minors
    or null; ** if potential damageable but tolerable if they occur more than once
    a year; *** if the application cannot tolerate any interruption which would cause
    irreversible damage or loss of human life. (6) Scalability is a criterion that
    expresses the regularity of the evolution in terms of processing and storage during
    a period of one year. If the scalability must be achieved at most once a year
    use a weight of *; if the scalability is achieved at most twice a year use **;
    if the scalability must be achieved more than two times by year use a weight of
    ***. (7) Cost-Effectiveness criterion reflects the need to control infrastructure
    costs. This criterion is more important as the infrastructure is brought to evolve
    both in terms of scale and complexity. Use the weight of * if the project will
    remain in a relatively constant size and do not need to be scaled or dramatically
    modified; Use **, if the project evolves reasonably, i.e. should not undergo significant
    modification more than once a year. Use a weight of *** if the size of the project
    and/ or its complexity need a fine study of cost. (8) Maintainability criterion
    is directly linked to the sustainability of the project. If the sustainability
    of the project will not exceed two years to allocate a point of *; if the life
    of the project is between 2 and 5 years, assign a score of ** beyond 5 years,
    assign ***. 4. Architectures The numerous publications dealing with cloud architectures
    relating to Agriculture 4.0, summarized in Table 2, show that a great deal of
    effort has been devoted to solving a whole range of problems related to many use
    cases. Indeed, a universal and a unique architecture do not exist for IoT applications
    in Smart Agriculture which ensure all needs of all use cases. This is the reason
    why several researchers have proposed various architectures which address specific
    issues of generic architectures. The Fig. 2 gives a global overview on Agriculture
    4.0 organization. Download : Download high-res image (340KB) Download : Download
    full-size image Fig. 2. Global structure of IoT in Agriculture 4.0. 4.1. Central
    Cloud Architectures Central Cloud Architectures are based on two basic architectures
    that are associated or combined in order to form modern architectures. These two
    architectures are: Batch Architecture aims to process an entire dataset in an
    offline mode. For this type of architectures, as long as the processing of the
    dataset is not finished, it continues and produces results only when it has reached
    its end. Generally, the data is selected and distributed to different nodes in
    order to be processed more quickly. When all the treatments are achieved on all
    nodes, the results are sorted and aggregated to obtain a global output. This architecture
    is easily implemented, and the aggregation is done by a framework, but processing
    times can be long, and data extracted during the treatment cannot be processed
    before the end of the treatment in progress. Furthermore, it is possible to increment
    results of previous batch and produce a result that integrates treated data in
    progress. Sallah et al. used a batch architecture to update data within the AquaCrop
    model (FAO) embedded in R-environment in order to facilitate model calibration
    and validation, run and evaluate all fields in a single run (Sallah et al., 2019).
    Nolack Fote et al. presented an architecture to extract knowledge on the long
    term from data in Precision Livestock Farming (PLF) (Fote et al., 2020). Table
    5. Table 5. Pros and Cons of Batch Architecture. Pros Cons - Easy to implement
    and maintain. - Process only data previously stored in another form (file, database,
    etc). - Able to achieve long term treatments (several hours or days). - Processing
    cannot be modified before the end of the treatment. - Reprocessing of old data
    that are easy to achieve. - Results available only at the end of the treatment.
    Real-time Architecture also named Streaming Architecture processes data as it
    arrives, and results are progressively available by opposition to the batch architecture
    where it is not necessary to wait for the end of ingestion of all input data to
    obtain a result. The notion of real-time is strongly dependent on the analysis
    context with a processing time from a few milliseconds to a few minutes. Real-time
    architecture can be implemented in two different ways. On one hand with micro-batch
    in which a tiny amount of data is processed each n seconds and a result is obtained
    at the end of the treatment or on the other hand with a streaming approach in
    which each new data is immediately processed and output is quickly produced. This
    architecture is limited to data flow processing (Miloslavskaya and Tolstoy, 2016).
    Table 6. Table 6. Pros and Cons of Real-time Architecture. Pros Cons - Allow a
    rapid treatment of newly arrived data. - Not able to achieve processing on large
    size of the batch. - Batch processing can be emulated using micro batches but
    not all algorithms can be implemented. - Reprocessing of old data difficult to
    implement. - Easy to implement and maintain. - The need for real-time processing
    involves the use of an estimator rather than the precise values that would take
    too long to be calculated. Various data are produced by different fields or animals
    sensors, vehicles, and robots of the Agriculture 4.0. Afterward, this data must
    be on one hand stored in a raw state and processed in an offline way where long
    and complex treatments can be achieved. On the other hand, data can be processed
    before its storing with offline processing, streaming processing, or a combination
    of these ones. The storage time is extremely variable following the nature of
    the data and their loss of value over time. Offline processing is classically
    used to process images from UAVs, UGVs, or satellites, for example, to determine
    photosynthesis activity, evaluate the canopy development or stocks of palatable
    species available in a pasture, etc. While Streaming processing allows detecting
    anomalies in animals’ behaviors in real-time, or during agricultural operations
    such as the harvesting, disease and pest detection, weeds elimination. In these
    last cases, data is not stored because it quickly loses all value after its ingestion.
    Finally, a combination of the two previous ways i.e. Offline and Streaming processing
    is used to estimate real-time metrics and achieve complex treatments in an offline
    way at the same time. This approach is used by milking robots which detect anomalies
    in the production in real-time while the offline processing estimates the future
    production of each cow based on previous milking (Debauche et al., 2021). Lambda
    architectures are used in systems that need to process and expose quickly massive
    amounts of streaming data. This cloud architecture was proposed by Nathan Marz
    and James Warren (Marz and Warren, 2013) to handle tremendous quantities of data
    and resolve complex problems combining processing large volumes of data (Batch)
    while incorporating the most recent data processed in real-time processes (Singh
    et al., 2019). This architecture is generic, scalable, and fault-tolerant against
    hardware failures and human mistakes. The architecture is composed of three layers:
    (1) batch layer process very large quantities of data by batch; (2) speed layer
    which processes data in real-time and provides views based on the most recent
    data and (3) serving layer responding to queries. Data comes from either a data
    source or a message queue. This paradigm allows executing arbitrary queries over
    any real-time data and is particularly adapted for critical infrastructure and
    health systems (Diaz et al., 2016). Several implementations of Lambda Architecture
    in smart Environment management, big data storage and analytics can be found in
    (Villari et al., 2014). Among the criticisms that have been made against lambda
    architecture is the need to make twice the developments for the real-time branch
    and the batch branch. It is possible to perform a batch processing and in real
    time with flow processing is what the Kappa architecture described below does
    (Kreps, 2014). Fig. 3 Table 7. Download : Download high-res image (116KB) Download
    : Download full-size image Fig. 3. Lambda Architecture General Scheme. Table 7.
    Pros and Cons of Lambda Architecture. Pros Cons - Process data in real-time or
    in batch processing in separate ways. The reliability of two ways of treatment
    is most costly than other architectures if the two execute the same treatment.
    Among use cases in agriculture 4.0 using a lambda, we would like to highlight:
    Roukh et al. proposed WALLeSMART, a cloud platform based on lambda and specifically
    developed for Smart Farming. This platform implements Apache Kafka to store temporary
    data before their treatment. Apache Hadoop and the programming model Mapreduce
    is used for the batch processing while Apache Storm process data in realtime.
    The originality of this architecture is the coupling of a NoSQL database Apache
    Casandra and a SQL database, PostgreSQL where data is stored in the function of
    its nature. The GraphQL query language allows to querying databases. (Roukh et
    al., 2020, Roukh et al., 2020). Debauche et al. describe a lambda architecture
    for digital phenotyping (Debauche et al., 2020) and farm animals’ behaviors coupled
    with an Application Hosting Architecture based on Apache Mesos and Docker containerization
    to facilitate the deployment of various applications. An API interconnects and
    controls accesses between the Lambda Architecture and the Hosting Application
    Architecture. The Lambda architecture is based on Apache Beam to easily change
    the runner in the function of the technology evolution and improve its sustainability.
    Apache Druid is used to store time series data (Debauche et al., 2019) and metadata
    of data stored in the Datalake based on Apache Hadoop (Debauche et al., 2018).
    A variant of this architecture, named Unified Lambda architecture combines batch
    and stream pipelines which runs concurrently, and then the results are merged
    automatically (Siciliani, 2015). AllJoyn Lambda integrates AllJoyn a framework
    that offers: (1) proximal devices and applications discovering; (2) specific devices
    framework adapting; (3) transmission between devices with Bluetooth, Wi-Fi, etc.;
    (4) interoperability between operating systems; (5) efficient and secure data
    exchange through D-BUS (Villari et al., 2014). The Kappa architecture, proposed
    by Jay Kreps from LinkedIn (Kreps, 2014), simplifies the Lambda architecture by
    combining real-time and batch layers. This cloud architecture differs from the
    Lambda architecture by using a non-permanent storage system of data in an unchangeable
    log file such as system as Apache Spark or Apache Kafka, and consequently allow
    only storage for a limited time in order to allow an eventual reprocessing of
    these data. Batch and Speed Layers are also replaced by a stream processing engine.
    So, the Kappa Architecture is composed of two layers: streaming and serving layers
    and can be implemented with a publish-subscribe messaging like Apache Kafka, which
    facilitates data ingestion. Fig. 4. Download : Download high-res image (121KB)
    Download : Download full-size image Fig. 4. Kappa Architecture General Scheme.
    The main advantage of this architecture is its simplicity. It avoids having to
    maintain two separate code bases for the batch and speed layers. When processing
    on real-time and historical data are the same, a Kappa Architecture must be used.
    Fast Data Architecture is a variant of Kappa Architecture in which the data are
    no longer read from files but from an additional mechanism like Kafka that captures
    multiple streams combines them before being processed by the speed layer (Lakhe,
    2016). Persico et al. achieved a benchmark of Lambda and Kappa architectures and
    show that Lambda outperforms Kappa for social networks data (YFCC100M) processing
    (Persico et al., 2018). Table 8. Table 8. Pros and Cons of Kappa Architecture.
    Pros Cons - Very efficient for real-time processing thanks to in-memory processing.
    - Batch processing emulates thanks to micro-batch treated via the real-time way.
    - Optimized cost because allows real-time and batch processing. - Not able to
    process large batch size. - Must be finely tuned from data to obtain the best
    performances (Nkamla Penka et al., 2021). Other Architectures derived or inspired
    of the previous architectures have been developed to address specific problems
    such as (1) SMACK (Estrada and Ruiz, 2016) which attempts to propose an optimal
    architecture with fixed components; (2) Liquid (Fernandez et al., 2015) is an
    architecture which provide low latency, incremental processing, high available
    with isolated resource, and able to store high throughput data at low operational
    cost architecture; (3) Butterfly (Lakhe, 2016) proposes to unify batch, speed
    and serving layers in a unique platform in which data are organized as a collection
    of three types of abstractions; (4) Zeta (Scott, 2015) which integrates a lambda
    architecture with business aspect of the enterprise; (5) BRAID (Giebler et al.,
    2018) is a hybrid processing architecture where all coming data and configuration
    file of processing, and eventually processing results written back are stored
    in a shared storage; (6) IoT-a (Hausenblas, 2014) is composed of three blocks:
    Ad-hoc queries, a Database, and a Distributed File System; (7) Polystore (Meehan
    et al., 2016) implements a multiple database system PostgreSQL, SciDB and Accumulo
    because a database alone cannot store all types of data efficiently. Table 9.
    Table 9. Qualitative evaluation of cloud-centric architecture. Criterion Batch
    Stream Lambda Kappa User Proximity * * * * Latency & Jitter * * * * Network Stability
    * * * * High throughput *** *** *** *** Reliability *** *** *** *** Scalability
    *** *** *** *** Cost Effectiveness *** *** * ** Maintainability *** ** * ** The
    analysis of the literature achieved shows that two major generic architectures:
    Kappa and Lambda allows to address of various use cases and are widely implemented
    and proven in other domains of the Internet of Things. The Lambda is more expensive
    to implement than the Kappa because of the need to maintain two separate parallel
    processing branches for stream processing and batch processing. It is interesting
    if different processing are carried out on the two processing branches. Otherwise,
    a Kappa architecture with a single processing branch that processes both the streams
    and the data in batches is more appropriate in most cases because it is cheaper
    and easier to maintain because a single code performs both types of processing
    (stream and batch). Looking at our first two research questions, we observe that
    Lambda and Kappa cloud architectures are efficient but these architectures alone
    operating in central cloud cannot address, for example, use cases where very low
    latencies are required. They will have to be hybridized and completed to address
    these particular cases. Two possibilities are available to us. The first way consists
    in associating several specialized cloud platforms to make it possible to obtain
    greater genericity or at least to better cover a domain. The second consists of
    supplementing the cloud-centric architectures that we have just mentioned with
    other architectural elements in order to better address the specific needs of
    Agriculture 4.0. 4.2. Extension of the cloud paradigm With the increase of the
    amount of data produced by the myriad of connected things, the amount of data
    to process, to transfer by network, and to treat in the cloud computing have called
    into question the architecture of storage and data processing. To solve the problem,
    two ways have been proposed, the first is Multi-Cloud Computing, the objective
    of which is to ensure redundancy in order to improve latency. The second is the
    Federated Cloud with the aim of pooling resources for better use. Multi-Cloud
    Computing (MCC) (Manyika and Chui, 2015) is an extension of Cloud Computing paradigm
    where services are distributed on multi-clouds. In this architecture the workflow
    is distributed entirely in the cloud, data redundancy is also verified. One advantage
    of the MCC is the high recovery rate but it has the same disadvantages as Cloud
    Computing, along with complexity and portability issues. Kazim et al. proposed
    a framework to deliver IoT services and establish cooperation across multi-clouds.
    An authentication allows communicating cloud to authenticate each other cloud
    dynamically. While a service selects the best IoT service matching with user requirements
    among multiple clouds and taking into account the SLA parameters agreed between
    the user and the provider (Kazim et al., 2018). Federated Cloud (FC) aggregates
    resources of multiple cloud providers to improve users’ freedom and allows users
    to choose where they want to deploy their applications. A Federated cloud can
    be defined as a voluntary collaboration between heterogeneous cloud providers
    collaborating to share their own unused resources. Using a cloud federation helps
    to ensure service performance during load ups with resources borrowed from other
    clouds. In addition, the geographical dispersion of the installations makes it
    possible to migrate to another installation and to guarantee the service in case
    of breakdown. A unified interface allows to use it an easy consultation of the
    offered services. Finally, thanks to the dynamic distribution of the load, it
    is possible to bring the treatment closer to the user and consequently improve
    the Quality of Service (Assis and Bittencourt, 2016). Cloud federations include
    European Federated Cloud (Sipos et al., 2013), Massachusetts Open Cloud, Mosaic
    (Petcu et al., 2013), IEEE P2302, and Open stack Keystone. Drakos et al. described
    agINFA, a common research data infrastructure for agriculture, food and the environment
    using EGI Federated Cloud. This infrastructure allows to partner to share research
    infrastructure components, APIs, a registry of web-based information service and
    dataset for agriculture (Drakos et al., 2015). 4.3. Distributed architectures
    The post-cloud approaches allow to improve latency and jitter for immobile entities
    but do not provide an answer adapted for mobile devices and local awareness. The
    large amount of data generated at the edge has increased the speed of data transportation
    that is becoming the bottleneck for the cloud-based computing paradigms (Shi et
    al., 2016). Moreover, the treatment of data in the cloud does not offer any guarantees
    about privacy, on the response time and real-time actuation because the huge number
    of devices increases the latency and jitter. Moreover, the mobility of devices
    and power constraints makes the communicaion difficult with the cloud all the
    time (Botta et al., 2016, Zhou et al., 2017). The aim has been to bring data storage
    and processes data, filtering, and data analysis closer to data-producing objects
    to limit bandwidth consumption and relieve the cloud. Three major paradigms have
    been proposed to address these issues and bring cloud computing-like capabilities
    to the edge of the network. All these infrastructures manage mechanisms of Virtual
    Machine (VM) or containers migration and adjust if needed, the provisioning of
    capabilities where users are located. Moreover, the three paradigms allow the
    creation of federated infrastructures in which can coexist multiple edge infrastructures
    which can exchange information and services (Roman et al., 2018). 4.4. Elements
    of distributed architectures In order to always bring closer, the processing capacities
    of intermediate processing have been set up between connected objects and the
    cloud at the network level (Fog Computing) and at the level of telephony providers
    (Mobile Edge Computing). Fog Computing is a concept created by Cisco Systems and
    is an extension of the cloud computing paradigm (Munir et al., 2017) in which
    computation, storage and network services are provided between end devices and
    cloud/ classify and analyze the raw IoT data streams at near-edge and edge network
    level (Cisco, 2018). Fog nodes are either physical components such as gateways,
    switches, routers, servers etc. or virtual components such as virtualized switches,
    virtual machines, cloudlets, etc.; deployed following private, community, public
    or hybrid. Private nodes are reserved for a single organization, community nodes
    are used by a community, public nodes are dedicated to the general public, and
    hybrid mix the third previous modalities (Uehara, 2017). This paradigm allows
    to limit data transfer on cloud, reduce latency (Sethi and Sarangi, 2017), and
    jitter thanks to a three-tier architecture (Roman et al., 2018). In this hierarchical
    architecture, the analysis of local information is achieved at the low level and
    the coordination and global analysis are performed at the top level. The Fog Computing
    supports mobile devices (Sethi and Sarangi, 2017), response time in real-time
    or predictable latency (Lopez et al., 2015), bandwidth saving, an improving of
    security and resilience, scalability, multi-tenancy, advanced analytics, and automation
    (Byers, 2017), cost-effective services (Yang, 2017). Fog Computing allows also
    the federation of fog infrastructures in order to allow cooperation between multiple
    organizations (Roman et al., 2018). Furthermore, the architecture is optimized
    for a use case and applications which must run on them (Byers, 2017). Fog Computing
    differentiates from cloud computing mainly by the proximity with end-users at
    the edge of networks localized or distributed geographically consisting in many
    relatively less resourceful (Munir et al., 2017). In addition to network equipment,
    fog computing can also be carried out in cloudlets and micro data centers. Cloudlets
    were proposed to address the end-to-end responsiveness between mobile devices
    and associated clouds. Cloudlets (Mach and Becvar, 2017) are micro data center
    geographically deployed in vicinity of End Users. This mobility-enhanced small-scale
    cloud data center is composed of computers with high computation power which provide
    both computation resources and storage. Cloudlet is much more agile (highly dynamic
    provisioning) than cloud due to user mobility churning. The mobility of users
    implies the use of a virtual machine to rapidly instantiate compute-intensive
    and latency-intensive applications and migrate the offloaded services between
    different cloudlet in the function of the user mobility. Cloudlets must be firstly
    discovered, selected among several candidates before starting provisioning. At
    the end of the session, the instance is destroyed (Ai et al., 2018). Cloudlets
    are accessed by mobile user equipment via Wi-Fi imply a high latency caused by
    the network and switch between mobile network and Wi-Fi and by consequence Quality
    of Service (QoS) and Quality of Experience (QoE) are hard to fulfill (Mach and
    Becvar, 2017, Manyika and Chui, 2015). Moreover, Cloudlets cover usually a small
    region and do not offer any guarantee on ubiquitous computing and scalability
    in service (Manyika and Chui, 2015). MicroData Centers (MDCs) were proposed by
    Microsoft Research. It is designed to extend cloud data centers as cloudlets.
    MDCs are enclosures contemning all types of equipments (computing, storage, network)
    needed to provide a secure computing environment in order to run customs applications
    requiring low latency. MDCs are also well adapted to provide processing resources
    to end devices on battery or with limited computing capabilities. MDCs can be
    adapted in function network bandwidth and user needs thanks to certain flexibility
    in terms of latency and scalability of the capacity (Wang et al., 2020). Guardo
    et al. proposed a framework composed of two fog layers respectively filtering
    and aggregating data, and clustering analysis, actuation management, and alert.
    The framework aims to improve computational load balancing between fog and cloud
    in order to reduce the amount of data to transmit to the cloud, reduce the waiting
    time for the user (Guardo et al., 2018). Taneja et al. proposed a SmartHerd an
    IoT platform dedicated to smart dairy farming based on microservices and Fog-assisted.
    The IoT gateway received data from transceivers, archived data aggregation, preprocessing,
    classification, feature selection, send critical alerts to farmers, and transmit
    data to IBM Watson IoT platform via MQTT protocol. In the IBM Watson IoT platform,
    a broker picks up data and store them in a Cloudant NoSQL JSON Database. Python
    Virtual Machine and Java Virtual Machine were used as containers equivalent for
    microservices deployment at fog level (Taneja et al., 2019). Sharofidinov et al.
    described a 4 layers architecture (Sensors Layers, Fog Layer, Network/Cloud Layer,
    and Application Layer) based on LoRa to monitor and predict the state of a greenhouse
    from a random forest algorithm. In the Sensor Layer, sensors acquire temperature,
    soil and air humidity, CO2 rate, and illumination connected to TTGO LoRa32 (ESP32
    with LoRa Sx1276 chip) which are transmitted to the gateway by LoRa. At Fog Layer,
    preliminary analysis with Machine Learning algorithm, diagnosis of sensor status,
    and data compression are achieved. In the Network/Cloud Layer, compressed data
    are transmitted in order to be deeply analyzed and stored. Finally, in the Application
    Layer, analyzed data are converted in readable form to allows the monitoring and
    the control of the greenhouse (Sharofidinov et al., 2020). Table 10. Table 10.
    Pros and Cons of Fog Computing. Pros Cons - Fast response time in avoiding transmission
    of data to the cloud (Sharofidinov et al., 2020). - Failure or outage of the gateway
    can defeat thousands of devices. - The local storage and processing capabilities
    prevent data loss and outages when the Internet connectivity is limited (Sharofidinov
    et al., 2020). - The limited processing and memory capacities do not allow the
    deployment of algorithms requiring significant resources or the carrying out of
    long-term processing. - Sensitive data can be filtered locally. In this case,
    only the data model is moved in the cloud (Sharofidinov et al., 2020), and data
    validation, compression, and encryption. - Gateway at fog level ensure the compatibility
    between old and modern devices (Sharofidinov et al., 2020) and various protocols
    for communication. - Improve the resilience thanks to the decentralization of
    the treatment on network devices (Sharofidinov et al., 2020). Mobile Edge Computing
    (MEC) was proposed by ETSI and is deployed by telecommunication companies on the
    edge of the network, which is characterized by ultra-low latency and high bandwidth.
    (Roman et al., 2018, Zhou et al., 2017). At the very beginning, Mobile Edge Computing
    (MEC) aims to bring real-time, high-bandwidth, and low-latency access to dependent
    applications known as cloud computing capabilities; in addition to, information
    technology (IT) features of cloud computing. MEC is distributed at the edge of
    the network. In fact, a new class of cloud-native applications are easily accessible,
    because of the close position of Edge Computing to the end user and apps. Also,
    it allows network operators to open their environment to a new ecosystem. As a
    result of this significant change, MEC application can be used in LTE macro base
    stations (eNBs), 3G radio network controllers (RNCs), Wi-Fi access points, edge
    network routers, and enterprise edge servers. MEC platform contains two main hosting
    infrastructures. The first is formed by hardware resources and a high-resolution
    screen. The second is composed of manageable applications with numerous capabilities
    such as the application of virtualization manager and platform services (Zhou
    et al., 2017). An important challenge for the MEC is the VM migration that must
    optimize the tradeoff between migration gain and migration cost and select optimal
    location (Ai et al., 2018). Tran et al. investigated the collaborative Mobile
    Edge Computing in 5G Networks. MEC extends processing and storage resources at
    the edge of the Radio Access Network (RAN) while C-RAM is based on centralization
    of the base Station by means of the virtualization. Authors argue that both technologies
    are complementary in the 5G ecosystem (Tran et al., 2017). Fig. 5 Table 11. Download
    : Download high-res image (172KB) Download : Download full-size image Fig. 5.
    Mobile Edge Computing General Scheme. Table 11. Pros and Cons of MEC. Pros Cons
    - Reduces needs in connection, response time delay, the congestion of other parts
    of the network (Valecce et al., 2019). - Usable only for devices connected in
    Wi-Fi or 3GPP. - Use low level message from Wi-Fi to determine the location of
    each device (Location awareness) (Valecce et al., 2019). - MEC Server can be used
    as power open to applications and services (Valecce et al., 2019). Fan et al.
    combined MEC with data link management, combining with the industrial CAN bus
    characteristics to monitor water. Field Programmable Gate Arrays (FPGA) Altera
    implementing the AVALON bus was used to implement the system. Moreover, they propose
    a protocol to model random network disturbances and an online task offloading
    algorithm based on the monitoring of task execution (Fan and Gao, 2018). Valecce
    et al. proposed a 5G-robotics reference architecture for smart agriculture composed
    of UAV-Based Monitoring and connectivity, Machinery automation, and MEC Applications
    Server. UAVs/satellites capture high-resolution images during patrolling, which
    coupled with sensors data trigger a precise crop management. UAVs can also collect
    data or serve as a 5G mobile station. In field, image processing coupled with
    sensors data can be used for decision making. MEC allows to process gigabyte/s
    of data produced by autonomous vehicles and robots (Valecce et al., 2019). Table
    12. Table 12. Evaluation of distributed architecture with our criteria. Criterion
    Fog MEC User Proximity **(*) *** Latency & Jitter * * Network Stability *** **
    High throughput ** **(*) Reliability *** ** Scalability * * Cost Effectiveness
    ** ** Maintainability ** ** The development of fog computing and its counterpart
    for MEC wireless networks allow processing capabilities closer to users to improve
    response time but with lower computational capacities compared to the cloud. There
    are inherently two questions: Which association strategies to use between the
    cloud and the other levels of processing in the network? How to distribute the
    load between these different levels: local (Edge), network (Fog), and Cloud processing.
    4.5. Collaborative computing strategies In order to address, our fourth research
    question, we try to identify different possibilities to compose architectural
    elements. Indeed, different collaboration strategies between the different levels
    of data processing (cloud, fog, edge) can be considered depending on the particularities
    of the use cases. In the next paragraphs, we describe possibilities of collaboration
    between different treatment entries, and we illustrate each one with few examples.
    Edge-Cloud aims to connect devices directly with the cloud that performs data
    processing. This strategy is often used by UAVs and UGVs which preprocess data
    before its transfer to the cloud because image treatment needs processing power
    and storage capabilities. The default of this approach is that the delay of the
    whole process from data transfer via high throughput wireless or cellular protocol
    to the transmission of processing results cannot be guaranteed because of the
    fluctuation of data rates linked to wireless networks (Wang et al., 2020). The
    processing of data can be achieved in an online mode with a real-time data transmission
    and processing by a stream, Lambda, Kappa or derived architecture of these one.
    An offline strategy with a data transfer by means of a computer and Internet connection
    on the cloud after the UAV fly and processing with a Batch, a Lambda, or a Kappa
    architecture or a derived architecture of these one is also possible. This latter
    costly avoid data transmission and is suitable for monitoring crops or livestock
    that do not require direct action. Agriculture 4.0 uses in particular Unmanned
    Aerial Vehicles (UAVs) equipped with various sensors in order to improve the time
    of data collection, in reducing the cost of acquisition compared to traditional
    field phenotyping technologies. According to Tang et al., edge-cloud is majorly
    used in smart robots to reduce complexity (Tang et al., 2021). Indeed, the images
    of drones to be used must be orthorectified and assembled. These operations require
    significant resources in terms of computing power, and memory. All these collected
    data must be rapidly processed, analyzed, and visualized. Agroview (Ampatzidis
    et al., 2020) is a platform that developed a cloud and AI-based application to
    survey and assess the agriculture field, deployed on Amazon Web Services (AWS).
    A website allows the upload of images or existing orthomosaic, the consultation
    for each tree field e.g., number of trees, tree gaps count, area of the field,
    the average height of trees, canopy area, etc. The website also allows the stitching
    of an orthomosaic and the generation of a Digital Surface Model (DSM). A tree
    detection algorithm developed in C allows the detection of individual tree and
    tree gap, and estimate tree parameters such as height, canopy area, health/stress
    estimation. The pipeline of treatment uses a Faster R-CNN to detect the region
    of interest (ROI) and the ResNet101 network allows to detect trees and row orientation.
    Afterward, the Yolo classifier using Darknet19 was applied along each row of trees
    to obtain a more precise detection. Debauche et al. presented an Edge-Cloud architecture
    for the analysis of cattle behavior from 9-DOF IMU data sampled at 100 Hz and
    GPS location sampled at 0.5 Hz that is then processed with an algorithm proposed
    by (Andriamandroso et al., 2017) in batch processing (Debauche et al., 2019, Debauche
    et al., 2020). Popescu et al. proposed an integrated system UAV-WSN-IoT where
    WSN data is collected by UAVs before their transmission to the ground control
    station and afterward to the cloud (Popescu et al., 2020). Debauche et al. proposed
    an architecture for scientific research dedicated to honeybee Colony Collapse
    Disorder. In this architecture, data is compressed on LoPy at the edge level before
    its collection by the LoRaWan gateway and its transmission to the Lambda architecture
    in the cloud where it is processed (Debauche et al., 2018). Edge-Fog aims to connect
    devices directly with network components such as gateways, routers that perform
    data processing. The major benefits of this approach are an optimization of the
    bandwidth, a reduction of traffic and latency, a better privacy, and an improved
    security level (Badidi, 2020). Fog nodes collect, aggregate, filter, encrypt,
    compress, and process IoT data (Gupta et al., 2020). This way is used for example
    by milking robots where data are processed by a computer close the robot and can
    be viewed remotely by the farmer. 5G also promotes mobile edge computing (MEC).
    Debauche et al. presented an AI-IoT architecture for the deployment of Artificial
    intelligence algorithms and Internet of things services at fog level using docker
    containerization and Kubernetes orchestration. This architecture has been developed
    to automatically deploy AI algorithms after retraining when performances (accuracy,
    recall, precision) are improved (Debauche et al., 2020). Debauche et al. proposed
    a Multi-Agent System (MAS) deployed at edge level allowing to control abnormal
    data present in sensed data and eventually cure this data when it is possible.
    The MAS simultaneously manages pivot irrigation, plant diseases and pests'' detection,
    and their curation. The data is partially transmitted to the cloud to improve
    the detection of diseases and pests and retrain AI algorithms before their redeployment
    at the edge level (Debauche et al., 2020). Debauche et al. described a fog architecture
    in which a Gated Recursive Unit (GRU) algorithm is deployed on NVIDIA Jetson Nano
    for real-time poultry monitoring. GRU is simpler than LSTM algorithm. GRU is built
    to avoid varnish gradient problems. Periodically data is transmitted to the user
    interface implemented in NodeJS in the cloud (Debauche et al., 2020). Edge-Fog-Cloud
    is a paradigm in which data are partially processed in the fog and more complex
    treatments are achieved in the cloud. This way is used by wireless Sensor and
    Actuator Network (WSAN), which passes through a gateway that provides interconnection
    between the devices and the backhaul which transit then data to the cloud. However,
    the right balance between cloud and edge/fog computing is required (Badidi, 2020)
    based on available resources and whether or not the task is sensitive. Taneja
    et al. used a strategy Edge-Fog-Cloud to develop a detection system of lameness
    for cattle. The data from the pedometer is transmitted to the Fog node by means
    of a Long-Range proprietary protocol at 433 MHz on a distance of 2 km. Fog node
    stores in local database, preprocess and aggregates them. Fog node communicates
    with IBM Watson IoT Platform with MQTT protocol. Arriving data are picked up and
    stored in Cloudant NoSQL JSON database in IBM cloud. A mobile application synchronizes
    data with PouchDB, its local database via the REST API of Cloudant database when
    an Internet connection is available (Taneja et al., 2020). Alonso et al. presented
    Global Edge Computing Architecture (GECA), a modular tiered architecture (IoT
    Layer, Edge Layer, Business Solution Layer) to monitor dairy and feed grain state
    in real-time. In this architecture, a Distributed Ledger Technologies provides
    security from IoT Layer to Business Solution Layer. In the IoT layer, a set of
    agents call oracles to verify incoming data and afterward calculate hash of data
    with SHA-256 which is stored in the blockchain to verify the non-alteration of
    data. In parallel data is encrypted with the RSA algorithm and then sent to the
    Edge layer. The Edge Layer is responsible of the preprocessing of data and filters
    out data transmitted to the cloud. It enables also various data analyses. In the
    business Solution Layer, final storage, authentication, analysis for decision
    making is achieved. It provides also a knowledge base and APIs (Alonso et al.,
    2020). Edge-Edge is a paradigm in which devices interact to collaborate, exchange,
    and process data. The deployment of the 5G network allows the interconnection
    between UAVs and UGVs/ agricultural machinery (Tang et al., 2021). This high throughput
    network will allow to developping new collaboration between UAVs/ UGVs and agricultural
    machinery, for example, a drone will provide information to a harvester to avoid
    a non-desirable area of the field or avoid obstacles. A fleet of drones can also
    collaborate to coordinate their operations on the field between them of course
    subject to availability in rural areas, a transmission network with sufficient
    bandwidth and short-latency or capabilities to communicate between them in direct
    connection or in a mesh network. (Tang et al., 2021). Four cooperation strategies
    have been identified, two of which use the cloud, namely Fog-Cloud and Edge-Cloud.
    The other two remaing, do not involve the cloud; namely, Fog-Edge, and Edge-Edge
    cloud. The first two strategies complement the cloud to help us to address issues
    relating to production data and trade secrets, network congestion, and response
    times. The other two strategies do without the cloud and therefore assume that
    the devices/ vehicles have sufficient capacity to perform the processing. Despite
    these cooperation strategies between different levels of processing, some questions
    remain unanswered: How to store all the raw data when the data is so important
    that it would take colossal means to process it? What about security? How to organize
    the distribution of tasks between the edge, the fog, and the cloud? How to ensure
    operation and/ or treatment when network connections are intermittent or faulty?
    How to improve the maintainability of these architectures? These are the questions
    that the new trends that we describe in the next paragraph attempt to answer.
    5. New trends In this section, we present two emerging architectures not based
    on the batch or/and real-time architectures or their derivatives. Afterward, we
    describe Osmotic and Dew computing as two new paradigms, which allow us to respectively
    choose where the processing must be achieved and improve the user experience.
    New trends are additional elements that allow enriching the analysis of Section
    4 in order to address the third research question. The Microservices Architecture
    (MA) is a new system software design pattern that divides complex monolithic application
    in micro services dedicated for a single function. Microservice addresses defects
    of monolithic applications in which improving of service performance needs multiple
    deployment; a change in a function can affect all the monolith due to high dependencies
    between components; all the monolith uses a sole technology stack and development
    standards which limits possibilities to solve problems of physical heterogeneity.
    The advantages of this architecture are using a lightweight communication mechanism
    to interact between services with a minimal overload (Sun et al., 2017). The design
    proposed by (Sun et al., 2017) is composed of 8 microservices (Geo, Security,
    Tenant, Devices, Big Data, Automation, AI, and Application) and a core service
    coordinating. These services provide respectively: (1) Geo, a GIS layer to render
    data; (2) Security, user/group/role management, access control, administration,
    and authentication mechanism; (3) support for multiple IoT applications with a
    single core; (4) device plugins and communication protocols for sensing and actuating;
    (5) scalable persistence to store data; (6) process, analyze events and notify
    appropriate participant; (7) Artificial intelligence tools for IoT big data; (8)
    components to interact with client interfaces; (9) support for data exchanging
    by message with the devices. Authors argue that their approach is more flexible,
    scalable and platform-independent. Fig. 6 Table 13. Download : Download high-res
    image (189KB) Download : Download full-size image Fig. 6. Microservices Architecture
    General Scheme. Table 13. Pros and Cons of Microservices Architecture. Pros Cons
    - Fractionating of monoliths facilitates the maintainability and scalability of
    low coupled microservices. - Need to find microservice adapted with needs. - The
    discovery of micro-services allows the development new applications more easily
    than with monoliths. Fraction complex monolith is not easy. - More resilient,
    when a microservice is down, all others continue to function. Bixio et al. proposed
    a stream processing architecture event-driven based on proxy, adapter, and data
    processing microservices. This architecture extends the IoT platform Senseioty
    and using the Java OSGi framework (Bixio et al., 2020). The Data Lake Architecture
    (DLA) (Fang, 2015, Miloslavskaya and Tolstoy, 2016) enables the storage of large
    volumes of data of all types: raw data in its native format, structured, semi-structured,
    in a cost-effective manner. In this architecture, data is stored in its native
    format until it needs to process them by engines (Miloslavskaya and Tolstoy, 2016),
    which allows a fast transformation and refinement of stored data regardless of
    the amount of data stored. The architecture makes it possible to consume all types
    of data (logs, web services, database, files, etc.); different ingestion systems
    consume the data and then stored it in data repository. Once the data is stored,
    query systems can query the data lake. This architecture is considered in the
    corporate world as an evolution of existing architectures. The advantage of the
    Data Lake architecture is that it can easily and inexpensively store large amounts
    of data. It is particularly well suited to storing data in a typical format. In
    Enterprise Data Lakes are used; in addition to, data warehouses. Data lakes are,
    however, unsuitable for assessing data quality, data can be placed in data lakes
    without content control, and performance is also poorer than on specially designed
    and optimized infrastructures. The Lakehouse is a variant of the Data Lake where
    storages of data are generally achieved with Hadoop in the data lake is replaced
    by a distributed storage such as Amazon S3, Azure Blob Storage, Google Cloud Storage,
    and analysis are directly achieved by infrastructure managed by Cloud Service
    Providers such as Amazon Athena, EMR, or Databricks, Google Data proc, Azure HDInsight.
    The Fig. 7 provides a comparison between data lake and gatehouse structure. Download
    : Download high-res image (264KB) Download : Download full-size image Fig. 7.
    Data lake and Lakehouse General Scheme. It crucial in agriculture to explore datasets
    from different sources. The data lake is indicated to manage the complexity of
    agricultural ecosystems and centralized all data sources to find new correlations.
    (Madera et al., 2017). A data lake provides views based on metadata. It is nevertheless
    necessary to have advanced analysis tools for predictive modeling and statistical
    analysis. López et al. used a data lake to achieve the fusion of data from different
    domains in smart the agriculture context (López et al., 2020). Gallinucci et al.
    (Gallinucci et al., 2019, Gallinucci et al., 2020) present an innovative architecture
    3 tiers architecture, called Mo.Re.Farming (MOnitoring and REmote system for a
    more sustainable FARMING) based on a data lake using Apache Hadoop and storing
    structured, semi-structured, and unstructured raw data, and in which subsequent
    processing and enrichment activities are separated. An Operational Data Store
    (ODS) using PostgreSQL with PostGIS to stores structured and detailed data and
    address limitations of big data solutions in properly handling continuous field
    geographic data. Finally, a spatial cube enables Spatial OnLine Analytical Processing
    (SOLAP). Neves et al. described an architecture in which raw data is stored in
    a datalake. Then, ETLs transforms data to be storable in a database. The data
    is enriched thanks to a knowledge base and its exploration by data mining algorithms
    (machine learning). The result of processing is filtered to improve the quality
    of structured data (Neves and Cruvinel, 2020). Table 14. Table 14. Pros and Cons
    of Datalake/DataHouse. Pros Cons - Store the data in its raw form without transforming
    them immediately. - Availability of results depend of the ingesting speed by processing
    services. - Allow store massive low-value data without investing energy to transform
    and store them in a database. - Data analysis by sampling does not give exact
    results but is estimated. - Provides a solution to situations where the volume
    of data is so large that it can no longer be processed immediately - Data House
    may be limited by the services offered by cloud providers for data analysis. Osmotic
    Computing (OC) (Villari et al., 2016) is a new paradigm inspired by the chemical
    osmosis process that corresponds to a dynamic and bidirectional flow of microservices
    between cloud and edge. OC exploits container-based solution to allows an automatic
    deployment of portable, mobile, and cross-platform microservices between Edge
    and cloud levels (Villari et al., 2016). Osmotic computing introduces the concept
    of Micro Elements (MELS) which decouples user data and applications in Micro Services
    (MS) i.e. a docker container and Micro Data (MD) i.e. an entity self-explicative
    in JSON. MS associates one operating system (Micro Operation Service) with an
    application (Micro User Service) while MD associates a microservice configuration
    (Micro Operational Data) and User data (Micro User Data). These MELS can be deployed
    on Microcontrollers (MCU) or Multiprocessor (MPU) (Villari et al., 2017). Table
    15. Table 15. Pros and Cons of Osmotic Computing. Pros Cons - Micro Element (microservice  +
    micro dataset) easy to migrate between fog and cloud. - All datasets are not decomposable
    in micro dataset. The bidirectional migration of microservices between Edge and
    Cloud must, on one hand, avoid application breakdown and QoS degradation and on
    the other hand manage them dynamically, in high heterogeneously physical resources
    context, in the function of infrastructure and applications requirements (Villari
    et al., 2016). Carnevale et al. have applied osmotic computing to the Internet
    of Things by means of a distributed multi-agent system. Each agent is self-orchestrated,
    works independently, and manages the workflow as a composition of MELs. It monitors
    the overloading state of microservices by means of response time metric and decides
    to relocate them to another agent based on a Deep Reinforcement Learning algorithm
    or Time Series Analysis (Carnevale et al., 2019). Fig. 8, Fig. 9. Download : Download
    high-res image (119KB) Download : Download full-size image Fig. 8. Micro Element
    Structure. Download : Download high-res image (357KB) Download : Download full-size
    image Fig. 9. Osmotic Computing General Scheme. In an IoT context, OC allows to
    deploy lightweight micro services at edge level while complex micro services are
    deployed at fog/cloud level, and balance load between edge, fog, and cloud. (Maksimović,
    2018). Morshed et al. proposed to use OC to distribute Deep Learning across edge,
    cloud, and mobile edge in a holistic way (Morshed et al., 2017). However, Kaur
    et al. in their Osmotic Computing applications survey have identified the need
    of standardization in terms of infrastructure deployment and micro-services distribution.
    The orchestration is crucial to manage efficient services. Security remains an
    important challenge because the service migration is supported by different layers
    (Kaur et al., 2020). Dew Computing (DC) (Skala et al., 2015) allows to further
    improve response times by pushing from Central cloud to end-users, computing applications,
    data, and low-level services. Client microcomputers are used to store a part of
    the data locally in the background and to limit access to the cloud, reduce network
    dependency and drastically reduce processing cost (Skala et al., 2015). Dew computing
    is the additional piece of cloud computing. It is mainly composed of a wide range
    of heterogeneous devices and varied equipment ranging from smartphones to smart
    sensors (Wang, 2016). DC is highly and effectively capable in terms of scalability
    and ability to perform sophisticated operations and to process numerous applications
    and tools. Additionally, the equipment of DC is ad hoc programmable and self-adaptive.
    They have the qualifications to running the process within another process in
    a distributed way without a focal communication network (Skala et al., 2015).
    Applications running in the on-premises computers provide services to users and/or
    devices independently of the cloud but collaborating with cloud services (Wang,
    2016). DC can provide access web fraction without Internet connection (WiD), Storage
    in dew has a cloud copy (STiD), Local database has a cloud backup (DBiD), Software
    ownership and settings have a cloud copy (SiD), SDK and projects have a cloud
    copy (PiD), On-premises computer settings and data have a cloud copy (IaD), Other
    services (DiD) (Wang, 2016). The Fig. 10 presents the dew computing in the general
    scheme Cloud-Fog-Edge Computing. Table 16. Download : Download high-res image
    (84KB) Download : Download full-size image Fig. 10. Dew Computing General Scheme.
    Table 16. Pros and Cons of Dew Computing. Pros Cons - Allows access to a local
    copy of data when the connection is unavailable. - Replication of data is bandwidth-consuming.
    - Improve the reliability and the false tolerance. - Difficult to exploit if bandwidth
    is insufficient. Rajakaruna et al. presented a dew architecture based on a drone
    to retrieve and process data, manage WSN, and play the role of dew server. The
    drone communicates with sensors, and actuators with BLE protocol, collect, store
    data, and then when the drone is at the docking station it sends data to the cloud
    (Rajakaruna et al., 2018). Grovers et al. described a reliable and fault-tolerant
    architecture at 4 levels (edge, dew, fog, and cloud) in which sensed data is replicated
    at edge, fog and cloud level in order to take over the application’s control when
    a server is failed. In their architecture, dew servers are closed and linked with
    sensors producing data. The fault tolerance is ensured by mobile agents working
    as a resource exchanging the application and link-state information between us,
    and the network monitoring agent (Grover and Garimella, 2018). The Blockchain
    is a distributed digital ledger of transaction distributed maintained by a network
    of multiple computing nodes. This ledger can be deployed among the IoT nodes network
    (Bermeo-Almeida et al., 2018). In the blockchain, transactions namely blocks are
    managed by a specific software platform ensuring the data transmission, processing
    and storage, and its representation in a human-readable form allowing a consistent
    view and a consensus between the participants (Kamilaris et al., 2019). Different
    mechanisms of consensus whose two main ones are the “Proof of Work (PoW)” and
    the Proof of Stake (PoS). The PoW requires the solving of difficult computational
    tasks before validating transactions and the adding of the block in the blockchain.
    In this approach “miners” are in competition to be the first and obtain the rewards,
    which has an impact on the environment, need expending large a amount of computer
    and energy, and involves a risk of centralization. While the PoS approach, “validators”
    are randomly selected with a probability which depends on the amount of stake
    held. At the end of the validation process, it earns a fee. Other less used consensus
    mechanisms exist such as (1) Proof of Elapsed Time (PoET) in which each node generates
    a random wait time and goes to sleep for that specified duration; (2) Simplified
    Byzantine Fault Tolerance (SBFT), an improvement of Practical Byzantine Fault
    Tolerance (PBFT) specifically designed for blockchain in which each new block
    is maintained by a delegation of nodes with increasing authority. Each one uses
    the internal time to decide when actions must be done; (3) Proof of Authority
    (PoA) in which approved accounts process to the automated validation of transaction
    and blocks. Table 17. Table 17. Pros and Cons of Blockchain. Pros Cons - Data
    distributed (Alonso et al., 2020). - Energy consumption for the complex signature
    verification process can be important. - Immutable, durable, verifiable, secure,
    and transparent (Alonso et al., 2020). - Not adapted to store images, video. -
    Transactions P2P at low cost. The Fig. 11 shows the blockchain general scheme.
    Download : Download high-res image (251KB) Download : Download full-size image
    Fig. 11. Blockchain General Scheme. The block chain is mainly used in Agriculture
    to make the data of the supply chain transparent and open (Bermeo-Almeida et al.,
    2018) and ensure the complete traceability of the food chain from the fork to
    the plate. The block chain allows to record information about: (1) Transactions
    between provider and farmer as well as information relating to the crops, material
    and chemical products; (2) The farm, cultivation practices and management, animals
    feeding, and complementary information such as weather conditions, animals welfare,
    diseases, treatment, etc; (3) Information about factory and its equipment, the
    processing method, batch numbers but also financial transactions with producers
    and distributors; (4) Warehousing, storage conditions (temperature, humidity),
    methods of transport, transit time, and all financial transactions between the
    distributors and retailers; (5) food items information such as quantity available,
    quality, expiration date, time spent on the shelf or in the stock (Bermeo-Almeida
    et al., 2018, Kamilaris et al., 2019). The Fig. 12 shows an example of blockchain
    applied to an agri supply chain. Download : Download high-res image (112KB) Download
    : Download full-size image Fig. 12. Supply chain based on a blockchain. To a lesser
    extent, secured data storage, remote monitoring, and automation. The blockchain
    address some challenges of IoT such as decentralization, data anonymization, and
    security. Moreover, it allows faster and efficient operations, to improve reliability
    and scalability (Bermeo-Almeida et al., 2018). The analysis of new trends shows
    that: (1) Micro service architecture allows decomposing monoliths in microservices
    lowly coupled which makes it easier to maintain it while allowing other services
    to continue operating. Furthermore, this type of architecture is more resilient
    because if one of the services is down, the other services due to the weak coupling
    can continue to operate at least in a degraded mode. (2) Data Lake/DataHouse propose
    a new approach Load Transform Extract (LTE) where data are firstly stored in their
    original format, which are then transformed in order to extract information. This
    paradigm is particularly well adapted when the amount of data is so important
    that process all data is too costly. In this case, data can be sampled in order
    to obtain information. This paradigm is also well adapted if we want to conserve
    also raw data or complete a generic architecture, for example, to store data that
    will be processed in batch processing. (3) Osmotic Computing attempts to propose
    a solution to the repartition of workload between fog and cloud in decomposing
    treatments in microelements composed of a microservice associated with a micro
    dataset. The osmotic computing could also be associated with the micro service
    architecture to allow the distribution of instances of microservices at different
    levels of the network according to their respective load. (4) Dew Computing aims
    to replicate data near sensors or users to continue to store data or allows to
    continue to consult data when connection is intermittent. It allows improving
    the reliance of architectures on connection interruptions. (5) Blockchain provides
    an answer to authentication and security problems by making it possible in particular
    to verify that the data has not been altered or compromised. Nevertheless, it
    is not possible to store large amount of data such as high definitions images,
    or videos in the blockchain but hashes of datasets allowing to verify their authenticity
    well. 6. Towards Agriculture 5.0 According Myklevy et al., the world must improve
    the amount of food produced by 70% by 2050 to produce global food needs for a
    population (Mykleby et al., 2016) of 9.7 billion according to the Food and Agriculture
    Organization of the United Nations (FAO) (Zhang, 2016). To overcome these problems
    and contribute to achieve the second objective of 17 Sustainable Development Goals
    (SDGs) of the United Nations (UN) with a timeframe in the range 2015 to 2030,
    the concept of Agriculture 5.0 has been born (Martos et al., 2021). Agriculture
    5.0 aims to increase production sustainably while consuming fewer resources and
    taking care of the environment. This next wave of agricultural revolution will
    imply the use of robots integrating machine learning to compensate for the shortage
    of workers. Farm robots are drastically increasing productivity in improving the
    human labor workforce and can also harvest a more important volume faster than
    a human. Nevertheless, these early technologies are still too expensive for most
    farmers especially small farms (Saiz-Rubio and Rovira-Más, 2020). Fig. 13 show
    the coupling between Agriculture 4.0 and Agriculture 5.0 and their integration
    in the context of the agri-food supply chain, the Society 5.0 and 17 Sustainable
    Development Goals (SDGs) of United Nations (See Fig. 13). Download : Download
    high-res image (252KB) Download : Download full-size image Fig. 13. Integration
    of the Agriculture 5.0 in the context of the Society 5.0. 7. Conclusion Our review
    is boosted by four research questions dectitaed as follow: (1) Which storage and
    processing architectures are best suited to Agriculture 4.0 applications and address
    its particularities? (2) Can generic architectures meet the needs of Agriculture
    4.0 application cases? (3) What are the horizontal valuation possibilities that
    allow the transition from research to industrialization? (4) What are the vertical
    valuation possibilities to move from algorithms trained in the cloud to embedded
    or autonomous products?. The analysis of the literature shows that a multitude
    of architecture coexists. Nevertheless, the Lambada and Kappa architectures seem
    to emerge as generic architectures. These must generally be accompanied by complementary
    architectural components to address specific needs and be part of a storage and
    processing strategy in which the cloud architecture is a component of the chain
    or may also and more rarely be absent. The traditional centralized cloud computing
    will continue to remain an important part of computing systems (Ai et al., 2018),
    for sciences even if other paradigms appear. Indeed, cloud, fog, and edge computing
    complementary interact with each other to form a mutually beneficial and interdependent
    service continuum. Some functions are naturally more suitable or advantageous
    at a level than another in function of requirements in response time, computing,
    or latency tolerance. However, the cloud cannot be completely replaced by fog
    and edge computing because some computation-intensive tasks can only be processed
    at the cloud level, which has the computing power and storage capacities (Wang
    et al., 2020). In Agriculture 4.0, this is particularly the case for the processing
    of satellite images, the training of artificial intelligence algorithms such as
    Deep Convolutional Neural Network (DCNN). New trends make it possible to address
    various problems: (1) The Data lake/Data House offers a more economical alternative
    to massive cloud storage in databases. In this paradigm, all data are stored in
    a state and transform only when they are to be exploited. This approach is particularly
    interesting on one hand when all data are not exploited and on the other hand
    when a decision or an action is not expected immediately. Data lake also allows
    the fusion of agriculture data from various origins in different formats and granularity.
    (2) The blockchain provides solutions in particular to the security problems,
    the possibility of distributing data storage and ensuring the traceability of
    transactions in agrifood supply chains (3) As the literature has shown, Dew Computing
    can be placed in two different places in the network either as close as possible
    to the sensors to allow processing to continue during transmission interruptions
    or as close as possible to users in order to have a local copy of the data in
    order to be able to consult them offline. It should be noted, however, that for
    the second option, there are other means of local caching at the device level,
    for amounts of data of a few mega as those offered by Progressive Web Apps (PWA)
    by example. (4) Osmotic computing provides a solution to the question of how to
    distribute the load between the different processing levels (edge, fog, cloud).
    It uses the concept of microelement associating a microservice and its micro dataset.
    In addition, osmotic computing can also be associated with micro-service architectures.
    (5) The microservice architecture offers the possibility of decoupling the monolithic
    architectures into weakly coupled microservices. These services can be more easily
    associated, maintained, or evolved independently. The combination of these microservices
    makes it easier to develop new services for the end-user that are also easier
    and faster to evolve according to technological developments and needs. In addition,
    at the network level, the 5G network offers new possibilities in terms of Wireless
    Sensors and Actuators Network (WSAN), communication between machines, UAVs, and
    UGVs. Moreover, the coupling with MEC opens the field of processing close of end-users.
    The SDN/NFV Architecture allows to facilitate the design, and to improve the flexibility
    of network. Software-defined networking (SDN) allows decoupling transmission of
    data and network control functionality while Network function virtualization (NFV)
    abstracts transfer network and related network functions (Friha et al., 2021).
    Two trends in the use of processing architecture coexist, on the one hand, users
    of a paid or open source IoT platform, and on the other hand, users who develop
    specific architectures to implement particular use cases. From the point of view
    of transferability, we understand that it is easier for ready-made chargeable
    infrastructures and that it can be limited for turnkey open-source infrastructures
    where the type of license adopted may pose a problem. However, the sustainability
    of paid infrastructure is conditional on the development granted by the company
    that manages them and on its financial health. The development of architecture
    based on paid software bricks is facilitated but its durability is conditioned
    by the availability and the maintenance of these software bricks. As for transferability,
    it is linked to the acquisition of ad hoc licenses. The development of architecture
    using open source software bricks from foundations such as Apache Foundation makes
    it possible not to be limited by licenses but is dependent on developments and
    maintenance carried out by the community of developers. These software bricks
    can be abandoned by the community, the company that sponsors them, or the foundation
    that hosts them. The development of a sustainable architecture would go through
    an emancipation of software bricks which would make it possible to easily change
    them on the one hand when one of them disappears or if a new more efficient software
    brick appears. The deployment of 5G and satellite Internet will bring in a new
    player, which are the telecommunications companies that will be able to provide
    processing capacities and services as close as possible to users at the level
    of 5G antennas, which will impact processing architectures. The problem will then
    arise of interoperability between the networks of sensors and actuators with these
    new high-speed, low-latency networks. The new networks offered by the telecommunications
    companies will make it possible to offer new services or even to decouple the
    software from the hardware, which will make it possible to make the sensors and
    actuators interchangeable. This should make it possible to reduce the cost of
    the equipment and make it accessible to developing countries or areas not covered
    by traditional LPWAN and 3GPP networks. The impact of these new networks will
    have to be reviewed in the future to identify the new trends offered by 5G and
    satellite Internet. Declaration of Competing Interest The authors declare that
    they have no known competing financial interests or personal relationships that
    could have interfered with overall quality of the work reported in this paper.
    Acknowledgment This research is partially funded by Infortech and Numediart institutes.
    The authors would like to express their gratitude to Dr. Meryem Elmoulat for accepting
    to edit the writing of this paper and to Mr. Fabrice Nolack Fote for his help
    in the elaboration of the conceptual framework. References Agency, 2020 E.G. Agency
    Power-efficient positioning for THE Internet of Things – White Paper European
    GNSS Agency (2020), 10.2759/26127 Google Scholar Ai et al., 2018 Y. Ai, M. Peng,
    K. Zhang Edge computing technologies for internet of things: a primer Digital
    Commun. Networks, 4 (2018), pp. 77-86, 10.1016/j.dcan.2017.07.001 View PDFView
    articleView in ScopusGoogle Scholar Alonso et al., 2020 R.S. Alonso, I. Sittón-Candanedo,
    Óscar García, J. Prieto, S. Rodríguez-González An intelligent edge-iot platform
    for monitoring livestock and crops in a dairy farming scenario Ad Hoc Netw., 98
    (2020), Article 102047, 10.1016/j.adhoc.2019.102047 View PDFView articleView in
    ScopusGoogle Scholar Amazon, 2021 Amazon, 2021a. Amazon dynamodb. url:https://aws.amazon.com/fr/dynamodb/.
    Google Scholar Amazon, 2021b Amazon, 2021b. Amazon web services. url: https://aws.amazon.com/.
    Google Scholar Ampatzidis et al., 2020 Y. Ampatzidis, V. Partel, L. Costa Agroview:
    Cloud-based application to process, analyze and visualize uav-collected data for
    precision agriculture applications utilizing artificial intelligence Comput. Electron.
    Agricul., 174 (2020), Article 105457, 10.1016/j.compag.2020.105457 View PDFView
    articleView in ScopusGoogle Scholar Andriamandroso et al., 2017 A.L.H. Andriamandroso,
    F. Lebeau, Y. Beckers, E. Froidmont, I. Dufrasne, B. Heinesch, P. Dumortier, G.
    Blanchy, Y. Blaise, J. Bindelle Development of an open-source algorithm based
    on inertial measurement units (imu) of a smartphone to detect cattle grass intake
    and ruminating behaviors Comput. Electron. Agricult., 139 (2017), pp. 126-137,
    10.1016/j.compag.2017.05.020 View PDFView articleView in ScopusGoogle Scholar
    Apache Software Foundation, 2021a Apache Software Foundation, A., 2021a. Cassandra.
    url: https://cassandra.apache.org. Google Scholar Apache Software Foundation,
    2021b Apache Software Foundation, A., 2021b. Druid. url: https://druid.apache.org.
    Google Scholar Assis and Bittencourt, 2016 M.R. Assis, L.F. Bittencourt A survey
    on cloud federation architectures: identifying functional and non-functional properties
    J. Network Comput. Appl., 72 (2016), pp. 51-71, 10.1016/j.jnca.2016.06.014 View
    PDFView articleView in ScopusGoogle Scholar AT&T, 2021 AT&T, P., 2021. At&t continues
    to fuel growth of the internet of things with launch of new developer-friendly
    managed service. url: https://about.att.com/story/m2x_data_service_for_enterprise_developers.html.
    Google Scholar Ayaz et al., 2019 M. Ayaz, M. Ammad-Uddin, Z. Sharif, A. Mansour,
    E.H.M. Aggoune Internet-of-things (iot)-based smart agriculture: toward making
    the fields talk IEEE Access, 7 (2019), pp. 129551-129583, 10.1109/ACCESS.2019.2932609
    View in ScopusGoogle Scholar Badidi, 2020 E. Badidi Qos-aware placement of tasks
    on a fog cluster in an edge computing environment J. Ubiquitous Syst. Pervasive
    Networks, 13 (2020), pp. 11-19, 10.5383/JUSPN.13.01.002 Google Scholar Bermeo-Almeida
    et al., 2018 Bermeo-Almeida, O., Cardenas-Rodriguez, M., Samaniego-Cobo, T., Ferruzola-Gómez,
    E., Cabezas-Cabezas, R., Bazán-Vera, W., 2018. Blockchain in agriculture: A systematic
    literature review, in: International Conference on Technologies and Innovation,
    Springer. pp. 44–56. doi:10.1007/978-3-030-00940-3_4. Google Scholar Bixio et
    al., 2020 L. Bixio, G. Delzanno, S. Rebora, M. Rulli A flexible iot stream processing
    architecture based on microservices Information, 11 (2020), p. 565, 10.3390/info11120565
    Google Scholar Blynk, 2021 Blynk, 2021. Blynk iot platform: for businesses and
    developers. url:  https://blynk.io. Google Scholar Botta et al., 2016 A. Botta,
    W. De Donato, V. Persico, A. Pescapé Integration of cloud computing and internet
    of things: a survey Future Generat. Comput. Syst., 56 (2016), pp. 684-700, 10.1016/j.future.2015.09.021
    View PDFView articleView in ScopusGoogle Scholar Byers, 2017 C.C. Byers Architectural
    imperatives for fog computing: Use cases, requirements, and architectural techniques
    for fog-enabled iot networks IEEE Commun. Mag., 55 (2017), pp. 14-20, 10.1109/MCOM.2017.1600885
    View in ScopusGoogle Scholar Carnevale et al., 2019 L. Carnevale, A. Celesti,
    A. Galletta, S. Dustdar, M. Villari Osmotic computing as a distributed multi-agent
    system: the body area network scenario Internet of Things, 5 (2019), pp. 130-139,
    10.1016/j.iot.2019.01.001 View PDFView articleView in ScopusGoogle Scholar Cisco,
    2018 C. Cisco Cisco global cloud index: Forecast and methodology, 2016–2021 Cisco,
    San Jose (2018) Google Scholar Codeluppi et al., 2020 G. Codeluppi, A. Cilfone,
    L. Davoli, G. Ferrari Lorafarm: A lorawan-based smart farming modular iot architecture
    Sensors, 20 (2020), 10.3390/s20072028 url:  https://www.mdpi.com/1424-8220/20/7/2028
    Google Scholar Conesa-Munoz et al., 2016 J. Conesa-Muñoz, J. Valente, J. Del Cerro,
    A. Barrientos, A. Ribeiro A multi-robot sense-act approach to lead to a proper
    acting in environmental incidents Sensors, 16 (2016), p. 1269, 10.3390/s16081269
    View in ScopusGoogle Scholar Corp, 2020 Corp, P.H., 2020. Sensorcloud. url:  https://sensorcloud.com/.
    Google Scholar Debauche et al., 2018 O. Debauche, M. El Moulat, S. Mahmoudi, S.
    Boukraa, P. Manneback, F. Lebeau Web monitoring of bee health for researchers
    and beekeepers based on the internet of things Proc. Comput. Sci., 130 (2018),
    pp. 991-998, 10.1016/j.procs.2018.04.103 View PDFView articleView in ScopusGoogle
    Scholar Debauche et al., 2019 O. Debauche, S. Mahmoudi, A.L.H. Andriamandroso,
    P. Manneback, J. Bindelle, F. Lebeau Cloud services integration for farm animals’
    behavior studies based on smartphones as activity sensors J. Ambient Intell. Humanized
    Comput., 10 (2019), pp. 4651-4662, 10.1007/s12652-018-0845-9 View in ScopusGoogle
    Scholar Debauche et al., 2020 O. Debauche, S. Mahmoudi, M. Elmoulat, S.A. Mahmoudi,
    P. Manneback, F. Lebeau Edge ai-iot pivot irrigation, plant diseases, and pests
    identification Proc. Comput. Sci., 177 (2020), pp. 40-48, 10.1016/j.procs.2020.10.009
    View PDFView articleView in ScopusGoogle Scholar Debauche et al., 2020 O. Debauche,
    S. Mahmoudi, S.A. Mahmoudi, P. Manneback, J. Bindelle, F. Lebeau Edge computing
    and artificial intelligence for real-time poultry monitoring Proc. Comput. Sci.,
    175 (2020), pp. 534-541, 10.1016/j.procs.2020.07.076 View PDFView articleView
    in ScopusGoogle Scholar Debauche et al., 2020 O. Debauche, S. Mahmoudi, S.A. Mahmoudi,
    P. Manneback, J. Bindelle, F. Lebeau Edge computing for cattle behavior analysis
    2020 Second International Conference on Embedded & Distributed Systems (EDiS),
    IEEE (2020), pp. 52-57, 10.1109/EDiS49545.2020.9296471 View in ScopusGoogle Scholar
    Debauche et al., 2020 O. Debauche, S. Mahmoudi, S.A. Mahmoudi, P. Manneback, F.
    Lebeau A new edge architecture for ai-iot services deployment Proc. Comput. Sci.,
    175 (2020), pp. 10-19, 10.1016/j.procs.2020.07.006 View PDFView articleView in
    ScopusGoogle Scholar Debauche et al., 2020 O. Debauche, S.A. Mahmoudi, N. De Cock,
    S. Mahmoudi, P. Manneback, F. Lebeau Cloud architecture for plant phenotyping
    research Concurrency and Computation: Practice and Experience, 32 (2020), Article
    e5661, 10.1002/cpe.5661 View in ScopusGoogle Scholar Debauche et al., 2018 O.
    Debauche, S.A. Mahmoudi, S. Mahmoudi, P. Manneback Cloud platform using big data
    and hpc technologies for distributed and parallels treatments Proc. Comput. Sci.,
    141 (2018), pp. 112-118, 10.1016/j.procs.2018.10.156 View PDFView articleView
    in ScopusGoogle Scholar Debauche et al., 2021 O. Debauche, J.P. Trani, S. Mahmoudi,
    P. Manneback, J. Bindelle, S.A. Mahmoudi, A. Guttadauria, F. Lebeau Data management
    and internet of things: a methodological review in smart farming Internet of Things,
    14 (2021), Article 100378, 10.1016/j.iot.2021.100378 View PDFView articleView
    in ScopusGoogle Scholar Diaz et al., 2016 M. Díaz, C. Martín, B. Rubio State-of-the-art,
    challenges, and open issues in the integration of internet of things and cloud
    computing J. Network Comput. Appl., 67 (2016), pp. 99-117, 10.1016/j.jnca.2016.01.010
    View PDFView articleView in ScopusGoogle Scholar Drakos et al., 2015 Drakos, A.,
    Protonotarios, V., Manouselis, N., 2015. aginfra: a research data hub for agriculture,
    food and the environment. F1000Res. 4. doi:10.12688/f1000research.6349.2. Google
    Scholar El-Sayed et al., 2017 H. El-Sayed, S. Sankar, M. Prasad, D. Puthal, A.
    Gupta, M. Mohanty, C.T. Lin Edge of things: the big picture on the integration
    of edge, iot and the cloud in a distributed computing environment IEEE Access,
    6 (2017), pp. 1706-1717, 10.1109/ACCESS.2017.2780087 View in ScopusGoogle Scholar
    Elijah et al., 2018 O. Elijah, T.A. Rahman, I. Orikumhi, C.Y. Leow, M.N. Hindia
    An overview of internet of things (iot) and data analytics in agriculture: benefits
    and challenges IEEE Internet Things J., 5 (2018), pp. 3758-3773, 10.1109/JIOT.2018.2844296
    View in ScopusGoogle Scholar Estrada and Ruiz, 2016 Estrada, R., Ruiz, I., 2016.
    Big data smack: A guide to apache spark. Mesos, Akka, Cassandra, and Kafka. Google
    Scholar Fan and Gao, 2018 D. Fan, S. Gao The application of mobile edge computing
    in agricultural water monitoring system IOP Conference Series: Earth and Environmental
    Science, IOP Publishing (2018), p. 012015 CrossRefView in ScopusGoogle Scholar
    Fang, 2015 Fang, H., 2015. Managing data lakes in big data era: What’s a data
    lake and why has it became popular in data management ecosystem, in: 2015 IEEE
    International Conference on Cyber Technology in Automation, Control, and Intelligent
    Systems (CYBER), IEEE. pp. 820–824. doi:10.1109/CYBER.2015.7288049. Google Scholar
    Farooq et al., 2019 M.S. Farooq, S. Riaz, A. Abid, K. Abid, M.A. Naeem A survey
    on the role of iot in agriculture for the implementation of smart farming IEEE
    Access, 7 (2019), pp. 156237-156271, 10.1109/ACCESS.2019.2949703 View in ScopusGoogle
    Scholar Feng et al., 2019 X. Feng, F. Yan, X. Liu Study of wireless communication
    technologies on internet of things for precision agriculture Wireless Pers. Commun.,
    108 (2019), pp. 1785-1802, 10.1007/s11277-019-06496-7 View in ScopusGoogle Scholar
    Fernandez et al., 2015 Fernandez, R.C., Pietzuch, P.R., Kreps, J., Narkhede, N.,
    Rao, J., Koshy, J., Lin, D., Riccomini, C., Wang, G., 2015. Liquid: Unifying nearline
    and offline big data integration., in: CIDR, pp. 1–8. url:  http://hdl.handle.net/10044/1/23433.
    Google Scholar Ferrag et al., 2020 M.A. Ferrag, L. Shu, X. Yang, A. Derhab, L.
    Maglaras Security and privacy for green iot-based agriculture: review, blockchain
    solutions, and challenges IEEE Access, 8 (2020), pp. 32031-32053, 10.1109/ACCESS.2020.2973178
    View in ScopusGoogle Scholar Fote et al., 2020 F.N. Fote, A. Roukh, S. Mahmoudi,
    S.A. Mahmoudi, O. Debauche Toward a big data knowledge-base management system
    for precision livestock farming Proc. Comput. Sci., 177 (2020), pp. 136-142, 10.1016/j.procs.2020.10.021
    View PDFView articleView in ScopusGoogle Scholar Friha et al., 2021 O. Friha,
    M.A. Ferrag, L. Shu, L.A. Maglaras, X. Wang Internet of things for the future
    of smart agriculture: a comprehensive survey of emerging technologies IEEE CAA
    J. Autom. Sinica, 8 (2021), pp. 718-752, 10.1109/JAS.2021.1003925 View in ScopusGoogle
    Scholar Gallinucci et al., 2019 E. Gallinucci, M. Golfarelli, S. Rizzi A hybrid
    architecture for tactical and strategic precision agriculture C. Ordonez, I.Y.
    Song, G. Anderst-Kotsis, A.M. Tjoa, I. Khalil (Eds.), Big Data Analytics and Knowledge
    Discovery, Springer International Publishing, Cham (2019), pp. 13-23, 10.1007/978-3-030-27520-4_2
    View in ScopusGoogle Scholar Gallinucci et al., 2020 E. Gallinucci, M. Golfarelli,
    S. Rizzi Mo. re. farming: A hybrid architecture for tactical and strategic precision
    agriculture Data Knowl. Eng., 129 (2020), Article 101836, 10.1016/j.datak.2020.101836
    View PDFView articleView in ScopusGoogle Scholar Garcia et al., 2020 L. García,
    L. Parra, J.M. Jimenez, J. Lloret, P. Lorenz Iot-based smart irrigation systems:
    an overview on the recent trends on sensors and iot systems for irrigation in
    precision agriculture Sensors, 20 (2020), p. 1042, 10.3390/s20041042 View in ScopusGoogle
    Scholar Lopez et al., 2015 Garcia Lopez, P., Montresor, A., Epema, D., Datta,
    A., Higashino, T., Iamnitchi, A., Barcellos, M., Felber, P., Riviere, E., 2015.
    Edge-centric computing: Vision and challenges. doi:10.1145/2831347.2831354. Google
    Scholar Giebler et al., 2018 Giebler, C., Stach, C., Schwarz, H., Mitschang, B.,
    2018. Braid, in: Proceedings of the 7th International Conference on Data Science,
    Technology and Applications, pp. 294–301. doi:10.5220/0006861802940301. Google
    Scholar Google, 2021 Google, 2021. Firebase. url:  https://firebase.google.com/.
    Google Scholar Granell et al., 2017 Granell, C., Miralles, I., Rodríguez-Pupo,
    L.E., González-Pérez, A., Casteleyn, S., Busetto, L., Pepe, M., Boschetti, M.,
    Huerta, J., 2017. Conceptual architecture and service-oriented implementation
    of a regional geoportal for rice monitoring. ISPRS Int. J. Geo-Inform. 6. url:
    https://www.mdpi.com/2220-9964/6/7/191, doi:10.3390/ijgi6070191. Google Scholar
    Grover and Garimella, 2018 Grover, J., Garimella, R.M., 2018. Reliable and fault-tolerant
    iot-edge architecture, in: 2018 IEEE sensors, IEEE. pp. 1–4. doi:10.1109/ICSENS.2018.8589624.
    Google Scholar Guardo et al., 2018 E. Guardo, A. Di Stefano, A. La Corte, M. Sapienza,
    M. Scatà A fog computing-based iot framework for precision agriculture J. Internet
    Technol., 19 (2018), pp. 1401-1411, 10.3966/160792642018091905012 View in ScopusGoogle
    Scholar Gupta et al., 2020 M. Gupta, M. Abdelsalam, S. Khorsandroo, S. Mittal
    Security and privacy in smart farming: challenges and opportunities IEEE Access,
    8 (2020), pp. 34564-34584, 10.1109/ACCESS.2020.2975142 View in ScopusGoogle Scholar
    Hausenblas, 2014 Hausenblas, M., 2014. Internet of things architecture (iot-a)
    home page. url:  https://github.com/mhausenblas/iot-a.info. Google Scholar Iaksch
    et al., 2021 J. Iaksch, E. Fernandes, M. Borsato Digitalization and big data in
    smart farming–a review J. Manage. Anal., 8 (2021), pp. 333-349, 10.1080/23270012.2021.1897957
    View in ScopusGoogle Scholar IBM, 2015 IBM, 2015. Ibm watson iot platform. url:  https://internetofthings.ibmcloud.com/.
    Google Scholar IBM, 2021 IBM, 2021. Ibm cloud. url:  https://www.ibm.com/cloud.
    Google Scholar Influxdata, 2021 Influxdata, 2021. Infludb cloud. url:  https://www.influxdata.com/products/influxdb-cloud/.
    Google Scholar Souces and I., 2021 Integra Souces, I., 2021. Iot solution development
    services. url:  https://www.integrasources.com/iot-page/. Google Scholar Jayaraman
    et al., 2016 P.P. Jayaraman, A. Yavari, D. Georgakopoulos, A. Morshed, A. Zaslavsky
    Internet of things platform for smart farming: experiences and lessons learnt
    Sensors, 16 (2016), p. 1884, 10.3390/s16111884 View in ScopusGoogle Scholar KaaIoT,
    2021 KaaIoT, 2021. Ubidots. url:  https://docs.kaaiot.io/KAA/docs/current/Welcome/.
    Google Scholar Kamilaris et al., 2019 Kamilaris, A., Fonts, A., Prenafeta-Boldv́,
    F.X., 2019. The rise of blockchain technology in agriculture and food supply chains.
    Trends Food Sci. Technol. 91, 640–652. doi:10.1016/j.tifs.2019.07.034. Google
    Scholar Kaur et al., 2020 A. Kaur, R. Kumar, S. Saxena Osmotic computing and related
    challenges: a survey 2020 Sixth International Conference on Parallel, Distributed
    and Grid Computing (PDGC), IEEE (2020), pp. 378-383, 10.1109/PDGC50313.2020.9315757
    View in ScopusGoogle Scholar Kazim et al., 2018 M. Kazim, L. Liu, S.Y. Zhu A framework
    for orchestrating secure and dynamic access of iot services in multi-cloud environments
    IEEE Access, 6 (2018), pp. 58619-58633, 10.1109/ACCESS.2018.2873812 View in ScopusGoogle
    Scholar Khanna and Kaur, 2019 A. Khanna, S. Kaur Evolution of internet of things
    (iot) and its significant impact in the field of precision agriculture Comput.
    Electron. Agricul., 157 (2019), pp. 218-231, 10.1016/j.compag.2018.12.039 View
    PDFView articleView in ScopusGoogle Scholar Kodati and Jeeva, 2019 S. Kodati,
    S. Jeeva Smart agricultural using internet of things, cloud and big data Int.
    J. Innov. Technol. Exploring Eng. (IJITEE), 8 (2019), pp. 3718-3722, 10.35940/ijitee.J9671.0881019
    View in ScopusGoogle Scholar Kreps, 2014 Kreps, J., 2014. Questioning the lambda
    architecture. Online article, July 205. Google Scholar Lakhe, 2016 B. Lakhe Practical
    Hadoop migration: how to integrate your RDBMS with the Hadoop ecosystem and re-architect
    relational applications to NoSQL Apress (2016) Google Scholar Liu et al., 2020
    Y. Liu, X. Ma, L. Shu, G.P. Hancke, A.M. Abu-Mahfouz From industry 4.0 to agriculture
    4.0: current status, enabling technologies, and research challenges IEEE Trans.
    Industr. Inf., 17 (2020), pp. 4322-4334, 10.1109/TII.2020.3003910 Google Scholar
    López et al., 2020 I.D. López, J.F. Grass, A. Figueroa, J.C. Corrales A proposal
    for a multi-domain data fusion strategy in a climate-smart agriculture context
    Int. Trans. Oper. Res. (2020), 10.1111/itor.12899 Google Scholar Luis Bustamante
    et al., 2019 A. Luis Bustamante, M.A. Patricio, J.M. Molina Thinger. io: an open
    source platform for deploying data fusion applications in iot environments Sensors,
    19 (2019), p. 1044, 10.3390/s19051044 Google Scholar Mach and Becvar, 2017 P.
    Mach, Z. Becvar Mobile edge computing: a survey on architecture and computation
    offloading IEEE Commun. Surveys Tutorials, 19 (2017), pp. 1628-1656, 10.1109/COMST.2017.2682318
    View in ScopusGoogle Scholar Madera et al., 2017 Madera, C., Laurent, A., Rouge,
    T.L., Miralles, A., 2017. How can the data lake concept influence information
    system design for agriculture? In: 11th European conference dedicated to the future
    use of ICT in the agri-food sector, bioresource and biomass sector (EFITA 2017),
    pp. 181–182. Google Scholar Maksimović, 2018 M. Maksimović The role of osmotic
    computing in internet of things 2018 17th International Symposium INFOTEH-JAHORINA
    (INFOTEH), IEEE (2018), pp. 1-4, 10.1109/INFOTEH.2018.8345538 View in ScopusGoogle
    Scholar Manyika and Chui, 2015 Manyika, J., Chui, M., 2015. By 2025, internet
    of things applications could have $11 trillion impact. Insight Publications. Google
    Scholar Martos et al., 2021 V. Martos, A. Ahmad, P. Cartujo, J. Ordoñez Ensuring
    agricultural sustainability through remote sensing in the era of agriculture 5.0
    Appl. Sci., 11 (2021), p. 5911, 10.3390/app11135911 View in ScopusGoogle Scholar
    Marz and Warren, 2013 N. Marz, J. Warren Big Data: Principles and best practices
    of scalable real-time data systems Manning (2013) Google Scholar Maureira et al.,
    2011 M.A.G. Maureira, D. Oldenhof, L. Teernstra Thingspeak–an api and web service
    for the internet of things World Wide Web (2011) Google Scholar Meehan et al.,
    2016 J. Meehan, S. Zdonik, S. Tian, Y. Tian, N. Tatbul, A. Dziedzic, A. Elmore
    Integrating real-time and batch processing in a polystore 2016 IEEE High Performance
    Extreme Computing Conference (HPEC), IEEE (2016), pp. 1-7, 10.1109/HPEC.2016.7761585
    Google Scholar Meola, 2021 Meola, A., 2021. Smart farming in 2020: How iot sensors
    are creating a more efficient precision agriculture industry. url:  https://www.businessinsider.com/smart-farming-iot-agriculture?IR=T.
    Google Scholar Microsoft, 2021a Microsoft, 2021a. Azure. url:  https://azure.microsoft.com.
    Google Scholar Microsoft, 2021b Microsoft, 2021b. Azure iot. url:  https://azure.microsoft.com/en-us/overview/iot/.
    Google Scholar Miloslavskaya and Tolstoy, 2016 N. Miloslavskaya, A. Tolstoy Big
    data, fast data and data lake concepts Proc. Comput. Sci., 88 (2016), pp. 300-305,
    10.1016/j.procs.2016.07.439 View PDFView articleView in ScopusGoogle Scholar Misra
    et al., 2020 N. Misra, Y. Dixit, A. Al-Mallahi, M.S. Bhullar, R. Upadhyay, A.
    Martynenko Iot, big data and artificial intelligence in agriculture and food industry
    IEEE Internet Things J. (2020), 10.1109/JIOT.2020.2998584 Google Scholar Mongo,
    2021 Mongo, 2021. Mongodb atlas. url:  https://www.mongodb.com/en-us/cloud/atlas.
    Google Scholar Morshed et al., 2017 A. Morshed, P.P. Jayaraman, T. Sellis, D.
    Georgakopoulos, M. Villari, R. Ranjan Deep osmosis: holistic distributed deep
    learning in osmotic computing IEEE Cloud Comput., 4 (2017), pp. 22-32, 10.1109/MCC.2018.1081070
    View in ScopusGoogle Scholar Munir et al., 2017 A. Munir, P. Kansakar, S.U. Khan
    Ifciot: Integrated fog cloud iot: a novel architectural paradigm for the future
    internet of things IEEE Consumer Electron. Mag., 6 (2017), pp. 74-82, 10.1109/MCE.2017.2684981
    View in ScopusGoogle Scholar Mykleby et al., 2016 M. Mykleby, P. Doherty, J. Makower
    The New Grand Strategy: Restoring America’s Prosperity, Security, and Sustainability
    in the 21st Century St. Martin’s Press (2016) Google Scholar Navarro et al., 2020
    E. Navarro, N. Costa, A. Pereira A systematic review of iot solutions for smart
    farming Sensors, 20 (2020), p. 4231, 10.3390/s20154231 Google Scholar Navarro-Hellin
    et al., 2016 H. Navarro-Hellín, J. Martinez-del Rincon, R. Domingo-Miguel, F.
    Soto-Valles, R. Torres-Sánchez A decision support system for managing irrigation
    in agriculture Comput. Electron. Agricul., 124 (2016), pp. 121-131, 10.1016/j.compag.2016.04.003
    View PDFView articleView in ScopusGoogle Scholar NECTEC, 2020 NECTEC, 2020. Netpie
    - network platform for internet of everything. url:  https://netpie.io. Google
    Scholar Neves and Cruvinel, 2020 R.A. Neves, P.E. Cruvinel Model for semantic
    base structuring of digital data to support agricultural management 2020 IEEE
    14th International Conference on Semantic Computing (ICSC), IEEE (2020), pp. 337-340,
    10.1109/ICSC.2020.00067 View in ScopusGoogle Scholar Nkamla Penka et al., 2021
    J.B. Nkamla Penka, S. Mahmoudi, O. Debauche A new kappa architecture for iot data
    management in smart farming Proc. Comput. Sci. (2021) In press Google Scholar
    Oracle, 2021 Oracle, 2021. Mysql. url:  https://www.mysql.com. Google Scholar
    Persico et al., 2018 V. Persico, A. Pescapé, A. Picariello, G. Sperlí Benchmarking
    big data architectures for social networks data processing using public cloud
    platforms Future Gener. Comput. Syst., 89 (2018), pp. 98-109, 10.1016/j.future.2018.05.068
    View PDFView articleView in ScopusGoogle Scholar Pesonen et al., 2014 L.A. Pesonen,
    F.K.W. Teye, A.K. Ronkainen, M.O. Koistinen, J.J. Kaivosoja, P.F. Suomi, R.O.
    Linkolehto Cropinfra–an internet-based service infrastructure to support crop
    production in future farms Biosyst. Eng., 120 (2014), pp. 92-101, 10.1016/j.biosystemseng.2013.09.005
    View PDFView articleView in ScopusGoogle Scholar Petcu et al., 2013 D. Petcu,
    B. Di Martino, S. Venticinque, M. Rak, T. Máhr, G.E. Lopez, F. Brito, R. Cossu,
    M. Stopar, S. Šperka, et al. Experiences in building a mosaic of clouds J. Cloud
    Comput.: Adv., Syst. Appl., 2 (2013), pp. 1-22, 10.1186/2192-113X-2-12 View in
    ScopusGoogle Scholar Popescu et al., 2020 D. Popescu, F. Stoican, G. Stamatescu,
    L. Ichim, C. Dragana Advanced uav–wsn system for intelligent monitoring in precision
    agriculture Sensors, 20 (2020), p. 817, 10.3390/s20030817 View in ScopusGoogle
    Scholar Radoglou-Grammatikis et al., 2020 P. Radoglou-Grammatikis, P. Sarigiannidis,
    T. Lagkas, I. Moscholios A compilation of uav applications for precision agriculture
    Comput. Netw., 172 (2020), Article 107148, 10.1016/j.comnet.2020.107148 View PDFView
    articleView in ScopusGoogle Scholar Rajakaruna et al., 2018 Rajakaruna, A., Manzoor,
    A., Porambage, P., Liyanage, M., Ylianttila, M., Gurtov, A., 2018. Lightweight
    dew computing paradigm to manage heterogeneous wireless sensor networks with uavs.
    arXiv preprint arXiv:1811.04283. Google Scholar Ray, 2017 P.P. Ray Internet of
    things for smart agriculture: technologies, practices and future direction J.
    Ambient Intell. Smart Environ., 9 (2017), pp. 395-420, 10.3233/AIS-170440 View
    in ScopusGoogle Scholar Ren et al., 2017 J. Ren, H. Guo, C. Xu, Y. Zhang Serving
    at the edge: a scalable iot architecture based on transparent computing IEEE Network,
    31 (2017), pp. 96-105, 10.1109/MNET.2017.1700030 View in ScopusGoogle Scholar
    Rodriguez et al., 2018 M.A. Rodriguez, L. Cuenca, A. Ortiz Fiware open source
    standard platform in smart farming – a review L.M. Camarinha-Matos, H. Afsarmanesh,
    Y. Rezgui (Eds.), Collaborative Networks of Cognitive Systems, Springer International
    Publishing, Cham (2018), pp. 581-589, 10.1007/978-3-319-99127-6_50 View in ScopusGoogle
    Scholar Roman et al., 2018 R. Roman, J. Lopez, M. Mambo Mobile edge computing,
    fog et al.: a survey and analysis of security threats and challenges Future Gener.
    Comput. Syst., 78 (2018), pp. 680-698, 10.1016/j.future.2016.11.009 View PDFView
    articleView in ScopusGoogle Scholar Roukh et al., 2020 A. Roukh, F.N. Fote, S.A.
    Mahmoudi, S. Mahmoudi Big data processing architecture for smart farming Proc.
    Comput. Sci., 177 (2020), pp. 78-85, 10.1016/j.procs.2020.10.014 View PDFView
    articleView in ScopusGoogle Scholar Roukh et al., 2020 A. Roukh, F.N. Fote, S.A.
    Mahmoudi, S. Mahmoudi Wallesmart: cloud platform for smart farming, in 32nd International
    Conference on Scientific and Statistical Database Management (2020), pp. 1-4,
    10.1145/3400903.3401690 Google Scholar Ruan et al., 2019 J. Ruan, H. Jiang, C.
    Zhu, X. Hu, Y. Shi, T. Liu, W. Rao, F.T.S. Chan Agriculture iot: Emerging trends,
    cooperation networks, and outlook IEEE Wirel. Commun., 26 (2019), pp. 56-63, 10.1109/MWC.001.1900096
    View in ScopusGoogle Scholar Saiz-Rubio and Rovira-Más, 2020 V. Saiz-Rubio, F.
    Rovira-Más From smart farming towards agriculture 5.0: a review on crop data management
    Agronomy, 10 (2020), p. 207, 10.3390/agronomy10020207 View in ScopusGoogle Scholar
    Sallah et al., 2019 A.H.M. Sallah, B. Tychon, I. Piccard, A. Gobin, R. Van Hoolst,
    B. Djaby, J. Wellens Batch-processing of aquacrop plug-in for rainfed maize using
    satellite derived fractional vegetation cover data Agric. Water Manage., 217 (2019),
    pp. 346-355 Google Scholar Scott, 2015 Scott, J., 2015. Zeta architecture: Hexagon
    is the new circle. an enterprise architecture solution for scale and efficiency.
    url:  https://www.oreilly.com/ideas/zeta-architecture-hexagon-is-the-new-circle.
    Google Scholar Sethi and Sarangi, 2017 P. Sethi, S.R. Sarangi Internet of things:
    architectures, protocols, and applications J. Electr. Comput. Eng., 2017 (2017),
    10.1155/2017/9324035 Google Scholar Shafi et al., 2019 U. Shafi, R. Mumtaz, J.
    García-Nieto, S.A. Hassan, S.A.R. Zaidi, N. Iqbal Precision agriculture techniques
    and practices: From considerations to applications Sensors, 19 (2019), p. 3796,
    10.3390/s19173796 View in ScopusGoogle Scholar Sharofidinov et al., 2020 F. Sharofidinov,
    M.S.A. Muthanna, V.D. Pham, A. Khakimov, A. Muthanna, K. Samouylov Agriculture
    management based on lora edge computing system V.M. Vishnevskiy, K.E. Samouylov,
    D.V. Kozyrev (Eds.), Distributed Computer and Communication Networks, Springer
    International Publishing, Cham (2020), pp. 113-125 CrossRefView in ScopusGoogle
    Scholar Shi et al., 2016 W. Shi, J. Cao, Q. Zhang, Y. Li, L. Xu Edge computing:
    vision and challenges IEEE Internet Things J., 3 (2016), pp. 637-646, 10.1109/JIOT.2016.2579198
    View in ScopusGoogle Scholar Shi et al., 2019 X. Shi, X. An, Q. Zhao, H. Liu,
    L. Xia, X. Sun, Y. Guo State-of-the-art internet of things in protected agriculture
    Sensors, 19 (2019), p. 1833, 10.3390/s19081833 View in ScopusGoogle Scholar Siciliani,
    2015 Siciliani, T., 2015. Big data using lambda architecture. url: https://dzone.com/articles/lambda-architecture-big-data.
    Google Scholar Sigrimis et al., 2002 Sigrimis, N., Arvanitis, K., Ferentinos,
    K., 2002. Macqu: An open scada system for intelligent management and control of
    greenhouses, in: 2002 ASAE Annual Meeting, American Society of Agricultural and
    Biological Engineers. p. 1. doi:10.13031/2013.9618. Google Scholar Singh et al.,
    2019 K.N. Singh, R.K. Behera, J.K. Mantri Big data ecosystem: review on architectural
    evolution Emerging Technol. Data Mining Inform. Secur., 335–345 (2019), 10.1007/978-981-13-1498-8_30
    Google Scholar Sipos et al., 2013 Sipos, G., Turilli, M., Newhouse, S., Kacsuk,
    P., 2013. A european federated cloud: Innovative distributed computing solutions
    by egi, in: EGU General Assembly Conference Abstracts, pp. EGU2013–8690. Google
    Scholar Skala et al., 2015 K. Skala, D. Davidovic, E. Afgan, I. Sovic, Z. Sojat
    Scalable distributed computing hierarchy: cloud, fog and dew computing Open J.
    Cloud Comput. (OJCC), 2 (2015), pp. 16-24, 10.19210/1002.2.1.16 Google Scholar
    SQLite, 2021 SQLite, 2021. Sqlite. url: https://www.sqlite.org. Google Scholar
    Sun et al., 2017 L. Sun, Y. Li, R.A. Memon An open iot framework based on microservices
    architecture China Commun., 14 (2017), pp. 154-162, 10.1109/CC.2017.7868163 View
    in ScopusGoogle Scholar Talavera et al., 2017 J.M. Talavera, L.E. Tobón, J.A.
    Gómez, M.A. Culman, J.M. Aranda, D.T. Parra, L.A. Quiroz, A. Hoyos, L.E. Garreta
    Review of iot applications in agro-industrial and environmental fields Comput.
    Electron. Agricul., 142 (2017), pp. 283-297, 10.1016/j.compag.2017.09.015 View
    PDFView articleView in ScopusGoogle Scholar Taneja et al., 2020 M. Taneja, J.
    Byabazaire, N. Jalodia, A. Davy, C. Olariu, P. Malone Machine learning based fog
    computing assisted data-driven approach for early lameness detection in dairy
    cattle Comput. Electron. Agricul., 171 (2020), Article 105286, 10.1016/j.compag.2020.105286
    View PDFView articleView in ScopusGoogle Scholar Taneja et al., 2019 M. Taneja,
    N. Jalodia, J. Byabazaire, A. Davy, C. Olariu Smartherd management: a microservices-based
    fog computing–assisted iot platform towards data-driven smart dairy farming Software:
    Practice Experience, 49 (2019), pp. 1055-1078, 10.1002/spe.2704 View in ScopusGoogle
    Scholar Tang et al., 2021 Y. Tang, S. Dananjayan, C. Hou, Q. Guo, S. Luo, Y. He
    A survey on the 5g network and its impact on agriculture: challenges and opportunities
    Comput. Electron. Agricul., 180 (2021), Article 105895, 10.1016/j.compag.2020.105895
    View PDFView articleView in ScopusGoogle Scholar The PostgreSQL Global Development
    Group, 2021 The PostgreSQL Global Development Group, P., 2021. Postgresql: The
    world’s most advanced open source relational database. url:  https://www.postgresql.org/.
    Google Scholar Tran et al., 2017 T.X. Tran, A. Hajisami, P. Pandey, D. Pompili
    Collaborative mobile edge computing in 5g networks: new paradigms, scenarios,
    and challenges IEEE Commun. Mag., 55 (2017), pp. 54-61, 10.1109/MCOM.2017.1600863
    View in ScopusGoogle Scholar Triantafyllou et al., 2019 A. Triantafyllou, P. Sarigiannidis,
    S. Bibi Precision agriculture: a remote sensing monitoring system architecture
    Information, 10 (2019), p. 348, 10.3390/info10110348 View in ScopusGoogle Scholar
    Tzounis et al., 2017 A. Tzounis, N. Katsoulas, T. Bartzanas, C. Kittas Internet
    of things in agriculture, recent advances and future challenges Biosyst. Eng.,
    164 (2017), pp. 31-48, 10.1016/j.biosystemseng.2017.09.007 View PDFView articleView
    in ScopusGoogle Scholar Ubidots, 2021 Ubidots, 2021. Ubidots. url:  https://ubidots.com/.
    Google Scholar Uehara, 2017 Uehara, M., 2017. Mist computing: Linking cloudlet
    to fogs, in: International Conference on Computational Science/Intelligence &
    Applied Informatics, Springer. pp. 201–213. doi:10.1007/978-3-319-63618-4_15.
    Google Scholar Valecce et al., 2019 G. Valecce, S. Strazzella, L.A. Grieco On
    the interplay between 5g, mobile edge computing and robotics in smart agriculture
    scenarios M.R. Palattella, S. Scanzio, S. Coleri Ergen (Eds.), Ad-Hoc, Mobile,
    and Wireless Networks, Springer International Publishing, Cham (2019), pp. 549-559,
    10.1007/978-3-030-31831-4_38 View in ScopusGoogle Scholar Villa-Henriksen et al.,
    2020 A. Villa-Henriksen, G.T. Edwards, L.A. Pesonen, O. Green, C.A.G. Sørensen
    Internet of things in arable farming: implementation, applications, challenges
    and potential Biosyst. Eng., 191 (2020), pp. 60-84, 10.1016/j.biosystemseng.2019.12.013
    View PDFView articleView in ScopusGoogle Scholar Villari et al., 2017 Villari,
    M., Celesti, A., Fazio, M., 2017. Towards osmotic computing: Looking at basic
    principles and technologies, in: Conference on Complex, Intelligent, and Software
    Intensive Systems, Springer. pp. 906–915. doi:10.1007/978-3-319-61566-086. Google
    Scholar Villari et al., 2014 M. Villari, A. Celesti, M. Fazio, A. Puliafito Alljoyn
    lambda: an architecture for the management of smart environments in iot 2014 International
    Conference on Smart Computing Workshops, IEEE (2014), pp. 9-14, 10.1109/SMARTCOMP-W.2014.7046676
    View in ScopusGoogle Scholar Villari et al., 2016 M. Villari, M. Fazio, S. Dustdar,
    O. Rana, R. Ranjan Osmotic computing: a new paradigm for edge/cloud integration
    IEEE Cloud Comput., 3 (2016), pp. 76-83, 10.1109/MCC.2016.124 View in ScopusGoogle
    Scholar Wang et al., 2020 X. Wang, Y. Han, V.C. Leung, D. Niyato, X. Yan, X. Chen
    Edge AI: Convergence of Edge Computing and Artificial Intelligence Springer Nature
    (2020), 10.1007/978-981-15-6186-3 Google Scholar Wang, 2016 Y. Wang Definition
    and categorization of dew computing Open J. Cloud Comput. (OJCC), 3 (2016), pp.
    1-7, 10.19210/1002.3.1.1 View PDFView articleGoogle Scholar Wolfert et al., 2017
    S. Wolfert, L. Ge, C. Verdouw, M.J. Bogaardt Big data in smart farming–a review
    Agricult. Syst., 153 (2017), pp. 69-80, 10.1016/j.agsy.2017.01.023 View PDFView
    articleView in ScopusGoogle Scholar Yang, 2017 S. Yang Iot stream processing and
    analytics in the fog IEEE Commun. Mag., 55 (2017), pp. 21-27, 10.1109/MCOM.2017.1600840
    View in ScopusGoogle Scholar Zhai et al., 2020 Z. Zhai, J.F. Martínez, V. Beltran,
    N.L. Martínez Decision support systems for agriculture 4.0: Survey and challenges
    Comput. Electron. Agricul., 170 (2020), Article 105256, 10.1016/j.compag.2020.105256
    View PDFView articleView in ScopusGoogle Scholar Zhang, 2016 Zhang, Q., 2016.
    Precision agriculture technology for crop farming. Taylor & Francis. doi:10.1201/b19336.
    Google Scholar Zhou et al., 2017 Y. Zhou, D. Zhang, N. Xiong Post-cloud computing
    paradigms: a survey and comparison Tsinghua Sci. Technol., 22 (2017), pp. 714-732,
    10.23919/TST.2017.8195353 View in ScopusGoogle Scholar Cited by (28) The convergence
    of Digital Twins and Distributed Ledger Technologies: A systematic literature
    review and an architectural proposal 2024, Journal of Network and Computer Applications
    Show abstract Integrated design framework for smart agriculture: Bridging the
    gap between digitalization and sustainability 2024, Journal of Cleaner Production
    Show abstract Spatio-temporal semantic data management systems for IoT in agriculture
    5.0: Challenges and future directions 2024, Internet of Things (Netherlands) Show
    abstract Internet of agriculture: Analyzing and predicting tractor ride comfort
    through supervised machine learning 2023, Engineering Applications of Artificial
    Intelligence Show abstract A real-time decision-making tool based on dynamic thresholds
    for Phthorimaea absoluta management in greenhouse tomato 2023, Crop Protection
    Show abstract Information management infrastructures for multipurpose unmanned
    aerial systems operations 2023, Unmanned Aerial Systems in Agriculture: Eyes Above
    Fields Show abstract View all citing articles on Scopus Peer review under responsibility
    of King Saud University. 1 https://www.statista.com/statistics/471264/iot-number-of-connected-devices-worldwide/
    2 https://www.statista.com/statistics/499431/global-ip-data-traffic-forecast/
    3 https://www.pix4d.com/ 4 http://prospera.ag/ © 2021 The Authors. Published by
    Elsevier B.V. on behalf of King Saud University. Recommended articles Multi-user
    routing algorithm for indoor spaces – Adapted for social distancing Journal of
    King Saud University - Computer and Information Sciences, Volume 34, Issue 9,
    2022, pp. 7045-7058 Abdullah Alamri, …, Sultan Alamri View PDF Embedding and generalization
    of formula with context in the retrieval of mathematical information Journal of
    King Saud University - Computer and Information Sciences, Volume 34, Issue 9,
    2022, pp. 6624-6634 Pankaj Dadure, …, Sivaji Bandyopadhyay View PDF mySense: A
    comprehensive data management environment to improve precision agriculture practices
    Computers and Electronics in Agriculture, Volume 162, 2019, pp. 882-894 Raul Morais,
    …, Emanuel Peres View PDF Show 3 more articles Article Metrics Citations Citation
    Indexes: 21 Captures Readers: 194 Social Media Shares, Likes & Comments: 60 View
    details About ScienceDirect Remote access Shopping cart Advertise Contact and
    support Terms and conditions Privacy policy Cookies are used by this site. Cookie
    settings | Your Privacy Choices All content on this site: Copyright © 2024 Elsevier
    B.V., its licensors, and contributors. All rights are reserved, including those
    for text and data mining, AI training, and similar technologies. For all open
    access content, the Creative Commons licensing terms apply.'
  inline_citation: '>'
  journal: 'Maǧalaẗ ǧamʼaẗ al-malīk Saud : ùlm al-ḥasib wa al-maʼlumat'
  limitations: '>'
  pdf_link: null
  publication_year: 2022
  relevance_score1: 0
  relevance_score2: 0
  title: 'Cloud and distributed architectures for data management in agriculture 4.0
    : Review and future trends'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
