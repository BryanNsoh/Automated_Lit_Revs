- DOI: https://doi.org/10.1016/j.future.2017.05.034
  analysis: '>'
  apa_citation: Cicirelli, F., Guerrieri, A., Spezzano, G., & Vinci, A. (2017). An
    edge-based platform for dynamic smart city applications. Future Generation Computer
    Systems, 76, 106–118. https://doi.org/10.1016/j.future.2017.05.034
  authors:
  - Franco Cicirelli
  - Antonio Guerrieri
  - Giandomenico Spezzano
  - Andrea Vinci
  citation_count: 104
  data_sources: Survey data, Interviews, Case studies
  explanation: The edge computing concept is a computational paradigm that pushes
    acquired data away from the core of data centers to the outer edges of a network,
    closer to the data sources, potentially fostering benefits such as faster event
    response, better data bandwidth exploitation, increased reliability, scalability
    and maintenance support. The article in consideration presents the design and
    implementation of a real case study, namely the Smart Street Cosenza, which is
    a smart street implemented in the town of Cosenza (Italy) that furnishes decentralized
    urban intelligence services to citizens, especially related to climatic and environmental
    wellness and anomalies detection. The paper describes the Smart Street in terms
    of design, development and deployed components, and remarks how edge computing
    is implemented by using the agent metaphor natively supported by iSapiens, the
    IoT tool used to implement the smart street functionalities.
  extract_1: The edge computing concept is a computational paradigm that pushes acquired
    data away from the core of data centers to the outer edges of a network, closer
    to the data sources, potentially fostering benefits such as faster event response,
    better data bandwidth exploitation, increased reliability, scalability and maintenance
    support.
  extract_2: The paper in consideration presents the design and implementation of
    a real case study, namely the Smart Street Cosenza, which is a smart street implemented
    in the town of Cosenza (Italy) that furnishes decentralized urban intelligence
    services to citizens, especially related to climatic and environmental wellness
    and anomalies detection.
  full_citation: '>'
  full_text: '>

    Skip to main content Skip to article Journals & Books Search Register Sign in
    Brought to you by: University of Nebraska-Lincoln View PDF Download full issue
    Outline Highlights Abstract Keywords 1. Introduction 2. Related work 3. iSapiens:
    a platform for Smart Cities 4. Design and implementation of the Smart Street Cosenza
    5. Conclusions and future work Acknowledgments References Vitae Show full outline
    Cited by (109) Figures (16) Show 10 more figures Tables (4) Table 1 Table 2 Table
    3 Table 4 Future Generation Computer Systems Volume 76, November 2017, Pages 106-118
    An edge-based platform for dynamic Smart City applications Author links open overlay
    panel Franco Cicirelli, Antonio Guerrieri, Giandomenico Spezzano, Andrea Vinci
    Show more Add to Mendeley Share Cite https://doi.org/10.1016/j.future.2017.05.034
    Get rights and content Highlights • The iSapiens platform for Smart City application
    development is proposed. • Methodological guidelines for proper design of iSapiens
    applications are shown. • The design and implementation of a real Smart City prototype
    in Cosenza, Italy, is presented. Abstract A Smart City is a cyber–physical system
    improving urban behavior and capabilities by providing ICT-based functionalities.
    An infrastructure for Smart City has to be geographically and functionally extensible,
    as it requires both to grow up with the physical environment and to meet the increasing
    in needs and demands of city users/inhabitants. In this paper, we propose iSapiens,
    an IoT-based platform for the development of general cyber–physical systems suitable
    for the design and implementation of smart city services and applications. As
    distinguishing features, the iSapiens platform implements the edge computing paradigm
    through both the exploitation of the agent metaphor and a distributed network
    of computing nodes directly scattered in the urban environment. The platform promotes
    the dynamic deployment of new computing nodes as well as software agents for addressing
    geographical and functional extensibility. iSapiens provides a set of abstractions
    suitable to hide the heterogeneity of the physical sensing/actuator devices embedded
    in the system, and to support the development of complex applications. The paper
    also furnishes a set of methodological guidelines exploitable for the design and
    implementation of smart city applications by properly using iSapiens. As a significant
    case study, the design and implementation of a real Smart Street in the city of
    Cosenza (Italy) are shown, which provides decentralized urban intelligence services
    to citizens. Previous article in issue Next article in issue Keywords Smart CityCyber–physical
    systemInternet of ThingsUrban computingMulti agent systemsEdge computing 1. Introduction
    A Smart City is an urban environment made smart by using ICT technologies, so
    as to improve the quality of life of the inhabitants and the efficiency of the
    city infrastructures, and provide enhanced services to citizens [1]. A lot of
    applications are compliant with the smart city vision and comprehend structural
    health of buildings, waste management, air quality and noise monitoring, traffic
    congestion management, city energy consumption optimization, smart parking, smart
    lighting, automation and salubrity of public buildings, urban drainage systems,
    emergency detection and so forth [2], [3], [4], [5], [6], [7]. The realization
    of Smart City is a hot topic in the current research landscape [8], [9], and many
    city administrations are interested in solutions for enhancing their cities with
    smart services. The European Union is also supporting a big amount of projects
    on Smart Cities1 and several cities around the world are boosting politics to
    exploit smart technologies. Valuable examples in this direction are the cities
    of Amsterdam,2 San Francisco,3 Barcelona,4 and Copenhagen5 that are creating versatile
    ecosystems for comprehensive Smart Cities realization. Smart Cities development
    introduces several challenges, which are shared with the Internet of Things, Cyber–Physical
    Systems, and Smart Environments [10], [11], [12], [13]. Such challenges include
    issues like the integration of heterogeneous systems and technologies, scalability,
    fault tolerance, system maintenance [14], geographical and functional extensibility.
    In particular, geographical extensibility refers to the problem of the dynamic
    extension of existing Smart City services to areas not previously covered, or
    to new urban areas (e.g., related to the city growth), while functional extensibility
    refers to the problem of adding new services to the set of the existing ones.
    Despite the big interest around Smart Cities, the currently adopted solutions
    lack in design and development guidelines, approaches for the integration of heterogeneous
    services and infrastructures, as well as ICT solutions allowing a holistic Smart
    City development. Furthermore, even though urban environments are naturally distributed,
    most of the actual Smart City implementations relies on centralized approaches,
    where a big amount of data flow in a common data center that processes them and
    provides services to the citizens, or schedules actuations on physical infrastructures
    [8]. Finally, many realized services are developed as independent monolithic blocks,
    and the interaction among them is not considered.2 In this paper it is argued
    that benefits arise from the exploitation of the edge (fog) computing paradigm
    [15], [16], [17]. The edge computing paradigm has the aim to push the computation
    on acquired data away from the core of data centers to the outer edges of a network,
    close to the data sources. Side benefits of such computing paradigm include: (i)
    a faster reactivity to events which can be managed where they occur, (ii) a better
    exploitation of communication bandwidth, as data are locally processed and only
    the aggregated required information are propagated across the system, (iii) an
    increase of reliability and scalability, since the paradigm fosters the use of
    distributed algorithms. The contributions of the paper are manifold. Firstly,
    the iSapiens platform is proposed [18] as an agent-based [19], [20], [21] distributed
    platform for the management of a network of computing nodes spread over a city
    area. In iSapiens, the computation is executed both on the edge of the network,
    by the agents residing in each computational node, and in the Cloud for computation
    demanding tasks. The iSapiens platform is able to manage physical devices (i.e.,
    sensors, actuators, or even complex objects) connected to its network nodes so
    as to hide their heterogeneity and specific communication protocols. As a second
    contribution, a set of design guidelines are provided which favors the realization
    of scalable and dynamically-extensible Smart City services. Moreover, the paper
    discusses about the advantages in using iSapiens, which provides important benefits
    such as extensibility, distributed computing, fault tolerance, heterogeneity management,
    and support for hardware/software maintenance. As a final contribution, the paper
    shows the realization of a Smart City prototype in the city of Cosenza (Italy),
    which provides decentralized urban intelligence services to citizens. The developed
    Smart City highlights how the proposed platform and guidelines can be applied
    for an effective Smart City prototyping. Geographical and functional extensibility
    issues are also taken into account within the case study. The rest of the paper
    is structured as follows: Section 2 discusses some related works in the context
    of Smart City; Section 3 describes the iSapiens platform and provides the methodological
    guidelines for the design of smart city services. Such Section also discusses
    about the benefits of the iSapiens platform coupled with the provided design guidelines;
    Section 4 shows the design and the realization of the Cosenza Smart Street. Finally,
    conclusions are drawn and the directions of ongoing work are portrayed. 2. Related
    work Cyber–Physical Systems and Smart Environments have been widely studied in
    literature so far [12], [22]. The most important goal of such systems is the improvement
    of the user experience in traditional environments under different points of view.
    In the context of urban environments, there is a growing number of Smart Cities
    whose final aim is to make an optimized use of the public resources, together
    with increasing the quality of the offered services still reducing the operational
    costs that the public administrations should sustain [8]. Such systems help citizens
    in a clever usage of their own cities. Smart Cities are usually considered as
    part of the so called Urban Internet of Things [23], which is the part of the
    Internet of Things that has been designed to support the Smart City realization
    and maintenance. Smart Cities and Smart City infrastructures have actually been
    already formalized [1], [24]. Anyway, real Smart City implementations are still
    not really comprehensive. The European Union is supporting a big amount of projects
    on the Smart Cities and several cities are encouraging politics to integrate smart
    technologies into the city to make it more eco-friendly and energy-efficient.
    Very good examples in this direction are the cities of Amsterdam, San Francisco,
    Barcelona, and Copenhagen that are creating ecosystems for the realization of
    comprehensive smart cities. Though the above presented cases are very positive
    examples, they all are represented by a plethora of applications that are not
    coordinated by a single platform which can allow the integration of the knowledge
    gathered from all the deployed sensors/systems. Several works in literature propose
    the integration of systems to produce whole smart cities. The paper in [25] presents
    the Oulu Smart City.6 Its first aim is to provide Oulu citizens with Wi-Fi connection
    and, through the tracking of the people in the city, to monitor pedestrian and
    vehicular flows. Even though the Oulu smart city presents a good design, it should
    be improved by the addition of services based on other sensing/actuation capabilities
    across the streets. In [26] authors have presented a framework for the implementation
    of information services to monitor public areas and infrastructures. In particular,
    they have shown a testbed on a subway scenario with the objective of (i) demonstrating
    that their system can flexibly help in the detection of anomalous events and (ii)
    simplifying communications in case of emergency. They realized a multi-technology
    architecture that collects data from various devices to infer high level knowledge
    (for emergency reason). The proposed framework is valuable, but practical examples
    are not satisfying and its re-use in different smart city scenarios has to be
    analyzed. In [9] authors integrate sensor nodes with the street lights around
    Cambridge to have powered nodes which sample multiple environmental sensors. They
    present a platform to reprogram and collect data through such sensor nodes. Anyway,
    authors do not talk about high level analysis of the gathered data. They only
    implement their case study for collection purposes. Several platforms for the
    realization of Smart Cities have been already implemented. Authors of [8] propose
    a general reference framework for the design of an urban IoT. It is based on a
    centralized architecture which exposes a set of web services. A real case study
    involving such framework has been implemented in Padova (Italy) where nodes have
    been deployed to monitor temperature, humidity, light, and benzene concentration
    in the air. Although this is a valuable example of both Smart City platform and
    case study, the proposed centralized architecture can present an extensibility
    problem for big cities. In [27] the SmartSantander project is presented, which
    is part of the Future Internet Research and Experimentation initiative of the
    European Commission. The project had the aim to implement a large scale network
    in the city of Santander to monitor environment pollution (air quality, noise
    levels and luminosity levels), outdoor parking, and automated irrigation systems.
    The architecture implemented presents three layers: IoT nodes, Gateways, and Server.
    Here the Server is the centralized data collector which offers services. Although
    the Smart City presents a very large case study, the centralized and not really
    structured architecture can provide some extensibility/maintenance problems. Moreover,
    here the data elaboration on the distributed nodes, with all the benefits that
    it can provide, is limited. The work in [28] introduces Sentilo, which is an open
    source IoT platform designed to manage sensors and actuators in the Smart Cities.
    Authors claim that Sentilo can be used for any city looking for openness and easy
    interoperability. Such platform uses Cloud Computing and Big Data tools to collect,
    store, and elaborate data from distributed sensors so providing Smart City extensibility.
    It has been sponsored by the Barcelona City Council and, after the deployment
    in Spain, its code has been released as open source. A drawback of such platform
    is the lack of computing on the edge of the platform to locally analyze the data
    from the city. Authors of [29] introduce an IoT middleware that has been implemented
    in the context of the EPIC (European Platform for Intelligent Cities) project.
    The proposed middleware has been designed to address in Smart Cities the issues
    regarding heterogeneity, interoperability, extensibility, and (re)configurability.
    Even though such middleware tackles important issues for Smart Cities, it does
    not consider (as many platforms in this area) the design of decentralized pre-processing
    components for computing and aggregating data on the edge. In [30], [31] a Smart
    City platform based on Big Data analysis to achieve extensibility is introduced.
    The proposed architecture provides three layers that have been implemented to
    (i) collect, analyze, and filter data; (ii) aggregate data to infer knowledge;
    (iii) provide users with an interface to gather elaborated data. Although very
    useful, such platform does not provide a low layer allowing the gathering of data
    from sensors distributed in a Smart City, so it needs to be built over another
    middleware that allows the sensors (actuators) management. Given the above analysis
    of the state of the art, it emerges the lack of a distributed platform and design
    guidelines for the comprehensive and systematic realization of reactive, fault
    tolerant, and extensible Smart City applications. To address such issues, this
    paper presents iSapiens as an agent-based platform providing useful features for
    designing and implementing distributed cyber–physical systems and smart environments.
    3. iSapiens: a platform for Smart Cities iSapiens is an agent-based platform providing
    useful features for designing and implementing distributed cyber–physical systems
    [3], [32], [33] and smart environments [18], [34], [35], [36], [37] whose functionalities
    are realized by exploiting edge computing [15], internet of things [10], [38]
    and out-of-the-edge computing services. Such systems are characterized by the
    combined exploitation of software components with heterogeneous physical devices
    and protocols, so as to furnish final users with high level services and/or to
    enhance the behaviors of a specific environment. In the following subsections
    a description of the iSapiens platform is provided together with an introduction
    to the issues related to the design of smart city applications. 3.1. The iSapiens
    platform The iSapiens platform (see Fig. 1) relies on two main abstractions: Virtual
    Objects (VOs) and Agents. VOs are used to abstract and manage physical objects,
    hiding the heterogeneity of devices and protocols, and complying with the Internet
    of Things vision. Services and enhanced behaviors are obtained by exploiting software
    agents which execute in computational nodes close to the physical devices they
    have to control, thus implementing edge computation and enabling online analytics.
    To offer final services, agents can also exploit out-of-the-edge services, both
    developed for a specific application or third party provided. Such services can
    include offline analytics, such as predictive analysis, machine learning, and
    data mining or services requiring a centralized view of the whole system. From
    an architectural point of view, the platform is mainly composed by an in-network
    computing layer and a virtualization layer. The former contains the Agent Server
    that provides the runtime support for the agents execution. The latter consists
    of the Virtual Object Containers which allow the management of VOs. The agent
    server and the virtual object container together constitute an iSapiens server.
    An iSapiens server is allocated for execution on a dedicated computational node.
    The iSapiens platform allows the realization of distributed applications consisting
    of a set of interacting agents running on a set of computational nodes. Such nodes
    are scattered in the environment which has to be controlled or enhanced. All the
    computing nodes are supplied with a set of devices, such as sensors, actuators
    or other more complex (smart) objects. The virtual object container of a given
    node hosts all the VOs abstracting the devices directly connected to the node.
    The agents running in a node can exploit all the functionalities offered by the
    local VOs. Each component, either a device, a VO, an agent, or a whole computing
    node can be dynamically removed from, added into or updated to a running system.
    This important feature fosters application scalability and extendibility. All
    together, the iSapiens servers, that are hosted in the computing nodes deployed
    in the network, constitute the distributed iSapiens middleware. The current implementation
    of iSapiens relies on the Java technology. iSapiens also allows the exploitation
    of an off-network computing layer that offers Cloud/Internet computing services
    which are required for the implementation of resource-demanding tasks (both in
    terms of computation and memory), and for the implementation of those tasks requiring
    a comprehensive view of the deployed system. Such layer comprehends three different
    kind of services: third-party provided services, custom developed services and
    agent-based services developed by using iSapiens agents. The third-party services
    and the custom services are not tied to the use of any specific technology. In
    the following, we further describe the main features of VOs and agents, and how
    they are deployed on computational nodes hosting iSapiens servers. Download :
    Download high-res image (362KB) Download : Download full-size image Fig. 1. iSapiens
    platform layers. 3.1.1. Virtual object features VOs are the key elements to provide
    the developers with an effective tool for managing devices heterogeneity and fostering
    hardware maintenance. In fact, VOs provide to agents a transparent access to the
    physical part due to a well-established and common interface exposed as API. A
    VO allows agents to directly connect to a device without taking care about proprietary
    drivers or addressing fine-grained technological issues. The goal is to decouple,
    from a sensing/actuation point of view, functionalities from the equipment offering
    them. A change in the physical devices (e.g., for maintenance) and in the adopted
    communication protocols will affect virtual objects only. The VOs are managed
    by the Virtual Object Container, which permits the dynamic deployment of new VOs,
    and exposes them to the agent layer. The VOs support both asynchronous and synchronous
    data reading. The asynchronous method relies on an implementation of the publish/subscribe
    pattern. Essentially, a VO exposes an abstract representation (i.e., machine readable-description)
    of the features and capabilities of physical objects spread in the environment.
    Features of the physical devices are exported into the iSapiens platform as virtual
    object functionalities related to both the sensing and actuation activities. For
    instance, the VO associated to a smart door will expose the isOpened functionality,
    through which an agent can check the current status of the door, and the lock
    functionality for locking the door if needed. 3.1.2. Agent services and features
    An Agent [21] is an autonomous entity which runs in an Agent Server and executes
    its own behavior interacting with other (local or remote) agents. An agent is
    able to exploit all the functionalities exposed by the VOs hosted in the same
    iSapiens server where the agent executes. An Agent Server provides services for
    the support of the agent life cycle and allows dynamic creation of agents at runtime.
    Communication among agents relies on the exchange of asynchronous messages. Messages
    can be timed or untimed. Timed messages are augmented with a time information
    specifying the absolute time in which the message has to be actually delivered
    to the recipient agent. The iSapiens platform provides acquaintance message s
    which are used for establishing direct acquaintance relationship among agents.
    An acquaintance message carries information about the identity and the role of
    a given agent. Such messages can be used to dynamically (re)configure the agents
    relations after faults or when new agents are introduced/removed into/from the
    system, e.g., due to maintenance and extensions. A distributed yellow pages service
    is also provided to dynamically discover agents in order to establish acquaintance
    relationships. An agent can register itself to the yellow pages by providing a
    set of roles and a set of properties (i.e., a set of couples). A registered agent
    can be discovered by other interested agents by querying the yellow pages. 3.1.3.
    Application deployment Given a running set of iSapiens servers, the deployment
    of an application is carried out by using a Deployer entity. Such entity can dynamically
    create new agents and VO on a target server. Moreover, it can establish acquaintance
    relationships among agents and/or send application-dependent configuration messages.
    The Deployer is an external process executing outside the iSapiens servers network.
    It can operate also on a running agent-based application in order, e.g., to introduce
    new functionalities in the system. 3.2. Exploiting the iSapiens platform: design
    guidelines This section describes a set of design guidelines aiming at supporting
    the development of applications by using the iSapiens platform. An important goal
    is to promote both the separation of concerns and the modularity. The proposed
    guidelines mainly rely on the exploitation of abstraction layers, and specific
    agent roles as depicted in Fig. 2. In each layer it is possible to focus on specific
    issues having a different level of abstraction. The layer-based approach is usable
    both in a top-down and bottom-up software development schema. A top-down approach
    is suggested when an application is developed from scratch, while a bottom-up
    approach is typically used when an application is built on top of some pre-existing
    components. A description of the introduced abstraction layers is reported below.
    Download : Download high-res image (288KB) Download : Download full-size image
    Fig. 2. Design guidelines: abstraction layers vs. agent roles. Raw Data layer
    : it manages raw data directly related to physical quantities (e.g., distances,
    noise, temperature) both for sensing and actuation purposes. The managed data
    are not processed. Information layer : data coming from the previous layer can
    be filtered, structured and aggregated. This layer aims at organizing data in
    order to derive further information about the controlled system, or to produce
    synthetic data allowing a more convenient way to reason about the system. Knowledge
    layer : actuations to be performed, and/or environmental stimuli, are mapped onto
    more abstract concepts. The goal is to allow reasoning by using abstract concepts
    which are directly related to the specific domain (or context) of the application
    being developed. For instance, it is possible to introduce the concept of climatic
    health which depends on the value of the temperature and humidity actually existing
    in a given environment. Similarly, the concept of office security can be introduced
    in order to control a door office and make it alarmed after a certain hour. Wisdom
    layer : it permits to operate and reason at the highest abstraction level. Here,
    we have an holistic vision of all the concepts which are related to the developed
    application, and which govern the implemented system. The concepts previously
    introduced (or a subset of them) are orchestrated in order to pursue application
    goals. Gathered information and concepts can be complemented in order to augment
    system knowledge and to exploit such knowledge in order to operate upon the controlled
    system. For instance, if an application for managing safety at home is considered,
    information indicating that a person is found lying in the bathroom can be complemented
    in order to infer the concept afflicted by a malaise which can cause the concept
    of providing first aids to take place. Each layer is populated by agents having
    different roles. A role defines the responsibilities [39] an agent has in the
    system. The ellipses drawn in Fig. 2 associate the agent roles with the abstraction
    layers they are related to. Five agent roles were identified, and their description
    is provided in the following. Mirror agents : they are boundary entities turning
    VO functionalities into location-independent functionalities offered by agents,
    and must be co-located on the computational node hosting the VOs they have to
    interact. They do not introduce/modify new/existing VO functionalities thence
    they belong to the Raw data layer. Mirror agents mediate the use of the wrapped
    functionalities by enforcing, for instance, negotiation procedures and/or access
    policies useful for guaranteeing an exclusive use, or a time-based use, of the
    wrapped device. Boundary agents : they mediate the interactions between iSapiens
    agents and external service providers so as favoring system integration among
    iSapiens and third-party platforms. For instance, agents providing a weather-forecast
    functionality by using Internet-based services will have the Boundary role. Since
    external services can operate at different abstraction levels, boundary agents
    can belong to layers ranging from Raw data to Knowledge. Infrastructural agents
    : they offer general-purpose functionalities which are not tied to a specific
    application. For instance, these agents provide services managing information
    persistence (e.g., data storage in a DBMS) or services for the broadcast notification
    of events-of-interest. Infrastructural agents can belong to the abstraction levels
    ranging from Information to Knowledge. Operational agents : they offer functionalities
    tied to a specific application. Such functionalities can be achieved by composing
    and/or orchestrating functionalities offered by other agents. Operational agents
    can belong to the abstraction levels ranging from Information to Knowledge. In
    order to favor extensibility (both functional and geographical), fault tolerance
    and maintenance of the applications to develop, it is suggested the use of peer-to-peer/decentralized
    and bio-inspired algorithms, which are naturally fostered by the edge computing
    and agent paradigm. Service agents : they offer the final services exposed to
    the users according to the application goals. Such agents belong to the abstraction
    levels ranging from Knowledge to Wisdom. Usually, offered services are obtained
    by composition/coordination of the agents having other roles. 3.3. iSapiens for
    Smart City: features and benefits The features of the iSapiens platform (Section
    3.1), paired with the set of guidelines previously introduced (Section 3.2), produce
    some useful side-benefits, explotable for the realization of smart city applications,
    which are highlighted in the following. System maintenance is favored as VOs,
    agent roles, and abstraction layers introduce modularity and separation of concerns
    in the developed application. When a modification of a software function is needed,
    only the specific components dealing with such functionality are required to be
    selectively updated. VOs permits an easy hardware replacement as they maintain
    the same interface independently of the managed device. The supported dynamic
    deployment mechanism facilitates the actualization of the maintenance operations
    on the system. With respect to a node crash, fault tolerance is primarily fostered
    by the proper combination of the edge computing paradigm and use of P2P or Decentralized
    algorithms suggested for the implementation of the main operations of the system.
    Thus, a crash of a node does not impair the whole system execution. Heterogeneity
    and integration issues, either at device and system level, are tackled by the
    exploitation of VOs and Boundary Agents, as described in the previous sections.
    Functional extensibility is supported as it is possible to (i) composing pre-existing
    functionalities, (ii) exploiting in different ways the existing devices, and (iii)
    adding new devices for providing new services. This benefit arises as the platform
    permits to dynamically add/remove agents and VOs to/from the system. The geographical
    extensibility is achieved as the platform supports the dynamical addition of both
    computational nodes and related sensor/actuator devices on new areas of interest
    which have to be covered. As the newly added computational node is running, together
    with VOs, the new agents deployed on the node can join the rest of the community
    by exploiting the Yellow Pages service and the acquaintance messages. The exploitation
    of the edge computing paradigm makes the network of iSapiens nodes a distributed
    computational platform which is capable of furnishing a pervasive computational
    power which is exploitable for the realization of complex distributed smart-city
    services. More in particular, the edge computing supports online analytics, which
    consists in a continuous elaboration on the stream of data coming from sources.
    All of this promotes reactivity and efficiency in terms of bandwidth consumption.
    When the computation is resource demanding or it cannot be realized solely on
    the edge, an offline analysis can be carried out by exploiting the cloud computing.
    Table 1 provides a comprehensive view of the main features and benefits tied to
    the use of the iSapiens platform. Table 1. The iSapiens platform: Benefits vs
    features. 4. Design and implementation of the Smart Street Cosenza This section
    describes the design and implementation of a real case study which is realized
    by using the iSapiens platform. Such case study is the Smart Street that has been
    developed in the town of Cosenza (Italy). The purpose of the implemented smart
    street is to offer a set of services aiming at improving the quality-of-life of
    the citizens and favoring the interactions between the citizens themselves and
    the offered services. The realized Smart Street Cosenza (SSC), furthermore, offers
    an infrastructure which is scalable and extensible both to the whole town and
    with new functionalities. In the following, the location of the SSC is presented,
    along with a detailed description of the offered services, the architecture of
    the realized infrastructure (hardware/software), its evolution, and the Smart
    Street itself at work. 4.1. Location and functionalities of the Smart Street The
    Smart Street has been developed in Cosenza, which is a town of Calabria, Southern
    Italy. The town per se has a population of around 70,000, while its urban area
    counts over 268,000 inhabitants. SSC extends for about 2.5 km, and covers the
    following adjacent target areas (see Fig. 3): Corso Mazzini, the main business
    street of the town; a bus station, located in Via Delle Medaglie D’Oro; the square
    named Piazza Bilotti; the area around a mall, located in Piazza Giacomo Mancini;
    part of one of the main road of Cosenza, named Viale Giacomo Mancini. Corso Mazzini
    is a pedestrian street which hosts a set of shops, restaurants, cafés, banks,
    other commercial activities and an open air museum. The bus station is the main
    node of the town public transportation system and is mainly frequented in the
    working hours. Piazza Bilotti is currently under construction and will host a
    parking area. The area around the mall in Piazza Giacomo Mancini is highly frequented,
    and, together with the adjacent Viale Giacomo Mancini, is car accessible and is
    an high-traffic area. The mall itself hosts an underground parking area. Download
    : Download high-res image (442KB) Download : Download full-size image Fig. 3.
    The Smart Street target areas: (A) Bus Station, (B) Piazza Bilotti, (C) Corso
    Mazzini, (D) Viale Giacomo Mancini, (E) Piazza Giacomo Mancini. Due to the nature
    of the chosen locations, which are highly frequented by pedestrians, a set of
    services for making aware the citizens and the administrators about the status
    of the areas, in terms of pollutant gases, noise and climatic comfort are given.
    These kinds of services can be useful to the administrators for taking countermeasures
    so as to mitigate potential health risks and laws infringements,7 and to the citizens,
    which can use them to avoid unsafe situations, e.g., an elder person subject to
    heart related illness can avoid areas with a prohibitive climatic status. As the
    SSC is extensible by design (see Section 3.2), other services can be straightforward
    added. For instance, services for parking support in the areas around the mall
    and the bus station, efficient management of street lights, traffic control system,
    automation for green area management, public transportation information can be
    implemented. Moreover, all these services, once developed for a prototypal Smart
    Street using the iSapiens platform, can be easily deployed on other areas of the
    town. In addition, all the implemented services can be integrated, improved, or
    replaced. 4.2. Smart Street Cosenza design As stated in the previous section,
    the set of services designed to be part of SSC concerns climate, noise and pollution
    assessment so as to make aware of such environmental condition both citizens and
    town administrators. Environmental assessment requires the deployment of sensors
    which measure environmental, climate and pollutant quantities as indicated in
    Table 2. To achieve the stated goal, a set of Smart Street functionalities has
    been identified and a set of agents has been designed (see Table 3) to provide
    such functionalities. The designed agents are grouped according to the roles described
    in Section 3.2. Table 2. Main sensors used for the Smart Street Cosenza divided
    by category. Category Sensor type Climate Temperature, Atmospheric Pressure, Humidity
    Pollution CO, , , Concentration Other Noise, Luminosity A set of agents having
    the Mirror role is devoted to abstract the physical sensors so as to mirror the
    VOs as agents. A specific Mirror agent is designed for each kind of sensor identified
    in Table 2. The raw data exposed by the Mirror agents are sent to the group of
    the Measure Aggregation agents, having the Operational role. The Measure Aggregation
    agents make computation on the data coming from the Mirror agents and provide
    value-added data aggregation. There exists a specific instance of a Measure Aggregation
    agent for each Mirror agent. Given a specific sensor type (e.g., temperature,
    humidity), a Measure Aggregation agent provides all the capabilities of its associated
    Mirror agent plus the global average and the global standard deviation of the
    specific sensor type computed in real-time on the whole network. The two operations
    are computed by exploiting the gossip-based aggregation algorithm proposed in
    [40]. Table 3. Agents implementing the Smart Street Cosenza. Agent Role Agent
    Classes Empty Cell Mirror SensorTemperature, SensorPressure, SensorHumidity, SensorLuminosity,
    SensorNoise, SensorCO, SensorCO2, SensorNO2, SensorO3 Infrastructural Persistence,
    Notification Operational Measure Aggregation Service Environmental Wellness, Climatic
    Wellness, Anomaly Detection More in particular, the subset of Measure Aggregation
    agents, which are tied to the same sensor type, cooperates in the global average/standard
    deviation computation. When the gossip-based algorithm ends, all the cooperating
    agents become aware of the global computed result. In order to compute the average,
    each agent maintains its current measured value and its local average (initially
    set to the measured value). The algorithm consists in the continuous exchange
    of local averages among neighbor agents (i.e., the agents located in the same
    computing node or the node’s neighborhood). Each time an agent receives the average
    from one of its neighbors, it updates its local average (just applying the average
    operator). Value exchanges and local computations are continuously done for an
    enough number of step s set so as to ensure that each local average, computed
    by every involved agent, converges to the actual global average (the algorithm
    convergence is proved in [40]). Given the global mean, the global standard deviation
    is computed similarly, by evaluating the average of the squared deviation from
    the mean of the local measures. This gossip-based strategy has been chosen as
    it is fully scalable, decentralized, and fault tolerant. Besides the Mirror and
    the Operational agents, two kinds of Service agent, namely the Wellness and the
    Anomaly Detection agents, have been designed and developed. Each of them furnishes
    a specific service so as to meet the stated goals of the SSC and exploits the
    functionalities offered by the Mirror and the Operational agents. In particular,
    the Wellness agents provide high level information about the pollution and climatic
    status of the SSC in different areas. Climatic wellness is provided as comfort
    levels, computed through the exploitation of the Summer Simmer Index8 and the
    Humidex9 index, both involving temperature and humidity measurements. The categories
    of the found comfort level in a specific area range from “no discomfort” to “dangerous”.
    Environmental pollution wellness relies on the gases concentration sensors (see
    Table 2), and exploits the Air Quality Index.10 In this case, the categories range
    from “good” to “hazardous”. The Anomaly Detection agents are devoted instead to
    detect possible anomalies related to the environmental condition. There exists
    one Anomaly Detection agent for each noise sensor (i.e., related Mirror Agent)
    on the SSC. Two kinds of anomalies, namely area anomalies and historic anomalies,
    can be detected by the Anomaly Detection agents. At first, an Anomaly Detection
    agent notifies the occurrence of an area anomaly by exploiting the global average
    and standard deviation computed by the set of Measure Aggregation agents. The
    average and the standard deviation are exploited to fully characterize a Gamma
    Probabilistic Distribution, and an anomaly is detected when the value of the specific
    sensor associated to the Anomaly Detection agent is higher than the 99th percentile
    of the characterized Gamma function. In this case, the global average information
    combined with the local measures are exploited to discover if some areas of the
    SSC behave differently with respect to the whole. Secondly, each Anomaly Detection
    agent can detect historic anomalies as follows. A day is divided into 144 time
    slots, each of them corresponding to a 10 min time interval. For each time slot,
    the Anomaly Detection agent maintains a couple computed on all the sensor values
    so far read in the same time slot. When a new sensor value is read, it is compared
    with the 99th percentile of the Gamma distribution characterized by the couple
    of the corresponding time slot, and, if it is greater than such threshold, an
    event of interest is generated and notified. After that, the related couple is
    incrementally updated computing the exponential weighted moving average and variance
    (EWMA) according to [41]. The Infrastructural agents are devoted to provide functionalities
    that are potentially useful for all the agents above described. In particular,
    a set of off-network services are provided by a purposely-developed service provider,
    named Smart Street Server. The Smart Street Server is hosted in a data center
    located outside the edge computing node network (i.e., the nodes hosting the sensors).
    The server receives data from in-network agents (i.e., Infrastructural agents),
    and manages the persistence by using a local DBMS. The stored data are made available
    to the final users through a web application. Two kinds of Infrastructure agents
    have been designed, namely the Persistence and Notification agents. Both the kinds
    of agents forward the information they receive to the application server for storage
    on the DBMS. The data forwarded by the Notification agents are immediately made
    available for visualization to the connected clients. A comprehensive architectural
    view of the system is shown in Fig. 4. The figure highlights the interactions
    among agents, VOs, and the Smart Street Server. Communications among entities
    are graphically represented by thin links. The agents are grouped by type for
    the sake of readability, and the communications among the Measure Aggregation
    agents based on gossiping are highlighted through the tag. Download : Download
    high-res image (559KB) Download : Download full-size image Fig. 4. Architectural
    view of the Smart Street Cosenza. 4.3. Operational steps for system deployment
    Fig. 4 highlights also how the components are dislocated on the computational
    nodes and the interactions occurring among them. The steps involved in the life
    of a generic component of the SSC, either hardware or software, are depicted in
    Fig. 5. Such steps are numbered from S1 to S4 and, for each of them, are also
    reported the iSapiens features used for their realization. Every component enters
    into the system through a deployment step (S1), and then it is initialized and
    becomes ready to work (S2). After that, the connections among interacting agents
    are established (S3) and, in the case of the gossip-based agents, a renewal of
    the acquaintance relationships (S4) is continuously carried out. In the initialization
    step, there is no specific iSapiens feature to exploit, but each component requires
    to be initialized through a specific configuration procedure. More in particular,
    the deployment of the agents and VOs over each computational node is obtained
    through the use of the dynamic deploying mechanism offered by the platform. The
    acquaintance relationships among the agents are established instead by using the
    Yellow Pages service and the acquaintance messages. With reference to Fig. 4,
    all the communication links among agents, that are not labeled with the tag, are
    established by sending proper acquaintance messages to the communicating agents.
    As an example, after the deployment and initialization of a new Wellness agent,
    a set of acquaintance messages are sent to it providing the knowledge of the Persistence
    agent, the Notification agent, and the relevant Measure Aggregation agents that
    the Wellness agent needs to know in order to behave properly. Instead, after the
    initialization of an agent involved in a gossip-based communication, the agent
    registers itself in the Yellow Pages and uses it to choose its neighborhood according
    to the gossip-based protocol. The neighborhood is renewed with a prefixed frequency
    (chosen during configuration) in step S4. This allows to implicitly handle the
    case in which Measure Aggregation agents dynamically enter or leave the system,
    as after a node crash or a new node joins the system. Each communication link
    without agents as endpoints is established during the component initialization
    as configuration info. From Fig. 4 emerges also that, by design, all the computing
    nodes are functionally equivalent, in the sense that there is no centralized functionality
    (with, obviously, the exception of the Smart Street Server). This last feature,
    together with the use of the gossip-based protocol, the acquaintance renewal policy
    and the dynamic deployment capability, makes the system able to meet fault-tolerance,
    scalability and extendibility requirements. Download : Download high-res image
    (234KB) Download : Download full-size image Fig. 5. Operational steps for components
    installation and execution. 4.4. Smart Street Cosenza implementation The realization
    of the SSC as it is today, has been done in an incremental way, both from a geographical
    and functional points of view, as successive incremental stages. The four incremental
    stages are described in Table 4, where, for each stage, the newly installed components,
    along with the interested city areas (as in Fig. 3) and a description of the performed
    actions (as in Fig. 5) is portrayed. In the table, the deployment of the Smart
    Street Server is not highlighted as it has been deployed and configured once,
    before the first stage. The SSC as it is in its current version, is constituted
    by a network of 15 computational nodes, interconnected through a dedicated Wi-Fi
    mesh network (IEEE 802.11n), directly deployed on the targeted areas (see Fig.
    6, Fig. 6(a)). Each computational node is constituted by a low cost Raspberry
    Pi 2 model B board,11 embedding a 900MHz quad-core ARM Cortex-A7 CPU and 1GB of
    RAM, and mounting an USB Wi-Fi dongle for networking purposes. Each Raspberry
    Pi is properly enveloped in an IP64 weather resistant case and main powered, using
    the power infrastructure of the town. From a software perspective, each computational
    node runs Raspbian, a Linux distribution developed for Raspberry Pi and based
    on Debian 7.0, the Oracle Java Runtime Environment version 8, and the iSapiens
    middleware. Table 4. Deployment stages descriptions of the Smart Street Cosenza.
    Deployment stage Installed components Involved areas Stage description and correlation
    with the operational steps #1 Climatic Monitor on an initial area - iSapiens nodes;-
    sensor nodes for climatic monitoring;- VOs for the deployed sensor nodes;- related
    Mirror, Notification and Persistence agents;- related Aggregation agents. - Piazza
    Giacomo Mancini- Viale Giacomo Mancini The iSapiens nodes were installed (S1)
    and configured (S2) on the covered area. The sensor nodes were installed (S1)
    and the related VOs were deployed (S1, S2) on the iSapiens nodes. Finally, the
    agents for climatic monitoring were deployed (S1) and configured (S2). Direct
    knowledge between agents is achieved by using acquaintances (S3). The Aggregation
    agents started to exploit the neighbor renewal policy (S4). #2 Area coverage extension
    - iSapiens nodes;- sensor nodes for climatic monitoring;- VOs for the newly deployed
    sensor nodes;- related Mirror, Notification and Persistence agents;- related Aggregation
    agents. - Corso Mazzini- Piazza Bilotti- Bus Station The iSapiens computational
    nodes were installed (S1) and configured (S2) on the new areas. The sensor nodes
    were installed (S1, S2) and the related VOs were deployed (S1, S2) on the newly
    iSapiens nodes, without affecting the already operating infrastructure. The agents
    for climatic monitor were deployed (S1) and configured (S2), acquaintances were
    given as in the previous step (S3). The gossip based renewal policy took into
    account the newly added Aggregation Agents (S4). #3 Environmental pollution monitoring
    addition - sensor nodes for environmental pollution monitoring;- VOs for the newly
    deployed sensor nodes;- related Mirror, Notification and Persistence agents;-
    related Aggregation agents. - Viale Giacomo Mancini- Corso Giacomo Mancini- Corso
    Mazzini- Piazza Bilotti- Bus Station New sensor nodes for environmental pollutant
    monitoring were installed on all the areas (S1, S2). The related VOs were deployed
    on the related iSapiens nodes (S1, S2), without affecting the already operating
    infrastructure. The agents for pollution monitoring were deployed (S1) and configured
    (S2) on the affected iSapiens nodes, acquaintances were given as in stage #1 (S3),
    neighbor renewal behavior started for the added Aggregation agents (S4). #4 Anomaly
    Detection and Climatic Wellness management. - Agents for climatic wellness and
    anomaly detection. - Piazza Giacomo Mancini - Viale Giacomo Mancini- Corso Mazzini-
    Piazza Bilotti- Bus Station The agents for realizing the climatic wellness management
    and anomaly detection were deployed (S1) and configured (S2), acquaintances were
    established among both the previously-available and the newly-added agents (S3).
    All of this without affecting the already running infrastructure. With respect
    to the climatic and pollution comfort services, two sets of sensor nodes are deployed
    on the involved streets. The first one (type A) is composed by nodes hosting sensors
    for measuring temperature, humidity, luminosity and noise level. The second one
    (type B) is composed by nodes hosting sensors for measuring atmospheric pressure
    and the concentration of pollutant gases such as carbon dioxide ( ), carbon monoxide
    (CO), nitrogen dioxide ( ) and ozone ( ). Each sensor node is managed by its nearest
    computational node, and linked with it through the same Wi-Fi network. All the
    sensor nodes are powered by batteries, which are recharged “on site” by using
    solar panels. Solar panels have been used so as to have no need to modify the
    electric delivery infrastructure of the town for the deployment of the sensor
    nodes. The nodes are Libelium Waspmote Plug&sense,12 which are sensor nodes compatible
    with the Arduino platform, enclosed in an IP64 box. The air pollutant sensors
    are protected by a shield, which mitigates the effects of wind and direct sunlight
    exposition on the precision of the measurements. About 70 sensor nodes have been
    already deployed on the Smart Street areas, as in Fig. 6b. Fig. 7 shows a set
    of them deployed on street lights and walls. The maps in Fig. 6(a), Fig. 6(b)
    show, respectively, the position of the deployed computational and sensor nodes,
    which are denser in the areas where people activities is mainly carried out. Each
    computational node controls a portion of the SSC. The Smart Street Server runs
    on a Linux based server, located at the ICAR-CNR institute, Rende, Italy. The
    same server hosts a JBoss application server, which runs the Smart Street web
    application, and an instance of the MySQL DBMS, which is used for storage purposes.
    The web application can provide information about both the current and historical
    statuses of the SSC. Two screenshots of the web interface are shown in Fig. 8,
    which depicts the map view, showing the global status of the smart street in a
    given time, and the chart view, showing an historical chart of the measures of
    a given sensor in a given time interval. The SSC is running since early 2016.
    Download : Download high-res image (289KB) Download : Download full-size image
    Fig. 6(a). Download : Download high-res image (302KB) Download : Download full-size
    image Fig. 6(b). Fig. 6. Smart Street Cosenza. (a) Computational Nodes; (b) Sensors
    nodes. Green locations host one type A node and one type B node, blue locations
    hosts only a type A node. (For interpretation of the references to color in this
    figure legend, the reader is referred to the web version of this article.) Download
    : Download high-res image (210KB) Download : Download full-size image Fig. 7(a).
    Download : Download high-res image (232KB) Download : Download full-size image
    Fig. 7(b). Download : Download high-res image (203KB) Download : Download full-size
    image Fig. 7(c). Fig. 7. Deployed sensor nodes on the Smart Street Cosenza. Download
    : Download high-res image (239KB) Download : Download full-size image Fig. 8(a).
    Download : Download high-res image (192KB) Download : Download full-size image
    Fig. 8(b). Fig. 8. Two views of the web interface showing (a) the noise map of
    the Smart Street in a given moment and (b) the historical graph of the measures
    of a relative humidity sensor. 4.5. Smart Street Cosenza: Wellness and anomaly
    detection In this section, a set of charts related to the behavior of the Wellness
    agents and the Anomaly Detection agents are provided, so as to prove the usefulness
    of the deployed SSC. Fig. 9, Fig. 9(a), Fig. 9(b) show the values, respectively,
    of the Humidex and the Simmer Summer Index as computed by the Climatic Wellness
    agent tied to the Sensor Node 040, located at the beginning of Corso Mazzini,
    on July, 7th 2016. It was a summer day, where, as shown in the charts, the comfort
    levels provided by both the indexes result to be very low in the afternoon, so
    the population in that time could be informed accordingly of avoiding the area.
    In fact, the Climatic Wellness agent notified (through the Notification agent)
    the Smart Street Server of the detected dangerous situation. In Fig. 10, Fig.
    10(a) are shown: (i) the global noise averages (averages on all the gathered noise
    sensor values at a given timestamp) computed in real-time by the Measure Aggregation
    agents, (ii) the 99th percentile of the Gamma function (characterized by the average
    and the standard deviation computed by the same Measure Aggregation agents), the
    max sensed noise value for each timestamp, and the area anomaly alerts generated
    by the Anomaly Detection agents as explained in Section 4.2. All the trend lines
    are related to the first week of June, 2016. Since the high values sensed, particular
    interest is given by the area anomalies detected in the evening of June, 3rd where
    the alerts have been generated by the Anomaly Detection agent related to the noise
    sensor at the node 013, located at the center of Corso Mazzini. The same agent
    has also detected, in the same evening, a set of historic anomalies (see Fig.
    10b). In this situation, the agent has notified the Smart Street Server with two
    different alerts, highlighting a situation of high-interest which has to be checked
    by the SSC administrators. As truth assessment, we verified that, in the evening
    of June, 3rd in the place near the sensor node 013 an election rally was taken.
    Download : Download high-res image (142KB) Download : Download full-size image
    Fig. 9(a). Download : Download high-res image (156KB) Download : Download full-size
    image Fig. 9(b). Fig. 9. Smart Street Cosenza: Humidex (a) and SSI (b) trend chart
    of the sensor Node 040 on the July, 7th 2016. Download : Download high-res image
    (367KB) Download : Download full-size image Fig. 10(a). Download : Download high-res
    image (232KB) Download : Download full-size image Fig. 10(b). Fig. 10. Excerpt
    of data gathered from the Smart Street Cosenza: (a) Global Average Noise (dB)
    trend and area anomaly detections on the June, 1–7th 2016; (b) Noise (dB) trend
    and historic anomaly detections of the Sensor013 on the June, 3rd 2016. 5. Conclusions
    and future work In this paper we proposed the iSapiens edge-based platform as
    an effective IoT tool for the implementation of distributed Smart City applications.
    Edge computing is implemented by using the agent metaphor natively supported by
    iSapiens. The platform is able to hide the heterogeneity of the involved physical
    devices and protocols. A set of design guidelines were also proposed. Such guidelines
    support an effective exploitation of the offered iSapiens features and allow to
    reach useful benefits in developing Smart City services such as system extensibility,
    fault tolerance, integration of systems, and system maintenance. The resultant
    approach, based on the exploitation of both the iSapiens platform and the proposed
    design guidelines, was validated by the design and the implementation of a real
    case study, namely the Smart Street Cosenza (SSC). The SSC, deployed in the town
    of Cosenza (Italy), has the goal of providing decentralized urban intelligence
    services to citizens. In particular, the working system is able to furnish services
    which are related to climatic and environmental wellness, and to the detection
    of anomalies that may occur in the covered city area. The incremental evolution
    of SSC was discussed, showing, in particular, how the functional and geographical
    extensibility were effectively supported. Finally, an excerpt of the collected
    data and an example of the data analysis carried out by the deployed agents were
    shown. Future work is geared at: extending the SSC by covering new urban areas
    and by adding new services. More in particular, as an example of in-network services,
    a service for urban drainage network optimization is currently under development
    [3], [42] and a traffic control system is planned to be designed. Other services
    under development regard the use of data stream mining algorithms for real-time
    analysis, previsioning and mining on the SSC data; including in iSapiens a library
    of ready-to-use, general-purpose Infrastructural and Operational agents which,
    relying on bio-inspired and peer-to-peer algorithms, simplify the implementation
    of custom applications; integrating iSapiens with the Social Internet of Things
    platform [43], [44], [45], in order to provide social capabilities to objects
    and smart devices exploitable in smart city applications; using the proposed approach
    for developing other smart cyber–physical systems, such as Smart Homes, Smart
    Offices, and Smart Factories. Acknowledgments The authors are grateful to Antonio
    Francesco Gentile, Luigi Porto, and Davide Macrí for their valuable contributions
    to the development and deployment of the presented use case. The authors are also
    grateful to the administrators of the town of Cosenza for their support in the
    realization of the Smart Street. This work has been partially supported by RES-NOVAE
    - “Buildings, roads, networks, new virtuous targets for the Environment and Energy”
    project, funded by the Italian Government (PON 04a2_E) and by “Smart platform
    for monitoring and management of in-home security and safety of people and structures”
    project that is part of the DOMUS District, funded by the Italian Government (PON03PE_00050_1).
    References [1] Kunzmann K.R. Smart Cities: A New Paradigm of Urban Development
    Crios (1) (2014), pp. 9-20, 10.7373/77140 Google Scholar [2] Stolfi D.H., Alba
    E. Red swarm: Reducing travel times in smart cities by using bio-inspired algorithms
    Appl. Soft Comput., 24 (2014), pp. 181-195, 10.1016/j.asoc.2014.07.014 View PDFView
    articleView in ScopusGoogle Scholar [3] Giordano A., Spezzano G., Vinci A., Garofalo
    G., Piro P. A cyber-physical system for distributed real-time control of urban
    drainage networks in smart cities Internet and Distributed Computing Systems -
    7th International Conference, IDCS 2014, Calabria, Italy, September 22–24, 2014,
    Proceedings (2014), pp. 87-98, 10.1007/978-3-319-11692-1_8 View in ScopusGoogle
    Scholar [4] Ceriotti M., Mottola L., Picco G.P., Murphy A.L., Guna S., Corra M.,
    Pozzi M., Zonta D., Zanon P. Monitoring heritage buildings with wireless sensor
    networks: The torre aquila deployment Proceedings of the 2009 International Conference
    on Information Processing in Sensor Networks, IPSN ’09, 978-1-4244-5108-1, IEEE
    Computer Society, Washington, DC, USA (2009), pp. 277-288 View in ScopusGoogle
    Scholar [5] Asimakopoulou E., Bessis N. Buildings and crowds: Forming smart cities
    for more effective disaster management Innovative Mobile and Internet Services
    in Ubiquitous Computing, IMIS, 2011 Fifth International Conference on (2011),
    pp. 229-234, 10.1109/IMIS.2011.129 View in ScopusGoogle Scholar [6] Fortino G.,
    Guerrieri A., O’Hare G.M.P., Ruzzelli A. A flexible building management framework
    based on wireless sensor and actuator networks J. Netw. Comput. Appl., 35 (2012),
    pp. 1934-1952, 10.1016/j.jnca.2012.07.016 View PDFView articleView in ScopusGoogle
    Scholar [7] Cesario E., Comito C., Talia D. Towards a Cloud-Based Framework for
    Urban Computing, The Trajectory Analysis Case 2013 International Conference on
    Cloud and Green Computing (2013), pp. 16-23, 10.1109/CGC.2013.11 View in ScopusGoogle
    Scholar [8] Zanella A., Bui N., Castellani A., Vangelista L., Zorzi M. Internet
    of Things for Smart Cities IEEE Internet of Things J., 1 (1) (2014), pp. 22-32,
    10.1109/JIOT.2014.2306328 Google Scholar [9] Murty R.N., Mainland G., Rose I.,
    Chowdhury A.R., Gosain A., Bers J., Welsh M. CitySense: An urban-scale wireless
    sensor network and testbed Technologies for Homeland Security, 2008 IEEE Conference
    on (2008), pp. 583-588, 10.1109/THS.2008.4534518 View in ScopusGoogle Scholar
    [10] Atzori L., Iera A., Morabito G. The internet of things: A survey Comput.
    Netw., 54 (15) (2010), pp. 2787-2805 View PDFView articleView in ScopusGoogle
    Scholar [11] Fortino G., Guerrieri A., Russo W. Agent-oriented smart objects development
    Computer Supported Cooperative Work in Design, CSCWD, 2012 IEEE 16th International
    Conference on (2012), pp. 907-912, 10.1109/CSCWD.2012.6221929 View in ScopusGoogle
    Scholar [12] Fortino G., Guerrieri A., Russo W., Savaglio C. Internet of things
    based on smart objects: Technology, middleware and applications Fortino G., Trunfio
    P. (Eds.), 978-3-319-00491-4, Springer International Publishing, Cham (2014),
    pp. 1-27, 10.1007/978-3-319-00491-4_1 View in ScopusGoogle Scholar [13] Cicirelli
    F., Fortino G., Guerrieri A., Spezzano G., Vinci A. Metamodeling of Smart Environments:
    from Design to Implementation, Advanced Engineering Informatics, ADVEI, Special
    Issue on Collaborative Systems (2017), 10.1016/j.aei.2016.11.005 Google Scholar
    [14] International standard - iso/iec 14764 ieee std 14764-2006 software engineering
    2013; software life cycle processes 2013; maintenance ISO/IEC 14764:2006 (E) IEEE
    Std 14764-2006 Revision of IEEE Std 1219-1998 (2006), pp. 1-46, 10.1109/IEEESTD.2006.235774
    [15] Garcia Lopez P., Montresor A., Epema D., Datta A., Higashino T., Iamnitchi
    A., Barcellos M., Felber P., Riviere E. Edge-centric computing: vision and challenges
    SIGCOMM Comput. Commun. Rev., 45 (5) (2015), pp. 37-42, 10.1145/2831347.2831354
    Google Scholar [16] Bonomi F., Milito R., Zhu J., Addepalli S. Fog computing and
    its role in the internet of things Proceedings of the First Edition of the MCC
    Workshop on Mobile Cloud Computing, ACM (2012), pp. 13-16 CrossRefGoogle Scholar
    [17] Yannuzzi M., van Lingen F., Jain A., Parellada O.L., Flores M.M., Carrera
    D., Prez J.L., Montero D., Chacin P., Corsaro A., Olive A. A new era for cities
    with fog computing IEEE Internet Comput., 21 (2) (2017), pp. 54-67 View in ScopusGoogle
    Scholar [18] Cicirelli F., Fortino G., Guerrieri A., Spezzano G., Vinci A. Edge
    enabled development of Smart Cyber-Physical Environments Proceedings of the 2016
    IEEE International Conference on Systems, Man, and Cybernetics, SMC 2016 (2016)
    Google Scholar [19] Jennings N.R. On agent-based software engineering Artif. Intell.,
    117 (2) (2000), pp. 277-296, 10.1016/S0004-3702(99)00107-1 View PDFView articleView
    in ScopusGoogle Scholar [20] Cicirelli F., Nigro L. Control centric framework
    for model continuity in time-dependent multi-agent systems Concurrency Comput.
    Pract. Exp., 28 (12) (2016), pp. 3333-3356, 10.1002/cpe.3802 View in ScopusGoogle
    Scholar [21] Wooldridge M. An Introduction to Multiagent Systems John Wiley &
    Sons (2009) Google Scholar [22] Cook D.J., Das S.K. How smart are our environments?
    An updated look at the state of the art Pervasive Mob. Comput., 3 (2) (2007),
    pp. 53-73, 10.1016/j.pmcj.2006.12.001 View PDFView articleView in ScopusGoogle
    Scholar [23] Gubbi J., Buyya R., Marusic S., Palaniswami M. Internet of Things
    (IoT): A vision, architectural elements, and future directions Future Gener. Comput.
    Syst., 29 (7) (2013), pp. 1645-1660, 10.1016/j.future.2013.01.010 View PDFView
    articleView in ScopusGoogle Scholar [24] Jin J., Gubbi J., Marusic S., Palaniswami
    M. An information framework for creating a smart city through internet of things
    IEEE Internet of Things J., 1 (2) (2014), pp. 112-121, 10.1109/JIOT.2013.2296516
    View in ScopusGoogle Scholar [25] Gil-Castineira F., Costa-Montenegro E., Gonzalez-Castano
    F., Lpez-Bravo C., Ojala T., Bose R. Experiences inside the ubiquitous oulu smart
    city Computer, 44 (6) (2011), pp. 48-55, 10.1109/MC.2011.132 View in ScopusGoogle
    Scholar [26] Filipponi L., Vitaletti A., Landi G., Memeo V., Laura G., Pucci P.
    Smart City: An Event Driven Architecture for Monitoring Public Spaces with Heterogeneous
    Sensors Sensor Technologies and Applications, SENSORCOMM, 2010 Fourth International
    Conference on (2010), pp. 281-286, 10.1109/SENSORCOMM.2010.50 View in ScopusGoogle
    Scholar [27] Sanchez L., Muñoz L., Galache J.A., Sotres P., Santana J.R., Gutierrez
    V., Ramdhany R., Gluhak A., Krco S., Theodoridis E., Pfisterer D. SmartSantander:
    IoT experimentation over a smart city testbed Comput. Netw., 61 (C) (2014), pp.
    217-238, 10.1016/j.bjp.2013.12.020 View PDFView articleView in ScopusGoogle Scholar
    [28] Malcolm Bain. Sentilo - Sensor and Actuator Platform for Smart Cities, 2014.
    https://joinup.ec.europa.eu/community/eupl/document/sentilo-sensor-and-actuator-platform-smart-cities
    (Accessed: 21 April 2017) Google Scholar [29] Ballon P., Glidden J., Kranas P.,
    Menychtas A., Ruston S., Van Der Graaf S. Is there a need for a cloud platform
    for european smart cities? eChallenges e-2011 Conference Proceedings, IIMC International
    Information Management Corporation (2011), pp. 1-7 View in ScopusGoogle Scholar
    [30] Khan Z., Anjum A., Kiani S.L. Cloud based big data analytics for smart future
    cities Proceedings of the 2013 IEEE/ACM 6th International Conference on Utility
    and Cloud Computing, IEEE Computer Society (2013), pp. 381-386 Google Scholar
    [31] Khan Z., Anjum A., Soomro K., Tahir M.A. Towards cloud based big data analytics
    for smart future cities J. Cloud Comput., 4 (1) (2015), p. 2 Google Scholar [32]
    Kim K.-D., Kumar P.R. Cyber–physical systems: A perspective at the centennial
    Proc. IEEE, 100 (Special Centennial Issue) (2012), pp. 1287-1308 View in ScopusGoogle
    Scholar [33] Giordano A., Spezzano G., Vinci A. A smart platform for large-scale
    networked cyber-physical systems Management of Cyber Physical Objects in the Future
    Internet of Things Methods, Architectures and Applications, Springer (2016) Google
    Scholar [34] Vermesan O., Friess P. Internet of Things: Converging Technologies
    for Smart Environments and Integrated Ecosystems River Publishers (2013) Google
    Scholar [35] Fortino G., Giordano A., Guerrieri A., Spezzano G., Vinci A. A data
    analytics schema for activity recognition in smart home environments Ubiquitous
    Computing and Ambient Intelligence. Sensing, Processing, and using Environmental
    Information - 9th International Conference, UCAmI 2015, Puerto Varas, Chile, December
    1-4, 2015, Proceedings (2015), pp. 91-102 CrossRefView in ScopusGoogle Scholar
    [36] Cicirelli F., Fortino G., Guerrieri A., Spezzano G., Vinci A. A Meta-Model
    Framework for the Design and Analysis of Smart Cyber-Physical Environments Proceedings
    of the 2016 IEEE 20th International Conference on Computer Supported Cooperative
    Work in Design (2016) Google Scholar [37] Cicirelli F., Fortino G., Giordano A.,
    Guerrieri A., Spezzano G., Vinci A. On the design of smart homes: A framework
    for activity recognition in home environment J. Med. Syst., 40 (9) (2016), p.
    200 View in ScopusGoogle Scholar [38] Cicirelli F., Spezzano G. Concept Hierarchies
    for Sensor Data Fusion in the Cognitive IoT Proceedings of the 30th ECMS 2016
    (2016) Google Scholar [39] Zambonelli F., Jennings N.R., Wooldridge M. Developing
    multiagent systems: the gaia methodology ACM Trans. Softw. Eng. Methodol., 12
    (3) (2003), pp. 317-370, 10.1145/958961.958963 View in ScopusGoogle Scholar [40]
    Jelasity M., Montresor A., Babaoglu O. Gossip-based aggregation in large dynamic
    networks ACM Trans. Comput. Syst., 23 (3) (2005), pp. 219-252 CrossRefView in
    ScopusGoogle Scholar [41] MacGregor J.F., Harris T.J. The exponentially weighted
    moving variance J. Qual. Technol., 25 (2) (1993), pp. 106-118 CrossRefGoogle Scholar
    [42] Garofalo G., Giordano A., Piro P., Spezzano G., Vinci A. A distributed real-time
    approach for mitigating cso and flooding in urban drainage systems J. Netw. Comput.
    Appl., 78 (2017), pp. 30-42, 10.1016/j.jnca.2016.11.004 View PDFView articleView
    in ScopusGoogle Scholar [43] Atzori L., Iera A., Morabito G., Nitti M. The social
    internet of things (siot) - when social networks meet the internet of things:
    Concept, architecture and network characterization Comput. Netw., 56 (16) (2012),
    pp. 3594-3608, 10.1016/j.comnet.2012.07.010 View PDFView articleView in ScopusGoogle
    Scholar [44] Cicirelli F., Guerrieri A., Spezzano G., Vinci A., Briante O., Ruggeri
    G. iSapiens: A Platform for Social and Pervasive Smart Environments In the Proc.
    of the 2016 IEEE World Forum on Internet of Things (WF-IoT) (2016) Google Scholar
    [45] Cicirelli F., Guerrieri A., Spezzano G., Vinci A., Briante O., Ruggeri G.,
    Iera A. An edge-based approach to develop large-scale smart environments by leveraging
    SIoT The 14th IEEE International Conference on Networking, Sensing and Control,
    ICNSC 2017 (2017) ISBN: 978-1-5090-4428-3, in press Google Scholar Cited by (109)
    A novel Edge architecture and solution for detecting concept drift in smart environments
    2024, Future Generation Computer Systems Show abstract When edge intelligence
    meets cognitive buildings: The COGITO platform 2023, Internet of Things (Netherlands)
    Show abstract Deep learning models for cloud, edge, fog, and IoT computing paradigms:
    Survey, recent advances, and future directions 2023, Computer Science Review Show
    abstract Digital twin-supported smart city: Status, challenges and future research
    directions 2023, Expert Systems with Applications Show abstract CCNSim: An artificial
    intelligence enabled classification, clustering and navigation simulator for Social
    Internet of Things 2023, Engineering Applications of Artificial Intelligence Show
    abstract Editorial: AI and IoT applications of smart buildings and smart environment
    design, construction and maintenance 2023, Building and Environment View all citing
    articles on Scopus Franco Cicirelli, Ph.D, is a researcher at ICAR-CNR (Italy)
    since December 2015. He earned a Ph.D. in System Engineering and Computer Science
    at the University of Calabria (Italy). He was a researcher fellow at the University
    of Calabria (Italy) from 2006 to 2015. His research work mainly focuses on Software
    Engineering tools and methodologies for the modeling, analysis and implementation
    of complex time-dependent systems. Research topics are agent-based systems, distributed
    simulation, parallel and distributed systems, real-time systems, workflow management
    systems, Internet of Things and cyber–physical systems. His research activities
    involve also Petri Nets, Timed Automata and the DEVS formalism. Antonio Guerrieri
    received the Ph.D. degree in computer engineering from the University of Calabria,
    Italy, in 2012. He is currently serving as Researcher at ICAR-CNR, Italy. He spent
    six months as researcher at the Telecom Italia WSN Lab at Berkeley, California,
    and one year at the Clarity Centre, UCD (University College Dublin), Ireland.
    He has been involved in several research projects and is co-founder of SenSysCal
    S.r.l. His research interests are focused on high-level programming methodologies
    and frameworks for wireless sensor and actuator networks, building monitoring
    and control, body sensor networks, design and development of smart environments,
    smart objects, Internet of Things. Giandomenico Spezzano is a Research Director
    at the Institute of High Performance Computing and Networking of the Italian National
    Research Council (ICAR-CNR) Rende, Italy. His research interests include parallel
    architectures, grid computing, peer-to-peer computing, parallel and distributed
    data mining, pervasive computing and Internet of Things. Andrea Vinci, Ph.D.,
    is a researcher at ICAR-CNR, Italy, where he has worked in various positions since
    2012. He earned a Ph.D. in System Engineering and Computer Science at the University
    of Calabria (Italy). His research work mainly focuses on Internet of Things and
    Cyber–Physical Systems. In these areas, he has published works on the definitions
    of platforms and methodologies for the design and implementation of cyber–physical
    systems, on distributed algorithms for the efficient control of urban drainage
    networks, based on swarm intelligence and peer-to-peer techniques, and on Data
    Mining techniques for Ambient Intelligence. 1 https://eu-smartcities.eu/eu-projects.
    2 http://amsterdamsmartcity.com/. 3 http://sfenvironment.org/. 4 http://smartcity.bcn.cat/en.
    5 http://www.copcap.com/set-up-a-business/key-sectors/smart-city. 6 http://www.ubioulu.fi/en/home.
    7 European Directive. The Environmental Noise Directive (2002/49/EG). Official
    Journal of the European Communities, 2002. http://eur-lex.europa.eu/legal-content/EN/TXT/?uri=celex%3A32002L0049
    . 8 http://www.summersimmer.com/. 9 http://ec.gc.ca/meteo-weather/. 10 https://en.wikipedia.org/wiki/Air_quality_index.
    11 https://www.raspberrypi.org/products/raspberry-pi-2-model-b/. 12 http://www.libelium.com/products/plug-sense/.
    View Abstract © 2017 Elsevier B.V. All rights reserved. Recommended articles Analyzing
    stochastic reward nets by model checking and parallel simulation Simulation Modelling
    Practice and Theory, Volume 116, 2022, Article 102467 Franco Cicirelli, Libero
    Nigro View PDF AI-guided resource allocation and rescue decision system for medical
    applications Future Generation Computer Systems, Volume 118, 2021, pp. 485-491
    Ye Yu, …, Feng Yuan View PDF Smart Environment Monitoring System by Employing
    Wireless Sensor Networks on Vehicles for Pollution Free Smart Cities Procedia
    Engineering, Volume 107, 2015, pp. 480-484 Muhammad Saqib Jamil, …, Usman Munawar
    View PDF Show 3 more articles Article Metrics Citations Citation Indexes: 104
    Captures Readers: 211 View details About ScienceDirect Remote access Shopping
    cart Advertise Contact and support Terms and conditions Privacy policy Cookies
    are used by this site. Cookie settings | Your Privacy Choices All content on this
    site: Copyright © 2024 Elsevier B.V., its licensors, and contributors. All rights
    are reserved, including those for text and data mining, AI training, and similar
    technologies. For all open access content, the Creative Commons licensing terms
    apply.'
  inline_citation: Cicirelli, Guerrieri, Spezzano, & Vinci, 2017
  journal: Future Generation Computer Systems
  key_findings: There is a need for distributed architectures and edge computing to
    enhance system resilience, and for the development of standardized interoperable
    solutions.
  limitations: The article is not directly focused on addressing the challenges and
    strategies for integrating automated systems with existing infrastructure and
    other precision agriculture technologies, as the focus is on the integration,
    interoperability, and standardization of automated irrigation management systems.
  main_objective: To present a comprehensive and critical evaluation of the current
    state and future potential of real-time, end-to-end automated irrigation management
    systems.
  pdf_link: null
  publication_year: 2017
  relevance_evaluation:
    extract_1: The edge computing paradigm has the aim to push the computation on
      acquired data away from the core of data centers to the outer edges of a network,
      close to the data sources.
    extract_2: The paper in consideration presents the design and implementation of
      a real case study, namely the Smart Street Cosenza, which is a smart street
      implemented in the town of Cosenza (Italy) that furnishes decentralized urban
      intelligence services to citizens, especially related to climatic and environmental
      wellness and anomalies detection.
    relevance_score: 0.9
  relevance_score: 0.9
  relevance_score1: 0
  relevance_score2: 0
  study_location: Unspecified
  technologies_used: IoT, machine learning
  title: An edge-based platform for dynamic Smart City applications
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
