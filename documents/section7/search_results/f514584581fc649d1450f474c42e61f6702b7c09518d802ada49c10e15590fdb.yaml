- DOI: https://doi.org/10.3390/agronomy12010127
  analysis: '>'
  authors:
  - Amjad Rehman
  - Tanzila Saba
  - Muhammad Kashif
  - Suliman Mohamed Fati
  - Saeed Ali Bahaj
  - Huma Choudhary
  citation_count: 91
  full_citation: '>'
  full_text: '>

    Web Store Add shortcut Name URL Customize Chrome'
  inline_citation: '>'
  journal: Agronomy
  limitations: '>'
  pdf_link: https://www.mdpi.com/2073-4395/12/1/127/pdf?version=1642508054
  publication_year: 2022
  relevance_score1: 0
  relevance_score2: 0
  title: A Revisit of Internet of Things Technologies for Monitoring and Control Strategies
    in Smart Agriculture
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.1109/access.2021.3078549
  analysis: '>'
  authors:
  - Ian Zhou
  - Imran Makhdoom
  - Negin Shariati
  - Muhammad Ahmad Raza
  - Rasool Keshavarz
  - Justin Lipman
  - Mehran Abolhasan
  - Abbas Jamalipour
  citation_count: 59
  full_citation: '>'
  full_text: '>

    IEEE.org IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account
    Personal Sign In Browse My Settings Help Access provided by: University of Nebraska
    - Lincoln Sign Out All Books Conferences Courses Journals & Magazines Standards
    Authors Citations ADVANCED SEARCH Journals & Magazines >IEEE Access >Volume: 9
    Internet of Things 2.0: Concepts, Applications, and Future Directions Publisher:
    IEEE Cite This PDF Ian Zhou; Imran Makhdoom; Negin Shariati; Muhammad Ahmad Raza;
    Rasool Keshavarz; Justin Lipman; Mehran Abolhasan; All Authors 60 Cites in Papers
    4982 Full Text Views Open Access Comment(s) Under a Creative Commons License Abstract
    Document Sections I. Introduction II. Technologies and Concepts Underlying IoT
    2.0 III. IoT Architectures IV. Machine Learning Intelligence V. Mission Critical
    Communication Show Full Outline Authors Figures References Citations Keywords
    Metrics Abstract: Applications and technologies of the Internet of Things are
    in high demand with the increase of network devices. With the development of technologies
    such as 5G, machine learning, edge computing, and Industry 4.0, the Internet of
    Things has evolved. This survey article discusses the evolution of the Internet
    of Things and presents the vision for Internet of Things 2.0. The Internet of
    Things 2.0 development is discussed across seven major fields. These fields are
    machine learning intelligence, mission critical communication, scalability, energy
    harvesting-based energy sustainability, interoperability, user friendly IoT, and
    security. Other than these major fields, the architectural development of the
    Internet of Things and major types of applications are also reviewed. Finally,
    this article ends with the vision and current limitations of the Internet of Things
    in future network environments. The seven dimensions of Internet of Things 2.0
    include machine learning intelligence, mission critical communication, IoT scalability,
    IoT sustainability, IoT interoperab...View more Published in: IEEE Access ( Volume:
    9) Page(s): 70961 - 71012 Date of Publication: 10 May 2021 Electronic ISSN: 2169-3536
    DOI: 10.1109/ACCESS.2021.3078549 Publisher: IEEE Funding Agency: CCBY - IEEE is
    not the copyright holder of this material. Please follow the instructions via
    https://creativecommons.org/licenses/by/4.0/ to obtain full-text articles and
    stipulations in the API documentation. SECTION I. Introduction The term “Internet
    of Things” (IoT) was first coined by Kevin Ashton in 1999 [1]. The International
    Telecommunication Union (ITU) has formally defined IoT as, “A global infrastructure
    for the information society, enabling advanced services by interconnecting (physical
    and virtual) things based on existing and evolving interoperable information and
    communication technologies [2].” This definition can be viewed as the basis of
    IoT technologies. There is an increasing demand for the IoT applications and technologies
    worldwide. It is predicted that networked devices will increase from 18 billion
    in 2017 to 28.5 billion in 2022, and Machine to machine (M2M) connections will
    reach 15 billion in 2022 [3]. With recent advancements in the fifth-generation
    of mobile telecommunications technology (5G), high speed and low latency networks
    will further facilitate the development of IoT technologies and applications [4].
    However, with the recent advancement of other technologies and application such
    as, machine learning, edge computing, and Industry 4.0, there is a need to update
    and redefine the concept of IoT towards IoT 2.0 [4]–[6]. There are many industry
    and public mentions of IoT 2.0 visions. Many of them focus on improving IoT application
    productivity and service quality with the vision of users [7]–[9]. AI-driven service
    development is viewed as a way to enhance service quality [10]. IoT interoperability
    is another field that attracted attention for IoT 2.0 [11]. Other than these fields,
    security and privacy vulnerabilities are also mentioned as issues to be solved
    in the next generation IoT systems [12]. A potential solution to reinforce IoT
    security and privacy could be blockchain [13]. At the Samsung Developer Conference
    2019, interoperability, security, connectivity, and automation of IoT applications
    are major fields of further development in the IoT 2.0 vision [14]. Other than
    this conference, a report [15] from the Joint Research Centre (JRC) of the European
    Commission concluded that IoT 2.0 should utilize machine learning technologies
    to enhance the generated intelligence and knowledge available to users. In this
    process, interpolation is an issue that limits the advancement of specialized
    edge services. Therefore, approaches toward integration and standardization are
    inevitable for the evolution of IoT and further development of IoT applications.
    Compared to the enthusiasm in the industry, academic works on the concept of IoT
    2.0 are limited. In [16], an IoT 2.0 platform is proposed. This platform integrates
    application development, deployment, and sharing. Interoperability is featured
    as a key function of the IoT 2.0 platform [16], [17]. The authors of [18] demonstrated
    the “Identity of Things” as an IoT 2.0 component. IoT applications should also
    be identified by their manufacturers to avoid security issues generated by any
    criminal parties [18]. In [19], an IoT 2.0 conceptual framework is developed to
    emphasize the usability of IoT and systems for end-users. Distributed intelligence
    powered by artificial intelligence (AI) is discussed in [20] and recognized as
    an aspect of IoT 2.0. The above works only describe one or a few aspects of advancement
    in IoT. Also, the authors of [21] concluded that very few existing survey papers
    had connected different aspects of IoT. Therefore, the primary objective of this
    article is to provide an in-depth analysis of recent IoT advancement and define
    the concept of IoT 2.0. This article surveys the recent development of IoT technology
    over the period 2015–2020 in seven dimensions as IoT 2.0. These dimensions include
    machine learning intelligence, mission critical icommunication, IoT scalability,
    IoT sustainability, IoT interoperability, user friendly IoT, and IoT security
    shielding the previous six aspects from external attacks (Figure 1). The contributions
    of this article are: Discussion of recent IoT architectures. Identifying challenges
    and limitations on practical IoT applications. Conclude and analyze recent research
    trend. Establishing visions of IoT in future sixth-generation of mobile telecommunications
    technology (6G) environment. The rest of this article is structured as follows.
    Section II provides an overview of related technologies and concepts. Section
    III examines the IoT architectures. Sections IV and V elaborate on the usage of
    machine learning techniques and the requirements of mission critical applications.
    Then, Section VI describes different types of scalability and scalability enabled
    by software defined networks (SDN). Sections VII and VIII establish the security
    and performance requirements of IoT 2.0. After that, Section IX focuses on energy
    harvesting-based IoT sustainability. Section X reports IoT interoperability with
    existing standards. Section XI illustrates user friendly IoT as the final dimension
    of IoT 2.0. Section XII addresses the recent development of IoT applications.
    Finally, Section XIII defines current challenges and future research directions,
    followed by Section XIV the conclusion. FIGURE 1. IoT 2.0 concepts. Show All SECTION
    II. Technologies and Concepts Underlying IoT 2.0 A. 5G The authors of [22] revealed
    the requirements of 5G-based IoT as high data rate, highly scalable and fine-grained
    networks, very low latency, reliability, resilience, security, long battery lifetime,
    connection density and mobility. Therefore, 5G grants IoT applications the capability
    to provide better services by gathering more data in a faster and more secure
    channel. Furthermore, 5G networks could support the development of next-generation
    IoT applications. In this subsection, the 5G enabling technologies are reviewed.
    Wireless Network Function virtualization (WNFV) is a major part of 5G networks.
    It not only enables network services to be run through software, but also enables
    wireless networks to be managed more efficiency and provide better Quality of
    Service (QoS). Network slicing is key technology within 5G which is built on top
    of the WNFV to create logically separate networks and provide end-to-end QoS guarantees
    [23]. 5G Heterogeneous networks have evolved to improve the speed of data transmission.
    To reduce latency, multi-tier cell architectures are deployed to offload data
    from higher tier centralized cells to lower-tier distributed cells. Lower tier
    cells are closer to the end users. Hence, latency is reduced [24]. Advanced spectrum
    sharing and interference management enable wider coverage area and higher traffic
    load balance [24]. To further improve spectral efficiency, device to device (D2D)
    communication technology is also included in 5G networks. This technology allows
    users in close distance to communicate without a base station. Therefore, D2D
    communication improves not only spectral efficiency but also provides high throughput
    and energy efficiency [22]. One key enabler of real-time applications is edge
    computing. As edge computing enables low latency data transmission, real-time
    smart applications can be developed to provide high quality services [25]. Therefore,
    in a 5G network age, integration of AI and edge computing enhanced IoT will significantly
    enhance the quality of user experience [22]. B. Tactile Internet The authors from
    [26] highlighted that Tactile Internet includes human to machine interactions
    through haptic devices. They view Tactile Internet on the same level as IoT and
    5G. Therefore, revealing the common properties of Tactile Internet, IoT and 5G
    as low latency, ultra-high availability, Human to Human (H2H)/M2M co-existence,
    data-centric technologies and security. However, the authors from [27] interprets
    Tactile Internet as another domain addressed by the low latency requirement of
    5G and actuated by the wireless communications of IoT. Based on the properties
    of Tactile Internet from [27], the authors of [28] further categorized the challenges
    of Tactile Internet into communications, haptics, artificial intelligence, and
    computation. Communication challenges are higher data rates, ultra-low latency,
    high reliability, and support of cloud/fog network overheads. These requirements
    are almost identical to the properties of 5G networks. Therefore, communication
    requirements can be resolved under the environment of 5G. Low latency services
    also require artificial intelligence and computation power. Artificial intelligence
    can be leveraged to predict future actions to compensate for latency. Furthermore,
    artificial intelligence is also the basis of intelligent services. Similar to
    artificial intelligence, faster computation also reduces the impact of latency.
    It also supports computation for artificial intelligence and real-time haptic
    services. The authors of [29] provided six use cases of Tactile Internet applications.
    The first use case is health care. An example of a health care application is
    exoskeletons for disabled people. The exoskeleton can detect changes in human
    muscle to perform certain movements. However, tactile latency is required to ensure
    safety. Exoskeletons can also be used for education and sports. It can be used
    in virtual training centers so that students can train in any location. Another
    use case is traffic. Tactile Internet enables fully autonomous traffic, where
    vehicles can react instantly to incoming humans on the street. Therefore, this
    system aims to prevent any injury or death from traffic accidents. This also enhances
    the performance of monitoring. The usage of free-viewpoint video provides multi-perspective
    monitoring for users [29]. In the industrial sector, Tactile Internet enables
    mobile robots for production, reducing any human injuries during production. The
    last use case is the smart grid. Using Tactile Internet, low latency networks
    can synchronize the usage of power to the suppliers. This allows the suppliers
    to precisely adjust the reactive power, preventing wastage of power. C. Edge Computing
    The aim of edge computing is to reduce bandwidth usage and latency for an IoT
    network. From Figure 2, as a major task of edge computing, machine learning is
    highly deployable on edge devices [30]. Edge computing is an enabler of low latency
    and real-time AI applications. In this subsection, the major architectures of
    edge computing are discussed. FIGURE 2. Major tasks of edge computing [30]. Show
    All There are three significant architectures of edge computing: fog computing,
    mobile edge computing (MEC) and cloudlet computing [30]. Fog computing is an extension
    of traditional cloud computing with fog computing nodes [30]. These fog computing
    nodes are placed between the end devices and a centralized cloud. The function
    of these fog computing nodes is to aggregate heterogeneous data from different
    sources. Furthermore, the fog computing nodes act as an interface to access these
    heterogeneous data, protecting any user from the heterogeneity of data. In the
    second architecture, MEC, is designed for cellular networks [30]. Unlike fog computing
    nodes, MEC nodes utilize both computational and storage capabilities. The functionality
    of these nodes can be modified through virtualization interfaces. Hence, MEC nodes
    can provide flexible, low latency, and real-time services to mobile end users.
    Finally, cloudlet computing is implemented with a cloudlet, which is a virtualized
    server that is one hop away from the end user [30]. Cloudlets are able to store
    provisional resources. Therefore, this architecture also can provide end users
    with flexible, low latency, and real-time services [31]. Based on these major
    architectures, there are also further enhancements in IoT networks improving energy
    efficiency [32], [33] and data reliability [34]. In conclusion, the major edge
    computing architectures are implemented with extended servers or nodes near the
    end users. The common purposes of these nodes are reducing latency, providing
    computation or storage capabilities, and delivering real-time services to end
    users. In a 5G environment, these node properties are the basis of intelligent
    services pushed by big data transmission and processing. Tactile Internet and
    Industry 4.0 also drive potential application requirements for IoT 2.0. D. Industry
    4.0 The authors of [35, p.835] defined Industry 4.0 as “the fourth industry revolution.”
    The Cyber-Physical System (CPS) is the basis of this revolution. The authors of
    [5] revealed that “CPS are industrial automation systems that integrate innovative
    functionalities through networking to enable connection of the operations of the
    physical reality with computing and communication infrastructure.” This definition
    shows that CPSs require heterogeneous data from multiple sources. As a result,
    data analytics techniques are suitable for implementing intelligence as part of
    the CPS service. The authors of [5] also pointed out that methods for processing
    data remain a challenge for these CPS applications. Hence, the implementation
    of big data analytics and machine learning are essential for the development of
    Industry 4.0. The amount of data generated by intelligent CPSs is difficult for
    a centralized cloud architecture to process. Inevitably, edge computing is used
    to distribute the load for data processing. Also, edge computing devices are closer
    to the end users. Therefore, it ensures lower latency of a service [36]. E. Machine
    Learning IoT data processing is a challenge due to the 5V (volume, velocity, variety,
    veracity, and value) features of these data [37]. Data analytics techniques like
    machine learning can process data with complex 5V features [38]. Furthermore,
    applying machine learning on heterogeneous IoT data ensures intelligence to IoT
    applications, providing better and efficient services. The major types of machine
    learning are supervised learning, unsupervised learning and reinforcement learning
    [39]. The supervised learning methods use input data with expected outcomes to
    lead the learning process of a machine learning model. On the other hand, the
    expected outcome is not provided when training an unsupervised learning model.
    An unsupervised learning model is built through clustering and other statistical
    methods [40]. Reinforcement learning models perform actions with input features
    or state of the current environment. This model learns from the return reward
    of the action and improves through trial-and-error [41]. SECTION III. IoT Architectures
    In this section, technical improvements of current IoT architectures are revealed
    through a detailed analysis of novel IoT architectures under the environment of
    5G, Tactile Internet, and Industry 4.0. There are many different IoT architectures
    [42]–[50]. The authors in [42] aggregated the conventional IoT architectures into
    a layered architecture of six layers. From Figure 3, this architecture consists
    of the physical layer, the perception layer, the network layer, the middleware/cloud
    layer, the application layer, and the business layer. With the assumption that
    end devices have limited power, memory and computational resource, the perception
    layer or the end devices in the perception layer are only responsible for data
    collection and transfer. Therefore, all data is transmitted to the middleware/cloud
    layer for further processing. For applications with extensive data flows like
    virtual reality and augmented reality, the throughput and latency of data transmission
    cannot meet the requirements of real-time, perhaps mission critical service. Therefore,
    novel IoT architectures are needed in this new era of 5G, Tactile Internet, and
    Industry 4.0 [43], [51], [52]. FIGURE 3. Layered conventional IoT architecture
    [42]. Show All Similar to conventional IoT architecture, the recent IoT architectures
    reviewed in this paper also contain end-devices and cloud layers. On the other
    hand, the most significant difference is the utilization of an edge/fog layer
    in the recent IoT architecture to provide real-time services, data analytics,
    and data processing functionalities near the end devices. The combination of machine
    learning models for data analytics services is one of the drivers for these recent
    architectures [43]–[50]. Figure 4 shows the layers with the functions of these
    recent IoT architectures. As an architecture providing basic edge computing, the
    authors followed a three-layered design. This design consists of the IoT end device
    layer, the fog/edge layer, and the cloud layer. The IoT end device layer is similar
    to the perception layer of the conventional IoT architecture. This layer also
    contains IoT sensors, actuators, and end devices for data collection and transmission.
    Data is passed to the fog/Edge layer to perform analytical procedures and processed
    for a higher-level layer. The final layer of the three-layered architecture is
    the cloud layer, providing a platform for centralized data analytics, storage,
    and decision making [44]–[46]. Comparing the above recent architectures with conventional
    IoT architectures, the involvement of the edge computing layer is the root of
    the changes between architectures. FIGURE 4. Recent IoT layered architectures.
    Show All The authors of [47] separated the cloud layer into a cloud layer and
    a new network core layer. This layer connects the cloud layer with the fog/edge
    layer. Also, it provides a flexible and scalable interface for controlling the
    fog/edge layers [47], [50]. This interface is also developed between the data
    edge/fog layer and the IoT end device layer. More specifically, the network domain
    and the communication layer have similar functions to the network layer of the
    conventional IoT architecture. These layers create a link between the end devices
    and the fog/edge level devices. Also, as a 5G process, the communication layer
    facilitates advanced spectrum sharing and interference management for D2D communication
    [43], [49]. The application layer is above the cloud layer. For different IoT
    applications, the application layer is different. However, in the recent IoT architectures,
    the application layer commonly acts as a software interface to control lower layers.
    Services could be deployed on the cloud level and the edge/fog level to provide
    centralized high-level services and distributed, real-time services, respectively
    [43], [48]–[50]. The authors of [43] proposed an eight-layer IoT architecture.
    Different from the previous architectures, the data storage layer, the collaboration/process
    layer, and security aspects are added to consider the security and performance
    requirements under the 5G environment. The data storage layer stores raw data
    from the edge/fog layers. This expands the limited memory of edge devices and
    prepared for services with high volume traffic. The second layer, collaboration/process
    layer, is designed for modern business settings. It allows collaboration from
    different personnel. Finally, security is recognized as a concept applied to all
    layers to protect them against possible external attacks. SECTION IV. Machine
    Learning Intelligence This section presents the machine learning intelligence
    applications. As a start, the relevant supervised, unsupervised, reinforcement,
    and other relevant machine learning algorithms are introduced. Then, the usage
    of machine learning on the physical layer, the network layer, the edge computing
    layer, and the cloud layer are introduced. On the physical layer, machine learning
    helps end devices perform energy preservation scheduling and physical layer communication.
    Then, this section demonstrates the usage of machine learning to improve network
    layer performance and reduce management overhead. After that, edge layer devices
    and motivations of applying machine learning on edge are described. Finally, this
    section focuses on the collaboration between the cloud layer and the edge layer.
    A. Machine Learning Algorithms 1) Supervised Learning Algorithms In supervised
    learning, the model learns through reducing the output of the cost function, which
    usually represents the model prediction and the true value. The major supervised
    learning methods are linear regression, logistic regression, support vector machines
    (SVM), Naïve Bayes classifiers, and k-nearest neighbors. Some deep learning algorithms,
    including artificial neural networks (ANN), convolutional neural networks (CNN),
    and recurrent neural networks (RNN) are suitable for supervised learning [53].
    There is a wide range of applications of supervised learning. For example, in
    the field of computer vision, many CNN-based applications are established in smart
    healthcare [54], smart home, smart city, smart energy, agriculture, education,
    industry, government, sports, retail, and IoT infrastructure [55]. The rest of
    this subsection explains some of the supervised learning algorithms. a: Support
    Vector Machine (SVM) SVM is created to solve binary classification problems [56].
    The aim of SVM is to create a hyperplane over a multidimensional space to separate
    the data points of this space into two classes. The SVM model can be represented
    by Equation (1) [56]. In this equation y is the output class as a sign of positive
    and negative, ω is the weight vector, x is the input vector and b is the scalar
    bias factor. y=sign(ω⋅x+b) (1) View Source From Figure 5, the distance between
    the two classes can be represented by Equation (2) [56], where ||ω|| is the Euclidean
    distance. D= 2 ||ω|| (2) View Source FIGURE 5. Support vector machine. Show All
    The parameter ω is obtained through maximizing the distance D with minimum classification
    error. Therefore, the optimization problem can be defined as Equation (3) [56].
    Φ(ω)= 1 2 ||ω| | 2 (3) View Source As indicated by [56], optimization of Equation
    (3) is a quadratic optimization problem, which could be solved through constructing
    a Lagrangian function as Equation (4), where α i are the Lagrange multipliers.
    L(ω,b,α)= 1 2 ||ω| | 2 − ∑ i=1 l α i { y i (ω⋅ x i +b)−1} (4) View Source The
    SVM described above are only suitable for linearly separable datasets. However,
    extensions as soft margin SVM and kernel SVM are all capable of handling non-linear
    datasets. Another form of SVM is the multiclass SVM, which is capable of classifying
    between more than two classes [56]. b: Support Vector Regression (SVR) SVM can
    also be extended to solve regression problems [56]. The generic SVR function is
    defined by Equation (5) [56], where Φ transforms non-linear inputs of x into a
    higher dimension, the vector w and scalar b should be optimized to minimize the
    regression risk function defined by Equation (6) [56]. In Equation (6), C is a
    constant that represents penalty to errors and Γ represents the cost function.
    Equation (7) [56] defines this cost function with ϵ as the least-modulus loss.
    f(x)= Rreg(f)= Γ(f(x)−y)= w⋅Φ(x)+b C ∑ i=0 l Γ(f( x i )− y i )+ 1 2 ||w| | 2 {
    |f(x)−y|−ϵ, 0, if |f(x)−y|≥ϵ otherwise (5) (6) (7) View Source Finally, similar
    to the SVM, the optimal parameters can also be found by constructing the Lagrangian
    function as Equation (8) [56]. In this equation, function k is the kernel function
    to transform inputs into high-dimensional vectors. The variables α i and α ∗ i
    are the solutions for this optimization problem. L= 1 2 ∑ i,j=1 l ( α ∗ i − α
    i )( α ∗ j − α j )k( x i , x j ) − ∑ i=1 l α ∗ i ( y i −ϵ)− α i ( y i +ϵ); Where,
    ∑ i=1 l α i − α ∗ i =0,AND ∑ i=1 l α i , α ∗ i ∈[0,C] (8) View Source c: Linear
    Regression Linear regression provides an approximation of the relationship between
    different data domains. In an example of one-dimensional input, the linear regression
    model is created in the form of the line of best fit (Figure 6). The authors in
    [57] gave a generic model of linear regression with multiple outputs. However,
    to simplify the process of demonstration, a single-output model is given by Equation
    (9). x and β of Equation (9) represent the input vector and the weight vector
    respectively. f(x)=β⋅x (9) View Source FIGURE 6. One-dimensional input linear
    regression. Show All The mean squared error (MSE) is computed to be utilized as
    the loss function (Equation (10)). The variable n is the number of data in the
    training set, x i represents the i th input vector and y i represents the i th
    real output. MSE= 1 n ∑ i=1 n (f( x i )− y i ) 2 (10) View Source d: Logistic
    Regression The logistic regression solves the binary classification problem. The
    output of logistic regression is a value between 0 and 1. Thus, providing the
    confidence level of the prediction. Equation (11) demonstrates the logistic regression
    model, which is based on the Sigmoid function [58]. Similar to the linear regression,
    β and x are the input vector and the weight vector, respectively. f(x)= 1 1+ e
    −β⋅x (11) View Source In order to find the optimal β , the method of maximizing
    likelihood is leveraged [58]. Equation (12) is the loss function. Similar to the
    linear regression, x i is the i th input vector and y i is the i th real output.
    g= ∏ i=1 n f( x i ) y i (1−f( x i ) y i ) (1− y i ) (12) View Source However,
    to ensure this loss function can be processed with an optimization algorithm such
    as gradient descent, the problem is converted to maximizing the logarithm of the
    likelihood. This function is presented by Equation (13) [58]. log(g)= ∑ i=1 n
    y i log(f( x i ))+(1− y i )log(1−f( x i )) (13) View Source The authors of [58]
    also provide the general form of the logistic regression using the Softmax function,
    which incorporates the ability to solve multi-class classification problems. e:
    K-Nearest Neighbor (KNN) KNN is mainly used for classification tasks. The model
    is built by plotting all training dataset in the feature space. When a new data
    point is inputted for inference, the model finds K nearest data points in the
    training set and provides an output based on the majority label of these nearest
    data points [38]. In order to calculate the distances, distance metrics such as
    the Euclidean distance, L-infinity norm, angle, Mahalanobis distance, and Hamming
    distance can be adopted [38]. Figure 7 demonstrates KNN with three nearest neighbors.
    The major label of the neighbors is class 1. Therefore, the new input data point
    is also labeled as class 1. FIGURE 7. KNN inference with three neighbors. Show
    All f: Decision Tree (DT) The authors of [59] emphasized that the main objectives
    of DT classifiers are to limit the classification error to an insignificant level,
    to classify with high accuracy beyond the training dataset, to achieve incremental
    updates with new training data, and to structure in a simple form. To achieve
    the above objectives, algorithms are required to build a DT. Here the ID3 algorithm
    is used as an example to illustrate DT. ID3 uses the concept of entropy to construct
    the DT. Equation (14) describes the calculation of entropy, where A is a vector
    of input features, x 1 and x 2 represent the two classes [60]. Entropy is calculated
    with all vector A in a tree node. H(a)= ∑ A [−P( x 1 |A)lo g 2 P( x 1 |A)−P( x
    2 |A)lo g 2 P( x 2 |A)] (14) View Source New tree nodes should be created with
    minimal entropy [59]. Therefore, the first step of ID3 is to find an attribute
    within the input vectors to produce child nodes with the minimal entropy. Then,
    the input vectors in the root are split according to the attribute to produce
    the child nodes. Next, if a child node contains input vectors with only one class,
    the splitting process is terminated for this node and continued with the next
    child node. On the other hand, if the child node contains input vectors with more
    than one class, the algorithm repeats the first step with the child node recursively
    [60]. g: Ensemble Learning The authors of [61, p.1] defined ensemble learning
    as “methods that combine multiple inducers to make a decision…” Therefore, as
    an advantage, models compensate errors of other models. The authors of [61] also
    divided ensemble methods into the dependent framework and the independent framework.
    In the dependent framework, the construction of the current model depends on the
    output of the previous model. An example is the AdaBoost algorithm, where the
    current model considers the error in the previous model. Gradient boosting machines
    also adopts a similar concept [61]. The independent framework includes multiple
    models, which are built independently from each other. Some examples of these
    methods are bagging, random forest, random subspace methods, error-correcting
    output codes, rotation forest, and extremely randomized trees [61]. Random forest
    is described in the next part of this subsection. h: Random Forest The random
    forest is an ensemble learning method based on DT [61]. It consists of multiple
    DTs. Each DT is trained by a random subset of the training data. Also, another
    random subset of the attributes is produced for the creation of new child nodes.
    Therefore, the algorithm only examines part of the attributes for an attribute
    of the best split. Furthermore, this randomness provides a low correlation between
    trees, avoiding the domination of a few strong attributes [62]. i: Naïve Bayes
    Classifier (NB) NB is a supervised learning algorithm based on the Bayes rule
    (Equation (15)). The Bayes rule provides a model of the conditional probability
    of a result Y with the given input or the condition X . This algorithm is generally
    applied to classification problems. In classification problems, Y is from a discrete
    set of classes. Moreover, an input X belongs to the Y giving the greatest P(Y|X)
    [63]. P(Y|X)= P(Y)P(X|Y) P(X) (15) View Source The NB model consists of the probability
    of a class Y and the joint probability of attributes (Equation (16)). Therefore,
    the model is constructed by estimating P(Y) for every class Y in the training
    set and the conditional probabilities of each attribute P( X i = a i |Y) for every
    class. P(Y= y i |X= a 0 , a 1 ,…, a i ) = P(Y= y i )P(X= a 0 , a 1 ,…, a i |Y=
    y i ) P(X= a 0 , a 1 ,…, a i ) (16) View Source j: Bayesian Network (BN) NB models
    assume that all attributes are independent of applying the Bayes rule. However,
    in the real world, the correlation between attributes is inevitable [63], [64].
    BN is a classifier that is not limited by the assumption of attribute independence.
    A BN can be represented by Equation (17), where G is a directed acyclic graph,
    where nodes represent the different events and the edges represent the dependency.
    The symbol Θ contains the Conditional Probability Table (CPT) for all possible
    values of the attributes and their conditions [64]. B=<G,Θ> (17) View Source The
    learning process is divided into two phases. During the first phase, the graph
    structure is determined and then in the second phase, the CPT is constructed [65].
    The structure can be determined by an expert or learned by data with score-based
    structure learning methods and constraint-based structure learning methods [66].
    The goal of score-based methods is to find a structure that provides the maximum
    score of a score function. For example, the Bayes Dirichlet equivalent uniform
    and the Bayesian Information Criterion. In the first step of score-based methods,
    the algorithm provides a score of suitable parents for every node. Then, parents
    are assigned to nodes to maximize the scores and to avoid cycles. On the other
    hand, constraint-based methods use conditional constraints to update the model.
    An example is the PC algorithm. When using the PC algorithm, the graph starts
    as a fully connected undirected graph. Edges are removed according to the result
    of CI tests. This method is repeated until no edges can be removed [67]. After
    obtaining a graph structure, CPT can be constructed to obtain a full model. k:
    Kernel Bayes Rule (KBR) The KBR extends the Bayes rule by applying kernels to
    represent probabilities in reproducing kernel Hilbert spaces. Moreover, the prior
    and likelihood can be expressed by data, which does not require a distribution
    model [68]. l: Gaussian Process Regression (GPR) GPR is a non-parametric regression
    method as the complexity is determined by the data [69]. GPR utilizes the Gaussian
    Process (GP) to model the function between the input X and output Y . GP is an
    infinite dimension version of the multivariate Gaussian distributions [69]. GP
    can be defined by a mean and covariance function. The mean value is usually set
    as zero and the covariance function can be modeled by a kernel function representing
    the dependence between different function outputs for different input X [69].
    The GPR learning process adjusts hyperparameters of the kernel, such as the length-scale,
    signal variance, and noise variance [69]. m: Collaborative Filtering (CF) CF algorithms
    provide recommendations to a user from experiences of other users [70]. CF operates
    under two assumptions: Opinions of users do not change over time; Users with similar
    characteristics provide similar opinions. With these assumptions, CF can be implemented
    to provide a decision basis for product promotion, social media recommendations,
    e-commerce reputations, and even strategy [70]. n: Feedforward Neural Network
    (FFNN) A sample model of the FFNN is demonstrated by Figure 8. An FFNN contains
    an input layer, an output layer and one or multiple hidden layers [71]. FIGURE
    8. Sample feedforward neural network architecture. Show All f(X)= f output ( f
    hidden2 ( f hidden1 (X))) (18) View Source Equation (18) [71] provides the general
    form of the sample model. In these layers, the input layer consists of the input
    vector, and the hidden layers can be represented in the form of (19) [71], where
    W is a matrix of coefficients, X is the input vector, B is the bias vector, and
    g is the activation function. W and B can be learned through the backpropagation
    algorithm. Whereas, g is chosen by the data analyst to provide nonlinearity [71].
    Some candidates of g are the ReLU function, the Sigmoid function, and the Tanh
    function. Finally, the output layer defines the output type of the model. If the
    output layer is a Softmax function similar to logistic regression, the FFNN provides
    the output of discrete values, which solves classification problems. On the other
    hand, if the output layer provides continuous values like linear regression, the
    FFNN solves regression problems. f(X)=g(WX+B) (19) View Source o: Convolutional
    Neural Network (CNN) CNN is a special type of FFNN. CNNs also process input data
    in a layer-by-layer style. The major motivation of CNN is to reduce the number
    of parameters to be trained [72]. Figure 9 demonstrates the general architecture
    of CNNs. A full convolutional layer group consists of the convolutional layer,
    the detector layer, and the pooling layer. In the convolutional layer, the input
    data is processed by a convolutional filter. This filter is in the form of a vector
    for one-dimensional data and matrix for two-dimensional data. The filter sweeps
    through the input data as a moving window, and during each iteration, the dot
    product of the filter matrix and the current region is calculated. Figure 10 provides
    an example of the first iteration and the final iteration of convolutional layer
    calculation with 4×4 input and a 2×2 filter. FIGURE 9. General convolutional neural
    network architecture. Show All FIGURE 10. 2D convolution filtering. Show All After
    the convolutional layer, the detector layer processes the data as a hidden layer
    with the ReLU activation function. The ReLU function provides nonlinearity to
    the network [71]. Finally, a filter is also used in the pooling layer. Similar
    to the convolutional layer, the filter in the pooling layer also sweeps through
    the input. However, the filter only represents the area for the current iteration.
    Pooling calculation could be simply obtaining the average or the maximum of the
    filter area [72]. CNN is widely used for image processing. p: Recurrent Neural
    Network (RNN) Unlike the basic FFNN, which only accepts one input a time, RNNs
    accept several inputs [73]. In terms of time-series data, individual data points
    are processed at once in the sequence of time [73]. As shown in Figure 11, the
    output of the current hidden state H t is generated from the input X t of the
    current time state and the output X t−1 of the previous time state, recursively
    [73]. Finally, if only one output is required (for classification or regression),
    the output Y is calculated from the final hidden state [73]. FIGURE 11. RNN layer
    at time t. Show All q: Long Short-Term Memory (LSTM) Since gradient propagates
    through multiple stages in RNNs, issues such as gradient explosion and gradient
    vanishing arise [73]. To address these issues, Long Short-Term Memory (LSTM) is
    proposed as variants of the RNN [73]. The LSTM incorporated an additional cell
    state to enhance long term memory [74]. Also, the additional forget and input
    gates are utilized to forget and insert information into the cell state [74].
    r: Random Neural Network (RandNN) The RandNN is a type of RNN. Excitatory impulse
    signals of “+1” and inhibitory impulse signals of “−1” are transmitted between
    the neurons of RandNN [75]. The neuron state or potential at a certain time is
    represented by a non-negative integer. This potential increases when the neuron
    receives an excitatory impulse and decreases when the neuron emits a signal. The
    neuron emits signals when its potential is positive. Also, the acceptance of an
    inhibitory signal outside of the network decrements the neuron potential [75].
    The RandNN can be applied in multiple fields such as associative memory, optimization,
    texture generation, magnetic resonance imaging, function approximation, mine detection,
    and automatic target recognition [75]. 2) Unsupervised Learning Algorithms The
    two major types of unsupervised learning models are principal component analysis
    (PCA) and K-means clustering. PCA is used as a technique to compress data. This
    is important for IoT applications, such as wireless sensor networks (WSN), with
    limited throughput and energy [76]. The K-means algorithm is used for the clustering
    of multiple sensors. By dividing the monitored field into areas using the unsupervised
    K-means clustering, the complexity of data gathering and processing are reduced
    [76]. Some other unsupervised learning algorithms are also explained further in
    this subsection. a: K-means The K-means algorithm produces a classification model
    through clustering [77]. It aims to generate multiple K centroids from the dataset.
    Data points close to a centroid forms a cluster [77]. The centroids are initialized
    by choosing random data points from the dataset. Then, data points are assigned
    to the cluster of the nearest centroid. Next, the new K centroids are calculated
    by averaging the assigned data points within their clusters. The above steps are
    iterated until the centroids are stable, or the algorithm reached a preset number
    of iterations [77]. With the centroids calculated, a data point can be classified
    by computing the distance towards the centroids. The new data point belongs to
    the cluster of the closest centroid [77]. b: Density-Based Spatial Clustering
    of Applications with Noise (DBSCAN) DBSCAN is another clustering method similar
    to K-means. However, compared to K-means, DBSCAN does not require a predefined
    number of K centroids. Also, DBSCAN can identify noises. Moreover, the shape of
    the cluster can be arbitrary [78]. DBSCAN has two hyperparameters the minimum
    number of neighbor points minPoints within the distance R [78]. To construct the
    clusters, DBSCAN iterates through all points in the dataset [78]. If an unvisited
    data point has more than minPoints neighbors within R , the data point is marked
    as a core point, and a new cluster is created. After that, recursively, all previously
    unvisited neighbors of the core point are visited and added into the cluster.
    Also, if the neighbor point is another core point, the two clusters would merge
    [78]. If a data point has less than minPoints of neighbors within the range R
    , the data point is classified as noise [78]. c: Hierarchical Clustering Analysis
    (HCA) HCA is a clustering method, where the data sample is recursively merged
    or split to form a tree diagram [79]. HCA methods can be divided into agglomerative
    hierarchical clustering and divisive hierarchical clustering. Agglomerative hierarchical
    clustering is the bottom-up approach, where each data point forms its own cluster,
    and similar clusters merge until the desired architecture is obtained. On the
    other hand, divisive hierarchical clustering is the top-down technique as it starts
    with a huge cluster containing the whole data sample. Then, the cluster is divided
    to form the tree [79]. Merging and division decisions are made with similarity
    criteria. The three different sets of criteria are single-link clustering, complete-link
    clustering, and average-link clustering. For the three clustering methods, the
    distance between two clusters is calculated as the shortest distance between any
    two members from different clusters, the longest distance between any two members
    from different clusters, and the average distance between any two members from
    different clusters, respectively [79]. d: Expectation Maximization (EM) The EM
    algorithm computes maximum likelihood estimations for latent variables [80]. The
    algorithm consists of the Expectation (E) and Maximization (M) steps. The E step
    computes the missing data from current function parameters. During the M step,
    the function parameters are updated to maximize the log-likelihood of the estimated
    latent variables [80]. The E and M steps are repeated until the model converges
    slowly to a local maximum [80]. e: Gaussian Mixture Modelling (GMM) The superposition
    of multiple Gaussian distributions can approximate any continuous density through
    the adjustment of their means, covariances, and coefficients [81]. Unlike the
    parameters of a single Gaussian model that can be determined directly by the maximum
    likelihood method, GMM is trained using EM in an iterative way [81]. GMM can be
    applied to solve clustering problems [81]. f: Principal Component Analysis (PCA)
    PCA reduces the number of attributes in a dataset by transforming the original
    inputs into another set of vectors with low information loss [82]. Dimensionality
    reduction is achieved by eliminating components with a lower variance. These components
    are detected through the computation of the eigenvectors and eigenvalues of a
    covariance matrix from the original dataset [82]. A component with a higher eigenvalue
    indicates more information contained. Therefore, features can be extracted by
    choosing the corresponding components or eigenvectors with higher eigenvalues
    [83]. g: Multidimensional Scaling (MDS) MDS is another dimensionality reduction
    technique. However, unlike PCA, MDS preserves the distance or difference between
    sample cases instead of the variance [84]. Stress, the loss function of MDS is
    defined as Equation (20), where d ij is the difference between sample cases i
    and j in the original data space, and D ij is the distance between i and j in
    the lower dimension or projected data space [85]. MDS consists of four steps [86].
    In the first step, a squared distance matrix is computed from the data points
    in the original data space. Then, the matrix B is computed by applying double-centering
    to the squared distance matrix. After that, the eigenvalues V and eigenvectors
    Q of matrix B can be obtained. V m is a matrix of the first m eigenvalues greater
    than zero, and Q m is a matrix of corresponding eigenvectors. Finally, the coordinate
    matrix can be calculated by multiplying Q m and V 1 2 m [86]. Stress= ∑ i=1,j=1
    ( d ij − D ij ) 2 ∑ i=1,j=1 D 2 ij (20) View Source h: Diffusion Maps (DM) DM
    is also an algorithm for dimensionality reduction [87]. In contrast to PCA and
    MDS, DM unravels the potential manifold structures in the dataset [87]. The DM
    algorithms initiate by defining a kernel and a kernel matrix. Through normalization
    of the kernel matrix, the diffusion matrix can be acquired. Finally, DM utilizes
    n numbers of the most dominant eigenvectors from the diffusion matrix to project
    the dataset from the original data space to n -dimensional diffusion space [88].
    i: Window Sliding with De-Duplication (WSDD) WSDD is used to mine patterns from
    system events sorted in chronological order [89]. WSDD utilizes a sliding window
    over the training dataset to learn patterns in a brute force approach. The algorithm
    is capable of detecting both frequent sequential patterns and periodic sequential
    patterns [89]. To increase efficiency, the algorithm stores mined patterns in
    a hashmap and avoided mining duplicate patterns. The pattern itself is stored
    as the key in the hashmap, and the count of the pattern is stored as the value.
    Finally, only patterns detected over a minimum count are returned as the output
    of WSDD [89]. j: Autoencoders (AE) The AE is a neural network consisting of the
    encoder, code, and decoder components [90]. The encoder maps the raw input to
    the output of the code component, and the decoder reconstructs the raw input from
    the output of the code component. AEs can be used for feature reduction as the
    output of the code component from a trained AE holds near lossless information
    of the raw input [90]. k: Hopfield Neural Network (HNN) The HNN is a type of RNN
    for solving optimization problems [91]. Each neuron provides non-linear outputs
    through a sigmoid function. All neurons are interconnected with each other to
    restrict and revise the outputs of each other. Each connection includes an interconnection
    weight. Each neuron contains a user adjustable input bias [91]. The neurons update
    according to the energy function (Equation (21)), where T i j is the weight of
    the connection between neurons i and j , V is the output of a neuron [92]. The
    HNN neurons evolve until a local minimum of the energy function is reached [92].
    E=− 1 2 ∑ i≠j T ij V i V j (21) View Source i: Self-Organizing Map (SOM) The SOM
    is a type of neural network that can perform clustering similar to the K-means
    [77]. In each iteration, the neuron closest to a randomly selected data point
    moves towards the data point by a preset learning rate [93]. Neurons within the
    preset neighbor range of the first neuron also move towards the data point. The
    learning rate and the neighboring radius delays over the number of iterations
    [93]. 3) Reinforcement Learning Algorithms The goal of reinforcement learning
    is to solve the problem of Markov decision processes (MDP). MDP is a sequential
    decision problem. As demonstrated in Figure 12, any action made by the agent will
    influence the environment and generate a reward. The goal of reinforcement learning
    is to maximize long-term rewards [41]. Q-learning, a type of reinforcement learning,
    is used to solve routing problems in IoT networks. Unfortunately, most of these
    algorithms are based on wired networks [94]. In WSNs, energy, processing power,
    and storage might become a bottleneck for distributed reinforcement learning routing
    algorithms [37]. Reinforcement learning algorithms aim to provide high-level intelligence
    to IoT applications. FIGURE 12. Agent-environment relationship [41]. Show All
    a: Temporal-Difference (TD) TD learning includes various model-free reinforcement
    learning algorithms, which require no model of the environment [95]. TD algorithms
    bootstrap or update the estimates based on current estimations. The value function
    is updated at every step of TD [95]. There are three fundamental types of TD-based
    learning algorithms mentioned in the sections after. The on-policy TD algorithm
    SARSA learns the action values from the current policy, while the off-policy algorithm
    Q-learning learns from the optimal policy [95]. Finally, a third type of TD learning,
    the Actor-critic learning learns both a policy (Actor) and value function (critic)
    [96]. Actor-critic learning is always on-policy as the “critic” needs to learn
    from and correct the TD errors from the “actor” or the policy. b: Least-Squares
    Policy Iteration (LSPI) LSPI is a model-free off-policy reinforcement algorithm
    [97]. LSPI is also an approximate policy-iteration algorithm, where the value
    function and policy representation are approximated. Therefore, compared to tabular
    methods, the policy search process is more efficient for LSPI [97]. Also, LSPI
    is based on least squares temporal difference learning [97]. Thus, as TD learning
    methods update incrementally, data efficiency of LSPI can be preserved [95]. 4)
    Other Relevant Machine Learning Techniques a: Transfer Learning By adopting transfer
    learning techniques, a model trained to solve one problem can be transferred and
    adapted to solve a different problem [98]. This prevents time-consuming labeling
    processes. Transfer learning can be categorized into inductive transfer learning,
    transductive transfer learning, and unsupervised transfer learning [98]. In the
    inductive transfer learning setting, the domains can be the same or different,
    but the tasks are different for the two problems. Whereas in transductive transfer
    learning, the tasks are the same, and the domains are different. Finally, in unsupervised
    transfer learning, similar to inductive transfer learning, the tasks are different.
    However, unsupervised transfer learning performs unsupervised learning tasks in
    the target problem [98]. b: Federated Learning Federated learning is a technique
    of multiple users training a common machine learning model without leaking their
    local dataset to other users [99]. There is the horizontal federated learning
    technique, where different datasets share the same features, but different sample
    cases [99]. On the other hand, vertical federated learning can be applied to datasets
    with more overlapping sample cases and different features [99]. Finally, federated
    transfer learning is suitable for datasets with different sample cases and features
    [99]. B. Physical Layer Applications One major application of machine learning
    influencing IoT end devices is communication control. The authors in [100] used
    Q-learning for transmission power control to reduce the unnecessary waste of power
    due to interference. This model is only tested under the scenario of one-to-one
    transmission. A scenario of multiple sources toward multiple receivers should
    be tested. The authors of [101] explored the usages of deep learning in end-to-end
    communication systems. The authors adopted the AE to replace different compensation
    techniques during the transmission of data. Data is encoded between transmission
    and decoded after transmission to protect the payload during transmission. Another
    application is the implementation of CNN for modulation classification. This is
    a prerequisite for developing an intelligent receiver. Machine learning algorithms
    increase the energy consumption of IoT devices. Therefore, it is important to
    apply energy preservation techniques. The authors of [102] concluded that the
    two major energy preservation methods are energy saving and energy harvesting.
    Most of the energy saving techniques are implemented through the estimate and
    control of the uptime of end devices [100], [103]–[108]. The rest of this subsection
    focuses on machine learning-based energy saving techniques. The authors of [103]
    established ARIIMA or A Real IoT Implementation of a Machine-Learning Architecture
    for reducing energy consumption. This is an IoT architecture that uses machine
    learning to forecast end device usage to control the up and downtime of IoT end
    devices. The aim is to reduce energy consumption. The authors compared different
    methods of calculating the loss of the predicted outcome. However, the authors
    did not link energy efficiency improvement to any specific machine learning algorithms.
    The authors of [105] utilized the Naïve Bayes Classifier for calculating the optimized
    uplink period for IoT data collectors. The goal of this work is to optimize the
    uplink time for power efficiency and preserve the accuracy of data. The authors
    from [107] used a single hidden layer feedforward neural network to predict the
    power usage based on smart meters. With these predictions, the power suppliers
    can balance the power production with consumption to avoid power wastages. Also,
    individual home devices can be controlled to relieve the grid pressure at power
    peaks. The authors of [106] used logistic regression, KNN, and Naïve Bayes algorithm
    to increase the power efficiency of smart buildings. Light, temperature, and motion
    data of a room are fed into the models to determine whether if people are present
    in a room. In conclusion, this work only determines the existence of people. Nevertheless,
    further work needs to be done on the development of an energy efficient device
    control scheme based on the predictions of these machine learning models. The
    authors of [108] extended the model for predicting human presence in smart buildings.
    A random neural network model is applied with inputs of carbon dioxide level and
    temperature readings to predict the number of occupants in a room. This model
    is used to control the heating, ventilation, and air conditioning (HVAC) systems.
    HVAC devices will be turned off to save power if no occupants are detected in
    the room. The authors from [104] pointed out that the manual labeling of training
    data is time consuming in supervised learning algorithms. Therefore, the authors
    proposed an energy saving scheme based on unsupervised learning. The WSDD algorithm
    is used to extract patterns of device behavior from historical data. C. Network
    Layer Applications The authors of [109], [110] summarized existing network layer
    applications using machine learning algorithms. These applications are IoT device
    identification, network routing, traffic profiling, traffic prediction, traffic
    classification, congestion control, resource management, fault management, QoS
    and Quality of Experience (QoE) management, and network security. Table 1 links
    these applications to implemented machine learning algorithms. However, these
    applications alone might not be feasible to deal with the complexity of networks
    such as 5G, Tactile Internet, and Industry 4.0 requirements. Furthermore, an autonomous
    network structure is required. TABLE 1 Network Applications and Related Machine
    Learning Algorithms [109], [110] 1) Self-Organizing Networks The increasing network
    complexity and device numbers for 5G and beyond networks are inducing conflicting
    demand over network resources and routing decisions. Therefore, self-organizing
    networks (SON) are required to reduce the complexity of managing these networks
    [111]. Management functionality of SONs consists of self-configuration, self-optimization,
    and self-healing. Self-configuration processes automate network design, network
    planning, and network deployment. After that, the self-optimization functionalities
    maintain the network performance and conduct routine network operations [112].
    Finally, self-healing functionalities focus on fault detection and recovery [113].
    The authors of [114] organized machine learning in SONs into four modules: sensing,
    mining, prediction, and reasoning. Sensing involves the detection of network anomalies
    and routine events. Therefore it contains functionalities of self-optimization
    and self-healing. Mining aims to classify services to help the network to optimize
    its performance. Moreover, mining belongs to the self-configuration functionalities.
    Finally, reasoning could apply to the offline parameter tuning during self-configuration
    and the online parameter tuning for self-optimization during network runtime.
    The authors of [115] categorized machine learning applications on SONs according
    to the three functionalities. In Table 2, the self-configuration applications
    are operational parameters configuration, neighbor cell list configuration and
    radio parameters configuration. In Table 3, the self-optimization applications
    consist of backhaul, caching, coverage and capacity, mobility, handover, load
    balancing, resource optimization, and coordination. In Table 4, the self-healing
    applications include fault detection, fault classification and outage management.
    Table 2, 3 and 4 only include the algorithms that are relevant to supervised learning,
    unsupervised learning and reinforcement learning. Therefore, controller models,
    Markov models, and heuristics algorithms are out of the scope of this article.
    TABLE 2 Machine Learning Applications in Self-Configuration [115] TABLE 3 Machine
    Learning Applications in Self-Optimization [115] TABLE 4 Machine Learning Applications
    in Self-Healing [115] The authors from [116] promoted self coordination as a fourth
    functionality group of SONs. Their work demonstrates that the current design of
    standalone management functionalities of SONs could lead to conflicting parameter
    adjustment between distinct functions. This work also concludes that DT, Q-learning,
    actor-critic learning, and SVM can be solutions for self-coordination. The authors
    from [117] proposed another method to avoid collision between different functionality
    results. Their distributed Q-learning model considers both base station power
    allocation and user quality of service. Q-learning consists of a list of actions,
    a list of states, and a list of rewards. The actions are the power allocation
    for the base stations. The states are the ring that the agent is covered with
    current power allocation. Finally, the rewards are calculated considering the
    higher capacity of the base station and better user quality of service. The network
    applications for traditional networks in Table 1 could be applied to support the
    SON functionalities. The authors of [118] emphasized that the result of traffic
    forecasting and prediction can increase the performance and accuracy of all other
    SON functionalities. The authors tested three types of machine learning models
    for traffic forecasting. The first type of model is autoregressive algorithms.
    This includes linear or polynomial regression. The second type of model is neural
    networks and finally, the authors used GPR for traffic forecasting. The authors
    also mentioned that this application can be further extended for QoS management
    and congestion control, providing possible use cases for models in the traditional
    networks. To improve the current management scheme in 5G and beyond networks,
    the implementation of SDN and Network Function virtualization (NFV) architectures
    in SONs fulfills the intelligence, automation, management, and optimization requirements
    [119]. In this architecture, machine learning works at the core to enable intelligent
    network management. This work also demonstrates that traffic classification as
    an essential application provides results affecting consecutive decision making
    processes. D. Edge Computing Applications 1) Edge Computing Hardware The development
    of edge computing hardware enables machine learning on the edge level. Table 5
    includes some of the representative edge computing devices. These devices can
    be classified into three device types. The first type is the board devices. Board
    devices are standalone embedded computers that run machine learning algorithms
    independent of external devices. The second type is the accelerator devices. These
    devices cannot operate alone. Accelerator devices often act as an add-on to provide
    extra machine learning capabilities to embedded boards, personal computers, and
    other devices. The final type is smartphone chips. Smartphone chip manufacturers
    like Qualcomm, Hisilicon, Samsung, and MediaTek are pushing machine learning processing
    to mobile devices. Most of these chips rely on an AI accelerator to provide real-time
    machine learning processing capabilities. TABLE 5 Machine Learning Edge Computing
    Hardware 2) Machine Learning on the Edge Machine learning applications on the
    edge layer can be separated into two major types. The first type aims to offload
    part or all of the existing functionality to the edge layer. This type of application
    is defined in this article as process offloading applications [46], [130]–[132].
    The second type of application is referred to as sole functionality applications
    in this article. Sole functionality machine learning models often perform subtasks,
    which assist the main task on the cloud. The machine learning model of these subtasks
    is different from the model of the main tasks [133]–[136]. Table 6 summarizes
    all the works with different motivations for applying edge computing. TABLE 6
    Motivation of Edge Computing The motivation for process offloading applications
    is the limited resources of devices. The authors from [130] pointed out that low
    latency is essential for vehicle-to-everything applications. This work classifies
    vehicle-related applications into critical applications, high priority applications,
    and low priority applications. Critical applications include vehicle control systems,
    system monitoring, and accident prevention. These applications must be deployed
    on the very edge to the vehicle for a near-instant response. High and low priority
    applications include navigation and entertainment. These applications should be
    deployed on edge servers to enhance the computational capability of end user devices.
    This also ensures a relatively low latency. The authors of [131] applied a similar
    offloading scheme to general machine learning web applications. The aim of this
    work is to offload computation power demanding machine learning tasks from embedded
    devices to an edge server. To achieve this, the edge device transmits a snapshot
    of the execution state before processing a machine learning task to the edge server.
    This method is independent of the type and model of the machine learning algorithm.
    However, the size of a snapshot is still enormous for embedded devices. The authors
    from [46] further revealed that edge computing could also be used to protect user
    privacy. Their application uses a neural network to recognize certain objects
    from live streaming video. To protect user privacy, the first few layers of the
    neural network are offloaded to the edge servers. This also reduces energy consumption
    for the whole system, since processing is distributed among the network. However,
    as the users still need to send raw information to edge servers to be processed,
    privacy leakage remains an issue. This issue can be solved by directly deploying
    these first layers of the neural network to the end device. As a result, users
    only send processed intermediate data to the network. All the works above only
    use edge computing primitively to offload computation requirements. However, machine
    learning by edge computing should leverage some unique properties of edge devices.
    The authors of [132] proposed a collaborative edge-centric learning method to
    train machine learning models. Each sensor contains a model that is trained locally
    using only data from that sensor. Training locally allows sensors to utilize contextual
    parameters to improve model accuracy. After training the local models, only the
    parameters of the models are sent to the sink from the sensors. This method reduces
    network overhead and energy consumption during training. Different from the previous
    process offloading applications, sole functionality applications improve the performance
    of the system by performing a different subtask of the major task in the cloud.
    Earlier motivations are also related to the limited resources of devices. The
    authors of [135] utilized multiple filters, including CNN and SVM, to drop blurry
    and unwanted image data at the edge layer. The usage of filters reduces the processing
    power required on upper layers to create a training dataset for other applications.
    Similarly, The authors from [133] also applied data cleansing on the edge layer
    to filter blurry images. Data cleansing is done by K-means in their food recognition
    system. Image segmentation is further applied as a data preprocessing method to
    reduce the load of the cloud server. However, the significance of this work is
    the utilization of locational data as a unique data type provided by edge devices.
    Furthermore, the authors used the locational data as a basis for collaborative
    recognition on the cloud layer. To enhance localized service, the authors of [136]
    implemented network traffic prediction via LSTM on the edge cloudlets of a healthcare
    system. The purpose of this machine learning model is to predict bidirectional
    traffic between the cloud and the cloudlet to control data transmission rate and
    data caching frequency. These improve the quality of service and the reliability
    of data. As the LSTM model is deployed locally on cloudlets, the control decisions
    of the model are different between different cloudlets due to the different local
    network traffic. Similarly, the authors from [134] also used machine learning
    to predict future sensor data. This is based on multi-variable regression and
    LSTM in their traffic monitoring system. These models are implemented on the edge
    servers to provide parameters for determining the quality of the video to be sent
    from the edge servers to the cloud. Therefore, this application aims to reduce
    network traffic by control data transmission from edge servers during non-critical
    events. The origin of these advantages is the increase of connectivity by introducing
    more edge servers to the system. As machine learning applications on the edge
    attract much attention, the emergence of TinyML provides further advancement of
    these applications. TinyML combines embedded IoT technologies with machine learning
    [137]. It has the advantage of low bandwidth usage and latency like other edge
    computing applications [30]. On the other hand, TinyML applications aim to minimize
    energy consumption (below 1 mW). To deploy a machine learning model on such a
    low consumption device, model size also needs to be minimized. Balancing between
    model size and accuracy is a challenge for implementing TinyML applications [137].
    E. Edge-Cloud Collaboration In the traditional IoT architecture, machine learning
    algorithms on the cloud layer usually perform analytical tasks. However, novel
    applications are proposed utilizing the collaboration between edge and cloud layers.
    Table 7 includes some edge-cloud collaboration methods. TABLE 7 Applications Involving
    Edge-Cloud Collaboration A most common type of edge-cloud collaboration is the
    sole functionality applications from the subsection above. The healthcare system
    from [136] is an example. The system aims to classify and store data at different
    nodes of the cloud server. Data is collected from mobile devices and passed to
    the cloudlet layer. In the cloudlet layer, LSTM is implemented to predict network
    traffic. The prediction results are used for data transmission rate control and
    caching frequency control. Then, data is transmitted to an upper network layer.
    This layer utilizes a FFNN to classify traffic. Finally, these data are stored
    on the cloud according to the classified traffic types. In this application, the
    edge layers support upper cloud layers by completing subtasks. The result of the
    subtasks helps the cloud layer to perform the main task. Edge assisted training
    is another type of edge-cloud collaboration. The authors from [135] used CNN and
    SVM to filter out images on the edge layer. This filter is to prevent corruption
    of the training on the cloud. Hence, it decreases the time required for an expert
    to create a training set. The authors from [138] used federated learning to create
    an AE model for anomaly detection. A local version of the AE model is trained
    on every edge device using its local datasets. Then, the weights of these local
    models are transmitted to the cloud server and aggregated to form one AE model.
    This cloud level AE model is redistributed to the edge devices for local anomaly
    detection. As less data is sent from the edge to the cloud, this method reduces
    bandwidth demand during training and ensures that the training dataset is not
    corrupted due to data transmission. However, this method only considers one model
    across the system. The authors of [139] extended training to multiple models.
    This is achieved with a machine learning model management module on the cloud
    server. This module accepts sensor data from the edge layer and uses these data
    to train different machine learning models. Then, the machine learning model selector
    selects and distributes a suitable model for every edge platform based on device
    performance and characteristics. This method optimizes network performance as
    the most suitable model is deployed for every device. Another edge-cloud collaboration
    method is process offloading scheduling. The authors from [46] addressed that
    edge servers have limited bandwidth. Thus, scheduling of cloud process offloading
    should be implemented to avoid network congestion. The authors of [140] implemented
    a similar scheduling method on 5G networks. They use deep Q-learning to schedule
    server app migration on mobile edge servers. This method aims to provide users
    with an optimal quality of service. The authors from [141] incorporated cross-layer
    communication into process offloading decisions. In this work, end IoT devices
    can communicate both with Unmanned Aerial Vehicle (UAV) edge servers and satellite
    cloud servers. If the IoT devices loose connection with UAV edge servers, the
    IoT devices could offload their computation tasks to the satellite cloud. A deep
    actor-critic learning method is proposed considering energy consumption and network
    delay to solve this scheduling problem. This section summarizes many machine learning
    algorithms, hardware and applications. The usage of machine learning from a network
    perspective are described. Machine learning applications in the physical layer
    and network layer are elaborated. Scheduling and management of different network
    resources and process are major applications of machine learning on these two
    layers. Then, for the cloud layer, the applications of machine learning that enable
    edge-cloud collaboration are illustrated. Edge computing aids cloud applications
    through process offloading and edge-only functions (sole functionality). However,
    this only shows collaboration in the application layer (Edge-Cloud). Collaboration
    between lower layers or cross-layer machine learning applications are still limited.
    The need of cross-layer machine learning models and other limitations of current
    applications are further discussed in Section XIII. SECTION V. Mission Critical
    Communication An important dimension of IoT 2.0 is the mission critical communication
    based systems, which address the situations where human life and any form of infrastructure
    can be at risk. Mission critical communication currently takes the form of mission
    critical machine-to-machine (M2M) communication, or machine type communication
    (MC-MTC), where machines need to communicate with each other to perform various
    tasks such as coordination, sensing, and actuation. Mission critical communication
    systems put stringent requirements of ultra-reliable and low-latency communications
    (URLLC) and system availability [142]. The M2M communication systems which do
    not involve the mission critical element are referred to as low-cost M2M or massive
    MTC (mMTC) with low-power consumption and massive connectivity [143]. In this
    section, we review important use cases of mission critical communication systems
    and recently proposed physical (PHY) and higher-layer mechanisms to meet the desired
    requirements of URLLC in these mission critical communication networks. A. Important
    Applications of Mission Critical Communication Networks In order to protect citizens
    and infrastructure during disasters and emergencies, different public safety organizations
    are put in place [144], [145]. The emergency first responder is the most important
    entity in all emergency management agencies. Public safety communication (PSC)
    systems used by these agencies for coordinating teams and providing quick emergency-response
    are regarded as mission critical because they need to be ultra-reliable, resilient,
    and secure while meeting other stringent network functionalities [146]. Public
    warning systems (PWS) also come under the umbrella of PSC systems as they share
    many of the characteristics of mission critical communications. An important use
    case of PWS is the earthquake and tsunami warning system. During the last few
    years, there has been a significant increase in the interest of advancing the
    PSC systems. The authors of [144] presented a detailed survey on wireless communication
    technology while covering the different aspects related to regulatory, standardization,
    and research activities in PSC systems. The main focus in this work is on Europe
    and the USA. In [145] a comparative analysis of legacy and emerging technologies
    for PSC is presented. The authors of [146] discussed the use of broadband technologies
    for public safety, considering existing LTE specifications. The authors from [147]
    proposed a software architecture design as well as a set of distributed protocols
    to meet the strict requirements of PSC networks. The use of wireless networks
    in the mining industry for mobility support, rapid deployment, and scalability
    within dynamic environments is another use case of the PSC system. The authors
    of [148] discussed the mission critical requirements of PSC systems for open-pit
    mining, and a framework is proposed that integrates mine and radio network planning.
    Automated transportation systems are meant to provide mission critical services
    to self-driving vehicles, connected cars, road safety, and traffic management
    systems. These intelligent transportation systems can increase the efficiency
    of traffic management agencies and provide numerous benefits, including a considerable
    reduction in the road-accidents rate. However, to get these systems realizable,
    the stringent requirements of MC-MTC networks should be fulfilled. Vehicular connectivity
    or Vehicle-to-everything (V2X), is another important use case of MC-MTC in which
    time-critical data exchange takes place under three different scenarios: vehicle-to-vehicle
    (V2V), vehicle-to-infrastructure (V2I), and vehicle-to-personal device moving
    at pedestrian speeds (V2P) [149]. UAVs, also known as drones, have potential usages
    in many mission critical communication systems due to their inherent features
    of mobility, flexibility, and adaptive altitude [150]. Such UAVs assisted MC-MTC
    networks can be used in the transportation of important goods in emergency situations
    being handled by the public safety and rescue systems. UAVs can be part of existing
    cellular networks as new types of user equipment (UE) and flying base stations.
    UAVs as flying base stations can help increase the coverage, spectral efficiency,
    and QoS in the MC-MTC supported cellular networks [150]. The authors of [151]
    presented a comprehensive survey of different types of promising solutions for
    the smooth integration of UAVs into cellular networks. Industrial automation involving
    time-critical processes requires highly reliable data transfer links between sensors,
    actuators, and controllers, and thus is an important application of MC-MTC networks.
    Detailed performance requirements of different MC-MTC network applications are
    listed in [152]. Health monitoring systems for remote patients and remote robots
    for surgeries are potential applications of MC-MTC networks. Similarly, both augmented
    reality (AR) and virtual reality (VR) systems require very low end-to-end latency.
    Another important use case of mission critical communication networks is found
    in the smart grid, which is an advanced form of conventional power grid having
    capabilities of automation, monitoring, and communication. The key features that
    distinguish smart grids from the conventional electrical power grid are two-way
    communication, demand-side management, and real-time billing. All these features
    require mission critical communication infrastructure for smart grids [153]. 1)
    PHY Layer Considerations for Mission Critical Communication Networks Table 8 summarizes
    works related to PHY layer considerations for mission critical communication networks.
    For both licensed and unlicensed bands employing URLLC, many promising PHY and
    medium access control (MAC) layer techniques are discussed in [154]. The following
    techniques are among the PHY layer mechanisms proposed specifically for MC-MTC
    networks to meet the associated URLLC requirements. TABLE 8 Summary of Recent
    Works Addressing Mission Critical Communication a: Short Packet Transmission In
    contrast to the conventional wireless communication systems, the traffic in MC-MTC
    networks generated by different types of devices and sensors contains short packets
    where the size of metadata (control information) is comparable with that of the
    actual information payload. Thus, new principles are required to design wireless
    protocols supporting short packets. The authors of [155] reviewed information-theoretic
    principles developed for communication systems generating short packets. These
    principles are applied in different communication scenarios such that the control
    information is optimized for short packet transmission. The probability that a
    network provides the required level of QoS is called the network availability,
    and in the context of MC-MTC networks, QoS is the set of desired reliability and
    latency levels [156]. To meet the stringent requirements of URLLC in MC-MTC networks,
    high SNR is required at the receiver, and SNR of the received signal depends upon
    the range between the transmitter and the receiver. The authors of [156] proposed
    a framework to optimize the available range and transmission duration in MC-MTC
    networks employing short packet transmission. To enhance network availability,
    the base station is equipped with multiple antennas, while the end nodes have
    only one antenna. This framework can be used in different transmission modes,
    including device-to-device, amplify and forward, and decode and forward. b: Physical
    Layer Authentication (PLA) Although, the use of short packets in mission critical
    communications systems can lead to the satisfaction of the stringent requirements
    of URLLC; the impact of finite block-length coding can cause serious physical-layer
    security issues. PLA is another promising way of meeting the reliability requirement
    in MC-MTC systems employing short packet transmission without using cryptographic
    methods. A common model considered in this regard is composed of three nodes.
    One node called Bob needs to exchange information with the other node called Alice
    in a secure way. There is a third node called Eve, physically distanced in the
    network which can sniff information being exchanged between Bob and Alice, and
    thus can send wrong information to the communicating parties. PLA aims to provide
    information security at the physical layer such that the interference from the
    undesired nodes can be avoided. A PLA based mechanism is proposed in [157] as
    a lightweight authentication in reliable MC-MTC systems. In this work, the receiver
    employs a GMM to make two clusters of the channel estimates, and based upon this
    clustering, it predicts the actual transmitter. The authors of [158] presented
    a queuing theory based detection and delay performance analysis of a PLA protocol
    for single-input multiple output (SIMO) MC-MTC networks. This protocol is investigated
    under different possible attack cases. The authors of [159] analyzed the secrecy
    throughput of MC-MTC networks while considering single and multiple antenna access
    points (AP) in the presence of an eavesdropper equipped with multiple antennas,
    and presented the corresponding latency-reliability tradeoff analysis. 2) Programmable
    Mission Critical Communication Networks 5G is envisioned to provide many heterogeneous
    services. By using network slicing, we divide a single physical network into multiple
    isolated virtual networks such that each virtual network takes care of a specific
    service [160]. Network slicing help manage these diverse network services efficiently.
    Thus, the design and implementation of MC-MTC networks supported by 5G can take
    advantages offered by the network slicing techniques. In [160], different aspects
    of network slicing are discussed in the context of 5G. A network slicing based
    logical network architecture for 5G systems is presented in [161], which covers
    all the fundamental aspects of a cellular communication system. The authors of
    [162] presented a mathematical model of network slicing for three main service
    groups of 5G, such that each group of services is provided with a dedicated set
    of policies. The authors of [163] proposed a network slicing design customized
    for different time mission critical vehicle-to-everything services. The authors
    of [164] discussed non-orthogonal slicing of the radio access network (RAN) resources
    among enhanced Mobile Broadband (eMBB), mMTC, and URLLC devices communicating
    in the uplink to a common base station. Because of the heterogeneous services
    being addressed, this RAN slicing is termed as non-orthogonal multiple access
    (H-NOMA), which is different from the conventional NOMA techniques which share
    radio resources among devices of the same type with homogeneous requirements.
    SDN and NFV are promising techniques to implement network slicing. SDN opens new
    ways to implement MC-MTC networks, and some recent studies provide insight regarding
    the potential usage of SDN in the design of future MC-MTC networks. In [165] an
    SDN and NFV based solution is presented and evaluated for critical infrastructure
    use cases. The authors of [166] presented a software-based framework for 5G systems
    and its hardware implementation MC-MTC networks. The authors also presented a
    practical framework for an experimental study that uses different types of network
    traffic to prioritize mission critical traffic. This framework is used to evaluate
    the end-to-end performance of the proposed systems. The authors of [167] proposed
    an SDN based architecture for 5G to address critical communications. Two important
    switching paradigms named Bare-Metal and fully virtualized switching, are used
    to evaluate the performance of the proposed system. The authors of [168] proposed
    a multi-controller architecture that provides a dynamic load balancing scheme
    for SDN based MC-MTC networks. This mechanism reduces the communication overheads
    by allowing the controller to send the load status to the load balancer only when
    the load exceeds a prescribed threshold. This helps reduce the communication overheads
    in MC-MTC networks employing SDN. Communication in smart grid systems is an important
    use case of MC-MTC networks. In this regard, the authors of [169] presented a
    comprehensive survey on the utilization of SDN architectures in smart grid systems.
    While addressing the mission critical communication design challenges at the PHY
    and MAC layers, it can be observed that the current approaches are primarily base
    station-centric and lead towards centralized decision-making strategies. Although
    these works aim to reduce latency and target to achieve ultra-reliability, the
    centralized control strategies may cause additional latency, which might not be
    avoided in these methods [170]. This triggers the need to design new solutions
    that involve less control signalling and employ distributed decision-making approaches.
    Moreover, in the current literature, mission critical communication network design
    considers the heterogeneity caused by three primary services of 5G, namely: URLLC,
    eMBB, and mMTC. However, different mission critical applications may have different
    latency-reliability criteria, and this type of variation in the QoS requirement
    creates another level of design complexity that needs to be addressed accordingly.
    Hence, these gaps in the literature can open new avenues for the research community.
    SECTION VI. IoT Scalability Universal scalability is discussed in this section.
    Universal scalability is separated into hardware scalability, network scalability
    and service scalability. Table 9 defines these different scalability concepts.
    TABLE 9 Applications Involving Edge-Cloud Collaboration Hardware scalability is
    the ability of a piece of hardware to be extended to cope with different environmental,
    network, and service requirements. A common method for implementing hardware scalability
    is offloading part of the device functionality to a server [171], [172]. The authors
    of [171] proposed an architecture that extends device functionality through device
    virtualization. Additionally, this work demonstrates device virtualization in
    the case of a multi-protocol scenario. As a solution, virtual gateways are deployed
    on fog servers to process the packets received by the end devices. However, adding
    functions of another functionality group (for example, adding image sensors to
    a transceiver device) still requires modification from the hardware level. To
    avoid modification from the hardware level, the concept of synthetic sensors is
    proposed [172]. Synthetic sensors can be separated into the device level and the
    server level. The device level is assembled by sensor tags capable of sensing
    data from multiple sensing dimensions. These sensing dimensions are low-level
    data types include vibration, audio, camera, temperature, humidity, air pressure,
    illumination, color, motion, magnetic field, and Received Signal Strength Indicator
    (RSSI). Then, low-level data is transmitted to the server level. On the server
    level, machine learning algorithms process these low-level data and convert them
    into valuable results to users. In conclusion, synthetic sensors create a platform
    with all the raw data types required and extend its functionalities through server-based
    machine learning analytics. Network scalability is the ability to dynamically
    scale resources up and down to process the incoming IoT traffic. A common method
    to ensure network scalability in wireless sensor networks is clustering. The authors
    of [173] reviewed common clustering algorithms. Their work outlines clustering
    into processes of cluster head election and cluster formation. Cluster head election
    is the process of choosing cluster heads from wireless devices, and these cluster
    heads gather data from other members of its cluster and transmit it towards the
    base station [173]. After the cluster heads are elected, other wireless devices
    advertise themselves to the cluster heads and form clusters around these cluster
    heads to join the network [173]. Therefore, new devices can easily join the network
    with the cluster formation process. As a result, scalability is achieved with
    clustering. The clustering techniques assume devices in the network are homogeneous.
    However, in an IoT scenario, devices are heterogeneous [173]. As a solution, intermediate
    fog devices are utilized [174]. Similar to the cluster heads, these fog devices
    gather information from the end IoT devices and transmit it towards a centralized
    server. Different to the wireless sensor network scenario, fog devices are not
    chosen by algorithms. These devices are specialized as an intermediate server.
    The authors of [174] pointed out that as a new IoT device joins the network, the
    device drivers and services can be distributed on the fog devices to achieve a
    simpler integration process. Therefore, fog servers increase the scalability of
    IoT networks. The extensibility of network coverage affects the availability of
    network services to mobile users. The authors of [175] explored antenna-based
    coverage and capacity optimization in cellular networks. Their work is based on
    two major phenomena. The first phenomenon is that the tilting of mobile network
    antennas affects network coverage and capacity. The second phenomenon is that
    there is a tradeoff between coverage and capacity. These phenomena are caused
    by an increase in the power of the received useful signal in a cell and the reduction
    of signal coverage due to antenna tilting. On the other hand, the authors of [176]
    addressed energy efficient parent selection of mobile IoT nodes. To ensure further
    coverage, scalability induced by antenna tilting, online and dynamic antenna configuration
    using reinforcement learning can be applied to cellular networks [177]. This method
    also belongs to the SON self-optimization functionalities [115]. Finally, to further
    extend network coverage, satellites are incorporated to provide network backhaul
    for IoT networks. The usage of satellite backhauls provides advantages of cost
    efficient, ease of deployment, avoidance of damage from natural disasters, seamless
    coverage, and reliability [178]. This could be part of the universal coverage
    solution. Service scalability emphasizes the ability to incorporate new services
    into the existing IoT system. The authors of [179] defined scalability requirements
    of IoT applications as explicit control flow, decentralized interactions, the
    separation between control and computation, and service location transparency.
    This work also categorized IoT service interaction types into direct interactions,
    indirect interactions, event-driven interactions, and exogenous interactions.
    After the evaluation of the service interaction types with the scalability requirements,
    exogenous interactions are the only service interaction type, which satisfies
    all scalability requirements. Exogenous interactions incorporate a coordinator
    to manage all service interactions with different devices and services. Therefore
    control is always managed by coordinators and is separated from service computation.
    From [179], this type of interaction is controlled with explicit control flow
    as the control flow is defined by the coordinators. Also, as a definition of exogenous
    interaction, the control is always separated from service computation. Furthermore,
    exogenous can be decentralized in a hierarchical manner. Finally, location transparency
    is provided by exogenous interaction because coordinators are controlling the
    service interactions, and location data is encapsulated during the process. A.
    SDN Induced Scalability SDNs bring programmability into traditional networks.
    Forwarding devices such as switches and routers can be virtualized in SDNs. This
    is achieved through the separation of control plane and data plane. As a result,
    SDNs simplify network management, minimize the limitation from hardware, and are
    easier to extend network functionality [180]. The advantages of SDNs could also
    be beneficial to manage D2D communication in 5G networks [181]. From Figure 13,
    an SDN architecture consists of the application layer, the control layer, and
    the data-plane layer. The application layer consists of software applications
    communicating with the control layer, the control layer process requests from
    the application layer and manage network devices, and the data-plane layer is
    network infrastructure such as switches and routers [180]. NFV is another technique
    that leverages service virtualization to increase network scalability. European
    Telecommunications Standards Institute (ETSI) defines a standard for NFV architecture
    (Figure 14) [182]. This architecture is assembled by the virtualized network functions
    (VNFs), the NFV infrastructure (NFVI), and NFV management and orchestration. NFVI
    includes the physical resource, which hosts VNFs as virtualized software implementations
    of network functionalities. Both NFVI and VNF are all managed by the NFV management
    and orchestration module. The advantages of the NFV architecture are reduction
    of hardware implementation costs, increasing flexibility and scalability by hosting
    VNFs on hardware, faster service modification due to software-based deployment,
    improved operational efficiency due to possible automation and operating procedures,
    improved power efficiency by planning and offloading workloads. NFV architecture
    is also able to create software interfaces to associate elements from different
    vendors. FIGURE 13. SDN architecture [180]. Show All FIGURE 14. NFV architecture
    [182]. Show All The authors of [183] pointed out that SDN and NFV can benefit
    each other. SDN controllers can be treated as a VNF on the cloud providing flexibility
    to controller distribution. On the other hand, SDN provides its programmability
    to NFV, allowing communication between different VNFs. The combination of SDN
    and NFV further increases scalability. The authors of [183] also provided a software-defined
    NFC architecture that consists of the forwarding devices, the controller module,
    and the NFV Platform. From Figure 15, the forwarding devices are switches and
    routers from the data-plane layer of SDNs. These forwarding devices store forwarding
    tables to process a particular data packet. The forwarding tables are defined
    by the SDN controller. The SDN controller also controls NFV orchestration on the
    control module. Another function of NFV orchestration is to assign functions to
    the NFV platform, where servers host hypervisors supporting virtual machines running
    with the network functions [183]. FIGURE 15. Software defined NFV architecture
    [183]. Show All The authors from [184] identified that in the environment of SDN
    and NFV, connecting and modification of virtual functions are complex due to multiple
    heterogeneous end-user demands and network parameters. Service function chaining
    could be a solution to reduce this complexity and optimize the use of resources.
    The authors from [184] also categorized existing service function chaining models
    into six optimization types as follows: network latency minimization, resource
    utilization optimization, cost minimization, power/energy minimization, service
    level agreement based optimization and quality of service based optimization.
    Finally, the authors of [183] provided a vision of implementing service function
    chaining on the software-defined NFV Architecture. The optimal path of service
    chains is coordinated with the SDN controller fulfilling user requirements and
    resource constraints. Then, service chains are created from multiple VNFs, and
    data packets flow through the path of the service chains. In this section, network
    and service scalability achieved with SDN and NVF are reviewed. The authors of
    [185] indicated the emerging network scalability issues trigger by the network
    management overhead in current networks with increasing size and dynamism. Autonomic
    or self-management of the networks (SONs) [185] could be a solution for these
    issues. On the other hand, IoT interoperability could be another solution to resolve
    scalability issues [186]. SECTION VII. IoT Security The diversified and ubiquitous
    use of IoT systems in foreseeable future necessitate the need of evaluating security
    and privacy requirements for various IoT technologies and applications. In this
    context, due to constrained resources of IoT end-devices, lack of host-based security
    measures, and data-enabled services, numerous threats emerge at different layers
    of IoT architecture. A. Physical Layer Some of the noteworthy threats at physical
    layer include: Eavesdropping: Attackers can introduce devices similar to the end
    nodes in an IoT system to sniff wireless traffic and capture sensitive user data.
    Hardware Failure: IoT device hardware may fail due to manufacturing faults or
    as a result of a cyber-attack. This failure may lead to substantial damage to
    the IoT system as a whole or it may cause physical impairment to the users [187].
    An example of such a successful cyber-attack is Stuxnet [188], that caused physical
    damage to a critical equipment installed at Iranian Nuclear Enrichment Facility.
    Malicious Data Injection: Any persistent attacker can introduce a forged device
    to eavesdrop on the radio traffic, inject fabricated messages or flood the radio
    channels with fake messages to render the system unavailable to the legitimate
    users [189]. Man-in-the-Middle Attack (MITM): There is always a possibility that
    an attacker can tap and listen to the unprotected communications links between
    the end users and the network/applications servers. Such an attack is often called
    as (MITM) attack. A successful MITM attack may enable the attacker to eavesdrop
    the communication channel or to inject forged malicious data. Sybil Attack: In
    this attack, a malicious node may present multiple identities by generating fake
    new identities or by impersonating other nodes. In the worst case scenario, multiple
    identities may be generated using a single physical device [190]. The attacker
    has the option to present all the Sybil identities simultaneously or one by one
    at different instances. A Sybil attack may affect the outcome of a voting-based
    fault tolerance system or a routing protocol. Loss of Power: In order to abnormally
    drain the battery of an IoT device an attacker can bombard the node with a large
    no of requests (mostly legal) thus preventing it from going to sleep or energy
    saving mode. Disclosure of Critical Information: It is not always the case that
    a communications channel is unprotected. Currently, most of the communications
    protocols especially the wireless protocols such as 802.15.4, LoRaWAN, SigFox,
    ZigBee, and WiFi, encrypt data during transmission. However, still a smart attacker
    may continuously monitor the wireless sensors traffic, for example, of a smart
    home and analyze the pattern of data traffic to differentiate between an idle
    mode or when an event occurs. Hence, even if the data is encrypted, the frequency
    of data traffic may infer critical information to the attacker that the house
    is empty. Therefore, he can plan a robbery. Side-Channel Attacks: Other than intercepting
    the plain text or cipher text messages, attackers may resort to gather and analyze
    side-channel information about the IoT device hardware components. This information
    may include, data about processing time or power consumption while encrypting
    or decrypting data packets of varying lengths generated from different sensors/end
    nodes [191]. Such an analysis may help the attacker to identify the duty cycle
    of various IoT devices based on the frequency of particular messages being transmitted.
    Device Compromise. Most of the IoT devices designed for a particular application
    such as environmental monitoring, temperature, and pressure sensing, etc., are
    not security hardened, thus have weak authentication mechanisms or open debugging
    ports. Hence, these devices can easily be compromised by the malicious attackers.
    In an effort to demonstrate such an attack, security researchers in [192] exploited
    an open Universal Asynchronous Receiver/Transmitter (UART) interface of a home
    automation system controller. The sequence of actions adopted by the researchers
    to compromise an IoT device is shown in Figure 16. Once the attacker gains access
    to the device, he is able to view the start-up sequence. Hence, he can modify
    the boot parameters and gain low-level access to the device. Attacker may also
    brute force the root password and launch network layer attacks such as port scanning.
    In addition, the attacker may perform network traffic analysis. Attackers also
    have the option to fetch and analyze device firmware, find weaknesses and launch
    further attacks. In another endeavor, security researchers compromised a smart
    meter device through an unsecured Joint Test Action Group (JTAG) interface and
    modified the identity of the device. The researchers also modified write permissions
    to an Electrically Erasable Programmable Read-only Memory (EEPROM) that stored
    the device ID. As a result of such a successful attack in real-world malicious
    users can use the spoofed device identity to feed altered power consumption data
    to the controller/gateway device [193]. Similarly, researchers also successfully
    compromised a Google Nest Learning Thermostat and Nike+ Fuelband SE fitness tracker
    by exploiting vulnerabilities in the boot process and some weaknesses in the physical
    design. The attack was successful despite the availability of secure transmission
    protocols such as Wi-Fi Protected Access II (WAP2) and Transport Layer Security
    (TLS) 1.2. In addition, the smart devices also had fairly strong authentication
    mechanism in terms of OAuth authentication tokens and Public Key Cryptography
    Standards VII (PKCS 7) certificates. Node Cloning: Due to cost-effective solutions
    most IoT devices are developed without any hardware tamper-proofing. Therefore,
    it is very easy for a persistent attacker to forge and replicate these devices
    for malicious objectives. Such a replication is called “node cloning” [194]. An
    attacker can clone the devices either in manufacturing phase, or during the operational
    phase. During device manufacturing, an inside attacker can target and substitute
    a particular legitimate device with a similar, pre-programmed one for unauthorized
    purposes. Whereas, during the operational phase attacker has to resort to a carefully
    planned attack to compromise and clone an IoT device. Invasive/Semi-invasive Intrusions:
    Invasive and semi-invasive intrusions are significant threats to IoT devices.
    By using invasive intrusion methods, attackers can steal the cryptographic primitives
    stored on the chip and may compromise any protocol utilizing that secret information.
    In a practical manifestation of such an attack, security researches in [195],
    successfully extracted the Advanced Encryption Standard (AES) Key from the internal
    memory of Actel ProASIC3 FPGA, by launching “Bumping Attacks” [196]. FIGURE 16.
    Sequence of a device compromise attack. Show All B. Network Layer Most of the
    attacks are anticipated at network layer because it not only links multiple Local
    Area Networks (LANs) but also enables a connection to the Internet. Some of the
    threats that affect data security at this layer include unfairness, impersonation,
    Sybil, and interrogation attacks [197]–[199]. Similarly, numerous Denial-of-Service
    (DoS) attacks that threaten the availability of network services include; channel
    congestion, collision and battery exhaustion attacks [200], [201]. The battery
    congestion attack may be launched by increasing the frame counter value and spoofing
    of acknowledgment frames [202], [203]. Correspondingly, hello flood attack, selective
    forwarding, wormhole attack, blackhole attack [200] and storage attacks [187]
    also threaten availability of network services. Some other DoS attacks may include
    exploitation of Carrier Sense Multiple Access (CSMA) protocol by transmitting
    on multiple channels [201], [202] and initiation of fake Previous Access Network
    Identifier (PANId) conflicts. DoS Attacks can also be launched by sending fake/false
    messages to a node, server [204] or a gateway device [205]. In addition, some
    of the threats to the security and integrity of the system include MITM, eavesdropping
    [189], spoofing [200], message fabrication/modification/replay attacks [189],
    unauthorized access to network, compromise of a device (done remotely using malware)
    [187], node replication [197] and insertion of rogue devices [206]. C. Fog/Edge
    Layer The introduction of fog/edge computing with IoT to reduce latency, decrease
    bandwidth, enhance computing power, increase storage and augment security is a
    paradigm shift from centralized cloud-based infrastructure [207], [208]. However,
    as fog/edge is believed to be a nontrivial extension of the cloud, hence certain
    new security and privacy issues have been identified in addition to the existing
    ones. Some of the significant security and privacy challenges include: IoT device
    authentication. Lack of trust measurement mechanism. Absence of IoT device integrity
    check technique and detection of rogue devices. IoT device security and user data
    security and privacy. Non-availability of IoT-centric access control and intrusion
    detection system to avoid insider and external attacks. Key management at end
    devices. D. Security and Privacy Issues During Data Storage and Analytics on Cloud
    Today, the reliance on Big Data analytics to provide valuable business intelligence
    has paved the way for the integration of IoT and cloud computing. No doubt, cloud
    infrastructure has relieved IoT systems from issues involving scalability, constrained
    processing power, limited memory and power to run heavy applications [209]. However,
    like other IoT layers, the vulnerabilities in cloud interfaces can also become
    attack vectors. Therefore, the cloud gateways should be equipped with requisite
    security controls to restrict malicious actors from compromising security and
    privacy of user data [210]. Some of the major security issues in cloud-supported
    IoT systems include: Cloud services are provided under the centralized control
    of one trusted entity. Hence, the cloud is vulnerable to the single point of failure
    concerning security and privacy issues [189] including data manipulation [211],
    [212], and the availability of cloud services. Moreover, cloud also has trust
    issues, as the users have to put their trust in the entity that is providing cloud
    services and handling their data. Hence, users have no control over their data
    assets. Further concerns for user data include: Users do not know where their
    data is stored and what is happening to it. Who has access to it, and is there
    any unauthorized disclosure to the third parties. In regard to data manipulation,
    the cloud service provider has to be a trusted party as it has control over the
    data stored in the cloud and related services. Therefore, the cloud provider can
    manipulate user data [212]. Correspondingly, single point of failure also concerns
    the availability of services when the cloud servers are down because of software
    bugs, cyber-attacks, power problems, cooling and other issues, users find it difficult
    to access the cloud services [211]. Cloud is also vulnerable to un-authorized
    data sharing. For example, in the recent past, private data of 87 million users
    was provided by Facebook to a British political consulting firm “Cambridge Analytica”
    without user permission [213], [214]. Such a data breach results in irreversible
    data security and privacy issues. E. Application Layer Most application developers
    focus more on efficiency and service delivery rather than security. As a result,
    applications remain vulnerable to numerous threats. Lack of application security,
    and weak authentication and authorization mechanisms enable attackers to compromise
    IoT devices using various attack vectors such as malicious code, and brute force
    attacks to guess the hard coded login credentials. The device compromise can then
    result in unwanted disclosure of sensitive information, elevation of privileges
    and data tampering. The attacker can also turn the infected devices into bots
    to launch further attacks on other end devices or network applications [187].
    Moreover, once an adversary gains an initial foothold on the IoT device through
    an insecure application he can also do the exploitation via binary patching, code
    substitution or code extension [215]. Correspondingly, some significant security
    risks to web-based IoT systems have been ranked by OWASP (Open Web Application
    Security Project) [216]. These risks include: Injection flaws in SQL/noSQL Databases,
    Operating Systems (OS) and Lightweight Directory Access Protocol (LDAP). This
    vulnerability not only affects traditional Information Technology (IT) systems
    but also poses an equal threat to the IoT applications and database servers. In
    a practical manifestation of such an attack, researchers in [217] successfully
    compromised a smart home device, i.e., a Belkin WeMo Switch. As shown in Figure
    17 firstly, the attacker discovers an SQL injection vulnerability in the IoT device.
    The adversary also discovers that the data is not encrypted during transmission
    between the Belkin WeMo Android Application and the Belikn device. He also finds
    that the authentication mechanism is lacking. The attacker then sends a malicious
    SQLite file to the device and resultantly gets root level access. Once inside,
    the attacker can alter the functionality of the device or he has the option of
    launching a DDoS attack. For example, The lamp is kept on for a long time irrespective
    of the rules defined by the user. It is imperative to mention here that once an
    attacker gains root level access to the device; he can even kill the firmware
    update process initiated remotely by the vendor. Hence, the device can be kept
    in the compromised state for as long as desired by the attacker or until the device
    is updated on site [218]. Malicious actors can steal user identities and compromise
    passwords, cryptographic keys, and session tokens due to incorrect session management
    and incorrect implementation of authentication in applications. For example, a
    user does not change the default username and password or the wireless router
    has hardcoded credentials for the admin account. Hence, researchers in [219] were
    able to hijack the session using ARP poisoning and gain access to the camera feed
    of the Withings Smart baby Monitor. Security misconfiguration is one of the most
    common weaknesses. It implies insecure default configurations, open cloud storage,
    mis-configured Hyper Text Transfer Protocol (HTTP) headers, and overblown error
    messages that may contain sensitive information. An IoT device is insecure without
    secure configuration and timely upgrades of its OS and applications [218]. XSS
    (Cross Site Scripting): By exploiting this vulnerability, attackers can run an
    arbitrary JavaScript code in the browser of target systems [217], [220]. Resultantly,
    it can lead to the hacking of the smart devices and ultimately the theft of private
    data. Security Issues in Application Layer Protocols: Security researchers have
    shown concern over the security issues in various application layer protocols
    such as HTTP, Message Queuing Telemetry Transport (MQTT), Advanced Message Queuing
    Protocol (AMQP), and Extensible Messaging and Presence Protocol (XMPP) [221].
    These protocols rely on TLS and Datagram Transport Layer Security (DTLS) for the
    security during communication especially in a client-server environment. However,
    these protocols are vulnerable to plain-text recovery attacks, as demonstrated
    by the researchers in [221]. Moreover, another significant issue with these protocols
    is that they were not designed to be used for resource constrained IoT devices.
    Subsequently, these protocols add additional traffic overheads with every connection
    establishment that ultimately drain the computing and power resources of IoT devices
    [222]. FIGURE 17. SQL injection attack on Belkin WeMo switch. Show All F. Business
    Layer Data received from IoT devices through web/application servers is stored
    and processed mostly in the cloud. The processed data is then used to provide
    various data-enabled services to the users, and third parties. This big data analytics
    is no doubt beneficial, but at the same time various security and privacy issues
    emerge. Users that are basically the data owners do not know where their data
    is stored and who has access to it. Moreover, cloud service providers may share
    some private information of the users with third parties without de-anonymization.
    Most of the tools currently being used to store and compute big data, such as
    Hadoop Distributed File System (HDFS) and MapReduce framework lack adequate security
    to protect sensitive user data [223]. Hence, there is a need to develop a comprehensive
    defense strategy to protect IoT systems from various security and privacy threats.
    G. Application Specific Security Requirements There are myriad of IoT applications
    that have significant impact concerning safety, security and privacy of people,
    in case of any security breach. All of these applications cannot be discussed
    here; however some of the critical ones are highlighted in the subsequent paragraphs.
    1) IoT in Healthcare IoT has revolutionized healthcare domain by connecting wearable
    healthcare devices, smart homes, hospitals, medical staff, and other processes.
    Such an integration is no doubt beneficial. However, being interconnected and
    remotely accessible, these services are vulnerable to major cyber-physical security
    risks [224]. Some of the significant security and privacy issues concerning Healthcare
    IoT infrastructure, and services include: Weaknesses in network access control
    mechanisms and threats to data authentication, integrity and availability [225].
    Due to the interconnections, a failure in one infrastructure can cause cascading
    failures among its dependent systems/processes [226]. Unauthorized access to user
    data by third parties. Lack of role-based controlled access to patient data. Existing
    single party owned centralized systems to store and process user data provide
    single point of failure. Vulnerability to ransomware attacks [227]. 2) Industrial
    IoT The development of first Programmable Logic Controller (PLC) in 1968 by Modicon
    laid the foundations of classical industrial automation. This automation pyramid
    comprise of Enterprise Resource Planning (ERP) layer, Manufacturing Execution
    System (MES), Supervisory Control and Data Acquisition (SCADA) layer, PLC layer
    and sensing layer comprising sensors and actuators [228]. For a longtime the security
    of industrial systems was based on the principle of obscurity, i.e., by hiding
    the details about internal network and related technologies. However, with the
    increase in the level of automation, and reliance on remote access for ease in
    monitoring and control, the industrial systems have become a lucrative target
    for the cyber-attackers/hackers. In this context, Stuxnet was the game changer,
    that made the world realized that the security of critical infrastructure is a
    necessity [218]. Stuxnet is believed to be a targeted computer worm that was designed
    to sabotage CPS installed in Iranian Nuclear Enrichment Facility. It exploited
    four zero-day vulnerabilities in Windows-based systems to gain an initial foothold
    [229]. Stuxnet specifically targeted personal computers running WinCC/PCS-7 control
    software used for programming the PLCs [230]. It could act as a MITM attacker
    and mask the malicious code execution by replaying twenty one seconds of legitimate
    process input signals. The malware payload comprised rootkits which could hide
    its presence and was also equipped with stolen digital certificates to appear
    legitimate. The payload altered the speed of frequency converter drives (from
    specific vendors Fararo Paya from Iran and Vacon from Finland) to cause physical
    damage to over 900 centrifuges [188]. Other than malware attacks, the industrial
    systems are also vulnerable to numerous threats including: DoS, DDoS, ransomware,
    message spoofing, data integrity and non-repudiation, information disclosure,
    and elevation of privileges. 3) Smart City Security Requirements The advances
    in IoT technologies and related smart gadgets have given birth to a new paradigm
    called “Smart Cities.” That aims to dynamically optimize the use and availability
    of numerous tangible and intangible resources. However, due to reliance on IoT
    devices for sensing and initial processing of perceived data, and vulnerability
    of IoT devices to numerous cyber attacks, the attack surface for a smart city
    also increases. Hence, authors in [231] highlight certain necessary requirements
    to design a secure smart city. These requirements include: secure communication
    [232], secure booting of IoT devices [233], security monitoring and incident response
    strategy [231], secure software/firmware update and patching [234], authentication,
    identification, and access control [235]–[237], and data and application security.
    SECTION VIII. Security Measures Figure 18 shows a defense-in-depth approach that
    acts as a guideline to protect IoT systems against threats at all the layers of
    IoT architecture. Not all the IoT applications may require all these measures.
    Depending upon the nature of IoT application, a combination of these guidelines
    may suffice. Risk Assessment and Threat Modelling: For the development of an effective
    defense mechanism firstly, there is a requirement of carrying out the risk assessment
    for all processes, equipment (both hardware and software), stakeholders and information
    assets at each layer of IoT architecture. The aim of such an assessment is to
    identify the assets that are deemed critical for the business. Failure of any
    of which may cause significant security, privacy, financial and safety issues.
    It is followed by an appropriate risk treatment/mitigation process to minimize
    the damage of such events. Correspondingly, most of the information security standards
    such as International Standards Organization (ISO)-27001 [238], and National Institute
    of Standards and Technology (NIST) publication 800–30 [239] enforce risk management
    as an integral part of the overall controls. Any such standard can be followed
    until there are some IoT specific standards on board. Preventive Measures: The
    primary objective of preventive measures is to mitigate the weaknesses which attackers
    can exploit to initiate a security breach. These measures include: Security by
    design: IoT solution architects should consider a non-zero likelihood of security
    breaches while planning, designing and developing an IoT system. It is very important
    that security should be enabled by design and users should have the option to
    change the security settings as per their personal requirements [240], [241].
    Certain practices that help achieving security by design are: trusted environment
    for secure computing, security of all open/debugging ports, preserving integrity
    of the firmware/code, multi-factor authentication, and by default block all traffic
    at the ingress. Identity Management: An effective identity management mechanism
    not only protects against identity spoofing, and device replication attacks but
    also compliments network layer security protocols such as Transmission Layer Security
    (TLS), and IPSec [242]. Tamper-Proofing: IoT device tamper-proofing is considered
    to be a potent defense against physical device compromise, unauthorized access,
    firmware modifications and device cloning [243], [244]. Moreover, complimented
    by a secure execution environment, it can protect against code modification and
    malicious payload execution attacks [242]. Use of Pseudonymous Identities: Use
    of pseudonyms protects the users against most of the privacy threats by de-linking
    user identities from the Personally Identifiable Information (PII). It can be
    achieved by using Public Key Infrastructure (PKI), i.e., by issuing public keys
    to the users of an IoT system for authentication and authorization of various
    services. These public keys can be issued in the form of X.509 certificates by
    a trusted Certificate Authority (CA) [245]. Identity-based Authenticated Encryption
    and Mutual Authentication Scheme: Such an authentication and data security technique
    not only protects against impersonation, MITM, and eavesdropping threats but also
    from data forgery, data modification, and message replay attacks [246]–[248].
    Homomorphic Encryption: To avoid privacy issues in a cloud environment where user
    data is processed, analyzed and shared with third parties, homomorphic encryption
    is considered to be an effective tool [249]. Blockchain Technology: Since the
    success of Bitcoin, a cryptocurrency [250], blockchain has disrupted conventional
    IT industry. The inherent cryptographic security of blockchain protects against
    most of the data forgery, modification, replay and authentication threats. It
    also provides a transparent log of events that facilitates system audit at any
    time [251]. Role-based Access Control: Issues related to the security and privacy
    of data and unauthorized access to the network services can be prevented by deploying
    role-based access controls [206]. Secure Remote Access: Not only in private sector
    but in public organizations as well, sometimes the users are required to work
    from home. Hence, there should be a mechanism of remotely connecting users at
    their homes with the organization networks and systems. For example, use of a
    Virtual Private Network (VPN) service can protect against attacks on corporate
    networks and threats to sensitive Business Intelligence (BI) [252]. Key Management:
    Secure management of cryptographic keys including generation, distribution, storage,
    revocation, and update is an essential requirement to protect against masquerading
    attacks and exposure of critical information. Network Segmentation: To curtail
    the effects of network or a node compromise using network segmentation is recommended
    to be an effective approach. Network segmentation can be achieved by defining
    de-militarized zones, physical isolation, VLANs, software-defined perimeter, application
    firewalls, and content-based filtering [253]. Software-defined Networking (SDN)
    based Virtual Security: Network Virtualization using SDN can augment IoT device-level
    protection by implementing security at the network level, hence, reducing cost
    and add-ons for low-end devices [254]. Use of self-encrypting drives/devices:
    Data privacy is one of the fundamental issues in this age of internet and smart
    technologies. Therefore, it is believed that use of self-encrypting drives and
    on-chip flash memories may provide requisite security by design against unauthorized
    disclosure of private user data [243]. Security Awareness: In the tech savvy world,
    it is very crucial that organizations should invest in educating their employees
    on security concerns. It can be achieved through various workshops, seminars and
    periodic lectures on cyber threats and requisite precautionary measures. Detective
    Measures: As the name suggests, even if an attacker is successful in gaining an
    initial foothold into any IoT system, the detective measures will help in identifying
    any malicious activity. Some of these measures may include: Secure Log Management:
    Most of the attackers/hackers try to wipe off their footprints after an unauthorized
    intrusion into a critical system. Hence, keeping a secure log of all activities
    in the network helps to expose any unusual activity or a security breach. Network
    Security Analysis: CISCO [255], and IBM [256] have developed various network security
    analysis tools that are helpful in detecting numerous anomalies, malfunctions
    and security breaches. Edge Security Analysis: In addition to the network security
    analysis, edge security analytics facilitates isolation of security events at
    the source and limit attack spectrum [242]. Network-level Security Measures: Network-level
    security measures to enforce cross-device security policies can easily detect
    manipulation of actuator actions based on malicious/modified sensors data [257].
    Device Attestation: If possible, there should be some mechanism of performing
    runtime IoT device code attestation to check for the presence of any malicious
    payload or modification in the original code. The successful code verification
    is expected to shrink the attack surface [258]. Penetration Testing and Vulnerability
    Assessment: Periodic network penetration testing is always helpful in detecting
    weaknesses in all the layers of IoT architecture, web UI/APIs, and servers to
    initiate respective counter/response measures. Responsive Measures: The best way
    an organization can respond to a cyber security incident is by preparing an effective
    incident response plan. Mostly, these plans are rolled out by a team usually called
    as Computer Emergency Response Team (CERT). These teams comprise skilled professionals
    including cyber security experts, information security auditors, legal experts,
    IT administrators and other specialized members. The primary objective of CERT
    is to develop and practice a diligent response plan against any security breach
    so that all the team members are clear about their responsibilities. The response
    measures are often termed as after-incident reactive measures, which include:
    Disconnect the affected system from the Internet. Isolation of the compromised
    devices/parts of the system allowing rest of the system to continue uninterrupted
    operation. Revocation and blacklisting of malicious nodes. Initiation of anti-tamper
    mechanism, in which, as soon as the hardware of the node is interfered with, the
    memory of the node that contains firmware and code should immediately be wiped
    off, and the node should only join the network after being physically activated
    instead of OTAA (Over-The-Air-Activation). Recover important business and personal
    data from the backup. Corrective Measures: Once a security event has occurred
    and the compromised devices/parts of the system are identified and isolated, they
    need to be recovered to operational condition. There are two known methods of
    node restoration, i.e., self-recovery and remote attestation. In self-recovery,
    the faulty device performs integrity check of the code running on it and the last
    best configuration stored in read-only memory. If the validation fails, the device
    deletes the current code and re-installs the last best configuration. The device
    then restarts and performs validation of all its modules. Whereas, in the later
    method, the compromised/faulty device sends integrity report to the controller/gateway
    device for remote validation [243]. If the validation fails, a secure firmware
    update process is initiated by the verifier. To conclude, Table 10 summarizes
    threats at different layers of IoT architecture, including physical, network,
    fog/edge, data orchestration/cloud, application, and business layer. Similarly,
    Table 11 highlights the essentials of defense-in-depth approach to secure IoT
    systems. TABLE 10 Threats to IoT TABLE 11 IoT Defense-in-Depth Approach FIGURE
    18. Defense-in-depth approach. Show All SECTION IX. IoT Sustainability While IoT
    technology has gone through a significant level of advancements in recent years,
    there are still a number of constraints associated with battery dependency, limited
    lifetime, and environmental pollution of these portable devices. Until now, energy
    has been one of the barriers to large-scale adoption and deployments in IoT devices.
    Integrating EH systems with IoT devices extend their lifetime, decrease energy
    costs, and reduce environmental pollution by using green energy sources [259].
    Hence, self-powered IoT devices that can operate autonomously are an emerging
    topic of interest among researchers [260], [261]. Energy harvesting is a sustainable,
    cost-effective, green energy solution to provide an alternative energy source
    for remotely deployed IoT devices and sensors. Energy harvesting or scavenging
    is the process of collecting energy from freely available ambient sources, and
    EH is a device that converts ambient energy into DC power to supply Wireless Sensor
    Networks (WSNs), biosensors and IoT devices [262]–[266]. Depending on the type
    of energy available, there are a number of techniques for energy scavenging from
    ambient sources such as solar, thermal, mechanical sources (for example, wind,
    kinetic, vibration) and radio frequency (RF) waves. These sustainable sources
    are all in abundance and are produced in a pure form on our planet [266]. Harvested
    energy is often used for WSN, wearable electronics, and portable IoT devices [259],
    [267]. However, not all ambient sources are appropriate for energy harvesting
    in IoT applications. Basically, the energy harvester (EH) integrated with IoT
    devices should produce at least milliwatts of power from the environment. Figure
    19 shows generated DC power of different energy harvesting technologies and the
    power consumption of different electronic devices to demonstrate the usefulness
    of energy harvesting techniques for these devices [259]. FIGURE 19. Generated
    power using various energy harvesting technologies and typical power consumption
    of devices. Show All A. Energy Harvester Systems in IoT Devices EH system converts
    ambient energy, such as solar energy, thermal, vibrational, or RF energy into
    usable electrical energy. According to Figure 20, an EH consists of three main
    components: power transducer, storage (battery/ supercapacitor), and power management
    unit (interface) [268]. FIGURE 20. General block diagram of an energy harvesting
    system. Show All Transducers convert ambient energy into electrical DC power and
    commonly referred to an “energy harvester.” In addition, the battery/supercapacitor
    collects cumulative DC power over a period of time, and the power management unit
    transfers maximum energy from the battery/ supercapacitor to the IoT device. Since
    energy supply and demand may come at different times, in practice, a temporary
    energy buffer (for example, supercapacitor) and power management unit are necessary
    to deliver harvested energy to the IoT device effectively. Therefore, the power
    interface (power management unit) makes the produced energy feasible to the load
    using various adjustments such as voltage regulation (DC/DC convertor) and power
    management functions [269]. Supercapacitors have been investigated as an alternative
    green energy storage due to their advantages compared to batteries [270]. They
    have quicker charge time (~1000 times over batteries), larger operating temperature
    range (−40~+85°C), ability to withstand millions of charge/discharge cycles, nearly
    infinite shelf life and lack of toxic heavy metals [271]. Although nearly perfect
    for IoT applications, a supercapacitor has its own disadvantages such as lower
    energy density (10 times smaller than batteries) and unstable output voltage over
    long time-span. To address the quick charging and long-lasting requirements of
    IoT systems, and to overcome the inherent disadvantages of supercapacitors, an
    overall power management solution is proposed using supercapacitor management
    integrated circuits (ICs) [272], [273]. Recently, supercapacitors with very low
    equivalent series resistance (ESR) much less than 0.1 ohm have been presented
    which are capable to work efficiently over a wide temperature range of −40° to
    85°C [274]. Further, they can be discharged at high current level up to 10 A which
    make them a suitable candidate for IoT applications and large-scale WSNs in precision
    agriculture (for example, plant and soil sensors) [275]. In addition, supercapacitor
    has an excellent reliability in comparison with battery in the market. High durability
    guarantees less degradation and a longer working time under high temperature condition
    [274]. Table 12 exhibits key benefits of supercapacitor relative to battery. The
    application of supercapacitors in micro-satellites has been also investigated
    [276] as supercapacitor cells are capable of surviving in harsh environments (for
    example, space applications). TABLE 12 Comparison Table of Supercapacitor vs.
    Battery Finally, supercapacitors are ideal storage candidate when a quick charge
    is required to address a short-term power need; whereas batteries are chosen to
    provide long-term energy storage. Therefore, combining supercapacitors with batteries
    in a hybrid mode provide an optimum solution which satisfies both requirements.
    This reduces battery stress, resulting in a longer service life [277]. EH systems
    for IoT devices should fulfill certain requirements, such as power range, cost,
    and dimension. A low profile, compact, maintenance-free, low-cost, and highly
    efficient EH is suitable for IoT devices. Recent advancements in integrated circuit
    architecture have created the potential to integrate multiple features into one
    chip (for example, monolithic microwave integrated circuit technologies). Hence,
    IoT size is not a bottleneck anymore. Moreover, employing RF technologies has
    allowed for size and cost reductions in integrated IoT devices with EH [278].
    Sustainable IoT devices driven by EH have been attracting significant interest
    from different sectors such as smart cities, health care, and precision agriculture
    [259]. Table 13 presents an overview of different sensor types and their maximum
    power demand. Moreover, in each sensor type, a typical sensor and its power consumption
    are presented. Table 14 and 15 present some examples of industrial IoT devices
    powered by integrated EH systems. TABLE 13 Overview of Different Sensor Types
    and Their Power Demand TABLE 14 Overview of Embedded Energy Harvester Used in
    IoT Applications TABLE 15 Overview of External Mounted Energy Harvester Used in
    IoT Applications 1) RF Energy Harvesting RF energy scavenging has experienced
    rapid development recently due to the increasing number of RF transmitter sources,
    which are producing an abundant ambient electromagnetic energy [267]. A prominent
    advantage of RF harvesting is the capability to transform dissipated microwave
    energy into usable electrical power during day and night, both indoor and outdoor.
    Further, penetrations of RF signals inside structures (for example, walls, bridges,
    tunnels) and underground allow for RF energy harvesting and wireless power charging
    where other energy sources (for example, solar, wind) are not available [268],
    [278], [301]. RF energy harvesting offers a novel approach to develop environmentally
    sustainable IoT devices by employing ambient energy and converting electromagnetic
    resources to electricity. To this end, receiving antennas is integrated with rectifying
    circuits (rectifying antenna or rectenna) to harvest RF energy from a focused
    beam (Wireless Power Transfer/ WPT) and other freely available sources in the
    environment (Ambient RF Energy Scavenging). RF energy harvesting system eliminates
    the need for returning IoT devices to base for recharging. These devices could
    be powered through ambient energy sources or wireless power transmission. This
    is of paramount importance for autonomous systems in remote or harsh areas where
    accessibility is a problem [262]. From a practical perspective, efficiency, sensitivity,
    and compactness are key factors of EH, as RF energy harvesting in free space suffers
    from a large propagation loss [302]. Enabling simultaneous multi-band and multi-tone
    signals in the input of an EH system and taking advantage of the RF combining
    method, the rectifier sensitivity and generated output power can be enhanced [261],
    [262], [303]. Further, RF technology allows for size reduction using metamaterials
    in applications where miniaturization is required [303]–[305]. 2) Spaceborne Energy
    Harvesting Another method of generating an alternative energy source for ground-based
    IoT devices is using Sun-synchronous satellites. Sun-synchronous orbit (SSO) is
    a particular kind of polar orbit. Satellites in SSO, traveling over the Polar
    Regions, are synchronous with the Sun. This means they are synchronized to always
    be in the same “fixed” position relative to the Sun. Hence, the satellite will
    always observe a point on the Earth at the same time of the day, which creates
    a number of applications [306]. One of the key applications of this system is
    providing DC power for ground-based IoT devices, as depicted in Figure 21. FIGURE
    21. Block diagram of an energy harvesting system. Show All Space satellites collect
    sunlight using solar cells which transform the absorbed energy into DC power (Figure
    21). Subsequently, the high voltage DC power is supplied to RF generators, i.e.,
    magnetron generates RF power which can be transferred to a ground station or IoT
    devices, directly [307]. The receiving ground-based antenna integrated with rectifier
    (RF to DC convertor) regenerates DC power from RF power. In this method, energy
    is directed from space to the Earth to support large-scale WSNs with sufficient
    power sources. B. Simultaneous Wireless Information and RF Power Transfer High
    data rate, small dimension, and low-cost are important metrics in the next generation
    IoT devices and communication technologies. Hence, the use of simultaneous wireless
    information and power transfer (SWIPT) is investigated to improve energy efficiency
    as well as information transfer of the network [308], [309]. It has been proven
    that RF power transfer allows wireless nodes to recharge their batteries from
    receiving RF signals, leading to the fifth-generation green communication technologies
    [259], [310]. Moreover, conventional forms of SWIPT systems such as time splitting,
    power splitting, antenna switching, and partial switching are suitable for IoT
    networks [308]. In [311], a new concept and design of a three-dimensional antenna
    array is addressed. The purpose of this paper is to enhance efficiency of SWIPT
    systems when integrated into WSN architectures. Using 3D antenna, an omnidirectional
    radiation pattern can be achieved with considerable gain and low power losses
    [312]. Consequently, 3D arrays prove to be a reliable solution to feed low power
    WSNs that are placed over the 360 azimuth angles in a smart grid farm. Moreover,
    several pioneers working on SWIPT have attempted to focus the energy of the electromagnetic
    wave as much as possible in order to increase the efficiency of power and data
    transfer [313], [314]. Nevertheless, the most interesting aspect regarding the
    architecture of SWIPT is how to concentrate electromagnetic power based on the
    location of the sensor. Simple beam scanning approach is suggested to identify
    the location of wireless sensors and concentrating microwave power using beam-steering
    method according to a preset look-up table [315]. Recently, a novel analog real-time
    spectrum analyzer (RTSA) was suggested and experimentally tested on the basis
    of the spectral-spatial decomposition property of the composite right and left
    handed (CRLH) leaky wave antenna (LWA) [316]–[318] which can be used as a beam-steering
    configuration to feed sensors in a smart grid field (for example, large-scale
    farms). According to Figure 22, a leaky wave antenna array is used to feed a variety
    of agriculture sensors in each beam direction. FIGURE 22. Beam-steering configuration
    for feeding sensors (SWIPT application) in a smart grid field. Show All SECTION
    X. IoT Interoperability A. Interoperability Between Standards IoT networks are
    created with massive heterogeneous devices. The communication of these different
    devices is a key problem. To solve this problem, different standards are created
    to standardize the information exchanging process within IoT networks. The authors
    of [319] summarized all these standards and categorize them into communication,
    RFID, Data content and encoding, electronic product code, sensor, network management,
    middle, and quality of service. Apart from these protocols, there are also standards
    designed to fit the IoT use cases, such as, IoT6 [320]. With all these standards
    and protocols aiming for different scenarios, inter-communication between standards
    is an issue. This introduces interoperability problems of IoT. In Table 16, the
    authors of [186] classified interoperability problem into device interoperability,
    network interoperability, syntactical interoperability, semantic interoperability,
    and platform interoperability. The authors from [186] also aggregated different
    works and form seven approaches tackling the problem of interoperability. As the
    first approach, adapters and gateways are utilized as an intermediate bridge between
    different standards and specifications [186]. The intermediate device is compatible
    with multiple standards and specifications. Therefore, such a device can communicate
    with different IoT devices by converting messages between different protocols.
    However, this method assumes TCP/IP support on devices and does not account for
    the limitation of resources of IoT devices. Also, scalability is a problem as
    the message conversion process needs to be defined between all IoT protocols.
    The second approach is using a virtualized network overlay layer above physical
    networks. This approach supports end-to-end communication using different protocols.
    Unfortunately, scalability issues induced by different protocols persist. TABLE
    16 Types of IoT Interoperability [186] The third approach in [186] consists of
    four different network technologies. The first technology is TCP/IP. Interoperability
    is implemented by embedding the TCP/IP stack on smart devices. Therefore, these
    devices can communicate with standard network protocols. The second technology
    is SDN. This programmable network technology provides intelligence, efficiency,
    security, and scalability to IoT networks. This can also be achieved with NFV,
    where virtual networks separate network functions with the physical equipment.
    Furthermore, physical equipment can be shared between different network functions.
    The final technology is fog computing. Fog computing relies on fog servers to
    preprocess raw data from the end devices and preparing these data to be interoperable
    for other applications [186]. The fourth approach is using open APIs [186]. A
    commonly used example is the REST API. Open APIs provide standard methods to access
    data or services. This provides cross-platform and cross-domain interoperability.
    A future direction is a generic API for uniform resource access. A service-oriented
    architecture is implemented above the network layer as the fifth approach to achieve
    interoperability. The aim of this architecture is to package the IoT device resource
    as standard services. Therefore, device data can be standardized into services,
    providing syntactic interoperability [186]. The IoT6 standard is an example of
    this approach. IoT6 is an IPv6-based service-oriented architecture that provides
    interoperability between heterogeneous system components [320]. The last two approaches
    to achieving IoT interoperability are semantic web technologies and open standards.
    Both of these approaches require a recognized organization to provide common definitions
    [186]. Semantic web technologies define a common understanding of the various
    entities. Once a common vocabulary of standard, data and format is agreed, semantic
    interoperability can be achieved. The final approach is the establishment of open
    standards. These standards are provided by recognized organizations to achieve
    interoperability with IoT networks implementing these standards. An example is
    the AllSeen Alliance, defining the AllJoyn for device interoperability and the
    oneM2M for platform interoperability [186]. The ISO also developed a framework
    (ISO/IEC NP 21823) for IoT interoperability [321]. They established standards
    on semantic interoperability and network connectivity. SECTION XI. User Friendly
    IoT This section provides insights into the usability of IoT 2.0. The purpose
    is to create a vision of future IoT that aims to lower the entry barrier of IoT
    services for non-expert users. This vision starts with exploring the previous
    technologies of lowering entry barriers for non-expert users. These technologies
    are cloud computing-based services, which are infrastructure as a service (IaaS),
    platform as a service (PaaS), and software as a service (SaaS). The usability
    of these technologies is created by increasing accessibility, increasing scalability
    and flexibility, the use of virtualization, reducing cost on maintenance, and
    standardization [322], [323]. Accessibility is created by the feature of the cloud,
    where users can easily access the services through the Internet. Scalability and
    flexibility are induced by the virtualization of hardware and software resources
    [323]. Therefore, users do not need to directly configure these resources, as
    a standardized interface can reduce the complexity of resource configuration [322].
    Finally, as maintenance is mostly done by the service providers, the cost of maintenance
    is reduced on the user side [322]. The authors of [324] offered the five features
    to ensure the usability of IoT systems. These features are Plug & Play, interoperability,
    the ability for remote control and monitor, cost effectiveness, and open source,
    open architecture. Also, by deduction from the cloud computing services, a standardized
    interface can increase the usability of systems and fulfill the features of remote
    control and interoperability. However, due to the heterogeneity of IoT devices,
    a solution is to adopt modularization. The authors from [325] proposed Internet
    of Things as a service (iTaaS). iTaaS utilizes service oriented architecture,
    which is built with modular and reusable service modules. Thus, this architecture
    reduces the time of service development, service deployment, and service configuration.
    iTaaS only reduces complexity and interoperability issues for software deployment.
    Different from cloud computing services, IoT devices are heterogeneous and deployed
    in complex environments. Therefore, the customization of IoT devices is important
    to support different use cases [326]. The authors from [326] also emphasized that
    the modularization of IoT devices can reduce cost and complexity for non-technical
    personnel. Therefore, modularization increases the cost effectiveness and usability
    of IoT systems. To reduce the cost of maintenance, IoT devices must operate in
    a self-organized, secure manner and avoid extra human intervention. The authors
    of [327] mentioned that self-organized IoT networks should contain the following
    features: cooperative communication model to support communication across different
    layers with suitable resource control, situational awareness to monitor neighbor
    devices and faults, and automated load-balancing to extend the overall lifetime
    of the whole system. A possible solution is the SONs mentioned in the sections
    above. SONs provide machine learning-driven self-configuration, self-optimization,
    and self-healing functionalities [111]. Finally, as a vision towards the future,
    industry level standardization and efficient device deployment method is required
    for IoT systems. The authors from [328] pointed out that standardization drives
    standard testing and manufacturing procedures. Thus, this provides end users with
    more trust and confidence in IoT products. Another problem with current IoT systems
    is device deployment. Most work on IoT deployment focuses on software deployment
    and topology [324]. However, most devices are still deployed by humans. Novel
    device deployment methods should be invented to automate this process. SECTION
    XII. IoT Applications This section starts with presenting some existing applications
    of IoT systems. These applications are categorized into smart home applications,
    smart city applications, healthcare applications, and smart farm applications.
    Then, a vision of possible applications of Industry 4.0 and Tactile Internet is
    revealed. A. Smart Home Applications Smart home applications leverage IoT devices
    and sensors to provide people convenience. The majority of smart home applications
    are home automation systems, which use the result of analyzing sensor data to
    automate a certain activity [329]. In [329] Healthcare system for elders and people
    with disabilities is a type of home automation system. These systems collect data
    from CCTV, motion sensors, and body sensor networks to perform analytics and push
    medical reminders. Another application is the pet care system. Temperature sensors
    are attached to a pet dog to monitor its body temperature. When the temperature
    sensor detects any anomaly, the air conditioner is automatically switched on to
    comfort the pet. The authors of [330] explored the smart grid as another major
    field of smart home applications. This field of applications leverages smart meters,
    smart appliances, and smart power outlets. The aim of smart grid applications
    is to monitor and control power production and consumption to achieve a balance
    between production and consumption. Furthermore, it reduces the waste of power
    induced by overproduction. Applications under the smart grid field are real-time
    generation monitoring, power plants controlling, alternative energy source controlling,
    and residential production controlling [330]. B. Smart City Applications Smart
    city applications solve problems and issues in the public sector. The authors
    of [331] and [332] both summarized smart city applications in their works (Table
    17). In their work, smart home applications are viewed as a part of the smart
    city applications. Other applications include smart parking, augments maps, logistics,
    smart water supply, smart cars, smart grid, weather monitor, pollution monitor,
    surveillance systems, traffic monitor, and healthcare. TABLE 17 IoT Smart City
    Applications [331], [332] C. Healthcare Applications Compared to traditional and
    manual health monitoring systems, IoT healthcare systems have a few advantages
    [333]. First, IoT devices are relatively portable. These devices can be worn by
    the patients to provide constant monitoring [333]. Also, with IoT devices, voluminous
    data can be accessed remotely in a quicker pack compared to the traditional methods
    [333]. These advantages attracted the development of different IoT healthcare
    applications. The authors of [334] classified IoT healthcare applications into
    home healthcare, mobile health and electronic health, and hospital management.
    Home healthcare IoT applications move the setting from a hospital to the homes
    of people. It is achieved through remote monitoring through IoT devices [334].
    Similarly, mobile health and electronic health also rely on remote monitoring
    of patients. However, it focuses more on wearable sensors [334]. The above two
    types of applications involve single condition applications such as diabetes glucose
    level sensing designed for specific diseases; and cluster condition applications
    such as rehabilitation systems that can help treat different diseases together
    [335]. As the final type of IoT healthcare applications, hospital management applications
    are responsible for the management and improvement of various hospital services
    [334]. For example, safety and violence detection systems using cameras and biometric
    sensors could track staff, patients, and visitors, and detect signs of aggression
    or stress [336]. Equipment tracking and maintenance systems can manage scarce
    shared equipment, and remind staff for requirements of equipment refill or calibration
    [336]. D. Smart Farm Applications The two major types of smart farm applications
    are crop monitoring and animal monitoring. The authors of [337] reviewed several
    different crop monitoring systems. These monitoring systems usually trigger actuator
    actions. In [337], one example is the irrigation system. Humidity, temperature,
    and weather data are collected to make the decision of irrigation. Another example
    is weed detection. In the application of weed detection, images are passed through
    a CNN model to detect weed. If weed is detected, a smart herbicide sprayer robot
    is activated to spray herbicide. Animal monitoring applications aim to use sensors
    data to monitor and predict animal behavior. The authors from [337] described
    a smart beehive application. The smart beehive monitors oxygen, carbon dioxide,
    pollutant levels, temperature, and humidity to determine the health status of
    the bee colony. The authors of [338] reviewed machine learning-based animal monitoring
    applications. This work focuses on animal welfare. The first application of this
    work detects dietary changes and mating periods of cattle using ensemble learning
    based on data from magnetometers and three-axis accelerometers. The second application
    identifies and classifies chewing patterns in calves with DT leveraging optical
    sensor data. The authors from [339] created a full system of smart animal farm.
    This smart animal farm consists of four major applications. The first application
    detects biogases with a gas sensor. When the gas reaches a certain level, it emits
    the gas to prevent harm to the animals. The second application is auto-feeding.
    This application uses ultrasonic sensors to detect the level of food in storage
    and automatically add food using a valve. The third application is water level
    detection. Similar to auto-feeding, a water level sensor is used to open the water
    pump if the water is below a certain level. Finally, the incubator control system
    reads data from the humidity sensor and temperature sensor to control environmental
    parameters using a heater and a fan [339]. E. Industry 4.0 Applications Industry
    4.0 applications focus on CPSs in production and manufacture. The authors of [340]
    determined three important characteristics of industrial applications. The first
    characteristic is cycle time determined by the round-trip time between the control
    center and end device. The second characteristic is the number of nodes determined
    by the size of the system. The final characteristic is reliability determined
    by the quality of information transmission. The authors of [340] also separated
    Industry 4.0 applications into process automation and factory automation. Process
    automation is characterized by an industrial process operated by sensors for data
    collection, controllers for controlling, and actuators for actuating the controller
    decision. The cycle time of process automation should be 100 ms with medium quality
    of information transmission. A more critical scenario is factory automation, which
    is the automation of the manufacturing process [340]. Therefore, it requires frequent
    collaboration between multiple robotics and assembly line machinery. Hence, a
    short latency of 1 ms with high reliability is required [340]. F. Tactile Internet
    Applications The feature of low latency and ultra-high reliability of Tactile
    Internet attract applications like self-driving vehicles and industrial automation.
    For example, V2X communication requires real-time communication with latency less
    than 10 ms, and CPSs with mobile robot collaboration requires high reliability
    and real-time communication in manufacturing applications [341]. However, the
    core of Tactile Internet application should be based on haptic communications.
    The authors from [342] defined haptic architecture into the master domain, the
    network domain, and the slave domain. The master domain is usually a haptic device
    controlled by a human. The haptic device can control the slave domain through
    the network domain. Then, the slave domain returns environmental data and responds
    through the network domain back to the haptic device. Finally, the haptic device
    receives the data and simulate a virtual environment of the slave domain for the
    human to touch and feel. The authors of [341] explored four domains of haptic
    communication applications. The first domain is Tele-medicine. Robust and reliable
    networks allow physicians to perform telesurgery and tele-diagnostic using a remote
    slave robot. The second domain is AR and VR. Haptic communications could provide
    extra reality with the sense of touch. The third domain is serious gaming. This
    requires real-world simulations to solve a certain problem. Haptic communications
    could induce real-world experiences for problem solving within serious gaming.
    Finally, unmanned autonomous and remotely controlled systems provide safety for
    operations in dangerous and difficult-to-reach environments. These operations
    usually involve high precision. Utilizing Haptic communications could perform
    these operations remotely without any delays. SECTION XIII. Research Challenges
    of IoT 2.0 This section summarizes the possible future development of IoT 2.0.
    Some of these development are IoT global connectivity, IoT security architecture,
    ubiquitous IoT devices, energy harvesting-based energy efficiency, IoT reliability,
    and considerations in usability. A. IoT Global Connectivity As current IoT architectures
    evolved with edge computing layers, future IoT architectures focus with IoT global
    connectivity. We believe that the development of 6G networks provides a platform
    for IoT global connectivity. In [343], the 6G networks evolve in the space, time,
    and frequency dimensions. In the space dimension, more transceivers will be deployed
    to increase multipath communication [343]. In the time dimension, there will be
    more fine-grained time slot units to satisfy latency-sensitive applications [343].
    Finally, in the frequency dimension, 6G will operate in a higher frequency spectrum
    to fulfill higher data rate requirements [343]. Also, the increase of frequency
    range is a basis of integrating the satellite system into mobile networks to create
    a space-air-ground integrated architecture [343]. As completion of a network providing
    full coverage, the authors of [344] extended the space-air-ground architecture
    with the vision of underwater networks and specified four tiers within the space-air-ground-underwater
    networks (Table 18). On the commercial side, ground to satellite communications
    widening the system coverage have already emerged. IoT devices can communicate
    with Low Earth orbit (LEO) satellites through VHF and UHF transmissions [345].
    However, there are latencies up to three hours due to coverage gaps between LEO
    movements [345], [346]. Compared to LEO satellites, IoT data transmissions to
    Geosynchronous Earth orbit (GEO) satellites have a lower latency around two minutes
    [346]. These satellite systems initiate the exploration of the future space tier
    IoT network. Previous network coverage, network types, wireless spectrums, communication
    mediums, interactive functions, core services, and layers will be integrated to
    support the 6G architecture [347]. The 6G networks will be providing services
    to new mobile terminals such as smart cars and robots with disruptive communication
    technologies and distributed, intelligent base stations [348]. TABLE 18 Space-Air-Ground-Underwater
    Networks Tiers [344] Table 19 outlines the network performance requirements as
    a foundation of the 6G vision and future applications. Despite the performance
    requirements, there are also various service requirements. These services requirements
    are high security, secrecy and privacy, high affordability and customization,
    and finally, high intelligence [349]. TABLE 19 6G Network Performance Requirements
    [344] To fulfill the 6G requirements, the relevant technologies will evolve with
    three different directions: communication technology, network architecture, and
    network intelligence integration [350]. The authors of [348] promoted two candidates
    for 6G communication technology improvement. The first is photonic-defined radio.
    As a vision, 6G could leverage photonic technology to create a multipurpose network,
    converging different previous network types with full-spectral support [348].
    The second candidate is laser mm wave. This technology supports 100 Gb/s communication
    for communication between space and terrestrial networks [348]. The authors of
    [343] also provided two higher spectrum technologies as an extension to the current
    5G paradigm. These technologies are terahertz communications and visible light
    communications. To support communication in higher frequency spectrum, full-duplex
    communication stack enabling simultaneous signal transmission and reception, and
    novel channel estimation technologies to improve bandwidth efficiency are required
    to handle the high usage demands of 6G networks [350]. With the novel communication
    technologies and limitations of 5G networks, new network architectures need to
    be established to support 6G communications and applications. In [348], there
    are four 6G network architectures, including the hyperspectral space-terrestrial
    integration network discussed above as part of the 6G vision. Subsequently, an
    all-photonic radio access network leveraging photonic engines with all-photonic
    arrayed antenna units to break through the bandwidth and latency limitations of
    5G networks [348]. The third architecture, holographic radio, and photodiode-coupled
    antenna arrays exploiting interference to improve the spectrum efficiency and
    enhance the service quality [348]. Finally, the cognitive radio based on AI and
    photonics aims to further strengthen the current network performance with all-photonic
    arrayed antenna units, and AI is optimizing the network layers and services [348].
    The evolution of AI in 6G will be discussed next. As discussed in section IV above,
    AI and machine learning can be embedded in most layers of the communication network.
    In [351], applying AI in 6G networks is inevitable as the vast and complex network
    topology cannot simply be managed by humans. Also, AI simplifies the network model
    and portraits the unknown non-linearity [351]. Moreover, in [348], AI and machine
    learning can be combined with photonics-based cognitive radio to form a novel
    6G network architecture. In this architecture, AI is used for network deployment
    tasks such as precise capacity forecasts, coverage auto-optimization, network
    resource scheduling, and network slicing [348]. To optimize the AI models for
    these tasks, cross-layer models providing intralayer and interlayer functions
    are more suitable than the current layered designs [344]. B. Machine Learning
    Models This article reviewed machine learning implementations from the physical
    layer to the cloud layer. On the physical layer, the development of end-to-end
    machine learning models could reduce operation complexity. Thus, improving the
    physical layer efficiency [344]. The network layer applications provide services
    such as routing, traffic analytics and control, network management, network security,
    and network configuration. These services lead to the achievement of SONs. However,
    the generalization of these machine learning models is questionable, as most of
    these models are constructed using data generated from only one or a few networks.
    The generalization of network layer machine learning models on IoT networks could
    be a future direction. Furthermore, each implementation of machine learning in
    IoT presented in Section IV is only providing services within a single layer of
    the IoT network architecture. From [344], compared to current layered designs,
    cross-layer models are necessary to provide optimal performance. Therefore, cross-layer
    models should be investigated for future IoT networks. C. IoT Security Architecture
    Due to diverse IoT applications supporting heterogeneous IoT devices, there are
    numerous security challenges that require further investigation. Some of these
    significant issues are discussed here. 1) Vulnerability of Machine Learning and
    AI Technologies Since machine learning and AI are dominant technologies in future
    networks [350], it is essential to provide extra security on the data. Therefore,
    federated learning should be promoted to preserve the privacy of multiple edge
    and end devices [351], [352]. On the other hand, if cross-layer machine learning
    models are the mainstream of future IoT networks, future IoT security architectures
    could also evolve towards cross-layer security and benefit from cross-layer machine
    learning models to ensure safer network services. However, machine learning and
    deep learning based IoT systems are susceptible to “Butterfly Effect.” Where a
    minute change in the data being input to the learning system adversely affects
    the output (learned model). Hence, attackers can maliciously change the input
    data to make the system unstable [353]. Such attacks are difficult to protect
    against since the attackers do not need access to the system itself. Correspondingly,
    there is a need to devise a mechanism to ensure data integrity for different machine
    learning-based IoT applications. 2) POST-Quantum IoT Security As we are near the
    beginning of the era of quantum computing, research into the application of post-quantum
    cryptography on IoT is necessary. In this regard, classical cryptography could
    be vulnerable to quantum computers [354]. Moreover, quantum computing threatens
    the asymmetric encryption algorithms, including RSA, ECDSA, elliptic Curve DH
    (ECDH), and Digital Signature Algorithm (DSA). Most of which can be solved swiftly
    with Shor’s algorithm [355], [356] on a powerful quantum computer. Similarly,
    quantum computers can also speed up the brute force attacks on symmetric encryption
    ciphers by a quadratic factor using Grover’s algorithm [357]. However, irrespective
    of the recent research efforts in post-quantum cryptography by PQCrypto and SAFECrypto
    projects, very little focus has been on addressing the challenges in implementing
    the post-quantum schemes on resource-constrained (especially low power) IoT devices
    [356]. 3) Real-Time Updates The estimated increase in the use of IoT devices to
    a Billion devices in the near future, affirms the need for a secure software/firmware
    update mechanism. However, it seems challenging since not all the devices support
    OTA (Over The Air) updates. Consequently, IoT devices are to be manually updated,
    which is not feasible for real-time IoT applications [358]. Therefore, there is
    a requirement of developing an intelligent and secure protocol to enable IoT devices
    to periodically poll for software/firmware updates so that they are protected
    against the latest threats/attacks. D. Ubiquitous IoT Devices Ubiquitous IoT refers
    to the coverage of different IoT services in different scale of management [359].
    This includes local IoT maintained by regional management platforms, industrial
    IoT managed by particular industries, national IoT controlled by national level
    management unit, and global application IoT coordinated by a global coordinator.
    With this massive number of devices interacting with each others on these different
    scales, energy consumption and management could be issues [359]. To address the
    issues of energy consumption and management, in a future vision, ubiquitous IoT
    devices should conduct autonomous operations with no human intervention or maintenance
    and able to adapt to different scales of operations [360]. To achieve such autonomy,
    AI and machine learning models could be a vehicle automating many management and
    communication operations [361]. This automation can also be achieved from the
    SON methods mentioned in Section IV. On the other hand, energy harvesting methods
    are also an important solution reducing energy consumption and management costs.
    Other than these two important aspects of IoT, the authors of [360] concluded
    some major directions of ubiquitous IoT devices. One direction is multiservice
    IoT, which extends the idea of single service on single nodes towards multiple
    services on single nodes. This aims to increase the value of single IoT nodes.
    Another important direction is the ability of devices to deal with extreme conditions.
    This includes the prediction of energy consumption (and harvesting). Also, low
    energy communication methods technologies will support the development of battery-less
    devices with the aid of energy harvesting methods [360]. Finally, as energy harvesting
    methods are also an important aspect of ubiquitous IoT, the limitations and future
    development of energy harvesting techniques are presented in the next subsection.
    E. Energy Harvesting-Based Energy Efficiency Sensors and IoT devices have now
    become an integral part of the tool-set used to ensure effective monitoring and
    to maintain safety in societies. However, the dependency of these portable devices
    on batteries limits their operation time and range. Energy harvesting is a promising
    solution to provide a sustainable and cost-effective alternative energy source
    to extend the lifetime of IoT devices and reduce energy costs [362], [363]. As
    the number of IoT devices grows, deploying environmentally sustainable IoT devices
    integrated with EHs will lead to the long-term conservation of the environment
    and the global economy. Further, EH techniques can introduce more robust and trusted
    autonomous monitoring systems in the future [364]. The main challenge of implementing
    EHs in IoT networks is the low produced output power (for example, RF and piezo),
    which can be improved through well-designed structures and also applying hybrid
    techniques. Further, ambient sources may always not be available, hence, using
    Sun-synchronous satellites is a key solution to develop the next generation of
    sustainable IoT. Moreover, WPT concept is extended to the simultaneous wireless
    information and power transfer (SWIPT), which allows data and RF power to be transmitted
    via the same electromagnetic (EM) wave. However, the low efficiency of a SWIPT
    system is the main drawback in SWIPT system and can be improved by using novel
    solutions, such as 3D printed antenna array and beam steering based on the LWA.
    In the former, the radiation pattern of the antenna array is optimized on behalf
    of the efficiency and in the later, the beam direction of the antenna is managed
    according to the sensor location. In addition, many recent dispersion-engineered
    analog signal processing (ASP) systems have been introduced based on CRLH Transmission
    Line (CRLH TL) metamaterial-inspired structures [365]. Dispersion engineering
    involves manipulating the electromagnetic wave pathway to handle signals in an
    analog manner, contributing to applications such as real-time Fourier transformers,
    pulse shapers, and etc. Furthermore, several new dispersion-engineered CRLH TL
    metamaterial analog signal processing systems, exploiting the wideband dispersive
    features and design flexibility of CRLH TLs, have been presented [366]. This approach
    is particularly useful in applications where low-cost and low profile systems
    are needed or digital solutions are not available, as for instance in very high
    frequency and high speed ultra-wideband microwave systems, such as 6G technology
    [367]. These new methods will support large-scale WSNs and IoT devices in next
    generation smart grid field applications (for example, smart cities, and precision
    agriculture). F. IoT Reliability The reliability in mission critical applications
    are discussed in Section V of this article. The integration of SDN and NFV in
    mission critical communication networks are also discussed. Other than these aspects,
    IoT communication reliability can also be enhanced through advance error coding
    schemes, and network coding [368]. Advance error coding schemes such as polar
    codes can ensure communication reliability due to its ability of error correction
    [369]. This error correction functionality can operate with low computational
    complexity and decoding latency. Network coding gives intermediate nodes within
    a network processing ability to encode coming traffic [370]. With such ability,
    there are less packet re-transmissions and thus improving the reliability of IoT
    networks. Finally, IoT fault tolerance methods leveraging the concept of graceful
    degradation could also be enhanced for IoT reliability [368]. Achieving the desired
    requirements of mission critical communication in a dynamic environment is very
    challenging. In this regard, the knowledge available at the device level can also
    be utilized to reduce the computation burden at the base station, resulting in
    overall latency reduction [170]. The intelligence at the edge devices can enable
    them to adapt to the network dynamics without relying much upon the base station.
    Promising theoretical enablers for intelligence at the edge devices are presented
    in [371], which can be used to design mission critical communication systems.
    G. Tradeoff in Usability As future IoT networks promote full coverage and integration
    [348], [372], IoT scalability and interoperability between different devices and
    protocols should also be promoted to connect IoT as part of the network ecosystem.
    Using 6G networks as a platform, IoT system performance can be enhanced by 6G
    infrastructures, such as the coverage enhancement from satellites to provide better
    accessibility [372]. With the aid of machine learning and AI, managing these network
    connections and autonomous devices should not require much user attention and
    labor [351]. Therefore, this increases the usability of the system. On the other
    hand, the authors of [349] pointed out that the usage of AI reduces the magnitude
    of system customization. Thus, AI could decrease the usability for users with
    special requirements and preferences. In conclusion, the degree of system intelligence
    should be carefully designed in the future to satisfy general users and users
    with other system preferences. SECTION XIV. Conclusion The definition of IoT remains
    unchanged since the birth of the concept. As we are on the brink of the 5G era,
    the concept of IoT should follow this evolution towards IoT 2.0. This article
    summarizes the recent advancement of IoT technologies and defines it as IoT 2.0.
    First, a general architecture of IoT 2.0 is compared with previous architectures.
    From these architectures, edge computing is the driving force of architectural
    evolution. Current IoT technology is then discussed in seven dimensions as machine
    learning intelligence, mission critical communication, IoT scalability, IoT security,
    IoT sustainability, IoT interoperability, and user friendly IoT. The usage of
    machine learning algorithms is revealed in different layers of IoT applications.
    Then, mission critical communication systems are introduced, focusing on physical
    layer considerations and programmable mission critical communication networks.
    After that, hardware, network and service scalability is explored and lead to
    the discussion of SDN induced scalability. Security is an important aspect of
    IoT systems. In this article, security at different layers is analyzed. Followed
    by security, sustainability of IoT systems is also an essential component. Therefore,
    energy harvesting technologies providing longer lifetimes are evaluated. After
    that, due to the increase of device types and standards, interoperability and
    usability of IoT components are covered. The discussion of recent advancements
    ends with the outline of existing IoT applications. This whole discussion leads
    to the future directions of IoT, portrayed by the vision of future 6G networks.
    Authors Figures References Citations Keywords Metrics More Like This A Survey
    on Security and Privacy Issues in Edge-Computing-Assisted Internet of Things IEEE
    Internet of Things Journal Published: 2021 Machine Learning for Security and the
    Internet of Things: The Good, the Bad, and the Ugly IEEE Access Published: 2019
    Show More IEEE Personal Account CHANGE USERNAME/PASSWORD Purchase Details PAYMENT
    OPTIONS VIEW PURCHASED DOCUMENTS Profile Information COMMUNICATIONS PREFERENCES
    PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help? US & CANADA: +1 800 678
    4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow About IEEE Xplore | Contact
    Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics
    Reporting | Sitemap | IEEE Privacy Policy A not-for-profit organization, IEEE
    is the world''s largest technical professional organization dedicated to advancing
    technology for the benefit of humanity. © Copyright 2024 IEEE - All rights reserved.'
  inline_citation: '>'
  journal: IEEE access
  limitations: '>'
  pdf_link: https://ieeexplore.ieee.org/ielx7/6287639/9312710/09427249.pdf
  publication_year: 2021
  relevance_score1: 0
  relevance_score2: 0
  title: 'Internet of Things 2.0: Concepts, Applications, and Future Directions'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.1145/2830629.2830648
  analysis: '>'
  authors:
  - Bill Tomlinson
  - Bonnie Nardi
  - Donald J. Patterson
  - Ankita Raturi
  - Debra J. Richardson
  - Jean-Daniel Saphores
  - Daniel Stokols
  citation_count: 11
  full_citation: '>'
  full_text: '>

    This website uses cookies We occasionally run membership recruitment campaigns
    on social media channels and use cookies to track post-clicks. We also share information
    about your use of our site with our social media, advertising and analytics partners
    who may combine it with other information that you’ve provided to them or that
    they’ve collected from your use of their services. Use the check boxes below to
    choose the types of cookies you consent to have stored on your device. Use necessary
    cookies only Allow selected cookies Allow all cookies Necessary Preferences Statistics
    Marketing Show details       skip to main content University of Nebraska Lincoln
    Browse About Sign in Register Journals Magazines Proceedings Books SIGs Conferences
    People Search ACM Digital Library Advanced Search Conference Proceedings Upcoming
    Events Authors Affiliations Award Winners HomeConferencesACM-DEVProceedingsDEV
    ''15Toward Alternative Decentralized Infrastructures RESEARCH-ARTICLE SHARE ON
    Toward Alternative Decentralized Infrastructures Authors: Bill Tomlinson , Bonnie
    Nardi , Donald J. Patterson , + 4 Authors Info & Claims DEV ''15: Proceedings
    of the 2015 Annual Symposium on Computing for DevelopmentDecember 2015Pages 33–40https://doi.org/10.1145/2830629.2830648
    Published:01 December 2015Publication History 10 citation 196 Downloads eReaderPDF
    DEV ''15: Proceedings of the 2015 Annual Symposium on Computing for Development
    Toward Alternative Decentralized Infrastructures Pages 33–40 Previous Next ABSTRACT
    References Cited By Index Terms Recommendations Comments ABSTRACT New forms of
    infrastructure are needed in a world characterized by the burdens of global climate
    change, a growing population, increasing socio-technical complexity, and natural
    and human stressors to our human systems. Enabling communities to transition to
    a more resilient configuration of infrastructures is crucial for establishing
    a distributed portfolio of processes and systems by which human needs may be met.
    This paper proposes a potential way to increase infrastructure resilience by supporting
    the creation of alternative, decentralized infrastructures (ADIs) composed of
    small-scale, heterogeneous systems and processes. We see two possible roles for
    these ADIs: first, they could be integrated with existing infrastructures in the
    industrialized world, thereby providing some redundancy during times of strain
    on larger centralized systems; and second, they could help developing communities
    leapfrog centralized and more capital intensive conventional infrastructure. We
    present a model for how ADI systems may be built, based on principles from software
    engineering. Finally, we identify some challenges that go beyond technical implementation
    details in the instantiation of ADIs, and offer some thoughts on how to address
    them. References Aditya, V. and Sasikumar, K. 2013. Nutrient management decision
    support system for livelihood security of farmers. Proceedings of the 3rd ACM
    Symposium on Computing for Development (ACM DEV ''13) (New York, New York, USA,
    2013). Agrawal, R. and Sundari, S.K. 2012. KrishiEkta : Integrated Knowledge and
    Information Distribution System for Indian Agriculture. Proceedings of the 2nd
    ACM Symposium on Computing for Development (ACM DEV ''12) (New York, New York,
    USA, 2012). Atzori, L., Iera, A. and Morabito, G. 2010. The internet of things:
    A survey. Computer networks. 54, 15 (2010). Show All References Cited By View
    all Helmrich A, Markolf S, Li R, Carvalhaes T, Kim Y, Bondank E, Natarajan M,
    Ahmad N and Chester M. (2021). Centralization and decentralization for resilient
    infrastructure and complexity. Environmental Research: Infrastructure and Sustainability.
    10.1088/2634-4505/ac0a4f. 1:2. (021001). Online publication date: 1-Sep-2021.
    https://iopscience.iop.org/article/10.1088/2634-4505/ac0a4f Norton J, Penzenstadler
    B and Tomlinson B. (2019). Implications of Grassroots Sustainable Agriculture
    Community Values on the Design of Information Systems. Proceedings of the ACM
    on Human-Computer Interaction. 3:CSCW. (1-22). Online publication date: 7-Nov-2019.
    https://doi.org/10.1145/3359136 Motloch J. (2019). Co-design Methods and Sustainable
    Development. Encyclopedia of Sustainability in Higher Education. 10.1007/978-3-319-63951-2_311-1.
    (1-11). http://link.springer.com/10.1007/978-3-319-63951-2_311-1 Show All Cited
    By Index Terms Toward Alternative Decentralized Infrastructures Applied computing
    Computers in other domains Human-centered computing Recommendations Interoperability
    between the X.509 and EDIFACT Public Key Infrastructures: The DEDICA Project DEXA
    ''98: Proceedings of the 9th International Workshop on Database and Expert Systems
    Applications During these last years, a big amount of efforts have been devoted
    to specify and develop public key infrastructures (PKIs). Several initiatives
    around the world have given as a result the emergency of the one PKI based on
    X.509 certificates and other ... Read More Empowering Communities in Marginalized
    Surroundings: Opportunities from Collaborative Community-Managed Electrification
    and Advanced ICT CHI Greece 2021: CHI Greece 2021: 1st International Conference
    of the ACM Greek SIGCHI Chapter Marginalized communities in Africa present a challenge
    for sustainable and equal development. Opportunities for breaking out from poverty
    are scarce. Electrification has been seen to act as an important enabler for improving
    livelihood in such ... Read More An exploration of user-generated wireless broadband
    infrastructures in digital cities This paper examines the broadband connectivity
    options available in digital cities. It offers an overview of services provided
    by commercial operators, the public sector and by citizens themselves, arguing
    that shortcomings in existing fixed broadband ... Read More Comments 45 References
    View Table Of Contents Footer Categories Journals Magazines Books Proceedings
    SIGs Conferences Collections People About About ACM Digital Library ACM Digital
    Library Board Subscription Information Author Guidelines Using ACM Digital Library
    All Holdings within the ACM Digital Library ACM Computing Classification System
    Digital Library Accessibility Join Join ACM Join SIGs Subscribe to Publications
    Institutions and Libraries Connect Contact Facebook Twitter Linkedin Feedback
    Bug Report The ACM Digital Library is published by the Association for Computing
    Machinery. Copyright © 2024 ACM, Inc. Terms of Usage Privacy Policy Code of Ethics'
  inline_citation: '>'
  journal: ''
  limitations: '>'
  pdf_link: null
  publication_year: 2015
  relevance_score1: 0
  relevance_score2: 0
  title: Toward Alternative Decentralized Infrastructures
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.1109/access.2022.3178728
  analysis: '>'
  authors:
  - Muhammad Hussain Mughal
  - Zubair A. Shaikh
  - Khurshed Ali
  - Safdar Ali
  - Saif Hassan
  citation_count: 7
  full_citation: '>'
  full_text: '>

    IEEE.org IEEE Xplore IEEE-SA IEEE Spectrum More Sites 404: Page Not Found The
    page you were looking for could not be found. Browse or search IEEE Xplore to
    continue. Email us at onlinesupport@ieee.org for further assistance. © Copyright
    2024 IEEE - All rights reserved.'
  inline_citation: '>'
  journal: IEEE access
  limitations: '>'
  pdf_link: https://ieeexplore.ieee.org/ielx7/6287639/6514899/09784850.pdf
  publication_year: 2022
  relevance_score1: 0
  relevance_score2: 0
  title: IPFS and Blockchain Based Reliability and Availability Improvement for Integrated
    Rivers’ Streamflow Data
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.3390/en16020820
  analysis: '>'
  authors:
  - Muhammad Waseem
  - Mubarak Ali Khan
  - Arman Goudarzi
  - Shah Fahad
  - Intisar Ali Sajjad
  - Pierluigi Siano
  citation_count: 18
  full_citation: '>'
  full_text: '>

    Web Store Add shortcut Name URL Customize Chrome'
  inline_citation: '>'
  journal: Energies
  limitations: '>'
  pdf_link: https://www.mdpi.com/1996-1073/16/2/820/pdf?version=1673415536
  publication_year: 2023
  relevance_score1: 0
  relevance_score2: 0
  title: 'Incorporation of Blockchain Technology for Different Smart Grid Applications:
    Architecture, Prospects, and Challenges'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.3390/su142316131
  analysis: '>'
  authors:
  - Ania Cravero
  - Sebastián Pardo
  - Patricio Galeas
  - Julio López Fenner
  - Mónica Caniupán
  citation_count: 6
  full_citation: '>'
  full_text: '>

    Citation: Cravero, A.; Pardo, S.;

    Galeas, P.; López Fenner, J.;

    Caniupán, M. Data Type and Data

    Sources for Agricultural Big Data and

    Machine Learning. Sustainability

    2022, 14, 16131. https://doi.org/

    10.3390/su142316131

    Academic Editors: Dionysis Bochtis,

    Dimitrios Aidonis and Charisios

    Achillas

    Received: 27 September 2022

    Accepted: 20 November 2022

    Published: 2 December 2022

    Publisher’s Note: MDPI stays neutral

    with regard to jurisdictional claims in

    published maps and institutional afﬁl-

    iations.

    Copyright:

    © 2022 by the authors.

    Licensee MDPI, Basel, Switzerland.

    This article is an open access article

    distributed

    under

    the

    terms

    and

    conditions of the Creative Commons

    Attribution (CC BY) license (https://

    creativecommons.org/licenses/by/

    4.0/).

    sustainability

    Review

    Data Type and Data Sources for Agricultural Big Data and

    Machine Learning

    Ania Cravero 1,*

    , Sebastián Pardo 1, Patricio Galeas 1

    , Julio López Fenner 1 and Mónica Caniupán 2

    1

    Centre of Excellence for Modelling and Scientiﬁc Computing, Computer Science and
    Informatics Department,

    Universidad de La Frontera, Temuco 4811230, Chile

    2

    Information Systems Department, Universidad del Bío-Bío, Concepción 4030000, Chile

    *

    Correspondence: ania.cravero@ufrontera.cl

    Abstract: Sustainable agriculture is currently being challenged under climate
    change scenarios

    since extreme environmental processes disrupt and diminish global food production.
    For example,

    drought-induced increases in plant diseases and rainfall caused a decrease in
    food production.

    Machine Learning and Agricultural Big Data are high-performance computing technologies
    that

    allow analyzing a large amount of data to understand agricultural production.
    Machine Learning and

    Agricultural Big Data are high-performance computing technologies that allow the
    processing and

    analysis of large amounts of heterogeneous data for which intelligent IT and high-resolution
    remote

    sensing techniques are required. However, the selection of ML algorithms depends
    on the types of

    data to be used. Therefore, agricultural scientists need to understand the data
    and the sources from

    which they are derived. These data can be structured, such as temperature and
    humidity data, which

    are usually numerical (e.g., ﬂoat); semi-structured, such as those from spreadsheets
    and information

    repositories, since these data types are not previously deﬁned and are stored
    in No-SQL databases;

    and unstructured, such as those from ﬁles such as PDF, TIFF, and satellite images,
    since they have

    not been processed and therefore are not stored in any database but in repositories
    (e.g., Hadoop).

    This study provides insight into the data types used in Agricultural Big Data
    along with their main

    challenges and trends. It analyzes 43 papers selected through the protocol proposed
    by Kitchenham

    and Charters and validated with the PRISMA criteria. It was found that the primary
    data sources are

    Databases, Sensors, Cameras, GPS, and Remote Sensing, which capture data stored
    in Platforms such

    as Hadoop, Cloud Computing, and Google Earth Engine. In the future, Data Lakes
    will allow for

    data integration across different platforms, as they provide representation models
    of other data types

    and the relationships between them, improving the quality of the data to be integrated.

    Keywords: agriculture; big data; machine learning; data type; data source

    1. Introduction

    Agriculture is an economic activity performed to produce food and is highly depen-

    dent on weather and climate. In addition to other activities, agriculture is necessary
    to

    sustain human life [1]. Agriculture is affected by climate change in several ways,
    such as:

    the increase in extreme weather events, as they impact soil erosion due to droughts
    and

    ﬂoods; variations in precipitation; changes in average temperatures; changes in
    pests and

    diseases; problems with carbon dioxide; changes in the growing season of plants;
    changes

    in food quality and nutrition; and changes in sea level [2]. According to Wakelin
    et al. [3],

    droughts are expected to signiﬁcantly impact plant production, as they can impact
    primary

    production through effects on plant pathogenic organisms and plant diseases. Some
    re-

    sults are the weakening of host defenses or those associated with the rapid evolution
    of

    increased pathogenicity within pathogen populations. On the other hand, the impact
    of

    climate change on temperature and precipitation is expected to affect various
    foliar diseases.

    All these changes affect crop yields, leading to differences in the growth stages
    of plants

    Sustainability 2022, 14, 16131. https://doi.org/10.3390/su142316131

    https://www.mdpi.com/journal/sustainability

    Sustainability 2022, 14, 16131

    2 of 37

    during extreme weather events. For these, there is an urgent need to improve agricultural

    production while minimizing environmental impacts [1].

    Digital agriculture (such as agrotechnology and precision agriculture) is a new
    sci-

    entiﬁc discipline that promotes agricultural productivity and minimizes environmental

    impact through data analysis [4]. These data are extracted from current agricultural
    opera-

    tions using various sensors, satellite images, and photographs. Data analysis
    allows for

    more accurate decision making due to a better understanding of crop dynamics,
    weather

    conditions, soil, and the use of farm machinery [4].

    As the number of smart machines and sensors on farms increases and a greater

    variety of data is used, farms will become increasingly data-driven. This is driving
    the

    development of Smart Farming through Cloud Computing and the Internet of Things

    (IoT) [5]. The difference between precision farming and smart farming is that
    the former

    was developed for farm management, and the latter considers real-time situations
    triggered

    by an event [6]. On the other hand, smart farming includes intelligent assistance
    in

    implementing, maintaining, and using IT, allowing farmers to react quickly to
    sudden

    changes such as disease alerts or weather events [6,7].

    Big Data and Machine Learning (ML) have emerged as two High-Performance Com-

    puting (HPC) technologies that use data to create new opportunities for analyzing
    and

    understanding complex agricultural processes [4,8]. Some applications belong to
    two or

    more domains (Big Data, ML, HPC), such as digital twins or proﬁt simulation engines
    in

    the context of Industry 4.0, which include speciﬁc hardware and software components

    optimized for massive workloads [9]. One example is HiBench, a Big Data benchmark

    offering six categories of workloads, including ML. Another example is BigBench,
    which

    covers the collection, storage, and analysis steps of a Big Data system’s life
    cycle. Big-

    DataBench also uses data motifs to generate synthetic data based on real data
    at scale.

    These data can be structured, semi-structured, or unstructured, from which the
    workload

    is measured to prepare the data for ML testing and execution [10]. On the other
    hand,

    signiﬁcant advances have been acheived in HCP, ML, and Big Data tools. These tools

    are used in environmental analysis, weather management, weather forecasting, disaster

    management, water management, and energy management, as well as remote sensing.
    The

    increased use of these tools is due to rapid advances in smart technologies, high-resolution

    remote sensing techniques, and the incorporation of data from social networks
    [8,11].

    A signiﬁcant challenge for using Agricultural Big Data and ML is the analysis
    of the

    large volumes of data produced by data sources and IoT networks. These include
    data from

    uncrewed aerial vehicles (UAVs), digital imagery, and satellites, which must be
    integrated

    into a large common repository, as most of these data are unstructured [12].

    In Big Data Agriculture and ML, structured, semi-structured, and unstructured
    data

    are often used, adding complexity to the analysis process as their use is a signiﬁcant
    chal-

    lenge [13]. Unstructured data come from ﬁles containing a large amount of information,

    which is hidden from the data scientist. Examples of such archives are satellite
    images,

    surveys, and videos. On the other hand, semi-structured data have been stored
    in spread-

    sheets and repositories containing important and unimportant data for the desired
    analysis.

    Therefore, it is necessary to process these data to obtain an essential structured
    data set.

    Unfortunately, the processing of unstructured data is not trivial, requiring the
    use

    of specialized tools and the knowledge of experts in this area. It also requires
    selecting

    the right types of repositories and databases for further processing and analysis
    [14]. It

    is, therefore, crucial to identify the available data, the processing necessary,
    and possible

    studies based on the generated data, as ML requires test data sets of sufﬁcient
    quality to

    achieve the expected learning [15,16].

    It is essential to understand the types of data and the sources from which they
    come,

    as different types of analysis can be used with ML. According to Nandi et al.
    [17], analytics

    can be descriptive, diagnostic, predictive, and prescriptive. The prescriptive
    analysis is

    the most complex, as it is responsible for ﬁnding a solution among various variants
    to

    Sustainability 2022, 14, 16131

    3 of 37

    optimize resources and increase operational efﬁciency: the more complex the studies
    to be

    performed, the more complex the data processing.

    According to Firdaus et al. [18], it is essential to know the data type before
    applying

    any algorithm. Therefore, the data type plays a vital role in pre-processing and
    visualization.

    There are four main data types: numerical, categorical, time series, and text.
    Numerical

    data are further classiﬁed into continuous and discrete. Categorical data types
    represent

    quality; concepts such as “good”, “bad”, and others are used to deﬁne levels.
    These data

    must be processed to be represented as numbers and not text.

    On the other hand, time series data types occur mainly in logistic recommender

    systems, when the time sequence is the most important. Text-type data are words
    that

    cannot be analyzed as well as numerical values. According to the author, it is
    important to

    determine the data to be analyzed with ML as well as whether pre-processing is
    required

    to obtain a quality data set. Often, this task is not simple and requires specialists
    to carry

    out data engineering processes to transform the data properly [18].

    All these aspects must be considered when designing a Big Data system for agriculture,

    as it requires the interdisciplinary work of several disciplines, such as data
    scientists, data

    engineers, computer scientists, agronomists, etc. Furthermore, deciding the conﬁguration

    of this equipment requires a budget and people’s availability to solve the problem.
    Different

    technologies are required if structured or raw data are used.

    This work aims to identify the data types and data sources used in ML and Agricultural

    Big Data, whether structured, semi-structured, or unstructured, according to their
    condition.

    In addition, we aim to classify the data types according to the data sources found,
    such as

    repositories, databases, and platforms, to identify new data types and trends.
    According

    to the Kitchemham and Charters protocol [19] and the PRISMA criteria [20], the
    paper is

    developed as a Systematic Literature Review.The discussion on data use, challenges,
    and

    trends in the development of Agricultural Big Data and ML serves as a basis for
    future

    research, as there are still no formal standards and methods for their construction.
    On the

    other hand, we provide a knowledge base on the use of data in Agricultural Big
    Data for

    agronomists, farmers, agricultural engineers, and others. Our work is essential
    as we have

    not found existing literature reviews explaining data types and data sources in
    Agricultural

    Big Data. However, there are several reviews on data types in other domains, such
    as

    social science [21], smart cities [22], remote sensing [23], recommendation systems
    [24], and

    clustering algorithms [16].

    The structure of the paper is as follows: In Section 2, the general concepts of
    Agri-

    cultural Big Data, ML, data types, and storage repositories are described. In
    Section 3 the

    methodological process is described. Section 4 describes the main results and
    answers

    to the research questions presented in Section 3. In Section 5 a discussion of
    the main

    challenges and trends is presented. Section 6 presents a description of four threats
    that

    challenge the validity or our study. We close the article with a summary of our
    ﬁndings

    and conclusions.

    2. Background

    This section includes the following subsections. First, the basic concepts of
    Agricultural

    Big Data are described. Next, the following subsection identiﬁes the main ML algorithms

    used in Agricultural Big Data. This is followed by the basic concepts of data
    types and

    storage repositories.

    2.1. Agricultural Big Data

    Big Data is a type of technology used when the solution is not trivial due to
    the

    complexity of the data. It is usually deﬁned through the four dimensions (or 4
    V’s). The

    ﬁrst V represents the volume of data generated from a data source, stored, and
    processed

    for further analysis. The second V refers to the variety of data due to multiple
    structures,

    structures, and sizes. Data can be extracted as raw or unstructured, semi-structured,
    or

    structured data. The third V refers to the speed of data transmission needed for
    data to be

    Sustainability 2022, 14, 16131

    4 of 37

    processed and analyzed. The fourth V refers to veracity, which refers to the capability
    to

    validate the grade of the data [25].

    Big Data allows scientists and engineers to ﬁnd patterns and trends by examining

    large amounts of data from multiple origins. A few years ago, Big Data science
    became an

    essential modern discipline for data analysis [26]. Big Data includes a mix of
    classical do-

    mains of artiﬁcial intelligence, including ML, such as statistics, mathematics,
    and computer

    science. In general, it has database systems, ML, and distributed systems [27].

    The Big Data process begins with specifying the sources to extract the data required
    [28].

    The next step is storing the data in one of the created representatives, which
    depends on

    its processing level, whether unstructured data, semi-structured, or structured.
    The data

    are then transformed through ﬁltering and sorting to improve the data quality
    for various

    analyses [29]. The next step is to analyze the classiﬁed data using analytical
    tools and algo-

    rithms (e.g., Deep Learning (DL), ML, OLAP) [30], as well as general data science
    [29,31].

    This allows decision makers to analyze the data to visualize trends [32].

    For example, Semlali et al. [33] use Big Data tools to monitor atmospheric composition.

    The system architecture contains the data source layer, ingestion, storage via
    Hadoop, the

    data management layer, infrastructure, and the monitoring and security layer.
    They used

    data on pollutant gas emissions from other sources, such as agriculture, enterprise,
    and

    transport. The authors were able to continuously monitor the atmospheric composition

    through remote sensing. Figure 1 depicts the complete process.

    Figure 1. Architecture of Big Data for atmospheric composition monitoring.

    MySQL is a database that stores data that have been extracted, processed, and
    trans-

    formed. Then, Python, Java, and BASH are used scripts to read the raw data in
    Hadoop.

    Figure 2 shows an example of the process.

    Another example is Alex et al. [34], who develop a Big Data system that predicts

    whether fertilizers will cause disease in crops. They use data such as soil moisture,
    average

    rainfall, and soil nutrients. The authors also used data such as phosphorus (P),
    nitrogen

    (N), magnesium (Mg), calcium (Ca), and sulfur (S). The Big Data process starts
    with data

    enrichment, followed by data clustering, so the data can be classiﬁed and analyzed
    to

    deliver recommendations. Finally, the Hadoop ecosystem was used to store and process

    the data analyzed with ML. Figure 3 depicts the complete process.

    Sustainability 2022, 14, 16131

    5 of 37

    Figure 2. Representation of the ingestion process.

    Figure 3. Big Data architecture for fertilizer management and yield prediction.

    Big Data enables data scientists and farmers to understand farming behavior, such

    as weather, land, soil, crops, animal production, weeds, food safety, biodiversity,
    remote

    sensing, farmer decision making, insurance, ﬁnancing, and climate change [12].
    It also

    enables the development of supply chain platforms, allowing agents to access high-quality

    products, processes, and tools that are capable of improving performance, predicting

    demand, and addressing farmers according to crop needs, such as the appropriate
    use

    of fertilizers.

    2.2. Machine Learning

    ML is considered an area of research focusing on mathematical theory, system char-

    acteristics, and the product of learning algorithms. The investigation process
    is inter-

    Sustainability 2022, 14, 16131

    6 of 37

    disciplinary, encompassing disciplines such as artiﬁcial intelligence, knowledge
    theory,

    optimization, statistics, cognitive science, control, mathematics, and engineering
    [35]. ML

    is attractive because it can be used in various science domains, signiﬁcantly
    impacting

    society. For example, ML can be used to solve problems such as pattern recognition,
    recom-

    mendation controllers, fact prediction, data mining, and automatic control systems
    [36,37].

    ML can be classiﬁed into three algorithms depending on the available data: super-

    vised, unsupervised, and reinforcement learning. Table 1 summarizes these techniques,

    differentiating them from various points of view, particularly in data processing.
    The

    “Learning Algorithms” row explains the methods used, and the “Data Processing
    Tasks”

    row contains the problems to be solved. In ML, the data must be structured, so
    it must

    be processed in most cases. This task consists of cleaning the data to remove
    noise and

    inconsistencies, integrating it if it is drawn from multiple sources, and transforming
    the

    data to normalize it [38].

    Table 1. Machine Learning techniques.

    Classiﬁcation

    Supervised Learning

    Unsupervised Learning

    Reinforcement

    Learning

    Data processing

    tasks

    Classiﬁcation

    Estimation

    Regression

    Prediction

    Clustering

    Decision-making

    Learning algorithms

    Support vector machine

    Hidden Markov model

    Naive Bayes

    Neural networks

    Bayesian networks

    Gaussian mixture model

    K-means

    X-means

    Q-learning

    Sarsa learning

    TD-learning

    R-learning

    Supervised and unsupervised learning is primarily focused on data analysis. On
    the

    other hand, reinforced learning is used for decision-making situations. The ML
    algorithms

    presented in Table 1 can optimize the implementation of a task by analyzing samples
    of data

    or backgrounds. An important aspect is that ML will function better with more
    extensive

    volumes of data to be explored [38].

    ML algorithms have been used to improve livestock welfare; increase livestock
    pro-

    duction; improve yield prediction, crop management, disease detection, weed detection,

    crop quality improvement, and species distinction; and improve water and soil
    manage-

    ment [4,12,38,39].

    There are numerous challenges when executing ML in Agricultural Big Data since

    some techniques must be adapted when there is a large volume of data or the data
    are

    variable. There are also challenges in validating the data and obtaining a quality
    set. Solving

    these challenges is not a trivial task, but proposals have been carried out, allowing
    progress

    in this area of research [12].

    2.3. Data

    Agricultural Data refer to variables and/or attributes that farmers require for
    carrying

    out their business activities. The data include speciﬁc agricultural records or
    parameters,

    such as crop varieties, yields, soils in use, extensions, etc., but also business-related
    informa-

    tion, such as products, suppliers, clients, payments, etc. They are classiﬁed
    into structured,

    semi-structured, and unstructured data, depending on the storage format in which
    the data

    are found [40].

    Villars et al. [41] explain that structured data are blocks of information, and
    unstruc-

    tured data are raw ﬁles. They determined that 23.7% of the data in an organization
    are

    structured, while 61.8% represent unstructured data, with a difference of almost
    70EB

    (exabyte, or billion gigabytes). Eberendu et al. [42] explain that 80 percent
    of an orga-

    nization’s data is unstructured. Examples of these data are those coming from
    social

    networks, customer calls, emails, online comments, and information from embedded

    devices, among others.

    Sustainability 2022, 14, 16131

    7 of 37

    2.3.1. Structured Data

    Structured data have an established format and, therefore, a certain length in
    memory;

    they are also easy to store since they have a logical structure previously deﬁned
    by the

    database engine. The data are organized in an identiﬁable structure, which is
    easy for

    people in an organization to access and retrieve [42]. Figure 4 presents an example
    of

    structured data, as the data can be stored in a database with a Date-type format.
    On

    the other hand, the day is stored as an Integer data type. Moreover, the daily
    potential

    evapotranspiration (ET0), crop coefﬁcient (Kc), applied R M3, and Balance are
    stored as

    Float-type data since a higher precision is required. Finally, the theoretical
    RT and applied

    RT data are Time data types.

    Figure 4. Structured data for irrigation scheduling.

    The corresponding data in Figure 4 were stored in a database after applying the

    irrigation model to a crop, organized as a table. Each row corresponds to a model
    run. In

    this way, different columns can be observed where the date of execution of the
    model, the

    day of the crop phases, and variables of the irrigation model such as Kc, ET0,
    water balance,

    etc., are indicated. Furthermore, the columns with a red border indicate in hours
    both the

    theoretical irrigation time and the irrigation time applied. In this case, it
    is observed how

    the model recommends a series of theoretical hours, and the applied time column
    shows

    no irrigation activity, indicating that the crop has not been irrigated those
    days [43]. This

    type of information can be stored in a structured database since the data can
    be deﬁned as

    Integer, Date, Time, Float, Char, Varchar, or String data types, among others.

    The most common structured databases are relational databases since they use as

    a storage base the structure of data groups according to relational algebra. The
    data

    query language used is the Structured Query Language (SQL), a standard that allows
    the

    deﬁnition of data groups and related data types and their manipulation. SQL uses
    the

    SELECT statement to perform data searches, INSERT to store information, UPDATE
    to

    modify data, and DELETE to delete information. Traditional analytics have focused
    on

    structured data as it is possible to access these data through SQL queries [42].
    Relational

    databases include MySQL, PostgreSQL, Oracle, SQL Server, etc.

    2.3.2. Semi-Structured Data

    Semi-structured data are irregular data that may be insufﬁcient and have a structure

    that changes as new data are entered; therefore, their structures are unpredictable
    [44].

    This means they are neither table-oriented in a relational database model nor
    ordered

    in object-oriented databases. Semi-structured databases enable the storage of
    data from

    different sources that have related properties but are different in format. Examples
    of semi-

    structured data are email, Extensible Markup Language (XML), JavaScript Object
    Notation

    (JSON), Comma-Separated Values (CSV) ﬁles, and Key-value, among others [42]. Figure
    5

    shows semi-structured data in JSON format, as the information is stored as a document

    and not as a data table. The data are extracted from a satellite image, and then
    the data

    are stored as required at that time, for example, coordinate data, the type of
    analysis, the

    information about the image, the date, etc.

    Sustainability 2022, 14, 16131

    8 of 37

    Figure 5. Semi-structured data of a geographic area.

    Semi-structured databases enable the storage of the information available at the
    mo-

    ment without generating a previous structure, as relational databases do. However,
    on

    the other hand, they allow for storing detailed information of an attribute, for
    example,

    coordinate values. In this sense, semi-structured databases are scalable and adjustable
    to

    the analysis requirements of decision makers. In addition, these databases allow
    us to

    work with clustered data volumes and process them quickly. Examples of semi-structured

    databases are MongoDB, CouchDB, Neo4J, Redis, etc.

    2.3.3. Unstructured Data

    Unstructured data have no deﬁned structure, as they stores raw ﬁles such as bitmaps,

    images, comments or text, e-mail, and other data types that are not part of a
    database. Al-

    though e-mails are organized in a database, the body of the message contains unstructured

    text, which must be processed to obtain the information. Examples of unstructured
    data

    are ﬁles such as Motion Pictures Expert Group 3 (MP3), Portable Document Format
    (PDF),

    Joint Photographic Experts Group (JPG), Plain Text Document s(TXT), and Tag Image
    File

    Format (TIFF), among others [42]. Table 2 presents some examples of unstructured
    data.

    Figure 6 describes the evolution of unstructured data from traditional numerical
    data

    to image data. Numerical data are the simplest since they can be stored in a few
    bytes of

    memory (e.g., 2 or 4 bytes). Each character of a text is stored in 1 byte. On
    the other hand,

    images and audio require more storage space. In particular, remote sensing images
    hold

    much information from sensors. Finally, videos use a series of stored images,
    requiring

    more memory space.

    Sustainability 2022, 14, 16131

    9 of 37

    Table 2. Examples of sources and unstructured data.

    Source

    Examples

    Radar

    Seismic, oceanographic, meteorological, and vehicular.

    Static

    PDF ﬁles, printable ﬁles, scanned documents, faxes.

    Dynamics

    This type is derived from documents that can be created, edited, reviewed,

    and approved by many people or groups, such as white papers, policy

    procedures, business documents, and other ofﬁce documents.

    Digital media

    Audio, video, animation, and images.

    Communication documents

    Email, social content, web documents, and instant messaging records

    Location/Geo Data

    Remote sensing images, sensors, GPS, weather, trafﬁc.

    Social Media

    Facebook, YouTube, Instagram, LinkedIn.

    Sensor

    Weblogs, Detail Record, equipment longs, smart meters, manufacturing

    sensors, trading systems, data records.

    Logs

    File log, clickstream

    Transactions

    Web store, Customer information from CRM systems, transactional ERP,

    general ledger.

    Micro-Bloggins

    Customer feedback streams, Twitter

    Figure 6. Evolution of unstructured data.

    Unlike structured data, unstructured data cannot be easily explored, sorted, or
    visual-

    ized, let alone analyzed. Instead, data transformation tools and procedures are
    required

    to extract knowledge relevant to the organization [12]. An example of unstructured
    data

    is those coming from satellites circling the Earth, which, through remote sensing,
    capture

    data from the planet. These photographs are illustrations of the Earth’s character
    as seen

    from space. Some examples of data that can be obtained are solar radiation reﬂected

    from the Earth, infrared radiation, and backscattered radar intensity. These data
    are ob-

    tained through sensors onboard satellites, which charge radiation of different
    wavelengths

    providing multispectral raster data [45]. Figure 7 presents an example.

    Sustainability 2022, 14, 16131

    10 of 37

    Figure 7. Multi-spectral Raster Data. (Image taken from MODIS).

    Multispectral and multidimensional data are typically available in labeled multiband

    image ﬁles (GeoTIFF), an extension of the TIFF structure. For example, a Landsat
    7 photo-

    graph is a GeoTIFF ﬁle consisting of eight spectral bands, individually storing
    a distinct

    wavelength spread or ejected from the Earth’s exterior. Collecting this data type
    is a difﬁcult

    job, as it must be processed quickly through parallel and distributed systems
    due to the

    size of the data [45].

    Multiband images store multiple values in a single pixel because they store data
    from

    multiple sensors concerning the geographic location. Depending on the analysis
    required,

    the bands for which information will be retrieved from the sensors are selected.
    To achieve

    a more accurate representation of the Earth’s surface phenomena, data from different
    bands

    can be used [45].

    The most commonly utilized active sensors in remote sensing are laser altimeters,

    radar, and Light Detection And Ranging (LiDAR). Passive sensors operate in the
    electro-

    magnetic spectrum’s visible, infrared, and thermal parts to detect the natural
    radiation

    emitted or reﬂected by objects. Examples of passive sensors are Red, Green, and
    Blue

    (RGB), hyperspectral, multispectral, and thermal. In particular, LiDAR sensors
    obtain 3D

    properties in the state of point clouds through photogrammetric processing [46].
    Informa-

    tion from LiDAR data is used to generate statistics such as mean height, height
    percentiles,

    and other data to estimate forest biomass [23]. With the use of ML, it is possible
    to classify

    tree species, regardless of the type of sensor used [46].

    Satellite imagery and analysis data are currently available from Amazon Web Ser-

    vices [47] and Google Earth Engine (GEE) [48]. GEE uses Hadoop as a platform for
    data

    storage, processing, and analytics. These platforms have opened doors to large-scale

    geospatial analysis and monitoring, as researchers have leveraged these high-performance

    computing platforms and ML techniques to analyze global changes [49,50].

    Sustainability 2022, 14, 16131

    11 of 37

    2.4. Massive Storage

    2.4.1. Hadoop

    Apache Hadoop is an open-source data processing ecosystem used for distributed

    computing, which has been created to address Big Data problems. In addition, Hadoop
    has

    been extended to use geospatial data. Hadoop generally contains a Hadoop Distributed

    File System (HDFS) and a MapReduce programming environment for data processing
    [45].

    Figure 8 depicts the architecture of the Hadoop ecosystem [51].

    Figure 8. The Hadoop ecosystem.

    2.4.2. Cloud Computing

    Cloud Computing provides various services over the internet that are scalable.
    This

    technology enables the sharing of resources using the infrastructure owned by
    a cloud

    service provider. Users or customers of the provider can access resources on demand
    on

    a pay-per-use basis. It allows the abstraction of infrastructures, such as storage,
    network,

    and applications, through its three services: Platform as a Service (PaaS), Infrastructure

    as a Service (IaaS), and Software as a Service (SaaS) [52]. The fourth layer of
    services

    is Business Intelligence (BI), which contains applications for measuring management

    indicators. Figure 9 shows all the types of services in Cloud Computing.

    Sustainability 2022, 14, 16131

    12 of 37

    Figure 9. Cloud Computing Services.

    3. Methodology

    The study method employed was a Systematic Literature Review (SLR). In particular,

    we use PRISMA (Preferred Reporting Items for Systematic Reviews and Meta-Analysis)

    criteria that provide a sequence of steps to follow: identiﬁcation, screening,
    eligibility, and

    inclusion. On the other hand, the methodology proposed by Kitchenham and Charters
    [19]

    was used to deﬁne the objectives and research questions (RQ). The RQs in this
    study are the

    following: (1) What problems are solved with Agricultural Big Data and ML? (2)
    What data

    types are used in ML and Agricultural Big Data? (3) What are the sources that
    generate data

    in Agricultural Big Data and ML? (4) What are the storage platforms? A search
    string was

    constructed in the review process using the keywords selected from the RQs. The
    terms

    selected were “Machine Learning,” “Big Data,” and Agriculture to obtain the maximum

    possible number of papers to be analyzed. The population-intervention-comparison-results-

    context criteria were also applied to relate the RQs (PICOC [19]). Agricultural
    Big Data is

    the application area and, therefore, the population. The data retrieval process
    has to do

    with the intervention. For this study, data matching was not applied. The results
    are the

    solutions to the identiﬁed problems of implementing ML in Agricultural Big Data.

    The work was performed with a team of 4 researchers and an assistant. First, one

    of the investigators prepared the review protocol plan to ensure the correct selection
    of

    studies. Then, two of the investigators carried out the search process. All participated
    in the

    ﬁltering process, so it was necessary to hold two meetings weekly to eliminate
    biases and

    doubts. Finally, all the research teams read the selected papers to extract the
    information

    that provided answers to the RQs.

    The search string “Machine Learning” OR “ML,” AND “Big Data,” AND “agriculture

    OR farm” was used in Scopus, IEEE, ACM, Springer, MDPI, and Web of Science. The
    words

    in the search string had to appear in one of the following sections of each article:
    title,

    abstract, and keywords. In addition, conference papers and English scientiﬁc journals
    were

    considered inclusion criteria. Another criterion was the date of the publications,
    from 2015

    to 2022.

    The ﬁltering process was as follows. First, 5620 articles were identiﬁed in ACM,

    536 in the Web of Science database, 1321 in Springer, 56 in MDPI, and 122 in IEEE.
    The

    research team applied the exclusion criteria to eliminate papers unrelated to
    this study. First,

    duplicate papers, or papers not written in English, are eliminated. Then, all
    researchers

    read the title and keywords to select papers containing any of the search words.
    Next, all

    researchers read the abstracts to determine the contributions in the ﬁeld of Agricultural

    Big Data. Finally, each article was read to eliminate those not using ML. In the
    end,

    43 documents were obtained that met the expectations.

    Sustainability 2022, 14, 16131

    13 of 37

    A total of 7655 articles were reviewed. First, screening eliminated duplicates,
    books,

    and technical papers, resulting in 5233 potential articles. The next step was
    to read the

    abstracts of the articles to check if they contained information on Agricultural
    Big Data.

    After this process, 521 articles remained. These papers were reviewed in their
    entirety

    to check if they included information on Big Data and ML in agriculture. Many
    of the

    articles are reviews or editor’s comments. In the end, 43 papers were relevant.
    Figure 10

    summarizes the process followed by the team to select relevant papers, and Figure
    11

    presents the selected papers by year.

    Figure 10. Selection process for relevant papers.

    Sustainability 2022, 14, 16131

    14 of 37

    Figure 11. Selected papers by year.

    4. Results

    This section answers the RQs described in the methodology.

    4.1. Agricultural Big Data and Machine Learning

    The 43 selected articles describe various problems in the domain of agriculture
    that are

    possible to solve through Big Data and ML. Many Agricultural Big Data solutions
    enable

    crop improvement, animal production management, weather, land management, food

    availability and security, climate change management, and weed prevention, which
    are

    essential for farmers’ decision making. Figure 12 shows the number of papers found
    by

    problem and area.

    Figure 12. Problems vs. areas in Agricultural Big Data and Machine Learning.

    The Figure shows that most of the selected papers solve problems related crops,

    weather and climate change, and farmers’ decision making. The main concern in
    crops

    is improving production, reducing costs, increasing quality, and managing infections.

    Balducci et al. [53] propose using ML to analyze environmental data such as temperature,

    wind, and humidity, as well as productive and structural data such as land area
    and soil

    type. In the same vein, Kedarmal et al. use a graph for farmers to take a convenient
    step

    to enhance production by predicting crop yields. To do so, they rely on an ontology
    of

    Sustainability 2022, 14, 16131

    15 of 37

    smart agriculture through ideas and effects related to agriculture, which are
    linked in a

    knowledge graph [54]. In contrast, Ramaraj et al. [55] analyzed the various rice
    crops for

    yield prediction. The data used are crop morphological characteristics and yield
    parameters.

    Yoki et al. developed the BMS (Big Data Application Machine Learning-based Smart
    Farm

    System) to improve farmers’ income by increasing crop productivity [56]. Priya
    et al. [57]

    present a farming representative to maximize crop production and quality by suggesting

    types of crops to be planted according to soil conditions.

    In the case of crop identiﬁcation and classiﬁcation, Shelestov et al. [58] used
    satellite

    images to generate a crop classiﬁcation map to analyze each zone separately. The
    same

    problem is addressed by Yahata et al. [59], who use detection techniques on photographs

    acquired from a cyber-physical system to obtain crop growth data and environmental

    information. The authors developed good rules to deﬁne a good harvest by detecting

    ﬂowers and pods. Saldana and Guo [60] automatically classiﬁed four types of fruit
    trees

    (coconut, banana, mango, and papaya) using high-resolution aerial images. They
    used ML

    to locate and classify trees and locate paths for transport. They used algorithms
    to decide

    the density of clusters of individual tree species delivering a more helpful understanding

    of the condition of the agricultural site. Finally, they developed a method to
    optimize fruit

    picking founded on distinctive scenarios, such as maximum time, path length, storage

    location, and safety points.

    Fenu and Malloci [61] use ML models to improve the detection of crop diseases,
    mainly

    late blight disease in potatoes. For this, they used data from weather stations
    in the region.

    Finally, Tombe [62] uses images of the crop to determine the state of health and
    identify

    diseases and weeds. It integrates computer vision for smart farming.

    Regarding farmers’ decision making, Dutta et al. [63] captured data from domain

    experts on agricultural processes, soil understanding, and harvest optimization
    about

    climatic conditions. Then, they analyzed the data to develop low-cost plantations.

    Doshi et al. [64] developed AgroConsultant, a Big Data system that helps farmers

    make better decisions on which crops to grow, taking into account the geographical
    location

    of their operation, the planting season, soil characteristics, and environmental
    factors such

    as temperature and rainfall.

    Rehman et al. [65] used sensors to capture real-time data. These climatic data
    from

    the soil and atmosphere allow planning planting dates. The third problem concerns
    yield

    enhancement. The work of Tarik and Mohammed [66], who predict the cereal production

    rate in an unstable climate area, stands out. They captured water data through
    a Big Data

    system. The data are processed to obtain dew point, humidity, temperature, wind
    direction,

    wind speed, pressure, visibility, gust speed, events, precipitation, weather conditions,
    etc.

    In Kumari et al. [67], the authors proposed a multidisciplinary model for smart
    agri-

    culture using the IoT, Big Data, Cloud Computing, Machine Learning, Wireless Sensing

    Networks, Sensors, and Mobile Computing. Data will be collected through sensors,
    includ-

    ing data on rainfall, temperature, humidity, soil, and moisture. These data are
    analyzed

    to send management indicators to farmers and agricultural product vendors. The
    arrows

    relate to weather conditions and temperature. The authors conclude that the real-time

    system will increase productivity and reduce costs.

    Katyayan et al. [68] used sensors in the ﬁeld to collect personalized data in
    real-time.

    The data are managed through analytics to provide the user with accurate, personalized

    assistance and guidance solutions. For the analysis, they used Natural Language
    Processing

    and computer vision. Additionally, they collected data from real-time crop images
    analyzed

    with ML. Finally, they use an embedded system that accumulates historical information
    to

    be analyzed by experts, helping farmers with decision making.

    Melgar-García et al. [69] present a new big data triclustering approach based
    on

    evolutionary algorithms to extract three-dimensional patterns. They use the vegetation

    index of grapevine crops to carry out precision agriculture. The aim is to develop
    speciﬁc

    crops considering each growing area’s variability.

    Sustainability 2022, 14, 16131

    16 of 37

    Wang and Mu [70] propose a modern agricultural technology platform. The platform

    is for precision agriculture through a network of wireless sensors, which help
    measure

    wavelengths of light to determine wheat yellow rust. Additionally, they use aerial
    pho-

    tographs from drones to analyze the disease’s severity and the outbreak’s area.

    Wang et al. [71] developed an intelligent agricultural system to process the massive

    data of agricultural monitoring. The system is divided into three sub-systems:
    the remote

    sensing agricultural situation monitoring and information service system, which
    includes

    growth monitoring and yield estimation; the remote sensing system for monitoring
    the

    resource environment and natural disasters; and the monitoring and supervision
    system

    for new rural development and key agricultural construction, which includes new
    rural

    construction and low-yield ﬁelds. Ahamed [72] uses remote sensing for diversiﬁed
    land

    use planning for food and nutrition security, crop growth monitoring, yield forecasting,

    land suitability analysis, forest productivity, and drought assessment for crops,
    vegetables,

    and fruits.

    Venkatesan et al. [73] propose an ML-based prediction model to analyze the energy

    use of environmental devices to collect data on crop growth in a smart paprika
    farm

    through the IoT. The authors propose a multi-time-randomized energy management
    plan

    for greenhouses with energy sources. They also use ARIMAs, which are integrated
    models

    of climate and crop production.

    Kuchler et al. [74] developed a classiﬁcation strategy for the annual mapping
    of

    integrated crop–livestock systems (iCL) on a regional scale. The authors discuss
    the

    efﬁcient use of land, indicating that it is important to use the land for crops
    and livestock.

    They show that this is possible through intelligent analysis.

    4.2. Data Types

    The data used in the different Agricultural Big Data proposals come from sensors,

    which, in some cases, are IoT devices, satellites, cameras, GPS, databases, and
    data from

    farmers’ expert knowledge. Figure 13 shows the primary data used using a cloud
    of

    concepts. It is observed that the most used data in the selected papers are temperature,

    humidity, crop area, wind direction, and wind speed.

    Figure 13. Cloud of data concepts used in Agricultural Big Data.

    Sustainability 2022, 14, 16131

    17 of 37

    The data mainly used are structured data. Several papers mention using unstructured

    data from photographs, GPS, and satellite images. Table A1 in Appendix A presents
    a

    summary of the data by the author.

    The following subsections describe the use of structured and unstructured data.

    4.2.1. Structured Data

    Structured data have a deﬁned format, such as Int, Date, and Float. In addition,
    93% of

    the selected papers describe the data and their use. Tables 3–7 present a summary
    of these

    data. The following subsections describe the use of the data according to the
    data source.

    Table 3 presents the structured data whose sources are sensors.

    Table 3. Structured data from sensors.

    Author

    Data

    Type of Data

    [53]

    Temperature average, min and max, rainfall amount, amount of

    phosphate and potash minerals, humidity, geo-coordinates (station id,

    point of presence (Poi), latitude, longitude, altitude), sun’s rays

    incidence (r_inc), wind speed and direction, atmospheric pressure, etc.

    Int

    [57]

    Air temperature, relative humidity, wind speed, wind direction, soil

    temperature, soil moisture, radiation, diffusion rate, and precipitation.

    Int

    [75]

    Hours of activity, travel times, preferred pasture areas and timings,

    anomalous situations, number of fence and posture infractions.

    Int, String

    [76]

    Plant data: temperature, humidity, illumination intensity, air gasses

    (CO2, O2, O3, NO2), plant ID, time; system user data: such as name,

    password, and role; video ﬁle data: device, location, time, access port.

    Int, DateTime, String

    [77]

    Air temperature, air humidity, light intensity, soil moisture, fruit size,

    branch length, soil salinity, wind speed, wind direction, conductivity,

    soil temperature, CO2, PH.

    Int, Float

    [34]

    Temperature, rainfall, PH, water level, nitrogen, phosphorous,

    potassium, calcium, magnesium, sulfur

    Int, Float

    [54]

    Nitrogen, phosphorus, potassium, saline soil (ha), sodic soil (ha).

    Int, Float

    [65]

    Temperature, humidity

    Int, Float

    [66]

    Temperature, dew point, humidity, pressure, visibility, wind direction,

    wind speed, burst speed, events, rain, weather conditions, month, day.

    Int

    [56]

    Color, weight, inner temperature, outer temperature, humidity.

    String, Int, DateTime

    [67]

    Temperature, humidity, moisture, and rain.

    Int, Float

    [78]

    Temperature, relative humidity, mean sea level pressure (hPa), snowfall

    amount, sunshine duration, evapotranspiration, FAO reference

    evapotranspiration, wind speed, wind direction, soil temperature, soil

    moisture.

    Int, Float

    [73]

    Internal temperature, internal humidity, ventilation temperature,

    heating temperature, outside temperature, outside solar temperature,

    dew point, hourly accumulated light, hourly solar radiation,

    temperature difference, crop output production

    Int, Float, String

    Bendre et al. [79] describe the technologies used in Precision Agriculture and
    the data

    types when Big Data is required. He explains that the data sources are usually
    agriculture

    machinery data, remote sensing data, GIS data, GPS data, and farmer documents,
    such as

    crop monitoring and Varying Rate Fertilizers. The authors used daily data of minimum

    and maximum temperature (in oC), humidity (in %), and precipitation (in mm) from
    a

    weather station to predict the climate. All these structured data are of type
    Int.

    On the other hand, Balducci et al. [53] use three different data sets from enterprise,

    scientiﬁc investigation, and national statistical academies. With the IoT and
    ML, they obtain

    data for the forecasting and reconstruction of cutting or erroneous data, as agreeably
    as

    the detection of defective hardware sensors from the monitoring stations. The
    data from

    the 41 monitoring stations are a mix, max, temperature average, precipitation
    amount, a

    portion of phosphate and potash minerals, humidity, and wind.

    Priya et al. [57] use data from satellite imagery, sensors located in ﬁelds, irrigation-

    related messages, and climate and crop data. Some attributes are radiation, relative
    humid-

    ity, wind speed, air temperature, soil temperature, wind direction, soil moisture,
    diffusion

    rate, and precipitation. All these structured data are Int. The data are used
    to analyze each

    area’s most suitable crop type.

    Sustainability 2022, 14, 16131

    18 of 37

    Nóbrega et al. [75] use a system of rules to monitor sheep in vineyards. Structured

    data are obtained by processing sensor data through ML techniques and validation
    rules.

    The structured data are hours of movement, travel times, select range areas and
    timings,

    unknown problems, and several fence and posture infractions. The select pasture
    areas and

    anomalous conditions data are STRING data types or numerical codes assigned according

    to the rules. All other data are of type Int.

    On the other hand, Yang et al. [80] use a data sensing instrument deployed on
    a farm

    to organize plant environmental and growing data in real-time by using different
    sensors

    to accumulate data such as humidity, temperature, air indices, and illumination.
    The data

    are then uploaded to a cloud forum. The purpose is to evaluate the growth efﬁciency
    of

    plants at every moment to direct agricultural activities in smart greenhouses.
    All structured

    data are of type Int, except the time, which should be of type DateTime. The system

    also stores user data, such as name, password, and role, and video data, such
    as device,

    location, and time. Most of these data are of the String type. Although the data
    are stored

    in MySQL, when a data volume is generated, the data are transferred to the platform

    with Hadoop. A similar Agricultural Big Data system was developed by Wang et al.
    [77],

    in which they used sensors to analyze the growth of pears. The data collected
    are air

    temperature, humidity, light intensity, soil moisture, fruit size, branch length,
    and soil

    salinity. Wind speed, direction, conductivity, soil temperature, CO2, and PH,
    are Int or Float

    structured data. On the other hand, Alex et al. [34] use sensor data to collect
    information

    on fertilizers and how they inﬂuence plant growth. The data used are structured
    data of

    type Int and Float, despite storing them in Hadoop.

    Tarik et al. [66] used data from sensors located at a weather station. The data
    are

    temperature, dew issue, pressure, humidity, visibility, wind speed, wind direction,
    gust

    speed, events, weather conditions, precipitation, etc. All these data are Int.
    In Donzia and

    Kim [56], they use a smart farm system to monitor the crop environment, accelerate
    climate

    resilience, and increase production through real-time knowledge of agricultural
    regulations.

    They use sensors to capture data such as color, weight, indoor temperature, outdoor

    temperature, and humidity. Color is a String data type stored as Int when performing
    the

    digital conversion. All other data are Int. Table 4 presents a summary of data
    and data

    types obtained from cameras.

    Table 4. Structured data from photographic cameras.

    Author

    Data

    Type of Data

    [59]

    Climate, temperature, humidity, solar radiation, soil condition, shade.

    Int, Float, String

    [81]

    pixels

    Int

    [68]

    Temperature, light, humidity, and soil moisture.

    Int, Float

    Yahata et al. [59] use two methods to observe soybean ﬂowers and pods in natural

    ﬁelds. The developed image detection methods include sensors in an agricultural
    cyber–

    physical system to analyze plant growth status and environmental knowledge (e.g.,
    weather,

    humidity, temperature, soil condition, solar radiation, etc.). The data obtained
    are analyzed

    using rules useful for proper cultivation. On the other hand, the images are processed
    and

    analyzed using ML. Flower detection uses a coarse-to-ﬁne method, where ﬂower prospect

    locations are ﬁrst detected using information from tonality and Simple Linear
    Iterative

    Clustering. Data used are Int, Float, and String Type. On the other hand, Vasumathi

    and Kamarasan obtained a test data set from images extracted from a camera and
    a cell

    phone. They captured more than 200 images of different disease-free fruits. They
    developed

    patterns to identify three levels of diseased fruits, low, medium, and high, all
    through pixel

    comparisons [81]. The pixel data of the images are Int. However, the fruit condition
    data

    were stored in a NoSQL database.

    As for the structured data from GPS and databases, Tables 5 and 6 present a summary.

    Sustainability 2022, 14, 16131

    19 of 37

    Table 5. Structured data coming from GPS.

    Author

    Data

    Type of Data

    [82]

    cropland class, number of ﬁeld samples

    Int

    Amani et al. [82] used a vehicle’s GPS to determine the crop type. It allowed
    them to

    easily and quickly obtain numerous ﬁeld samples of various types of crops.

    Table 6. Structured data from databases.

    Author

    Data

    Type of Data

    [57]

    Historical crop data.

    String, Int

    [83]

    max temp, min temp, precipitation, month, year

    Int,Float, Date

    [61]

    temperature, relative humidity, wind speed, wind direction,

    precipitation accumulation, solar radiation, potato blight disease,

    cultivar resistance

    Int, Float, String

    [55]

    crop yield, farmer’s name, Place–Village–Panchayat–Taluk–District,

    survey number, contact details, soil type, paddy variety, types of

    fertilizers used at the different stages of cultivation, ﬁeld size, irrigation

    type

    String, Int, Float

    [64]

    soil type, aquifer thickness, soil pH, thickness of topsoil, precipitation,

    temperature, latitude, longitude, distance from sea, rainfall, production

    area, under, cultivation

    Int, String

    [84]

    soil pH, state of Shire, winter crop, amount of cultivation, stubble

    management

    Int, Float

    [60]

    type of tree, x (pixel), y (pixel), size, conﬁdence, land, cover, class,

    ground cover: impervious surfaces, buildings, low vegetation, trees,

    cars, and background

    Int, String

    [85]

    max air temperature, min air temperature, average temperature,

    relative humidity, wind speed, solar radiation, sunshine hours,

    reference evotranspiration

    Int, Float

    [86]

    min temperature, max temperature, avg temperature, humidity, wind

    speed, precipitation, wind direction, cloud cover, visibility, atmosphere

    pressure

    Int, Float

    [87]

    precipitation, temperature (minimum, maximum and average),

    cloudiness, vapor pressure, frequency of wet days, frequency of frost on

    the ground.

    Int, Float

    [88]

    consistency of all animals, percentage of artiﬁcial insemination, mean

    value of age of cows expressed in days, mean number of parturitions

    per cow, number of occurred deliveries, mean number of necessary

    inseminations which resulted in positive pregnancy diagnosis, etc.

    Int, Float

    [82]

    NDVI, NDWI

    Int

    [89]

    wgg price, duck egg price, export volume, output, market elasticity,

    labor force change and inventory as variables.

    String, Int, Float

    [90]

    crop ﬁeld dataset, name area

    String, Int, Float, Date

    Balducci et al. [53] describe data from the Istat database, which contains well-structured,

    publicly available data used to predict future crop quantities. In addition, scientiﬁc
    data

    from the National Research Council predict speciﬁc crop species. The data used
    are soil

    type, year of the time series, crop type, province, total altitude location, cultivation
    area,

    full crop production, and total harvest production. Soil type, crop type, and
    province are

    String-type data; the date is of type Date, and the other data are of type Int.
    One of the

    challenges cited by the authors is the reading of data from the National Research
    Council

    since many of these are incomplete and only partially sorted.

    In Sathiaraj et al. [83], they processed data from the Applied Climate Information

    System (ACIS) to obtain the climatic elements such as precipitation and minimum
    and

    maximum temperature.

    Fenu et al. developed DSS Land, a system that acquires meteorological data from

    ARPAS (Regional Agency for Environmental Protection of Sardinia) weather stations
    accord-

    ing to speciﬁc procedures and time intervals. The stations observe several meteorological

    variables, including relative humidity (%), the direction of the accumulation
    of precipitation

    (mm), temperature (oC), wind speed (km/h), and solar radiation (W/m2) [61]. All
    these

    Sustainability 2022, 14, 16131

    20 of 37

    data are of types Int and Float. They also process the data to classify the cultivar
    resistance,

    a String data type.

    Gnanasanka and Ramaraj [55] use a soil data set, a weather data set, a rainfall
    data set,

    and a pest data set. These datasets are extracted over the entire rice growing
    period (from

    seed sowing to harvest time). Initially, the meteorological data sets of rainfall
    and weather

    were extracted from CTC-CECRI, Mandapam, and the State Groundwater Resources Data

    Center in Chennai. Subsequently, they conducted soil and water tests to know the
    soil

    types and their moisture and evaporation level and water tests to identify the
    pH value

    and type of water (hard water or soft water). All these data are structured from
    relational

    databases that store the data from IoT devices.

    In Doshi et al. [64], they use data from the “India Agriculture and Climate Data

    Set” database to generate training datasets for ML. The analyzed data allow generating

    alternative recommendations for farmers. The database contains soil and meteorological

    data from 1957 to 1987. The parameters refer to ﬁve major crops (jowar, bajra,
    wheat,

    maize, and rice) and 15 minor crops (jute, cotton, barley, gram, groundnut, tobacco,
    potato,

    ragi, tur, sesame, rapeseed and mustard, soybean, sunﬂower, sugarcane, and pulses).
    The

    data analyzed are soil type, aquifer thickness, pH, topsoil thickness, rainfall,
    temperature,

    and location parameters. All these data are Int and Float. The second database
    used

    is “Latest Socio-Economic Statistical information & Facts About India,” from which
    they

    obtain rainfall data for 117 years. With these data, the authors could predict
    the sector’s

    rainfall [64].

    Ip et al. [84] use data from two databases to analyze weeds. The ﬁrst database
    contains

    information from herbicide resistance tests and annual ryegrass samples from farms
    in

    southern Australia. The second database comes from farm surveys of winter crops
    and the

    amount of cultivation before sowing. It also contains information on stubble management,

    the amount of water since sowing, and soil pH. All these data are of type Int
    and Float.

    On the other hand, Saggi et al. [85] used data from the India Meteorological De-

    partment database to calculate evapotranspiration accurately, as it recreates
    a vital part of

    irrigation water scheduling for its efﬁcient use. The data are maximum atmosphere
    tempera-

    ture, relative humidity, min air, average temperature, wind speed, solar radiation,
    reference,

    evapotranspiration, and sunshine hours,. All data are of type Int or Float. Reddy
    et al. [86]

    also use Indian Meteorological Department data to predict rainfall behavior. The
    data

    used are min temperature, max temperature, wind direction, avg temperature, humidity,

    precipitation, cloud cover, wind speed, visibility, and atmospheric pressure,
    which are Int

    and Float data types.

    Abbona et al. [88] use genetic programming to analyze the health and growth status

    of the animals. To do this, they access data from the ANABORAPI system, which
    contains

    the history of all the farms registered in the Herd Book of the Breed. ANABORAPI
    stores

    information on each farm, which technicians record during routine checks by veterinarians

    and, presently, by agriculturalists. The data are recorded through a Workabout
    portable

    computer or with a smartphone. The data obtained are the average value of cow
    age

    expressed in days, the consistency of all animals, the percentage of artiﬁcial
    insemination,

    the average numeral of calvings per cow, and the total number of calvings that
    have

    occurred. In addition, the averages of the required inseminations that resulted
    in a positive

    gestation diagnosis have been obtained. Several of these structured data are of
    type Int

    or Float.

    Amani et al. [82] use the database of the federal Department of Agriculture and
    Agri-

    Food Canada, which provides maps of the Annual Inventory of Crops in Space. The

    maps allow identiﬁcation of the non-agricultural land cover within the agricultural
    area of

    Canada. The authors report that spatial remote sensing is one of the forms to
    obtain direct

    reports clarifying the evolution of the atmosphere due to the breadth and complexity
    of

    agricultural regions.

    Su and Wang [89] used egg data to analyze the factors inﬂuencing prices. The data

    include egg price, duck egg price, export volume, output, market elasticity, labor
    force

    Sustainability 2022, 14, 16131

    21 of 37

    change, and inventory. The data are of type String, Int, and Float, as they come
    from a

    structured database.

    Table 7 below presents a summary of structured data from satellites. The data
    obtained

    have been processed through various systems, mainly GIS and GEE.

    Table 7. Structured data from satellites.

    Author

    Data

    Type of Data

    [87]

    precipitation, min temperature, max temperature, avg temperature,

    cloud cover, vapor pressure, wet, day frequency, ground frost frequency,

    color bands

    Int, Float

    [82]

    NDVI , NDWI.

    Int, Float

    [91]

    NDVI, NDWI, PSRI, B8A, B12, B11, B08, B07, B06, B05, B04, B03, B02

    Int, Float

    [92]

    RGB bands, NIR band, SWIR 1 and SWIR 2 bands, thermal bands,

    NDVI index, EVI index, NDWI index, latitude, longitude, slope

    Int, Float

    [69]

    three-dimensional datasets, NDVI index, Soil-Adjusted Vegetation

    Index (SAVI), EVI Index, and Green NDVI (GNDVI)

    Int, Float

    [74]

    NDVI, EVI, near-Infrared spectral band (NIR), and mid-Infrared

    spectral band (MIR).

    Int, Float

    It is possible to obtain satellite images containing valuable information for
    the crop, cli-

    mate, and land analyses. Some examples of data are the Normalized Difference Vegetation

    Index (NDVI), which is possible to calculate using Equation (1); the Normalized
    Difference

    Water Index (NDW) and the Normalized Difference Water Index (NDWI), which are
    given

    in Equation (2); and the Normalized Difference Vegetation Index (PSRI), which
    is given in

    Equation (3):

    NDVI = nir − red

    nir + red

    (1)

    NDWI = nir − swir

    nir + swir

    (2)

    PSRI = red − blue

    red_edge

    (3)

    On the other hand, the Enhanced Vegetation Index (EVI) is used to identify the
    density

    of vegetation, including forests. EVI is an optimized vegetation index that detects
    sensitive

    vegetation not seen by the NDVI. In addition, the NDWI was used to identify cropland
    [92].

    An enhanced version of the NDVI in Green NDVI (GNDVI) provides information on

    the land cover status and trends in land cover change, such as degradations reﬂecting

    impacts on forage quantity and quality [93]. Other vegetation indices used are:
    Soil-

    Adjusted Vegetation Index (SAVI), Transformed SAVI (TSAVI), Modiﬁed SAVI (MSAVI),

    Modiﬁed Transformed SAVI (MTSAVI), Optimized SAVI (OSAVI), and Generalized SAVI

    (GESAVI) [94].

    Other data that are possible to obtain through sensors are wind speed, wind direction,

    soil temperature, radiation, diffusion rate [57], precipitation, min temperature,
    max temper-

    ature, cloud cover, vapor pressure, wet, day frequency, ground frost frequency,
    and color

    bands [87].

    4.2.2. Semi-Structured Data

    Few papers describe the use of semi-structured data. Some authors use them to
    capture

    information from sensors that must be processed immediately to obtain the appropriate

    values. In Nóbrega et al. [75], they use an IoT sensor network to analyze the
    movement

    of sheep. The system uses a set of rules that indicate the activity performed
    by the sheep.

    What is of interest is that the sheep only eat grassland and not the vineyards.
    The sensors

    transmit information to a central system to analyze the preferred pasture areas
    and timings,

    anomalous situations, number of fences, and posture infractions. All these data
    are semi-

    structured because they must be stored in a documentary database.

    Sustainability 2022, 14, 16131

    22 of 37

    The sensor data are processed to obtain the rules. They then use a gateway that

    incorporates a module capable of mapping the collected information into JavaScript
    Object

    Notation (JSON) data structures. This allows the non-IP network and the IP-based
    Internet

    to be integrated for rapid analysis by higher-layer applications [75]. The system
    combines

    the process that handles real-time trafﬁc and non-periodic trafﬁc. The processed
    data, for

    both cases, are stored in a PostgreSQL relational database. Table 8 presents a
    summary of

    these data.

    Table 8. Semi-structured data.

    Author

    Data

    Type of Data

    [75]

    Anomalous situations, preferred pasture areas and timings, posture

    infractions, and number of fences

    JSON

    [83]

    Daily climate datasets from the Applied Climate Information System

    (ACIS)

    Clave-valor

    [54]

    Crop year, season, state name, district name, crop, area, seasonal

    rainfall, production

    RDF triple store

    [81]

    Stage of deseased fruit

    JSON

    [95]

    State, city, name, state ID, owner’s name

    Spreadsheet

    Sathiaraj et al. [83], from ACIS, collected climate data. The data were grouped
    by

    months or years to develop three sets of climatic data: annual, monthly, and TEF.
    These

    were stored in REDIS, a NoSQL database, allowing for in-memory data management.

    Therefore, the system provides quick access.

    Choudhary et al. [54] collect data from India’s Open Government Data Platform

    (OGD) and Rajasthan. The data used are the name of the state, the name of the
    district, the

    growing season and year, the area, the production, the seasonal rainfall, the
    phosphorus,

    the potassium, the nitrogen, the saline soil (ha), and the sodic soil (ha). The
    data are stored

    in a graph database in RDF triple store format.

    In Aiken et al. [95], they stored data from Brazilian sources on (beef) cattle
    from

    two massive datasets: 44,566 farms purchased from an animal food business and
    32,776

    processed cattle at a meat packing company. The raw data had to be processed,
    cleaned,

    and formatted for storage in a structured database. The data they used to analyze
    and

    classify the cattle were state, city, name, state ID, and owner’s name.

    4.2.3. Unstructured Data

    As shown in Table 9, it is possible to obtain data from Sentinel-1A through an
    active

    Synthetic Aperture Radar (SAR) sensor, providing C-band images in both single
    polar-

    ization VV and dual polarization VH, which is not affected by cloud cover or lack
    of

    illumination. Moreover, the images are freely accessible to any user [58,82].

    In Nóbrega et al. [75], they use video data to learn about sheep behavior in a
    vine-

    yard. To do so, they analyze each video to obtain a set of rules processed by
    experts.

    Yang et al. [80] also use video data to monitor the growth status of plants. The
    videos are

    stored locally on the farm for only seven days, then stored in a Cloud system.
    Users can

    decide to watch the documented or real-time video; the cloud medium obtains the
    related

    video submissions to show the association with the connected video device and
    send the

    video data to the user. Rehman et al. [65] use various types of data for crop
    analysis. For

    example, the real-time data stream comprises soil temperature, atmospheric temperature,

    and humidity, and structured data from sensors. On the other hand, the practice
    plan is

    formulated with information extracted from heterogeneous data sources: (1) real-time
    data

    streams from sensors; (2) sensor location information; (3) extraction of information
    from

    ﬁve-year-old data; (4) government climate forecast; and (5) irrigation system.

    Sustainability 2022, 14, 16131

    23 of 37

    Table 9. Unstructured Data.

    Author

    Data

    Type of Data

    [75]

    Referred pasture areas and timings, anomalous situations, patterns of

    movement, food preferences.

    Videos

    [80]

    Videos of the state of growth of plants.

    Videos

    [65]

    Text, Web data, CSV

    Spreadsheets, Web

    Data, CSV

    [63]

    Satellite images, domain knowledge

    Spectral images, RDF,

    URI,

    [59]

    Imágenes

    RGB image

    [60]

    Drone images, digital surface models, high-resolution UAV imagery

    RGB image

    [87]

    Satellite images, archives

    RGB image, CSV,

    GeoTiff

    [82]

    SAR images SGX dual-polarization RADARSAT-2 in the mode Wide,

    optical images Landsat-8, VV, VH

    Spectral image, RGB,

    ASCII, HDF

    [58]

    SAR images, VV, VH polarizations

    Spectral images,

    ASCII, HDF, GeoTiff

    [91]

    Optical images, SAR images, VV and VH coefﬁcients

    Spectral images, RGB

    [92]

    Satellite images

    Spectral images,

    ASCII, HDF, GeoTiff

    [67]

    CSV

    CSV

    [68]

    Images, video, audio, telemetry data, user data

    Documents, RGB

    image, CSV, videos

    [69]

    Images

    RGB image

    [71]

    Images, GPS, documents data

    RGB image, points,

    PDF

    In Dutta et al. [63], they use heterogeneous data from different sources to generate
    a

    knowledge system of agricultural processes in conjunction with environmental processes.

    The data are obtained from a network of sensors, satellite images, large-scale
    simulated

    models, meteorological data, and domain knowledge and experience to improve decision

    making. With the data obtained, the authors developed a Big Data system that incorporates

    unstructured, undocumented, and ad hoc knowledge into a structured rule base that
    is

    directly used to improve the decision support system. In addition to farmers’
    knowledge

    data, they use other unstructured data from NASA MODIS, NASA LANDS, and Australian

    Digital Elevation.

    On the other hand, Sumalatha and Akila [87] use historical data from the government

    portal “indiawaterportal.org” and satellite images for histogram analysis to identify
    the

    color pattern on the ground. They analyze data from various environmental features
    that

    have affected the terrain. The data used come from CSV ﬁles and RGB images.

    Amani et al. [82] also use satellite imagery to obtain information on terrain
    characteris-

    tics. The data are extracted directly from the Google Earth Engine (GEE) cloud
    computing

    platform, as it allows for improved data processing efﬁciency from a time and
    cost per-

    spective. The authors explain that accuracy levels are slightly lower than when
    using data

    from the Department of Canada’s database. However, GEE will improve this aspect
    in the

    future. GEE contains freely accessible remote sensing datasets and various classiﬁcation

    algorithms, which can be accessed for different applications on arable land. In
    addition,

    Gumma et al. [92] used Landsat data and ML algorithms in the GEE software platform.

    The authors created a mega-ﬁle of 31 bands for ﬁve agro-ecological zones in South
    Asia,

    which formed a database for image classiﬁcation and analysis.

    GEE stores raster data sets from NASA, as well as a complete Landsat archive,
    in

    addition to data that come from the European Space Agency. They use JavaScript
    or Python

    to analyze multi-temporal data on a continental scale, which can be shared with
    other

    researchers. This mitigates the barriers to using supercomputers in geospatial
    analysis [92].

    Yahata et al. [59] and Saldana and Guo [60] use photographic images to analyze

    the condition of vegetation, mainly trees. The raw data are RGB images that need
    to be

    processed to obtain color and pattern information.

    Sitokonstantinou et al. [91] use data from the Umbrella Sentinel Access Point,
    devel-

    oped by the National Observatory of Athens, to map rice crops. The authors complement

    Sustainability 2022, 14, 16131

    24 of 37

    the data with satellite images and photos. They are preprocessing Sentinel-1 data,
    including

    (i) cropping of the area of interest, (ii) radiometric calibration, (iii) speckle
    ﬁltering using

    the Lee ﬁlter, (iv) terrain correction using the Shuttle Radar Topography Mission
    (SRTM)

    10 m, and (v) conversion of the backscatter coefﬁcient (σ0) into decibels (dB).
    The Sentinel-2

    images consisted of 13 spectral bands with 10, 20, and 60 m spatial resolutions.
    In addition,

    the authors calculated three vegetation indices to improve the feature space,
    NDVI, NDW,

    NDWI, and PSRI.

    4.3. Data Generation for Agricultural Big Data

    Figure 14 shows the number of uses of different data sources for the generation
    or

    collection of Agricultural Big Data. The identiﬁed sources were categorized into
    six groups.

    These are Sensors, Cameras, Databases, GPS, Satellite, and People. Each of the
    groups is

    described below.

    Figure 14. Data sources used in Agricultural Big Data.

    The People group includes all sources whose data comes directly from people and

    their domain knowledge. It is one of the least used sources in the articles analyzed,
    used

    in only two papers. Capturing data from this source is a complex task, as the
    data are

    neither structured nor documented and exist only in experts’ minds. This nature
    of the data

    makes them inaccessible to a computer system in a straightforward manner, differentiating

    them from the rest of the proposed groups. In [63], the complexity of this data
    source

    is addressed, and a protocol is offered to systematically capture domain knowledge
    and

    integrate the data obtained with other data sources to generate a decision support
    system.

    A Global Positioning System (GPS) is a system composed of satellites and receiving

    devices in such a way as to identify the receiver’s position on the Earth with
    an accuracy of

    up to centimeters. This data source, like those in the People group, was only
    used in two

    articles. These systems only allow the collection of geospatial data such as the
    latitude and

    longitude of the receiving device. In the analyzed papers, the data are collected
    through

    devices, including GPS receivers, used during ﬁeld campaigns to determine the
    position of

    certain areas or sections of a terrain calculated through the latitude and longitude
    of the

    receiver at different times [82,92].

    The camera data source includes any optical device that can capture digital images.

    It is assumed that these devices are relatively close to the earth’s ground, which
    excludes

    satellites and other devices orbiting the Earth. Therefore, cameras are an affordable
    data

    Sustainability 2022, 14, 16131

    25 of 37

    source for both individuals and organizations. The size and weight of these devices
    can vary

    without drastically affecting the quality of the data produced, allowing them
    to be attached

    to and used in conjunction with various devices such as drones [62], smartphones
    [81], or

    ground robots [59]. An advantage of this type of data source is the high spatial
    resolution

    obtained from the captured images or videos. In [60], the authors used images
    with a

    spatial resolution of between 4 and 8 cm, captured by UAVs.

    Satellites are an essential data source for obtaining data on sizeable agricultural
    land.

    A set of sensors attached to the satellite is used to capture the data. The data
    obtained are

    uniﬁed into satellite images, products composed of multiple spectral bands containing

    the information. Many products can be obtained from this data source, such as
    optical,

    SAR, or thermal images. Some essential characteristics of satellites, which differentiate

    them, are the type of product generated and their spatial and temporal resolutions.
    Of the

    resolutions, the former refers to the distance each image pixel represents on
    the ground.

    In contrast, the latter refers to the time it takes for each satellite to retrieve
    data from the

    exact location. From the articles analyzed, the use of six different satellites
    was identiﬁed:

    these are Google Earth [82], Sentinel-1 [58] and Sentinel-2 [82,91], Landsat 7,
    and Landsat

    8 [63,92], MODIS [63].

    The sensor group includes all IoT devices used statically in different locations
    to

    capture data. A wide variety of sensor types measure a single variable, such as
    temperature,

    radiation, rainfall, etc. [55]. Similarly, devices that include several sensors,
    such as a weather

    station or collars, are used on animals [75]. Using this data source usually requires
    taking

    care of the deployment, connection, and maintenance of the IoT devices. Some advantages

    of using sensors are that data obtained are particular to the area or task in
    which they

    are used and that they will be captured in real time and with a frequency to be
    deﬁned

    by the user. On the other hand, the temporal resolution of sensors tends to be
    low, from

    seconds to minutes, so large amounts of information tend to be generated in a
    speciﬁc

    measurement period [76]. Wang and Mu explain that microsensors are being developed

    that are capable of capturing data on crop growth, land use, water use and characterization,

    and climate variables, among other essential aspects. The authors conclude that
    the use of

    these microsensors will enhance IoT development [70].

    The “databases” group is different from the other categories as it compiles large
    data

    sets obtained from the other sources (sensors, images, surveys, etc.), which are
    made

    accessible through an interface deﬁned by the entity. These databases allow easy
    and

    immediate access to a large amount of historical data, with accumulated records
    of up to

    dozens of years [86]. The vast majority of the databases identiﬁed are managed
    by public

    entities or government agencies, such as AWAP, CosmOZ, SILO, ASRIS, BOM, ISTAT,
    CNIR,

    IndiaStat, AAFC, ARPAS, ACIS, IMD, OGD, and KME. However, databases belonging
    to

    private entities were also identiﬁed, such as [95] using data sets from Brazilian
    cattle farms

    provided by the companies DSM Produtos Nutricionais Brasil S.A. and JBS S.A or
    [96]

    using a meteorological data set from Schneider Electric.

    There is a common tendency among the analyzed articles to use more than one data

    source for research. This includes using data sources belonging to different categories
    (from

    those previously deﬁned) and sources belonging to the same type but with different
    or

    complementary data to the other authorities.

    4.3.1. Data Platforms in Agricultural Big Data

    Of the articles analyzed, less than half detailed which platforms were used to
    store

    the collected data. From the reports that detailed this information, Figure 15
    shows the

    distribution of uses of the mentioned platforms, categorized into Hadoop, Relational

    Database, NoSQL Database, and Cloud.

    Sustainability 2022, 14, 16131

    26 of 37

    Figure 15. Data warehousing platforms used in Agricultural Big Data.

    The Cloud category includes various cloud computing services such as AWS (Amazon

    Web Services) or GEE (Google Earth Engine). These services offer multiple beneﬁts
    for

    operating with considerable amounts of data, such as Agricultural Big Data. A
    direct

    beneﬁt of using these platforms is their large computational and storage capacities,
    which

    are suited to working with Big Data and can be resized according to the user’s
    needs.

    Another beneﬁt is the free and direct access they provide to different data sources,
    for

    example, access to satellite data captured by Landsat or Sentinel satellites.

    Shelestov et al. [58] used AWS’s quick and easy access to Sentinel 1 and 2 satellite

    imagery to work with datasets using up to 3 TB of memory space, eliminating the
    problems

    associated with downloading and storing data related to Big Data. Gumma et al.
    [92] list

    the following as reasons for using the GEE platform: the easy access to Landsat
    satellite

    data, the powerful computational capacity of the service, and the ability to perform
    parallel

    processing of the data, among others.

    Of the analyzed articles, Wang et al. [77] use MongoDB, a document-oriented database,

    as temporary intermediate storage for data collected by sensors, which is later
    trans-

    ferred to an implemented data warehouse. Sathiaraj et al. [83] used the REDIS
    in-memory

    database, whose data model is key-value, for the visualization system of the computa-

    tional analyses performed because it has a low latency when accessing the data.
    Finally,

    Choudary et al. [54] used an RDF triplestore, a knowledge graph database, to store
    the data

    through a smart farm ontology. The database allows them to represent the relationships

    between two or more entities through the relationships in the graph.

    The Relational DB group comprises RDBMSs (Relational Database Management Sys-

    tems). Only three articles implemented relational databases in their research;
    of these,

    the RDBMSs identiﬁed are MySQL [80], PostgreSQL [75], Oracle Database, and the
    SQL

    server [77].

    In Nobrega et al. [75], they use PostgreSQL to store the data obtained by the
    collars that

    were put on each sheep. They decided to use a relational database because their
    network

    of sensor collars has several entities, which can be efﬁciently designed in this
    type of

    database. They selected PostgreSQL from the available RDBMS options as it is suitable
    for

    environments working with the system’s essential data, security, and integrity
    mechanisms.

    Yang et al. [80] use MySQL to persistently store data collected directly by sensors.
    The

    authors estimated that 86 million records would be stored in a month. They are
    aware

    that when you have tens of millions of records in the same table, the efﬁciency
    of data

    Sustainability 2022, 14, 16131

    27 of 37

    operations performed by MySQL decreases considerably. Therefore, they implemented

    two strategies to solve this problem; the ﬁrst is to split the table with the
    millions of records

    into discrete tables daily. The second is to perform the data analysis processes
    in a separate

    service based on the Hadoop ecosystem.

    The most identiﬁed category among the analyzed articles was Hadoop, which in-

    cludes the data warehousing technologies of the Hadoop ecosystem, i.e., HDFS,
    Hive, and

    HBase. A fundamental difference between databases (Relational and NoSQL) with
    Hadoop

    technologies is that the latter is designed to store data in a distributed manner
    from the

    outset, which makes them highly suitable for working in the presence of Big Data.

    Priya et al. [57] use HDFS to store the collected datasets due to its easy integration

    with the MapReduce paradigm, which enables parallel processing of the data, allowing

    them to work efﬁciently with large datasets. In Wang et al., HDFS is used as a
    single

    platform containing data from multiple relational and non-relational databases
    [77]. Data

    are synchronized from the different DBs to HDFS using technologies such as NiFi,
    Sqoop,

    or Flume. The data stored in HDFS are, in turn, ﬁltered using Spark SQL to extract
    and

    store in Hive the data that will be used for analysis with machine learning techniques
    and

    in HBase the data that will be used directly for monitoring or visualization.
    The authors

    comment that with this data storage structure, they obtain scalability, high fault
    tolerance,

    and good performance for data processing.

    4.3.2. Machine Learning Algorithms

    Figure 16 shows all the ML techniques identiﬁed in the analyzed articles. A total
    of

    36 different techniques were found, of which the ﬁve most used were Neural Networks,

    Random Forest, Support Vector Machines, Decision Trees, and Convolutional Neural

    Networks. From the graph, it can be seen that more than half of the techniques
    identiﬁed

    accumulate a single use and that the ﬁrst seven techniques together accumulate
    a more

    signiﬁcant beneﬁt than the sum of the services of the rest of the methods.

    Figure 16. ML techniques in Agricultural Big Data.

    Sustainability 2022, 14, 16131

    28 of 37

    The articles identiﬁed a common tendency to employ several ML techniques. This

    mainly occurs in two scenarios. The ﬁrst arises because each algorithm processes
    the data

    differently, so the results obtained are inﬂuenced by the dataset and its characteristics

    (number of records, dimensionality, etc.). Therefore, several ML techniques are
    used, and

    the performances and results obtained by each model are compared. The second scenario

    is when they are used complementary for data analysis, i.e., the results obtained
    by one of

    the techniques are used for training or validation of the other techniques.

    Balducci et al. [53] compare the implementation of diverse ML techniques against
    ﬁve

    tasks designed by them. For the tasks, they used other datasets, and the authors
    selected the

    compared techniques depending on the expected result. The techniques used are
    Neural

    Networks, Linear Regression, Polynomial Regression, Decision Tree, K-NN, and similarity

    clustering. Amani et al. [82] use the SNIC algorithm to segment layered stacked
    mosaic

    images. The segments obtained by the algorithm were subsequently used to perform
    an

    object-based classiﬁcation using neural networks, which they used to generate
    an ACI

    (Annual Space-Based Crop Inventory) map of Canada.

    There are several challenges related to using ML in the presence of Agricultural
    Big

    Data. As discussed earlier, the performance of ML algorithms is inﬂuenced by the
    dataset

    used. One of the challenges faced by Dutta et al. [63] is the high dimensionality
    that

    datasets tend to have when working with Big Data. The authors propose a domain-speciﬁc

    dimensionality reduction process, which allows them to increase both the efﬁciency
    of the

    system and the accuracy of ML algorithms.

    Another challenge, associated only with some ML techniques (CNN, RNN, etc.),

    is a large amount of memory space they occupy to store the trained models and
    their

    parameters. For example, Tombe et al. [62] had to set aside the deep learning
    networks

    VGG16, VGG19, and GoogleNet due to their memory space limitations in the research.
    In

    these techniques, the space required will increase as more data are used for training.

    Finally, the most recurrent challenge among the analyzed articles is the one associated

    with the quality of the data used for training ML models. Outliers, missing values,
    noise,

    and duplicate values can negatively impact the performance of an ML model, as
    it learns

    from these underlying relationships that do not exist in reality [88]. As a common
    challenge

    when using ML techniques, several authors use methods to improve the dataset’s
    quality;

    these methods are known as data preprocessing.

    In Doshi et al. [64], they perform preprocessing in two steps, the ﬁrst is to
    replace

    missing values with large negative values that the models can treat as outliers,
    and the

    second step is to generate class labels using mathematical functions for later
    use in su-

    pervised learning techniques. On the other hand, Choudhary et al. [54] also perform
    a

    preprocessing of the dataset; in this case, columns with missing values are removed,
    and

    categorical data in String are encoded into integer values to make them usable
    by ML

    models. Aiken et al. [95] also process the data to standardize the two datasets
    used, trans-

    forming String data to lower case, removing special characters, expanding acronyms,
    and

    correcting common misspellings. The authors comment that the necessary standardizations

    are speciﬁc to each dataset.

    Finally, in Melgar-García et al. [69], a new novel triclustering approach is presented,

    which is based on the evolutionary algorithm bigTriGen, with which three-dimensional

    patterns are extracted. Venkatesan et al.[73] use a number of ML algorithms, including
    NN,

    support vector regression, random forest, K-nearest neighbors, extreme gradient
    boosting

    and gradient boosting machine, and time series algorithm ARIMA with binary classiﬁcation

    for a different number of input features.

    5. Discussion

    The various solutions for Agricultural Big Data include analyzing structured,
    semi-

    structured, and unstructured data. For example, sensors and satellites are available
    through

    databases of structured data. Despite their availability, these data often need
    to be processed

    due to various problems such as (1) incomplete data records, (2) the data need
    to be read

    Sustainability 2022, 14, 16131

    29 of 37

    from a raw ﬁle, and (3) validation of the data before it can be used. On the other
    hand, semi-

    structured data, such as data stored in No-SQL databases, require processing to
    achieve a

    structure that allows analysis through techniques such as ML.

    Unstructured data present the most signiﬁcant challenges, as they require the
    use of

    systems that allow for reading, data extraction, validation, data transformation
    (from one

    type to another, or the creation of new data), and loading onto a platform that
    is capable of

    storing large volumes of data. For example, we found unstructured data from satellites,

    drones, cameras, and videos in the selected papers.

    In recent years, with the rise of satellite data, study on crop development status

    monitoring (including crop yield estimation, crop classiﬁcation, and crop leaf
    area) has

    slowly shifted from large-scale stationary range information return to cooperative
    research

    of mesoscale, near real-time, multisource data; this shift has presented higher
    needs for

    remote sensing data purchase, and analysis efﬁciency [97].

    According to Xu et al. [98], remote sensing is an essential non-physical Earth
    observa-

    tion method widely applied in agriculture, water, climate, and other areas. On
    the other

    hand, the progress of IoT and computing technologies has enabled signiﬁcant advances

    in remote sensing. Today, more than 1000 remote sensing satellites have been launched,

    from which data are accumulating at a rate of terabytes per day. In addition,
    many other

    approaches, such as uncrewed aerial vehicles, are frequently used for remote sensing
    data

    collection. Based on multivariate remote sensing data, Earth’s Big Data has reached
    the

    ZB level.

    Therefore, several challenges are to be faced when using this data type. Firstly,
    the

    amount of remotely sensed data expected to be managed is enormous, and the structure

    of remotely sensed data is complex. Moreover, remote sensing data are stored in
    different

    formats and systems, such as GeoTiff, ASCII, and HDF, which are incompatible.
    Secondly,

    it is noted that remote sensing data processing places high demands on computational

    performance, which requires the effort of continuous improvement and data accuracy;

    in addition to the development of ML algorithms, algorithms for remote sensing
    data

    processing are becoming more complex [98].

    To ensure the high availability of both raw and structured data, distributed storage

    systems have been widely applied. For example, several works have used MongoDB,
    a

    distributed database that supports storing and indexing remotely sensed data,
    vector data,

    and semi-structured data. On the other hand, Hadoop’s distributed ﬁle system can
    be

    applied to store all types of data, from structured to remote sensing data, making
    it a perfect

    solution for volume and variety of data. Cloud Computing technology also improves
    the

    availability of satellite data and reduces the development time of systems for
    Agricultural

    Big Data. It is then possible to process the data for analysis without installing
    servers

    containing specialized tools. In the future, the use of Cloud Computing will increase,

    thanks to the scalability, cost reduction, and availability of several ML classiﬁers
    (such

    as CART, Random Forest, SVM, and ANN). However, developing and applying complex

    ML models to large geospatial datasets is not trivial and may require leveraging
    multiple

    computing platforms or tools.

    GEE provides access to large-scale remote sensing data sets and computing resources.

    However, even though GEE is a public platform, it does not meet all the requirements

    of data scientists [98]. Some of the problems are the lack of ﬂexibility in a
    large amount

    of stored data, the scalability in processing on demand, the problematic use of
    MapRe-

    duce, the integrity problems of the Big Data tools with those of remote sensing,
    and the

    algorithms of ML that are still basic concerning the needs of analysis [98]. For
    example,

    the computational model currently employed by GEE does not work well for recursion

    processes and operations that require a large amount of cached data, such as training

    many ML models. One solution is to train models at scale on another private platform

    and use GEE for data management, pre-processing, image classiﬁcation, post-processing,

    and visualization.

    Sustainability 2022, 14, 16131

    30 of 37

    This will bring a greater volume of data, as well as more signiﬁcant processing
    chal-

    lenges. Data Lakes, a type of repository that allows structured and unstructured
    data to

    be stored in different storage areas [14], will enable agricultural scientists
    to understand

    the relationships between data and the types of analysis that can be implemented.
    This is

    because the Data Lake has a model representing metadata characteristics and the
    possible

    relationships between the data [99].

    According to Batini et al. [100], data quality is inﬂuenced by the type of data
    to be

    analyzed, their sources, and their application domains. He explains that the data
    life cycle

    must be examined for each case since there are ﬂaws at each stage. For data obtained
    from

    sensors, weakness comes from the capacity of a network to store all data available
    from

    sensors, in addition to the location of data, as this is often inaccurate. On
    the other hand, it

    is necessary to identify the needed data since some are no longer used, inﬂuencing
    their

    life cycle.

    Data Lakes allow data management from two points of view [99]. The ﬁrst is related

    to the characteristics of each data type, whether structured or non-structured.
    The second

    has to do with the traceability of the data since they can be stored in more than
    one

    repository area when processed. Flexible Data Lake architecture enables faster
    data loading

    and parallel processing, resulting in faster instant analytical insight. In addition,
    data

    management improves data quality since more information is available on the data’s
    life

    cycle due to the availability of metadata and the relationships between the data.

    6. Limitations of the Study

    This section describes four types of threats to the validity of this review.

    6.1. Construct Validity

    The study of this threat is relevant for ranking the selected studies [101]. On
    the one

    hand, keywords used for the search were proposed by one of the authors and validated
    by

    the others. The results are the terms Big Data, ML, and agriculture. However,
    the list of

    terms is incomplete; some alternative terms may alter the list of selected papers.
    On the

    other hand, the search string was used in IEEE Xplore, ACM, WoS, Springer, MDPI,
    and

    Scopus. We found most of the research papers on agricultural Big Data and ML through
    the

    search string terms. To mitigate the threat of not considering essential reports,
    we explored

    corresponding articles from review studies and state-of-the-art research.

    6.2. Internal Validity

    This type of validity is concerned with the study of analyzing the data extracted
    from

    the selected papers [102]. A research assistant collected the data and then classiﬁed
    them

    according to key concepts given by the group of researchers. There was a reasonable
    level

    of agreement between authors, with a kappa coefﬁcient value of 0.9. This signiﬁcantly

    reduces the threats of dissimilarity by showing a similar understanding of relevance.

    6.3. External Validity

    External validity corresponds to the context of the investigation [102]. Furthermore,

    the results have been evaluated in Agricultural Big Data and ML. Therefore, the
    terms

    utilized in the search string and the classiﬁcation of the articles can help professionals
    in

    the agricultural area and the use of data in Big Data and ML.

    6.4. Conclusion Validity

    This threat is related to identifying inappropriate relationships that lead to
    an incorrect

    conclusion. On the other hand, this threat to the validity of the conclusion refers
    to different

    elements of analysis, such as incorrect data extraction, review of missing studies,
    and

    identiﬁcation of incorrect gaps, among others. To reduce this threat, a PRISMA-based

    criterion has been deﬁned for the data extraction and selection process [102].

    Sustainability 2022, 14, 16131

    31 of 37

    7. Conclusions

    The study’s objective was to identify the types of data used in Agricultural Big
    Data

    and ML, according to their condition, whether structured, semi-structured, or
    unstruc-

    tured. Furthermore, the data types were classiﬁed according to the data sources,
    such

    as repositories, databases, and platforms, identifying new data types and trends.
    The

    methodology used was the Systematic Literature Review according to the PRISMA
    criteria

    and Kitchemham and Chartes protocol. The results obtained are a basis for future
    research

    in the data application in Agricultural Big Data and ML.

    Forty-three papers were analyzed. The primarily structured data used were climate

    characteristics such as temperature, humidity, atmospheric pressure, and wind
    speed; soil

    characteristics such as soil type, pH, and salinity, among others; and crop data
    such as

    plant characteristics, soil characteristics, and information from databases or
    repositories.

    The data were classiﬁed as Int, Float, String, Date, and Time. In addition, microsensors
    are

    beginning to be used to monitor crops from different points of view, such as water
    use, soil

    data, climate, and data from the plant itself.

    On the other hand, semi-structured data came from databases, ﬁles, and No-SQL

    databases. Some data were stored in JSON, key-value, RDF, and spreadsheet formats.

    These data need to be processed to store in structured databases that allow for
    easy access

    and analysis by ML tools.

    The unstructured data came from satellite images, GPS, video cameras, and documents.

    The most signiﬁcant amount of data comes from satellite imagery, as there are
    more than

    1000 available, with various sensors measuring different terrain characteristics,
    such as

    LiDAR and RGB.

    The main storage platforms are structured databases, No-SQL databases, Hadoop,

    and Cloud Computing. Cloud Computing is expected to increase the capacity of remote

    sensing analysis through new ML algorithms for processing and analysis. This will
    allow

    researchers to speed up the implementation of Agricultural Big Data.

    For its part, GEE allows a large amount of remotely sensed data to be processed
    and

    stored. However, the processing and analysis of complex data are still limited.
    In the future,

    more features and data will become available, which will help researchers to generate
    more

    complete and accurate reports for decision making.

    Data Lakes are still underutilized despite advances in using Big Data in agriculture.

    This brings enormous challenges since the architecture must be modeled considering
    the

    layers to be used for the different types of data. In addition, the data must
    be stored and

    managed through metadata catalogs. Unfortunately, none of the analyzed papers
    mention

    using such data management tools. However, we believe that in the coming years,
    these

    Data Lakes will be used in the application of Agricultural Big Data due to the
    need for the

    different repositories available so far to become integrated.

    To create an optimal strategy for data storage and processing and an appropriate
    soft-

    ware selection, a skilled team with a spectrum of knowledge and skills in data
    management,

    modern data architecture, Big Data technologies, as well as experts in the problem’s
    domain,

    will be necessary [14]. This study provides information to improve data management

    by: (1) classifying the types of data used in Agricultural Big Data and ML, (2)
    providing

    information on data structures and sources, and (3) providing information on storage

    platforms and trends.

    Author Contributions: A.C. contributed with the direction of the SRL, the organization
    of the work,

    and the writing of the paper. S.P. contributed with student work, writing, and
    formatting. P.G.

    and J.L.F. contributed to the methodological ﬂow and discussion. M.C. contributed
    ﬁgures, tables,

    and spelling and grammar checking. All authors have read and accepted the published
    version of

    the manuscript.

    Funding: Universidad de La Frontera, Project PAT22-0005(2023).

    Institutional Review Board Statement: Not applicable.

    Sustainability 2022, 14, 16131

    32 of 37

    Informed Consent Statement: Not applicable.

    Acknowledgments: ANID project code FOVI210012.

    Conﬂicts of Interest: The authors declare no conﬂict of interest.

    Appendix A

    Table A1. Summary of data by paper.

    Title

    Category

    Unstructured Data

    Structured Data

    Fruit disease prediction using machine learning over

    big data

    Camera

    camera images

    stage of diseased fruit.

    A hybrid machine learning approach to automatic

    plant phenotyping for smart agriculture

    Camera

    camera images

    image hue, pixels.

    A framework for the management of agricultural

    resources with automated aerial imagery detection

    Camera, Database

    drone images, digital

    surface models

    type of tree, x (pixel), y (pixel), size, conﬁdence,

    land, cover, class.

    AgroConsultant: Intelligent Crop Recommendation

    System Using Machine Learning Algorithms

    Database

    X

    soil type, aquifer thickness, soil pH, thickness of

    topsoil, precipitation, temperature, latitude,

    longitude, distance from sea, rainfall, area under

    cultivation.

    Record linkage for farm-level data analytics:

    Comparison of deterministic, stochastic, and

    machine learning methods

    Database

    X

    state, city, name, state ID, owner’s name.

    Reference evapotranspiration estimation and

    modeling of the Punjab Northern India using deep

    learning

    Database

    X

    max air temperature, min air temperature, average

    temperature, relative humidity, wind speed, solar

    radiation, sunshine hours, reference

    evotranspiration.

    Big data and machine learning for crop protection

    Database

    soil pH, state of Shire, winter crop, amount of

    cultivation, stubble management.

    Adaptive and Efﬁcient Streaming Time Series

    Forecasting with Lambda Architecture and Spark

    Database

    X

    X

    Towards modeling beef cattle management with

    Genetic Programming

    Database

    X

    Consistency of all animals, percentage of artiﬁcial

    insemination, mean value of age of cows expressed

    in days, mean number of parturitions per cow,

    number of occurred deliveries, mean number of

    necessary inseminations which resulted in positive

    pregnancy diagnosis, etc.

    Enhancement of Convolutional Neural Networks

    Classiﬁer Performance in the Classiﬁcation of IoT

    Big Data

    Database

    X

    X

    An adaptive model for forecasting seasonal rainfall

    using predictive analytics

    Database

    X

    min temperature, max temperature, avg

    temperature, humidity, wind speed, precipitation,

    wind direction, cloud cover, visibility, atmosphere

    pressure.

    Computer Vision for Smart Farming and Sustainable

    Agriculture

    Database, Camera

    drone images

    X

    Application of Google Earth Engine cloud

    computing platform, Sentinel imagery, and neural

    networks for crop mapping in Canada

    Database, GPS, Satellite

    SAR images, optical

    images

    cropland class, number of ﬁeld samples, VV and VH,

    NDVI and NDWI.

    Machine Learning Applications on Agricultural

    Datasets for Smart Farm Enhancement

    Database, Sensors

    X

    crop type, year of the time series, province, altitude

    total area, cultivation area, total crop production,

    total harvest production, temperature average, min

    and max, rainfall amount, amount of phosphate and

    potash minerals, etc.

    Predicting climate types for the Continental United

    States using unsupervised clustering techniques

    Database, Sensors

    X

    max temp, min temp, precipitation, month, year.

    YieldPredict: A Crop Yield Prediction Framework

    for Smart Farms

    Database, Sensors

    X

    State Name, district name, crop year, season, crop,

    area, production, seasonal rainfall, nitrogen,

    phosphorus, potassium, saline soil (ha), sodic soil

    (ha).

    Cloud Approach to Automated Crop Classiﬁcation

    Using Sentinel-1 Imagery

    Satellite

    SAR images

    VV and VH polarizations.

    Scalable distributed random forest classiﬁcation for

    paddy rice mapping Asian conference on remote

    sensing ACRS 2019

    Satellite, Camera,

    Database

    optical images, SAR

    images

    VV and VH coefﬁcients, NDVI, NDWI, PSRI, B8A,

    B12, B11, B08, B07, B06, B05, B04, B03, B02.

    Real-Time Big Data Analytics for Agricultural Land

    Hotspot Prediction

    Satellite, database

    satellite images, CSV

    precipitation, min temperature, max temperature,

    avg temperature, cloud cover, vapor pressure, wet

    day frequency, ground frost frequency, color bands

    ->RGB.

    Big Data Architecture for Environmental Analytics

    Satellite, Database,

    Person

    satellite images, Domain

    Knowledge

    X

    Crop Prediction on the Region Belts of India: A

    Naïve Bayes MapReduce Precision Agricultural

    Model

    Satellite, Database,

    Sensors

    satellite images

    soil moisture, rainfall, temperature, atmospheric

    pressure, relative humidity, wind speed, wind

    direction, soil temperature, radiation, diffusion rate.

    Sustainability 2022, 14, 16131

    33 of 37

    Table A1. Cont.

    Title

    Category

    Unstructured Data

    Structured Data

    Agricultural cropland extent and areas of South Asia

    derived using Landsat satellite 30 m time-series

    big-data using random forest machine learning

    algorithms on the Google Earth Engine cloud

    Satellite, GPS

    satellite images

    RGB bands, NIR band, SWIR 1 and SWIR 2 bands,

    thermal bands, NDVI index, EVI index, NDWI

    index, latitude, longitude, slope.

    Evaluation of agricultural climate and regional

    agricultural economic efﬁciency based on remote

    sensing analysis

    Satellite, GPS

    satellite images

    latitude, longitude, position, shape, color, average,

    temperature, total power of agricultural

    development machinery, ﬁxed employees in

    agriculture, forestry, animal husbandry and ﬁshery,

    area of land used at the end of each year, amount of

    fertilizer, plastic used.

    Animal monitoring based on IoT technologies

    Sensors

    camera video

    hours of activity, travel times, preferred pasture

    areas and timings, anomalous situations, number of

    fence and posture infractions.

    Machine learning prediction analysis using IoT for

    smart farming

    Sensors

    text, Web data, CSV

    temperature, humidity.

    Big data analytics and artiﬁcial intelligence serving

    agriculture

    Sensors

    X

    temperature, dew point, humidity, pressure,

    visibility, wind direction, wind speed, burst speed,

    events, rain, weather conditions, month, day.

    The Implementation of a Practical Agricultural Big

    Data System

    Sensors

    X

    air temperature, air humidity, light intensity, soil

    moisture, fruit size, branch length, soil salinity, wind

    speed, wind direction, conductivity, soil

    temperature, CO2, pH.

    Architecture Design of a Smart Farm System Based

    on Big Data Appliance Machine Learning

    Sensors

    X

    color, weight, inner temperature, outer temperature,

    humidity.

    Intelligent computational techniques for crops yield

    prediction and fertilizer management over big data

    environment

    Sensors

    X

    temperature, rainfall, pH, water level, nitrogen,

    phosphorous, potassium, calcium, magnesium,

    sulfur.

    Big data in precision agriculture: Weather

    forecasting for future farming.

    Sensors

    X

    min temperature, max temperature, humidity,

    rainfall.

    Botanical Internet of Things: Toward Smart Indoor

    Farming by Connecting People, Plant, Data and

    Clouds

    Sensors, Camera

    camera video

    temperature, humidity, illumination intensity, air

    gasses (CO2, O2, O3, NO2), plant ID, time.

    The effective yield of paddy crop in Sivaganga

    district – An initiative for smart farming

    Sensors, Database

    X

    crop yield, farmer’s name,

    Place–Village–Panchayat–Taluk–District, survey

    number, contact details, soil type, paddy variety,

    types of fertilizers used at the different stages of

    cultivation, ﬁeld size, Irrigation type.

    An application of machine learning technique in

    forecasting crop disease

    Sensors, Database,

    Person

    X

    temperature, relative humidity, wind speed, wind

    direction, precipitation accumulation, solar

    radiation, potato blight disease.

    Design of Smart Agriculture Systems using Artiﬁcial

    Intelligence and Big Data Analytics

    Camera

    images, video, audio,

    telemetry data, user data,

    temperature, light, humidity, and soil moisture.

    Innovation of agricultural economic management in

    the process of constructing smart agriculture by big

    data

    Database

    GIS Data, social network,

    GPS Data

    egg price, duck egg price, export volume, output,

    market elasticity, labor force change and inventory

    as variables.

    A new big data triclustering approach for extracting

    three-dimensional patterns in precision agriculture

    Satellite

    Images

    three-dimensional datasets, NDVI index,

    Soil-Adjusted Vegetation Index (SAVI) and the

    Enhanced Vegetation Index (EVI), and GNDVI.

    Agricultural Irrigation Recommendation and Alert

    (AIRA) system using optimization and machine

    learning in Hadoop for sustainable agriculture

    Sensors

    X

    temperature (ºC), relative humidity (%), mean sea

    level pressure (hPa), snowfall amount (cm),

    sunshine duration (Min), evapotranspiration (Mm),

    FAO reference evapotranspiration (mm), wind

    speed (Km/hr), wind direction (Aº), soil

    temperature (AºC), soil moisture (fraction).

    Risk monitoring model of intelligent agriculture

    Internet of Things based on big data

    Sensors

    X

    X

    Application of Modern GIS and Remote Sensing

    Technology Based on Big Data Analysis in

    Intelligent Agriculture

    Satellite

    Images, document data.

    X

    Superior fuzzy enumeration crop prediction

    algorithm for big data agriculture applications

    Database

    X

    Crop ﬁeld dataset, name area.

    Big Data Scheme from Remote Sensing Applications:

    Concluding Notes for Agriculture and Forestry

    Applications

    Satellite

    X

    X

    A Machine Learning Based Model for Energy Usage

    Peak Prediction in Smart Farms.

    Sensors

    X

    Internal temperature, internal humidity, ventilation

    temperature, heating temperature, outside

    temperature, outside solar temperature, dew point,

    hourly accumulated light, hourly solar radiation,

    temperature difference, crop output production.

    Monitoring Complex Integrated Crop–Livestock

    Systems at Regional Scale in Brazil: A Big Earth

    Observation Data Approach.

    Satellite

    X

    NDVI, EVI, Near-Infrared spectral band (NIR) and

    Mid-Infrared spectral band (MIR).

    Sustainability 2022, 14, 16131

    34 of 37

    References

    1.

    Praveen, B.; Sharma, P. A review of literature on climate change and its impacts
    on agriculture productivity. J. Public Aff. 2019,

    19, e1960. [CrossRef]

    2.

    Yaqoob, N.; Ali, S.A.; Kannaiah, D.; Khan, N.; Shabbir, M.S.; Bilal, K.; Tabash,
    M.I. The effects of Agriculture Productivity, Land

    Intensiﬁcation, on Sustainable Economic Growth: A panel analysis from Bangladesh,
    India, and Pakistan Economies. Environ. Sci.

    Pollut. Res. Int. 2022, 1–9.. [CrossRef]

    3.

    Wakelin, S.A.; Gomez-Gallego, M.; Jones, E.; Smaill, S.; Lear, G.; Lambie, S.
    Climate change induced drought impacts on plant

    diseases in New Zealand. Australas. Plant Pathol. 2018, 47, 101–114. [CrossRef]

    4.

    Liakos, K.; Busato, P.; Moshou, D.; Pearson, S.; Bochtis, D. Machine Learning
    in Agriculture: A Review. Sens. Multidiscip. Digit.

    Publ. Inst. 2018, 18, 2674. [CrossRef]

    5.

    Sundmaeker, H.; Verdouw, C.; Wolfert, S.; Pérez Freire, L. Internet of Food and
    Farm. In Digitising the Industry-Internet of Things

    Connecting the Physical, Digital and Virtual Worlds; Vermesan, O., Friess, P.,
    Eds.; River Publishers: Delft, Denmark, 2017.

    6.

    Wolfert, S.; Ge, L.; Verdouw, C.; Bogaardt, M.J. Big data in smart farming–A review.
    Agric. Syst. 2017, 153, 69–80. [CrossRef]

    7.

    Nandyala, C.; Kim, H.K. Big and meta data management for U-agriculture mobile
    services. Int. J. Software Eng. Appl. IJSEIA 2016,

    10, 257–270. [CrossRef]

    8.

    Cravero, A.; Sepúlveda, S. Use and Adaptations of Machine Learning in Big Data—Applications
    in Real Cases in Agriculture.

    Electronics 2021, 10, 552. [CrossRef]

    9.

    Ihde, N.; Marten, P.; Eleliemy, A.; Poerwawinata, G.; Silva, P.; Tolovski, I.;
    Ciorba, F.M.; Rabl, T. A Survey of Big Data, High

    Performance Computing, and Machine Learning Benchmarks. In Proceedings of the
    Technology Conference on Performance Evaluation

    and Benchmarking; Springer: Berlin/Heidelberg, Germany, 2021; pp. 98–118.

    10.

    Wu, Y.; Xiang, Y.; Ge, J.; Muller, P. High-performance computing for big data
    processing. Future Gener. Comput. Syst. 2018, 88,

    693–695. [CrossRef]

    11.

    Sun, A.; Scanlon, B. How can Big Data and machine learning beneﬁt environment
    and water management: A survey of methods,

    applications, and future directions. Environ. Res. Lett. IOP Publ. 2019, 14, 73001.
    [CrossRef]

    12.

    Cravero, A.; Pardo, S.; Sepúlveda, S.; Muñoz, L. Challenges to Use Machine Learning
    in Agricultural Big Data: A Systematic

    Literature Review. Agronomy 2022, 12, 748. [CrossRef]

    13.

    Saiz-Rubio, V.; Rovira-Más, F. From smart farming towards agriculture 5.0: A review
    on crop data management. Agronomy 2020,

    10, 207. [CrossRef]

    14.

    Šuman, S.; Pošˇci´c, P.; Gligora Markovi´c, M. Big Data Management Challenges.
    Int. J. Adv. Trends Comput. Sci. Eng. 2020,

    9, 717–723. [CrossRef]

    15.

    Bhatnagar, R. Machine learning and big data processing: A technological perspective
    and review. In Proceedings of the International

    Conference on Advanced Machine Learning Technologies and Applications; Springer:
    Berlin/Heidelberg, Germany, 2018; pp. 468–478.

    16.

    Rasyid, L.; Andayani, S. Review on clustering algorithms based on data type: Towards
    the method for data combined of

    numeric-fuzzy linguistics. In Proceedings of the 5th International Conference
    on Research, Implementation, & Education of Mathematics

    and Sciences, 7–8 May 2018, Yogyakarta, Indonesia; IOP Publishing: Bristol, UK,
    2018; Volume 1097, p. 012082.

    17.

    Nandi, G.; Sharma, R.K. Data Science Fundamentals and Practical Approaches: Understand
    Why Data Science Is the Next; BPB

    Publications: Uttar Pradesh, India, 2020.

    18.

    Firdaus, H.; Hassan, S.I. Unsupervised Learning on Healthcare Survey Data with
    Particle Swarm Optimization. In Machine

    Learning with Health Care Perspective; Springer: Berlin/Heidelberg, Germany, 2020;
    pp. 57–89.

    19.

    Kitchenham, B.; Charters, S. Guidelines for performing systematic literature reviews
    in software engineering. Thechnical Rep.

    Ebse´07. 2007. Available online: https://www.researchgate.net/publication/302924724_Guidelines_for_performing_Systematic_

    Literature_Reviews_in_Software_Engineering (accessed on 25 September 2022).

    20.

    Moher, D.; Liberati, A.; Tetzlaff, J.; Altman, D.G.; PRISMA Group.

    Preferred reporting items for systematic reviews and

    meta-analyses: The PRISMA statement. Ann. Intern. Med. 2009, 151, 264–269. [CrossRef]
    [PubMed]

    21.

    Lin, C.S.; Wang, Y.Y. Data type and data source preferences for six social sciences
    subjects in quantitative data reuses. Proc. Assoc.

    Inf. Sci. Technol. 2018, 55, 867–868. [CrossRef]

    22.

    Putra, H.Y.; Putra, H.; Kurniawan, N.B. Big data analytics algorithm, data type
    and tools in smart city: A systematic literature

    review.

    In Proceedings of the 2018 International Conference on Information Technology
    Systems and Innovation (ICITSI),

    Bandung, Indonesia, 22–26 October 2018; pp. 474–478.

    23.

    Fassnacht, F.; Hartig, F.; Latiﬁ, H.; Berger, C.; Hernández, J.; Corvalán, P.;
    Koch, B. Importance of sample size, data type and

    prediction method for remote sensing-based estimations of aboveground forest biomass.
    Remote Sens. Environ. 2014, 154, 102–114.

    [CrossRef]

    24.

    Roy, D.; Shirazi, F. A Review on Multiple Data Source Based Recommendation Systems.
    In Proceedings of the 2021 International

    Conference on Computational Science and Computational Intelligence (CSCI), Las
    Vegas, NV, USA, 15–17 December 2021;

    pp. 1534–1539.

    25.

    Sassi, I.; Ouaftouh, S.; Anter, S. Adaptation of Classical Machine Learning Algorithms
    to Big Data Context: Problems and

    Challenges. In Proceedings of the 2019 1st International Conference on Smart Systems
    and Data Science (ICSSD), Rabat, Morocco,

    3–4 October 2019; pp. 1–7.

    Sustainability 2022, 14, 16131

    35 of 37

    26.

    Elshawi, R.; Sakr, S.; Talia, D.; Trunﬁo, P. Big Data Systems Meet Machine Learning
    Challenges: Towards Big Data Science as a

    Service. Big Data Res. 2018, 14, 1–11. [CrossRef]

    27.

    Haig, B.D. Big data science: A philosophy of science perspective. In Big Data
    in Psychological Research; Woo, S.E., Tay, L., Proctor,

    R.W., Eds.; American Psychological Association: Washington, DC, USA, 2020; pp.
    15–33.

    28.

    Santos, M.; e Sá, J.; Costa, C.; Galváo, J.; Andrade, C.; Martinho, B.; Lima,
    F.; Costa, E.; Lima, F. A big data analytics architecture

    for industry 4.0. In Proceedings of the World Conference on Information Systems
    and Technologies, Madeira, Portugal, 11–13 April 2017;

    Springer: Berlin/Heidelberg, Germany, 2017; pp. 175–184.

    29.

    Salma, C.A.; Tekinerdogan, B.; Athanasiadis, I.N. Chapter 4—Domain-Driven Design
    of Big Data Systems Based on a Reference

    Architecture; Morgan Kaufmann: Burlington, MA, USA, 2017; pp. 49–68. [CrossRef]

    30.

    Sowmya, R.; Suneetha, K. Data mining with big data. In Proceedings of the 2017
    11th International Conference on Intelligent

    Systems and Control (ISCO), Coimbatore, India, 5–6 January, 2017; pp. 246–250.

    31.

    Song, I.Y.; Zhu, Y. Big data and data science: What should we teach? Expert Syst.
    2016, 33, 364–373. [CrossRef]

    32.

    Demchenko, Y.; De-Laat, C.; Membrey, P. Deﬁning architecture components of the
    big data ecosystem. In Proceedings of the

    2014 International Conference on Collaboration Technologies and Systems, CTS 2014,
    Minneapolis, MN, USA, 19–23 May 2014;

    pp. 104–112.

    33.

    Semlali, B.E.B.; Amrani, C.E.; Ortiz, G. Hadoop paradigm for satellite environmental
    big data processing. Int. J. Agric. Environ.

    Inf. Syst. 2020, 11, 23–47. [CrossRef]

    34.

    Alex, S.A.; Kanavalli, A. Intelligent computational techniques for crops yield
    prediction and fertilizer management over big data

    environment. Int. J. Innov. Technol. Explor. Eng. 2019, 8, 3521–3526. [CrossRef]

    35.

    Cherkassky, V.; Mulier, F. Learning from Data: Concepts, Theory, and Methods;
    John Wiley & Sons: Hoboken, NJ, USA, 2007.

    36.

    Rudin, C.; Wagstaff, K. Machine learning for science and society. Mach Learn.
    2014, 95, 1–9. [CrossRef]

    37.

    Qiu, J.; Wu, Q.; Ding, G.; Xu, Y.; Feng, S. A survey of machine learning for big
    data processing. Eurasip J. Adv. Signal Process. 2016,

    1, 1–16.

    38.

    Benos, L.; Tagarakis, A.C.; Dolias, G.; Berruto, R.; Kateris, D.; Bochtis, D.
    Machine Learning in Agriculture: A Comprehensive

    Updated Review. Sensors 2021, 21, 3758. [CrossRef] [PubMed]

    39.

    Bal, S.K. Agro-meteorological basis of extremes of temperature with special perspective
    to livestock and poultry. Clim. Resilient

    Anim. Husb. 2021, 23.

    40.

    Malik, A.; Burney, A.; Ahmed, F. A comparative study of unstructured data with
    SQL and NO-SQL database management

    systems. J. Comput. Commun. 2020, 8, 59–71. [CrossRef]

    41.

    Villars, R.L.; Olofson, C.W.; Eastwood, M. Big Data: What It Is and Why You Should
    Care; White Paper: Framingham, MA,

    USA, 2011.

    42.

    Eberendu, A.C.; Madonna University. Unstructured Data: An overview of the data
    of Big Data. Int. J. Comput. Trends Technol.

    2016, 38, 46–50. [CrossRef]

    43.

    Sánchez, M.; Barrena, M.; Bustos, P.; Campillo, C.; García, P. Arquitectura software
    basada en tecnologías smart para agricultura

    de precisión. Jornadas Ing. Softw. Bases Datos 2020, 219, 219–349.

    44.

    Sambrekar, K.; Rajpurohit, V.S.; Joshi, J. A proposed technique for conversion
    of unstructured Agro-data to semi-structured

    or structured data. In Proceedings of the 2018 Fourth International Conference
    on Computing Communication Control and

    Automation (ICCUBEA), Pune, India, 16–18 August 2018.

    45.

    Alkathiri, M.; Jhummarwala, A.; Potdar, M.B. Multi-dimensional geospatial data
    mining in a distributed environment using

    MapReduce. J. Big Data 2019, 6, 1–34. [CrossRef]

    46.

    Guimarães, N.; Pádua, L.; Marques, P.; Silva, N.; Peres, E.; Sousa, J.J. Forestry
    Remote Sensing from Unmanned Aerial Vehicles: A

    review focusing on the data, processing and potentialities. Remote Sens. 2020,
    12, 1046. [CrossRef]

    47.

    Press, F.; Siever, R. Earth, 1998. Available online: https://aws.amazon.com/earth/
    (accessed on 19 November 2022).

    48.

    Gorelick, N.; Hancher, M.; Dixon, M.; Ilyushchenko, S.; Thau, D.; Moore, R. Google
    Earth Engine: Planetary-scale geospatial

    analysis for everyone. Remote Sens. Environ. 2017, 202, 18–27. [CrossRef]

    49.

    Pekel, J.F.; Cottam, A.; Gorelick, N.; Belward, A.S. High-resolution mapping of
    global surface water and its long-term changes.

    Nature 2016, 540, 418–422. [CrossRef]

    50.

    Padarian, J.; Minasny, B.; McBratney, A.B. Using Google’s cloud-based platform
    for digital soil mapping. Comput. Geosci. 2015,

    83, 80–88. [CrossRef]

    51.

    Landset, S.; Khoshgoftaar, T.M.; Richter, A.N.; Hasanin, T. A survey of open source
    tools for machine learning with big data in

    the Hadoop ecosystem. J. Big Data 2015, 2, 1–36. [CrossRef]

    52.

    Odun-Ayo, I.; Ananya, M.; Agono, F.; Goddy-Worlu, R. Cloud computing architecture:
    A critical analysis. In Proceedings of the

    2018 18th International Conference on Computational Science and Applications (ICCSA),
    Melbourne, Australia, 2–5 July 2018.

    53.

    Balducci, F.; Impedovo, D.; Pirlo, G. Machine learning applications on agricultural
    datasets for smart farm enhancement. Machines

    2018, 6, 38. [CrossRef]

    54.

    Choudhary, N.K.; Chukkapalli, S.S.L.; Mittal, S.; Gupta, M.; Abdelsalam, M.; Joshi,
    A. YieldPredict: A Crop Yield Prediction

    Framework for Smart Farms. In Proceedings of the 2020 IEEE International Conference
    on Big Data (Big Data), Atlanta, GA, USA,

    10–13 December 2020; pp. 2340–2349. [CrossRef]

    Sustainability 2022, 14, 16131

    36 of 37

    55.

    Gnanasankaran, N.; Ramaraj, E. The Effective Yield Of Paddy Crop In Sivaganga
    District-An Initiative For Smart Farming. Int. J.

    Sci. Technol. Res. 2020, 9, 2.

    56.

    Donzia, S.K.Y.; Kim, H.k. Architecture Design of a Smart Farm System Based on
    Big Data Appliance Machine Learning. In

    Proceedings of the 2020 20th International Conference on Computational Science
    and Its Applications (ICCSA), Cagliari, Italy,

    1–4 July 2020; pp. 45–52. [CrossRef]

    57.

    Priya, R.; Ramesh, D.; Khosla, E. Crop Prediction on the Region Belts of India:
    A Naïve Bayes MapReduce Precision Agricultural

    Model.

    In Proceedings of the 2018 International Conference on Advances in Computing,
    Communications and Informatics

    (ICACCI), Bangalore, India, 19–22 September 2018; pp. 99–104.

    58.

    Shelestov, A.; Lavreniuk, M.; Vasiliev, V.; Shumilo, L.; Kolotii, A.; Yailymov,
    B.; Kussul, N.; Yailymova, H. Cloud Approach to

    Automated Crop Classiﬁcation Using Sentinel-1 Imagery. IEEE Trans. Big Data 2019,
    6, 572–582. [CrossRef]

    59.

    Yahata, S.; Onishi, T.; Yamaguchi, K.; Ozawa, S.; Kitazono, J.; Ohkawa, T.; Yoshida,
    T.; Murakami, N.; Tsuji, H. A hybrid machine

    learning approach to automatic plant phenotyping for smart agriculture. In Proceedings
    of the 2017 International Joint Conference

    on Neural Networks (IJCNN), Anchorage, AK, USA, 4–19 May 2017; pp. 1787–1793.

    60.

    Ochoa, K.S.; Guo, Z. A framework for the management of agricultural resources
    with automated aerial imagery detection.

    Comput. Electron. Agric. 2019, 162, 53–69. [CrossRef]

    61.

    Fenu, G.; Malloci, F.M. An application of machine learning technique in forecasting
    crop disease. In Association for Computing

    Machinery; 2019; pp. 76–82. [CrossRef]

    62.

    TOMBE, R. Computer Vision for Smart Farming and Sustainable Agriculture. In Proceedings
    of the 2020 IST-Africa Conference

    (IST-Africa), Kampala, Uganda, 18–22 May 2020.

    63.

    Dutta, R.; Li, C.; Smith, D.; Das, A.; Aryal, J. Big Data Architecture for Environmental
    Analytics. Int. Symp. Environ. Softw. Syst.

    2015, 578–588.

    64.

    Doshi, Z.; Nadkarni, S.; Agrawal, R.; Shah, N. AgroConsultant: Intelligent Crop
    Recommendation System Using Machine

    Learning Algorithms. In Proceedings of the 2018 Fourth International Conference
    on Computing Communication Control and

    Automation (ICCUBEA), Pune, India, 16–18 August 2018; pp. 1–6.

    65.

    Rehman, A.; Liu, J.; Keqiu, L.; Mateen, A.; Yasin, M.Q. Machine learning prediction
    analysis using IoT for smart farming. Int. J.

    Emerg. Trends Eng. Res. 2020, 8, 6482–6487.

    66.

    Tarik, H.; Mohammed, O.J. Big Data Analytics and Artiﬁcial Intelligence Serving
    Agriculture. In Proceedings of the Advanced

    Intelligent Systems for Sustainable Development (AI2SD’2019), Marrakech, Morocco,
    8–11 July 2019; Ezziyyani, M., Ed.; Springer

    International Publishing: Cham, Switzerland, 2020; pp. 57–65.

    67.

    Kumari, M.; Kumar, A.; Singh, P.; Singh, S. Multidisciplinary Real-Time Model
    for Smart Agriculture based on Weather

    Forecasting Using IoT, Machine Learning, Big Data and Cloud. In Proceedings of
    the 2021 5th International Conference on

    Information Systems and Computer Networks (ISCON), Mathura, India, 22–23 October
    2021; pp. 1–5.

    68.

    Katyayan, A.; Mashelkar, S.; DC, A.G.; Morajkar, S. Design of Smart Agriculture
    Systems using Artiﬁcial Intelligence and Big

    Data Analytics. In Proceedings of the 2021 3rd International Conference on Advances
    in Computing, Communication Control

    and Networking (ICAC3N), Greater Noida, India, 17–18 December 2021; pp. 592–595.

    69.

    Melgar-García, L.; Gutiérrez-Avilés, D.; Godinho, M.T.; Espada, R.; Brito, I.S.;
    Martínez-Álvarez, F.; Troncoso, A.; Rubio-Escudero,

    C. A new big data triclustering approach for extracting three-dimensional patterns
    in precision agriculture. Neurocomputing 2022,

    500, 268–278. [CrossRef]

    70.

    Wang, Q.; Mu, Z. Risk monitoring model of intelligent agriculture Internet of
    Things based on big data. Sustain. Energy Technol.

    Assess. 2022, 53, 102654. [CrossRef]

    71.

    Wang, X.; Yu, S.; Wen, Z.; Zhang, L.; Fang, C.; Jiang, L. Application of Modern
    GIS and Remote Sensing Technology Based on Big

    Data Analysis in Intelligent Agriculture. J. Indian Soc. Remote. Sens. 2022, 1–11..
    [CrossRef]

    72.

    Ahamed, T. Big Data Scheme from Remote Sensing Applications: Concluding Notes
    for Agriculture and Forestry Applications.

    In Remote Sensing Application; Springer: Berlin/Heidelberg, Germany, 2022; pp.
    351–361.

    73.

    Venkatesan, S.; Lim, J.; Ko, H.; Cho, Y. A Machine Learning Based Model for Energy
    Usage Peak Prediction in Smart Farms.

    Electronics 2022, 11, 218. [CrossRef]

    74.

    Kuchler, P.C.; Simões, M.; Ferraz, R.; Arvor, D.; de Almeida Machado, P.L.O.;
    Rosa, M.; Gaetano, R.; Bégué, A. Monitoring

    Complex Integrated Crop–Livestock Systems at Regional Scale in Brazil: A Big Earth
    Observation Data Approach. Remote Sens.

    2022, 14, 1648. [CrossRef]

    75.

    Nóbrega, L.; Tavares, A.; Cardoso, A.; Gonzalves, P. Animal monitoring based on
    IoT technologies. In Proceedings of the 2018

    IoT Vertical and Topical Summit on Agriculture-Tuscany (IOT Tuscany), Tuscany,
    Italy, 8–9 May 2018; pp. 1–5.

    76.

    Yang, J.; Liu, M.; Lu, J.; Miao, Y.; Hossain, M.A.; Alhamid, M.F. Botanical Internet
    of Things: Toward Smart Indoor Farming by

    Connecting People, Plant, Data and Clouds. Mob. Netw. Appl. 2018, 23, 188–202.
    [CrossRef]

    77.

    Wang, X.; Yang, K.; Liu, T. The Implementation of a Practical Agricultural Big
    Data System. In Proceedings of the 2019 IEEE 5th

    International Conference on Computer and Communications (ICCC), Chengdu, China,
    6–9 December 2019; pp. 1955–1959.

    78.

    Veerachamy, R.; Ramar, R. Agricultural Irrigation Recommendation and Alert (AIRA)
    system using optimization and machine

    learning in Hadoop for sustainable agriculture. Environ. Sci. Pollut. Res. 2022,
    29, 19955–19974. [CrossRef] [PubMed]

    Sustainability 2022, 14, 16131

    37 of 37

    79.

    Bendre, M.R.; Thool, R.C.; Thool, V.R. Big data in precision agriculture: Weather
    forecasting for future farming. In Proceedings

    of the 2015 1st International Conference on Next Generation Computing Technologies
    (NGCT) IEEE, Dehradun, India, 4–5

    September 2015; pp. 744–750.

    80.

    Yang, C.; Huang, Q.; Li, Z.; Liu, K.; Hu, F. Big Data and cloud computing: Innovation
    opportunities and challenges. Int. J. Digit.

    Earth 2017, 10, 13–53. [CrossRef]

    81.

    Vasumathi, M.T.; Kamarasan, M. Fruit disease prediction using machine learning
    over big data. Int. J. Recent Technol. Eng. 2019,

    7, 556–559.

    82.

    Amani, M.; Kakooei, M.; Moghimi, A.; Ghorbanian, A.; Ranjgar, B.; Mahdavi, S.;
    Davidson, A.; Fisette, T.; Rollin, P.; Brisco, B.;

    et al. Application of google earth engine cloud computing platform, sentinel imagery,
    and neural networks for crop mapping in

    Canada. Remote Sens. 2020, 12, 3561. [CrossRef]

    83.

    Sathiaraj, D.; Huang, X.; Chen, J. Predicting climate types for the Continental
    United States using unsupervised clustering

    techniques. Environmetrics 2019, 30, e2524. [CrossRef]

    84.

    Ip, R.H.; Ang, L.M.; Seng, K.P.; Broster, J.C.; Pratley, J.E. Big data and machine
    learning for crop protection. Comput. Electron.

    Agric. 2018, 151, 376–383. [CrossRef]

    85.

    Saggi, M.K.; Jain, S. Reference evapotranspiration estimation and modeling of
    the Punjab Northern India using deep learning.

    Comput. Electron. Agric. 2019, 156, 387–398. [CrossRef]

    86.

    Reddy, P.C.; Sureshbabu, A. An adaptive model for forecasting seasonal rainfall
    using predictive analytics. Int. J. Intell. Eng. Syst.

    2019, 12, 22–32. [CrossRef]

    87.

    Sumalatha, M.R.; Akila, M. Real Time Big Data Analytics for Agricultural Land
    Hotspot Prediction; Institute of Electrical and

    Electronics Engineers Inc.: Piscataway, NJ, USA, 2019; pp. 411–416. [CrossRef]

    88.

    Abbona, F.; Vanneschi, L.; Bona, M.; Giacobini, M. Towards modelling beef cattle
    management with Genetic Programming. Livest.

    Sci. 2020, 241, 104205. .: 10.1016/j.livsci.2020.104205. [CrossRef]

    89.

    Su, Y.; Wang, X. Innovation of agricultural economic management in the process
    of constructing smart agriculture by big data.

    Sustain. Comput. Inform. Syst. 2021, 31, 100579. [CrossRef]

    90.

    Velmurugan, P.; Kannagi, A.; Varsha, M. Superior fuzzy enumeration crop prediction
    algorithm for big data agriculture

    applications. Mater. Today Proc. 2021.. [CrossRef]

    91.

    Sitokonstantinou, V.; Drivas, T.; Koukos, A.; Papoutsis, I.; Kontoes, C. Scalable
    distributed random forest classiﬁcation for paddy

    rice mapping. Zenodo 2020, 11.. [CrossRef]

    92.

    Gumma, M.K.; Thenkabail, P.; Teluguntla, P.; Oliphant, A.; Xiong, J.; Giri, C.;
    Pyla, V.; Dixit, S.; Whitbread, A. Agricultural

    cropland extent and areas of South Asia derived using Landsat satellite 30-m time-series
    big-data using random forest machine

    learning algorithms on the Google Earth Engine cloud. Giscience Remote Sens. Taylor
    Fr. 2020, 57, 302–322. [CrossRef]

    93.

    Mangewa, L.J.; Ndakidemi, P.A.; Alward, R.D.; Kija, H.K.; Bukombe, J.K.; Nasolwa,
    E.R.; Munishi, L.K. Comparative Assessment

    of UAV and Sentinel-2 NDVI and GNDVI for Preliminary Diagnosis of Habitat Conditions
    in Burunge Wildlife Management

    Area, Tanzania. Earth 2022, 3, 769–787. [CrossRef]

    94.

    Zhen, Z.; Chen, S.; Yin, T.; Chavanon, E.; Lauret, N.; Guilleux, J.; Henke, M.;
    Qin, W.; Cao, L.; Li, J.; et al. Using the negative soil

    adjustment factor of soil adjusted vegetation index (Savi) to resist saturation
    effects and estimate leaf area index (lai) in dense

    vegetation areas. Sensors 2021, 21, 2115. [CrossRef]

    95.

    Aiken, V.C.F.; Dórea, J.R.R.; Acedo, J.S.; de Sousa, F.G.; Dias, F.G.; de Magalhães
    Rosa, G.J. Record linkage for farm-level data

    analytics: Comparison of deterministic, stochastic and machine learning methods.
    Comput. Electron. Agric. 2019, 163, 104857. .

    [CrossRef]

    96.

    Amaechi, E.S.; Pham, H.V. Enhancement of Convolutional Neural Networks Classiﬁer
    Performance in the Classiﬁcation of

    IoT Big Data. In Proceedings of the 4th International Conference on Machine Learning
    and Soft Computing, Association for

    Computing Machinery, Haiphong City, Vietnam, 17–19 January 2020; pp. 25–29. [CrossRef]

    97.

    Ye, S.; Liu, D.; Yao, X.; Tang, H.; Xiong, Q.; Zhuo, W.; Song, C. RDCRMG: A raster
    dataset clean & reconstitution multi-grid

    architecture for remote sensing monitoring of vegetation dryness. Remote Sens.
    2018, 10, 1376.

    98.

    Xu, C.; Du, X.; Yan, Z.; Fan, X. ScienceEarth: A big data platform for remote
    sensing data processing. Remote Sens. 2020, 12, 607.

    [CrossRef]

    99.

    Sawadogo, P.; Darmont, J. On data lake architectures and metadata management.
    J. Intell. Inf. Syst. 2021, 56, 97–120. [CrossRef]

    100. Batini, C.; Rula, A.; Scannapieco, M.; Viscusi, G. From data quality to big
    data quality. J. Database Manag. JDM 2015, 26, 60–82.

    [CrossRef]

    101. Al-Fuqaha, A.; Guizani, M.; Mohammadi, M.; Aledhari, M.; Ayyash, M. Internet
    of Things: A survey on enabling technologies,

    protocols, and applications. IEEE Commun. Surv. Tutor. 2015, 17, 2347–2376. [CrossRef]

    102. Farooq, M.S.; Riaz, S.; Abid, A.; Umer, T.; Zikria, Y. Role of IoT Technology
    in Agriculture: A Systematic Literature Review.

    Electron. Multidiscip. Digit. Publ. Inst. 2020, 9, 319. [CrossRef]

    '
  inline_citation: '>'
  journal: Sustainability (Basel)
  limitations: '>'
  pdf_link: https://www.mdpi.com/2071-1050/14/23/16131/pdf?version=1670380983
  publication_year: 2022
  relevance_score1: 0
  relevance_score2: 0
  title: Data Type and Data Sources for Agricultural Big Data and Machine Learning
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.26438/ijsrcse/v6i3.5666
  analysis: '>'
  authors:
  - Chahat Aggarwal
  - Bhaskar Gupta
  citation_count: 1
  full_citation: '>'
  full_text: ">\n  © 2018, IJSRCSE All Rights Reserved                           \
    \                                                                            \
    \                              56 \n \n \nInternational Journal of Scientific\
    \ Research in _______________________________    Survey  Paper   .  \nComputer\
    \ Science and Engineering \nVol.6, Issue.3, pp.56-66 , June (2018)           \
    \                                                                           E-ISSN:\
    \ 2320-7639 \n \nA Survey of Civilian Applications of WSN and Security Protocols\
    \ \n \nChahat Aggarwal1*, B. B. Gupta2       \n \n1Dept. of Computer Engineering,\
    \ National Institute of Technology, Kurukshetra, India \n2Dept. of Computer Engineering,\
    \ National Institute of Technology, Kurukshetra, India \nAvailable online at:\
    \ www.isroset.org \nReceived: 24/May/2018, Revised: 03/Jun/2018, Accepted: 20/Jun/2018,\
    \ Online: 30/Jun/ 2018 \nAbstract- Wireless sensor networks have become an integral\
    \ part of the modern smart living.  There are a variety of \napplications of WSNs\
    \ be it military, industry or civilian. With a multitude of gen – next applications\
    \ of WSNs \ncomes the responsibility of securing them. Owing to this fact many\
    \ security protocols have been put forward in the \npast. In this paper, we discuss\
    \ various civilian applications of WSNs and also review evolution of key distribution\
    \ \nschemes.  \n \nKeywords- Civilian applications, WSN security mechanisms  \n\
    I. \nINTRODUCTION \n     The very first applications of WSN were in the field\
    \ of \nthe military such as in communication infrastructure, \nbattlefield surveillance\
    \ and enemy tracking. Since then till \nnow, the applications of wireless sensors\
    \ have grown by \nleaps and bounds.  \nThe widespread development in Micro Electro\
    \ Mechanical \nSystems (MEMS), distributed computing and wireless \ncommunications\
    \ have led to extensive research and \ndevelopment in civilian applications of\
    \ Wireless Sensor \nNetworks. Undoubtedly, WSNs have become an inevitable \npart\
    \ of environment monitoring systems be it agriculture, \nforestry, livestock or\
    \ ecosystem monitoring, smart cities, \nsmart traffic, and e-health. In this paper,\
    \ we review the state \nof the art civilian applications of WSNs. We also discuss\
    \ the \nsystem requirements for all the types of applications. These \nresearches\
    \ have shown that wireless sensor networks provide \na better, convenient and\
    \ alternate way of living [1].  \nDeploying sensors for the tasks earlier done\
    \ by man also \nimproves the system performance by fulfilling the functional \n\
    requirements. \nA wireless sensor network is a sequential combination of 4 \n\
    units:  a sensing unit, a processing unit, a communication \nunit, and a power\
    \ unit. The sensing unit comprises of a \ngroup of transceivers that sense the\
    \ environment for the \ndesired stimulus and an ADC that converts analog signals\
    \ to \ndigital signals. These signals are then passed on to the \nprocessing unit\
    \ that processes these signals with the help of \na microprocessor. These processed\
    \ signals are then passed \non to the communication unit. Here the transceiver\
    \ \ncommunicates the sensed stimulus to the end user. Finally, it \nis the power\
    \ unit that powers all the operations of the sensor \nmotes. \n    Secure communication\
    \ in WSN calls for clever solutions. \nThe main restraints that hamper the various\
    \ security \nprotocols are low battery life of the sensor nodes and the \nneed\
    \ to conserve the bandwidth. Also, the sensor motes are \nmany a times easily\
    \ physically accessible, thereby making \nthem vulnerable to captured physically.\
    \ Thus, efficient light \nweight solutions are required for securing these wireless\
    \ \nsensor networks. \n    The paper is structured as follows: Section 2 describes\
    \ \nvarious civilian applications of WSN. Section 3 gives an \noverview of attacks\
    \ on WSN. Sections 4 and 5 explain in \ndetail various key distribution schemes\
    \ used in WSN and \nWBAN respectively. Section 6 finally concludes the paper.\
    \ \n \nII. \nAPPLICATION OF WSNS IN VARIOUS DOMAINS \nIn this section, we explore\
    \ various different civilian \napplications \nof \nWireless \nSensor \nNetworks.\
    \ \nThese \napplications can be broadly classified under the domain of \nagriculture,\
    \ smart parking, smart living spaces, and e-health. \nEach of the subsection describes\
    \ different categories of \napplications under each domain. \n2.1. Agriculture\
    \ \nModern day agriculture and farming demand enhanced food \nproduction, intelligent\
    \ information processing, greater \nproductivity, fault tolerance and water conservation.\
    \ WSNs \ncater to all these needs by providing novel and intelligent \nagricultural\
    \ solutions.  \n  Int. J. Sci. Res. in Computer Science and Engineering      \
    \                                        Vol-6(3),  Jun  2018, E-ISSN: 2320-7639\
    \ \n  © 2018, IJSRCSE All Rights Reserved                                    \
    \                                                                            \
    \                     57 \n In this section, we discuss the state of the art applications\
    \ of \nWSNs in the agriculture domain. \nIrrigation Management:  Moghaddam et\
    \ al [2] proposed the \nsmart sensor web (SSW) in 2010. The spatial-temporal soil\
    \ \nmoisture variations in an intelligent control system guide the \nSSW in determining\
    \ an optimal strategy for sensor \nconfiguration in the field. Along with the\
    \ optimal strategy, \nthe control system also provides estimation strategy after\
    \ \nobserving the soil moisture levels in all the dimensions. The \ntask of suffering\
    \ the configuration of the sensors is done by \nthe actuators present at different\
    \ depths. These actuators \nsend the information to the central coordinator that\
    \ then \ndecides the time when future readings have to be taken.  \nIn 2011 Saha\
    \ et al [3] presented the Alfalfa crop irrigation \nsystem to stop the drainage\
    \ of tail water in alfalfa crop. The \nauthors devised a WSN based solution that\
    \ completely \neliminates water runoff by providing information about \nirrigation\
    \ from the field and cellular communication along \nwith a water advance model\
    \ are used for wetting the field. \nAlso, the farmers an SMS notification for\
    \ shutting the water \nsupply thereby reducing the water wastage. \nGutierrez\
    \ et al [4] in 2014 put forward an automatic \nirrigation system to conserve water\
    \ by reducing water usage. \nIn order to measure soil moisture level at different\
    \ depths \nsoil moisture and temperature, sensor nodes are used: The \nautomatic\
    \ irrigation control system takes on the fly decision \nbased on the values provided\
    \ by the sensors. This irrigation \ncontrol functions by itself whenever any of\
    \ the two \nparameters exceed the threshold value. The remote server \nstores\
    \ all the information and displays in a GUI fashion to \nthe end user. \nAqua\
    \ management Inc designed the AMI Turf Irrigation \nSystem to provide affordable\
    \ water management solutions. \nThis all in one irrigation system employees a\
    \ cloud-based \ncontrol system that measures various parameters like \nweather\
    \ conditions, Evapotranspiration (ET), water leakage \nand flow. The application\
    \ has a simple click-based user \ninteraction with features such as remote programming,\
    \ \ndynamic parameter adjustment water budgeting fault \ndetection and alert notification.\
    \ The AMI Q collects all the \ndata from the sensors and consequently uploads\
    \ the \ninformation on the cloud. \nDiaz et al [5] put forward a vineyard production\
    \ monitoring \ndesign using WSN to measure differences in agricultural \nparameters\
    \ across the field. On basis of soil, geographic and \nweather maps the entire\
    \ field is divided into different zones \nin the first phase. The second phase\
    \ is the network planning \nphase. In this phase depending on the requirement\
    \ of the \napplication, an appropriate architecture is selected. In \npractice\
    \ sensors are deployed in different areas of the field \nthat collect the data\
    \ about various parameters like \ntemperature, luminosity, humidity etc. and route\
    \ the \ninformation to the gateway. The irrigation system is driven \nby the actuators.\
    \ The information routing is aided by the \nredundant nodes. These nodes also\
    \ imitate the faulty nodes \nin function. Gateway is the bridge between the sensor\
    \ nodes \nand the base station. \nCambra et al [6] suggested a video sensing mechanism\
    \ for \nadministering fertilizer consumption in agriculture. The \nobjective of\
    \ the proposed work is to maintain energy \nefficiency even by reducing the fertilizer\
    \ consumption for \ncrops.  This objective is realized by using AR drones that\
    \ \nrecord a video of the agricultural land. On the basis of this \nvideo, the\
    \ system recognizes and positions the already \npresent weeds in the farm. Finally,\
    \ the actuator signals the \nsprayer system to spray the fertilizers only on crops\
    \ and \navoiding the weeds. \nThe Common – Sense Net [7] is a joint venture of\
    \ EPFL, \nZurich, and center for Electronic Design and Technology \n(CEDT) at\
    \ IISC. The project was designed to predict and \nsolve problems of unfavorable\
    \ climate changes. The design \nconsists of nodes measuring soil moisture at a\
    \ depth of  30 \ncm and 150 cm both, amount of water needed for irrigation,  \n\
    temperature and humidity 9  on the field  and  3 backward \nnodes send the collected\
    \ data to the base station that then \nfurther sends the received data to the\
    \ remote server via \nGPRS links.  \n    Other  applications in this domain include\
    \  Pest and  \ndisease control [8] [9], controlled  fertilizer spray  [10],  \n\
    cattle movement  tracking  [11], greenhouse monitoring  \n[12], and remote diagnosis[13]\
    \ \n2.1.1. \nDevelopments in India  \nIIT Kharagpur developed low-cost irrigation\
    \ management \nsystem specifically for India. \nDas et al [14] studied the most\
    \ common fungal diseases in \ngrapes with the help of agro- metrological sensors\
    \ at Sulla \nvineyards, Nashik. Using sensors helped them in predicting \nthis\
    \ weather-related disease and hence benefited the \ngrapevine industry manifold\
    \ by increasing revenue and \nenriching quality of food. \nSimilarly, Shah et\
    \ al [15] developed the   Agri Sense \ndistributed system to predict the Bud Necrosis\
    \ Virus (BVN) \nin groundnut plant. The experimental setup was done at the \n\
    AGNR Agricultural University, Hyderabad. \n2.2.  Environment Monitoring System\
    \ \n    Environment monitoring systems are designed to sense \nmonitor and control\
    \ environmental parameters like \ntemperature, humidity, luminosity, wind pressure\
    \ etc. Some \nresearch is targeted towards proceeding highly accurate \n  Int.\
    \ J. Sci. Res. in Computer Science and Engineering                           \
    \                   Vol-6(3),  Jun  2018, E-ISSN: 2320-7639 \n  © 2018, IJSRCSE\
    \ All Rights Reserved                                                        \
    \                                                                            \
    \ 58 \nsolutions while others focus on fault tolerance.  Thus, it is \nextremely\
    \ vital to fathom the requirements of environment \nmonitoring systems [16] \n\
    2.2.1. System Requirements for Environment \nMonitoring Systems \nAutonomy \n\
    \   Proper functioning of the battery is inevitable as the radial \ntransceiver\
    \ consumes a lot of energy and the network should \nbe energy efficient. \nReliability\
    \ \n     To avoid unexpected system crashes the operations are \nrequired to be\
    \ predictable and handling simple. Also, \nfrequent maintenance is not advised\
    \ as the end user may not \nbe proficient enough and also may not have enough\
    \ \nnetworking knowledge. Thus, the reliability of the system is \nvery important\
    \ \nRobustness \n \n    Robustness is required to handle problems such as poor\
    \ \nsignal connectivity and hardware crashes. \nFlexibility \n   Depending on\
    \ the situation and requirement the user must \nbe able to change, move or add\
    \ stations to already existing \nsystems.   \n2.2.2. \nSmart home applications\
    \ of WSN \n   The concept of smart home emerged in the 1980s with an \nintent\
    \ to provide assisted living. The focus shifted to taking \ncare of the elderly\
    \ in the home only in the 1990s. Today \nsmart homes provide customized help according\
    \ to the \nrequirements of the individual.   \n   Hue et al [17] work integrate\
    \ WSN with RFID to measure \na person’s drug intake. It then transfers the ECG\
    \ data \nreliably in a smart home environment. \n   Wen et al [18] present yet\
    \ another technique for movement \ntracking by integrating WSN with machine learning.\
    \ Such \ndevices provide assisted living to the elderly. \n   Lec et al  [19]\
    \ present a methodology for designing access \npoints so as to ascertain network\
    \ efficiency by employing \ngenetic algorithms. \n2.3. Smart Parking Application\
    \ of WSN \n   Parking has become a common problem in almost all the \nmajor cities.\
    \  It often leads to air pollution, road congestion, \nand driver frustration.\
    \ To eliminate all such parking related \nproblems in Europe, Japan and U.K. were\
    \ the first countries \nthat implemented smart parking solutions.  Smart parking\
    \   \nsystems provide a number of advantages: \nSpace availability: These systems\
    \ alert the driver about the \nvacant parking slots. \nSmooth Transit: People\
    \ at parks and other public places can \nsmoothly plan their transit with the\
    \ help of such systems.   \nEstimating pricing Strategy:  The parking administers\
    \ / \noperator can use smart parking technology to regulate the \npricing strategy\
    \ depending on traffic trends. \nPrevent vehicle thefts: These systems keep a\
    \ 24/7 check on \nvehicles and alert any theft. \nExpense Reduction:  Smart parking\
    \ system also reduces staff \nrequirement thereby reducing expenses on staffing.\
    \ \n    The work of Chen et al [20] introduced parking guidance \nand information\
    \ system by deploying a WSN. The proposed \nsystem uses tree-like topology to\
    \ transmit data via the WSN. \nIt uses a non-standard protocol for this purpose.\
    \ The data is \nprocessed by the information and management center and \nthen\
    \ displayed on LED servers for drivers. \n     A Transit based smart parking system\
    \ deployed in Europe \n[21] uses loop detectors for the surveillance of available\
    \ \nparking slots. The corresponding information is then sent via \nVMS signal.\
    \ \n    Mouskos et al [22] developed a smart payment system for \nparking charges\
    \ using WSN and RFID tags.  The user \nactivates the RFID unit at the onset of\
    \ his parking and \ndeactivates at his transit. Bills are displayed on the transit\
    \ \nbut actual payment is done on monthly bases. \n    U.Manni [23] proposed an\
    \ online parking reservation \nsystem to reduce the time spent in finding a vacant\
    \ slot for \nparking. Such a system also eliminates the need to pay extra \nfees\
    \ for parking. Smart sensing technology is used to \nachieve the above-mentioned\
    \ goal. \n   The work by Serpen et al [24] presented algorithms for \nfully automated\
    \ parking system. Robot carts are used to park \nthe vehicles in the parking area\
    \ and elevators are used to \nmove across floors.                     \n2.4. E-Health\
    \ applications of WSN \n   Suryadip et al [25] put forward a non- invasive, continuous\
    \ \nmonitoring application of WBASN for people suffering from \nParkinson’s disease.\
    \ The patient is required to wear a shoe \nthat has WSN device attached to it.\
    \ This device continuously \nmonitors the gait of the patient to recognizes any\
    \ occurrence \nof freezing of gait (FOG) using the RSSI value. This is \nhelpful\
    \ in detecting and also preventing injuries and falls. \n  Int. J. Sci. Res. in\
    \ Computer Science and Engineering                                           \
    \   Vol-6(3),  Jun  2018, E-ISSN: 2320-7639 \n  © 2018, IJSRCSE All Rights Reserved\
    \                                                                            \
    \                                                         59 \nThe major advantage\
    \ of this shoe includes: It is an indoor \nmonitoring system and there is no requirement\
    \ of placing a \nnumber of sensor motes in the entire house to record \nmovements\
    \ of the patient. The shoe does the job!  \n    Yan et al [26] put forward a WSN\
    \ application for e-health \nto monitor a person’s movement. This data can be\
    \ directly \nsent to the doctor, relatives, caretakers etc or stored for \nfuture\
    \ analysis. Also, this application provides tracking and \nlocalization in multiple\
    \ rooms. \n    Authors in [27] proposed a Bluetooth - enabled in-home \npatient\
    \ monitoring for early detection of Alzheimer’s \ndisease. Local movement of the\
    \ patient is monitored and \nrecorded using short-range   Bluetooth technology.\
    \ This \nallows the doctor to perform remote diagnosis through the \ninternet.\
    \ \n   The work of  Chen et al  [ 28 ]  proposes an e-health care \nmanagement\
    \ system using second generation RFID  \ntechnology. Using this technique the\
    \ systems are able to \nperform on – demand actions according to the need of \n\
    different objects. \nIII. \nATTACKS IN WSN \n3.1 Terminology of the terms used\
    \ \n \nIn this section we adapt definitions of various terms related \nto attacks\
    \ in WSN from the National Information Systems \nSecurity Glossary [29]. \nThreat:\
    \ Any circumstance or event (such as the existence of \nan attacker and vulnerabilities)\
    \ with the potential to \nadversely impact a system through a security breach.\
    \ \nAttack: Attempt to gain unauthorized access to a service, \nresource, or information,\
    \ or the attempt to compromise \nintegrity, availability, or confidentiality.\
    \ Note that success is \nnot necessary. \nAttacker, Intruder, Adversary: We use\
    \ these terms \nsynonymously to mean the originator of an attack. \nVulnerability,\
    \ Flaw: Weakness in system security design, \nimplementation, configuration or\
    \ limitations that could be \nexploited. \nRisk: Probability that an attacker\
    \ will exploit a particular \nvulnerability, causing harm to a system asset. \n\
    \ \n3.2. Attack Models \n      WSN is especially vulnerable to external and internal\
    \ \nattacks due to the following peculiar characteristics: \n \nComputational\
    \ capabilities: These sensor nodes are used and \nthrow devices and are generally\
    \ equipped with the very less \ncomputational facility to lower the cost of the\
    \ overall setup. \nMemory: only a small microprocessor chip is embedded in \n\
    the sensors and no additional memory element is generally \nattached \nCommunication\
    \ bandwidth: the channels used are public \nchannels (433 MHz ISM band) therefore\
    \ the communication \nover these channels can be easily intercepted by anyone.\
    \ \nBattery power: the biggest concern is the battery power. \nThese nodes are\
    \ not powered by any outside energy source \nso they get exhausted soon. Security\
    \ algorithms which are \npower efficient need to be developed to fully avail the\
    \ \nservices provided by WSNs. \nEasy to physically access such nodes: They are\
    \ generally \ndeployed in areas where the nodes can be physically \naccessed.\
    \ The intruder thus gains the privilege of tampering \nthe hardware to assess\
    \ the node id and easily implement an \nimpersonation attack [30]. \n It thus\
    \ becomes crucial to study and understand the varied \ntypes of attacks in order\
    \ to prevent them. This section \ndescribes the attack models for the random and\
    \ regular \ntopology. \n \n \nWormhole Attack:  The adversary establishes an\
    \ out \nof band communication channel between two \nsensor nodes. This fools the\
    \ sensor nodes to think \nthat they are neighbors to each other. This \ncompletely\
    \ changes the routing information and the \npackets are tunneled from one part\
    \ of the network \nto another. Thus, the adversary gains tremendous \npower by\
    \ mounting a wormhole attack by \nmonitoring the network traffic or even by mounting\
    \ \na DOS attack. The biggest challenge in overcoming \nwormhole attack is that\
    \ even encryption techniques \nlie helpless in preventing this attack (Figure\
    \ 1). \n            \n \n \nFigure 1: Wormhole attack \n \n \nSybil: The corrupted\
    \ node assumes a large number \nof identities at the time of routing. Thus, the\
    \ \nmalicious node is confused to be a legitimate node. \nMultipath routing gets\
    \ severely affected by Sybil \n  Int. J. Sci. Res. in Computer Science and Engineering\
    \                                              Vol-6(3),  Jun  2018, E-ISSN: 2320-7639\
    \ \n  © 2018, IJSRCSE All Rights Reserved                                    \
    \                                                                            \
    \                     60 \nattack, because the node may think that it is routing\
    \ \npockets via different paths,  but in reality, all those \npaths may pass through\
    \ the corrupted node. When \ncombined with wormhole attack, it can have a \ndevastating\
    \ effect on the network. \n \nSpoofed or replayed routing information: This is\
    \ the \nsimplest type of attack that can be mounted on \nsensor nodes. The adversary\
    \ aims at consuming \ncritical network resources by injecting altered \ncontrol\
    \ pockets in the network (Figure 2). This \nleads to :  \n• Attraction or repulsion\
    \ of network traffic \naccording to the attackers will. \n• Extension or shortening\
    \ of  routes  \n• \nGeneration of the incorrect  error  message \n• \nSinkhole:\
    \ The corrupted node lures roughly all \ntraffic of the network by advertising\
    \ false routing \nupdate. After receiving all the network information, \nthe corrupted\
    \ node gains the advantage of \nmodifying the secret information about the \n\
    network. Some routing protocols require the nodes \nto send hello packets to determine\
    \ their neighbors \n• \nHello flood attack: The attacker that has high \ntransmission\
    \ power exploits this concept by \nsending or replaying these hello packets. The\
    \ \nrouting protocol gets disrupted as the attacker fools \nother nodes to believe\
    \ that it is a neighbor to them. \nBy broadcasting packets at much higher power,\
    \ the \ncorrupted node can even force legitimate nodes to \nelect its parent node\
    \ (Figure 7). \n                                      \n \nFigure 2:  False routing\
    \ information \n \nAcknowledgment Spoofing:  In some routing protocols \nthe\
    \ SNs send back acknowledgments. The adversary \nmay spoof these acknowledgment\
    \ packets, thereby \nconvincing other nodes that a weak link is a strong one \n\
    or a dead SN is alive. Thus packets sent through these \nlinks may be lost or\
    \ corrupted. \n \n \nFigure 3: Hello Flood attack \n \nIV. \nWSN SECURITY TECHNIQUES\
    \ \n \n     All sensor nodes in WSN use power efficient radio \ntransceivers for\
    \ their communications. Regardless of the \nunderlying \ntechnology \nof \nthe\
    \ \ntransceiver, \nall \ncommunications are done through a wireless channel. As\
    \ a \nresult the information can be easily accessed by anyone in \nthe vicinity.\
    \ All packets are then unprotected against any \nkind of communication attack.\
    \ It is indispensable to provide \nbasic security primitives to the sensor nodes\
    \ in order to give \na minimal protection to the information and a foundation\
    \ to \ncreate secure protocols. The security primitives are: \n \nKey Distribution\
    \ and Management \n \nSymmetric Key Cryptography (SKC) \n \nHash primitives\
    \ \n \nPublic Key Cryptography (PKC). \n \n4.1. Key Management and Distribution\
    \ \n    Key distribution and management is the heart of WSN \nsecurity. In order\
    \ to establish trust among nodes public and \nprivate keys are distributed among\
    \ them. Since the nodes are \nhighly resource constraint, therefore many lightweight\
    \ \nschemes have also been proposed over the ages. When it \ncomes to WSN three\
    \ important tasks need to be performed \nwith keys namely (Figure 4): \n \n  Int.\
    \ J. Sci. Res. in Computer Science and Engineering                           \
    \                   Vol-6(3),  Jun  2018, E-ISSN: 2320-7639 \n  © 2018, IJSRCSE\
    \ All Rights Reserved                                                        \
    \                                                                            \
    \ 61 \n  \n \nFigure 4: Management, storage, and distribution of keys \n     \
    \  \nNumerous key distribution schemes have been suggested by \nresearches in\
    \ the past. A broad classification of these \nschemes is shown in figure 5. \n\
    \ \n \n \nFigure 5: Taxonomy of key distribution mechanisms \n \n4.1.1 Using Network\
    \ Wide Keys  \n   It is the simplest key distribution scheme. The single \nmaster\
    \ key is loaded into all sensors that provide perfect key \nconnectivity. An example\
    \ of this approach is BROadcast \nSession Key Negotiation Protocol (BROSK)[30].\
    \ Any two \nnodes share random nonce, say Na and Nb, along with the \nsingle master\
    \ key to establishing a secure session key \n(Figure 10). However, the author\
    \ makes the assumption that \nthe shared master key is never divulged. This is\
    \ key on \nwhich the node can tell whether another node is in the same \nnetwork\
    \ or not. Also, it is assumed that the master key \ncannot be extracted from the\
    \ captured node. \n   The scheme works in the following manner: \nEach node tries\
    \ to broadcast the key negotiation message: \nIDA|NA||MACK(IDA|NA). Node B receives\
    \ this message \nfrom node A and vice-versa IDB|KB||MACK(IDB|NB). \nFinally shared\
    \ session key is established as follows: KAB= \nMACK(NA|NB) \n   The drawbacks\
    \ of BROSK include compromise of a single \nnode will divulge the common key,\
    \ an intruder having \naccess to the master key could easily insert malicious\
    \ nodes \ninto the network and revocation of malicious nodes is very \ndifficult.\
    \ \n   Other related solutions Loop- Based Key Management \nScheme [31] and Symmetric-Key\
    \ Key Establishment \nadopted by Zigbee [32] \n4.1.2. The full pairwise scheme:\
    \    \n   Each of the n nodes in the network receives n-1 pairwise \nkeys to communicate\
    \ with every other node. There are a \ntotal of  nC2 unique keys in the network.\
    \ Nodes authenticate \nto the base station after which the base station sends\
    \ a link \nkey securely to both parties [33]. \n  The advantages of the full pairwise\
    \ scheme are high-\nsecurity level, easy revocation of nodes due to perfect \n\
    resilience and node-to-node authentication   \nHowever, this scheme faces the\
    \ disadvantage of having a \ngreat memory overhead \n \n4.1.3. Matrix-based Scheme\
    \  \n   Efficient Pairwise Key Establishment and Management in \nStatic WSN [34]:\
    \  The first phase is the Setup Key Pre-\nAssignment Phase. In this, the KDS generates\
    \ 220 distinct \nkeys. Any key is randomly assigned to a node Ni. The KDS \nthen\
    \ assigns setup keys to each node under certain rules to \nascertain that any\
    \ two nodes have at least two keys in \ncommon (from the remaining keys). From\
    \ the rest in the key \npool (P) randomly ɳ keys are selected and an mXn matrix\
    \ is \nconstructed, where (m= √ɳ). Finally, Kcij is stored in the \nnode’s memory.\
    \  Next phase is Common Keys Discovery \nPhase: Node ID and keychain ID are broadcasted\
    \ to the \nneighbors. On receiving KC the receptor node searches for \ncommon\
    \ keys. \n   i.e.     Na: kC12                  Nb:  kC2                     \
    \               \n \nNb: searches for kC12 or kC22 \nManagement \n•The \nestablishment\
    \ \nof symmetric \nkeys \nStorage  \n•Number of keys a \nnode requires to \nstore\
    \ within itself \nto open a secure \nchannel  \nDistributio\nn \n•How keys are\
    \ \ndistributed to \nthe sensor \nnodes \nKey distribution mechanisms \nPolynomial-based\
    \ \nschemes \nMatrix-based \nschemes \nThe full pairwise \nscheme \nUsing network-\n\
    wide keys \n  Int. J. Sci. Res. in Computer Science and Engineering          \
    \                                    Vol-6(3),  Jun  2018, E-ISSN: 2320-7639 \n\
    \  © 2018, IJSRCSE All Rights Reserved                                       \
    \                                                                            \
    \                  62 \nIn the third Pairwise Key Computation Phase, each node\
    \ \nestablishes a private pairwise key which is unaware to other \nnodes. In the\
    \ fourth Key Ring Establishment phase, only \nprivate pairwise keys (Na and Nb)\
    \ and kN are kept and other \nkeys are removed keeping security in mind. However,\
    \ \ngreater processing and communication overheads pose a \nsignificant problem.\
    \ \n4.1.4. \nBlundo’s Polynomial-based protocol [35]: \n    In this approach partially\
    \ solved symmetric polynomials \nare generated by the KDC. These polynomials are\
    \ symmetric \nand bivariate polynomials of degree‘t’. All the nodes are \npre-loaded\
    \ with these polynomials solved for their node \ncoefficient. When two nodes intend\
    \ to establish a secure \ncommunication path between them they broadcast their\
    \ node \nidentity and solve for the ID of their respective partner. \nSince the\
    \ polynomial is symmetric both nodes end with the \nsame value which, serves as\
    \ the common key between them.  \nExample:  f(x,y) = 4x2y2 + x3y1 + x1y3 + 5 \
    \ \n   It’s asymmetric bivariate 3-degree polynomial \n• \nSTEP1: compute    \n\
    \     f(1,y) = 4y2 + y1 + y3  + 5       \n     f(2,y) = 16y2 + 8y1 + 2y3 + 5 \
    \                                                       \n• \nSTEP2: The Setup\
    \ server loads the  sensor node \nwith coefficients                          \
    \                  \n• \nSTEP3: Each sensor node broadcasts its own ID       \
    \                          \n• \nSTEP4: Receiver uses ID to compute a shared \
    \ \nsecret key \n      Kuv = f(u,v) = f(v,u) = Kvu \n      K12 = f(1,2) = 31 =\
    \ f(2,1) = K21  \nThe following figures provide a comparative analysis of \nvarious\
    \ schemes based on different parameters.  \nTable 1: Summary of various schemes\
    \ based on efficiency \nand flexibility parameters \nScheme \nNode  \nAuthentication\
    \ \nDeploy\nment \nKnowle\ndge \nLinkabi\nlity \nBandwidth \nUtilization \nBROSK\
    \ \nNo \nNo \nNo \n[bk][bk] \nFull \nPairwise \nYes \nNo \nNo \n[1ID][bID] \n\
    Blom’s \nScheme \nYes \nNo \nNo \n[(⅄+1)k][b(⅄\n+1)k] \nBlundo’s \nScheme \nYes\
    \ \nNo \nNo \n[1ID][bID] \nQ-\nNo  \n \nNo \nNo \n[kID][bkID] \nComposit\ne \n\
    Combinat\norial \nDesign \nYes \nNo \nYes \n[1ID][bID] \n \n4.2. Other Important\
    \ schemes  \n4.2.1. SHELL [35] \n   This scheme works on the following assumptions:\
    \ Until a \ncompromised node is a neighbor of another compromised \nnode, both\
    \ these nodes won’t know about the status of each \nother. The attacker does not\
    \ launch a direct attack on a \nparticular node as he is unaware of the content\
    \ stored in the \nnodes. \n   The data structures used are as follows:  \nCommand\
    \ node: stores database of all node IDs. Then Ksg is \nthe discovery key (pre-loaded\
    \ in each sensor). There is also a \none-way hash function to recomputed Ksg.\
    \ KSCH and \nKSkey: \npreloaded \nfor \ninitial \nkey \ndistribution.‘K’ \nadministrative\
    \ keys and ‘C’ communication keys are set by a \ntrade off between memory available\
    \ for keying and \nbandwidth utilization. \nThe working of the scheme is as follows:\
    \ \n  NETWORK BOOTSTRAPPING: \nIt is the first step when sensor nodes discover\
    \ themselves \nand organize into clusters. It is in this phase only when \ngateways\
    \ start communicating with each other.  \n   GATEWAY REGISTRATION: \nGateways\
    \ broadcast their IDs and location in encrypted form \nto the command node. Command\
    \ node then establishes the \none-way link-specific keys such that KGIGJ ≠ KGJGI\
    \ (for \ngateway I and j respectively). Ksg is also sent to the gateway \nfor\
    \ establishing contacts with the sensors. \n   SENSOR DISCOVERY: \nSensors broadcast\
    \ their ID and location encrypted by Ksg to \nthe gateway. The gateway then decrypts\
    \ the message. The \nsensor nodes now generate a new kid  by one way hash \nfunction.\
    \ This hashed value is not known to the gateway \n(kind of security protocol adopted\
    \ by the authors). \n   CLUSTERING: \nSensors need to be uniquely assigned to\
    \ a particular \ngateway. Also, clustering spreads functionality of key \nmanagement\
    \ and hence prevents a single point of failure. \n  Int. J. Sci. Res. in Computer\
    \ Science and Engineering                                              Vol-6(3),\
    \  Jun  2018, E-ISSN: 2320-7639 \n  © 2018, IJSRCSE All Rights Reserved      \
    \                                                                            \
    \                                                   63 \n \nI. Initial key distribution:\
    \ \nThe gateway distributes keys to all the sensors in its cluster \nusing EBS-based\
    \ scheme for key distribution. Factors such \nas Size of the cluster, Memory available\
    \ in the sensor, \nExpected lifetime, Deployment terrain are taken into \nconsideration\
    \ while distributing keys: After all the analysis, \nthe EBS- table along with\
    \ a list of all the nodes is sent to the \ncommand node. \n \nII. Assigning key-\
    \ generating gateways:  \n    Apart from the cluster head, the command node elects\
    \ a \nnumber of nodes as a gateway (say 2) for generating keys. \nLet these gateways\
    \ be Gk1[i] and Gk2[i].  The command \nnode sends a portion of the EBS matrix\
    \ to Gk1[i] and \nGk2[i] in such a way that these gateways are not aware of \n\
    the keys a node receives from another gateway. This \npartitioning helps in preventing\
    \ one gateway in \nmanipulating the entire cluster in case of being \ncompromised.\
    \ \nBased on all of the above information the command node \nissues KSCH of all\
    \ sensors in its cluster to the gateway and \nKSkey to Gk1[i] and Gk2[i]. The\
    \ command node sends a \nportion of the EBS matrix to Gk1[i] and Gk2[i] in such\
    \ a \nway that these gateways are not aware of the keys a node \nreceives from\
    \ another gateway. This partitioning helps in \npreventing one gateway in manipulating\
    \ the entire cluster \nin case of being compromised. Based on all of the above\
    \ \ninformation the command node issues KSch of all sensors \nin its cluster to\
    \ the gateway & KSkey to Gk1[i]    and Gk2[i]. \n \n     The advantages of this\
    \ scheme are as follows: Keys are \nperiodically refreshed. The CH sends new communication\
    \ \nkeys to  Gk1[i] and Gk2[i] for the same then the \ncorresponding encryption\
    \ and distribution process takes \nplace all over again, secure in-network processing,\
    \ \nattack/failure mitigation is possible, enhanced network \nsurvivability against\
    \ node capture and collision-free \nalgorithm. \n \nThe disadvantages are Latency\
    \ during initial setup, SHELL \ndoes not handle the scenario where the compromised\
    \ nodes \ncommunicate directly by a separate path set-up by the \nadversary. \n\
    4.2.2. THREE TIER SECURITY SCHEME IN WSN WITH \nMOBILE SINKS  \n    In wireless\
    \ sensor network collecting data from the sensor \nnode is a complex process because\
    \ the attacker can \ncompromise the network easily. Q composite key pre-\ndistribution\
    \ techniques are used in existing techniques i.e. if \nthe attacker is able to\
    \ compromise a fraction of nodes then \ncan compromise the network easily. \n\
    \   The authentication mechanism can be strengthened even \nfurther by introducing\
    \ a three-tier security protocol. This \nframework can be implemented over any\
    \ basic pairwise key \npre-distribution scheme.  \nIn the proposed scheme [36]\
    \ two polynomials are used \nnamely: \n \nMobile polynomial pool: for the mobile\
    \ sink to access \nthe network \n \nStatic polynomial pool: for pairwise key\
    \ establishment \nbetween the nodes. \n \nGENERAL DESCRIPTION OF THE SCHEME: \n\
    \    If sink wants to collect data from sensor node it will have \nto send the\
    \ key to the sensor node from the mobile \npolynomial pool. This key is sent via\
    \ the stationary access \nnode to get access from the network. If this stationary\
    \ access \nnode finds the key to being correct then it sends it to the \nsensor\
    \ node by selecting the key from the static polynomial \npool. Sensor node verifies\
    \ the keys in the static polynomial \npools. If both keys are verified to be correct\
    \ then the mobile \nsink, stationary access point, and the sensor nodes are not\
    \ \ncompromised. The sensor node sends the acknowledgment \nto the sink. After\
    \ receiving the acknowledgment the sink \nsends key Kc to the sensor node. This\
    \ key is used by the \nsensor node to encrypt the messages. \n \nV. \nKEY DISTRIBUTION\
    \ AND MANAGEMENT IN \nWBAN \n                 The advent of e-health has revolutionized\
    \ the \nwhole healthcare domain. With the use of WSN we can \nmonitor and track\
    \ the well being of the in patients as well as \nthe outpatients. This report\
    \ discusses a brief overview of the \nWSN and its evolution in the healthcare\
    \ domain, focusing on \nthe security aspect of the medical information of the\
    \ person \ntransmitted. Due to the fear of the personal information \nbeing stolen\
    \ or divulged people are not able to mentally trust \nthis highly potential application\
    \ of e-health. Since the \nchannels used for transmission are public the data\
    \ so \ntransmitted is highly vulnerable to many cybersecurity \nattacks viz node\
    \ compromise, eavesdropping, message \ndelay, message replay etc. Therefore the\
    \ report tries to \nhighlight the already existing techniques to secure the \n\
    communication and the fact that in order to avail the  full \nbenefits of e-health\
    \ application new techniques for secure \ncommunication over public channels which\
    \ do not resource \ngreedy need to be developed. \n \n \n  Int. J. Sci. Res. in\
    \ Computer Science and Engineering                                           \
    \   Vol-6(3),  Jun  2018, E-ISSN: 2320-7639 \n  © 2018, IJSRCSE All Rights Reserved\
    \                                                                            \
    \                                                         64 \n \n \nFigure 6:\
    \ Flowchart of the three-tier security scheme \n \n4.3. \nTinySec [37] \n   This\
    \ is one of the most preliminary security schemes. It \naims at providing link\
    \ layer security and by encrypting and \nauthenticating the information sent by\
    \ the biosensors. There \nis a single group key which is shared by all the sensors\
    \ in the \nnetwork. All the data packets are fully encrypted and their \nMAC being\
    \ calculated. Before the deployment of the \nsensors, the key is manually programmed\
    \ into the sensors \nthereby, providing minimal security to the network as any\
    \ \ncaptured key can easily reveal this shared group key. \n \n4.4. \nA Hybrid\
    \ Key Management Scheme for Healthcare \nSensor Networks \n    This scheme proposed\
    \ by D.P. Aggarwal et al [38] is \nhybrid key management scheme that uses a Merkel\
    \ \nHashtable for key distribution and shared key discovery. It \ninvolves two\
    \ phases key distribution phase and shared key \ndiscovery phase. Γ acts as the\
    \ gateway access point between \nthe WBAN and the internet. It is capable of performing\
    \ \nhigher order functionalities. It contains Mprivate and \nMpublic (private\
    \ and public key of master), the key pool (P) \nand the hashed values of the keys.\
    \ \n   Each node stores the following 5 identifiers: [Ni, Ki, h(Ki), \nM(public,\
    \ h(Mpublic)]. Each node is assigned its node ID \n(Ni) and some keys from the\
    \ key pool. These keys which are \nassigned from the key pool to specific nodes\
    \ is called the \nnode’s key ring (Ki). Along with this nodes also receive \n\
    Mpublic and its hashed value (h (m)). Whenever Si wants to \nestablish a connection\
    \ with the other node in the network it \nsends its identifier list.   Sj checks\
    \ for the common key and \nuses it to encrypt the information sensed by it.  \n\
    \                          Identifier list  \n1)  \n Si                      \
    \   Sj \n \n         \n         Sj          Ki             Si       \n2)  \n \n\
    \                            =  [data, h(M), Φ(h(Ki)) ] \n \n \n     \nh(M) is\
    \ used to verify that the information is \nreceived from a trusted source. \n\
    \ \n3) HBPi= [Ni, h(kx)©h(Kx+1)©h(Kx), h(M)] \nHeart Beat Package helps prevent\
    \ DOS attack by \nproviding network retracability. \n    The result of all the\
    \ possible values returned by χ is \ncalculated and stored by the coordinator.\
    \ Public key \nidentifiers of all the key rings are XORed simultaneously \nand\
    \ stored in the lookup table. Next, a challenge is \nbroadcasted to the whole\
    \ network. In response, each node \nsends its heartbeat packet to the coordinator.\
    \ Node id and its \nhashed values are extracted by the coordinator from the \n\
    reply.  Finally if the h(M) value and the value stored in the \nlookup table match,\
    \ the node is authenticated and trust is \nestablished.  \n     Though several\
    \ schemes exist to identify node \ncompromise attacks and intrusion detection\
    \ they are \nextremely resourced greedy. This calls for some quality \nresearch\
    \ in developing new key distribution and intrusion \ndetection algorithms that\
    \ use as minimum energy as \npossible. \nVI. \nCONCLUSION \n      In this paper,\
    \ we have reviewed state of the art civilian \napplications of WSNs. these sensor\
    \ networks provide an \nalternative style of living often termed as assisted living.\
    \ \nOwing to this fact they find a number of applications in \nagriculture, smart\
    \ living, smart parking, and e-health. Being \nhighly potent in nature these sensor\
    \ networks face a huge \nnumber of security threats. We have discussed the \n\
    componenets of WSN [41], threats on WSN along with \ncounteractive measures to\
    \ combat these threats. As security \nmechanisms, many key distribution and management\
    \ \ntechniques have been proposed by authors both in WSN and \nWBAN.  We have\
    \ compared and contrasted these schemes \non metrics suitable to WSNs. \n5. \n\
    REFERENCES \n[1] Khan, Shafiullah, Al-Sakib Khan Pathan, and Nabil Ali Alrajeh,\
    \ \neds. Wireless sensor networks: Current status and future trends. \nCRC Press,\
    \ 2016. \n  Int. J. Sci. Res. in Computer Science and Engineering            \
    \                                  Vol-6(3),  Jun  2018, E-ISSN: 2320-7639 \n\
    \  © 2018, IJSRCSE All Rights Reserved                                       \
    \                                                                            \
    \                  65 \n[2] Moghaddam, Mahta, Dara Entekhabi, Yuriy Goykhman,\
    \ Ke Li, \nMingyan Liu, Aditya Mahajan, Ashutosh Nayyar, David Shuman, \nand Demosthenis\
    \ Teneketzis. \"A wireless soil moisture smart \nsensor web using physics-based\
    \ optimal control: Concept and \ninitial demonstrations.\" IEEE Journal of Selected\
    \ Topics in \nApplied Earth Observations and Remote Sensing 3, no. 4 (2010): \n\
    522-535. \n[3]   N.G. Shah, U.B. Desai, I. Das, S.N. Merchant, S.S. Yadav In-field\
    \ \nwireless sensor network (WSN) for estimating evapotranspiration \nand leaf\
    \ wetnessInt. Agric. Eng. J., 18 (3–4) (2009), pp. 43-51 \n[4] Gutiérrez, Joaquín,\
    \ Juan Francisco Villa-Medina, Alejandra Nieto-\nGaribay, and Miguel Ángel Porta-Gándara.\
    \ \"Automated irrigation \nsystem using a wireless sensor network and GPRS module.\"\
    \ IEEE \ntransactions on instrumentation and measurement 63, no. 1 \n(2014): 166-176.\
    \ \n[5] Díaz, Soledad Escolar, Jesús Carretero Pérez, Alejandro Calderón \nMateos,\
    \ Maria-Cristina Marinescu, and Borja Bergua Guerra. \"A \nnovel methodology for\
    \ the monitoring of the agricultural \nproduction process based on wireless sensor\
    \ \nnetworks.\" Computers and electronics in agriculture 76, no. 2 \n(2011): 252-265.\
    \ \n[6] Cambra, Carlos, Juan R. Díaz, and Jaime Lloret. \"Deployment and \nperformance\
    \ study of an Ad Hoc network protocol for intelligent \nvideo sensing in precision\
    \ agriculture.\" In International \nConference on Ad-Hoc Networks and Wireless,\
    \ pp. 165-175. \nSpringer, Berlin, Heidelberg, 2014. \n[7] Project Common Sense\
    \ Net 2.0. EPFL Zurich and IISc Bangalore. \n<http://commonsensenet.in/>.  \n\
    [8] Matese, A. D. G. S. F., S. F. Di Gennaro, A. Zaldei, L. Genesio, and \nF.\
    \ P. Vaccari. \"A wireless sensor network for precision viticulture: \nThe NAV\
    \ system.\" Computers and electronics in agriculture 69, \nno. 1 (2009): 51-58.\
    \ \n[9] Bhargava, Kriti, Arti Kashyap, and Timothy A. Gonsalves. \n\"Wireless\
    \ sensor network based advisory system for apple scab \nprevention.\" In Communications\
    \ (NCC), 2014 Twentieth National \nConference on, pp. 1-6. IEEE, 2014. \n[10]\
    \ Goncalves, Leandro Bertini Lara, Fausto Guzzo da Costa, Leandro \nAlves Neves,\
    \ Jó Ueyama, Geraldo Francisco Donegá Zafalon, \nCarlos Montez, and Alex Sandro\
    \ Roschildt Pinto. \"Influence of \nmobility models in precision spray aided by\
    \ wireless sensor \nnetworks.\" In Journal of Physics: Conference Series, vol.\
    \ 574, no. \n1, p. 012153. IOP Publishing, 2015. \n[11] Voulodimos, Athanasios\
    \ S., Charalampos Z. Patrikakis, Alexander \nB. Sideridis, Vasileios A. Ntafis,\
    \ and Eftychia M. Xylouri. \"A \ncomplete farm management system based on animal\
    \ identification \nusing RFID technology.\" Computers and electronics in \nagriculture\
    \ 70, no. 2 (2010): 380-388. \n[12] Malaver, Alexander, Nunzio Motta, Peter Corke,\
    \ and Felipe \nGonzalez. \"Development and integration of a solar powered \nunmanned\
    \ aerial vehicle and a wireless sensor network to monitor \ngreenhouse gases.\"\
    \ Sensors 15, no. 2 (2015): 4072-4096. \n[13] Soliman, Hamdy, Komal Sudan, and\
    \ Ashish Mishra. \"A smart \nforest-fire early detection sensory system: Another\
    \ approach of \nutilizing wireless sensor and neural networks.\" In Sensors, 2010\
    \ \nIEEE, pp. 1900-1904. IEEE, 2010. \n[14] Das, Ipsita, C. P. R. G. Naveen, Shailendra\
    \ S. Yadav, A. A. \nKodilkar, N. G. Shah, S. N. Merchant, and U. B. Desai. \"\
    WSN \nmonitoring of weather and crop parameters for possible disease \nrisk evaluation\
    \ for grape farms-sula vineyards, a case study.\" \nIn Proceedings of Conference\
    \ on Geospatial Technologies and \nApplications, Geomatrix-2009, IIT Bombay, Mumbai,\
    \ pp. 27-29. \n2009. \n[15] Saha, Rajat, N. Raghuwanshi, S. Upadhyaya, W. Wallender,\
    \ and \nD. Slaughter. \"Water sensors with cellular system eliminate tail \nwater\
    \ drainage in alfalfa irrigation.\" California Agriculture 65, no. \n4 (2011):\
    \ 202-207. \n[16] Barrenetxea, Guillermo, Francois Ingelrest, Gunnar Schaefer,\
    \ and \nMartin Vetterli. \"Wireless sensor networks for environmental \nmonitoring:\
    \ The sensorscope experience.\" In Communications, \n2008 IEEE International Zurich\
    \ Seminar on, pp. 98-101. IEEE, \n2008. \n [17] Hu, Fei, Laura Celentano, and\
    \ Yang Xiao. \"Error‐resistant \nRFID‐assisted \nwireless \nsensor \nnetworks\
    \ \nfor \ncardiac \ntelehealthcare.\" Wireless \nCommunications \nand \nMobile\
    \ \nComputing 9, no. 1 (2009): 85-101. \n[18] Madigan, David, Wen-Hua Ju, P. Krishnan,\
    \ A. S. Krishnakumar, \nand Ivan Zorych. \"Location estimation in wireless networks:\
    \ A \nBayesian approach.\" Statistica Sinica(2006): 495-522. \n[19] Lee, Jong-Hyouk,\
    \ Byung-Jin Han, Hyung-Jin Lim, Yeong-Deok \nKim, Navrati Saxena, and Tai-Myoung\
    \ Chung. \"Optimizing \naccess point allocation using genetic algorithmic approach\
    \ for \nsmart home environments.\" The Computer Journal 52, no. 8 \n(2009): 938-949.\
    \ \n[20] Chen, Mingkai, and Tianhai Chang. \"A parking guidance and \ninformation\
    \ system based on wireless sensor network.\" \nIn Information and Automation (ICIA),\
    \ 2011 IEEE International \nConference on, pp. 601-605. IEEE, 2011. \n[21] \n\
    Orski, \nK. \n\"Best \nspace \nscenario.\" Traffic \nTechnology \nInternational\
    \ (2003). \n[22] Mouskos, Kyriacos, Maria Boile, and Neville Anthony \nParker.\
    \ Technical solutions to overcrowded park and ride \nfacilities. No. FHWA-NJ-2007-011.\
    \ New Jersey Department of \nTransportation, 2007. \n[23] Männi, U. \"Smart sensing\
    \ and time of arrival based location \ndetection in parking management services.\"\
    \ In Electronics \nConference (BEC), 2010 12th Biennial Baltic, pp. 213-214. IEEE,\
    \ \n2010. \n[24] Serpen, Gursel, and Chao Dou. \"Automated robotic parking \n\
    systems: real-time, concurrent and multi-robot path planning in \ndynamic environments.\"\
    \ Applied Intelligence 42, no. 2 (2015): \n231-251. \n[25] Chakraborty, Suryadip,\
    \ Anagha Jamthe, Saibal K. Ghosh, and \nDharma P. Agrawal. \"From theory to application:\
    \ Wireless \nmonitoring \nof \npatients \nsuffering \nfrom \nneurodegenerative\
    \ \ndiseases.\" In Circuits and Systems (MWSCAS), 2013 IEEE 56th \nInternational\
    \ Midwest Symposium on, pp. 944-947. IEEE, 2013. \n[27] Cheng, Ho Ting, and Weihua\
    \ Zhuang. \"Bluetooth-enabled in-\nhome patient monitoring system: Early detection\
    \ of Alzheimer's \ndisease.\" IEEE Wireless Communications 17, no. 1 (2010). \n\
    [28] Chen, Min, Sergio Gonzalez, Victor Leung, Qian Zhang, and Ming \nLi. \"A\
    \ 2G-RFID-based e-healthcare system.\" IEEE Wireless \nCommunications 17, no.\
    \ 1 (2010). \n[29] Puri, Sanjeev, and S. P. Tripathi. \"Dynamic High Level Cross\
    \ \nLayer \nSecurity \nMechanisms \nfor \nWireless \nSensor \nNetworks.\" International\
    \ Journal of Information Technology and \nComputer Science (IJITCS) 4, no. 6 (2012):\
    \ 45-56. \n[30] Lai, Bocheng, Sungha Kim, and Ingrid Verbauwhede. \"Scalable \n\
    session key construction protocol for wireless sensor networks.\" \nIn IEEE Workshop\
    \ on Large Scale RealTime and Embedded \nSystems (LARTES), pp. 7. 2002. \n[31]\
    \ Zeng, YingZhi, BaoKang Zhao, JinShu Su, Xia Yan, and Zili \nShao. \"A loop-based\
    \ key management scheme for wireless sensor \nnetworks.\" In International Conference\
    \ on Embedded and \nUbiquitous Computing, pp. 103-114. Springer, Berlin, Heidelberg,\
    \ \n2007. \n[32] Alliance, ZigBee. \"ZigBee Document 053474r06.\" Version 1 \n\
    (2004): 14. \n[33] Raazi, Syed Muhammad Khaliq-ur-Rahman, Heejo Lee, \nSungyoung\
    \ Lee, and Young-Koo Lee. \"BARI: A distributed key \nmanagement approach for\
    \ wireless body area networks.\" \nIn Computational Intelligence and Security,\
    \ 2009. CIS'09. \nInternational Conference on, vol. 2, pp. 324-329. IEEE, 2009.\
    \ \n  Int. J. Sci. Res. in Computer Science and Engineering                  \
    \                            Vol-6(3),  Jun  2018, E-ISSN: 2320-7639 \n  © 2018,\
    \ IJSRCSE All Rights Reserved                                                \
    \                                                                            \
    \         66 \n[34] Raazi, Syed Muhammad Khaliq-ur-Rahman, Heejo Lee, \nSungyoung\
    \ Lee, and Young-Koo Lee. \"BARI: A distributed key \nmanagement approach for\
    \ wireless body area networks.\" \nIn Computational Intelligence and Security,\
    \ 2009. CIS'09. \nInternational Conference on, vol. 2, pp. 324-329. IEEE, 2009.\
    \ \n[35] Cheng, Yi, and Dharma P. Agrawal. \"Efficient pairwise key \nestablishment\
    \ and management in static wireless sensor \nnetworks.\" In Mobile Adhoc and Sensor\
    \ Systems Conference, \n2005. IEEE International Conference on, pp. 7-pp. IEEE,\
    \ 2005 \n[36] Puri, Sanjeev, and S. P. Tripathi. \"Dynamic High Level Cross \n\
    Layer \nSecurity \nMechanisms \nfor \nWireless \nSensor \nNetworks.\" International\
    \ Journal of Information Technology and \nComputer Science (IJITCS) 4, no. 6 (2012):\
    \ 45-56. \n[37] Rasheed, Amar, and Rabi N. Mahapatra. \"The three-tier security\
    \ \nscheme in wireless sensor networks with mobile sinks.\" IEEE \nTransactions\
    \ on Parallel and Distributed Systems 23, no. 5 \n(2016): 958-965. \n[38] H. S.,\
    \ Sim, M. L., and Tan, C. M., Security issues of wireless \nsensor networks in\
    \ healthcare applications. BT Technol. J. \n24(2):138–144, 2006 \n[39] Karlof,\
    \ Chris, Naveen Sastry, and David Wagner. \"TinySec: a link \nlayer security architecture\
    \ for wireless sensor networks.\" \nIn Proceedings of the 2nd international conference\
    \ on Embedded \nnetworked sensor systems, pp. 162-175. ACM, 2004. \n[40] Meharia,\
    \ Pallavi, and Dharma P. Agrawal. \"A hybrid key \nmanagement \nscheme \nfor \n\
    healthcare \nsensor \nnetworks.\" \nIn Communications (ICC), 2016 IEEE International\
    \ Conference \non, pp. 1-6. IEEE, 2016 \n[41] Sharma, Shamneesh, Dinesh Kumar,\
    \ and Keshav Kishore. \n\"Wireless Sensor Networks-A review on topologies and\
    \ node \nArchitecture.\" International Journal of Computer Sciences and \nEngineering\
    \ 1, no. 2 (2013): 19-25. \n \n"
  inline_citation: '>'
  journal: International journal of scientific research in computer science and engineering
  limitations: '>'
  pdf_link: http://www.isroset.org/pub_paper/IJSRCSE/12-IJSRCSE-0913.pdf
  publication_year: 2018
  relevance_score1: 0
  relevance_score2: 0
  title: A Survey of Civilian Applications of WSN and Security Protocols
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.36227/techrxiv.22029974.v1
  analysis: '>'
  authors:
  - Soleiman Ahmadi
  citation_count: 1
  full_citation: '>'
  full_text: '>

    LOG IN SIGN UP TechRxiv 9,172,904 views 4,235,710 downloads About TechRxiv TechRxiv
    (pronounced "tech archive") is an open, moderated preprint server for unpublished
    research in the areas of engineering, computer science, and related technology.
    https://www.techrxiv.org/ Public Documents 9174 Members by author by title by
    keyword Filter All Sort by Most Recent BIOENGINEERING 873 COMMUNICATION, NETWORKING
    AND BROADCAST TECHNOLOGIES 2286 COMPONENTS, CIRCUITS, DEVICES AND SYSTEMS 1069
    COMPUTING AND PROCESSING 3379 ENGINEERED MATERIALS, DIELECTRICS AND PLASMAS 249
    ENGINEERING PROFESSION 544 FIELDS, WAVES AND ELECTROMAGNETICS 856 GENERAL TOPICS
    FOR ENGINEERS 648 GEOSCIENCE 268 NUCLEAR ENGINEERING 70 PHOTONICS AND ELECTROOPTICS
    345 POWER, ENERGY AND INDUSTRY APPLICATIONS 1202 ROBOTICS AND CONTROL SYSTEMS
    879 TRANSPORTATION 388 AEROSPACE 267 SIGNAL PROCESSING AND ANALYSIS 1950 Terahertz
    Communications and Sensing for 6G and Beyond: A Comprehensive Review Wei Jiang
    and 14 more April 04, 2024 Next-generation cellular technologies, commonly referred
    to as the sixth generation (6G), are envisioned to support a higher system capacity,
    better performance, and network sensing capabilities. The terahertz (THz) band
    is one potential enabler to this end due to the large unused frequency bands and
    the high spatial resolution enabled by the short signal wavelength and large bandwidth.
    Different from earlier surveys, this paper presents a comprehensive treatment
    and technology survey on THz communications and sensing in terms of advantages,
    Rapid Feasibility Assessment of Energy Unit Integration in Distribution Networks
    Sicheng Gong and 2 more April 03, 2024 In contemporary heavy-load distribution
    networks, preceding feasibility assessment is imperative before incorporating
    additional energy units. However, the feasibility examination for massive combined
    operational scenarios of relevant units is computationally intensive with repetitive
    power flow calculations. To this end, this paper proposes a rapid assessment framework,
    the kernel of which is to learn from formerly examined scenarios, thus forming
    expansive feasible/infeasible regions to geometrically rule in/out subsequent
    scenarios. Without running the power flow computation in most scenarios, we accelerate
    the assessment process. Moreover, enlightened by heuristic hypersurface search,
    such prechecking efficiency can be further boosted. In a risk-averse manner, this
    framework can be conceptualized using the exact grid model. Especially, evidenced
    by testing on a 10.5kV distribution grid, the framework shows a significant assessment
    efficiency improvement and strict accuracy guarantee, where we observe at least
    76.13% assessment time reduction and zero accuracy loss in all testing cases.
    We anticipate this work to be a starting point for more sophisticated geometry-accelerating
    feasibility assessment methods. Improving Molecular De Novo Drug Design with Transformers
    Dhaval Soni and 7 more April 03, 2024 Drug design is undergoing a transformation
    as we challenge conventional methods by integrating state-of-the-art artificial
    intelligence with the intricate domain of molecular biology. At the heart of our
    endeavor lies a significant challenge: the scarcity of datasets containing active
    compounds for emerging target proteins. To confront this obstacle, we''re pioneering
    an innovative approach. We''re merging the advanced Generative Pre-trained Transformer
    (GPT) architecture with the nuanced capabilities of Long Short-Term Memory (LSTM)
    networks, with the aim of generating Simplified Molecular Input Line Entry System
    (SMILES) strings to unveil novel therapeutic pathways. Additionally, we''re employing
    a Bidirectional Encoder Representations from Transformers (BERT) pretraining strategy
    to enrich our model with comprehensive molecular data, including amino acid sequences
    and molecular SMILES datasets. Through meticulous fine-tuning on a meticulously
    curated protein-ligand complex dataset, we''re achieving precise conditional generation
    via autoregressive supervised learning. Our research introduces a groundbreaking
    method to assess molecular affinity, validated against established proteins, showcasing
    superior binding affinities compared to certain FDA-approved drugs in docking
    experiments. By pushing the boundaries of generative algorithms and establishing
    a robust framework for evaluating molecular affinity, we''re driving forward the
    field of de novo drug design, offering promising therapeutic avenues and enabling
    deeper exploration of the chemical landscape. Formalising a Gateway-based Blockchain
    Interoperability Solution with Event-B Guzmán Llambías and 2 more April 03, 2024
    A document by Guzman Llambias . Click on the document to view its contents. Magnetic
    Behavior of NO Fe-Si Sheets under Tensile and Compressive Stress Carlo Appino
    and 6 more April 03, 2024 The stress dependence of the magnetic properties of
    non-oriented Fe-Si steel sheets has been investigated by measurement and analysis
    of hysteresis loop, magnetization curve, and energy losses taken at different
    peak polarization values Jp (0.5 T – 1.5 T) between DC and f = 400 Hz. The salient
    feature of the material response to the stress lies in the monotonic deterioration
    of the soft magnetic properties, across the whole (Jp - f) domain, on passing
    from the maximum tensile stress (σ = +30 MPa) to the maximum compression (σ =
    -30 MPa). This is understood in terms of stress-induced redistribution of the
    domains between easy axes, making magnetic hardening by compression directly related
    to unfavorably directed domains and 90° domain-wallmediated magnetization transitions.
    The loss decomposition is carried out across the whole investigated frequency
    range, taking into account the skin effect at the highest frequencies. Quasi-static
    and dynamic losses follow a same trend with σ, both monotonically increasing on
    passing from the tensile to the compressive stress limits, according to the theoretically
    expected relationship existing between the hysteresis and the excess loss components.
    The latter is shown to identify the correlation regions where the magnetization
    is reversed of size comparable with the average grain size and loosely following
    the dependence of the loss figure on the applied stress. A bio-inspired hardware
    implementation of an analog spike-based hippocampus memory mo... Daniel Casanueva-Morato
    and 4 more April 03, 2024 The need for processing at the edge the increasing amount
    of data that is being produced by multitudes of sensors has led to the demand
    for mode power efficient computational systems, by exploring alternative computing
    paradigms and technologies. Neuromorphic engineering is a promising approach that
    can address this need by developing electronic systems that faithfully emulate
    the computational properties of animal brains. In particular, the hippocampus
    stands out as one of the most relevant brain region for implementing auto associative
    memories capable of learning large amounts of information quickly and recalling
    it efficiently. In this work, we present a computational spike-based memory model
    inspired by the hippocampus that takes advantage of the features of analog electronic
    circuits: energy efficiency, compactness, and real-time operation. This model
    can learn memories, recall them from a partial fragment and forget. It has been
    implemented as a Spiking Neural Networks directly on a mixed-signal neuromorphic
    chip. We describe the details of the hardware implementation and demonstrate its
    operation via a series of benchmark experiments, showing how this research prototype
    paves the way for the development of future robust and low-power mixed-signal
    neuromorphic processing systems. Exploratory Study of oneM2M-based Interoperability
    Architectures for IoT: A Smart Cit... VJS Pranavasri and 6 more April 03, 2024
    The advent of the Internet of Things (IoT) has ushered in transformative possibilities
    for smart cities, with the potential to revolutionize urban living through enhanced
    connectivity and data-driven decision-making. However, the effective realization
    of IoT in smart cities hinges upon the seamless interoperability of diverse devices
    and systems. To address this critical need, the oneM2M standards initiative has
    emerged as a foundational framework for IoT interoperability. In this research
    paper, we perform an exploratory analysis of three prominent open-source oneM2M
    based interoperability systems-Mobius, OM2M, and ACME. We leverage an existing
    large-scale system provided by our Smart City Living Lab deployed at IIIT Hyderabad,
    sprawling a 66-acre campus featuring over 370 nodes across eight verticals. We
    investigate the architectural characteristics of each solution, considering their
    strengths and limitations in facilitating IoT interoperability. Through this analysis,
    our paper aims to provide valuable insights for stakeholders seeking to implement
    IoT interoperability solutions in the context of smart cities. By evaluating the
    strengths and limitations of Mobius, OM2M, and ACME, we seek to offer guidance
    for selecting the most suitable solution. Our analysis reveals that the optimal
    framework choice depends on specific quality constraints: Mobius excels in performance,
    while ACME offers advantages in ease of setup for smaller-scale implementations.
    Comparing Concepts of Service Blocking Queues in Hardware-in-the-Loop Systems
    Tobias Konheiser and 3 more April 03, 2024 ZF is developing an autonomous driving
    system, which requires extensive testing of the developed devices and software
    on hardware-in-the-loop (HIL) systems. Therefore, a robust and high-performing
    HIL system is essential. The purpose of a HIL system is to replay recorded data
    to the device-undertest. Recordings are loaded, processed and streamed to the
    deviceunder-test with real-time requirements. This streaming chain includes processing
    nodes and queues. This requires careful management of queue configurations. An
    overflow in the queue will result in packet loss, while an underflow may violate
    the real-time constraint. This study aims to develop and evaluate concepts for
    service blocking queues. These concepts block or pause the incoming service to
    a queue when necessary to avoid queue overflows and associated data loss. However,
    an out-of-the-box solution is not available and different approaches affect the
    behaviour and performance of the system. Therefore, the developed concepts are
    evaluated against each other and against the existing system based on selected
    performance parameters in specific scenarios. The scenarios cover a wide range
    of situations, reflecting standard input data with varying numbers of parallel
    streams and bottleneck scenarios forcing queue overflows or blockages. The developed
    service blocking queue concepts eliminate data loss in all scenarios, but introduce
    overhead, resulting in reduced system performance. However, the service blocking
    queue concept using a modified token-bucket approach proved to be the best solution,
    as the elimination of data loss justifies the additional overhead. This concept
    is proposed for implementation and deployment on the HIL system. Generative AI-Based
    Text Generation Methods Using Pre-Trained GPT 2 Model Rohit Pandey and 7 more
    April 03, 2024 A text generation model is a machine learning model that uses neural
    networks, especially transformers architecture to generate contextually relevant
    text based on linguistic patterns learned from extensive corpora. The models are
    trained on a huge amount of textual data so that they can model and learn complex
    concepts of any language like its grammar, vocabulary, phrases, and styles. FlowDep
    - An efficient and optical-flow-based algorithm of obstacle detection for aut...
    Chen-Fu Yeh and 7 more April 03, 2024 Obstacle detection is crucial for the safety
    and efficiency of autonomous vehicles. For mini-vehicles such as palm-sized drones,
    it is a challenge to implement traditional methods like Lidar due to high costs
    and physical constraints. Vision-based deep learning approaches, while accurate,
    are too resource-intensive for the mini-vehicles. To address this issue, we introduce
    Flowdep, a novel optical-flow-based algorithm inspired by the low-resolution but
    efficient motion-detection mechanisms in insects. Flowdep combines optic flow
    and IMU (or positioning information) to estimate the depth of every image pixel.
    We also generate a variant of Flowdep using the artificial neural network (Flowdep-ANN).
    Our tests show that Flowdep and Flowdep-ANN are 5.8 to 114.7 times faster than
    the DNN networks we tested, while the accuracies of Flowdep and Flowdep-ANN are
    on par with these networks. We further tested Flowdep and Flowdep-ANN on a small
    autonomous vehicle with Raspberry Pi4 as the computing platform, and both models
    successfully performed real-time object detection. The present work demonstrates
    the potential of using optical flow as an efficient approach to estimate depth
    and detect obstacles in resource-constrained mini-vehicles. Misinformative Data
    Visualizations in the Sports Media Domain Drew Scott April 03, 2024 Sports are
    data-driven: individual performances are measured using statistics and teams leverage
    data analytics to outperform competition. Sports media-which is created by media
    outlets, teams, and individuals-engage its consumers by creating narratives about
    the sport, teams, and players. Due to the importance of data in the sports world,
    data visualizations are a pillar in the sports media landscape. These data visualizations,
    while appearing to accurately convey data to its consumers, can be misinformative;
    media creators often have incentives to present specific narratives which don''t
    always fit the data. This work contributes to an existing misinformative data
    visualization taxonomy. In doing so, it makes it easier to understand the techniques
    and design choices used to create misinformative visualizations in all domains,
    not only in sports media. A Survey of RFID Authentication Protocols Drew Scott
    April 03, 2024 "Radio frequency identification" (RFID) systems are ubiquitous
    in today''s world. In an RFID system, it is a desirable to attain mutual authentication
    between a reader and a tag before commencing application-level communications.
    This is because tags should not share secret information with unknown parties
    and readers need to defend against tag impersonation. Authentication protocols
    designed for communication between computers, however, are not appropriate for
    RFID systems because tags are extremely resource constrained (low energy, small
    memory, etc.). Thus, there have been many attempts to design secure and practical
    authentication protocols for RFID systems over the years since RFID systems became
    prevalent. This survey summarizes and compares these protocols. The Effect of
    Multipath in Distributed Arrays with Time Reversal Hassna Ouassal and 2 more April
    03, 2024 This article examines the effect of multipath channels on the performance
    of distributed arrays that employ time reversal. A model of the signal received
    from a distributed array is formulated, and a statistical analysis of the variation
    in signal power in the presence of phase noise and multipath is given. We present
    the impact these nonidealities have on received signal power, and we analyze the
    received power for three specific cases: continuous waveform, impulse waveform,
    and modulated rectangular pulse waveform in the presence of standard channel models.
    It is shown that for larger arrays in multipath channels, the change in power
    between coherent and incoherent states converges to the line-of-sight channel.
    It is further shown that in a line-of-sight channel time-reversal completely cancels
    unknown channel delays resulting in coherent signals from all nodes in a distributed
    array, while in a multipath channel only the main diagonal round-trip paths are
    coherent. Nevertheless, this additional benefit improves signal coherence in complex
    channels and can aide in distributed array synchronization using two-way time
    transfer. Disproof of Hodge Conjecture by Graph Theory Jihyeon Yoon April 02,
    2024 Hodge conjecture is turned out to be false in extension of graph theory based
    on its algebraic attribute. Hash3D: Training-free Acceleration for 3D Generation
    Xingyi Yang and 1 more April 02, 2024 The evolution of 3D generative modeling
    has been notably propelled by the adoption of 2D diffusion models. Despite this
    progress, the cumbersome optimization process per se presents a critical hurdle
    to efficiency. In this paper, we introduce Hash3D, a universal acceleration for
    3D generation without model training. Central to Hash3D is the insight that feature-map
    redundancy is prevalent in images rendered from camera positions and diffusion
    time-steps in close proximity. By effectively hashing and reusing these feature
    maps across neighboring timesteps and camera angles, Hash3D substantially prevents
    redundant calculations, thus accelerating the diffusion model''s inference in
    3D generation tasks. We achieve this through an adaptive grid-based hashing. Surprisingly,
    this feature-sharing mechanism not only speed up the generation but also enhances
    the smoothness and view consistency of the synthesized 3D objects. Our experiments
    covering 5 textto-3D and 3 image-to-3D models, demonstrate Hash3D''s versatility
    to speed up optimization, enhancing efficiency by 1.3 ∼ 4×. Additionally, Hash3D''s
    integration with 3D Gaussian splatting largely speeds up 3D model creation, reducing
    text-to-3D processing to about 10 minutes and image-to-3D conversion to roughly
    30 seconds. The code is provided in https://github.com/Adamdad/hash3D. Area and
    Power Efficient Implementation of Configurable Ring Oscillator PUF Enas Abulibdeh
    and 4 more April 02, 2024 Physically Unclonable Function (PUF) is an emerging
    hardware security primitive that provides a promising solution for lightweight
    security. PUFs can be used to generate a secret key that depends on the random
    manufacturing process variation of the device for lightweight authentication and
    device identification. This work proposes an optimized version of the Configurable
    Ring Oscillator (CRO) PUF that aims to reduce power consumption and area overhead.
    The proposed design eliminates the duplication of ROs, reduces the switching activity,
    and introduces the inter-stage delay as an additional source of randomness. The
    proposed PUF has been implemented in 22nm FDSOI technology using the Synopsys
    tools. A comprehensive security analysis has been acquired utilizing Challenge-Response
    Pairs collected from 8 chips. Results show an average of 49.42%, 38.25%, 9.95%,
    and 45.5% for uniformity, diffuseness, reliability, and uniqueness, respectively.
    Compared with the state-of-the-art, the proposed design achieves an area and power
    reduction of 75% and 65.1%, respectively. With the proposed PUF delivering 10
    32 CRPs, it is classified as a strong PUF. Additionally, the proposed design passes
    NIST tests and achieves an average prediction accuracy of 67.1% of machine learning
    modeling. A Hero Or A Killer? Overview Of Opportunities, Challenges, And Implications
    Of Text-T... Mijat Kustudic and 1 more April 02, 2024 SORA is a text-to-video
    model that can create videos based on simple user prompts. The model promises
    to revolutionize the way content is created. When SORA is released to the general
    public, it may transform a wide array of industries but also pose significant
    challenges and risks. This research aims to provide a comprehensive understanding
    of SORA''s opportunities, challenges, and implications. It explores its potential
    applications in film-making, education, gaming, advertising, accessibility, healthcare,
    and social media content creation. Additionally, it delves into its potential
    challenges and risks, including misinformation, privacy concerns, bias, regulatory
    complexities, and dependence on technology. This research provides important recommendations
    to promote responsible deployment of the AI model. Advancements and Challenges
    in Robot Grasping and Manipulation for Aspiring Researche... Claudio Zito April
    02, 2024 Robot grasping and manipulation represent pivotal aspects of robotics
    research with profound implications for the future of autonomous systems. This
    report delves into the intricacies of designing robotic hands, the hurdles in
    creating robust manipulation actions, and the advancements in the field that poised
    to catalyze a new era of autonomy. Drawing inspiration from science fiction''s
    portrayal of robotics, we bridge the conceptual gap between fiction and ongoing
    real-world technical research, aiming to provide a comprehensive overview for
    students interested in robotics. ← Previous 1 2 3 4 5 6 7 8 9 … 509 510 Next →
    TechRxiv | Powered by Authorea.com Home About Submission Guidelines FAQs Terms
    of Use Privacy Policy Contact Us'
  inline_citation: '>'
  journal: ''
  limitations: '>'
  pdf_link: https://www.techrxiv.org/articles/preprint/A_Systematic_Literature_Review_Security_Threats_and_Countermeasure_in_Smart_Farming/22029974/1/files/39098063.pdf
  publication_year: 2023
  relevance_score1: 0
  relevance_score2: 0
  title: 'A Systematic Literature Review: Security Threats and Countermeasure in Smart
    Farming'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.20944/preprints202307.1162.v1
  analysis: '>'
  authors:
  - Natalia M. Matsveichuk
  - Yuri N. Sotskov
  citation_count: 1
  full_citation: '>'
  full_text: '>

    This website uses cookies We use cookies to personalise content and ads, to provide
    social media features and to analyse our traffic. We also share information about
    your use of our site with our social media, advertising and analytics partners
    who may combine it with other information that you’ve provided to them or that
    they’ve collected from your use of their services. Consent Selection Necessary
    Preferences Statistics Marketing Show details             Deny Allow selection
    Allow all Instructions for Authors Awards About FAQ Submit Log in/Register preprints.org
    > biology and life sciences > agricultural science and agronomy > doi: 10.20944/preprints202307.1162.v1
    Preprint Review Version 1 Preserved in Portico This version is not peer-reviewed
    Digital Technologies, Internet of Things and Cloud Computations Used in Agriculture:
    Surveys and Literature in Russian Natalia M. Matsveichuk and Yuri N. Sotskov *
    Version 1 : Received: 17 July 2023 / Approved: 17 July 2023 / Online: 18 July
    2023 (13:51:22 CEST) How to cite: Matsveichuk, N.M.; Sotskov, Y.N. Digital Technologies,
    Internet of Things and Cloud Computations Used in Agriculture: Surveys and Literature
    in Russian. Preprints 2023, 2023071162. https://doi.org/10.20944/preprints202307.1162.v1
    Abstract Development of agriculture in Russia and Belarus is based on the practical
    implementation of "smart" systems in agriculture based on the use of modern wireless,
    intelligent technologies and Internet of Things. This review presents research
    articles (mainly, in Russian) published in the period of 2013 – 2022 on the use
    of cloud technologies and Internet of Things for the development of agriculture
    in Russia and Belarus. An analysis of the use of cloud technologies and Internet
    of Things in the modern world is given on the basis of research articles and reviews
    published in English in the period of 2017 – 2022. The main directions of digitalization
    of modern agriculture are listed. The uses of cloud technologies and Internet
    of Things in agriculture are described along with promising directions for further
    research and applications. Keywords modern agriculture; smart farming; cloud computing;
    internet of things; survey Subject Biology and Life Sciences, Agricultural Science
    and Agronomy Copyright: This is an open access article distributed under the Creative
    Commons Attribution License which permits unrestricted use, distribution, and
    reproduction in any medium, provided the original work is properly cited. Download
    PDF Comments (0) We encourage comments and feedback from a broad range of readers.
    See criteria for comments and our Diversity statement. Leave a public comment
    Send a private comment to the author(s) * All users must log in before leaving
    a comment Views 97 Downloads 216 Comments 0 Get PDF Cite Share 0 Bookmark BibSonomy
    Mendeley Reddit Delicious Alerts Notify me about updates to this article or when
    a peer-reviewed version is published. Preprints.org is a free preprint server
    subsidized by MDPI in Basel, Switzerland. Contact us RSS MDPI Initiatives SciProfiles
    Sciforum Encyclopedia MDPI Books Scilit Proceedings JAMS Important links How it
    Works Advisory Board FAQ Friendly Journals Instructions for Authors About Statistics
    Subscribe Choose the area that interest you and we will send you notifications
    of new preprints at your preferred frequency. Subscribe © 2024 MDPI (Basel, Switzerland)
    unless otherwise stated Disclaimer Privacy Policy Terms of Use  Feedback'
  inline_citation: '>'
  journal: ''
  limitations: '>'
  pdf_link: null
  publication_year: 2023
  relevance_score1: 0
  relevance_score2: 0
  title: 'Digital Technologies, Internet of Things and Cloud Computations Used in
    Agriculture: Surveys and Literature in Russian'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.1016/j.jclepro.2024.140715
  analysis: '>'
  authors:
  - Ashraf Ahmed
  - Samy Sayed
  - Antoifi Abdoulhalik
  - Salissou Moutari
  - Lukumon O. Oyedele
  citation_count: 1
  full_citation: '>'
  full_text: '>

    Skip to main content Skip to article Journals & Books Search Register Sign in
    Brought to you by: University of Nebraska-Lincoln View PDF Download full issue
    Outline Highlights Abstract Keywords 1. Introduction 2. Machine learning methods
    3. Review methodology 4. Groundwater management 5. Surface water management 6.
    Hydropower management, marine energy and reservoir operation 7. Water distribution
    and drainage systems 8. Water quality monitoring 9. Flood management and water-retaining
    structures 10. Conclusions, open issues, and prospects CRediT authorship contribution
    statement Declaration of competing interest Acknowledgement Data availability
    References Show full outline Figures (1) Tables (2) Table Table 1 Journal of Cleaner
    Production Volume 441, 15 February 2024, 140715 Review Applications of machine
    learning to water resources management: A review of present status and future
    opportunities Author links open overlay panel Ashraf A. Ahmed a, Sakina Sayed
    a, Antoifi Abdoulhalik a, Salissou Moutari b, Lukumon Oyedele c Show more Add
    to Mendeley Share Cite https://doi.org/10.1016/j.jclepro.2024.140715 Get rights
    and content Under a Creative Commons license open access Highlights • We present
    a review of ML techniques for water resources management (WRM). • ML proved to
    be efficient in identifying patterns within nonlinear datasets. • Transformer
    architectures can be used to simplify reinforcement learning. • Generative Pre-trained
    Transformers open further opportunities to WRM. Abstract Water is the most valuable
    natural resource on earth that plays a critical role in the socio-economic development
    of humans worldwide. Water is used for various purposes, including, but not limited
    to, drinking, recreation, irrigation, and hydropower production. The expected
    population growth at a global scale, coupled with the predicted climate change-induced
    impacts, warrants the need for proactive and effective management of water resources.
    Over the recent decades, machine learning tools have been widely applied to various
    water resources management-related fields and have often shown promising results.
    Despite the publication of several review articles on machine learning applications
    in water-related fields, this review paper presents for the first time a comprehensive
    review of machine learning techniques applied to water resources management, focusing
    on the most recent achievements. The study examines the potential for advanced
    machine learning techniques to improve decision support systems in the various
    sectors within the realm of water resources management, which includes groundwater
    management, streamflow forecasting, water distribution systems, water quality
    and wastewater treatment, water demand and consumption, hydropower and marine
    energy, water drainage systems, and flood management and defence. This study provides
    an overview of the state-of-the-art machine learning approaches to the water industry
    and how they can be used to ensure water supply sustainability, quality, and flood
    and drought mitigation. This review covers the most recent related studies to
    provide the most recent snapshot of machine learning applications in the water
    industry. Overall, LSTM networks have been proven to exhibit reliable performance,
    often outperforming ANN models, traditional machine learning models, and established
    physics-based models. Hybrid ML techniques have exhibited great forecasting accuracy
    across all water-related fields, often showing superior computational power over
    traditional ANNs architectures. In addition to purely data-driven models, physical-based
    hybrid models have also been developed to improve prediction performance. These
    efforts further demonstrate that Machine learning can be a powerful practical
    tool for water resources management. It provides insights, predictions, and optimisation
    capabilities to help enhance sustainable water use and management and improve
    socio-economic development, healthy ecosystems and human existence. Previous article
    in issue Next article in issue Keywords Water qualityFloodingWastewater treatmentAI
    and deep learningReinforcement learningUnsupervised learning 1. Introduction Water
    is the most essential natural resource for human life that is used in various
    ways, which are keys for human socio-economic development. Water is used for drinking,
    bathing, recreational activities, agriculture, hydropower production, and more.
    Although water covers around 71% of the earth''s surface, only about 2.5% is freshwater
    (USGS, 2019). Therefore, appropriate water resources management is crucial to
    a well-developed society. As a complex system of nature, aquifers are constantly
    changing. Hence, our accessibility to freshwater is continually changing, too.
    In its water scarcity report (United Nations Water, 2020), the United Nations
    estimates that by 2025, 1.8 billion people will be living in water-scarce areas,
    highlighting the urgent need for innovative solutions within the water sector.
    Engineers and decision-makers constantly look for promising methods to address
    climate change and its consequential impacts. As temperatures rise rapidly, more
    extreme weather is observed. One of the most concerning consequences is flooding,
    with over one billion people worldwide predicted to live in cities with a risk
    of catastrophic flood levels due to climate change (Rentschler and Salhab, 2020).
    A natural disaster, such as a devastating level of flooding, can cost lives, property,
    crop destruction and much more. The damaging effects of flooding can have a long-lasting
    impact on the affected area, which can be challenging to recover from. On a global
    scale, the exploitation and consumption of water resources often need to be better
    managed. An important aspect of water resources management is providing solutions
    for optimal resource use, ensuring overexploitation does not occur, and equipping
    water resources managers with the appropriate decision-support tools to plan for
    potential shortages of effective management. Conventionally, physical models have
    assisted decision-makers in enabling a sustainable and optimal use of water resources.
    However, the relationships between hydrological, meteorological and water table
    levels are well known to be very complex. Additionally, these models require a
    larger number of data, and such data tend to be very expensive and/or scarce,
    particularly in developing countries. In recent years, Machine Learning (ML) has
    demonstrated its high efficiency and practicability for water resources management
    compared to traditional models due to its capability to handle different sources
    simultaneously and its lower cost and time requirements. ML has been applied to
    water resources management in various ways to improve the monitoring, prediction,
    and sustainable use of water resources. ML models are often trained on historical
    hydrological data for forecasting. The main hydrological data commonly used as
    input features include discharge, rainfall, water table level, temperature, evapotranspiration,
    land use, and pumping rates. Preference has recently been given to data-driven
    models over physically based or conceptual forecasting models, which have the
    potential to unravel the non-linear input-output relationship and produce reliable
    predictions of physical systems, even without prior knowledge of the underlying
    physical relationships and the catchment information. There are numerous examples
    of how ML can be applied to water resources management. For example, ML can analyse
    historical usage data in a water distribution system, provide optimum water allocation,
    predict future demand, and help detect system leaks (e.g. Shahra et al., 2019).
    With the availability of historical data on groundwater levels, ML has been widely
    used for future predictions of water level dynamics, which helps in the management
    of groundwater reservoirs (e.g. Pathak et al., 2021; Ghosh et al., 2022; Kochhar
    et al., 2021; Teimoori et al., 2023). ML can also be used for streamflow forecasting
    (e.g. Cheng et al., 2020; Mehedi et al., 2022; Dehghani et al., 2023; Akbarian
    et al., 2023). There is increasing pressure on irrigation water demand for agriculture
    use, which is expected to double by 2050 (The Food and Agriculture Organization
    of the United Nations, 2017), with only limited resources. ML has been extensively
    used to narrow this gap and to develop smart irrigation practices (e.g. Chen et
    al., 2021; He et al., 2022). Another example where ML has proved successful is
    the water quality prediction. This has been crucial given that water pollution
    has worsened significantly in most rivers in Africa, Asia, and Latin America (United
    Nations Environment Programme, 2016). This has prompted many studies focusing
    on the applications of ML to estimate and predict water quality (Zhou, 2020).
    This study presents an overview of the recent water resources-related studies
    that implemented ML algorithms, with the main aim being to answer the following
    research question: which ML algorithms have been used in water resource management
    in recent years, and what were the most effective approaches adopted for forecasting
    application? This provides the most up-to-date and relevant information pertaining
    to the application of ML to the water sector, thereby highlighting its relevance
    and potential in practical application. Most of the research studies covered in
    this review extend from the time we initiated it until October 2023. Nomenclature
    Abbreviations Significations ANFIS Adaptive Neuro-Fuzzy Inference System ANN Artificial
    Neural Network ARIMA Autoregressive Integrated Moving Average Bi-LSTM Bidirectional-LSTM
    CNN Convolutional Neural Network Conv LSTM Convolutional LSTM DI Data Integration
    ELM Extreme Learning Machine En-De Encoder-Decoder GA Genetic Algorithm GB Gradient
    Boosting GBRT Gradient Boosted Regression Trees GHM Global Hydrological Model
    GloFAS Global Flood Awareness System GMDH Group Method of Data Handling GNN Graph
    Neural Network GRU Gated Recurrent Unit GWO Grey Wolf Optimisation KGE Kling-Gupta
    Efficiency LASSO Least Absolute Shrinkage and Selection Operator LR Linear Regression
    LSSVM Least-squares support-vector machines LSTM Long Short-Term Memory MLP Multilayer
    Perceptron MLR Multivariate Linear Regression NARX Nonlinear AutoRegressive network
    with eXogenous inputs NSE Nash–Sutcliffe efficiency PCA Principle Component Analysis
    PCC Pearson Correlation Coefficient PSO Particle Swarm Optimisation R2 Coefficient
    of Determination RF Random Forest RNN Recurrent Neural Network SAC-SMA Sacramento
    Soil Moisture Accounting Model SAE Stacked Auto Encoder seq2seq sequence-to-sequence
    SVM Support Vector Machine SVR Support Vector Regression SWAT Soil & Water Assessment
    Tool WT Wavelet Transform 2. Machine learning methods Various statistical and
    Machine Learning (ML) techniques have found significant applications in water
    resource management for prediction purposes, ranging from pure forecasting to
    estimating certain parameters of optimisation models (see Table 1). Statistical
    models provide mathematical representations of observed data, which are used for
    prediction purposes. They are generally based on variants of regression models,
    which include simple linear regression, multiple linear regression, generalized
    linear models, nonlinear regression, and autoregressive integrated moving average
    models (ARIMA) (Bovas and Johannes, 1983; Agresti, 2011; Agresti and Franklin,
    2011), regularized regression models - such as Ridge regression (Hoerl and Kennard,
    1970), Least Absolute Shrinking and Selection Operator (LASSO) (Tibshirani, 1996),
    as well as logistic regression models (Agresti, 2011). The latter are used for
    classification. Table 1. Summary of statistical and machine learning models as
    well as their associated paradigms and tasks. Models Paradigm Task Statistical
    models Linear regression Supervised learning Regression, Nonlinear regression
    Supervised learning Regression Regularized regression models: Ridge Regression,
    LASSO Supervised learning Regression Generalized linear models Supervised learning
    Classification, regression ARIMA Supervised learning Regression, time series forecasting
    Machine Learning models Decision Trees Supervised learning Classification, regression,
    time series forecasting SVM/SVR Supervised learning Classification, regression
    Naïve Bayes Supervised learning Classification, regression, time series forecasting
    Gradient Boosted Trees, AdaBoost, XGBoost Supervised learning Classification,
    regression, time series forecasting Random Forest Supervised learning Classification,
    regression, time series forecasting K-NN Supervised learning Regression, time
    series forecasting Deep learning: ANN, RNN, CNN, GAN, GRU, LSTM, DBN, DCGAN Autoencoders,
    SAE, DEA, VAE, RBM, DBM Supervised learning Unsupervised learning Classification,
    regression, time series forecasting Feature extraction, dimensionality reduction
    Clustering: k-mean, k-medoid, GMM-based clustering Unsupervised learning Feature
    extraction, dimensionality reduction PCA, UMAP, Isomap Embedding, NMF, Apriori
    Unsupervised learning Feature extraction, dimensionality reduction Filter Methods
    Unsupervised learning Feature selection, dimensionality reduction Label Spreading,
    Label Propagation, Self-Training classifier Semi-supervised learning Classification
    Q-Learning, MDP, SARSA, PPO, PG Reinforcement learning Decision-making Hybrid
    models: ARIMA-ANN, Deep Q-Learning, Deep Reinforcement Learning Supervised learning,
    Reinforcement learning Classification, regression, time series forecasting, decision-making
    ML can be cast as either (i) supervised learning, (ii) unsupervised learning,
    (iii) semi-supervised learning or (iv) reinforcement learning. 2.1. Supervised
    learning Supervised learning techniques are used to devise a functional mapping
    between input variables and output variable(s) which have proven to be efficient
    for prediction tasks. Depending on the type of the dependent variable(s), a supervised
    learning technique is categorised as either a classification model (for a nominal
    dependent variable) or a regression model (for a continuous dependent variable).
    Therefore, statistical models can be viewed as supervised learning techniques.
    Classification models for ML include Decision Trees classifiers (Breiman et al.,
    1984; Quinlan, 1986), Support Vector Machines (SVM) classifiers (Cortes and Vapnik,
    1995; Steinwart and Christmann, 2008), Naïve Bayes classifiers (Domingos and Pazzani,
    1997), Adaptive Boosting (AdaBoost) classifiers (Freund and Schapire, 1995), Gradient
    Boosted Trees classifiers (Friedman, 2001; Hastie et al., 2009), Extreme Gradient
    Boosting (XGBoost) classifiers (Chen and Guestrin, 2016), Random Forest classifiers
    (Breiman, 2001), Linear Discriminant Analysis (LDA) (Friedman, 1989). Regression
    models include the regression variants of the aforementioned classifiers, namely
    Decision Trees regressors (Breiman et al., 1984), Support Vector regressors (SVR)
    (Drucker et al., 1997), Naïve Bayes regressors (Frank et al., 2000), AdaBoost
    regressors (Freund and Schapire, 1995), Gradient Boosted Trees regressors (Friedman,
    2001; Hastie et al., 2009), XGBoost regressors (Chen and Guestrin, 2016), Random
    Forest regressors (Breiman, 2001), as well as K-Nearest Neighbour (KNN) regressors
    (Cover and Hart, 1967). Deep learning (Le Cun et al., 2015; Schmidhuber, 2015)
    is a class of supervised learning suitable for both classification and regression
    tasks, which includes classical Artificial Neural Networks (ANN) (Amari, 1972;
    Hopfield, 1982), Convolutional Neural Networks (CNN) (Le Cun et al., 1990), Recurrent
    Neural Networks (RNN) (Hopfield, 1982), Generative Adversarial Networks (GAN)
    (Goodfellow et al., 2014), Gated Recurrent Unit (GRU) (Cho et al., 2014), Long
    Short-Term Memory (LSTM) (Hochreiter and Schmidhuber, 1997), Deep Belief Networks
    (DBN) (Hinton, 2009), Deep Convolutional Generative Adversarial Networks (DCGAN)
    (Radford et al., 2015). 2.2. Unsupervised learning Unsupervised learning techniques
    are used to discover patterns or relationships within unlabelled data. These machine
    learning techniques can be classified as either: - feature extraction techniques,
    including Hierarchical and Partitional Clustering (e.g., K-means and k-medoid)
    (MacQueen, 1967; Hartigan and Wong, 1979; Kaufman and Rousseeuw, 1990), Gaussian
    Mixture Model (GMM)-based Clustering (Maugis et al., 2009), Principal Component
    Analysis (PCA) (Jolliffe, 2002), Uniform Manifold Approximation and Projection
    (UMAP) (Ghojogh et al., 2021), Isomap Embedding (Tenenbaum et al., 2000), Non-negative
    Matrix Factorization (NMF) (Lee and Seung, 2001), Association Rules (e.g. Apriori
    algorithm, (Agrawal and Srikant, 1994)), or - feature selection techniques, which
    revolve around Filter Methods based on mutual information (Pudjihartono et al.,
    2022). Variants of Deep learning (Le Cun et al., 2015) models used for unsupervised
    learning are Auto-Encoders (Kramer, 1991), which include Sparse Auto-Encoder (SAE)
    (Frey and Makhzani, 2013), Denoising Auto-Encoder (DAE) (Vincent and Larochelle,
    2010), Variational Auto-Encoder (VAE) (Welling and Kingma, 2019) and Restricted
    Boltzman Machines (RBM) (Sherrington and Kirkpatrick, 1975), and Deep Boltzman
    Machines (DBM) (Salakhutdinov and Hinton, 2009). 2.3. Semi-supervised learning
    Semi-supervised learning (Chapelle et al., 2006; van Engelen and Hoos, 2020) combines
    both supervising and unsupervised learning framework, namely when the data available
    consist of both unlabelled and labelled data, with the sample of unlabelled data
    generally outweighing the one for labelled data. Semi-supervised learning techniques
    include Label Spreading (Zhu and Goldberg, 2009), Label Propagation (Zhu and Ghahramani,
    2002), and Self-Training classifier (Triguero et al., 2015). 2.4. Reinforcement
    Learning Reinforcement Learning (RL) (Kaelbling et al., 1996) is a framework based
    on an agent''s behaviour with a defined environment where some feedback from previous
    actions are used to adjust optimally the subsequent actions. RL techniques include
    Q-Learning (Watkins, 1992), Markov Decision Process (MDP) (Wrobel, 1984), State-Action-Reward-State-Action
    (SARSA) (Rummery and Niranjan, 1994), Proximal Policy Optimisation (PPO) (Schulman,
    2017), and Policy Gradient (PG) (Sutton et al., 2000). Sometimes, different ML
    techniques and statistical models are combined to improve the predictive accuracy.
    Such hybrid approaches include the combination of RL with Deep Learning (e.g.,
    Deep Reinforcement Learning, Deep Q-Learning) (Mnih et al., 2015), and the combination
    of ANNs with ARIMA (Zhang, 2003). This study aims to provide a comprehensive overview
    of the applications of machine learning in water resources management related
    fields, including groundwater management, water distribution systems, water quality
    and wastewater treatment, water demand and consumption, hydropower and marine
    energy, irrigation and agriculture, water drainage systems, and flood management
    and defence. The following sections provide an overview of the recent water resource-related
    research studies where ML algorithms were implemented (Fig. 1). Download : Download
    high-res image (699KB) Download : Download full-size image Fig. 1. The different
    water resource management related applications covered in this review. 3. Review
    methodology This review involved establishing a systematic literature search on
    the water industry. ScienceDirect and Scopus were mainly used as the database.
    The search also mainly focused on journal articles. Two sets of keywords were
    used, where one set included the machine learning elements, and the other set
    included elements related to the water industry. Those relating to the former
    included keywords such as ‘machine learning’, ‘deep learning’, ‘neural networks’,
    ‘LSTM’, ‘long short-term memory’, ‘random forest’, ‘genetic algorithm’, ‘support
    vector machine’, ‘extreme learning machine’, and ‘extreme gradient boosting’.
    Those relating to the latter included keywords such as ‘groundwater’, ‘water distribution
    systems’, ‘water quality’, ‘wastewater treatment’, ‘water demand’, ‘water consumption’,
    ‘hydropower’, ‘marine energy’, ‘irrigation’, ‘agriculture’, ‘river basin management’,
    ‘water drainage systems’, ‘flood management’, and ‘water retaining structure’.
    The searches were limited to mainly include journal publications. While the search
    mainly focused on the articles published in the past ten years, some older articles
    were cited. 4. Groundwater management Groundwater resources are large natural
    reservoir located within the ground. Arid areas often rely on groundwater resources
    for water supply, irrigation and industrial activities. (Pathak et al., 2021;
    Ghosh et al., 2022). Half of drinking water is supplied by groundwater, and irrigation
    accounts for nearly 43% (Rajeevan and Mishra, 2020). However, natural and human
    factors have put groundwater resources under tremendous pressure. The main detrimental
    factors impacting groundwater quantity and quality include climate change, population
    growth, and agricultural demands. Most groundwater-related studies where ML was
    applied focus on groundwater level (GWL) forecasting. Understanding groundwater
    flow dynamics is essential to assess the potential availability and scarcity of
    water. Hence, a sustainable management of the available groundwater resources
    in arid and semi-arid regions is contingent of an accurate and reliable prediction
    of GWL, which directly reflects groundwater availability and provides relevant
    cues on its hydrodynamics. However, characterising groundwater dynamics is a difficult
    task since the occurrence and availability present spatial and temporal variations,
    which depend on several factors, including, but not limited to, slope, geology,
    rainfall, and soil type. A large number of studies have demonstrated the usefulness
    of data-driven models for GWL application, especially in data-scarce context and/or
    complex aquifer systems. Conventional approaches applied to GWL have often involved
    the use of multivariate linear regression models (MLR), autoregressive integrated
    moving average (ARIMA) model, and seasonal autoregressive moving average (SARIMA)
    (e.g., Rahaman et al., 2019), which are generally considered as linear fitting
    models. Future predictions could be derived using the SARIMA model along with
    the input and output of groundwater data (Kochhar et al., 2021). Teimoori et al.
    (2023) demonstrated that K-means clustering and relevance vector machine (RVM)
    could identify the optimal number and locations of monitoring wells and thus help
    design efficient groundwater level monitoring networks. Traditional ML models
    have also yielded acceptable GWL prediction performance. Rohde et al. (2021) use
    the ensemble-based Random Forest model and satellite-based remote sensing for
    long-term GWL prediction in California, USA. GWL was forecasted within all groundwater-dependent
    ecosystems across the state. They demonstrated that their results could be used
    to help groundwater data gaps filling and improve sustainable groundwater management
    policy in California even in the absence of groundwater monitoring well data.
    Liu et al. (2022) also implemented Random Forest and found it very effective in
    predicting GWL in the lower Tarim River. They demonstrated that RF was superior
    to other models in one-step-ahead predictions of groundwater depth in the space-time
    domain. Sharafati et al. (2020) assessed the performance pattern of the Gradient
    Boosting Regression (GBR) model to predict the monthly GWL with short- and long-lead
    times over the Rafsanjan aquifer. This study demonstrated the performance of GBR
    in predicting GWL. Regions with higher water depth and abstraction rates yielded
    better prediction performance. Hikouei et al. (2023) found that XGBoost exhibited
    good performance, reduced prediction uncertainties, and could capture true features
    of GWL in areas near canals. Their results showed that peat surface elevation
    was the most important parameter amongst other parameters tested, including precipitation,
    distance from the canal, and evapotranspiration. Several studies have shown that
    standalone deep learning models are more performant than traditional ML models
    but are still subjected to data characteristics that can affect their performance.
    The most common ML implementation is the use of artificial neural networks, which
    have been used to predict the dynamics of GWL in numerous studies. Ahmadi et al.
    (2022) showed that feed-forward ANN was very effective in groundwater characteristics
    quantitatively with good accuracy. Taormina et al. (2012) compared the ability
    of feed-forward neural network (FFANN) in forecasting GWL to regression and statistical
    models. Mohanty et al. (2015) also employed neural networks to predict GWL and
    found positive results. Another common application of ML in GWL forecasting is
    using deep learning models such as the LSTM, Gated Recurrent Unit (GRU) and the
    Recurrent Neural Network (RNN). Cai et al. (2021) evidenced the superiority of
    the GRU model in regions with higher precipitation, higher average temperatures,
    lower snowfall fraction, more extreme climate events, and more frequent baseflow
    interactions. Regarding input features for the model, precipitation and streamflow
    data were found to be the most influential ones for groundwater level forecasting.
    Gharehbaghi et al. (2022) also examined the performance of the GRU model in Northwest
    Iran. They used three different layer structures of GRU-based neural network models
    via the seq2seq module, a modern deep learning scheme. Their proposed models could
    predict groundwater level fluctuations in arid/semi-arid regions. Wu et al. (2023)
    showed that the GRU model outperformed SVM, LSTM and MLP models at most groundwater
    monitoring stations. Recently, Pham et al. (2022) investigated the performance
    of seven machine learning models, namely random tree (RT), random forest (RF),
    decision stump, support vector machine (SVM), locally weighted linear regression
    (LWLR), as well as reduced error pruning tree (REP Tree), for the prediction of
    groundwater levels in a drought-prone area. This study found that the Bagging-RT
    and Bagging-RF models outperformed other models. Yin et al. (2021) compared the
    performance of machine learning and physical models in forecasting groundwater
    dynamics. The physically-based models included W3 and CLSM models, while the data-driven
    models were based on ANN, RF and LSTM models, respectively. The predicted GWLs
    from the LSTM model significantly perform better than those of RF and ANN models
    during validation and prediction periods. They quantified the importance of GRACE
    observations in data-driven models and found noticeable improvements in the performance
    metrics considered. Liu et al. (2022) found that when compared to Support Vector
    Machine, Generalized Regression Neural Network, Decision Tree, Convolutional Neural
    Network, Long Short-Term Memory and Gated Recurrent Network, Random Forest performed
    the best in predicting groundwater levels. They showed that RF was superior to
    other models in one-step-ahead predictions of groundwater depth in the space-time
    domain. Mahammad et al. (2023) compared six ML models, including Linear regression,
    Decision tree regressor, Support vector regressor, Random Forest regressor, K-nearest
    neighbours regressor, and Extreme gradient boost regressor. They showed that the
    XGB regressor was the most reliable model for future prediction, while the Decision
    Tree proved to be the least efficient technique for portraying the GWL dynamics.
    They demonstrated that changes in GWL over space and time were strongly linked
    to changes in rainfall and population in the study area. Shakya et al. (2022)
    compared the Support Vector Regression (SVR) model, Multivariate Linear Regression
    (MLR) model, Decision Tree Regression (DTR) model, Random Forest Regression (RFR)
    model, Multivariate Polynomial Regression (MPR) model, and two deep learning algorithms,
    namely ANN model and ANFIS in the task of predicting GWL in an arid area in India.
    They demonstrated that the MPR model was excellent for GWL forecasting and found
    that the groundwater table was highly correlated with evapotranspiration. Sun
    et al. (2022) employed three common data-driven models for GWL forecasting applications,
    which included a back-propagation artificial neural network (BP-ANN), ARIMA, and
    LSTM. The prediction accuracy of the models was tested by deploying them in five
    zones in a Northern Plain in China, which exhibited various hydrogeological properties.
    Amongst the three models, the LSTM model exhibited the best performance. Mohapatra
    et al. (2021) compared the performance of ANFIS, DNN, and SVM to assess their
    capability to predict seasonal GWL in different agroecological Zones of India.
    They found that the DNN model was the most efficient in predicting seasonal GWL
    in most of these agroecological zones and would, therefore, be a reliable forecasting
    tool for seasonal groundwater levels in different agroecological zones of India.
    Wunsch et al. (2022) investigated the impact of climate change on groundwater
    resources in Germany using CNN. Declining trends of GWL could be observed in most
    of the sites as well as spatial patterns of stronger decreases, especially in
    the northern and eastern parts of the country. They also observed increased variability
    of low GWL, which extended over long periods during the annual cycle towards the
    end of the century. Bai and Tahmasebi (2023) compared the performance of a graph
    neural network (GNN) to two baseline models - LSTM and GRU - for GWL forecasting.
    They demonstrated that the GNN model outperformed the other models regarding all
    the performance metrics considered. Also, they demonstrated that their model could
    still learn spatial dependencies from the data even when these were completely
    unknown while still obtaining similar performance. Their model also exhibited
    a high efficiency since it could simultaneously model GWL change for all monitoring
    wells in the system. In addition to standalone ML models, recent studies have
    also examined the performance of hybrid-based models, which combine various ML
    methods to improve forecasting performance. Rahman et al. (2020) used ML models
    coupled with wavelet transforms and showed that wavelet-based hybrid models such
    as WT-XGB and WT-RF were more accurate than standalone models (non-wavelet-based),
    which included Extreme Gradient Boosting, Random Forests, and Support Vector Regression
    models. They also demonstrated that the coupling of WT further improved the performance
    for all ML approaches, and the improvement was more significant for a longer forecasting
    horizon (3 months). Wei et al. (2023) used ANN models combined with wavelet transform
    (WT) and phase space reconstruction (PSR) and found that the performance of the
    WT-PSR-ANN model was better than that of the WT-ANN model and substantially better
    than the standalone models in GWL forecasting. They also found that the type of
    mother wavelet affected the accuracy of the WT-hybrid models, which was more apparent
    for the WT-ANN models than for the WT-PSR-ANN model. Azizpour et al. (2021) proposed
    hybrid models to predict the monthly GWL in Kermanshah, Iran. The hybrid models
    comprised a differential evolutionary algorithm to optimise the ELM and a WT to
    decompose the input parameters into different time series. Their study suggested
    that their hybrid meta-heuristic ML could effectively predict the available water
    quantity in the investigated study area. Yadav et al. (2020) demonstrated that
    the hybrid models (HANN and HSVM) perform better than the original models (ANN
    and SVM) while predicting groundwater level fluctuations. They found that prediction
    accuracy decreased with increasing forecasting horizons for original and hybrid
    models. They evidenced that groundwater decline was much higher in peri-urban
    areas. Van Thieu et al. (2023) proposed a novel hybrid ML model combining Augmented
    Artificial Ecosystem Optimisation (AAEO) algorithm with a traditional MLP network
    and showed that AAEO-MLP exhibited the highest performance and stability with
    reasonable convergence. They evidenced that the AAEO was a promising approach
    for optimising ML models (e.g. MLP) and should, therefore, be explored for other
    hydrological forecasting applications (e.g., streamflow, rainfall) to further
    examine its performance over commonly known methods. Other than all purely data-driven
    hybrid models, physical-based hybrid models combine ML models and physics-based
    models to improve forecasting performance. Su et al. (2020) used deep learning
    algorithms combined with a range of complex numerical models and large-scale Internet
    of Things (IoTs) to measure groundwater levels with acceptable performance. Kayhomayoon
    et al. (2022) proposed a new hybrid model that combines MODFLOW simulation, clustering,
    and optimisation tools for GWL prediction. Specifically, they simulated GWL using
    the MODFLOW, clustered the study aquifer into different clusters using the k-mean
    method, and predicted regional GWL using ANN and ANFIS methods that were optimised
    by the Harris Hawks Optimisation (HHO), Whale Optimisation Algorithm (WOA), and
    Particle Swarm Optimisation (PSO). They evidenced that the most important variables
    for groundwater levels in different clusters included GWL in the previous month
    (produced by MODFLOW), groundwater withdrawal, precipitation, temperature, and
    evaporation. Patra et al. (2023) compared Global-LSTM, and Local-LSTM to examine
    the relevance of groundwater sequential forecasting. Their study showed that the
    Global (MS) model was the least performant model in forecasting applications and
    that LSTM was reliable in GWL forecasting. They demonstrated that the local LSTM
    models from the mid-fan area exhibited the best choice for regional groundwater
    forecasting. Groundwater is also sensitive to pollution from various sources which
    is related to GWL decline, particularly in coastal areas, where the associated
    GWL decrease caused by excessive groundwater pumping leads to seawater intrusion,
    pollution and groundwater quality degradation. Nitrate contamination has also
    become a serious threat to coastal groundwater worldwide. Hence, the application
    of ML on groundwater contamination, although outside the scope of this review
    study, warrants further investigation. 5. Surface water management 5.1. Streamflow
    forecasting Machine learning has widely been applied to river basins, specifically
    for short-, mid- or long-term river flow forecasting, which is a pivotal task
    for optimal water resource management during the era of rapid climate change.
    The rapid evolution of hydrological variables, e.g., precipitation, substantially
    impacts the temporal evolution of river flow distribution in recent days, thereby
    rendering prediction challenges even more complex. The high uncertainty associated
    with basin characteristics, hydrological processes, and climatic factors affecting
    river flows makes streamflow prediction challenging. LSTM Networks have gained
    increasing attention in streamflow forecast, given its strong learning ability
    for time series data and ability to process sequential time-series data. Numerous
    studies have demonstrated the superiority of LSTM in streamflow forecasting over
    some traditional physics-based models, including the SAC-SMA model for runoff
    predictions (Kratzert et al., 2018) or the CaMa Flood calibrated model for streamflow
    and climate data forecasting (Damavandi et al., 2019). LSTM networks have recently
    yielded the most promising results in the realm of river streamflow forecasting
    (Wegayehu and Muluneh, 2022). Xu et al. (2020a, 2020b) assessed the performance
    of LSTM networks for 10 days average flow predictions and the daily flow predictions
    at Hun River and Upper Yangtze River basins, respectively. The impacts of network
    structures and parameters, such as the batch size and the number of LSTM cells,
    impacted the learning efficiency and predictive accuracy. Overall, LSTM was proven
    to yield good forecasting capabilities compared to traditional hydrological and
    data-driven models tested, which included the SWAT, Xinanjiang model (XAJ), multiple
    linear regression model (MLR) and back-propagation neural networks (BP). The predictive
    performance of LSTM models has also been compared to a wide range of machine learning
    models. Cheng et al. (2020) examined and compared the performance of ANN and LSTM
    in long lead-time forecasting in the Nan River Basin and Ping River Basin. Their
    ANN and LSTM models were shown to yield reliable daily forecasts up to 20 days
    lead time, albeit the LSTM model outperformed the ANN model when the forecasting
    horizon was increased. Mehedi et al. (2022) used the LSTM neural network to forecast
    river discharge and demonstrated its higher performance than other neural network
    regression models, including for longer lead periods. Dehghani et al. (2023) compared
    LSTM, CNN, and Convolutional Long Short-Term Memory (ConvLSTM), in hourly streamflow
    prediction in two rivers in Malaysia, namely the Kelantan and Muda River basins.
    They showed all three deep learning methods performed with high accuracy in predicting
    streamflow, but LSTM outperformed CNN and ConvLSTM in small basins with well-spatial
    distributed rainfall stations, while it underperformed them in moderate to high
    streamflow and large river basin. Le et al. (2021) examined and compared the performance
    of six supervised machine learning models in forecasting streamflow in the Red
    River basin in Vietnam. These included a CNN, a feed-forward neural network (FFNN),
    and four LSTM-based models. They also compared two standard models, LSTM and GRU,
    which comprised a single hidden layer, to two more complex algorithms: the stacked
    LSTM (Stacked LSTM) and the Bidirectional LSTM (BiLSTM). They showed that their
    four LSTM-based models performed better and were more stable than the FFNN and
    CNN models. They also evidenced that the complexity of the Stacked LSTM and BiLSTM
    models did not substantially improve the prediction accuracy compared to the two
    standard and simple models comprising a single layer (LSTM and GRU). Akbarian
    et al. (2023) examined the ability of the European Centre for Medium-Range Weather
    Forecasts (ECMWF) ensembles in runoff forecast application, with one-to three-months
    lead time in Iran. Five ML models were also used for the runoff prediction, including
    RF, ANN, XGBoost, SVR, and MLR, while results were compared to observations. Results
    showed that the ANN exhibited the best fit, followed by XGBoost and RF models,
    while SVR and MLR models yielded lower performance. ANN and XGBoost outperformed
    the other models for longer lead times, but the performance decreased with an
    increase in forecasting horizon. Ilhan (2023) explored a variety of ML algorithms
    in the estimations of one-ahead instantaneous measurement of streamflow rate in
    the Ergene River, including LSTM neural network, ANFIS with fuzzy c-means (FCM),
    ANFIS with subtractive clustering (SC), and the ANFIS with grid partition (GP).
    All four algorithms could successfully perform in the task of streamflow prediction.
    To further improve streamflow forecasting accuracy and model efficiency, a variety
    of traditional ML models that belong to the supervised category have also been
    either used directly or combined to develop hybrid models (Granata et al., 2022;
    Wang et al., 2023; Akbarian et al., 2023). Granata et al. (2022) proposed a novel
    ensemble model composed of RF and MLP algorithms and compared its forecasting
    capability to a deep learning model based on bidirectional LSTM networks. The
    results show that the two models showed comparable performance, but the forecast
    horizon strongly affected the predictive accuracy. Wang et al. (2023) developed
    a hybrid decomposition-based multi-model and multi-parameter (DMP) ensemble streamflow
    forecast method. Their novel ensemble forecast method extracted the characteristic
    periodic term and trend term of hydrological series, improved streamflow forecasting
    accuracy, reduced ensemble uncertainty and expanded the ensemble size. Hybrid
    models combining numerical models and ML models have also been tested to improve
    streamflow forecasting accuracy, especially for longer forecasting horizons. Hunt
    et al. (2022) tested LSTM for streamflow forecasting purposes for up to 10 days
    lead time at ten hydrological stations in the western US. The catchment-mean meteorological
    and hydrological variables from the ERA5 and Global Flood Awareness System (GloFAS)–ERA5
    reanalyses were used to train the LSTM model, as well as historical streamflow
    data. They showed for the first time that their LSTM model could be used in a
    hybrid system to create a medium-range streamflow forecast outperforming established
    physics-based models. Chu et al. (2023) assessed the ability of novel integrated
    streamflow modelling method combined with the DC-LSTM model with the DC-B-LSTM
    model in improving the forecasting performance. Both the DC-LSTM and DC-B-LSTM
    models were shown to outperform the standalone LSTM models for all river basins
    considered. Li et al. (2022) examined a hybrid model composed of a convolutional
    neural network and long short-term memory network (CNN-LSTM) and evidenced its
    superiority over the Soil and Water Assessment Tool (SWAT) model, especially in
    wet seasons, due to its nonlinear learning ability. 5.2. Water demand, allocation,
    and irrigation 5.2.1. Water demand and consumption Potable water can be inaccessible
    for many reasons, including inadequate water infrastructures, climate-based issues
    such as drought, and overexploitation of freshwater resources. Researchers have
    recently attempted to apply ML in drought forecasting, including Wang et al. (2022),
    who assessed the feasibility of using extreme learning machines (ELMs) to forecast
    hydrological droughts. They deployed support vector machine models and ELMs with
    approximately 144 different models, and they confirmed that ELMs could forecast
    the standardised hydrological drought index with high precision. Their study also
    demonstrated that self-adaptive differential evolution ELM could outperform all
    other tested models and that the wavelet hybrid positively impacted the model''s
    performance, yielding less error in their predictions. Global water scarcity presents
    an extraordinary challenge, so the United Nations prioritise it among its 17 sustainable
    development goals for 2030. Many regions are coming dangerously close to enclosing
    the gap between water demand and its sustainable limit. United Nations Water (2020)
    estimated that the water demand rate is more than twice the population growth
    rate within the last century. Arid areas are facing the worst of the water crisis.
    Therefore, monitoring water demand is of considerable significance for decision-makers.
    Water resources can be more efficiently managed if demand is accurately forecasted.
    This will help resolve the overexploitation of precious and limited water resources.
    Forecasting water demand is a challenging problem. As such, it has been approached
    in various ways, ranging from linear methods (Zhou et al., 2000; Alhumoud, 2008)
    to nonlinear regression models (Nasseri et al., 2011; Bennett et al., 2013). However,
    modelling water demand could be quite complex, and not all input variables have
    linearity between them. Due to the complexities of the water demand data, Romano
    and Kapelan (2014) explored the use of deep learning for forecasting and management
    of smart water distribution using real-life data from a water distribution network
    within the United Kingdom. Perea et al. (2019) applied deep learning to a previous
    study by Romano and Kapelan (2014) to improve the performance of existing short-term
    water forecasting models in Southern Spain. Banadkooki et al. (2022) attempt to
    resolve conflicts related to water resources in arid basins through the exploration
    of intelligent algorithms: genetic algorithms (GA) and non-dominated sorting genetic
    algorithm (NSGA-II). The study considered environmental parameters and the integrated
    water management indices to determine optimal water management scenarios. The
    study performed a variety of trade-offs to balance economic benefit and demand
    management. The results showed that less water was allocated to industries with
    high water demand to conserve aquifers and meet water demands. The real-life application
    of smart metering has become more apparent in recent years. Monitoring demand
    is vital for the adequate management of resources across all service sectors.
    Recently, neural networks have been more commonly implemented to address water
    demand prediction issues. While the water industry has not explored the use of
    deep learning for smart metering as extensively as in the energy sector (Kavousian
    et al., 2013). Pesantez et al. (2020) attempted to address this gap using artificial
    neural networks and cluster analysis to forecast the water demand at the customer
    level. They used smart metered data on water consumption, with no differentiation
    between the type of user, whether residential or non-residential. The study found
    that support vector regression underperformed compared to random forest and artificial
    neural network models despite applying optimisation methods supported by previous
    works (Herrera et al., 2010; Mouatadid and Adamowski, 2017; Antunes et al., 2018).
    As inferred previously by Herrera et al. in (2010), the random forest technique
    was found to be either on par with or slightly outperformed the artificial neural
    network model. Salloom et al. (2021) explored the use of GRU on historic water
    demand data and implemented k-means, an unsupervised classification method, to
    enhance prediction accuracy whilst also reducing the parameters fed into the model.
    The model was found to significantly reduce the complexity required (six times
    what was archived in the most current literature at the time of the study) while
    maintaining the predictive accuracy rate. Salloom et al. (2022) used a proportional-integral-derivative
    (PID) control approach to boost the performance and efficiency of neural network
    models for water demand prediction. The PID''s prediction error experienced the
    same level of reduction as other techniques in the study; however, the efficiency
    of error reduction showed superior performance compared to other techniques. This
    was evident by the negligible effects on the number of variables via the PID approach.
    Wang et al. (2022) explored the use of principal component analysis (PCA) and
    backpropagation (BP) neural network in water resource demand prediction in Taiyuan,
    China, a city subject to severe water shortages. Compared with other models (namely
    PCA-ANN, ARIMA, NARX, Grey-Markov, serial regression, and LSTM), the PCA-BP model
    outperformed them by making highly complex variables easier to compute. The model
    achieved this by reducing the dimensionality of the variables and transforming
    them into uncorrelated composite data. However, their model was limited by limited
    data collection, affecting its accuracy. In addition, although the model''s computation
    accuracy was sufficient to meet the threshold, there was still room for further
    development. 5.2.2. Water allocation and irrigation Water plays a vital role in
    irrigation and agriculture all over the world. The Food and Agriculture Organization
    of the United Nations (2017), FAO, states that 70% of freshwater withdrawn globally
    is supplied to agriculture to sustain the ever-growing human population. Future
    projections on the water demand for irrigated food production will double by 2050,
    increasing pressure on the already limited freshwater supplies. The FAO also anticipated
    an increase in water withdrawal by agriculture by 2050; however, this increase
    is only by 10%. This small increase is attributed to improved management and practices
    for irrigation. Therefore, efficient water use within the irrigation and agricultural
    sectors is crucial to lessen the strain on water demand worldwide. Evapotranspiration
    is an important aspect of irrigation and agriculture, which is split into two
    components: evaporation and transpiration. Evaporation refers to the water evaporated
    over a specific area, whereas transpiration refers to the water lost through the
    stomata of the vegetation. As these natural processes occur simultaneously, they
    are difficult to disentangle. Accurate estimation of the evapotranspiration rate
    is a vital parameter for farmers and agricultural engineers, as it helps reduce
    crop water demand. Traditional methods to address these issues include the Penman-Monteith
    equation, which Baille et al. (1994) used as a simplified method for the rate
    of evapotranspiration prediction. Other approaches found success using scintillometer
    and meteorological measurements applied to the FAO-PM56 model, as used by Poisson
    et al. (2017) study. However, the authors showed that the FAO-PM56 model had more
    significant uncertainties when minor variations were applied and fewer input variables
    were used. Deep learning techniques have been extensively used to model and forecast
    evapotranspiration within the agricultural sector. Feedforward backpropagation
    ANN outperformed multi-linear regression models (MLR) for predicting wind drift
    and evaporation losses of sprinkler irrigation systems (Al-Ghobari et al., 2018).
    Various studies found that convolutional neural networks (or CNN-hybrids) were
    more accurate than other nonlinear regression models, such as random forest or
    extreme gradient boosting, for evapotranspiration forecasting (Ferreira and da
    Cunha, 2020a, 2020b; Lucas et al., 2020). Elbeltagi et al. (2020) opted for a
    more modern approach to the problem by modelling long-term evapotranspiration
    dynamics using deep learning algorithms in major wheat-producing sites in Egypt.
    They applied deep neural networks using real-life data collected from remote sensors,
    which included the monthly maximum temperature, the monthly minimum temperature,
    and the monthly solar radiation. The model parameters were intentionally chosen
    to give the lowest root mean squared error, following a similar procedure presented
    by Maroufpoor et al. (2019a,b). He et al. (2022) successfully demonstrated the
    use of biological heuristic algorithms integrated with an extreme learning machine
    (ELM) to accurately determine the daily evapotranspiration (ETo) in the Hetao
    irrigation district of China. In the hybrid ELMs, the optimisers include grey
    wolf optimiser (GWO), moth-flame optimisation (MFO), particle swarm optimisation
    (PSO), and whale optimisation algorithm (WOA). The GWO was highlighted as the
    strongest performer of the four algorithms, obtaining the highest accuracy (R2
    = 0.945–0.955), specifically using mass transfer (Tmax, Tmin, RH, u2) combination
    as opposed to temperature or radiation. GWO is characterised by the avoidance
    of local optimisation when dealing with nonlinear and multivariate functions.
    Water resources can often become contaminated by agricultural runoff. Improper
    agricultural practices lead to elevated levels of faecal coliforms and other pollutants,
    thus negatively impacting the water quality of the surrounding area. Bilali and
    Taleb (2020) found that artificial neural networks and other machine learning
    models, such as random forest, multi-linear regression and decision tree, are
    highly accurate at predicting irrigation water quality parameters, such as the
    sodium absorption ratio and the TDS dissolved in the water surface. The study
    found that the ANNs outperformed k-nearest neighbours and support vector regression
    models. H. Chen et al. (2020) found that the CNNs architecture could be developed
    and integrated with decision tree algorithms to aid in smart feature extraction
    and to establish intelligent spectroscopic modelling of agricultural water pollution.
    Furthermore, ANNs have been used to forecast infiltration water volume under furrow
    irrigation (Mattar et al., 2015), to forecast irrigation flow (Mouatadid et al.,
    2019), and to forecast estimates for drip irrigation systems (Karimi et al., 2020).
    However, Mouatadid et al. (2019) highlighted that LSTM models were able to outperform
    the other models used in their study, which included an ANNs model, least squares
    support vector regression (LSSVR), multi-linear regression (MLR) and extreme learning
    machine (ELM). The LSTM was coupled with a maximal overlap discrete wavelet transform
    analysis and bootstrap technique. The wavelet-bootstrap-ANN and wavelet-LSTM,
    both with three hidden layers, displayed the most accurate forecasting capability
    compared to the other models used in the study. Chen et al. (2021) explored reinforcement
    learning, a deep Q-learning network (DQN), to develop smart irrigation practices
    focusing on conserving irrigation water and time without losing paddy rice yield.
    DQN combines the perception ability of deep learning with decision-making ability.
    The study found that the DQN strategy could conserve 23 mm of irrigation water
    compared to conventional irrigation decisions. Drainage water was also reduced
    by 21 mm without a reduction in yield. Alibabaei et al.’s (2022) case study in
    Portugal utilised a deep reinforcement learning model to optimise irrigation requirements
    on the site. The model would serve as a smart irrigation scheduling system that
    would aid farmers in water quantity and the irrigation frequency required for
    the site. The model post-training would not require expertise to operate and,
    thus, would be a valuable system for farmers to use after the completion of the
    study. The model would also adjust the irrigation requirements based on climate
    change, as climate data is used in the model. The study considered ANN, LSTM,
    and CNN. However, the LSTM was found to be better at predicting the Q-table than
    the other models. The trained model decreased the water requirement by 20–30%
    and increased productivity by 11% compared to the fixed method. Gorgij et al.
    (2023) demonstrated the predictive potential of LSTM for spatiotemporal forecasting
    of the quality of groundwater used for irrigation. Sodium Adsorption Ratio (SAR)
    was highlighted as a crucial criterion for the study. An 18-year SAR dataset based
    in northwest Iran was supplied to the model to forecast the irrigation water quality
    for the subsequent year. They found that the LSTM marked against the performance
    indicator RBIAS showed underestimation by the model. However, when assessed against
    the performance indicator GA (generalisation ability), the LSTM model exhibited
    more acceptable performance. The allocation of water sourced from the Transboundary
    River generally involves many stakeholders in different countries that share the
    water resource. Water scarcity and the often-conflicting use of water resources
    ultimately increase tensions between riparian countries. Tension can be eased
    by the efficient management and allocation of transboundary water resources, which
    warrants the need for advanced techniques to enable the proactive and efficient
    planning of available water for human well-being and environmental sustainability.
    As an attempt to apply ML techniques for water allocation in a transboundary context,
    Yan et al. (2019) comprehensively evaluated the water resources of China''s transboundary
    river basins at the basin and country levels. They assessed the performance of
    several ML algorithms, including random forest, gradient boosting, and stacking
    in the task of forecasting runoff. Their study provided valuable information on
    long-term averaged surface water resources by country and basin in China''s transboundary
    river basins and high-resolution runoff coefficient and runoff maps of all the
    riparian countries, thereby providing valuable spatially distributed runoff information.
    Their study also demonstrated the satisfactory implementation of ML models for
    water resources assessment and their superiority over traditional linear models
    and two popular runoff data products (the UNH/GRDC Global Composite Runoff Fields
    and the Global Streamflow Characteristics Dataset) from a predictive accuracy
    standpoint. 6. Hydropower management, marine energy and reservoir operation 6.1.
    Hydropower management and marine energy Statistics from Our World in Data (2020)
    showed that in 2019, global fossil fuel consumption totalled 136,761 TW-hours,
    reaching a new record and continuing the increasing trend observed in the past
    years. Fossil fuels were classified into three categories: gas, coal and oil.
    The data showed that most consumption was attributed to oil (53,620 TW-hours),
    while the least consumed fossil fuel was gas (39,292 TW-hours). This leaves global
    coal consumption at 43,849 TW-hours. Global efforts to struggle against climate
    change have been increasingly witnessed over recent years by shifting towards
    clean and renewable energy. According to the International Hydropower Association
    (2020), the 2020 Hydropower Status report showed that global clean electricity
    generation through hydropower achieved a new record of 4306 TW-hours. This record
    was acknowledged as the “single greatest contribution from a renewable energy
    source in history”. However, this record can only account for a small portion
    of the global fossil fuel consumption in 2019, approximately 3%. Therefore, it
    is essential to maximise the full potential of hydropower and marine energy by
    exploring new methodologies to solve current problems and increase the energy
    efficiency provided, particularly in some parts of the developing world where
    the load on the system is increasing, but hydro-turbines struggle to match the
    demand. The application of ML in hydropower management and marine energy has recently
    met some level of success. Hammid et al. (2018) explored the use of artificial
    neural networks on a small hydropower plant using a Kaplan turbine at the Himreen
    Lake dam in Diyala, Iraq, to enhance the accuracy of forecasting the energy produced.
    Wang et al. (2020) developed a novel integrated approach using traditional and
    more modern methodologies for the production capacity prediction of a hydropower
    station to enhance energy efficiency. A previous study by Zhang et al. (2017)
    found that a backpropagation neural network model, although powerful in terms
    of performance, took a relatively long time to train on the input data. Although
    a radial basis function neural network model could outperform the backpropagation
    neural network (Li et al., 2018), they were both prone to the risk of local minimum
    convergence. To avoid this challenge, Wang et al. (2020) opted for using a simple
    single hidden layer feedforward neural network, defined as an extreme learning
    machine (ELM). The corresponding model showed a generalisable performance with
    a relatively quick training time. Technological advances have made it possible
    to predict energy that can be gained from ocean waves. This type of renewable
    energy carries a higher power density than other renewable resources, such as
    solar or wind energy. Accurate predictions can enhance energy efficiency to reach
    the full extent of potential wave energy, ultimately helping the shift from fossil
    fuels. An early comparative study by Reikard (2009) supported a time-varying parameter
    approach, attributing the weakness of the neural network model to inadequate architecture
    and optimisation for that dataset. Hybrid models have been found to have the potential
    to achieve accurate predictions. Real-life application of wave energy control
    is difficult as it depends on accurate predictions of future waves. Li et al.
    (2018) explored the use of deep learning, namely ANNs, and showed that the model
    was able to provide accurate predictions, which substantially increased the average
    energy absorption from 60% to 80%. However, the control efficiency could still
    be further developed and improved as it was slightly lower than the optimal level.
    Avila et al. (2020) showed that using ANNs and fuzzy interference systems (FIS)
    proved to be effective tools to accurately predict wave power at any point in
    deep oceanic waters, even with a small dataset of a few months collected from
    buoys in the Micronesian region. Recently, Giles et al. (2021) explored the issue
    caused by sun glint for high-resolution red-green-blue (RGB) imagery collected
    by drones over shallow marine environments. An artificial neural network model
    was developed to automatically detect and classify the sun glint in high-resolution
    aerial imagery. The model was supplied with a highly imbalanced dataset, with
    the pixels of sun glint accounting for only 1.19% of the training dataset. Despite
    this, 99.18% of overall predictions were correct. It was also shown that large
    hydropower plants could have high environmental impacts. Bortoluzzi et al. (2022)
    used Data Envelopment Analysis (DEA) and an artificial neural network to accurately
    predict the local impact of such projects. While the DEA allowed the environmental
    impacts to be ranked, the ANN allowed the assessment of the size of the local
    environmental impact. In other words, they created a hybrid DEA-ANN decision-making
    approach, which enables a more informed evaluation of hydroelectric generation
    projects. The GRU-LSTM hybrid model of Ma et al. (2023) successfully predicted
    water levels in cascade hydropower stations at different time scales. Such information
    is vital for irrigation and flood control. Authors note prediction errors associated
    with downstream tributary backwater jacking could be significantly reduced by
    adding downstream tributary flow as an additional parameter in the dataset. The
    LSTM parameters implemented the Archimedes optimisation algorithm. The output
    results of the GRU and LSTM were weighted. This resulted in increased accuracy
    of the water levels predicted. The authors highlight the use of a semisoft threshold
    function to improve the model in various ways, such as eliminating the noise of
    the original hydrological dataset. 6.2. Reservoir operation Reservoirs provide
    a plethora of services, including the provision of freshwater supply. On the other
    hand, groundwater level fluctuation is subject to factors such as changes in precipitation
    during different seasons. National Thailand (2019) pointed out that the Vajiralongkorn
    Dam in Kanchanaburi was at 51% capacity with 4500 million cubic metres of water,
    down from 70% the same time the previous year, highlighting the harsh reality
    of dams drying up due to climate change. Given this fact, decision-makers are
    under more pressure to be aware of potential shortages in the future. Therefore,
    accuracy in predicting the water balance of a reservoir is crucial. Artificial
    neural networks (ANN) have been applied by Hadiyan et al. (2020) to accurately
    forecast the Sefidroud Dam reservoir inflow. Their study compared different types
    of static and dynamic ANNs, which included static feedforward neural networks
    (FFNN), nonlinear autoregressive (NAR) neural networks, and nonlinear autoregressive
    neural networks with exogenous inputs (NARX). The models were trained using two
    input variables, namely, the monthly inflow discharge and the precipitation data.
    The architectures were optimised by adjusting the number of neurons within the
    hidden layers. They found that the dynamic NAR model outperformed the other two
    models and could predict high inflows while achieving the lowest RMSE values.
    They evidenced that the most optimum number of time delays was 12 for the input
    variable as the model could perform computation more accurately. They also attempted
    to use dynamic artificial neural networks instead of static ones for forecasting
    discharge inflows. Recurrent neural networks have also been used to forecast water
    levels to improve water resource management, and long short-term memory (LSTM)
    models have proved to be efficient for this purpose, achieving an accuracy of
    97.05% (Ren et al., 2020). Amongst the main hydrological processes impacting the
    sustainable planning and management of river, dam operation and reservoir capacity
    is suspended sediment load (SSL). AlDahoul et al. (2022) successfully demonstrated
    the application of ML models to accurately classify suspended sediment load SSL
    using the data from the Johor River in Malaysia. The analysed models include extreme
    gradient boosting (XGB), random forest, support vector machine, multi-layer perceptron,
    and k-nearest neighbours. The XGB model exhibited superior classification performance
    over the other ML techniques. The model used several parameters, such as environmental
    factors influencing the SSL pattern, while using two different time scales. Nonetheless,
    they demonstrated that most of the ML models achieved acceptable classification
    results. 7. Water distribution and drainage systems 7.1. Water distribution systems
    As water demands increase and freshwater availability decreases, water resource
    mapping (WRM) becomes a key aspect of water resource management. Water resource
    managers need to know where the next set of potential resources are to use them
    in their plans for the future. Therefore, accurate predictions are imperative
    to ensure the availability of freshwater supply is over- or underestimated during
    the planning. Due to inadequate information, traditional approaches for WRM, such
    as water spectral indices (WSI), reach an impasse with high-resolution multispectral
    images. This can be problematic for more complex areas. To provide an alternative
    approach to mediate the issue, K. Chen et al. (2020) deployed a water body extraction
    neural network (WBE-NN) model for a more accurate surface water resource mapping.
    This approach outperformed previous methods (e.g., Feng et al., 2018; Nandi et
    al., 2017) with reduced processing time and a reduction of underestimated water
    areas. Water distribution networks (WND) are crucial infrastructure systems that
    provide potable water to the public. However, according to Interreg Central Europe
    (2020), up to 50% of water is lost in some parts of Europe, with an average of
    26% due to various structural problems, including poor water pressure management,
    deteriorated infrastructure, and leakages. For instance, the Consumer Council
    for Water (2017) stated that England and Wales collectively have a water leakage
    loss of 3.1 billion litres daily. Many traditional approaches have been undertaken
    to resolve water leakage issues; however, these methodologies are limited as they
    need to consider the complex and nonlinear deterioration of the infrastructures
    over time. To resolve the issue of leakage detection, Arsene et al. (2012) explored
    the use of deep learning combined with graph theory. Water distribution systems
    require adequate pressure management to sustain many operational aspects, which
    include demand control, maintenance, water leakage and failure management, cost
    reductions, and energy efficiency. Non-revenue water is largely attributed to
    water that is lost through leakage within the distribution network, thus resulting
    in substantial amounts of water loss through leakage. This increases operational
    costs, impacting the economic value of water companies. Traditional approaches
    for pressure monitoring often leave high uncertainties about pressure values at
    the nodal points that do not have sensors on them. Ridolfi et al. (2014) used
    artificial neural networks with a combination of the entropy-based methodology,
    which was outlined as shifting towards conditions of the highest order. The study
    found that optimal sensor placement on nodes could be achieved by finding the
    best trade-off between sampling design and model accuracy. Other studies show
    the successful use of neural networks for leakage or contamination detection within
    a water distribution system. Rutkowski and Prokopiuk (2018) used learning vector
    quantisation (LVQ) neural networks to pinpoint contamination locations within
    a water distribution system in Poland, whereas Zhou et al. (2019) used a convolutional
    neural network as part of a novel burst location identification framework. Hu
    et al. (2021) proposed a novel approach to leakage detection within a water distribution
    system using multiscale fully convolutional networks integrated with spatial clustering
    of applications with noise. This approach outperformed k-nearest neighbour (KNN),
    support vector machine (SVM) and naive bayes classifier (NBC) by 28%, 78%, and
    72%, respectively. Water resource carrying capacity (WRCC) is an essential aspect
    of urban planning, which aims to balance out the amount of water demand concerning
    the available water resources within an urbanised area. Analysis of the WRCC of
    a city helps prevent the exploitation and degradation of the water resources and
    environment while ensuring a sustainable standard of living for the people. However,
    addressing this issue depends on multiple input variables, which become far too
    complex and reduce the accuracy of the predictions. Yu et al. (2020) proposed
    two simple types of feedforward neural networks (FNN) based on the normalisation
    value (NV) and error correction to address these issues. Almheiri et al. (2021)
    outlined the superior performance of deep learning compared to other machine learning
    methodologies, e.g., survival random forest (SRF). However, since the amount of
    data available controls DL approach, it is therefore limited as pipe failure data
    are not widely scarce. They developed a hybrid model using an ANN-based method
    and integrated an ML process to predict the hazard ratio of water pipes. The performance
    of ML approaches (e.g., SRF) decreased as the training shots decreased, whereas
    the stability of the hybrid model remained constant despite the decrease in the
    training shots. The authors suggested the two learning phases allow the hybrid
    to effectively generalise, while one phase was used in the baseline approaches.
    Garðarsson et al. (2022) successfully demonstrated strong performance of Graph
    Neural Networks (GNNs) to predict pressure values in water distribution networks
    in order to detect leakage and localisation. Results were evaluated by the benchmark
    set in the Battle of the Leakage Detection and Isolation Methods challenge (Vrachimis
    et al., 2020). The authors noted that the model was limited by false positives;
    however, the GNN model could obtain the highest economic score among the contestants,
    suggesting the model was still considered a viable approach to leakage detection.
    More recently, Yu et al. (2023) implemented ML methods with piezoelectric accelerometers
    installed within real-life pipe networks across several cities in China that classified
    vibration signals in order to detect leakages within the systems. They demonstrated
    that a pre-trained compact CNN with 18 deep learnable layers with the ability
    to classify images into 1000 classes, namely SqueezeNet, performed the best and
    showed a 95.15% in leak-detection accuracy compared to the other ML approaches,
    which included SVM, DTR and KNN. They also demonstrated that larger dataset enabled
    SqueezeNet to achieve more accurate results. 7.2. Water drainage system The advent
    of advanced sewage and drainage systems can be traced back to the Indus Valley
    Civilisation around 3000 BC. This historical infrastructure spanned 91 cm across
    and 1.5 m in depth as a watertight sanitary drainage system (Harappa, 2020). Nowadays,
    natural processes required for drainage systems, namely the infiltration, which
    enables water to move into the ground easily, is hindered and reduced in urbanised
    areas. Therefore, increased stormwater can easily overwhelm surface water drainage
    systems of urbanised areas. Pollutants and contaminants within the system can
    potentially be released and have serious consequences on public health, as well
    as the health of any surrounding organisms. Concerns over climate change and future
    projections of heavier rainfall can present a challenge to decision-makers and
    drainage engineers. If drainage systems cannot function properly, urban flooding
    is inevitable and may eventually lead to various issues for both the public and
    the environment. An important aspect when designing drainage systems is understanding
    the rainfall-runoff relationship for any given catchment. Gong et al. (1996) and
    Loke et al. (1997) have attempted to address this issue using ANNs models as a
    predictive tool for urban stormwater drainage. Loke et al. (1997) were able to
    show that neural networks had a high fault tolerance, good generalisation, and
    a high ability to learn. However, limitations of the models included the need
    for substantial amounts of data for more accurate predictions, little transparency,
    and relatively long training times. Pektaşa and Cigizoglu (2013) highlighted the
    inadequate performances of ANNs, univariate autoregressive integrated moving average
    (ARIMA), and multivariate autoregressive integrated moving average (ARIMAX) models
    for time series predictions for direct runoff coefficients within large drainage
    basins. They proposed a hybrid ANN-ARIMA model and found that it could be generalized
    to enhance the computational power of the neural networks and offer for more accurate
    time-series predictions. On the other hand, ANNs have also been explored to alleviate
    issues pertaining to stormwater and optimisation of the drainage system (Hsu et
    al., 2013; Rjelly et al., 2018; Mullapudi et al., 2020). An early study by Tran
    et al. (2007) outlined the use of neural network modelling with CCTV data to identify
    the deterioration of stormwater pipes made from concrete. The architecture used
    backpropagation weight estimation and was compared to a Monte Carlo simulation
    using Bayesian weight estimation. Although the neural network model outperformed
    the Monte Carlo simulation, the model struggled to accurately process irrelevant
    features, namely redundant factors such as ''soil type'' and ''buried depth''.
    More recently, Li et al. (2019) used backpropagation neural networks (BPNN) as
    a monitoring tool to assess the performance of stormwater green infrastructure
    practices. The model was successfully able to reduce peak flow rate averages of
    61% per storm event and reduce the flow volume by 33% per storm event. Truong
    et al. (2021) input a 21-year dataset of water levels into a gradient tree boosting
    (GTB) model to forecast the water levels in the culverts within irrigation and
    drainage systems. The GTB consistently outperformed eight other machine learning
    methods. Over 91% of predicted and observed values had an error rate below 10%.
    The comparative common machine learning techniques such as DTR, DL, Adaboost,
    SVM, XGBoost, RF, and LightGBM. The resultant predictions could aid in forming
    a strategic approach considering water resources reallocation, affordable pumping
    technologies, or water rotation in times of low water levels. Zhang et al. (2022)
    utilised deep reinforcement learning (DRL), specifically a Duelling Double Deep
    Qu-learning (D3QN) strategy, to evaluate the uncertainty of control within drainage
    systems. DRL-based real-time control showed reduced statistical dispersion by
    15.48–81.93% compared to the conventional rule-based control strategy, thus demonstrating
    an advantage over the rule-based strategy. The reduction in statistical dispersion
    specifically pertained to random and system uncertainties in monitoring water
    level signals within an urban drainage system. 8. Water quality monitoring Water
    quality is an absolute necessity for public health and safety. However, since
    the 1990s, water pollution has worsened in most rivers in Africa, Latin America
    and Asia (United Nations Environment Programme, 2016). The global population has
    only increased and intensified the global demand for potable water, thus putting
    enormous pressure on water treatment plants. Extensively urbanised cities such
    as London, Hong Kong and New York experience high levels of stormwater runoff.
    Much of the effluents carry various types of pollutants, which lower the drinking
    water quality, in some cases making the water dangerous for marine life. Therefore,
    water treatment engineers faced various challenging issues requiring advanced
    and innovative solutions. For instance, estuaries face various environmental issues,
    including toxic chemicals, water flow changes, and habitat loss. According to
    the National Biodiversity Network (2019), physical changes impact a third of the
    water ecology in the United Kingdom, thus hindering the natural functions of the
    estuaries. Many estuaries undergo large-scale conversions into urbanised areas,
    agricultural areas, and shipping ports. Therefore, human interference imposes
    a great burden on the natural environment, and a substantial number of estuarine
    habitats are lost, forcing more competitive survival pressures on the species
    inhabiting those areas. Other environmental issues include toxins within the water
    supply, such as Cyanobacteria, also known as blue-green algae. Human interference
    can haphazardly provide optimum conditions for Cyanobacteria to bloom. This includes
    degradation of the surrounding water quality caused by the release of fertiliser-polluted
    runoff from farms, eutrophication of waterways and septic tank overflows. These
    environments allow Cyanobacteria to thrive and multiply above a safe level for
    humans, animals, and plants. Various studies have been conducted using deep learning
    for estimations and predictions regarding water quality, including Zhou (2020),
    who used transfer-based LSTMs, and Yu and Qu (2020), who used radial basis function
    neural networks. Zhang and Hu (2020) used difference-gated neural networks, and
    Y. Chen et al. (2020) used deep cascade forests. Jouanneau et al. (2014) found
    that monitoring Biochemical Oxygen Demand (BOD), a key water quality indicator,
    required more time and effort to detect. Ma et al. (2020) addressed this issue
    by developing a deep matrix factorization (DMF) combined with deep neural networks
    (DNN) in a New York City (United States) harbour. The proposed model showed strong
    computational power, superior to other machine learning algorithms such as gradient-boosted
    decision trees, random forest, and support vector regression. Traditional linear
    methods, such as Ridge, LR, and LASSO, were also used as a benchmark but underperformed
    compared to the machine learning methods. The history of modern-day water supply
    infrastructures can be traced back to the 1600s in Medieval London (Water History,
    2020). Newhart et al. (2019) found that water treatment plants are excellent subjects
    for neural network studies due to the large quantity of historical data that is
    usually available and easily accessible. Several studies have shown that ANNs
    outperform other machine learning algorithms for investigating the operations
    of the water treatment plant (Guo et al., 2015; Ghaedi and Vafaei, 2017; Najafzadeh
    and Zeinolabedini, 2019). These operations ranged from predictions for membrane
    fouling in the filtration systems of a water treatment system to predictions for
    real-time coagulant dosage (Dharman et al., 2012; Kim and Parnichkun, 2017; Bagheri
    et al., 2019). Alternatively, Zhang et al. (2019a, 2019b) used ANN with genetic
    algorithms to predict the performance of drinking water treatment plants under
    varying pressures and stresses to effectively manage the water treatment plant.
    Wastewater treatment is imperative to ensure the health and safety of the public
    and the surrounding environment. In 2015, the United Nations International Children''s
    Emergency Fund (UNICEF) estimated that 1.8 billion people have no other water
    source except water contaminated by faecal matter. Therefore, a significant part
    of the world''s population is highly exposed to various water-related diseases,
    including polio, cholera and typhoid. The United Nations Educational, Scientific
    and Cultural Organization (2017) reported that 80% of inadequately treated wastewater
    is released into the environment worldwide. The pollutants in this water can severely
    impact human health and the surrounding ecosystem, such as decaying organic matter,
    reducing oxygen availability, and essentially killing the aquatic inhabitants.
    Proper management of wastewater treatment is pivotal before effluent can be safely
    discharged back into the environment. Ráduly et al. (2007) used ANNs to evaluate
    the performance of wastewater treatment plants, while Shi and Xu (2018) proposed
    a model based on a stacked denoising auto-encoders deep learning network to predict
    biofilm system''s performance under various wastewater treatment plant operations.
    Zhang et al. (2018) used LSTMs to forecast flow to optimise inter-catchment wastewater
    transfer and reduce overflow, and Niu et al. (2020) used genetic algorithms integrated
    into deep belief networks to accurately predict effluent quality and improve process
    monitoring. Bhagat et al. (2020) provided a critical analysis of the development
    of artificial intelligence for modelling the removal of heavy metals within wastewater.
    The approaches investigated included ensemble models, various metaheuristics,
    different ANN models, and unsupervised methods. Recently, Sang-Soo et al. (2020)
    used CNN and LSTM combined with a deep learning approach to predict the water
    level and water quality in the Nakdong river basin. The study highlighted the
    proposed model''s performance and ability to capture the temporal variations of
    the pollutants in the Nakdong River basin. Zhu et al. (2022) successfully used
    enhanced feed-forward neural networks to predict biochemical oxygen demand (BOD)
    and ammonia nitrogen (NH3–N) water quality indicators within wastewater treatment
    plants. The highly accurate model obtained a mean error of less than 10% with
    an R2 of 90%, thus improving on the previous feed-forward neural network with
    the least square support vector machine (FFNN-LSSVM) model. However, the authors
    suggested that the data obtained from real-time monitoring should be used to inform
    future research and improve the model performance. Yang et al. (2023) demonstrated
    the sufficient accuracy of LSTM network in the task of forecasting the effluent
    quality of a constructed wetland. Their model could outperform other predictive
    ML methods including multiple linear regression, backpropagation neural network
    (BPNN), and a GA-BPNN-hybrid neural network (genetic algorithm as an optimisation
    method integrated into a BPNN model) to resolve local minima issues. They showed
    that their data exhibited significant effluent population fluctuations. A moving
    average method was applied to smooth the data, improving the accuracy of the traditional
    and hybrid neural networks. Ibrahim et al. (2023) outlined using ANNs to successfully
    predict the water quality index (WQI). The authors used principal component analysis
    (PCA) to identify the sources of pollution within the Terengganu River and reflect
    the general conditions. They applied three ANN models with differing input layers
    to predict the water quality index (WQI) of the river. The best-performing ANN
    was found to be the one that used the raw data as the input layer, as opposed
    to principal component factor scores (obtained from the previously conducted PCA).
    9. Flood management and water-retaining structures 9.1. Flood prediction Flooding
    poses a serious risk to many people worldwide, with many regions of the earth
    impacted by this natural disaster. Flooding is caused by a wide range of factors,
    including (i) heavy, prolonged rainfall events, which are more likely to rise
    in the future as a consequence of climate change, (ii) urbanisation., which substantially
    increases the surface water runoff and impedes the rate of infiltration, or (iii)
    infrastructure failure such as overtopping of dams. The impacts of flooding can
    have a substantial economic burden, particularly in the developing world. Some
    studies (e.g., Ward et al., in 2017; Peduzzi in 2017; Alfieri et al., 2018) anticipate
    the global economic impact of flooding to cost approximately $1 trillion by 2050.
    Other impacts include mass migration, socio-psychological implications, loss of
    livelihood and property and, in more severe cases, loss of life. According to
    a report presented by the United Nations (2015), 2.3 billion people were affected
    by flooding, with a significantly high death toll of 157,000 people between 1995
    and 2015. Future flooding events have been predicted to become more frequent and
    more intense than they have been in the past. Therefore, to sufficiently mitigate
    and manage the consequences of flooding, exploring innovative solutions and technologies
    that enhance the accuracy of predicting flood occurrences is imperative. Conventional
    methodologies include prediction using flood inundation models (Salvadore et al.,
    2015; Gires et al., 2015; Teng et al., 2017). However, these models can only simulate
    results based on distinct types of flooding, and complete real dynamic processes
    are omitted, resulting in the decayed accuracy of the projections. Fenech et al.
    (2019) attempt to follow a similar methodology but include dynamic processes.
    They aimed to improve this model by using a model that divides the irregular urban
    area into various grid cells. The proposed model considered the characteristics
    of the urban environment, including urban drainage systems and impermeable surfaces.
    To evaluate the model, the authors attempted to reproduce the flood in Lafayette
    Parish in Louisiana in 2016. Results showed that due to coarse resolutions, simulations
    could not reproduce the flood regions of the 2016 Lafayette Parish flooding. However,
    spatial patterns were observed after the model resolution was refined. Fang et
    al. (2019) introduced deep learning for flood prediction and proposed an integrated
    LSTM and reduced-order-model (ROM) framework to perform time series prediction
    and prescriptive analysis on flooding. Their study found that the LSTM-ROM model
    outperformed the full model and maintained its accuracy in predicting flooding.
    However, they found that when lead time is extended, the predictive accuracy decreases.
    Bui et al. (2020) introduced a novel approach using deep learning neural networks
    to aid in forecasting the likelihood of flash floods. This type of ANNs architecture
    was selected due to its ability to represent and process highly complex input
    data and to produce highly accurate projections despite the non-linearity of the
    given data (Lewis, 2016). Their study was specifically designed to address the
    challenges in regions susceptible to a high frequency of tropical storms. Therefore,
    the model was based on real-life data collected in the northwest mountainous region
    of Vietnam. The geographic information system (GIS) input dataset included the
    slope, lithology, rainfall, soil type, elevation, steam density, curvature, and
    normalised difference vegetation index (NDVI). All nine factors influenced the
    susceptibility of flash flooding within the area. The influencing factors were
    selected based on the information gain ratio method proposed by Quinlan (1986)
    and Dai and Xu (2013), thus eliminating the need for data collection on unnecessary
    factors. Hosseiny''s (2021) study utilised U-net, an advanced CNN, to predict
    river flood depth and extent. The results surmised an improved accuracy in predicting
    the maximum flood depth by 29%. Löwe et al.’s (2021) research also successfully
    implemented advanced convolutional neural networks, U-Net, to predict urban pluvial
    flood water depth. It was found that deeper networks improved the prediction until
    reaching a limit of around 28 million trainable parameters. It was noted that
    too many datasets led to overfitting and increased prediction errors. The dataset
    that led to the model performing the best included a combination of terrain aspect,
    curvature, depth of depressions, flow accumulation and imperviousness. Ahmed et
    al. (2021) found exponential Gaussian process regression (GPR) accurately predicted
    the daily water levels in a river subject to annual flash flooding in Malaysia
    based on data collected from 1990 to 2019. The GPR model outperformed several
    other machine learning models such as linear regression (LR), interaction regression
    (IR), robust regression (RR), stepwise regression (SR), support vector regression,
    boosted trees ensemble regression (BOOSTER), bagged trees ensemble regression
    (BAGER), XGBoost, and tree regression (TR). The GPR was further used to predict
    water levels based on 10-day minimum and maximum water levels and could forecast
    the extremes of the water levels. The authors of the study denote the study was
    limited by data availability. Ramayanti et al. (2022) explored the generation
    of flood susceptibility mapping, where they implemented two deep learning architectures
    to the problem: group method of data handling (GMDH) and CNN. The study was centred
    around the March 2019 flood in the Beria Area, Mozambique. The models were both
    able to produce similar mapping, where lower-sloped areas (i.e., areas along the
    river) were at a higher risk of flooding. The CNN performance indicator, RMSE
    value, was four times lower than the RMSE value derived from GMDH. This showed
    that CNN could generate an accurate flood susceptibility map more than the GMDH.
    Sorkhabi et al. (2023) employed CNN and LSTM to predict the variability in sea
    level and flooding to measure coastal city resilience. Variables included wind
    speed, sea surface temperature, precipitation, and mean sea level. The study found
    that deep learning approaches offered good predictive accuracy in the resilience
    of the city against flooding due to the variable sea level. However, future works
    suggested are to incorporate more parameters, such as updated satellite data,
    to improve the accuracy of the models. 9.2. Water retaining structures Throughout
    human history, dating back more than 5000 years, according to Biswas and Tortajada
    (2010), water-retaining structures have been constructed in many places worldwide.
    Dams provide many benefits, although their fundamental purpose is to facilitate
    water storage. These benefits include, but are not limited to, flood control,
    hydropower and human consumption. Currently, there are 50,000 of these large hydraulic
    structures (Tata and Howard, 2016) being used worldwide, of which a large majority
    are embankment dams. The British Dam Society (2019) attributes the most common
    dam failure modes to overtopping during floods. The health and structural integrity
    of dams are crucial since the consequences of failure can be severe. Therefore,
    understanding dam behaviour and failure mechanisms is vital. De Granrut et al.
    (2019) explored using ANNs to analyse the behaviour of piezometric data on arch
    dams, focusing on the rock-concrete interface to monitor uplift pressures on the
    dam. The study highlighted the limitations of traditional multi-linear regression
    (MLR) models, such as the Hydrostatic-Season-Time (HST) model, which are commonly
    used across engineering practices to monitor dams (Crépon and Lino in 1999; Penot
    et al., in 2005; Léger and Leclerc in 2007). The advantage of using HST is that
    only the reservoir level is required and performs well only under certain circumstances.
    On the other hand, various mathematical approaches have been proposed to model
    dam seepage (Ding and Han, 2017). Cui and Zhu (2009) successfully implemented
    a three-dimensional finite element method integrated with genetic algorithms;
    however, issues with convergence and basic operators in the genetic algorithms
    impacted the model''s accuracy. Zhang et al. (2020) successfully applied ANNs
    integrated with a three-dimensional finite element model to forecast the regions
    of weakness (particularly seepage) of concrete dam foundations. Unlike the HST
    model, ANNs enable the capture of the non-linearity of the piezometric data, such
    as the leakage flows, movements, and head of the reservoir. Overtopping occurs
    when the dam''s design, such as the freeboard, is not sufficient to cater to the
    actual requirements, which may change over time. Hence, a suitable design during
    the initial construction may no longer be appropriate later due to the changes
    in conditions. The likelihood of overtopping is further exacerbated during extreme
    weather conditions. For example, due to fluctuations caused by the weather, the
    head of the water rises above the designed freeboard, which leads to overtopping.
    The Environment Agency (2018) reports that the projections show increased winter
    precipitation over the United Kingdom because of climate change. Although seasonal
    variation is expected, there will be times during the year when dams will be subjected
    to store more water due to the high precipitation, increasing the risk of overtopping.
    As the years go on, the trend of a rainfall event is expected to further increase
    the risk of overtopping. Huang et al. (2003) used convolutional ANNs for coastal
    water level predictions. However, this method requires large amounts of long-term
    historical data, which is not always readily available. Fuzzy logic parameters
    integrated into ANNs provide effective estimations of water levels under uncertainty;
    however, they do not give insight into the parameters'' uncertainties alone (Alvisi
    and Franchini, 2011). Yang et al. (2019) applied recurrent ANNs to simulate reservoir
    operations using inflow, storage and climate data. In this study, the authors
    used LSTM, nonlinear autoregressive models with exogenous input (NARX) and a NARX-based
    genetic algorithm, and they found that the latter was able to outperform the other
    models. Ren et al. (2021) implemented an interpretable mixed attention mechanism
    long short-term memory (MAM-LSTM) model to predict displacement associated with
    concrete dams. The authors found success in their two-staged encoder approach.
    The highly influential factors were adaptively selected by the factor attention
    mechanism module. The temporal attention mechanism module, in contrast, was able
    to select the relevant hidden states. This model outperformed classical statistical
    modelling and other deep learning and machine learning models. Fan et al. (2022)
    utilised a transfer learning approach, MA-AttUNet. This sophisticated methodology
    applied previous knowledge from a source domain to underwater crack image segmentation.
    The knowledge transfer occurs using a multi-level adversarial transfer network.
    An attention mechanism also limited background noise during detection. Although
    the model exhibited poor real-time performance, it was able to accurately identify
    underwater dam crack images. Nonetheless, the model outperformed other methods
    at the time of the study. Zhang et al. (2023) used a unifying transformer encoder
    integrated into a CNN architecture for pixel-level dam crack detection. The proposed
    model demonstrated flexibility and was able to adapt to a variety of scenarios.
    Although the model performed well against quantitative indicators, the authors
    showed that the model''s accuracy in detection was critically impacted by weak
    or disturbing background information. They also highlighted that the model''s
    speed was slightly lower than comparative machine learning models, thereby suggesting
    that future works could include a lightweight deep learning architecture for faster
    training. 10. Conclusions, open issues, and prospects Machine learning techniques
    have successfully been used to identify patterns within nonlinear datasets. This
    study explored the various ML techniques that have been applied within the realm
    of water resources management. Various Machine Learning techniques have found
    significant applications for prediction purposes, ranging from pure forecasting
    to estimating certain parameters of optimisation models. Particularly, implementing
    artificial neural networks has found great success in recent years. Proactive
    and effective water management requires accurate prediction, and several studies
    have shown that standalone deep learning models could outperform conventional
    machine learning models, albeit the data characteristics could substantially affect
    their performance. Specifically, LSTM networks have been proven to exhibit reliable
    forecasting performance and even outperform ANN models, traditional machine learning
    models, and established physics-based hydrological models. Complexifying the architecture
    of LSTM-based models (via stacked structure) has not substantially improved forecasting
    performance. More complex ML models require more data, and thus, the complexity
    of the deep learning model should be in accordance with the data. However, the
    performance of standalone deep learning models could sometimes be limited and
    unable to effectively capture features from multivariate time series. Presently,
    more studies have considered hybrid ML techniques, such as hybrid ANNs, as they
    have shown superior computational power over traditional ANNs architectures. Hybrid
    models combining classic deep learning models such as the LSTM or GRU and decomposition
    algorithms (WT, EMD, and VMD) have shown good performance and should, therefore
    be further developed. The development of hybrid machine learning models has often
    yielded comparable performance in terms of forecasting accuracy. Hence, these
    models could still be further improved and developed, especially for long forecasting
    horizons, as the predictive accuracy has always decreased with increasing lead
    time. Hybrid deep learning models should be more developed than standalone deep
    learning models, considering their superiority in terms of prediction performance.
    Physics-hybrid models, which combine data-driven models and physical models, have
    also proven to improve prediction performance. Physical-based hybrid models are
    commonly either developed by feeding the ML model with the simulation outputs
    of physical-based models, or by forecasting its errors. When forecasting the error,
    the deep learning models can detect the location of most errors made by the physical-based
    models. When using the output of physical-based models as input for the ML model,
    its contribution should be first assessed to ascertain it would add positive impact
    on model performance. Other advanced deep learning architectures, such as transformers
    (Polosukhin et al., 2017), have yet to be tested in water resources management.
    Transformers have so far been successfully used to design neural networks in various
    application domains, including natural language processing, genomic sequences,
    time series data, and signal processing. Such models are known for their general
    structure, which includes an additional layer between the encoder and decoder,
    enabling them a high degree of parallelisation and, hence, faster training. This
    could be a valuable feature when handling complex data, which is very valuable
    given that several studies have shown that several hydrological/meteorological
    variables could contribute positively to prediction performance. Recent studies
    (e.g., Janner et al., 2021) highlighted how transformer architectures can be used
    to simplify reinforcement learning by formulating it into a single big sequence.
    Such an approach provided more capacity and power to reinforcement models in their
    attempt to address decision-making problems via the distributions of rewards and
    actions over sequences of states. Furthermore, transformer architecture offers
    some promising features for dynamics prediction as well as long-horizon dynamics
    prediction, which could tremendously improve groundwater level or river streamflow
    forecasting. In a data-scarce context, implementing Transfer Learning techniques
    could be a potential solution when developing hybridising physical-based and deep
    learning models. In the future, it is thus highly recommended to further employ
    Transfer Learning to improve ML model performance, particularly for long forecasting
    horizons, as predictive accuracy has always been shown to decrease with increasing
    lead times. The implementation of Transfer Learning could substantially improve
    the performance of hybrid deep learning models, and thus enable more informed
    decision-making process in the realm of water resource management and flood defence
    applications. In the real-world context, ML proved to be a powerful tool in water
    resources management, providing insights, predictions, and optimisation capabilities.
    The practical application of ML in the water sector has taken a wide disparity
    of forms, depending on the intended use or desired benefits. For instance, ML
    has successfully been used to develop a Smart Water Networks in Barcelona, Spain,
    where ML and IoT (Internet of Things) technologies were implemented to improve
    water efficiency and reduce losses in the distribution network (Shahra et al.,
    2019). This was done by monitoring water quality, detecting leaks, and optimising
    water distribution using sensors and data analytics. Another example was the application
    of ML for burst locations in water distribution network in Jiangsu province, east
    China (Zhou et al., 2019). They correctly located 57 of 58 synthetic bursts in
    the system. Another practical application of ML is the development and deployment
    of decision support systems (DSS) to help water resources managers and authorities
    to make informed decisions. DSS have also been greatly beneficial for water resources
    allocations in several countries, including the US (WRF-Hydro), Australia (AQUATOR),
    or the Netherlands (HydroNET). These often leverage machine learning to analyse
    complex data including – but not limited to - satellite imagery, real-time sensor
    data, and hydrological and weather data, to make predictions and assist decision-makers.
    ML algorithms have also been implemented to develop an early warning system that
    helps residents and authorities take preventive measures during heavy rainfall
    events (Dong et al., 2022). Weather patterns, river levels, and historical flood
    data are first analysed to enable the system to provide early warnings. All in
    all, Machine learning has become a valuable asset in the water sector, providing
    valuable insights, predictions, and optimisation capabilities applicable in real-world
    practice to enhance sustainable water use and management, and subsequently improving
    socio-economic development, healthy ecosystems and human existence itself. CRediT
    authorship contribution statement Ashraf A. Ahmed: Writing – review & editing,
    Supervision, Conceptualization. Sakina Sayed: Writing – review & editing. Antoifi
    Abdoulhalik: Writing – review & editing, Conceptualization. Salissou Moutari:
    Writing – review & editing. Lukumon Oyedele: Supervision. Declaration of competing
    interest The authors declare that they have no known competing financial interests
    or personal relationships that could have appeared to influence the work reported
    in this paper. Acknowledgement The authors would like to thank three anonymous
    reviewers and the editors for their valuable comments that have significantly
    improved this paper. This work was partially funded by EPSRC project reference
    2339403 to S Sayed and A Ahmed. Data availability No data was used for the research
    described in the article. References Agrawal and Srikant, 1994 R. Agrawal, R.
    Srikant Fast algorithms for mining association rules Proceedings of the 20th International
    Conference on Very Large Data Bases, VLDB, Santiago, Chile (1994), pp. 487-499
    View in ScopusGoogle Scholar Agresti, 2011 A. Agresti An Introduction to Categorical
    Data Analysis (second ed.), Wiley (2011) Google Scholar Agresti and Franklin,
    2011 A. Agresti, C.A. Franklin Statistics: the Art and Science of Learning from
    Data (third ed.), Pearson (2011) Google Scholar Ahmadi et al., 2022 A. Ahmadi,
    M. Olyaei, Z. Heydari, M. Emami, A. Zeynolabedin, A. Ghomlaghi, A. Daccache, G.E.
    Fogg, M. Sadegh Groundwater level modeling with machine learning: a systematic
    review and meta-analysis Water, 14 (6) (2022), p. 949, 10.3390/w14060949 View
    in ScopusGoogle Scholar Ahmed et al., 2021 A.N. Ahmed, A. Yafouz, A.H. Birima,
    O. Kisi, Y.F. Huang, M. Sherif, A. Sefelnasr, A. El-Shafie Water level prediction
    using various machine learning algorithms: a case study of Durian Tunggal river,
    Malaysia Eng. Appl. Comput. Fluid Mech., 16 (1) (2021), pp. 422-440, 10.1080/19942060.2021.2019128
    Google Scholar Akbarian et al., 2023 M. Akbarian, B. Saghafian, S. Golian Monthly
    streamflow forecasting by machine learning methods using dynamic weather prediction
    model outputs over Iran J. Hydrol., 620 (Part B) (2023), Article 129480, 10.1016/j.jhydrol.2023.129480
    ISSN 0022-1694 View PDFView articleView in ScopusGoogle Scholar Al-Ghobari et
    al., 2018 H.M. Al-Ghobari, M.S. El-Marazky, A.Z. Dewidar, M.A. Mattar Prediction
    of Wind Drift and Evaporation Losses from Sprinkler Irrigation Using Neural Network
    and Multiple Regression Techniques, vol. 195, Agricultural Water Management (2018),
    pp. 211-221, 10.1016/j.agwat.2017.10.005 View PDFView articleView in ScopusGoogle
    Scholar AlDahoul et al., 2022 N. AlDahoul, A.N. Ahmed, M.F. Allawi, M. Sherif,
    A. Sefelnasr, K.W. Chau, A. El-Shafie A comparison of machine learning models
    for suspended sediment load classification Eng. Appl. Comput. Fluid Mech., 16
    (1) (2022), pp. 1211-1232, 10.1080/19942060.2022.2073565 View in ScopusGoogle
    Scholar Alfieri et al., 2018 L. Alfieri, S. Cohen, J. Galantowicz, G.J.P. Schumann,
    M.A. Trigg, E. Zsoter, C. Prudhomme, A. Kruczkiewicz, E.C. de Perez, Z. Flamig,
    R. Rudari, H. Wu, R.F. Adler, R.G. Brakenridge, A. Kettner, A. Weerts, P. Matgen,
    S.A.K.M. Islam, P. Salamon A Global Network for Operational Flood Risk Reduction,
    vol. 84, Environmental Science & Policy (2018), pp. 149-158, 10.1016/j.envsci.2018.03.014
    View PDFView articleView in ScopusGoogle Scholar Alhumoud, 2008 J.M. Alhumoud
    Freshwater consumption in Kuwait: analysis and forecasting J. Water Supply Res.
    Technol. - Aqua, 57 (4) (2008), pp. 279-288, 10.2166/aqua.2008.036 View in ScopusGoogle
    Scholar Alibabaei et al., 2022 K. Alibabaei, P.D. Gaspar, E. Assunção, S. Alirezazadeh,
    T.M. Lima Irrigation optimization with a deep reinforcement learning model: case
    study on a site in Portugal Agric. Water Manag., 263 (2022), Article 107480, 10.1016/j.agwat.2022.107480
    ISSN 0378-3774 View PDFView articleView in ScopusGoogle Scholar Almheiri et al.,
    2021 Z. Almheiri, M. Meguid, T. Zayed Failure modelling of water distribution
    pipelines using meta-learning algorithms Water Res., 205 (2021), Article 117680,
    10.1016/j.watres.2021.117680 ISSN 0043-1354 View PDFView articleView in ScopusGoogle
    Scholar Alvisi and Franchini, 2011 S. Alvisi, M. Franchini Fuzzy neural networks
    for water level and discharge forecasting with uncertainty Environ. Model. Software,
    26 (4) (2011), pp. 523-537, 10.1016/j.envsoft.2010.10.016 View PDFView articleView
    in ScopusGoogle Scholar Amari, 1972 S.-I. Amari Learning patterns and pattern
    sequences by self-organizing nets of threshold elements IEEE Transact. C, 21 (1972),
    pp. 1197-1206 View in ScopusGoogle Scholar Antunes et al., 2018 A. Antunes, A.
    Andrade-Campos, A. Sardinha-Lourenço, M.S. Oliveira Short-term water demand forecasting
    using machine learning techniques J. Hydroinf., 20 (6) (2018), pp. 1343-1366,
    10.2166/hydro.2018.163 View in ScopusGoogle Scholar Arsene et al., 2012 C.T.C.
    Arsene, B. Gabrys, D. Al-Dabass Decision support system for water distribution
    systems based on neural networks and graphs theory for leakage detection Expert
    Syst. Appl., 39 (18) (2012), pp. 13214-13224, 10.1016/j.eswa.2012.05.080 View
    PDFView articleView in ScopusGoogle Scholar Avila et al., 2020 D. Avila, G.N.
    Marichal, I. Padrón, R. Quiza, Á. Hernández Forecasting of Wave Energy in Canary
    Islands Based on Artificial Intelligence, vol. 101, Applied Ocean Research (2020),
    Article 102189, 10.1016/j.apor.2020.102189 View PDFView articleView in ScopusGoogle
    Scholar Azizpour et al., 2021 A. Azizpour, M.A. Izadbakhsh, S. Shabanlou, F. Yosefvand,
    A. Rajabi Estimation of water level fluctuations in groundwater through a hybrid
    learning machine Groundwater Sustain. Develop., 15 (2021), Article 100687, 10.1016/j.gsd.2021.100687
    ISSN 2352-801X View PDFView articleView in ScopusGoogle Scholar Bagheri et al.,
    2019 M. Bagheri, A. Akbari, S.A. Mirbagheri Advanced Control of Membrane Fouling
    in Filtration Systems Using Artificial Intelligence and Machine Learning Techniques:
    A Critical Review, vol. 123, Process Safety and Environmental Protection (2019),
    pp. 229-252, 10.1016/j.psep.2019.01.013 View PDFView articleView in ScopusGoogle
    Scholar Bai and Tahmasebi, 2023 T. Bai, P. Tahmasebi Graph neural network for
    groundwater level forecasting J. Hydrol., 616 (2023), Article 128792, 10.1016/j.jhydrol.2022.128792
    ISSN 0022-1694 View PDFView articleView in ScopusGoogle Scholar Baille et al.,
    1994 M. Baille, A. Baille, J.C. Laury A simplified model for predicting evapotranspiration
    rate of nine ornamental species vs. climate factors and leaf area Scientia Horiculturae,
    59 (3–4) (1994), pp. 217-232, 10.1016/0304-4238(94)90015-9 View PDFView articleView
    in ScopusGoogle Scholar Banadkooki et al., 2022 F.B. Banadkooki, Y. Xiao, H. Malekinezhad,
    M.M. Hosseini Optimal allocation of regional water resources in an arid basin:
    insights from Integrated Water Resources Management AQUA – Water Infrastruct.,
    Ecosyst. Soc., 70 (8) (2022), pp. 910-925, 10.2166/aqua.2022.029 View in ScopusGoogle
    Scholar Bennett et al., 2013 C. Bennett, R.A. Stewart, C.D. Beal Ann-based residential
    water end-use demand forecasting model Expert Syst. Appl., 40 (4) (2013), pp.
    1014-1023, 10.1016/j.eswa.2012.08.012 View PDFView articleView in ScopusGoogle
    Scholar Bhagat et al., 2020 S.K. Bhagat, T.M. Tung, Z.M. Yaseen Development of
    artificial intelligence for modeling wastewater heavy metal removal: state of
    the art, application assessment and possible future research J. Clean. Prod.,
    250 (2020), Article 119473, 10.1016/j.jclepro.2019.119473 View PDFView articleView
    in ScopusGoogle Scholar Bilali and Taleb, 2020 A.E. Bilali, A. Taleb Prediction
    of irrigation water quality parameters using machine learning models in a semi-arid
    environment J. Saudi Soc. Agricult. Sci. (2020), 10.1016/j.jssas.2020.08.001 Google
    Scholar Biswas and Tortajada, 2010 A.K. Biswas, C. Tortajada Development and large
    dams: a global perspective Int. J. Water Resour. Dev., 17 (1) (2010), pp. 9-21,
    10.1080/07900620120025024 View in ScopusGoogle Scholar Bortoluzzi et al., 2022
    M. Bortoluzzi, M. Furlan, J.F. Dos Reis Neto Assessing the impact of hydropower
    projects in Brazil through data envelopment analysis and machine learning Renew.
    Energy, 200 (2022), pp. 1316-1326, 10.1016/j.renene.2022.10.066 ISSN 0960-1481
    View PDFView articleView in ScopusGoogle Scholar Bovas and Johannes, 1983 A. Bovas,
    L. Johannes Statistical Methods for Forecasting Wiley & Sons, Inc (1983) Google
    Scholar Breiman, 2001 L. Breiman Random forests Mach. Learn., 45 (2001), pp. 5-32
    Google Scholar Breiman et al., 1984 L. Breiman, J.H. Friedman, R.A. Olshen, C.J.
    Stone Classification and Regression Trees Wadsworth, Inc, Belmont California (1984)
    Google Scholar British Dam Society, 2019 British Dam Society Historic dam failures
    and recent incidents Available at: https://www.engineersireland.ie/EngineersIreland/media/SiteMedia/groups/Divisions/civil/Historic-Dam-Failures-slides.pdf?ext=.pdf
    (2019), Accessed 15th Feb 2020 Google Scholar Bui et al., 2020 D.T. Bui, N. Hoang,
    F. Martínez-Álvarez, P.T. Ngo, P.V. Hoa, T.D. Pham, P. Samui, R. Costache A Novel
    Deep Learning Neural Network Approach for Predicting Flash Flood Susceptibility:
    A Case Study at a High Frequency Tropical Storm Area, vol. 701, Science of The
    Total Environment (2020), Article 134413, 10.1016/j.scitotenv.2019.134413 Google
    Scholar Cai et al., 2021 H. Cai, H. Shi, S. Liu, V. Babovic Impacts of regional
    characteristics on improving the accuracy of groundwater level prediction using
    machine learning: the case of central eastern continental United States J. Hydrol.:
    Reg. Stud., 37 (2021), Article 100930, 10.1016/j.ejrh.2021.100930 ISSN 2214-5818
    View PDFView articleView in ScopusGoogle Scholar Chapelle et al., 2006 O. Chapelle,
    B. Scholkopf, A. Zien Semi-supervised Learning The MIT Press (2006) Google Scholar
    Chen and Guestrin, 2016 T. Chen, C. Guestrin XGBoost: a scalable tree boosting
    system Proceedings of the 22nd ACM SIGKDD International Conference on Knowledge
    Discovery and Data Mining (2016), pp. 785-794 New York, NY, USA CrossRefGoogle
    Scholar Chen et al., 2020 H. Chen, A. Chen, L. Xu, H. Xie, H. Qiao, Q. Lin, K.
    Cai A deep learning CNN architecture applied in smart near-infrared analysis of
    water pollution for agricultural irrigation resources Agric. Water Manag., 240
    (2020), Article 106303, 10.1016/j.agwat.2020.106303 View PDFView articleView in
    ScopusGoogle Scholar Chen et al., 2020 K. Chen, H. Chen, C. Zhou, Y. Huang, X.
    Qi, R. Shen, F. Liu, M. Zuo, X. Zou, J. Wang, Y. Zhang, D. Chen, X. Chen, Y. Deng,
    H. Ren Comparative Analysis of Surface Water Quality Prediction Performance and
    Identification of Key Water Parameters Using Different Machine Learning Models
    Based on Big Data, vol. 171, Water Research (2020), Article 115454, 10.1016/j.watres.2019.115454
    View PDFView articleView in ScopusGoogle Scholar Chen et al., 2020 Y. Chen, L.
    Tang, Z. Kan, M. Bilal, Q. Li A novel water body extraction neural network (WBE-NN)
    for optical high-resolution multispectral imagery J. Hydrol. (2020), p. 588, 10.1016/j.jhydrol.2020.125092
    Google Scholar Chen et al., 2021 M. Chen, Y. Cui, X. Wang, H. Xie, F. Liu, T.
    Luo, S. Zheng, Y. Luo A reinforcement learning approach to irrigation decision-making
    for rice using weather forecasts Agric. Water Manag., 250 (2021), Article 106838,
    10.1016/j.agwat.2021.106838 ISSN 0378-3774 View PDFView articleView in ScopusGoogle
    Scholar Cheng et al., 2020 M. Cheng, F. Fang, T. Kinouchi, I.M. Navon, C.C. Pain
    Long lead-time daily and monthly streamflow forecasting using machine learning
    methods J. Hydrol., 590 (125376) (2020), 10.1016/j.jhydrol.2020.125376 ISSN 0022-1694
    Google Scholar Cho et al., 2014 K. Cho, B. van Merrienboer, D. Bahdanau, F. Bougares,
    H. Schwenk, Y. Bengio Learning phrase representations using RNN encoder-decoder
    for statistical machine translation Proceedings of the 2014 Conference on Empirical
    Methods in Natural Language Processing, EMNLP (2014), pp. 1724-1734 CrossRefGoogle
    Scholar Chu et al., 2023 H. Chu, J. Wu, W. Wu, J. Wei A dynamic classification-based
    long short-term memory network model for daily streamflow forecasting in different
    climate regions Ecol. Indicat., 148 (2023), Article 110092, 10.1016/j.ecolind.2023.110092
    ISSN 1470-160X View PDFView articleView in ScopusGoogle Scholar Consumer Council
    for Water, 2017 Consumer Council for Water Water leakage from UK pipes rises to
    over three billion litres a day Available at: https://eandt.theiet.org/content/articles/2017/12/water-leakage-from-uk-pipes-rises-to-over-three-billion-litres-a-day/
    (2017) 02/06/20 Google Scholar Cortes and Vapnik, 1995 C. Cortes, V. Vapnik Support-vector
    networks Mach. Learn., 20 (1995), pp. 273-297 View in ScopusGoogle Scholar Cover
    and Hart, 1967 T.M. Cover, P.E. Hart Nearest neighbor pattern classification IEEE
    Trans. Inf. Theor., 13 (1967), pp. 21-27 Google Scholar Crépon and Lino, 1999
    O. Crépon, M. Lino An Analytical Approach to Monitoring International Water Power
    (1999), pp. 52-54 View in ScopusGoogle Scholar Cui and Zhu, 2009 H.D. Cui, Y.M.
    Zhu Back analysis of seepage field of Ertan high arch dam foundation Rock Soil
    Mech., 30 (10) (2009), pp. 3194-3199 View in ScopusGoogle Scholar Dai and Xu,
    2013 J. Dai, Q. Xu Attribute selection based on information gain ratio in fuzzy
    rough set theory with application to tumor classification Appl. Soft Comput.,
    13 (1) (2013), pp. 211-221, 10.1016/j.asoc.2012.07.029 View PDFView articleView
    in ScopusGoogle Scholar Damavandi et al., 2019 H.G. Damavandi, R. Shah, D. Stampoulis,
    Y. Wei, D. Boscovic, J. Sabo Accurate prediction of streamflow using long short-term
    memory network: a case study in the Brazos River Basin in Texas International
    Journal of Environmental Science and Development, 10 (10) (2019), pp. 294-300
    CrossRefView in ScopusGoogle Scholar De Granrut et al., 2019 M. De Granrut, A.
    Simon, D. Dias Artificial Neural Networks for the Interpretation of Piezometric
    Levels at the Rock-Concrete Interface of Arch Dams, vol. 178, Engineering Structures
    (2019), pp. 616-634, 10.1016/j.engstruct.2018.10.033 View PDFView articleView
    in ScopusGoogle Scholar Dehghani et al., 2023 A. Dehghani, H.M.Z.H. Moazam, F.
    Mortazavizadeh, V. Ranjbar, M. Mirzaei, S. Mortezavi, J.L. Ng, A. Dehghani Comparative
    evaluation of LSTM, CNN, and ConvLSTM for hourly short-term streamflow forecasting
    using deep learning approaches Ecol. Inf., 75 (2023), Article 102119, 10.1016/j.ecoinf.2023.102119
    ISSN 1574-9541 View PDFView articleView in ScopusGoogle Scholar Dharman et al.,
    2012 S. Dharman, V. Chandramouli, S. Lingireddy Predicting total organic carbon
    removal efficiency and coagulation dosage using artificial neural networks Environ.
    Eng. Sci., 29 (8) (2012), 10.1089/ees.2011.0170 Google Scholar Ding and Han, 2017
    C.L. Ding, H. Han Study on network load forecasting based on Elman neural network
    to improve ARIMA model Microcomput. Appl., 33 (11) (2017), pp. 65-68 View in ScopusGoogle
    Scholar Domingos and Pazzani, 1997 P. Domingos, M. Pazzani On the optimality of
    the simple Bayesian classifer under zero-one loss Mach. Learn., 29 (1997), pp.
    103-137 View in ScopusGoogle Scholar Dong et al., 2022 S. Dong, T. Yu, H. Farahmand,
    A. Mostafavi Predictive multi-watershed flood monitoring using deep learning on
    integrated physical and social sensors data Environ. Plan. B Urban Anal. City
    Sci., 49 (7) (2022), pp. 1838-1856, 10.1177/23998083211069140 View in ScopusGoogle
    Scholar Drucker et al., 1997 H. Drucker, C.J.C. Burges, L. Kaufman, A. Smola,
    V. Vapnik Support vector regression machines M.C. Mozer, M.I. Jordan, T. Petsche
    (Eds.), Advances in Neural Information Processing Systems 9, MIT Press, Cambridge,
    MA (1997), pp. 155-161 View in ScopusGoogle Scholar Elbeltagi et al., 2020 A.
    Elbeltagi, J. Deng, K. Wang, A. Malik, S. Maroufpoor Modeling long-term dynamics
    of crop evapotranspiration using deep learning in a semi-arid environment Agric.
    Water Manag., 241 (2020), Article 106334, 10.1016/j.agwat.2020.106334 View PDFView
    articleView in ScopusGoogle Scholar Environment Agency, 2018 Environment Agency
    UKCP18 factsheet: precipitation Available at: https://www.metoffice.gov.uk/binaries/content/assets/mohippo/pdf/ukcp18/ukcp18-factsheet-precipitation.pdf
    (2018), Accessed 15th Feb 2020 Google Scholar Fan et al., 2022 X. Fan, P. Cao,
    P. Shi, X. Chen, X. Zhou, Q. Gong An underwater dam crack image segmentation method
    based on multi-level adversarial transfer learning Neurocomputing, 505 (2022),
    pp. 19-29, 10.1016/j.neucom.2022.07.036 ISSN 0925-2312 View PDFView articleView
    in ScopusGoogle Scholar Fang et al., 2019 F. Fang, R. Hu, C.C. Pain, I.M. Navon
    Rapid spatio-temporal flood prediction and uncertainty quantification using a
    deep learning method J. Hydrol., 575 (2019), pp. 911-920 CrossRefGoogle Scholar
    Fenech et al., 2019 A. Fenech, X. Wang, G. Kinsland, D. Poudel Urban flood prediction
    under heavy precipitation J. Hydrol. (2019), p. 577 Google Scholar Feng et al.,
    2018 W. Feng, H. Sui, W. Huang, C. Xu, K. An Water body extraction from very high-resolution
    remote sensing imagery using deep U-net and a superpixel-based conditional random
    field model Geosci. Rem. Sens. Lett. IEEE, 16 (4) (2018), pp. 618-622 Google Scholar
    Ferreira and da Cunha, 2020a L.B. Ferreira, F.F. da Cunha New approach to estimate
    daily reference evapotranspiration based on hourly temperature and relative humidity
    using machine learning and deep learning Agric. Water Manag., 234 (2020), Article
    106113, 10.1016/j.agwat.2020.106113 View PDFView articleView in ScopusGoogle Scholar
    Ferreira and da Cunha, 2020b L.B. Ferreira, F.F. da Cunha Multi-step ahead forecasting
    of daily reference evapotranspiration using deep learning Agric. Water Manag.,
    178 (2020), Article 105728, 10.1016/j.compag.2020.105728 View PDFView articleView
    in ScopusGoogle Scholar Food and Agriculture Organization of the United Nations,
    2017 Food and Agriculture Organization of the United Nations Water for sustainable
    food and agriculture: a report produced for the G20 presidency of Germany Available
    at: http://www.fao.org/3/a-i7959e.pdf (2017) 03/08/20 Google Scholar Frank et
    al., 2000 E. Frank, L. Trigg, G. Holmes, I.H. Witten Naive bayes for regression
    Mach. Learn., 41 (2000), pp. 5-25 View in ScopusGoogle Scholar Freund and Schapire,
    1995 Y. Freund, R.E. Schapire A Decision-Theoretic Generalization of On-Line Learning
    and Application to Boosting. Lecture Notes in Computer Science Springer berlin
    Heidelberg (1995), pp. 23-37 CrossRefView in ScopusGoogle Scholar Frey and Makhzani,
    2013 B. Frey, A. Makhzani K-Sparse Autoencoders (2013) arXiv:1312.5663 Google
    Scholar Friedman, 1989 J.H. Friedman Regularized discriminant analysis J. Am.
    Stat. Assoc., 84 (1989), pp. 165-175 View in ScopusGoogle Scholar Friedman, 2001
    J.H. Friedman Greedy function approximation: a gradient boosting machine Ann.
    Stat., 29 (2001), pp. 1189-1232 View in ScopusGoogle Scholar Garðarsson et al.,
    2022 G.Ö. Garðarsson, F. Boem, L. Toni Graph-based learning for leak detection
    and localisation in water distribution networks IFAC-PapersOnLine, 55 (6) (2022),
    pp. 661-666, 10.1016/j.ifacol.2022.07.203 ISSN 2405-8963 Google Scholar Ghaedi
    and Vafaei, 2017 A.M. Ghaedi, A. Vafaei Applications of artificial neural networks
    for adsorption removal of dyes from aqueous solution: a review Adv. Colloid Interface
    Sci., 245 (2017), pp. 20-39, 10.1016/j.cis.2017.04.015 View PDFView articleView
    in ScopusGoogle Scholar Gharehbaghi et al., 2022 A. Gharehbaghi, R. Ghasemlounia,
    F. Ahmadi, M. Albaji Groundwater level prediction with meteorologically sensitive
    Gated Recurrent Unit (GRU) neural networks J. Hydrol., 612 (Part C) (2022), Article
    128262, 10.1016/j.jhydrol.2022.128262 ISSN 0022-1694 View PDFView articleView
    in ScopusGoogle Scholar Ghojogh et al., 2021 B. Ghojogh, A. Ghodsi, F. Karray,
    M. Crowley Uniform Manifold Approximation and Projection (UMAP) and its Variants:
    Tutorial and Survey. ArXi Abs/2109 (2021), Article 02508 Google Scholar Ghosh
    et al., 2022 A. Ghosh, P.P. Adhikary, B. Bera, G.S. Bhunia Assessment of groundwater
    potential zone using MCDA and AHP techniques: case study from a tropical river
    basin of India Appl. Water Sci., 12 (2022), pp. 1-22, 10.1007/s13201-021-01548-5
    Google Scholar Giles et al., 2021 A.B. Giles, J.E. Davies, K. Ren, B. Kelaher
    A deep learning algorithm to detect and classify sun glint from high-resolution
    aerial imagery over shallow marine environments ISPRS J. Photogrammetry Remote
    Sens., 181 (2021), pp. 20-26, 10.1016/j.isprsjprs.2021.09.004 ISSN 0924-2716 View
    PDFView articleView in ScopusGoogle Scholar Gires et al., 2015 A. Gires, A. Giangola-Murzyn,
    J.B. Abbes, I. Tchiguirinskaia, D. Schertzer, S. Lovejoy Impacts of small-scale
    rainfall variability in urban areas: a case study with 1D and 1D/2D hydrological
    models in a multifractal framework Urban Water J., 12 (8) (2015), pp. 607-617
    CrossRefView in ScopusGoogle Scholar Gong et al., 1996 N. Gong, T. Denoeux, J.L.
    Bertrand-Krajewski Neural networks for solid transport modelling in sewer systems
    during storm events Water Sci. Technol., 33 (9) (1996), pp. 85-92, 10.2166/wst.1996.0183
    View PDFView articleView in ScopusGoogle Scholar Goodfellow et al., 2014 I. Goodfellow,
    J. Pouget-Abadie, M. Mirza, B. Xu, D. Warde-Farley, S. Ozair, A. Courville, Y.
    Bengio Generative adversarial nets Proceedings of the International Conference
    on Neural Information Processing Systems (NIPS 2014) (2014), pp. 2672-2680 Google
    Scholar Gorgij et al., 2023 A.D. Gorgij, A.A. Taghipour Gh Askari, M. Jami, M.
    Mirfardi Spatiotemporal forecasting of the groundwater quality for irrigation
    purposes, using deep learning method: long short-term memory (LSTM) Agric. Water
    Manag., 277 (2023), Article 108088, 10.1016/j.agwat.2022.108088 ISSN 0378-3774
    Google Scholar Granata et al., 2022 F. Granata, F. Di Nunno, G. de Marinis Stacked
    machine learning algorithms and bidirectional long short-term memory networks
    for multi-step ahead streamflow forecasting: a comparative study J. Hydrol., 613
    (Part A) (2022), Article 128431, 10.1016/j.jhydrol.2022.128431 ISSN 0022-1694
    View PDFView articleView in ScopusGoogle Scholar Guo et al., 2015 H. Guo, K. Jeong,
    J. Lim, J. Jo, Y.M. Kim, J. Park, J.H. Kim, K.H. Cho Prediction of effluent concentration
    in a wastewater treatment plant using machine learning models J. Environ. Sci.,
    32 (2015), pp. 90-101, 10.1016/j.jes.2015.01.007 View PDFView articleView in ScopusGoogle
    Scholar Hadiyan et al., 2020 P.P. Hadiyan, R. Moeini, E. Ehsanzadeh Application
    of static and dynamic artificial neural networks for forecasting inflow discharges,
    case study: Sefidroud Dam reservoir Sustain. Comput.: Informatic. Syst., 27 (2020),
    10.1016/j.suscom.2020.100401 Google Scholar Hammid et al., 2018 A.T. Hammid, M.H.
    Bin Sulaiman, A.N. Abdalla Prediction of small hydropower plant power production
    in Himreen Lake dam (HLD) using artificial neural network Alex. Eng. J., 57 (1)
    (2018), pp. 211-221, 10.1016/j.aej.2016.12.011 View PDFView articleView in ScopusGoogle
    Scholar Harappa, 2020 Harappa Lothal: sanitary drainage at the acropolis Available
    at: https://www.harappa.com/lothal/ (2020), Accessed 1st Sep 2020 Google Scholar
    Hartigan and Wong, 1979 J.A. Hartigan, M.A. Wong Algorithm AS 136: a k-means clustering
    algorithm J. Roy. Stat. Soc. C, 28 (1979), pp. 100-108 CrossRefView in ScopusGoogle
    Scholar Hastie et al., 2009 T. Hastie, R. Tibshirani, J.H. Friedman Chapter 10.
    Boosting and additive tress The Elements of Statistical Learning (second ed.),
    Springer, New York (2009), pp. 337-384 CrossRefGoogle Scholar He et al., 2022
    H. He, L. Lui, X. Zhu Optimization of extreme learning machine model with biological
    heuristic algorithms to estimate daily reference evapotranspiration in Hetao Irrigation
    District of China Eng. Appl. Comput. Fluid Mech., 16 (1) (2022), pp. 1939-1956,
    10.1080/19942060.2022.2125442 View in ScopusGoogle Scholar Herrera et al., 2010
    M. Herrera, L. Torgo, J. Izquierdo, R. Pérez-García Predictive models for forecasting
    hourly urban water demand J. Hydrol., 387 (1–2) (2010), pp. 141-150, 10.1016/j.jhydrol.2010.04.005
    View PDFView articleView in ScopusGoogle Scholar Hikouei et al., 2023 I.S. Hikouei,
    K.N. Eshleman, B.H. Saharjo, L.L.B. Graham, G. Applegate, M.A. Cochrane Using
    machine learning algorithms to predict groundwater levels in Indonesian tropical
    peatlands Sci. Total Environ., 857 (3) (2023), Article 159701, 10.1016/j.scitotenv.2022.159701
    ISSN 0048-9697 View PDFView articleView in ScopusGoogle Scholar Hinton, 2009 G.
    Hinton Deep belief networks Scholarpedia, 4 (2009), p. 5947 CrossRefGoogle Scholar
    History, 2020 Water History Water-related infrastructure in medieval London Available
    at: http://www.waterhistory.org/histories/london/ (2020) 14/09/20 Google Scholar
    Hochreiter and Schmidhuber, 1997 S. Hochreiter, J. Schmidhuber Long short-term
    memory Neural Comput., 9 (1997), pp. 1735-1780 CrossRefView in ScopusGoogle Scholar
    Hoerl and Kennard, 1970 A.E. Hoerl, W.R. Kennard Ridge Regression: biased estimation
    for nonorthogonal problems Technometrics, 12 (1970), pp. 55-67 View in ScopusGoogle
    Scholar Hopfield, 1982 J.J. Hopfield Neural networks and physical systems with
    emergent collective computational abilities Proc. Natl. Acad. Sci. USA, 79 (1982),
    pp. 2554-2558 CrossRefView in ScopusGoogle Scholar Hosseiny, 2021 H. Hosseiny
    A deep learning model for predicting river flood depth and extent Environ. Model.
    Software, 145 (2021), Article 105186, 10.1016/j.envsoft.2021.105186 ISSN 1364-8152
    View PDFView articleView in ScopusGoogle Scholar Hsu et al., 2013 N.S. Hsu, C.L.
    Huang, C.C. Wei Intelligent real-time operation of a pumping station for an urban
    drainage system J. Hydrol., 489 (2013), pp. 85-97, 10.1016/j.jhydrol.2013.02.047
    View PDFView articleView in ScopusGoogle Scholar Hu et al., 2021 X. Hu, Y. Han,
    B. Yu, Z. Geng, J. Fan Novel leakage detection and water loss management of urban
    water supply network using multiscale neural networks J. Clean. Prod., 278 (2021),
    Article 123611, 10.1016/j.jclepro.2020.123611 View PDFView articleView in ScopusGoogle
    Scholar Huang et al., 2003 W. Huang, C. Murray, N. Kraus, J. Rosati Development
    of a regional neural network for coastal water level predictions Ocean Eng., 30
    (17) (2003), pp. 2275-2295, 10.1016/S0029-8018(03)00083-0 View PDFView articleView
    in ScopusGoogle Scholar Hunt et al., 2022 K.M.R. Hunt, G.R. Matthews, F. Pappenberger,
    C. Prudhomme Using a long short-term memory (LSTM) neural network to boost river
    streamflow forecasts over the western United States, Hydrol Earth Syst. Sci.,
    26 (2022), pp. 5449-5472, 10.5194/hess-26-5449-2022 View in ScopusGoogle Scholar
    Ibrahim et al., 2023 A. Ibrahim, A. Ismail, H. Juahir, A.B. Iliyasu, B.T. Wailare,
    M. Mukhtar, H. Aminu Water quality modelling using principal component analysis
    and artificial neural network Mar. Pollut. Bull., 187 (2023), Article 114493,
    10.1016/j.marpolbul.2022.114493 ISSN 0025-326X View PDFView articleView in ScopusGoogle
    Scholar Ilhan, 2023 A. Ilhan Forecasting of volumetric flow rate of Ergene river
    using machine learning Eng. Appl. Artif. Intell., 121 (2023), Article 105983,
    10.1016/j.engappai.2023.105983 ISSN 0952-1976 View PDFView articleView in ScopusGoogle
    Scholar International Hydropower Association, 2020 International Hydropower Association
    2020 hydropower Status report Available at: https://www.hydropower.org/statusreport
    (2020) 01/09/20 Google Scholar Interreg Central Europe, 2020 Interreg Central
    Europe Water loss Available at: https://www.interreg-central.eu/Content.Node/Digital-Learning-Resources/03-Water-Loss.pdf
    (2020) 23/07/20 Google Scholar Janner et al., 2021 M. Janner, Q. Li, S. Levine
    ‘Offline reinforcement learning as one big sequence modeling problem’, advances
    in neural information processing systems Curran Associates, Inc., 34 (2021), pp.
    1273-1286 View in ScopusGoogle Scholar Jolliffe, 2002 I.T. Jolliffe Principal
    Component Analysis (second ed.), Springer (2002) Google Scholar Jouanneau et al.,
    2014 S. Jouanneau, L. Recoules, M.J. Durand, A. Boukabache, V. Picot, Y. Primault,
    A. Lakel, M. Sengelin, B. Barillon, G. Thouand Methods for assessing biochemical
    oxygen demand (BOD): a review Water Res., 49 (2014), pp. 62-82, 10.1016/j.watres.2013.10.066
    View PDFView articleView in ScopusGoogle Scholar Kaelbling et al., 1996 L.P. Kaelbling,
    M.L. Littman, A.W. Moore Reinforcement learning: a survey J. Artif. Intell. Res.,
    4 (1996), pp. 237-285 CrossRefView in ScopusGoogle Scholar Karimi et al., 2020
    B. Karimi, P. Mohammadi, H. Sanikhani, S.Q. Salih, Z.M. Yaseen Modeling wetted
    areas of moisture bulb for drip irrigation systems: an enhanced empirical model
    and artificial neural network Comput. Electron. Agric., 178 (2020), Article 105767,
    10.1016/j.compag.2020.105767 View PDFView articleView in ScopusGoogle Scholar
    Kaufman and Rousseeuw, 1990 L. Kaufman, P.J. Rousseeuw Partitioning Around Medoids
    (Program PAM). Wiley Series in Probability and Statistics John Wiley & Sons, Inc.,
    Hoboken, NJ, USA (1990), pp. 68-125 CrossRefGoogle Scholar Kavousian et al., 2013
    A. Kavousian, R. Rajagopal, M. Fischer Determinants of residential electricity
    consumption: using smart meter data to examine the effect of climate, building
    characteristics, appliance stock, and occupants'' behaviour Energy, 55 (2013),
    pp. 184-194, 10.1016/j.energy.2013.03.086 View PDFView articleView in ScopusGoogle
    Scholar Kayhomayoon et al., 2022 Z. Kayhomayoon, S. Ghordoyee-Milan, A. Jaafari,
    N. Arya-Azar, A.M. Melesse, H.K. Moghaddam How does a combination of numerical
    modeling, clustering, artificial intelligence, and evolutionary algorithms perform
    to predict regional groundwater levels? Comput. Electron. Agric., 203 (2022),
    Article 107482, 10.1016/j.compag.2022.107482 ISSN 0168-1699 View PDFView articleView
    in ScopusGoogle Scholar Kim and Parnichkun, 2017 C.M. Kim, M. Parnichkun Prediction
    of settled water turbidity and optimal coagulant dosage in drinking water treatment
    plant using a hybrid model of k-means clustering and adaptive neuro-fuzzy inference
    system Appl. Water Sci., 7 (7) (2017), pp. 3885-3902 CrossRefView in ScopusGoogle
    Scholar Kochhar et al., 2021 A. Kochhar, H. Singh, S. Sahoo, P.K. Litoria, B.
    Pateriya Prediction and forecast of pre-monsoon and post-monsoon groundwater level:
    using deep learning and statistical modelling Model. Earth Syst. Environ., 8 (2021),
    pp. 2317-2329, 10.1007/s40808-021-01235-z Google Scholar Kramer, 1991 M.A. Kramer
    Nonlinear principal component analysis using autoassociative neural networks AIChE
    J., 37 (1991), pp. 233-243 View in ScopusGoogle Scholar Le Cun et al., 1990 Y.
    Le Cun, B. Boser, J.S. Denker, D. Henderson, R.E. Howard, W. Hubbard, L.D. Jackel
    Handwritten digit recognition with a back-propagation network Proc. Advances in
    Neural Information Processing Systems (1990), pp. 396-404 View in ScopusGoogle
    Scholar Li et al., 2018 L. Li, Z. Yuan, Y. Gao Maximisation of energy absorption
    for a wave energy converter using the deep machine learning Energy, 165 (A) (2018),
    pp. 340-349, 10.1016/j.energy.2018.09.093 View PDFView articleGoogle Scholar Kratzert
    et al., 2018 F. Kratzert, D. Klotz, C. Brenner, K. Schulz, M. Herrnegger Rainfall–runoff
    modelling using long short-term memory (LSTM) networks Hydrology and Earth System
    Sciences, 22 (11) (2018), pp. 6005-6022 CrossRefView in ScopusGoogle Scholar Le
    Cun et al., 2015 Y. Le Cun, Y. Bengio, G. Hinton Deep learning Nature, 521 (2015),
    pp. 436-444 CrossRefView in ScopusGoogle Scholar Le et al., 2021 X.-H. Le, D.-H.
    Nguyen, S. Jung, M. Yeon, G. Lee Comparison of deep learning techniques for river
    streamflow forecasting IEEE Access, 9 (2021), pp. 71805-71820, 10.1109/ACCESS.2021.3077703
    View in ScopusGoogle Scholar Lee and Seung, 2001 D.D. Lee, H.S. Seung Algorithms
    for non-negative matrix factorization Advances in Neural Information Processing
    Systems 13: Proceedings of the 2000 Conference, MIT Press (2001), pp. 556-562
    View in ScopusGoogle Scholar Léger and Leclerc, 2007 P. Léger, M. Leclerc Hydrostatic,
    temperature, time-displacement model for concrete dams J. Eng. Mech., 133 (3)
    (2007), pp. 267-277 View in ScopusGoogle Scholar Lewis, 2016 N.D.C. Lewis Deep
    Learning Made Easy with R: a Gentle Introduction for Data Science CreateSpace
    Independent Publishing Platform (2016) Google Scholar Li et al., 2022 X. Li, W.
    Xu, M. Ren, Y. Jiang, G. Fu Hybrid CNN-LSTM models for river flow prediction Water
    Supply, 22 (5) (2022), pp. 4902-4919, 10.2166/ws.2022.170 Google Scholar Li et
    al., 2018 Y.L. Li, Q. Gao, D.H. Li A gray RBF model improved by genetic algorithm
    for electrical power forecasting Chinese Control and Decision Conference, CCDC
    (2018), pp. 5065-5070 CrossRefView in ScopusGoogle Scholar Li et al., 2019 S.
    Li, H. Kazemi, T.D. Rockaway Performance assessment of stormwater GI practices
    using artificial neural networks Sci. Total Environ., 651 (2) (2019), pp. 2811-2819,
    10.1016/j.scitotenv.2018.10.155 View PDFView articleView in ScopusGoogle Scholar
    Liu et al., 2022 Q. Liu, D. Gui, L. Zhang, J. Niu, H. Dai, G. Wei, B.X. Hu Simulation
    of regional groundwater levels in arid regions using interpretable machine learning
    models Sci. Total Environ., 831 (2022) (2022), Article 154902, 10.1016/j.scitotenv.2022.154902
    ISSN 0048-9697 View PDFView articleView in ScopusGoogle Scholar Loke et al., 1997
    E. Loke, E.A. Warnaars, P. Jacobsen, F. Nelen, M. do Céu Almeida Artificial neural
    networks as a tool in urban storm drainage Water Sci. Technol., 36 (8–9) (1997),
    pp. 101-109, 10.2166/wst.1997.0651 View PDFView articleView in ScopusGoogle Scholar
    Löwe et al., 2021 R. Löwe, J. Böhm, D.G. Jensen, J. Leandro, S.H. Rasmussen U-FLOOD
    – topographic deep learning for predicting urban pluvial flood water depth J.
    Hydrol., 603 (Part A) (2021), Article 126898, 10.1016/j.jhydrol.2021.126898 ISSN
    0022-1694 View PDFView articleView in ScopusGoogle Scholar Lucas et al., 2020
    P.O. Lucas, M.A. Alves, P.C.L. Silva, F.G. Guimarães Reference evapotranspiration
    time series forecasting with ensemble of convolutional neural networks Comput.
    Electron. Agric., 177 (2020), Article 105700, 10.1016/j.compag.2020.105700 Google
    Scholar Ma et al., 2020 J. Ma, Y. Ding, J.C.P. Cheng, F. Jiang, Z. Xu Soft Detection
    of 5-day BOD with Sparse Matrix in City Harbor Water Using Deep Learning Techniques,
    vol. 170, Water Research (2020), Article 115350, 10.1016/j.watres.2019.115350
    View PDFView articleView in ScopusGoogle Scholar Ma et al., 2023 X. Ma, H. Hu,
    Y. Ren A hybrid deep learning model based on feature capture of water level influencing
    factors and prediction error correction for water level prediction of cascade
    hydropower stations under multiple time scales J. Hydrol., 617 (Part C) (2023),
    Article 129044, 10.1016/j.jhydrol.2022.129044 ISSN 0022-1694 View PDFView articleView
    in ScopusGoogle Scholar MacQueen, 1967 J.B. MacQueen Some methods for classification
    and analysis of multivariate observations Proceedings of 5th Berkeley Symposium
    on Mathematical Statistics and Probability, vol. 1, University of California Press
    (1967), pp. 281-297 Google Scholar Mahammad et al., 2023 S. Mahammad, A. Islam,
    P.K. Shit, A.R.M.T. Islam, E. Alam Groundwater level dynamics in a subtropical
    fan delta region and its future prediction using machine learning tools: sustainable
    groundwater restoration Journal of Hydrology: Regional Studies, 47 (2023), p.
    101385 View PDFView articleView in ScopusGoogle Scholar Maroufpoor et al., 2019a
    S. Maroufpoor, E. Maroufpoor, O. Bozorg-Haddad, J. Shiri Soil moisture simulation
    using hybrid artificial intelligent model: hybridisation of adaptive neuro fuzzy
    inference system with grey wolf optimiser algorithm J. Hydrol. (2019), pp. 544-556,
    10.1016/j.jhydrol.2019.05.045 View PDFView articleView in ScopusGoogle Scholar
    Maroufpoor et al., 2019b S. Maroufpoor, J. Shiri, E. Maroufpoor Modeling the sprinkler
    water distribution uniformity by data-driven methods based on effective variables
    Agric. Water Manag., 215 (2019), pp. 62-73, 10.1016/j.agwat.2019.01.008 Google
    Scholar Mattar et al., 2015 M.A. Mattar, A.A. Alazba, T.K.Z. El-Abedin Forecasting
    furrow irrigation infiltration using artificial neural networks Agric. Water Manag.,
    148 (2015), pp. 63-71, 10.1016/j.agwat.2014.09.015 View PDFView articleView in
    ScopusGoogle Scholar Maugis et al., 2009 C. Maugis, G. Celeux, M.-L. Martin-Magniette
    Variable selection for clustering with Gaussian mixture models Biometrics, 65
    (2009), pp. 701-709 CrossRefView in ScopusGoogle Scholar Mehedi et al., 2022 M.A.A.
    Mehedi, M. Khosravi, M.M.S. Yazdan, H. Shabanian Exploring temporal dynamics of
    river discharge using univariate long short-term memory (LSTM) recurrent neural
    network at east branch of Delaware river Hydrology, 9 (2022), p. 202, 10.3390/hydrology9110202
    View in ScopusGoogle Scholar Mnih et al., 2015 V. Mnih, et al. Human-level control
    through deep reinforcement learning Nature, 518 (2015), pp. 529-533 CrossRefView
    in ScopusGoogle Scholar Mohapatra et al., 2021 J.B. Mohapatra, P. Jha, M.K. Jha,
    S. Biswal Efficacy of machine learning techniques in predicting groundwater fluctuations
    in agro-ecological zones of India Sci. Total Environ., 785 (2021), Article 147319,
    10.1016/j.scitotenv.2021.147319 ISSN 0048-9697 View PDFView articleView in ScopusGoogle
    Scholar Mouatadid and Adamowski, 2017 S. Mouatadid, J. Adamowski Using extreme
    learning machines for short-term urban water demand forecasting Urban Water J.,
    14 (6) (2017), pp. 630-638, 10.1080/1573062X.2016.1236133 View in ScopusGoogle
    Scholar Mouatadid et al., 2019 S. Mouatadid, J.F. Adamowski, M.K. Tiwari, J.M.
    Quilty Coupling the maximum overlap discrete wavelet transform and long short-term
    memory networks for irrigation flow forecasting Agric. Water Manag., 219 (2019),
    pp. 72-85, 10.1016/j.agwat.2019.03.045 View PDFView articleView in ScopusGoogle
    Scholar Mullapudi et al., 2020 A. Mullapudi, M.J. Lewis, C.L. Gruden, B. Kerkez
    Deep reinforcement learning for the real time control of stormwater systems Adv.
    Water Resour., 140 (2020), Article 103600, 10.1016/j.advwatres.2020.103600 View
    PDFView articleView in ScopusGoogle Scholar Najafzadeh and Zeinolabedini, 2019
    M. Najafzadeh, M. Zeinolabedini Prognostication of waste water treatment plant
    performance using efficient soft computing models: an environmental evaluation
    Measurement, 138 (2019), pp. 690-701, 10.1016/j.measurement.2019.02.014 View PDFView
    articleView in ScopusGoogle Scholar Nandi et al., 2017 I. Nandi, P.K. Srivastava,
    K. Shah Floodplain mapping through support vector machine and optical/infrared
    images from Landsat 8 OLI/TIRS sensors: case study from Varanasi Water Resour.
    Manag., 31 (4) (2017), pp. 1157-1171 CrossRefView in ScopusGoogle Scholar Nasseri
    et al., 2011 M. Nasseri, A. Moeini, M. Tabesh Forecasting monthly urban water
    demand using extended Kalman filter and genetic programming Expert Syst. Appl.,
    38 (6) (2011), pp. 7387-7395, 10.1016/j.eswa.2010.12.087 View PDFView articleView
    in ScopusGoogle Scholar National Biodiversity Network, 2019 National Biodiversity
    Network State of nature Available at: https://nbn.org.uk/wp-content/uploads/2019/09/State-of-Nature-2019-UK-full-report.pdf
    (2019), Accessed 9th Apr 2020 Google Scholar National Thailand, 2019 National
    Thailand Dams drying up, drought may drag into 2020 Available at: https://www.nationthailand.com/news/30373918
    (2019) 23/06/20 Google Scholar Newhart et al., 2019 K.B. Newhart, R.W. Holloway,
    A.S. Hering, T.Y. Cath Data-driven Performance Analyses of Wastewater Treatment
    Plants: A Review, vol. 157, Water Research (2019), pp. 498-513, 10.1016/j.watres.2019.03.030
    View PDFView articleView in ScopusGoogle Scholar Niu et al., 2020 G. Niu, X. Yi,
    C. Chen, X. Li, D. Han, B. Yan, M. Huang, G. Ying A novel effluent quality predicting
    model based on genetic-deep belief network algorithm for cleaner production in
    a full-scale paper-making wastewater treatment J. Clean. Prod., 265 (2020), Article
    121787, 10.1016/j.jclepro.2020.121787 View PDFView articleView in ScopusGoogle
    Scholar Our World in Data, 2020 Our World in Data Fossil fuels Available at: https://ourworldindata.org/fossil-fuels#licence
    (2020) 01/08/20 Google Scholar Pathak et al., 2021 D. Pathak, R. Maharjan, N.
    Maharjan, S.R. Shrestha, P. Timilsina Evaluation of parameter sensitivity for
    groundwater potential mapping in the mountainous region of Nepal Himalaya Groundw.
    Sustain. Dev., 13 (2021), pp. 2-14, 10.1016/j.gsd.2021.100562 Google Scholar Patra
    et al., 2023 S.R. Patra, H.-J. Chu, Tatas Regional groundwater sequential forecasting
    using global and local LSTM models J. Hydrol.: Reg. Stud., 47 (2023), Article
    101442, 10.1016/j.ejrh.2023.101442 ISSN 2214-5818 View PDFView articleView in
    ScopusGoogle Scholar Peduzzi, 2017 P. Peduzzi Prioritising protection? Nat. Climate
    Change, 7 (2017), pp. 625-626 CrossRefView in ScopusGoogle Scholar Pektaşa and
    Cigizoglu, 2013 A.O. Pektaşa, H.K. Cigizoglu ANN hybrid model versus ARIMA and
    ARIMAX models of runoff coefficient J. Hydrol., 500 (2013), pp. 21-36, 10.1016/j.jhydrol.2013.07.020
    Google Scholar Penot et al., 2005 I. Penot, B. Daumas, J.P. Fabre Monitoring behaviour
    Water Power Dam Construct., 57 (24) (2005), p. 27 Google Scholar Perea et al.,
    2019 R.G. Perea, E.C. Poyato, P. Montesinos, J.A.R. Díaz Optimisation of water
    demand forecasting by artificial intelligence with short data sets Biosyst. Eng.,
    177 (2019), pp. 56-66, 10.1016/j.biosystemseng.2018.03.011 Google Scholar Pesantez
    et al., 2020 J.E. Pesantez, E.Z. Berglund, N. Kaza Smart Meters Data for Modeling
    and Forecasting Water Demand at the User-Level, vol. 125, Environmental Modelling
    & Software (2020), Article 104633, 10.1016/j.envsoft.2020.104633 View PDFView
    articleView in ScopusGoogle Scholar Pham et al., 2022 Q.B. Pham, M.K. Kumar, F.
    Di Nunno, A. Elbeltagi, F. Granata, A.R.M. Towfiqul Islam, S. Talukdar, X.C. Nguyen,
    A.N. Ahmed, D.T. Anh Groundwater level prediction using machine learning algorithms
    in a drought-prone area Neural Comput. Appl., 34 (2022), pp. 10751-10773 CrossRefView
    in ScopusGoogle Scholar Poisson et al., 2017 A. Poisson, A. Fernandez, D.G. Gomez,
    R. Barillé, B. Chorro Assessment and prediction of evapotranspiration based on
    scintillometry and meteorological datasets IntechOpen (2017), 10.5772/intechopen.68538
    Google Scholar Polosukhin et al., 2017 I. Polosukhin, L. Kaiser, A.N. Gomez, L.
    Jones, J. Uszkoreit, N. Parmar, N. Shazeer, A. Vaswani Advances in Neural Information
    Processing Systems, vol. 30, Curran Associates, Inc. (2017) Google Scholar Pudjihartono
    et al., 2022 N. Pudjihartono, T. Fadason, A.W. Kempa-Liehr, J.M. O''Sullivan A
    review of feature selection methods for machine learning-based disease risk prediction
    Front. Bioinform., 2 (2022), Article 927312 View in ScopusGoogle Scholar Quinlan,
    1986 J.R. Quinlan Induction of Decision Trees, vol. 1, Machine Learning (1986),
    pp. 81-106, 10.1007/BF00116251 View in ScopusGoogle Scholar Radford et al., 2015
    A. Radford, L. Metz, S. Chintala Unsupervised Representation Learning with Deep
    Convolutional Generative Adversarial Networks (2015) arXiv preprint arXiv:1511.06434
    Google Scholar Ráduly et al., 2007 B. Ráduly, K.V. Gernaey, A.G. Capodaglio, P.S.
    Mikkelsen, M. Henze Artificial neural networks for rapid WWTP performance evaluation:
    methodology and case study Environ. Model. Software, 22 (8) (2007), pp. 1208-1216,
    10.1016/j.envsoft.2006.07.003 View PDFView articleView in ScopusGoogle Scholar
    Rahaman et al., 2019 M.M. Rahaman, B. Thakur, A. Kalra, S. Ahmad Modeling of GRACE-derived
    groundwater information in the Colorado River Basin Hydrol., 6 (1) (2019), p.
    19, 10.3390/hydrology6010019 Google Scholar Rahman et al., 2020 A.T.M.S. Rahman,
    T. Hosono, J.M. Quilty, J. Das, A. Basak Multiscale groundwater level forecasting:
    coupling new machine learning approaches with wavelet transforms Adv. Water Resour.,
    141 (2020), Article 103595, 10.1016/j.advwatres.2020.103595 ISSN 0309-1708 View
    PDFView articleView in ScopusGoogle Scholar Rajeevan and Mishra, 2020 U. Rajeevan,
    B.K. Mishra Sustainable management of the groundwater resource of Jaffna, Sri
    Lanka with the participation of households: insights from a study on household
    water consumption and management Groundw. Sustain. Dev., 10 (2020), 10.1016/j.gsd.2019.100280
    Google Scholar Ramayanti et al., 2022 S. Ramayanti, A.S. Nur, M. Syifa, M. Panahi,
    A.R. Achmad, S. Park, C.W. Lee Performance comparison of two deep learning models
    for flood susceptibility map in Beira area, Mozambique Egyptian J. Rem. Sens.
    Space Sci., 25 (Issue 4) (2022), pp. 1025-1036, 10.1016/j.ejrs.2022.11.003 ISSN
    1110-9823 View PDFView articleView in ScopusGoogle Scholar Reikard, 2009 G. Reikard
    Forecasting ocean wave energy: tests of time-series models Ocean Eng., 36 (5)
    (2009), pp. 348-356, 10.1016/j.oceaneng.2009.01.003 View PDFView articleView in
    ScopusGoogle Scholar Ren et al., 2020 T. Ren, X. Liu, J. Niu, X. Lei, Z. Zhang
    Real-time water level prediction of cascaded channels based on multilayer perception
    and recurrent neural network J. Hydrol., 585 (2020), Article 124783, 10.1016/j.jhydrol.2020.124783
    View PDFView articleView in ScopusGoogle Scholar Ren et al., 2021 Q. Ren, M. Li,
    H. Li, Y. Shen A novel deep learning prediction model for concrete dam displacements
    using interpretable mixed attention mechanism Adv. Eng. Inf., 50 (2021), Article
    101407, 10.1016/j.aei.2021.101407 ISSN 1474-0346 View PDFView articleView in ScopusGoogle
    Scholar Rentschler and Salhab, 2020 J. Rentschler, M. Salhab People in harm''s
    way: flood exposure and poverty in 189 countries Policy Research Working Paper.
    No. 9447, The World Bank, Washington DC (2020) Google Scholar Ridolfi et al.,
    2014 E. Ridolfi, F. Servili, R. Magini, F. Napolitano, F. Russo, L. Alfonso Artificial
    neural networks and entropy-based methods to determine pressure distribution in
    water distribution systems Procedia Eng., 89 (2014), pp. 648-655, 10.1016/j.proeng.2014.11.490
    View PDFView articleView in ScopusGoogle Scholar Rjelly et al., 2018 Y.A. Rjelly,
    O. Abbas, M. Sadek, I. Shahrour, F.H. Chehade Model predictive control for optimising
    the operation of urban drainage systems J. Hydrol., 566 (2018), pp. 558-565, 10.1016/j.jhydrol.2018.09.044
    Google Scholar Rohde et al., 2021 M.M. Rohde, T. Biswas, I.W. Housman, L.S. Campbell,
    K.R. Klausmeyer, J.K. Howard A machine learning approach to predict groundwater
    levels in California reveals ecosystems at risk Front. Earth Sci., 9 (2021), 10.3389/feart.2021.784499
    ISSN=2296-6463 Google Scholar Romano and Kapelan, 2014 M. Romano, Z. Kapelan Adaptive
    Water Demand Forecasting for Near Real-Time Management of Smart Water Distribution
    Systems, vol. 60, Environmental Modelling & Software (2014), pp. 265-276, 10.1016/j.envsoft.2014.06.016
    View PDFView articleView in ScopusGoogle Scholar Rummery and Niranjan, 1994 G.A.
    Rummery, M. Niranjan On-line Q-Learning Using Connectionist Systems Department
    of Engineering, University of Cambridge, Cambridge (1994) Google Scholar Rutkowski
    and Prokopiuk, 2018 T.A. Rutkowski, F. Prokopiuk Identification of the contamination
    source location in the drinking water distribution system based on the neural
    network classifier IFAC-PapersOnLine, 51 (24) (2018), pp. 15-22, 10.1016/j.ifacol.2018.09.523
    View PDFView articleView in ScopusGoogle Scholar Salakhutdinov and Hinton, 2009
    R. Salakhutdinov, G. Hinton Deep Boltzmann machines Proceedings of the Twelfth
    International Conference on Artificial Intelligence and Statistics, vol. 5, PMLR
    (2009), pp. 448-455 Google Scholar Salloom et al., 2021 T. Salloom, O. Kaynak,
    W. He A novel deep neural network architecture for real-time water demand forecasting
    J. Hydrol., 599 (2021), Article 126353, 10.1016/j.jhydrol.2021.126353 ISSN 0022-1694
    View PDFView articleView in ScopusGoogle Scholar Salloom et al., 2022 T. Salloom,
    O. Kaynak, X. Yu, W. He Proportional integral derivative booster for neural networks-based
    time-series prediction: case of water demand prediction Eng. Appl. Artif. Intell.,
    108 (2022), Article 104570, 10.1016/j.engappai.2021.104570 ISSN 0952-1976 View
    PDFView articleView in ScopusGoogle Scholar Salvadore et al., 2015 E. Salvadore,
    J. Bronders, O. Batelaan Hydrological modelling of urbanised catchments: a review
    and future directions J. Hydrol., 529 (1) (2015), pp. 62-81 View PDFView articleView
    in ScopusGoogle Scholar Sang-Soo et al., 2020 Baek Sang-Soo, Jongcheol Pyo, Jong
    Ahn Chun Prediction of water level and water quality using a CNN-LSTM combined
    deep learning approach Water, 12 (2020), p. 3399 Google Scholar Schmidhuber, 2015
    J. Schmidhuber Deep learning in neural networks: an overview Neural Network.,
    61 (2015), pp. 85-117 View PDFView articleView in ScopusGoogle Scholar Schulman
    et al., 2017 J. Schulman, F. Wolski, P. Dhariwal, A. Radford, O. Klimov Proximal
    Policy Optimization Algorithms (2017) arXiv:1707.06347 Google Scholar Shahra et
    al., 2019 E.Q. Shahra, W. Wu, M. Romano Considerations on the deployment of heterogeneous
    IoT devices for smart water networks 2019 IEEE SmartWorld, Ubiquitous Intelligence
    & Computing, Advanced & Trusted Computing, Scalable Computing & Communications,
    Cloud & Big Data Computing, Internet of People and Smart City Innovation, Leicester,
    UK (2019), pp. 791-796 CrossRefView in ScopusGoogle Scholar Shakya et al., 2022
    C.M. Shakya, R.K. Bhattacharjya, S. Dadhich Groundwater level prediction with
    machine learning for the Vidisha district, a semi-arid region of Central India
    Groundwater Sustain. Develop., 19 (2022), Article 100825, 10.1016/j.gsd.2022.100825
    ISSN 2352-801X View PDFView articleView in ScopusGoogle Scholar Sharafati et al.,
    2020 A. Sharafati, S.B.H.S. Asadollah, A. Neshat A new artificial intelligence
    strategy for predicting the groundwater level over the Rafsanjan aquifer in Iran
    J. Hydrol., 591 (2020), Article 125468, 10.1016/j.jhydrol.2020.125468 ISSN 0022-1694
    View PDFView articleGoogle Scholar Sherrington and Kirkpatrick, 1975 D. Sherrington,
    S. Kirkpatrick Solvable model of a spin-glass Phys. Rev. Lett., 35 (1975), pp.
    1792-1796 View in ScopusGoogle Scholar Shi and Xu, 2018 S. Shi, G. Xu Novel performance
    prediction model of a biofilm system treating domestic wastewater based on stacked
    denoising auto-encoders deep learning network Chem. Eng. J., 347 (2018), pp. 280-290,
    10.1016/j.cej.2018.04.087 View PDFView articleView in ScopusGoogle Scholar Sorkhabi
    et al., 2023 O.M. Sorkhabi, B. Shadmanfar, M.M. Al-Amidi Deep learning of sea-level
    variability and flood for coastal city resilience City and Environ. Interact.,
    17 (2023), Article 100098, 10.1016/j.cacint.2022.100098 ISSN 2590-2520 Google
    Scholar Steinwart and Christmann, 2008 I. Steinwart, A. Christmann Support Vector
    Machines Springer (2008) Google Scholar Su et al., 2020 Y. Su, C. Ni, W. Li, I.
    Lee, C. Lin Applying Deep Learning Algorithms to Enhance Simulations of Large-Scale
    Groundwater Flow in IoTs Applied Soft Computing (2020), p. 92, 10.1016/j.asoc.2020.106298
    Google Scholar Sun et al., 2022 J. Sun, Li Hu, D. Li, K. Sun, Z. Yang Data-driven
    models for accurate groundwater level prediction and their practical significance
    in groundwater management J. Hydrol., 608 (2022), Article 127630, 10.1016/j.jhydrol.2022.127630
    ISSN 0022-1694 View PDFView articleView in ScopusGoogle Scholar Sutton et al.,
    2000 R.S. Sutton, D. McAllester, S. Singh, Y. Mansour Policy gradient methods
    for reinforcement learning with function approximation Adv. Neural Inf. Process.
    Syst., 12 (2000), pp. 1057-1063 View in ScopusGoogle Scholar Tata and Howard,
    2016 Tata, Howard A history of dams: from ancient times to today Available at:
    https://tataandhoward.com/2016/05/a-history-of-dams-from-ancient-times-to-today/
    (2016), Accessed 1st Feb 2020 Google Scholar Teimoori et al., 2023 S. Teimoori,
    M.H. Olya, C.J. Miller Groundwater level monitoring network design with machine
    learning methods J. Hydrol., 625 (Part B) (2023), Article 130145, 10.1016/j.jhydrol.2023.130145
    ISSN 0022-1694 View PDFView articleView in ScopusGoogle Scholar Tenenbaum et al.,
    2000 J.B. Tenenbaum, V.d. Silva, J.C. Langford A global geometric framework for
    nonlinear dimensionality reduction Science, 290 (2000), pp. 2319-2323 View in
    ScopusGoogle Scholar Teng et al., 2017 J. Teng, A.J. Jakeman, J. Vaze, B.F.W.
    Croke, D. Dutta, S. Kim Flood Inundation Modelling: a Review of Methods, Recent
    Advances and Uncertainty Analysis, vol. 90, Environmental Modelling & Software
    (2017), pp. 201-216 View PDFView articleView in ScopusGoogle Scholar Tibshirani,
    1996 R. Tibshirani Regression shrinkage and selection via the Lasso J. Roy. Stat.
    Soc. B, 58 (1996), pp. 267-288 CrossRefGoogle Scholar Tran et al., 2007 D.H. Tran,
    A.W.N. Ng, B.J.C. Perera Neural networks deterioration models for serviceability
    condition of buried stormwater pipes Eng. Appl. Artif. Intell., 20 (8) (2007),
    pp. 1144-1151 View PDFView articleView in ScopusGoogle Scholar Triguero et al.,
    2015 I. Triguero, S. García, F. Herrera Self-labeled techniques for semi-supervised
    learning: taxonomy, software and empirical study Knowl. Inf. Syst., 42 (2015),
    pp. 245-284 CrossRefGoogle Scholar Truong et al., 2021 V.H. Truong, Q.V. Ly, V.C.
    Le, T.B. Vu, T.T.T. Le, T.T. Tran, P. Goethals Machine learning-based method for
    forecasting water levels in irrigation and drainage systems Environ. Technol.
    Innovat., 23 (2021), Article 101762, 10.1016/j.eti.2021.101762 ISSN 2352-1864
    View PDFView articleView in ScopusGoogle Scholar United Nations, 2015 United Nations
    The human cost of weather-related disasters Available at: https://www.unisdr.org/2015/docs/climatechange/COP21_WeatherDisastersReport_2015_FINAL.pdf
    (2015) 06/09/20 Google Scholar United Nations Educational, 2017 United Nations
    Educational The united Nations world water development report Available at: Scientific
    and Cultural Organization (2017) http://www.unesco.org/new/en/natural-sciences/environment/water/wwap/wwdr/
    14/09/20 Google Scholar United Nations Environment Programme, 2016 United Nations
    Environment Programme A snapshot of the world''s water quality: towards a global
    assessment Available at: https://uneplive.unep.org/media/docs/assessments/unep_wwqa_report_web.pdf
    (2016) 12/09/20 Google Scholar United Nations Water, 2020 United Nations Water
    Water scarcity Available at: https://www.unwater.org/water-facts/scarcity/ (2020)
    01/09/20 Google Scholar USGS, 2019 USGS How much water is there on earth? https://www.usgs.gov/special-topics/water-science-school/science/how-much-water-there-earth
    (2019), Accessed 1st Jan 2024 Google Scholar Van Engelen and Hoos, 2020 J.E. Van
    Engelen, H.H. Hoos A survey on semi-supervised learning Mach. Learn., 109 (2020),
    pp. 373-440 CrossRefView in ScopusGoogle Scholar Van Thieu et al., 2023 N. Van
    Thieu, S.D. Barma, T.V. Lam, O. Kisi, A. Mahesha Groundwater level modeling using
    augmented artificial ecosystem optimization J. Hydrol., 617 (Part C) (2023), Article
    129034, 10.1016/j.jhydrol.2022.129034 ISSN 0022-1694 View PDFView articleView
    in ScopusGoogle Scholar Vincent and Larochelle, 2010 P. Vincent, H. Larochelle
    Stacked denoising autoencoders: learning useful representations in a deep network
    with a local denoising criterion J. Mach. Learn. Res., 11 (2010), pp. 3371-3408
    View in ScopusGoogle Scholar Vrachimis et al., 2020 S.G. Vrachimis, D.G. Eliades,
    R. Taormina, A. Ostfeld, Z. Kapelan, S. Liu, M. Kyriakou, P. Pavlou, M. Qiu, M.M.
    Polycarpou BattLeDIM: Battle of the leakage detection and isolation methods Proc.,
    2nd Int. CCWI/WDSA Joint Conf (pp. 1–6) (2020) Google Scholar Wang et al., 2020
    Y. Wang, J. Liu, Y. Han Production capacity prediction of hydropower industries
    for energy optimisation: evidence based on novel extreme learning machine integrating
    Monte Carlo J. Clean. Prod., 272 (2020), Article 122824, 10.1016/j.jclepro.2020.122824
    View PDFView articleView in ScopusGoogle Scholar Wang et al., 2022 G.C. Wang,
    Q. Zhang, S.S. Band, M. Dehghani, K.W. Chau, Q.T. Tho, S. Zhu, S. Samadianfard,
    A. Mosavi Monthly and seasonal hydrological drought forecasting using multiple
    extreme learning machine models Eng. Appl. Comput. Fluid Mech., 16 (1) (2022),
    pp. 1364-1381, 10.1080/19942060.2022.2089732 View in ScopusGoogle Scholar Wang
    et al., 2023 J. Wang, Xu Wang, S.T. Khu A Decomposition-based Multi-model and
    Multi-parameter ensemble forecast framework for monthly streamflow forecasting
    J. Hydrol., 618 (2023), Article 129083, 10.1016/j.jhydrol.2023.129083 ISSN 0022-1694
    View PDFView articleView in ScopusGoogle Scholar Ward et al., 2017 P.J. Ward,
    B. Jongman, J.C.J.H. Aerts, P.D. Bates, W.J.W. Botzen, A.D. Loaiza, S. Hallegate,
    J.M. Kind, J. Kwadijk, P. Scussolini, H.C. Winsemius A global framework for future
    costs and benefits of river-flood protection in urban areas Nat. Climate Change,
    7 (2017), pp. 642-646 CrossRefView in ScopusGoogle Scholar Watkins, 1992 C. Watkins
    Q-learning Mach. Learn., 8 (1992), pp. 279-292 Google Scholar Wegayehu and Muluneh,
    2022 E.B. Wegayehu, F.B. Muluneh Short-term daily univariate streamflow forecasting
    using deep learning models Advances in Meteorology, 2022 (2022) Google Scholar
    Wei et al., 2023 A. Wei, X. Li, L. Yan, Z. Wang, X. Yu Machine learning models
    combined with wavelet transform and phase space reconstruction for groundwater
    level forecasting Comput. Geosci., 177 (2023), Article 105386, 10.1016/j.cageo.2023.105386
    ISSN 0098-3004 View PDFView articleView in ScopusGoogle Scholar Welling and Kingma,
    2019 M. Welling, D.P. Kingma An introduction to variational autoencoders Foundat.
    Trend. Mach. Learn., 12 (2019), pp. 307-392 Google Scholar Wrobel, 1984 A. Wrobel
    On Markovian decision models with a finite skeleton Math. Methods Oper. Res.,
    28 (1984), pp. 17-27 View in ScopusGoogle Scholar Wu et al., 2023 Z. Wu, C. Lu,
    Q. Sun, W. Lu, X. He, T. Qin, L. Yan, C. Wu Predicting groundwater level based
    on machine learning: a case study of the hebei plain Water, 15 (4) (2023), p.
    823, 10.3390/w15040823 View in ScopusGoogle Scholar Wunsch et al., 2022 A. Wunsch,
    T. Liesch, S. Broda Deep learning shows declining groundwater levels in Germany
    until 2100 due to climate change Nat. Commun., 13 (2022), p. 1221, 10.1038/s41467-022-28770-2
    View in ScopusGoogle Scholar Xu et al., 2020a W. Xu, Y. Jiang, X. Zhang, Y. Li,
    R. Zhang, G. Fu Using long short-term memory networks for river flow prediction
    Nord. Hydrol, 51 (6) (2020), pp. 1358-1376, 10.2166/nh.2020.026 View in ScopusGoogle
    Scholar Xu et al., 2020b C. Xu, Z. Xu, Z. Yang Reservoir operation optimisation
    for balancing hydropower generation and biodiversity conservation in a downstream
    wetland J. Clean. Prod., 245 (2020), Article 118885, 10.1016/j.jclepro.2019.118885
    View PDFView articleView in ScopusGoogle Scholar Yadav et al., 2020 B. Yadav,
    P.K. Gupta, N. Patidar, S.K. Himanshu Ensemble modelling framework for groundwater
    level prediction in urban areas of India Sci. Total Environ., 712 (2020), Article
    135539, 10.1016/j.scitotenv.2019.135539 ISSN 0048-9697 View PDFView articleView
    in ScopusGoogle Scholar Yan et al., 2019 J. Yan, S. Jia, A. Lv, W. Zhu Water resources
    assessment of China''s transboundary river basins using a machine learning approach
    Water Resour. Res., 55 (2019), pp. 632-655, 10.1029/2018WR023044 View in ScopusGoogle
    Scholar Yang et al., 2019 S. Yang, D. Yang, J. Chen, B. Zhao Real-time reservoir
    operation using recurrent neural networks and inflow forecast from a distributed
    hydrological model J. Hydrol., 579 (2019), Article 124229, 10.1016/j.jhydrol.2019.124229
    View PDFView articleView in ScopusGoogle Scholar Yang et al., 2023 B. Yang, Z.
    Xiao, Q. Meng, Y. Yuan, W. Wang, H. Wang, Y. Wang, X. Feng Deep learning-based
    prediction of effluent quality of a constructed wetland Environ. Sci. Ecotech.,
    13 (2023), Article 100207, 10.1016/j.ese.2022.100207 ISSN 2666-4984 View PDFView
    articleView in ScopusGoogle Scholar Yin et al., 2021 W. Yin, Z. Fan, N. Tangdamrongsub,
    L. Hu, M. Zhang Comparison of physical and data-driven models to forecast groundwater
    level changes with the inclusion of GRACE – a case study over the state of Victoria,
    Australia J. Hydrol., 602 (2021), Article 126735, 10.1016/j.jhydrol.2021.126735
    ISSN 0022-1694 View PDFView articleView in ScopusGoogle Scholar Yu and Qu, 2020
    Y. Yu, Y. Qu Multi-component spectral detection based on neural network in water
    quality inspection Optik, 217 (2020), Article 164915, 10.1016/j.ijleo.2020.164915
    View PDFView articleView in ScopusGoogle Scholar Yu et al., 2020 C. Yu, Z. Li,
    Z. Yang, X. Chen, M. Su A feedforward neural network based on normalisation and
    error correction for predicting water resources carrying capacity of a city Ecol.
    Indicat., 118 (2020), 10.1016/j.ecolind.2020.106724 Google Scholar Yu et al.,
    2023 T. Yu, X. Chen, W. Yan, Z. Xu, M. Ye Leak detection in water distribution
    systems by classifying vibration signals Mech. Syst. Signal Process., 185 (2023),
    Article 109810, 10.1016/j.ymssp.2022.109810 ISSN 0888-3270 View PDFView articleView
    in ScopusGoogle Scholar Zhang, 2003 G.P. Zhang Time series forecasting using a
    hybrid ARIMA and neural network model Neurocomputing, 50 (2003), pp. 159-175 View
    PDFView articleView in ScopusGoogle Scholar Zhang and Hu, 2020 Y.J. Zhang, L.S.
    Hu Real time estimation of radionuclides in the receiving water of an inland nuclear
    power plant based on difference gated neural network Radiat. Phys. Chem., 176
    (2020), Article 109019, 10.1016/j.radphyschem.2020.109019 View PDFView articleView
    in ScopusGoogle Scholar Zhang et al., 2017 Z.H. Zhang, J.X. Zhao, X. Lu, X.Z.
    Niu Application of BP neural network based on genetic algorithm in power load
    forecasting Comput. Eng., 2 (10) (2017), pp. 277-282 Google Scholar Zhang et al.,
    2018 D. Zhang, E.S. Hølland, G. Lindholm, H. Ratnaweera Hydraulic modeling and
    deep learning-based flow forecasting for optimising inter catchment wastewater
    transfer J. Hydrol., 567 (2018), pp. 792-802, 10.1016/j.jhydrol.2017.11.029 View
    PDFView articleView in ScopusGoogle Scholar Zhang et al., 2019 J. Zhang, X. Zhang,
    J. Niu, B.X. Hu, M.R. Soltanian, H. Qui, L. Yang Prediction of groundwater level
    in seashore reclaimed land using wavelet and artificial neural network-based hybrid
    model J. Hydrol. (2019), 10.1016/j.jhydrol.2019.123948 Google Scholar Zhang et
    al., 2019 Y. Zhang, X. Gao, K. Smith, G. Inial, S. Liu, L.B. Conil, B. Pan Integrating
    Water Quality and Operation into Prediction of Water Production in Drinking Water
    Treatment Plants by Genetic Algorithm Enhanced Artificial Neural Network, vol.
    164, Water Research (2019), Article 114888, 10.1016/j.watres.2019.114888 View
    PDFView articleView in ScopusGoogle Scholar Zhang et al., 2020 H. Zhang, Z. Song,
    P. Peng, Y. Sun, Z. Ding, X. Zhang Research on seepage field of concrete dam foundation
    based on artificial neural network Alex. Eng. J. (2020), 10.1016/j.aej.2020.03.041
    Google Scholar Zhang et al., 2022 M. Zhang, Z. Xu, Y. Wang, S. Zeng, X. Dong Evaluation
    of uncertain signals'' impact on deep reinforcement learning-based real-time control
    strategy of urban drainage systems J. Environ. Manag., 324 (2022), Article 116448,
    10.1016/j.jenvman.2022.116448 ISSN 0301-4797 View PDFView articleView in ScopusGoogle
    Scholar Zhang et al., 2023 E. Zhang, L. Shao, Y. Wang Unifying transformer and
    convolution for dam crack detection Autom. ConStruct., 147 (2023), Article 104712,
    10.1016/j.autcon.2022.104712 ISSN 0926-5805 View PDFView articleView in ScopusGoogle
    Scholar Zhou, 2020 Y. Zhou Real-time probabilistic forecasting of river water
    quality under data missing situation: deep learning plus post-processing techniques
    J. Hydrol., 589 (2020), Article 125164, 10.1016/j.jhydrol.2020.125164 View PDFView
    articleView in ScopusGoogle Scholar Zhou et al., 2000 S.L. Zhou, T.A. McMahon,
    A. Walton, J. Lewis Forecasting daily urban water demand: a case study of Melbourne
    J. Hydrol., 236 (3–4) (2000), pp. 153-164, 10.1016/S0022-1694(00)00287-0 View
    PDFView articleView in ScopusGoogle Scholar Zhou et al., 2019 X. Zhou, Z. Tang,
    W. Xu, F. Meng, X. Chu, K. Xin, G. Fu Deep Learning Identifies Accurate Burst
    Locations in Water Distribution Networks, vol. 166, Water Research (2019), Article
    115058, 10.1016/j.watres.2019.115058 View PDFView articleView in ScopusGoogle
    Scholar Zhu and Ghahramani, 2002 X. Zhu, Z. Ghahramani Learning from Labeled and
    Unlabeled Data with Label Propagation, Technical Report CMU-CALD-02-107, School
    of Computer Science Carnegie Mellon University (2002) Google Scholar Zhu and Goldberg,
    2009 X. Zhu, A.B. Goldberg Introduction to Semi-supervised Learning. Synthesis
    Lectures on Artificial Intelligence and Machine Learning (2009) Google Scholar
    Zhu et al., 2022 J. Zhu, Z. Jiang, L. Feng Improved neural network with least
    square support vector machine for wastewater treatment process Chemosphere, 308
    (1) (2022), Article 136116, 10.1016/j.chemosphere.2022.136116 ISSN 0045-6535 View
    PDFView articleView in ScopusGoogle Scholar Cited by (0) © 2024 The Authors. Published
    by Elsevier Ltd. Recommended articles Reactive fluid flow (RFF), its hydrodynamic
    modeling and process controlling in cleaner production of copper sulfides bioleaching
    Journal of Cleaner Production, Volume 441, 2024, Article 140792 Leiming Wang,
    …, Lei Zhang View PDF Dynamic pricing and emission reduction efforts in a dual-channel
    green supply chain under bidirectional free riding Journal of Cleaner Production,
    Volume 438, 2024, Article 140713 Lizhao Yan, …, Zhao Wu View PDF Maximizing thermal
    efficiency of a cavity using hybrid nanofluid Journal of Cleaner Production, Volume
    441, 2024, Article 141089 Hanifa Hanif, …, Zainab Toyin Jagun View PDF Show 3
    more articles Article Metrics Captures Readers: 34 View details About ScienceDirect
    Remote access Shopping cart Advertise Contact and support Terms and conditions
    Privacy policy Cookies are used by this site. Cookie settings | Your Privacy Choices
    All content on this site: Copyright © 2024 Elsevier B.V., its licensors, and contributors.
    All rights are reserved, including those for text and data mining, AI training,
    and similar technologies. For all open access content, the Creative Commons licensing
    terms apply.'
  inline_citation: '>'
  journal: Journal of cleaner production
  limitations: '>'
  pdf_link: null
  publication_year: 2024
  relevance_score1: 0
  relevance_score2: 0
  title: 'Applications of machine learning to water resources management: A review
    of present status and future opportunities'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.12785/ijcds/130109
  analysis: '>'
  authors:
  - Sadia Showkat
  - Shaima Qureshi
  citation_count: 1
  full_citation: '>'
  full_text: '>

    International Journal of Computing and Digital Systems

    ISSN (2210-142X)

    Int. J. Com. Dig. Sys. 13, No.1 (Jan-2023)

    http://dx.doi.org/10.12785/ijcds/130109

    Securing the Internet of Things Through Blockchain Approach:

    Security Architectures, Consensus Algorithms, Enabling Technologies, Open Issues,

    and Research Directions

    Sadia Showkat1 and Shaima Qureshi2

    1Department of Computer science and Engineering, National Institute of Technology
    Srinagar, J&K

    2Department of Computer science and Engineering, National Institute of Technology
    Srinagar, J&K

    Received 25 Oct. 2021, Revised 5 Jan. 2023, Accepted 12 Jan. 2023, Published 31
    Jan. 2023

    Abstract: The rapid expansion of the Internet of Things (IoT), particularly in
    critical infrastructures, necessitates strict security and

    privacy standards. Owing to data proliferation, Cyber-physical systems (CPS) rely
    on computing platforms for the provision of services

    and resources. The futuristic “Beyond 5G” (B5G) enabled critical IoT infrastructures
    cannot run on centralized systems due to their

    security vulnerabilities that compromise the basic Confidentiality-Integrity-Availability
    (CIA) triad. Blockchain technology (BCT) is

    emerging as a key enabler in addressing IoT’s security challenges, and it is compliant
    with the Fog-IoT architecture. The Ethereum

    platform has ushered an unprecedented development in BCT by facilitating application
    development. Blockchain (BC) connects the

    users’ chain identity to the transactions associated with their tokenized digital
    assets and confers the ability to audit the system. The

    history of canonical transactions is recorded in an immutable fashion facilitating
    data tracking and deterrence of data repudiation. A

    Consensus mechanism (CM) governs the state transitions and the node behavior in
    building trust relationships between various entities

    in the absence of a central authority. Through Smart Contracts(SCs), distributed
    and trustworthy access control can be achieved for

    IoT systems besides enhancing automation. We argue that BCT adoption is inevitable
    in securing futuristic B5G enabled IoT critical

    infrastructures for ensuring flexible and fine-grained access control, authentication,
    communication, and data security. Various challenges

    are associated with their adoption, such as the rising cost of Ethereum and constraints
    in the IoT environment. To facilitate BC solutions

    for IoT security, the functionality of BCT must be complemented with other technologies
    such as Machine Learning (ML), Edge

    Computing (EC), and InterPlanetary Filesystem(IPFS).

    Keywords: Blockchain, IoT, Edge Computing, Consensus, Security, Privacy, Smart
    contracts, IPFS B5G, Access control.

    1. INTRODUCTION

    The industry is rapidly evolving into a holistic network

    of intelligent systems capable of making data-driven deci-

    sions. Many technologies have aided this transition, with

    IoT being at the core. IoT connects devices and couples

    them to the internet forming a CPS. IoT is at the center

    of intelligent applications in and outside the industry. IoT

    offers the remote control and monitoring of equipment

    and catalyzes data-driven automated decision and action-

    taking capabilities, resulting in increased system efficiency

    and throughput while lowering costs. IoT is causing a

    major upward shift in the revenue pool, and its growth

    can be assessed by the increase in the number of practical

    applications across regions.

    IoT enables a pervasive interconnection of virtual and

    physical objects for accelerated data sharing and collection.

    Sensing capabilities are embedded in intelligent devices

    such as smartphones, laptops, and fitness monitors, while

    intelligence is built into traditional sensors for extensive

    data monitoring. As per the Ericson report, by 2050, there

    will be 24 billion interconnected IoT devices [1]. The data

    streams are generated continuously with volumes reaching

    exabytes; thus, the data is referred to as IoT Big data. At

    present, Cloud Computing and Fog Computing are the most

    popular provisions to handle the high-end computing and

    storage demands of IoT big data [2].

    IoT aims to create intelligent, unified, fully distributed,

    secure, and cost-efficient systems. Reliable storage, data

    awareness, ease of access, scalability, and channel security

    are important parameters while adopting a wireless system.

    IoT systems come with inbuilt security measures that can

    be bypassed due to their intrinsic traits.Various factors are

    responsible for hindering the pace of IoT security. These

    include:

    1)

    Any end- end encryption technique employed to

    provide data security in networks is challenging to

    be embedded in IoT networks due to the constrained

    E-mail address: sadia 01phd18@nitsri.net, shaima@nitsri.net.

    98

    Sadia Showkat, et al.:Securing the Internet of things through Blockchain approach.

    nature of the devices.

    2)

    IoT devices are lodged in uncontrollable, heteroge-

    neous, complex, open, untrustworthy environments,

    which magnify the attack space.

    3)

    Lack of standard architecture, a common address-

    ing scheme limits the integration and replication of

    security measures from other IoT systems.

    4)

    IoT is an ever-growing field, and the security features

    of constrained devices are not evolving at the same

    pace as the system itself.

    5)

    The adoption of computing platforms forces frequent

    transfer of data. Implementing robust cryptographic

    algorithms is expensive and increases the overall cost

    of the system.

    6)

    IoT systems communicate across different domains

    and require fine-grained Access control(AC) mecha-

    nisms for collaboration.

    Cloud and Fog platforms are vulnerable to cyber-attacks and

    fail to meet the demand for flexible cross-domain interop-

    erability across multiple systems with distributed resources.

    The Data Management (DM) systems are centralized and

    prone to hackers who can manipulate the database, thereby

    compromising data integrity. The overreliance on a central-

    ized database causes the “Single point failure” problem. The

    monetary transactions require the intermediation of a third

    party, which incurs verification costs and increases privacy

    concerns. These centralized architectures are prone to secu-

    rity threats that disorder the regular operation of systems.

    These include Denial of Services(DoS), Distributed Denial

    of Services(DDoS), Ransomware attacks, Eavesdropping,

    Side-channel attacks, Spoofing, Routing attacks, Man in the

    middle attack, SQL injection, and Phishing [3].

    With the advancement in B5G technology, IoT is set to

    transform the existing digital landscape, but its inadequate

    security features have limited its adoption. B5G mobile

    communication technologies aim to provide high-speed

    transmission network support and enormous access points

    to maximize IoT capabilities [4]. The security measures of

    such applications need enhanced security and efficient DM.

    BCT is emerging as a promising paradigm for bringing

    disruptions in IoT security and is highly compliant with

    the Fog-like system of architecture [5].

    BCT has created a paradigm shift by enabling trusted and

    anonymous transactions. BCT establishes trust between the

    communicating nodes, and the decision-making is based

    on CMs suitable in distributed environments. Owing to its

    unique propensities– Immutability, Transparency, Traceabil-

    ity, Resilience, and Encryption, the adoption of BCT is

    suitable for the realization of futuristic peer-peer, trustless

    applications. BCT supports tokenized assets, and the nodes

    in the network interact automatically without the interven-

    tion of any central authority. This increases the privacy of

    the network and eliminates the management cost.

    BCT is creating major reforms in IoT management and se-

    curity. The IoT transactions are encrypted and secured using

    digital signatures and cryptographic keys. BCT eliminates

    the security threats with a distributed CM and provides a

    Figure 1. Centralized Vs. BC-based IoT

    true system state upon which every legitimate user agrees.

    With the integration of BCT, IoT applications are becoming

    decentralized, transactions are trusted and anonymous, and

    cross-domain interaction is enhanced. The system security

    is increased through ownership records, encrypted trans-

    actions, distributed storage, consensus, and authentication

    mechanisms. Figure 1 illustrates the difference between a

    centralized and BC-based IoT system.

    There are multiple challenges concerning the BC integrated

    IoT systems, such as network complexity, limited band-

    width, computation capabilities, data diversity, scalability,

    and throughput. Conventional CMs consume huge amounts

    of resources to slow down the access rate of new blocks and

    protect the BC network from attacks, which is too expensive

    for resource-limited IoT devices. Further, the capacity of a

    new block is limited, and transactions per second (TPS)

    are usually limited to 20 to 30 TPS in Ethereum, rendering

    the system unable to respond to the influx of transactions

    [6]. With tradeoffs between adversity tolerance, latency,

    and energy consumption, research on IoT suitable CMs is

    growing.

    BC itself suffers from security and privacy issues. Imple-

    menting longer chains is challenging, and the SCs can prove

    to be a double-edged sword. The cost of Ethereum is rising

    continuously, making the storage and transactions expen-

    sive for large-scale adoption. The underlying technologies

    powering BCT consume high power and are not suitable for

    IoT. BCT can revolutionize IoT, but enabling technologies

    such as IPFS, ML and EC must be integrated with BC to

    outweigh its current limitations.

    IPFS is a distributed file system that can resolve BC

    –IoT big data problems. Instead of storing the data on

    the chain, IPFS hashes identifying the files are kept in

    the BC. The hash on the BC assures that the file has not

    been tampered with. File hashes can be used to link files

    to their owners and access rights.Solving complex puzzles

    such as Proof of work consumes a significant amount of

    CPU time and energy, making it unsuitable for resource-

    constrained IoT nodes. EC enables edge devices to carry out

    data resource incentive transactions and can be leveraged for

    performing consensus. Information hidden in IoT big data

    can be harnessed by feeding them to ML models, producing

    more generalized results on big data.The integrity of the

    data can be maintained by feeding trustworthy data to ML

    Int. J. Com. Dig. Sys. 13, No.1, 97-129 (Jan-2023)

    99

    through BC. Conversely, more security can be imparted into

    BC through ML.

    BCT is regarded as a promising technology for IoT because

    it provides significant solutions for decentralized networks

    that address trust and security concerns. Although BC

    outperforms centralized solutions in network security, BC-

    IoT integration is still in its early stages of adoption. Many

    challenges such as cost, compatibility, and privacy issues

    hinder the widespread adoption of BC security solutions

    in IoT. To realize the full potential of BC-based IoT,

    exhaustive research is necessary for exploring the enabling

    technologies for BC in lightweight( LW) environments.

    A. Objective and Contribution

    This paper aims to provide a comprehensive overview

    of the potential and challenges of BC-based IoT security

    solutions and enabling technologies, open issues, possible

    solutions, and future research directions. There are four

    focal research points of our study, and are listed below-

    1)

    Firstly, to highlight the problems in centralized-based

    IoT solutions and understand why shifting to BC-

    based solutions is necessary.

    2)

    Since the robustness of a BC-based system is highly

    dependent on its underlying consensus mechanism,

    the aim is to conduct an in-depth comparative anal-

    ysis of CMs that are IoT suitable.

    3)

    Thirdly, to critically review the existing BC-based

    IoT security solutions in view of five IoT security

    tasks-

    a)

    Key Management and Access control.

    b)

    Device Authentication.

    c)

    Routing Security.

    d)

    Malware Prevention. and

    e)

    Data Protection and Secure Database Manage-

    ment.

    4)

    Fourthly, to highlight the open challenges in the

    BC-IoT integration and list out key future research

    directions.

    The main contributions of the paper are as follows:

    1)

    We have conducted a thorough survey of recent

    surveys(2019-early 2022) on BCT applicability in

    IoT. Other researchers may find this pool useful as

    a starting point for their research.

    2)

    We have discussed BC as a key enabling technology

    for IoT and three technologies that power BC-IoT.

    3)

    We have reviewed CMs in light of IoT.

    4)

    A primary literature review of the recent BC inte-

    grated IoT solutions in perspective of five specific

    IoT security tasks.

    5)

    We have discussed the cost analysis of IoT storage

    through SCs, network traffic modeling, SC vulner-

    abilities, BC transactional privacy, and other chal-

    lenges.

    6)

    We have thoroughly discussed the open issues and

    presented strong research directions.

    B. Paper Organization

    The remainder of the paper is organized as follows. In

    Section 2, the scope of the survey is presented. Section

    3 presents the security vulnerabilities of six critical IoT

    applications and lays the rationale for moving toward de-

    centralized architectures. In Section 4, we briefly provide

    an overview of BCT, its architecture, and CMs. Section 5

    presents the highlights of the recent surveys (2019-early

    2022). Based on the study in section 5, we discuss BC as

    a key facilitator for IoT and technologies that accelerate

    BC adoption in IoT in Section 6. In Section 7, a detailed

    study of BC integrated IoT security architectures and a

    comparison of various CMs, their adoption, and tradeoffs

    is discussed. In section 8, a literature review of BC-based

    security solutions is presented. In section 9, we present a

    thorough overview of the challenges associated with BC

    adoption in IoT, point out the open issues and possible

    solutions, and suggest promising research directions

    2. Scope of the survey

    We begin our review with a study of the prevalent

    centralized IoT architectures and discuss their security vul-

    nerabilities. We identify five primary security tasks, evaluate

    them against centralized solutions, and determine their

    limitations and the need to shift to decentralized solutions

    such as Blockchain. We then discuss the fundamentals of

    Blockchain. The working of the SCs have been excluded,

    and instead, their security vulnerabilities and applicability

    has been discussed. Considering the vastness of BC appli-

    cability, especially in IoT security, we shortlist a pool of re-

    cent survey papers (2019-early 2022) and comprehensively

    highlight their key focal points. The research papers have

    been shortlisted based on keywords, the number of times

    cited, and relevance to one of the five domains- General

    IoT security, IoT suitable CMs, BC-based IoT applications,

    BC for B5G applications, and integration with Machine

    Learning and BC- Edge computing. Other researchers may

    find this pool useful as a starting point for their research.

    Based on our secondary survey, we broadly discuss the

    reason for merging BC with IoT, how BC is a key enabling

    technology for IoT and what technologies drive BC and

    mitigate the challenges associated with BC adoption in

    IoT. We have discussed three enabling technologies for

    powering BC adoption in IoT- EC, IPFS, and ML. We

    then discuss the BC-IoT integration in great detail and

    present the technicalities of BC adoption in IoT. Since a

    BC network is only as good as its consensus, we conduct

    a detailed comparative analysis of CMs in light of IoT

    goals and related tradeoffs. Based on the study, we shortlist

    IoT suitable CMs and BC platforms. We then review the

    recent BC-based IoT architectures and evaluate them against

    the previously identified security tasks. We have filtered a

    subset of research papers(2018-early 2022) where the focal

    points are specifically the five IoT security tasks mentioned

    in subsection 1(A). Each paper’s experimental work and re-

    sults have been carefully studied, and the aim, architecture,

    pros, and cons of each solution have been comprehensively

    summarized. Finally, based on the literature review of BC-

    100

    Sadia Showkat, et al.:Securing the Internet of things through Blockchain approach.

    IoT architectures, we thoroughly discuss the challenges in

    BC-IoT integration and present research issues and future

    research directions.

    3. Security vulnerabilities of Centralized IoT applica-

    tions:

    IoT’s centralized architecture has three major network

    components-a) End devices: These are devices with sensing

    and actuating abilities coupled to the CPS. They amass

    data in the environment that they are lodged in and take

    action. b) Gateways and Data acquisition systems (DAS):

    DASs acquire data from sensors, and the gateways enable

    the Device-Cloud interactions working on different network

    protocols. c) Computing platforms: The data is relayed

    to platforms that provide storage, processing, hardware,

    software, and analytical support to the system.

    A. IoT Goals

    IoT architecture must satisfy the following primary

    goals:

    1)

    Low Power consumption: IoT devices are con-

    strained and require low-powered communication

    protocols to increase the network’s lifetime.

    2)

    Adaptability: The addition of new devices, frequent

    changes in the network conditions, and mobility of

    devices are essential factors in an IoT network. IoT

    architecture must be flexible to changes that the

    network encounters.

    3)

    Interoperability: Heterogeneity is a prime character-

    istic of IoT data. Well-defined standards and middle-

    ware are necessary to ensure ubiquitous computing.

    4)

    Latency prevention: The data processing must be

    done in a timely manner, especially in critical ap-

    plication domains.

    5)

    Accuracy: The data must be consistent and accurate

    throughout the process. The veracity of the data must

    be ensured, and the communication should be non-

    lossy.

    6)

    Fault tolerance: The architecture must contain a

    distributed and decentralized system to ensure ro-

    bustness and resilience.

    7)

    Security protection: Data must be protected against

    malicious cyberattacks. The transmitted data must

    not be altered at any level.

    8)

    Privacy Preservation: The transmitted data must only

    be available to the users participating in exchanging

    information.

    9)

    Low cost: The overall cost of deployment, network

    communication, storage, and maintenance should be

    low. Affordability is an essential factor in making

    IoT a viable business paradigm.

    10)

    Scalability: IoT is an ever-growing field. New de-

    vices are added to expand the existing networks. The

    architecture must be flexible to the growth of the

    network

    1) IoT Security Goals

    An IoT network must satisfy the following security

    goals:

    1)

    Confidentiality: Data transmitted must be accessible

    only to authentic users. Encryption mechanisms must

    be employed to protect the data.

    2)

    Integrity: The data transmitted must be trustworthy.

    The data received must not be modified in an unau-

    thorized manner.

    3)

    Availability: The data must not be lost in transit. DoS

    must be avoided.

    4)

    Authenticity: The data must originate only from

    trusted sources only. The Authentication issue in-

    cludes the capability to identify the devices in the

    IoT-based system.

    5)

    Non-Repudiation: The data transfer must be bound

    by proof of data ownership. The sender and receiver

    must acknowledge the transfer of data and not deny

    it at a later stage.

    6)

    Authorization: This refers to granting permissions to

    access data or perform an operation on authenticated

    objects and persons.

    B. Security of Centralized IoT applications:

    The number of IoT applications has increased signifi-

    cantly as a result ofthe development of open-source cloud

    platforms, such as Azure IoT Suite, Amazon Web Services,

    and Oracle IoT. IoT is at the root of various critical applica-

    tion infrastructures such as Smart Home, Smart City, Smart

    Health, Smart Agriculture, Smart Retails, Supply Chain

    Management, Finance, Industrial Control Systems, Commu-

    nication Networks, Smart Grids, and Smart Transportation

    [7]. These applications generate personal and sensitive

    information, raising the need for secure DM. Centralized

    schemes are susceptible to attacks, and a hacker can modify

    the AC policies to gain control of the system. Decentralized

    schemes are necessary for securing IoT Applications. The

    centralized nature of the application is vulnerable to various

    security threats at all levels, as depicted in Figure 2. In this

    subsection, we discuss six critical application domains:

    Figure 2. Security attacks in IoT

    Int. J. Com. Dig. Sys. 13, No.1, 97-129 (Jan-2023)

    101

    1)

    Smart city (SCT): SCT has Information and Com-

    munication Technology (ICT) at the core of its

    infrastructure. SCT provides several innovative and

    advanced services to its citizens to improve their

    quality of life. Intelligent information is provided

    to its citizens in real-time by fully enabling the

    control of the physical objects. Various SCT appli-

    cations include Healthcare, Smart buildings, Public

    safety, Smart Governance, and Smart agriculture.

    SCT faces large-scale security and privacy risks. The

    resource-constrained devices used, such as sensors

    and cameras which collect and share sensitive infor-

    mation, are very vulnerable to attacks by hackers.

    Most of the resource-constrained devices have no

    adequate security or privacy mechanism. The com-

    munication technologies used by IoT devices like

    RFID, NFC, WiFi, LPWAN (Low Power Wide-area-

    network), 6LoWPAN 3G,and 4G mobile technolo-

    gies are highly susceptible to attacks. The presence

    of multiple links between many system components

    exposes them to many security risks [8], [9], [10].

    2)

    Smart HealthCare (SHC): One of the major do-

    mains in the IoT-based infrastructure is SHC. Wear-

    able and mobile devices in IoT-based SHC have

    added tremendous value to the healthcare domain.

    SHC is responsible for making healthcare person-

    alized, more convenient, and efficient. The various

    applications of SHC include assisting diagnosis and

    treatment, health management, disease prevention,

    risk monitoring, virtual assistants, smart hospitals,

    and assisting drug research. SHC is highly vulnera-

    ble to security breaches and faces many malignant

    attacks, including privacy leakage, data tampering,

    and forgery. SHC deals with sensitive and personal

    data. The data collected through sensors are both

    static or have dynamic behavior. The breach of such

    data is considered a severe breach in data protection.

    The connected devices capture, aggregate, process,

    and then transfer the data to the cloud. These devices

    are vulnerable to tag cloning, spoofing, RF Jamming,

    and cloud polling. SHC has a centralized dataset that

    contains personal information such as family history,

    electronic medical records, and genomic data that

    must be secured from malicious software. Wireless

    networking technology deployed in the healthcare

    environment like Wi-Fi, BLE, and ZigBee results

    in an increased threat of eavesdropping, sybil, and

    sinkhole attacks [11], [12], [13].

    3)

    Smart Grid (SG): SG constitutes one of the most

    critical applications of the IoT. SG entails integrating

    the data communications network and the power

    grid to analyze the data collected from transmission

    lines, distribution substations, and consumers. The

    transmission and distribution of the power networks

    in SG are intelligently monitored at a fine granularity

    for high accuracy. Several IoT architectures have

    been proposed to be integrated with SG. Layer 1

    architecture consists of the Smart meters, Network

    Devices, and Communication protocol in the general

    three-layered architecture. Layer 2 contains devices

    responsible for receiving data at the central system.

    Layer 3 includes artificial intelligent systems to

    provide information to decision and billing systems.

    IoT-based SG as a cyber system faces security

    challenges at all three levels. The attacks can be

    categorized into four main types: Device attack, Data

    attack, Privacy attack, and Network availability at-

    tack. Authentication, user privacy, and data integrity

    are essential in SG. Only the intended recipients

    must access the data stored or transmitted. Secure

    authorization and control access is an important issue

    for IoT-based SG. Only a certified and authorized

    person should be granted the necessary access to

    perform any configuration of the smart meter [14],

    [15], [16].

    4)

    Smart Home (SH): An IoT-based SH refers to the

    environment of living that consists of highly intelli-

    gent and advanced automatic systems. Smart services

    are provided by various heterogeneous electronic

    devices networked together to provide smart ser-

    vices. An IoT-based SH performs various function-

    alities such as controlling and monitoring lighting,

    home temperature, appliances, intrusion detection,

    and energy management. Convenience and secu-

    rity are considered two key factors influencing the

    decision of the users in adopting IoT-based SHs.

    An SH must satisfy five security goals- Authenti-

    cation, Authorization, Integrity, Confidentiality, and

    Availability. SH faces many security-related issues

    owing to its basic architecture, such as eavesdrop-

    ping. An attacker can capture the traffic in infras-

    tructure among the different components of SH,

    thus violating confidentiality. The data captured can

    lead to an impersonation attack where an adversary

    masquerades as an authentic user and accesses IoT

    resources. DoS attacks can be performed by crafting

    malformed messages, resulting in provided service

    not processing the data properly, thereby compro-

    mising the availability [17], [18], [19].

    5)

    Smart Farming/Agriculture (SF/SA): IoT-based

    SF solutions refer to the system in which the crop

    field is monitored with the help of sensors, and

    the irrigation system is automated. The monitoring

    of the farm can be done from anywhere by the

    farmer. In IoT Smart Agriculture (SA), far advanced

    sensors are utilized, connected to the cloud via

    cellular and satellite networks. Thus the real-time

    data received assists in making effective decisions.

    However, there remain many security and privacy

    issues which are critical to the performance of

    SA/SF. Wireless sensors are used abundantly in SA

    to give up-to-date information to the farmer in real-

    time. Centralized systems store the information and

    have control over it, compromising the privacy of

    the system. Furthermore, communication plays a key

    role in SA/SF. The vulnerable nature of wireless

    102

    Sadia Showkat, et al.:Securing the Internet of things through Blockchain approach.

    technology results in the interception of data packets.

    The data is susceptible to modification while relaying

    them to their destinations, compromising the CIA

    triad and leading to incorrect decision-making [20],

    [21], [22].

    6)

    Smart Transportation: With the rapid develop-

    ment in smart sensors, smart vehicles, and vehicular

    communication technology, the Internet of Vehicles

    (IoV) is proposed to be the future of the trans-

    portation critical infrastructure system. The evolu-

    tion of the IoV can be considered from its parent

    branch of IoT, with the focus on Vehicular Adhoc

    Networks. With sensors embedded in the vehicles,

    mobile phones, and the devices installed in the

    city, there is a possibility to offer an optimized

    suggestion of routes, easy parking reservations, eco-

    nomic street lightning, prevention of accidents, and

    autonomous car driving. Due to the dynamic nature

    of the vehicle to infrastructure (V2I) and vehicle to

    vehicle (V2V) communication, the real-time traffic

    state information measured and shared is essential

    in providing efficient and secure service in IoV.

    Since this communication is deployed in an open

    environment and topologies change over time, many

    vehicles enter the IoV system in a given time slot,

    making it challenging to identify and authenticate

    the legitimacy of each vehicle. This nature of the

    IoV network makes it difficult to ensure security and

    non-repudiation. As a result, the malicious attack can

    be easily launched to disrupt the services provided,

    leading to low traffic efficiency and compromising

    the safety of passengers. The high availability of

    IoV is important due to its safety-critical nature,

    which requires fail-safe, resilient, and fault-tolerant

    operations to be performed [23], [24], [25].

    C. IoT Security Tasks:

    The Security tasks can be broadly classified into five cat-

    egories spanning different IoT infrastructure levels. These

    include:

    1)

    Key and AC management: Only authorized person-

    nel must be given access to perform an operation or

    to access data. Fine-grained AC mechanisms must

    be devised in a heterogeneous environment, where

    cross-domain interoperability is a must.

    2)

    Authentication of Devices: It is a must that the

    legitimacy of every node participating in the network

    is proven to the root. The devices must also verify

    their data integrity and provide non-repudiation of

    the messages while interacting with other nodes.

    3)

    Data sharing and Routing security: IoT system pro-

    vides untethered access to information by transmit-

    ting data through uncertain and insecure channels.

    Securing the data and routing operation from cyber-

    attacks during transit is essential.

    4)

    Prevention against software failures: IoT systems

    are susceptible to Malware threats that can disrupt

    the entire functionality of the system. Adware, Ran-

    somware, Spyware protection is necessary to protect

    the IoT ecosystem.

    5)

    Secure and privacy-preserving data storage and man-

    agement: A central authority controls a centralized

    system that has complete control over the users’

    data. IoT systems require secure, tamper-resistant,

    and privacy-preserving database storage and man-

    agement.

    4. Blockchain Technology

    Blockchain is a distributed digital ledger consisting of a

    series of time-stamped blocks linked together through a CM

    forming a decentralized and distributed network [26]. A set

    of rules guides the transactions, and the system is free of

    any central authority. Instead, a peer-peer (p2p ) network is

    responsible for maintaining and updating the ledger. Con-

    ceived originally to prevent the “double-spending” problem

    in commercial transactions, the first widespread application

    of BC was the cryptocurrency Bitcoin’. However, since its

    inception in 2008, BCT has found applications in various

    other sectors such as Banking, Asset Management, Health-

    care, IoT security, Identity management, and Insurance [27].

    The World Economic Forum estimates that the BC would

    store 10 % of global GDP in the coming decade.

    Blockchain is a decentralized ledger that contains trans-

    actional records.The information that is contained in the

    ledger is in digital format. A large number of transactions

    are contained in the block of the BC.For every transaction

    that occurs in the BC, the author’s digital signature is re-

    quired, and every participant’s ledger is updated.By the very

    inherent design of the BC,the chain’s data is highly secure,

    which guarantees the fidelity and security of a record of the

    data.This generates trust without the need for some other

    third party. The validation and tamper-resistant transactions

    are managed by a large number of nodes[28].BC can also

    be described as distributed ledger technology that provides

    certificates to prove that information has not been tampered

    with[29].

    Four crucial technologies are guiding BCT. These include

    Hashing, Cryptography, Digital signatures, and Consensus.

    Hash function takes data of indefinite sizes as input and

    gives a value of definite size in the output. Even a minor

    change in the input leads to a completely different hash

    value. BCT is based on the SHA-256 hash function.The cor-

    responding hash is computed in the encryption block when

    a transaction is made, and the blocks are connected through

    the hashes [30]. For secure interaction, BCT employs

    public-key asymmetric cryptography [31]. Cryptography

    ensures confidentiality, accessibility, and integrity,assuming

    that the attack is computationally bound (the probability of

    which is high). Membership services governed by protocols

    maintain and manage the unique chain identity of the user.

    BCT uses a public key –private key mechanism for the

    identification of devices and signing transactions. A wallet

    contains information about public and private keys and

    tokenized digital assets associated with the client. Every

    transaction on the chain is digitally signed, thus associated

    Int. J. Com. Dig. Sys. 13, No.1, 97-129 (Jan-2023)

    103

    TABLE I. Comparison of Blockchain types.

    Characteristics

    Permissionless

    Permissioned

    Consortium

    Decentralization

    High

    Low

    Moderate

    Scalability

    Low

    High

    Moderate

    Immutability

    High

    Low

    Moderate

    Computational overheads

    High

    Low

    Moderate

    Communication overheads

    High

    Low

    Moderate

    Storage requirement

    High

    Low

    Moderate

    Power consumption

    High

    Low

    Moderate

    Latency

    High

    Low

    Moderate

    Openness

    High

    Low

    Moderate

    with the on-record identity of the client.The CM governs

    network synchronization in the open network and ensures

    that the system verifies any transaction initiated. These

    four technologies enable the following in BCT-based open-

    access systems: [32]

    1)

    Decentralization:

    The

    transactions

    are

    validated

    without the interference of a central authority. The

    system is decentralized, and the information is dis-

    tributed and replicated across multiple nodes. The

    nodes agree upon the actual state of the ledger

    through a CM.

    2)

    Auditability: The records and transaction history on

    the chain serves as proof of ownership of the client’s

    digital assets and the transactions associated with

    them. The historical timestamp associated with the

    data is permanently stored in the BC.

    3)

    Integrity: The blocks are linked in chronological

    order with hashes. Thus, any malicious attempt to

    tamper with a block is readily detected.

    4)

    Transparency: BCs impart trust in a trustless environ-

    ment. A copy of the transaction information is visible

    to all the nodes. Any node can join an open BC

    system and access the network. The data is visible

    to everyone in the chain involved in the verification

    of transactions.

    5)

    Immutability:A record, once written, takes up a

    permanent place in the ledger. The ledger holds

    these records perpetually, imparting verifiability in

    the system.

    BCs are of 3 types- Public BCs, Private, and Consortium

    BCs. Public/ Permissionless BCs allow any user to join the

    network based on the consensus protocol, e.g., Bitcoin. Pub-

    lic BC has the capability of turning into a global network.

    A Private/Permissioned BC allows a specific set of nodes to

    be added to the chain providing a closed and more secure

    network [33]. Private BC is centrally controlled, and such a

    network is ideal for transmitting and sharing data within an

    organization. E.g., GemOS is a private BC. Finally, a hybrid

    approach that is partially centralized with lesser validators

    is called a consortium/Federated BC, where the control is

    distributed across a set of computers. Ethereum is a platform

    for building consortium BCs [34]. A comparison of the

    characteristics of the three types of BCs is depicted in Table

    I.

    A. Blockchain Framework:

    A Blockchain system has three layers- Data layer, Con-

    sensus Layer, and Application layer.

    1)

    Data Layer: Data layer governs the block creation.

    Secure identities are provided to each node, and

    dependence is created through network protocols.

    The network protocols govern the formation of p2p

    networks and secure transmission over links. The

    blocks contain two prime components- Chain of

    blocks and Transaction array.

    a)

    Chain of Blocks: BC is a distributed database

    containing a sequence of blocks that stores

    records of value and interest. Each block has a

    Block header(BH) and a Block body(BB). The

    BH stores the block version, which specifies

    the block validation rule set, a nonce which

    acts as a counter to verify the hash, a times-

    tamp to denote time, a Merkle root which

    stores the hash of all the underlying hashes

    of all the transactions in a cryptographic data

    structure called Merkle tree, the current block

    hash and the hash of the previous block. The

    BB contains the transaction data, an object

    recorded on blocks, organized by the Merkle

    tree [35].

    b)

    Transaction array: Every transaction is stored

    in the transaction array before adding it to the

    block. The transactions refer to exchanging

    value assets such as sending money, data,

    values, and messages. The basic skeleton of

    a Blockchain is shown in Figure 3.

    2)

    Consensus layer:This layer performs the core func-

    tionality of a BC system, i.e., bringing agreement on

    the system state in a trustless environment through

    consensus. The consensus is generally achieved by

    choosing a miner who packs the transactions into

    a new block and broadcasts it to the network.

    Figure 4 shows the steps involved in BC-based

    transactions. The four most popular BC CMs are

    Proof of Work(PoW), Proof of stake(PoS), Delegated

    104

    Sadia Showkat, et al.:Securing the Internet of things through Blockchain approach.

    Figure 3. A basic skeleton of Blockchain.

    Proof of stake(DPoS), and Practical Byzantine Fault

    Tolerance(PBFT). In PoW, the stakeholder(s)/miners

    compete to mine the block by calculating hashes

    until one node has the relevant value. In two

    nodes attaining the value simultaneously(rare) and

    the chain branches, the longest chain after the next

    block is taken as the real chain making the chains

    metastable. PoW requires complex computation and

    power resources. In PoS, a stakeholder/validator is

    chosen through a quasi-random process depending

    on his wallet credit, making the system run on low

    energy and computing resources but encouraging

    the nodes with nothing at stake to misbehave. In

    PBFT, the majority must agree on the network’s

    state, i.e., for a client transaction to commit, 2/3rd

    of the network must validate it. In DPoS, the nodes

    /delegates are chosen through voting to add a block

    to the root chain. In case of abnormal behavior

    by the delegate node, the other nodes can vote it

    out. However, the delegates are significantly less

    than the network and govern consensus, encourag-

    ing centralization. Some more CMs are Proof of

    Delegated Byzantine Fault Tolerance(DBFT), Proof

    of Burn(PoB), Proof of Capacity(PoC), Proof of

    Elapsed time(PoET), Dirted Acyclic graphs(DAG),

    Proof of Activity(PoA), Proof of Importance(PoI),

    and Leased Proof of Stake(LPoS) [36].

    3)

    Application layer: The Application layer provides

    interfaces for Distributed applications(DApps) that

    run on top of the BC system. At this level, SCs

    are integrated to guide the clauses’ execution with-

    out human intervention. SCs are digitized versions

    of paper-based contracts that allow terms reliant

    on decentralized consensus by self-execution [37].

    SCs are deterministic, autonomous, rule-based, and

    have unique addresses on the chain. The terms in

    the contract are converted into code that gets in-

    voked automatically in case of contract violation.

    SCs identify frauds and malicious attempts in the

    Figure 4. BC-based transactions.

    system, thereby increasing security. The results are

    deterministic and have high accuracy. SCs are in-

    voked independently and autonomously, mitigating

    the transaction costs by reducing human interference.

    Many BC communities are integrating interfaces for

    SCs, e.g., Ethereum provides a platform for writing

    SCs, written in a Turing complete language called

    Solidity [38].

    5. Related Surveys:

    IoT security is a vast domain, and many research and

    survey papers are available in the literature spanning various

    security aspects such as data encryption, intrusion detection,

    active attacks, passive attacks, device authentication, AC

    mechanisms, and channel security. AI and ML have comple-

    mented IoT security in recent times by providing improved

    real-time detection rates and attack detection accuracy. BC

    is a very recent addition to IoT security. BC addition to

    IoT is an up-and-coming solution to augment the pace

    of futuristic secure IoT networks. Due to the vastness of

    the domain and applicability beyond security, exhaustive

    survey papers are not available. Table II presents the recent

    (2019-2022) surveys available in the literature for BC-IoT

    integration. The surveys have been broadly classified into

    BC-based IoT Security, BC-based CMs for IoT, BC-IoT

    applications, BC-ML for IoT, and BC-EC integration. The

    focal points of each survey have been highlighted.

    Int. J. Com. Dig. Sys. 13, No.1, 97-129 (Jan-2023)

    105

    6. Blockchain as a key enabling technology in IoT

    IoT is the focal point of enabling the pervasive inter-

    connection of virtual and physical objects that have sped

    up data sharing and collection. This capability makes IoT

    one of the essential architectures for providing services in

    various fields. This section discusses BC as a key enabling

    technology for IoT and the technologies that drive BC and

    mitigate the challenges associated with BC adoption in IoT.

    1)

    Addition of BC features: BCT offers unique char-

    acteristics such as auditing capability, traceability,

    immutability, interoperability, accessibility, and ac-

    countability, which are imparted in IoT systems

    with its adoption. The IoT data streams from di-

    verse, heterogeneous environments are transformed

    into uniform coding. BC enables IoT and physical

    systems to collaborate through uniform access, fa-

    cilitating cross-domain interactions [77]. BCs enable

    fine-grained access mechanisms and SCs to prevent

    unauthorized access making the systems open to

    interactions from other physical systems. Further, BC

    has a 160-bit address space higher than IPV6, aiding

    it to be more scalable. The IoT data is stored as

    transactions permanently in an immutable fashion on

    the network. Every transaction initiated by a node is

    associated with the corresponding information. Any

    misbehavior or fraud can be traced back to the user

    imparting the audit capacity in the system, which can

    highly complement IoT verticals [65].

    2)

    5G and 6G enabled Industrial IoT: The advance-

    ments in faster communication networks are revolu-

    tionizing network services and making IoT systems

    faster. B5G technologies are key facilitators in inno-

    vating futuristic open access with low cross-domain

    barriers. The B5G systems need efficient communi-

    cation mechanisms with enhanced security, robust-

    ness, privacy preservation, and improved mobility.

    5Gs employ network slice brokers to enable media-

    tion between vertical service and resource providers.

    BC can operate independently in slices enabling

    secure and anonymous transactions [4], [78]. 5G ap-

    plications such as 5G-powered drones need security

    and enhanced privacy [79]. Various BC-based solu-

    tions have been presented for securing B5G and 6G

    systems. In [80], the authors present a BC sidechain-

    based decentralized hierarchical scheme for 5G to

    provide secure communication and authentication.

    The authentication is done at the edge of the network

    to reduce latency. In [81], the authors propose a BC-

    enabled clustered architecture for validating blocks

    in IoTs for B5G applications.

    3)

    Enhanced automation with SC applicability: With

    the help of SCs, BC is imparted with decision-

    making capabilities that drastically reduce human

    effort, and the applicability of IoT systems is in-

    creased [82]. The transactional clauses of SCs are

    digitized and tamper-resistant and cannot be mod-

    ified. SCs eliminate the need for an intermediator,

    minimizing management costs. SCs detect breaches

    and misbehavior in the system and automatically

    take decisions depending on the clauses pre-agreed

    upon by the system’s stakeholders. The decisions

    have higher accuracy and reliability and improve

    the overall security and efficiency of the system.

    SCs make distributed access decisions to enable

    legitimate users to query the BC and work better with

    data-driven interactions. SCs are deterministic and

    autonomous, thereby accelerating the inception of

    Decentralized Autonomous Organizations(DAOs). In

    IoT systems, SCs facilitate flexible AC, secure DM,

    prevent DDoS attacks, and provide secure identity

    management, strengthening security further.

    The three primary driving forces for BC-IoT adoption

    are:

    1)

    Edge computing: EC is a major driver for IIoT, and

    the integration of BCT into edge provides enhanced

    reliability, privacy, data integrity, reliable AC, and

    automated resource allocation. Conversely, the edge

    networks provide computational, storage, and side

    chain-based consensus facilities to IoT devices [70].

    Due to the constrained nature of IoT end-devices,

    they communicate data to the edge where the mod-

    erately intensive CMs and functions are done. The

    nodes store partial data such as time-stamp informa-

    tion to validate the authenticity of the other nodes.

    At the same time, the complex functions, strong

    CMs, and high storage requirements are offloaded

    to the edge. Various architectures have been present

    for BC-based edge computing. In [83], the authors

    propose a mobile BC-assisted IoT application con-

    sisting of Small cell base stations with mobile edge

    computing (MEC) deployed at them. In [84], the

    authors present a prototype for BC-based EC for

    mining and edge resource management for mobile

    BC. In [85], the authors present a DPoS based double

    auction cross-server edge resource allocation frame-

    work for mobile EC. BC functionality can be further

    extended for network management by designing BC-

    based Software-defined networks [32].

    2)

    Integration with ML: BCs provide secure data

    storage, and the outputs can detect anomalies in

    IoT systems [86]. The integration of ML and BCT

    in IoT can enable various tasks such as - secure

    storage of correct data, monetization of ML skill set

    through SCs, feeding correct data into algorithms,

    creation of better learning models through incentive-

    based competitive modeling, Making BCs secure

    from attacks, enabling automated signing of BC

    systems [71], [87], [88], [89]. In [90], the authors

    proposed a BC-assisted collective learning method

    to guide the secure exchange of learning results

    at the IoT edge. The model employs BC on the

    top of the edge devices where the nodes securely

    share learning results using BC-assisted collective

    106

    Sadia Showkat, et al.:Securing the Internet of things through Blockchain approach.

    TABLE II. Related Surveys

    Focal Point

    Refer-

    ence

    Year

    Key Highlight(s) of the Survey

    General Surveys with Key focus

    on Security.

    [39]

    2022

    •

    Distributed Denial of Services(DDoS) attacks

    •

    BC- based solutions to mitigate DDoS attacks

    [40]

    2022

    •

    BC taxonomy for IoT applications.

    •

    Blockchain platforms for IoT.

    [41]

    2022

    •

    BC for big data- Services

    •

    BC –based big data projects

    [42]

    2021

    •

    Architecture of SCs.

    •

    Levels of BC-IoT Integration

    •

    BC-based IoT applications

    [43]

    2021

    •

    Layer-wise security threats in IoT

    •

    BC security solutions for IoT

    [44]

    2021

    •

    Potential of SC integration in IoT

    •

    Decentralized architecture for BC-based IoT systems

    [45]

    2021

    •

    BC-based AC methods for IoT

    •

    BC-based IoT use cases

    [46]

    2020

    •

    Need for continuous authentication schemes in IoT

    •

    BC-based security solutions

    [47]

    2020

    •

    IoT trust management system

    •

    BC-based trust management system.

    [48]

    2020

    •

    Layer-wise security attacks in Industrial IoT (IIoT).

    •

    BC addition to IIoT.

    [49]

    2019

    •

    Security concerns underlying IoT communication protocols.

    •

    BC-based cybersecurity in IoT

    [50]

    2020

    •

    Primary study of BC-based cybersecurity of papers until early

    2018

    [51]

    2019

    •

    Attacks against CMs

    •

    BC extensions

    [52]

    2019

    •

    Schemes for BC-IoT integration

    •

    BC-based IoT Privacy

    Consensus Algorithms

    [53]

    2020

    •

    Comparison of BC-based CMs and their suitability for IoT.

    [54]

    2020

    •

    Evaluation of CMs on four criteria -Throughput, profitability,

    decentralization degree, and security.

    [55]

    2020

    •

    Discussion on various BC architectures and protocols.

    •

    Consensus characteristic in BC-based IoT applications.

    [56]

    2020

    •

    Discussion on CMs and their division into four groups based

    on scalability, security, energy consumption, and throughput.

    [57]

    2020

    •

    Review of BCT implementation in IoT concerning CMs.

    •

    Frameworks for IoT-BC implementation.

    [6]

    2020

    •

    Limitations of PoW and PoS for IoT.

    •

    Distributed consensus.

    •

    Directed Acyclic graphs based consensus methods and

    challenges.

    [58]

    2020

    •

    A comprehensive review of the suitability of CMs in IoT.

    •

    Frameworks for BC implementation.

    Blockchain-based IoT Applica-

    tions

    [59]

    2020

    •

    BC-based Applications for CPS

    •

    Evaluation of BC-based improvement in IoT applications.

    [60]

    2020

    •

    BC IoT Projects

    •

    BC-IoT Use cases

    [61]

    2019

    •

    Applicability of BCT for Smart communities- Finance, ITS,

    SG, SHC, and Voting systems.

    •

    BCs in Process models

    Int. J. Com. Dig. Sys. 13, No.1, 97-129 (Jan-2023)

    107

    [21]

    2020

    •

    The architecture of Green-IoT-based agriculture and threat

    Models.

    •

    BC-based Security solutions and challenges.

    [62]

    2020

    •

    BC integration in 5G enabled UAV networks.

    •

    Network security challenges in UAV.

    [63]

    2020

    •

    Attack models in Precision Irrigation (PI) systems.

    •

    BC integration in PI to mitigate Attacks.

    [64]

    2020

    •

    BC as a Solution for smart applications in precision

    agriculture.

    •

    BC platforms in precision agriculture

    [65]

    2020

    •

    Review of BC-based Supply Chain.

    [66]

    2021

    •

    BC-based IoT use cases for SHC.

    •

    A comparison of CMs for healthcare applications.

    [67]

    2021

    •

    BC applications in smart environments in smart cities and

    challenges.

    •

    Data-centric requirements for BC-based smart cities.

    [68]

    2021

    •

    BC application in IoV for ITS.

    •

    BC-based IoV architectures.

    •

    Benefits and limitations in BC-based IoV

    Blockchain for B5G applica-

    tions and integration with ML

    [32]

    2019

    •

    BC deployment in IoT and applications.

    •

    BC for B5G-IoT

    [69]

    2020

    •

    BC and 5G enabled IoT applications.

    [70]

    2019

    •

    Secure Edge Intelligent BC-powered B5G networks.

    •

    Optimal resource scheduling using a deep reinforcement

    learning approach.

    [71]

    2020

    •

    Convergence of ML in BC-based IoT Applications- Benefits

    and challenges.

    [72]

    2020

    •

    ML and BC Integration for IoT.

    •

    BC security mechanisms for IoT.

    Blockchain-Cloud-Edge

    Computing

    [73]

    2020

    •

    Comparative analysis of Cloud-based IoT Vs BC-Based IoT.

    [74]

    2019

    •

    BC –Software-defined network integration and frameworks.

    [75]

    2019

    •

    Security Challenges In Fog computing

    •

    BC as a security solution for Fog Enabled IoT Systems

    [76]

    2020

    •

    Motivation for integrating BC with Cloud of Things (CoT).

    •

    Architecture and applications of BC integrated CoT

    learning. The authors propose a modified Proof of

    Learning consensus algorithm where work is done

    in the training process instead of solving a random

    puzzle. The learning results from the winner are

    adopted in the rest of the deep neural networks.

    3)

    IPFS powered BC for IoT: In critical IoT sys-

    tems, distributing data in a tamper-proof and trace-

    able manner is necessary. BCs provide the service,

    but they work inefficiently while handling big data

    considering the transactional processing limitations.

    IPFS can complement BC and provide a secure

    storage mechanism for IoT data. IPFS is a content-

    addressable, p2p version-controlled file system that

    can assist the formation of a decentralized IoT

    system [91]. IPFS, based on cryptographic hashes,

    is a potential alternative to address BC big data

    issues. BC is duplicated on multiple nodes; thus,

    most storage spaces are required without immediate

    use, particularly if the node operator does not need

    to examine every file saved on BC. With IPFS, BC

    only saves the cryptographic hashes slowing down

    the chain development drastically because hashes

    are typically less than the data they represent. For

    example, if SHA256 is employed, the on-chain stor-

    age required for a file of any size is lowered to 32

    bytes [92]. For any modifications in the content, the

    hash value changes each time. The authors of [93]

    offer a decentralized IIoT data management system

    108

    Sadia Showkat, et al.:Securing the Internet of things through Blockchain approach.

    based on BC and IPFS. The authors of [94] propose

    a network architecture that uses BCand IPFS to

    provide IoT data privacy. SCs perform AC in the

    proposed “modular consortium” architecture while

    also providing accountability for data owners and

    third parties to whom users grant access.

    7. Blockchain Integrated IoT systems.

    IoT aims to design a distributed system offering scalabil-

    ity, security, privacy, reliability, real-time data delivery, and

    high adaptability. With the rapid advancements in B5G, IoT

    systems are becoming faster, expanding over longer ranges,

    and requiring enhanced security solutions. BC has distin-

    guished intrinsic features of non-intermediation, immutabil-

    ity, data transparency, and tamper-resilience, which mitigate

    security concerns in an untrusted cross-domain open envi-

    ronment. BCs are envisioned as the future of open-access

    systems requiring distributed storage, efficient data and

    resource management, secure KM, and AC mechanisms. By

    design, a BC-based architecture can ensure confidentiality,

    integrity, availability, user control, and authorization in any

    system [95]. The integration of BC into IoT offers increased

    data trust, imparts verifiability, eliminates intermediation,

    provides transparency, and increases user control of the

    user data in the systems. IoT and BC’s collaboration can

    resolve the issues of data organization, data maintenance,

    communication security, intra-domain collaboration, and

    privacy in IoT. We shall refer to such systems as BC

    integrated IoT (BIIT) systems throughout the rest of the

    paper.

    A. Technicalities of Blockchain IoT integration:

    The world is moving towards becoming “smart” with

    IoT technology, necessitating more attention to data security

    and privacy concerns. IoT security solutions are typically

    complicated due to a lack of safe hardware and software

    design, development, limited resources, and established

    standards. Furthermore, the diversity of resources available

    in the IoT has hampered efforts to develop a comprehensive

    global strategy for protecting IoT systems at all levels. The

    main challenge is data management and securely providing

    services without compromising the privacy of the underly-

    ing personal information. One of the IoT security solutions

    is to develop a fine-tuned AC mechanism for data protection

    and privacy by ensuring that only authorized and authen-

    ticated users may access data. However, this is hindered

    by the vastness of the connected devices. Furthermore, the

    traffic created by the massive amount of data generated by

    these devices makes satisfying quality-of-service standards

    difficult. loT devices have low storage, computation power,

    and bandwidth restrictions.

    With all of the interactions between people, data, and

    devices, IoT promises direct connectivity between devices

    and data interchange. In the IoT economy, sensors and

    devices should be able to conduct monetary transactions

    in exchange for services without the involvement of a third

    party. With the introduction of the 5G network, transactions

    and exchanges will predominantly occur over the internet

    Figure 5. Interaction between IoT and Blockchain

    network, which billing and payment systems must account

    for. However, financial institutions can still not receive

    real-time information on pledged assets due to ineffective

    management for accessing, sharing, and analyzing asset

    information across stakeholders. There are no chattel asset

    tracking and monitoring systems capable of validating and

    quantifying chattel assets pledged for loans.

    BCT has the capability of bringing reforms in these sectors

    as it enables safe, immutable, and anonymous transactions

    using a decentralized distributed ledger system. BC-enabled

    loT systems can monitor and track chattel assets in transit

    or warehouses in real-time. The combined approach aids

    in the resolution and avoidance of unnecessary risks in

    the financial industry. Some attacks on loT systems can be

    addressed using BCT. BC research as a security mechanism

    has resulted in various transformative benefits that were

    previously unattainable or unavailable. Figure 5 depicts the

    interaction between IoT devices and BC platforms.

    Figure 6 illustrates a simple BC-based security level

    evaluation mechanism for IoT. The authors of [96] illustrate

    the steps involved in an IoT network based on BC. First,

    IoT device manufacturers pre-verify software that is loaded

    on IoT devices and create the whitelist. A SC is produced

    by combining a manufacturer’s whitelist and the agent’s

    initial agent hash value(IAHV) installed in an IoT device.

    IoT device manufacturers can access SCs via decentralized

    applications or internally through an Application Program-

    ming Interface(API). IoT device manufacturers use SCs to

    update the White List. Manufacturers use the whitelist SC

    to record the whitelist and IAHV of the agent installed in an

    IoT device in the BC. By inquiring about the information

    recorded in the BC via the whitelist SC, the IoT device

    can verify that the agent’s IAHV matches the device agent

    hash value of the installed agent. It validates that the agent

    has not been forged or fabricated by comparing it to the

    agent hash value stored in the BC; as a result, the security

    evaluation process of IoT devices via the agent may be

    trusted. The IoT device’s agent checks to see whether any

    Int. J. Com. Dig. Sys. 13, No.1, 97-129 (Jan-2023)

    109

    Figure 6. A simple BC-based security level evaluation mechanism

    for IoT.

    untrusted programs have been installed. The agent evaluates

    the security status of the IoT device and transmits it to

    the scoring SC. Manufacturers receive rewards in return for

    updating the whitelist SC.

    1) Recent proposed architectures:

    Two main features of the BCT include Trust and De-

    centralization [97], [98], [99]. By design, the data on a BC

    is secure and tamper-resistant, making it a key disruptor for

    IoT. BCs can be utilized to improve IoT in the following

    ways:

    1)

    Impart data integrity: The nodes in the BC have iden-

    tical copies of the ledger. When transactions occur,

    all network members are responsible for validating

    them, and once verified and stored in the ledger, the

    transaction cannot be manipulated or removed.

    2)

    More Addressing space than IPV6: BC addresses are

    160 bits long, while IPV6 addresses are 128 bits.

    When compared to IPV6, BC has higher addressing

    space (4.3 billion addresses).

    3)

    Trusted accountability: Every operation is docu-

    mented in the ledger; thus, it is possible to identify

    and trace all operations.

    4)

    Fault tolerance: Decentralized systems rely on mul-

    tiple separate components; they are more fault-

    tolerant. Because of the point-to-point decentralized

    structure, BC has no single node failure concern.

    5)

    Eliminating third-party liabilities: BC runs without

    third-party intermediaries and is free of any risks or

    dangers posed by third parties.

    The decentralized. peer-to-peer architecture is the most no-

    table characteristic of BCT. The distributed ledger contains

    Figure 7. Overview of Blockchain –based IoT architecture

    all transactions, and all network members must agree to

    approve the transaction. This feature enables the imple-

    mentation of end-to-end traceability. Data provenance was

    previously difficult to obtain, but it is now a possibility

    with the BCT’s distributed ledger option. Owing to these

    benefits, many BC-based architectures have been proposed

    for IoT; an overview of the same is provided in Figure 7.

    The authors of [100] propose the solutions to overcome

    the centralized solutions and security measures in IoT.

    The data-driven decentralized mechanism is used, which

    provides energy-efficient solutions for detecting attacks on

    the IoT-based Sensor Networks. In [101], the authors aim

    to facilitate the data searching and extraction of public and

    private BCs deployed at the MEC server of the 5G MEC

    smart grid. IoT device identifier is built as a BC explorer.

    In [102], the vulnerability of the massive data produced in

    IoT networks for smart transportation is solved by the BC

    and IoT, which provide a decentralized data management

    system. In [103], the authors propose using the Identity

    Based Encryption (IBE) algorithm to enhance health care

    data security.The BC-based IoT architecture uses IBE to

    provide enhanced security. In [104], the authors address

    the privacy, security, and scalability issues in a centralized

    system for IoT and resolve them with a lightweight archi-

    tecture for BC-based identity management. In [105], Mobile

    edge-cloud computation offloading is used in delay-sensitive

    IoT applications. An effective, trustworthy access control

    mechanism is introduced, which involves an advanced deep

    reinforcement learning algorithm using a double dueling

    Q-network. The work in [106] proposed using BC, SCs,

    and IoT devices to integrate different kinds of IoT devices

    in pre and post-harvesting agriculture segments. This work

    in [107] proposes the integration of the Software-Defined

    Network with the BC system. A BC-based architecture is

    used for proposing the new routing protocol witty cluster

    structure for the IoT networks.

    110

    Sadia Showkat, et al.:Securing the Internet of things through Blockchain approach.

    B. Tradeoffs in Consensus mechanisms for IoT suitability

    BIIT systems:

    Consensus is the principal mechanism that makes the

    BCs secure by design. A CM governs the rules that pivot

    on the network’s nodes to agree on the ledger’s true state.

    Consensus achieves trust in a heterogeneous, uncontrolled

    environment by providing a mechanism to validate the data

    communicated by the nodes in the network. CMs eliminate

    the central authority, validate the data communicated by

    the nodes in the network, establish trust among nodes and

    ensure a system state agreed upon by the network members.

    With the increase in BC-based applications, various CMs

    have been proposed and adopted by systems, but their adop-

    tion is met with challenges. The choice of the consensus

    algorithm significantly affects the network’s performance,

    and there exists a tradeoff between scalability, energy

    consumption, bandwidth requirement, network overheads,

    computation overheads, security, privacy, and latency.

    The robustness of a BC-based system is highly dependent

    on its underlying CM. The security provided by a CM

    is directly proportional to computational and bandwidth

    requirements, as is the case with PoW. IoT’s computational

    and communication abilities are bound by constrained re-

    sources; thus, applying a generic CM in IoT is difficult.

    Inter-domain cross consensus poses additional challenges

    [108]. Over the past few years, CMs have been customized

    particularly for LW environments. Since IoT networks are

    constrained, the CMs have been modified over the last

    few years to increase their suitability in LW networks.

    This, however, comes at the cost of compromising security

    and other factors. CMs with strong fault tolerance and

    immunity to attacks require the computation of intensive

    hash operations that consume energy, bandwidth, and other

    resources. CMs that work on low power do so at the cost of

    decreasing the network’s size or moderately compromising

    data integrity. An ideal CM for IoT would ensure increased

    decentralization, adversity tolerance, scalability, throughput,

    and decreased latency, energy consumption, storage, com-

    putation, and network overheads.

    A comparative study of the existing CMs in light of IoT

    goals is presented in Table III [109], [58], [55], [53] and

    [60]. The values High, Moderate, and Low under different

    columns(to different methods) are assigned based on dif-

    ferent criteria. For the energy consumption, computational

    resource requirements, storage overheads, and Throughput,

    the values are assigned bydirect comparison with PoW

    and IoT suitability. The numerical criteria for assigning

    latency values is Block creation time. For example, the

    block creation time in PoW is approximately 10 minutes,

    while it is only 4 minutes in PoC. Although the time is

    considerably lower than PoW, it is still not suitable for

    real-time IoT environments, and compared to other CMs

    that take only seconds, the time taken by PoC is high.

    Thus, the value “Moderate” has been assigned based on

    the combined criteria. DPoS can process 100,000 TPS, and

    the block is added in under 3 seconds to the chain, which

    is still not suitable for real-time IoT systems that require a

    block creation time of the order of milliseconds.

    While designing a new consensus algorithm for an LW

    system, the following tradeoffs need to be considered:

    1)

    Security and Computational requirements: Strong

    cryptographic methods provide high security and

    decentralization to the system, and improve data

    integrity and confidentiality but are computationally

    intensive and require high power systems for imple-

    mentation.

    2)

    Privacy and Latency: To achieve privacy, the adopted

    system should be free of a central authority, and

    the consensus should be achieved in a p2p fashion.

    However, private chains are adopted by systems that

    encourage centralization to decrease the system’s

    latency, thereby increasing privacy concerns.

    3)

    Convergence rate and Adversity tolerance: The con-

    vergence of the algorithm affects the adversity tol-

    erance of the network. For IoT real-time systems,

    for the consensus to converge faster, the number of

    nodes involved in consensus is decreased, making it

    easy to compromise the network and decreasing the

    system’s fault tolerance.

    4)

    Latency and Scalability: For cross-domain access,

    the number of validations to perform transactions in-

    creases, increasing the network overhead. To reduce

    latency in real-time applications, the number of the

    communicating nodes needs to be capped.

    5)

    Throughput and Scalability: As the network size

    increases, simultaneous communication attempts to

    access resources and Block addition increase con-

    siderably. This affects the system’s throughput sig-

    nificantly as more nodes access the limited resources

    of the system

    1) BIIT suitable Consensus mechanisms and Blockchain

    platforms:

    1)

    Hyperlegder Fabric with PBFT: Hyperledger fab-

    ric has a modular architecture and can create private

    chains. The system’s latency is less but is associated

    with significant network overhead, suitable for small

    private networks, limiting the network’s scalability.

    Hyperledger fabric is suited for private networks,

    works on PBFT, and has a pluggable CM. To achieve

    consensus, the majority of the nodes must agree

    on the block addition. For writing SCs, the frame-

    work supports the “Go” language and “Chaincode”

    [135]. The framework provides data confidentiality,

    efficient processing, and identity management and is

    suitable for low-scale IoT implementation.

    2)

    Hyperledger Sawtooth with PoET: Designed by

    Intel, this framework is suitable for low-powered

    systems. The nodes solve a hash problem, and

    the winning node is chosen randomly on a ran-

    dom waiting time using Intel’s softguard extension.

    The contracts on Sawtooth can be written in any

    language, and various CMs can be plugged into

    the same chain [136]. It usually employs PoET,

    which offers low computational requirements, High

    Int. J. Com. Dig. Sys. 13, No.1, 97-129 (Jan-2023)

    111

    TABLE III. Comparison of Consensus mechanisms for IoT suitability.

    Algo

    NA

    IoT

    goals

    ECP

    CRR

    SO

    CVG

    STY

    LTY

    TPT

    DEC/SEC

    PoW

    [110]

    PL

    High

    High

    High

    Very

    Slow

    High

    Very

    High

    Low

    Fully decentralized.

    Secure.

    PoS

    [111]

    PL

    MDR

    MDR

    High

    MDR

    Fair

    MDR

    Low

    Lower decentralization than PoW.

    Relatively lower tamper resistance to

    attacks.

    PBFT

    [112]

    PD

    Low

    Low

    High

    Fast

    Low

    Low

    High

    Low Decentralization.

    Prone to Sybil attacks.

    DPoS

    [113]

    PD

    MDR

    MDR

    High

    Fast

    MDR

    Low

    High

    Encourages centralization.

    Prone to attacks.

    DBFT

    [114]

    PD

    Low

    Low

    High

    MDR

    MDR

    MDR

    High

    MDR decentralization.

    Prone to security attacks.

    PoC

    [115]

    PL

    Low

    Low

    Very

    High

    MDR

    High

    MDR

    High

    Relatively high decentralization.

    Selfish mining.

    PoET

    [116]

    PD

    MDR

    Low

    High

    Fast

    High

    Low

    High

    Intel-Central authority

    Not truly decentralized.

    LPoS

    [117]

    PL

    MDR

    MDR

    High

    MDR

    High

    MDR

    Low

    Decentralized.

    Secure

    PoA

    [118]

    PL

    High

    High

    High

    MDR

    High

    MDR

    Low

    Decentralized

    Trust requirement.

    PoI

    [119]

    PL

    MDR

    MDR

    High

    MDR

    High

    MDR

    High

    High Decentralization.

    Takes into account nodes’ reputa-

    tion.

    DAG

    [120]

    PD

    MDR

    MDR

    High

    MDR

    High

    MDR

    High

    Susceptible to Sybil attacks.

    Casper

    [121]

    PL

    MDR

    MDR

    High

    MDR

    High

    MDR

    MDR

    Decentralized and secure.

    Stellar

    [122]

    PL

    MDR

    MDR

    High

    MDR

    High

    MDR

    High

    Decentralized.

    Robustness is achieved through quo-

    rum slices.

    Ripple

    [123]

    PL

    Low

    MDR

    High

    MDR

    High

    MDR

    High

    Decentralized. Can tolerate up to

    20% faulty nodes.

    Tende-

    rmint

    [124]

    PD

    MDR

    MDR

    High

    Fast

    High

    Low

    High

    Not fully decentralized.

    Based on monetary concepts, which

    is not suitable for IoT

    Rapid

    Chain

    [125]

    PL

    MDR

    MDR

    Low

    MDR

    High

    MDR

    High

    Decentralized. Provides full shard-

    ing.

    Omni

    Ledger

    [126]

    PL

    MDR

    MDR

    Low

    MDR

    Fair

    MDR

    High

    Decentralized.

    Low Security. Can tolerate up to ¼

    faulty nodes.

    Elastico

    [127]

    PL

    High

    High

    High

    MDR

    High

    High

    Low

    Decentralized. Suffers from Security

    risks.

    RScoin

    [128]

    PD

    MDR

    MDR

    High

    Fast

    High

    Low

    High

    Low Decentralization and based on

    monetary benefits.

    Algo-

    rand

    [129]

    PL

    MDR

    MDR

    High

    MDR

    High

    MDR

    MDR

    Decentralized and high security.

    Byz-

    Coin

    [130]

    PL

    High

    High

    High

    MDR

    Fair

    MDR

    High

    Decentralized.

    Susceptible to DoS attacks.

    112

    Sadia Showkat, et al.:Securing the Internet of things through Blockchain approach.

    PaXoS

    [131]

    PD

    Low

    MDR

    High

    Slow

    Fair

    High

    MDR

    Decentralized.

    Fault-tolerant consensus among a

    group of nodes.

    Tangle

    [132]

    PL

    Low

    Low

    Low

    Fast

    High

    Low

    High

    Not fully decentralized.

    Security compromised if node gains

    > 1/3rd of hashes.

    RAFT

    [133]

    PD

    MDR

    MDR

    High

    Fast

    MDR

    Low

    High

    Not fully decentralized.

    Susceptible to ledger node failure.

    Treechain

    [134]

    PL/

    PD

    MDR

    MDR

    MDR

    Fast

    Fair

    Low

    High

    Secure at the cost of overheads.

    * NA, ECP, CRR, SO, CVG, SCY, LTY, TPT, DEC/SEC, MDR, PL, PD respectively stand
    for Network Access, Energy Consumption,

    Computational resource Requirement. Storage Overheads, Convergence, Scalability,
    Latency,Throughput, Decentralization/Security,

    Moderate, Permissionless, Permissioned.

    throughput, and Low latency but encourages central-

    ization. Hyper ledger Sawtooth platform is suitable

    for permissioned and permissionless BCs and pro-

    vides features such as live data streams suited for

    IoT environments. The framework, however, suffers

    from Security and Privacy issues.

    3)

    IoTa with Tangle: Tangle is a distributed communi-

    cation protocol that does not work on transaction fees

    suitable for IoT. Tangle enables a parallel transaction

    verification mechanism which decreases the conver-

    gence time and reduces latency in the system. How-

    ever, the framework suffers from storage and security

    problems and is prone to centralization. IoTa uses

    DAG, which minimizes the system’s network and

    transaction overhead [132]. The latency is low and

    has been specifically designed for IoT applications.

    Iota enables high throughput but does not support

    SCs and suffers from privacy issues.

    C. Security architecture of BIIT systems

    BCT is evolving as a key paradigm in addressing these

    issues of IoT. In BIIT systems, BC is added at the security

    level and works on a distributed consensus scheme where

    each IoT transaction is verified, and every message can be

    traced to the origin. BIIT systems work in a p2p distributed

    manner, and each entry is time-stamped. The data blocks

    are integrated using cryptographic hashes, and the Merkle

    tree stores all atomic transactions. The tree’s root hash is

    verified to secure all the transactions underlying it.

    To understand the BIIT system’s security mechanism, the

    Hyperledger fabric for IoT BC security architecture has

    been considered, consisting of five levels: [137]

    1)

    Perception layer: The IoT node layer collects the

    data from heterogeneous environments and is pre-

    processed, transformed, and stored on BCs.

    2)

    Network Layer: All nodes are given equal priority

    and transmit the data. Each node contains the data

    authentication protocol information and block net-

    work mode.

    3)

    Consensus layer: The layer works on the PBFT

    algorithm, suitable for constrained IoT environments

    because of less energy consumption and lower com-

    putational overhead.

    4)

    Smart Contract Layer: The SC layer stores contracts,

    incentive mechanisms, and other scripts. SCs are set

    up in the certification authority.

    5)

    Application Layer: The layer is responsible for col-

    lecting, storing, verifying, and processing the data

    blocks. The IoT application interface enforces the

    node transaction process and provides AC services.

    Mechanism: The devices are registered and granted AC

    rights which are defined in the SC. Various sensing devices

    collect data of various types and in varying formats. This

    data is pre-processed, and preliminary information is ex-

    tracted through a hash function and asymmetric encryption.

    The heterogeneity is removed by transforming the data into

    a fixed-length base to keep a uniform format. The data is

    time-stamped, stored in a block, and broadcasted to the

    whole network. The gateway nodes hash the data, storing

    the table in the block. The time-stamp archives the key

    block information such as the source, and digital signature,

    which imparts traceability. Any node can act as a miner to

    carry out authentication. A block node validates the received

    data according to the data structure, source, time-stamp,

    and other information. The data from a legitimate source is

    added in chronological order, and the transmission from

    a malicious node is restricted. The data is stored in an

    immutable fashion on the chain.The IoT transactions are

    verified using a PBFT consensus algorithm, ensuring that

    no false data is stored on the system. The SCs are triggered

    in case of an event, and the contract clauses are invoked to

    handle the misbehavior by one or more nodes. SCs enable

    cross-domain interoperability by implementing scripts for

    various states. The SCs also eliminate human/third-party

    intervention for invoking the rules in case of a malicious

    attempt. At the top, application services are provided, and

    access rules for cross-domain interactions are maintained.

    The architecture has five prime advantages-Improved secu-

    rity, increased cross-domain interoperability, data integrity,

    data traceability, and automated decision making.

    Int. J. Com. Dig. Sys. 13, No.1, 97-129 (Jan-2023)

    113

    8. BIIT systems and IoT Security tasks

    More and more devices are being connected in the

    IoT application domains with advancements in sensing and

    actuating technologies. Verifying the legitimacy of the com-

    ponents for secure communication, authentication schemes,

    and secure routing protocols (RP) are essential criteria in

    IoT sensor networking. In Table IV, the literature study of

    the recently proposed security architectures of BIIT systems

    has been summarized vis-`a-vis security tasks identified in

    Section 3.3.

    A. Primary Study of the BC Solutions:

    In [138], the authors propose a BC-based distributed KM

    scalable architecture with fine-grained auditing capability

    for hierarchical AC. The architecture consists of 3 main

    components- A device layer containing the CPS devices,

    a BCT-based security access manager (SAM) network at

    the fog layer, and multiple BC networks on the cloud

    for KM. The user keys are secured and not under the

    control of a key generation center, and the information

    is instead stored on the SAMs, which act as the miners

    on the chain employing a PoW consensus algorithm. The

    information is offloaded to a BC-based cloud for access

    across multiple domains and reduces the blocks’ burden.

    The cross-domain operations are allowed after the cloud

    manager verifies it and sends it to the SAM. In the case of

    frequent accesses, the information is stored in the BC with

    the same deployment domain. The target difficulty in the

    model is 17 bits for a SAM device, and the average time

    consumption decreases with transaction collection time (Tc)

    with the assumption that there are enough power resources

    to carry out the verifications. The performance evaluation of

    the model for cross-domain operations shows that the time

    consumption in carrying them out is the same during each ½

    Tc period. The architecture provides fine-grained auditing,

    but its performance evaluation runs on various assumptions,

    such as that all the management domains have the same

    number of user equipment. The mining is done after the

    propagation procedure ends, and the SAMs have the same

    transmissibility to propagate transactions and mining time.

    In [139], the authors propose a theoretical architecture for

    BC-based AC mechanisms with enhanced trust mechanisms

    and increased portability. The architecture consists of 3

    prime layers- Resource layer (RL), BC layer (BL), and

    Application layer (AL). The model aims to formulate an

    AC mechanism for defending against attacks in an untrusted

    environment. The model adopts the PBFT algorithm for

    consensus, an endorser makes endorsements for the trans-

    action, and a transaction handler executes the chain codes.

    Users communicate with ALs through a client application

    for registration and requesting AC. BL is at the core and

    is deployed on every component in the private network.

    It consists of 3 components – web controller, transaction

    handler, and ledger. All the actions such as identity creation,

    executing access protocol creation, and resource creation

    happen in the BC. All the requests are saved in the BC in an

    immutable and non-resistant manner. The model’s security

    analysis shows resistance to AC message tampering until at

    least 1/3 nodes of the network is not compromised. The

    model is suitable only for the low-scale implementation

    and is compromised if the network complexity increases,

    creating latency and storage problems.

    In [140], the authors propose a BC-based AC mechanism

    for verifying IoT end-points and providing access tokens

    for querying resources. The architecture is gateway-based,

    where IoT devices communicate with the gateway instead

    of the internet, and conversely, any communication to

    IoT devices goes via gateways. The gateway serves four

    purposes- protocol bridge, AC, secure communication, and

    proxy BC. Internet Service Providers (ISPs) act as the

    gateway approver, vendor device authentication is done by

    the vendors, and the gateway acts as an authorization server.

    The AC state is distributed across all nodes and stored on

    the SCs. A trusted administrator does the SC deployment,

    and signing of ISPs and vendors. The AC is carried out in a

    few stages- gateway authentication done by an ISP, vendor

    authentication of devices by the owner under each domain,

    and the gateway handles outside requests by verifying and

    granting access requests. The outside requestors need to

    build secure channels with gateways before communicating

    to IoT for access. The ISPs are discredited in case of

    untrusted behavior, and the domain owner has complete

    control over the requests coming through the gateway. The

    model is evaluated over trust, security, and performance.

    The security analysis shows that the attacks can happen

    if the attacker leverages massive computational resources,

    which are costly or compromise the approvers, mitigated by

    using a certification authority for vendors. The architecture

    is centralized and needs a trusted intermediary. The authors

    argue that IoT systems cannot be entirely decentralized and

    employ trusted approvers for authenticating end-points. The

    architecture relies on ISPs to route traffic carrying security

    verifications, while BC provides validation.

    In [141], the authors propose an SC-based data sharing and

    AC mechanism for end-point communication in IoT devices

    to resolve trust issues. The proposed system consists of

    SCs for DM in an untrusted environment. Three SCs are

    used – Access control contract (ACC), Register Contract

    (RC), and Judge Contract (JC). ACC maintains the AC for

    any requester and oversees the overall communication AC

    and data sharing between IoT devices. RC is responsible

    for the authentication of requests and registers them. The

    behavioral analysis is done by JC, which checks the node

    for misconduct and generates alert messages. An ACC

    is invoked when an AC request is sent, and the request

    is forwarded based on the access permission level. After

    objects accomplish the request, the corresponding transac-

    tion is stored on the chain. The security analysis shows

    that the proposed system is open access and secure, and

    the trustworthiness is maintained throughout using SCs.

    The model is evaluated against cost and shows that ACC

    consumes more execution and transaction energy than other

    SCs.

    In [142], the authors propose a BC-based AC mecha-

    nism with secure delegation services, an integrated BCT

    network for eliminating a central delegation service, and

    114

    Sadia Showkat, et al.:Securing the Internet of things through Blockchain approach.

    TABLE IV. IoT Security Tasks - Existing centralized and BCT Solutions.

    IoT Security tasks

    Aim

    Existing

    solutions/Cloud-

    based solutions.

    Existing BIIT solution archi-

    tectures.

    Key

    Management

    and Access Control.

    Provision of fine-grained AC mech-

    anisms in untrustworthy environ-

    ments.

    Applying KM strategies.

    Trust and authentication

    Centralized KM services.

    Public key Infrastructures.

    Pre-shared key mechanisms.

    Key pool frameworks.

    BDKMA [138].

    Bloccess [139]

    BorderChain [140]

    SC-based

    AC

    mechanism

    [141]

    BACI [142]

    BPRPDS [143]

    Node

    Authentica-

    tion

    Prevention from false data.

    Secure device-device communica-

    tion.

    Prevention from DoS, Imperson-

    ation

    RFID- unique fingerprints.

    Third-party

    authentication

    centers.

    Authentication protocols.

    Digital signatures.

    Identity-based

    cryptography

    (IBC)

    Two-factor authentication.

    BASA [144]

    Out of Band Authentication

    scheme [145]

    P2P IoT node authentication.

    [146]

    Decentralized authentication

    scheme. [147]

    BC-based Node Authentica-

    tion [148]

    Data

    sharing

    and,

    Routing security.

    Secure exchange of data

    Prevention of data tampering during

    an exchange over the network.

    Intrusion Detection and pre-

    vention methods

    SDN controllers

    Cryptographic algorithms for

    symmetric encryption

    Hashed-based Security.

    Network routing protocols.

    Authorization protocols.

    BC based user Authentica-

    tion [149]

    MicrothingsChain [150]

    BC-based

    security-driven

    Routing framework [151]

    Shared

    memory,

    BC-based

    secure and efficient RP [152]

    LW- BC assisted secure rout-

    ing of UAS [153]

    Prevention of soft-

    ware failures.

    Protection

    from

    Malware,

    Spy-

    wares, and Adware.

    Protection from Ransomware.

    Protection from malicious scripts.

    Service contract management

    Static

    software-centric

    approaches

    for

    Malware

    detection.

    Signature-based detection

    Anomaly-based detection

    IoTMalware [154]

    B2MDF [155]

    BC-based

    distributed

    anti-

    malware system [156]

    Data

    storage

    and

    management.

    Offering reliable data storage.

    Trust management.

    Data Loss resilience and Data re-

    covery.

    Supervision, Enhance man-

    agement

    Platform monitoring

    Database

    backup

    management, Service support

    platforms.

    Disaster control and recovery

    management.

    Pdash [157]

    BC-based

    Secure

    storage

    [158]

    Design principles for DM

    [159]

    BlockTDM [160]

    BC and DRL based DM

    [161]

    Int. J. Com. Dig. Sys. 13, No.1, 97-129 (Jan-2023)

    115

    event and query-based services. The device is assigned

    to a private group, and subsequent permissions are given

    through a delegation mechanism performed by a BC. The

    architecture consists of low-powered IoT devices, powered

    user devices with computation and storage capacity, an

    application manager for user interface and registration, an

    IoT manager for data filtering and query management, a BC

    Manager (BCM) for SCs and AC management. The BCM

    registers the IoT devices and deploys an SC for each device.

    BCM allows delegates to activate or deny the permission

    stored in the SC. The SC stores devices’ platform hashes

    and delegation policies. The BC miners verify before any

    permission activation. The proposed model is for private

    networks for increased throughput and reduced latency, but

    the model cannot be replicated on large-scale IoT systems

    without affecting the network performance.

    In [143], the authors propose a BC-based privacy-preserving

    and rewarding private data sharing scheme, a BC-based

    incentive mechanism for private data exchange.The data

    owner publishes private data and receives a payment anony-

    mously in the BC, while data consumers obtain licenses

    anonymously through SCs, where licensing technology en-

    sures access control for multi-sharing. The authors leverage

    Monero technology to ensure the untraceability and un-

    linkability of DUs while getting private data, ensuring that

    no one can develop a dat user behavior profile database.

    The authors incorporate the non-frameability characteristic

    into the anonymous incentive data sharing scheme. Honest

    data consumers can refute the frame up using a deniable

    ring signature without revealing their genuine identity. The

    authors present the security model, provide the formal secu-

    rity proof using the random oracle model, and demonstrate

    the model’s feasibility in real-time IoT architectures. The

    authors have proved the effectiveness of their technique and

    compared it to various undeniable ring signature schemes.

    The results reveal that the computational cost increases

    linearly as the number of ring members increases.

    In [144], the authors propose an efficient BC-assisted secure

    cross-domain device authentication mechanism, inducing

    inter-domain trust and privacy in IIoT applications. Identity-

    based signatures induce authentication in this mechanism,

    and privacy is induced by designing the identity manage-

    ment mechanism. The cross-domain authentication privacy

    perseverance also introduces a key negotiation mechanism

    to prevent eavesdropping on the insecure channel by negoti-

    ating session keys. The architecture consists of four layers.-

    Entity layer(EL), Agent layer(AL), BC Layer (BCL), and

    Storage Layer(SL). EL consists of a key generation center

    (KGC) and IIoT devices. KGC is responsible for the gener-

    ation of private keys for IIoT devices. AL consists of the BC

    Agent Server (BAS)and Authentication Agent Server(AAS).

    The model employs three types of authentication- Unilateral

    authentication, where users authenticate a device, Mutual

    authentication, where two devices authenticate each other;

    and cross-domain authentication, carried by KGC, BAS, and

    AAS. The domain-specific information is encapsulated into

    the consortium BC node in transactions and is acquired

    by other domains for authentication. The authentication

    agent server executes signature generation and verification

    operations on behalf of requesting devices. With an increase

    in the number of endorsing and validating nodes, the BC

    consensus time increases, introducing latency in the system.

    In [145], the authors proposed an out-of-band two-factor

    authentication scheme to prevent impersonation attacks on

    large-scale IoT devices using “device relationship” and

    BCT. The out of band performs the secondary authentication

    to distinguish home IoT devices from the malicious IoT de-

    vices. There are four components of the said authentication

    scheme- Authentication Subject(AS), which is any device

    that wants access to resources, Related Device(RD) that

    performs secondary authentication, BC that stores the ‘Re-

    lationship information’ for every authentication subject with

    the related device and Authentication Executor (AE) which

    coordinates the two factors out of band authentication. A

    relationship contract stores the mapping of AS address

    to ‘Relationship data’. When an AS requests access, AE

    retrieves the corresponding information from the BC, selects

    the RD in the AS neighborhood, and sends the correspond-

    ing action sequence. The corresponding RD invokes SC to

    send the verification result to BC, and finally, AE checks

    BC for verification results utilizing SC. The model has not

    been implemented on commercial IoT devices due to close-

    sourced hardware and software, and there are considerable

    CPU and memory overheads in the authentication stage.

    In [146], the authors propose a BC-based authentication

    mechanism for the low-power sensor nodes that are part

    of p2p networking using the sequence number of sensor

    nodes. This paper proposes verification through SHA 64-

    bit hash function to confirm confidentiality and integrity

    without compromising performance. The sink node(SN)

    assigns the sequence numbers by a broadcast-response-

    based mechanism for registering legitimate devices. The SN

    keeps a record of the other node’s identity in the form of the

    Ids, sequence number, and hash value; therefore, the sink

    detects a malicious node by verifying the sequence number

    and the hash value. A mutual level node authentication

    model is used where a node and its sequence number store

    all other nodes’ sequence numbers. The node identifies the

    particular node for communication, compares the corre-

    sponding sequence number, and verifies the message by

    comparing the transmitted hash value. Thus neighbors’ hash

    function detects a malicious node and secures the model

    from impersonation. However, as the network complex-

    ity increases, the sink node has to store many sequence

    numbers. Further, the sink node acts as a point of failure,

    and a legitimate node can become corrupt and allow other

    malicious nodes to transmit the messages.

    In [147], the authors propose an authorization and au-

    thentication mechanism for LW IoT devices that improve

    the IoT network’s performance. The proposed mechanism

    is based on the public BC mechanism and uses a fog

    computing network to achieve the desired task. The system

    architecture is divided into two layers: the device layer

    and the fog layer. The device layer consists of the many

    low-powered and low computational devices responsible for

    generating the data in the network. The IoT devices can

    116

    Sadia Showkat, et al.:Securing the Internet of things through Blockchain approach.

    be grouped depending upon the customized functionality

    they perform. The fog nodes in a particular group perform

    the same functionality. On the other hand, the fog layer

    is a BC-enabled fog device connected to the internet for

    working together. The fog nodes perform the CM execution

    to validate the transactions and create the blocks. The

    mechanism proposes three phases -The initialization phase

    consists of registering the system and devices with the

    closest BC-enabled fog nodes. The device authentication

    phase involves authenticating the devices with the BC-

    enabled fog node by mapping the system ID, device ID, and

    public address. Device-to-device communication involves

    the secure transmission of the message between the same

    system’s fog nodes or different systems. Before the device-

    to-device communication, both the devices are authenticated

    by the BC-enabled fog node. After that, a block is created

    in the BC, and subsequently, a secure channel is established

    between the devices. However, this mechanism assumes that

    fog nodes and admin are trusted and that communication

    between fog devices and nodes is secure.

    In [148], the authors propose a node authentication model

    for the IoST(Internet of Sensor Things) based on the BC

    mechanism. The base station validates any node’s creden-

    tials whenever it performs any action in the network.The

    authors have employed identity authentication with PoA

    as the consensus approach to reduce computational costs.

    The miners are pre-selected, and following the authenti-

    cation request, the registered nodes are authenticated.The

    request contains IDNode(Node ID), MACAddrNode(MAC

    address), and ReputationNode(the reputation value assigned

    to a certain node based on its previous history in the

    network ), which are already stored on the BC. The au-

    thentication is carried out by comparing the credentials of

    nodes previously stored in the BC. The BC determines

    whether or not the credentials provided by nodes match

    the credentials currently stored in the BC. If the credentials

    match the information provided, the nodes are authenticated

    and broadcast as legitimate nodes. A SC is deployed on the

    base stations that track all the network transactions. The

    system model is predicated on two assumptions: Firstly,

    base stations are accepted as legitimate and provide secure

    services to consumers, and secondly, symmetric keys are

    securely transferred in the network.

    In

    [149],

    the

    authors

    propose

    a

    user

    authentication

    strategy

    based

    on

    BC-enabled

    fog

    nodes

    that

    inter-

    face with Ethereum SCs to authenticate users to access

    IoT devices.The major stakeholders include Administra-

    tors(responsible for controlling access permissions for IoT

    devices), End users(interested in requesting an IoT de-

    vice service), Fog nodes(for localized storage), and cloud

    servers(storing IoT data), all having direct access to SCs via

    an Ethereum client in the case of fog and cloud nodes, or via

    a front-end application/wallet in the case of administrators

    and end-users. IoT devices have unique Ethereum addresses

    (with public and private keys), but they lack connectivity

    and do not interact with SCs. The system interactions

    are divided into off-chain and on-chain. In the on-chain

    interactions, the admin constructs the SCs, registers the

    IoT devices, maps them to a fog node, and may grant

    end-users access to certain IoT devices. The SCs check

    the list of authorized users, and the user receives a SC

    acceptance token which it uses to authenticate itself off-

    chain. The authors have provided the security analysis of

    the architecture,but the cost analysis of utilizing Ethereum-

    based SCs is unaccounted for.

    In [150], propose a decentralized BC-based architecture

    with SCs to allow edge computing nodes to store IoT

    data and securely interact with one another.The archi-

    tecture is composed of 4 layers- Information aggrega-

    tion layer(consisting of IoT-like devices), Edge computing

    layer(consisting of edge devices with fair computation capa-

    bilities), Service supporting layer(responsible for provision

    of services), and Application layer.The collaboration with

    other edge computing nodes must first be certified by the

    edge computing nodes, which will result in the exchange of

    MicroCoins(introduced cryptocurrency) between members.

    The model uses a publish-subscribe mode, allowing users

    to access data across domains. The users or application

    developers first subscribe to the data publisher from the

    edge computing node pool for data exchange. The data

    publisher then supplies the subscription data and submits

    a transaction to the BC-enabled SC to manage the pre-set

    business model while providing the required data. The au-

    thors introduce a new CM called Proof-of-Edge computing

    to reach consensus among all edge computing nodes and

    avoid centralization. All corresponding operations must be

    documented in BC to obtain self and other domain audits.

    In [151], the authors propose integrating Network Function

    Virtualization(NFV), software-defined network(SDN), and

    BC to create a flexible and reliable routing architecture

    for IIoT. SDN and NFV are responsible for creating pro-

    grammable forwarding devices that create the network’s

    optimal routing policies. The controllers are secured using

    BCT and take decisions and collect the data from the

    nodes to detect mistrust. A secure path is acquired by

    adequately removing the malicious node from the IIoT

    network by periodic monitoring and collecting network

    data. Each controller has a distributed ledger, and malicious

    nodes are identified by calculating the network’s trust value

    during behavior authentication stored in the BCs. The

    synchronization reaches a consensus among various ledgers

    transmitted through a control channel. Different controllers

    handle routing requests through an access point. The exper-

    imental evaluation shows that the model outperforms the

    state-of-the-art systems in average delay over attacks and

    packet loss rate. However, the frequent calculations of trust

    values lead to substantial computational power, bringing

    overheads in the system, which must be addressed without

    compromising the model’s security.

    In [152], the authors propose a routing protocol for the

    wireless sensor network that uses BCT to make routing

    more efficient and secure. The nodes present in the network

    are treated as the coins, and the routing path for the message

    is treated as the transaction, which is subsequently added to

    the BC. Initially, all the nodes are owned by the sink and

    considered inactive, and the rest are active. When an event

    Int. J. Com. Dig. Sys. 13, No.1, 97-129 (Jan-2023)

    117

    occurs, the nodes access the BC to find the optimal path to

    the sink. Dijkstra’s algorithm obtains the message’s optimal

    path by a cost function determined by signal and interfer-

    ence. This optimal path is the transaction to be added to the

    BC and transmit the message after eliminating malicious

    nodes detected by the BC security mechanism. The routing

    process is made secure by trusted cryptographic algorithms

    such as ECDSA224 and SHA512. While transmitting the

    message to the sink, the node seeks the ‘ownership’ of

    the path’s nodes transferred back after successfully sending

    the message. However, the model assumes that all nodes

    are homogenous and that the sink has enough resources to

    handle the messages. Complex calculations are involved in

    finding routes that increase the computational overhead and

    network cost.

    In [153], the authors propose a BC-assisted secure routing

    algorithm for a network based on 5G new radio for the

    swarm Unmanned Aircraft System(UAS) to prevent the

    disruptive attacks committed on UAS networking. The BC

    performs two main functions -Selecting the secure next

    hop for transmission of a packet from one to another

    and the authentication and verification of UASs. The BC

    distributed updated block digests to the whole swarm after

    a UAS is authenticated. The BC used is LW, which is

    different from the conventional BC distribution. Instead of

    using conventional mechanisms, the traffic status of UASs

    is leveraged to achieve a consensus known as Proof of

    Traffic(PoT). The neighborhood of UAS is decided based

    on the destination and record of the digest in BC, and each

    UAS in the swarm delivers packets to its neighbors with

    beamforming. The block digest records are checked so that

    the unauthenticated UAS are not chosen as hops. The attack-

    ers need the specific BC digest to launch an attack, which is

    computationally very expensive. PoT employs the passive

    broadcast for block synchronization, unlike conventional

    algorithms, which reduces the system’s overheads suitable

    for LW environments. However, the model assumes that the

    hackers cannot compromise a UAS in joining the swarm

    UAS networking. The untrusted UAS cannot recuperate

    the signal with side lopes leakage of beamforming without

    directional transmission.

    In [154], the authors propose a malware detection technique

    in IoT devices using Deep Learning (DL)and BCT, where

    SCs detect malicious applications. SC guides users’ and

    end-developers’ interactions, stores information about new

    apks, and enables tracking of malicious apps on the net-

    work. The malware features are shared and trained on DL

    models in android IoT devices. After the user uploads an

    app to the network, it is stored in an IPFS where the DL

    models extract features. The hash values obtained from the

    training models are stored in an immutable fashion on a BC

    network to prevent decompilation and repacking attacks by

    reverse engineering methods. When a user downloads a new

    app, the user sends the hash to the network for verification,

    where an SC decides whether the app is malicious or not.

    The model has been evaluated on 18,850 android appli-

    cations and 10,000 malware android packages and shows

    considerable efficiency. However, the analysis of bandwidth

    consumption by the IPFS based storage is not given, which

    is important, especially in the case of metered connections

    In [155], the authors propose a BC-based framework for

    detecting malware in mobile applications before down-

    loading. The model relies on dynamic and static analysis

    for detecting malware. The model uses two external and

    internal BCs. The internal private BC(IPB) contains feature

    extractors(FEs) to extend the dedicated internal private

    BC(DIPB). FE extracts information during the lifetime of an

    app. These features can be static, extracted from the file, or

    dynamic and extracted by monitoring the run time behavior.

    Each FE component is connected to a DIBP that tracks

    each app using the behavioral information. A dedicated

    external private BC(DECB) for each application contains

    scanning information of application versions. A determinant

    agent(DE) is part of the BC and based on the data in the

    BC, it classifies the app as malicious or not. DEs attach their

    decisions to DEPBs with relevant information. Although

    the dedicated BC for each app reduces the computational

    burden of one BC, it also increases the system’s overall

    complexity.

    In [156], the authors propose a distributed anti-malware

    protection mechanism to support a hybrid signature and

    anomaly-based detection model. When a new file is added,

    the users make a signed hash of the file corresponding

    hash is sent to the BC ledger. The verification is done on

    signature-based detection, and the system process and ports

    are checked for malicious activity. However, the signature-

    based verification suffers from detection evasion if the hash

    of the malicious file is changed. To avoid this, if the hash

    comparison does not match, a notification is sent to the

    users, and the system process and network ports are con-

    tinued to be examined. If any suspicious activity is found,

    the file is blocked from self-executing. The BC is updated

    with the hash of the malware file detected. This can prevent

    DDoS attacks where the malicious app may attempt to gain

    access to IoT devices. However, the proposed mechanism

    is suited for servers at the application layer for personal

    computers and servers but not for resource-constrained IoT

    devices.

    In [157], the authors propose a three layer parallel dis-

    tributed architecture for storing and sharing IoT data-

    BC layer, Node layer, Distributed storage layer aimed to

    improve the scalabilty of BC-based systems. The data

    generated by IoT devices is encrypted, and the hash value

    of the data is generated and stored in the BC as its unique

    identity. BC is the system’s control layer and is responsible

    for validating transactionsand data access control and also

    provides a platform for SCs to support various applications.

    The raw data is encrypted locally and stored in multiple

    storage nodes across the distributed network using the

    Kademlia method so that the data host has no access to

    the original data. The encryption technique used is AES

    (Advanced encryption standard). The data owner adds a

    digital signature to the data block’s digest, allowing the

    data’s ownership to be authenticated. The efficiency analysis

    reveals that in a network of 2n nodes, retrieving any data

    requires a maximum of n steps.

    118

    Sadia Showkat, et al.:Securing the Internet of things through Blockchain approach.

    In [158], the authors propose a BC-based solution for the

    decentralized storage mechanism and secure data transmis-

    sion, in this case, a sensing image, in IoT networks. This

    paper proposes using an encryption algorithm for secure

    data transfer and an intelligent verification algorithm for

    data storage and signature verification. A blocking algo-

    rithm is employed for sensing an image, and an intelligent

    sensor divides the image using image sensing and block

    data partitioning. A public key generation algorithm is

    leveraged, and the smart image sensor securely transmits

    the key information to BC. The sensor signs the data

    blocks with different keys at different intervals and transmits

    the message to the server, where a signature verification

    algorithm is employed. If the signature is verified, the data

    block is stored. The theoretical analysis shows that the

    model is resistant to counterfeit, theft, replay, and DoS

    attacks. The BC uses only one public key to authenticate

    different blocks, reducing the cost, but the intelligent sensor

    calculates n+1 keys for n blocks and stores n keys.

    In [159], the authors propose a theoretical prototype of

    BC-based IoT architecture using a design science research

    approach. The approach aims to design a prototype for data

    center decision-making, simplicity, complete digitization,

    tamper resistance, heterogeneity, and authentication of BC

    data. The Raspberry Pi is configured as a client node

    for the Ethereum BC, containing the storage and compu-

    tational configuration layer. The model has three prime

    components- IoT data logger(senses the data), SCs (stores

    data, chain address of the devices, and records events),

    and the monitoring dashboard component(displays data to

    end-users, communicates with the SCs, and behaves as a

    mining node). The system considers Ethereum BC, where

    SCs are executed on a virtual machine to reduce costs. The

    accounts on Ethereum are classified as contract (contain

    balance and contract storage executed via a transaction sent

    to its unique address)and externally owned(refer to external

    agents and contain only balance). The prototype is designed

    for high data availability, parsimony, and modularity in

    IoT ecosystems essential for efficient DM, but the design

    encounters high operational costs and scalability issues.

    In [160], the authors propose a trusted DM scheme for

    sensitive data distribution and storage in EC. The ar-

    chitecture is divided into three layers- Edge device(Fog

    nodes), BC Network(to which data is committed), Edge

    nodes(provides services), and Cloud center layer(complex

    problem solving). BlockTDM is reliant on a multi-step mu-

    tual authentication scheme based on certificates. A modified

    PBFT - broadcast multi-signature-based CM is employed

    where a client commits the message to the endorsing

    pairs (EPs) and the management pair(PM). PM verifies the

    signature, the endorsing pairs simulate, and the result is

    broadcasted to an ordering service peer and delivered to

    the bookkeeper. A multichannel matrix-based architecture

    is considered for data protection for blocks on different

    channels and user-defined data encryption for interchannel

    security. The scheme employs Hyperledger Chaincode as

    an SC connected to the EPs and is invoked to process

    transactions and query over the protected BC data. SCs are

    designed for data of various kinds, such as multimedia and

    documents, to support specific block DM. The model is

    highly secure but has O(n2) communication complexity.

    In [161], the authors propose a BC and Deep reinforcement

    learning(DRL) based scheme for efficient DM to achieve

    high-quality data collection with limited mobile terminal

    (MT) energy resources and sensing range and secure data

    sharing in Industrial IoT. The model proposes collecting the

    data through a DRL approach fed to the BC network. The

    connection of each MT is validated, and data is encrypted

    using keys and digital signatures. BC integration ensures

    data security and reliability when MTs share data and

    prevents the systems from attacks. Multiple Ethereum nodes

    are distributed across a private chain that interacts with the

    SC deployed on the chain. A certification authority is set up

    to maintain the data’s reliability and authenticity to avoid

    fraudulent transactions by MTs. The model is tested on the

    severity of DoS and DDoS attacks, and it is that DDoS

    attacks have a 0.1 % worse impact than DoS attacks. The

    increase in MTs does not impact the network, but both

    the attacks affect the database as the transaction frequency

    increases affecting the data storage.

    1) Critical Analysis of the proposed architectures:

    The evaluation of these studied techniques reveals that

    a tradeoff exists between IoT security and other perfor-

    mance criteria. Most of the proposed frameworks have been

    carefully verified against several security metrics, but the

    cost issues for customers or businesses are not addressed.

    The model in [145] cannot be implemented on commercial

    IoT devices due to close-sourced hardware and software,

    and there are considerable CPU and memory overheads in

    the authentication stage. In the architecture presented in

    [146], the sink node has to store many sequence numbers

    as the network complexity increases. In [151], the frequent

    calculations of trust values lead to substantial computational

    power, bringing overheads to the system. In [152], complex

    calculations are involved in finding routes that increase

    the computational overhead and network cost. In [154],

    the analysis of bandwidth consumption by the IPFS-based

    storage is not given, which is important, especially in the

    case of metered connections. In [155], the dedicated BC

    for each app increases the system’s overall complexity. In

    [160], the model has a communication complexity of O(n2).

    Many architectures have ignored or not completely ad-

    dressed the issues of latency, scalability, energy consump-

    tion, computational power, or the security aspect of privacy

    leakage. Most methods restrict to a certain aspect of IoT

    security while ignoring the computational overheads of

    implementation on a large scale. The architecture of [139] is

    suitable for the low-scale implementation, but the network

    performance is compromised if the network complexity

    increases, creating latency and storage problems. The model

    is resistant to AC message tampering until one-third of

    the network is not compromised. The proposed model in

    [142] is for private networks and cannot be replicated

    on large-scale IoT systems without affecting the network

    performance. The architecture proposed in [144] suffers

    Int. J. Com. Dig. Sys. 13, No.1, 97-129 (Jan-2023)

    119

    from latency issues when the number of endorsing and

    validating nodes increases. The design in [159] encounters

    high operational costs and scalability issues.

    The authentication, trustworthiness, and authorization in

    many BC-based architectures are achieved through SCs,

    introducing transactional costs. In [141], ACC consumes

    high execution and transaction energy. In [149], the security

    analysis is provided in-depth, but the cost analysis of

    utilizing Ethereum-based SCs is unaccounted for. Many

    architectures provide security but are not suitable in con-

    strained environments. In [156], the proposed mechanism

    is suited for servers at the application layer for personal

    computers and servers but cannot be replicated for IoT

    devices.The architectures are not truly decentralized and

    run on some form of central scheme and are prone to

    security issues. In [146], the sink node acts as a point of

    failure, and a legitimate node can become corrupt and allow

    other malicious nodes to transmit the messages. BC-based

    systems incur high storage costs too. In [161], the increase

    in MTs does not impact the network, but both the attacks

    affect the database as the transaction frequency increases

    affecting the data storage.

    Many architectures rely on assumptions that may not be

    practically true. The architecture presented in [138] runs

    on various assumptions, such as that all the management

    domains have the same number of user equipment, the min-

    ing is done after the propagation procedure ends, the SAMs

    have the same transmissibility to propagate transactions and

    mining time and that there are enough power resources to

    carry out the verifications. The architecture of [148] runs on

    the assumption that base stations are always legitimate and

    that symmetric keys are securely transmitted in the network.

    In [147], the mechanism assumes that fog nodes and admin

    are trusted and that communication between fog devices and

    nodes is secure. In [152], the model assumes that all nodes

    are homogenous and that the sink has enough resources to

    handle the messages.

    B. Security benefits of BIIT systems :

    Despite the limitations, there are significant benefits of

    BIIT systems. The information created by IoT frameworks

    is broadly significant and confidential, and BCT substan-

    tially increases the security in distributed networks. BIIT

    systems offer the following security merits:

    1)

    Data integrity and confidentiality: The transactions in

    BIIT systems are verified through a CM, and all the

    nodes have an identical copy of the ledger. The data

    and transactions are highly encrypted by leveraging

    cryptographic mechanisms intrinsic to the BC.

    2)

    Data provenance: BIIT systems offer traceability by

    keeping a historical record of the timestamp in the

    BC.

    3)

    Fault tolerance: In BIIT systems, the data is dis-

    tributed across multiple devices, and a single node

    failure does not disrupt the system’s functionality.

    This eliminates a single point of failure and makes

    the BIIT systems more robust than centralized IoT

    systems.

    4)

    Secure communication and resistance to attacks: CM

    prevents the malicious nodes from corrupting the

    system. Launching an attack requires leveraging high

    computational resources.

    5)

    Trust management: BCs bring trust in the commu-

    nicating nodes and, through SCs, provide rules that

    guide a user’s authorization. SCs invoke clauses in

    the event of mistrust and penalizes the user for the

    breach.

    6)

    Access control: BIIT systems provide uniform access

    across multiple IoT systems. In BIIT systems, the

    IoT device is coupled with a unique identifier, and

    efficient KM and AC mechanisms for interoperability

    are available.

    7)

    Removing third-party risks: BCs decentralize the

    structure authority and provide secure DM with a

    decentralized architecture. Thus, the data is not under

    the control of a private organization but distributed

    across a plurality of nodes.

    BIIT systems offer higher security than centralized IoT

    architectures. A comparison is given in Table V.

    9. Challenges, Open Issues, and Research Directions:

    BCT is emerging as a key paradigm for establishing

    trust, imparting security, auditing capability, and verifia-

    bility in systems. BIIT systems are secure but require a

    scalable architecture with sufficient throughput and low

    latency. IoT systems are constrained, and designing less

    intensive security measures for low-powered devices with

    low storage, computational, and network overheads are in

    progress. The constrained nature of IoT and other factors

    hinders the deployment of BIIT systems, briefly discussed

    below:

    1)

    Cost of IoT storage through SCs: In Ethereum SCs,

    the amount of computational work required to com-

    plete an operation in a transaction is measured in

    Gas units. The currency to pay for Gas units is Ether/

    gwei (1 gwei= 10-9 ethers). There is no fixed price

    set for the gas, and the sender enforces a gas limit

    in the transaction and specifies the gas cost. Miners

    mine the blocks which specify high gas prices. The

    price of Ethereum has risen from a single-digit USD

    value in 2015 to touching 2500 USD in 2021 [162].

    Suppose a transaction requires 100 million gas units

    with 1 gas unit set at 25 gwei; the corresponding

    price in dollars to complete the transaction would

    be 108x25x 10-9x2500=6250 USD. With more de-

    vices in the network, data storage complexity also

    increases. BCs store an immutable, permanent record

    of data, and with the increase in the nodes, the

    size of the chain also increases, which causes stor-

    age/memory concerns. Although BC eliminates the

    management costs in a system, it is considerably

    expensive to store data in a BC. Ethereum costs

    76000 USD per GB, which is very expensive for

    120

    Sadia Showkat, et al.:Securing the Internet of things through Blockchain approach.

    TABLE V. Evaluation of network security - Existing centralized architectures Vs.
    BIIT architecture

    IoT

    Network

    level

    Security issues

    Evaluation of IoT Network Security

    Existing network/ Cloud architecture of IoT

    BIIT architecture

    Applica-

    tion Layer

    .

    Software failures

    Weak operating systems and Vulnerable application soft-

    ware.

    StrongOperating systems

    Tested applications

    Malware attacks

    Evasion of anti-malware schemes.

    Late/ False detection.

    Secure storage of Malware in-

    formation.

    AC and Identity

    Authentication.

    Weak AC mechanisms.

    Fine-grained hierarchical AC

    mechanisms.

    Data protection

    No encryption for data at rest.

    Strong encryption for Data at

    Rest and data communication.

    Data Loss

    Vulnerable third-party software modules. Hackable cen-

    tralized servers.

    Susceptible to data leakage.

    Decentralized and distributed

    modules.

    Robust architecture.

    Network

    Layer

    Phishing

    Vulnerable to

    Centralized attacks.

    Secure exchange of data be-

    tween platforms.

    Interoperability

    Not suitable for cross-domain authentication.

    Inter-domain authentication.

    Multiple domain access.

    Cross-domain operations

    Confidentiality

    Unauthorized access.

    Data confidentiality is main-

    tained.

    Routing security

    Non –Robust routing information.

    Traceable

    and

    tamper-

    proof routing information

    Data security

    Susceptible to Channel attacks such as Replay attacks,

    Man in the middle attack, Impersonation, Ephemeral se-

    cret leakage.

    Secure exchange of data be-

    tween platforms.

    Trusted routing environment.

    Perception

    Layer

    Key

    Management

    Strong dependence on the third party for KM.

    Vulnerable to Privacy breaches.

    Secure distribution of keys

    Privacy preservation.

    Data protection

    Susceptible to security attacks.

    Data repudiation.

    DoS.

    High Data Security.

    Mass node au-

    thentication

    Reliance on third-party authentication centers.

    Distributed and decentralized

    authentication mechanisms.

    Consensus-based Authentica-

    tion.

    Dynamic nature

    of IoT topology

    Heterogeneity hinders Security.

    Transformation of heteroge-

    neous data into a uniform for-

    mat.

    Protection

    from

    false data

    Susceptible to data tampering and leakage.

    Traceable data.

    Data tampering is costly.

    Auditability.

    Encryption

    Scalability issues while employing digital signatures.

    Highly encrypted data.

    Int. J. Com. Dig. Sys. 13, No.1, 97-129 (Jan-2023)

    121

    IoT applications. The research is moving towards

    cost analysis and solutions for IoT storage through

    BC SCs. In [163], the authors investigate the storage

    costs of numeric data on BC through SCs. The data

    storage is conducted using two strategies. In scenario

    1, the data is stored in an array, and in Scenario

    2, the data is encoded into one variable using two

    methods- Encoding within SC and encoding outside

    SC. The experimental results show that encoding the

    data outside SC into one variable is cost-efficient

    compared to storing data in an array or encoding it

    into a variable within SC.

    2)

    Power consumption: IoT devices applyenergy-saving

    strategies such as “Sleep and Wake up” scheduling

    to increase the network lifetime. However, due to

    BC’s unique way of storing and continuous data

    processing, the energy consumed by such a system is

    considerably higher than conventional systems. The

    authors in [164] estimate the energy consumption of

    various cryptocurrencies. The processing power is

    measured in hash rates. Bitcoin uses SHA-256 and

    has a rated power network of 4291,366 KWwhich an

    IoT node cannot support. Mining is computationally

    expensive, which necessitates specialized machinery

    and massive quantities of electricity.It is challenging

    to run BC as a full node on IoT devices. Recent solu-

    tions suggest using edge computing to enable mobile

    devices to offload the mining work to the cloud.

    Edge computing can be incorporated to help mobile

    devices offload mining work to cloud resources.

    The authors in [165] propose a 4-layer BC-based

    framework for IoT where the devices and servers

    participate in BC via p2p communication. The end

    devices handle simple operations while more pow-

    erful servers support the complex operations in the

    top tiers at the edge/cloud.

    3)

    Network model in BC systems: The expansion of

    the BIIT system creates new requesting blocks. The

    requesting block and the state data must lead to

    a consistent system state, and the newer clients

    synchronize with the existing state. The majority

    of the BC-based traffic models are p2p. The au-

    thors of [55] categorize it into three types- Gos-

    sip Protocol, Kademlia Algorithm, and DAG. The

    gossip-based BCs offer relatively less latency and

    energy consumption but achieve data integrity at

    the cost of large message overheads [166]. The

    Kademlia algorithm works with lesser communica-

    tion overhead, and the resource location in DAG is

    guaranteed. Ethereum also employs p2p networking

    with no trusted intermediary. The nodes themselves

    act as the service and the service providers to en-

    sure data synchronization [167]. Ethereum follows

    a discovery protocol that allows the nodes to find

    each other. BlIT systems must satisfy consistency

    in an asynchronous network with reduced latency

    and increased security. The security of consensus

    depends on the underlying network. Studying the

    network extensively to determine what affects the

    performance of a p2p network is an important issue.

    In [168], the authors study the network structure

    of Ethereum by running a customized version of

    Ethereum’s Go client, GETH, for seven months.

    4)

    BC Security and Privacy vulnerabilities: BC-based

    systems provide high security to systems by making

    data tamper-proof. However, BC itself exhibits secu-

    rity vulnerabilities. The adversity tolerance is further

    reduced with modifications in CMs for LW environ-

    ments. Common security threats to BC include Pro-

    tocol attacks, Ellipse attacks, the chance of double-

    spending, Consensus protocol attacks, SC Vulner-

    abilities, Programming frauds, Private Key Leak-

    age, DDoS attacks, and other security issues[169],

    [170]. Employment of communication security pro-

    tocols such as Datagram transport layer security

    is resource-intensive and not suitable. Further, all

    transactions in the BC are transparent. By analyz-

    ing the patterns of transactions from a user, the

    anonymity of a user can be compromised and lead to

    potential front-running. For private communications,

    protocols such as Telehash or Whisper can be inte-

    grated. Privacy leakage can be countered through pri-

    vacy protection mechanisms such as Zero-knowledge

    proof, Attribute-based Encryption [171]. However,

    these cryptographic algorithms are highly resource-

    intensive and unaffordable in LW environments.

    5)

    SC Vulnerabilities: A fault in the SC could be caused

    by a simple typing error, a misinterpretation of the

    specification, or a more severe programming error.

    BC is irreversible, and a minor glitch has many

    ramifications for SC security and functionality. For

    example, the quantity of gas that the transactions

    contained in the block can utilize is limited to

    prevent the chains from growing beyond a point. If

    data is stored in variable-sized arrays and accessed

    through loops, the gas can get exhausted before

    committing a transaction. Miners are compensated,

    but the transaction is reversed. As a result, testing

    mechanisms for SCs is a critical problem. The test

    mechanism must inspect the SC on enough data

    for all malicious and non-malicious inputs before

    deployment to detect anomalies. Furthermore, be-

    cause IoT systems are distributed across multiple

    locations, retrieving data from various sources can

    cause the SCs to become overburdened. It’s difficult

    to fine-tune SCs for IoT LW applications. SCs are

    associated with a variety of other challenges. The

    legal enforcement of SCs, for example, is currently

    restricted. Dual integration of SCs with real-world le-

    gal contracts is one solution that has been proposed.

    6)

    IoT specific Consensus: The abilities of the existing

    CMs are limited when applied to IoT and have not

    been tested thoroughly. Conventional CMs, such as

    PoW, is resource-intensive and cannot run on IoT

    devices. Even a powerful IoT node such as Rasp-

    berry pi3 can only achieve 104 hashes per second,

    122

    Sadia Showkat, et al.:Securing the Internet of things through Blockchain approach.

    while a Bitcoin network can conduct around 1019

    hashes per second. Integration of full BC nodes in

    IoT is in the nascent stage. Malicious attacks on

    lightweight CMs with low adversity tolerance can

    prevent valid transactions. A potential solution is

    to limit the consensus to the edge / decentralized

    cloud, while IoT nodes save only the hash values,

    but this increases the storage overheads on the edge.

    Furthermore, the interoperability and authentication

    standards for edge devices are limited.

    7)

    Throughput, Latency, Scalability, and Network com-

    plexity:BC systems do not scale well if the network

    size increases massively. The network efficiency re-

    duces as the network scales up and more authen-

    tication requests are handled, leading to network

    congestion. The growth of the chain further leads

    to bandwidth problems. The mobility of IoT devices

    also affects BC performance. BCs are inherently

    latency tolerant, and the mining time is induced to

    secure the networks further, which is unacceptable

    in real-time IoT systems such as IoV. A poten-

    tial solution is to integrate IPFS, AI, and ML to

    complement the BC. Off-Chain solutions can be

    integrated to increase the transaction throughput.

    IoT big data is posing challenges in real-time data

    delivery. Integration of ML in BIIT systems for IoT

    Big data analytics is hindered by storage, latency,

    scalability, and other challenges. Further investiga-

    tion is required to analyze the overheads introduced

    in BC-IPFS integration. Normalization and compres-

    sion techniques explicitly designed for BIIT systems

    where BC power is leveraged are required.

    8)

    Compatibility and Adoption: BC is an emerging

    technology and lacks standardization laws. Access

    control legislation is an issue in public BCs. IoT data

    is heterogeneous, and the diversity of IoT devices

    implies the need for different network protocols. Pro-

    tocol conversions to enable smooth communication

    are especially costly in BIIT systems. The large-

    scale adoption of BIIT applications needs significant

    infrastructural changes. A generic BC-IoT architec-

    ture is needed to bridge the gap between IoT service

    providers and BC. IoT service providers must modify

    the underlying naming and discovery schemes to

    comply with the BC mechanism. Laws and regula-

    tions concerning information security govern the IoT

    domain, and many countries have strict legislative

    rules regarding cryptocurrencies.

    A. Research Directions

    We present the following research directions based on

    our thorough study of the domain.

    1)

    1. Cost reduction strategies: The rising cost of

    Ethereum is impeding the use of BC in IoT. More

    research into strategies to lower the cost of BC

    adoption in IoT is needed. Given IoT Big data’s con-

    cerns, more efficient data representations that allow

    low-cost SC operations require further investigation

    to make large-scale IoT-BC systems commercially

    viable.

    2)

    IoT-BC Traffic Models: Performing large-scale data

    collection and traffic analysis of growing-BC chains

    is an understudied topic due to large-scale simulation

    and time requirements. The security of the consensus

    protocols is based on the assumption of efficient

    p2p overlay network operations. More research is

    needed to understand the parameters that influence

    the properties of p2p networks.

    3)

    Testing Mechanisms for SCs: The voids in the

    SCs can expose BC security. SCs are vulnerable to

    mining pool attacks because they are open source

    to all parties involved. Once deployed, the SC is

    irreversible and cannot be repaired in the event of

    a virus or a hacking attack. Thus, validating and

    devising unerring testing mechanisms for SCs and

    running them on sufficient data is an important

    research direction.

    4)

    At the Edge Consensus: IoT devices have limited

    computational and networking capabilities; thus, run-

    ning BC as a full node is difficult. It is critical

    to protect IoT suitable CMs from attackers from

    gaining control of the majority of hash power. De-

    signing IoT suitable mechanisms with good adversity

    tolerance and low latency is an open issue and a

    strong research direction.

    5)

    Integration with computing platforms:Due to the

    constrained nature of IoT devices, Fog /Cloud

    servers are added at top tiers, storing the entire BC

    information for transaction validation. It is necessary

    to enable IoT devices to push transactions to the

    BC without centralized block endorsement groups.

    Designing architectures for such integration without

    compromising the security and privacy concerns is a

    strong research direction.

    6)

    Network Configuration: There is no standard archi-

    tecture for BIIT systems. Integration of the cloud

    and the edge at a higher level is critical. Config-

    uring BCs at the node, edge, and cloud levels and

    load balancing and network congestion control for

    addressing increased validation requests are open

    research issues.

    7)

    Convergence of BC and ML: BC-based systems

    can benefit from the addition of MLalgorithms. SCs

    can be used to create a reward-based mechanism

    for training ML models. The potential of ML-BC

    integration has yet to be fully realized, but it is a

    promising future direction.

    8)

    Convergence of BC and IPFS: With IPFS, BC only

    saves the cryptographic hashes slowing down the

    chain development drastically. Through SCs, BC can

    allow access-controlled file sharing and secure stor-

    age of cryptographic hashes of IPFS. It is crucial to

    analyze the latency introduced in the IPFS primarily

    due to the contact with BC and the consequences on

    LW operations.

    Int. J. Com. Dig. Sys. 13, No.1, 97-129 (Jan-2023)

    123

    9)

    Securing BC and Transactional privacy: Pattern anal-

    ysis of transparent transactions exposes users’ pri-

    vacy. More research is needed to protect BC-based

    AC systems from security threats. Thus, a potential

    research direction is developing LW cryptographic

    algorithms for BCs to protect transactional and user

    privacy in BC-based IoT systems.

    10. Conclusion

    The disruptive attacks on IoT networks are predicted to

    be more severe in the future due to the advanced capability

    of B5G and 6G networks. The unique properties of BCT

    for enabling a p2p network with no centralized stakeholder

    controlling the system enable it to be a perfect security

    solution. BCs, through SCs, provide fine-grained AC by

    providing global functions of authentication, authorization,

    and KM, besides providing a distributed architecture for

    secure storage of hashes, verification rules, sensor data, and

    other information. However, IoT devices are constrained

    and require an LW implementation of CMs to bear the

    computational, storage, power, and network overheads. This

    paper presents a comprehensive comparison of BC solutions

    for IoT systems and concludes that BC can provide efficient

    KM and AC, node authentication, routing security, and se-

    curely store the domain-specific information. A detailed sur-

    vey of recent research on security enhancement, consensus,

    applications, integration with ML, and computing platforms

    is presented. We discuss IPFS, ML, and EC can facilitate

    BC as a crucial enabling technology for IoT. Through IPFS-

    enabled BCs, the growth of the chain is restricted by only

    storing hashes on the BC, and the AC list is maintained

    by SCs, enforced by the updated IPFS software. MEC is

    being considered to be a potential approach for achieving

    consensus for mobile users, facilitating BC applications in

    future mobile IoT systems.

    The convergence of BC and ML for IoT can enable ac-

    curate data analytics. 6G systems are expected to create

    a massive convergence of IoT, AI, EC, Quantum ML,

    and BCT for fast and secure systems that can support

    a plethora of devices. IoT systems are rapidly evolving,

    and as the number of network nodes grows, the tradeoffs

    between energy consumption, security, latency, throughput,

    and scalability become more complex. We conclude that

    BC and IoT technology have evolved separately and for

    futuristic IoT systems to reach their full potential, exten-

    sive research is needed in two domains- a) Blockchain as

    enabling technology in IoT and b)Enabling technologies

    for BC-based IoT. Challenges such as the rising cost of

    Ethereum, power consumption of IoT nodes, SC security,

    and legislation issues are hindering the large-scale adoption

    of BC-based IoT. Extensive research is needed on the

    parameters affecting the network properties, cost reduction

    strategies, encoding, traffic modeling, off-chain solutions,

    network configuration, transactional privacy, SC testing, and

    BC security, especially in LW environments.

    References

    [1]

    “The internet of things (iot) technology - ericsson.” [Online].

    Available: -https://www.ericsson.com/en/internet-of-things

    [2]

    D. S. Linthicum, “Connecting fog and cloud computing,” IEEE

    Cloud Computing, vol. 4, no. 2, pp. 18–20, March 2017.

    [3]

    S. Showkat and S. Qureshi, “Securing the internet of things using

    blockchain,” in 2020 10th International Conference on Cloud

    Computing, D. S. E. (Confluence), Ed., January 2020, pp. 540–

    545.

    [4]

    F. Gao, D.-L. Chen, M.-H. Weng, and R.-Y. Yang, “Revealing

    development trends in blockchain-based 5g network technologies

    through patent analysis,” Sustainability, vol. 13, p. 5, January 2021.

    [5]

    P. K. Sharma, M. Chen, and J. H. Park, “A software defined fog

    node based distributed blockchain cloud architecture for iot,” IEEE

    Access, vol. 6, pp. 115–124, 2018.

    [6]

    B. C. al., “When internet of things meets blockchain: Challenges in

    distributed consensus,” IEEE Network, vol. 33, no. 6, pp. 133–139,

    November 2019.

    [7]

    V. Hassija, V. Chamola, V. Saxena, D. Jain, P. Goyal, and B. Sikdar,

    “A survey on iot security: Application areas, security threats, and

    solution architectures,” IEEE Access, vol. 7, pp. 82 721–82 743,

    2019.

    [8]

    T. A. Butt and M. Afzaal, “Security and privacy in smart cities: Is-

    sues and current solutions,” in Smart Technologies and Innovation

    for a Sustainable Future, Cham pp, pp. 317–323, 2019.

    [9]

    A. Verma, A. Khanna, A. Agrawal, A. Darwish, and A. E.

    Hassanien, “Security and privacy in smart city applications and

    services: Opportunities and challenges,” in Cybersecurity and

    Secure Information Systems: Challenges and Solutions in Smart

    Environments, A. E. Hassanien and M. Elhoseny, Eds.

    Cham:

    Springer International Publishing, 2019, pp. 1–15.

    [10]

    F. Al-Turjman, H. Zahmatkesh, and R. Shahroze, “An overview

    of security and privacy in smart cities’ iot communications,”

    Transactions on Emerging Telecommunications Technologies.

    [11]

    N. Tariq, A. Qamar, M. Asim, and F. A. Khan, “Blockchain and

    smart healthcare security: A survey,” Procedia Computer Science,

    vol. 175, pp. 615–620, January 2020.

    [12]

    S. Tian, W. Yang, J. M. L. Grange, P. Wang, W. Huang, and Z. Ye,

    “Smart healthcare: making medical care more intelligent,” Global

    Health Journal, vol. 3, no. 3, pp. 62–65, September 2019.

    [13]

    S. Zeadally, F. Siddiqui, Z. Baig, and A. Ibrahim, “Smart health-

    care: Challenges and potential solutions using internet of things

    (iot) and big data analytics,” PSU Research Review, vol. 4, no. 2,

    pp. 149–168, January 2019.

    [14]

    C. Bekara, “Security issues and challenges for the iot-based smart

    grid,” Procedia Computer Science, vol. 34, pp. 532–537, January

    2014.

    [15]

    K. Kimani, V. Oduol, and K. Langat, “Cyber security challenges

    for iot-based smart grid networks,” International Journal of Criti-

    cal Infrastructure Protection, vol. 25, pp. 36–49, June 2019.

    [16]

    A. Ghasempour, “Internet of things in smart grid: Architecture, ap-

    plications, services, key technologies, and challenges,” Inventions,

    vol. 4, p. 1, March 2019.

    [17]

    W. Ali, G. Dustgeer, M. Awais, and M. A. Shah, “Iot based smart

    home: Security challenges, security requirements and solutions,” in

    124

    Sadia Showkat, et al.:Securing the Internet of things through Blockchain approach.

    2017 23rd International Conference on Automation and Computing

    (ICAC, September 2017, pp. 1–6.

    [18]

    D. Geneiatakis, I. Kounelis, R. Neisse, I. Nai-Fovino, G. Steri, and

    G. Baldini, “Security and privacy issues for an iot based smart

    home,” in, vol. 2017, no. 40, pp. 1292–1297, May 2017.

    [19]

    Z. Shouran, A. Ashari, and T. Priyambodo, “Internet of things

    (iot) of smart home: Privacy and security,” International Journal

    of Computer Applications, vol. 182, pp. 3–8, February 2019.

    [20]

    M. Ayaz, M. Ammad-Uddin, Z. Sharif, A. Mansour, and E.-H. M.

    Aggoune, “Internet-of-things (iot)-based smart agriculture: Toward

    making the fields talk,” IEEE Access, vol. 7, pp. 29 551–12 958,

    2019.

    [21]

    M. A. Ferrag, L. Shu, X. Yang, A. Derhab, and L. Maglaras,

    “Security and privacy for green iot-based agriculture: Review,

    blockchain solutions, and challenges,” IEEE Access, vol. 8, pp.

    32 031–32 053, 2020.

    [22]

    X. Y. al., “A survey on smart agriculture: Development modes,

    technologies, and security and privacy challenges,” IEEE/CAA

    Journal of Automatica Sinica, vol. 8, no. 2, pp. 273–302, February

    2021.

    [23]

    Y. S. al., “Attacks and countermeasures in the internet of vehicles,”

    Ann. Telecommun., vol. 72, no. 5-6, pp. 283–295, June 2017.

    [24]

    H. Xu, J. Lin, and W. Yu, “Smart transportation systems: Archi-

    tecture, enabling technologies, and open issues,” in Secure and

    Trustworthy Transportation Cyber-Physical Systems, Y. Sun and

    H. Song, Eds.

    Singapore: Springer, 2017, pp. 23–49.

    [25]

    L. Alouache, N. Nguyen, M. Aliouat, and R. Chelouah, “Survey

    on iov routing protocols: Security and network architecture,”

    International Journal of Communication Systems, vol. 32, p. 2,

    2019.

    [26]

    Y. Wu, H.-N. Dai, and H. Wang, “Convergence of blockchain and

    edge computing for secure and scalable iiot critical infrastructures

    in industry 4.0,” IEEE Internet of Things Journal, vol. 8, no. 4,

    pp. 2300–2317, February 2021.

    [27]

    M. H. Miraz and M. Ali, Applications of Blockchain Technology

    beyond Cryptocurrency.

    [cs], 2018.

    [28]

    F. Glaser, “Pervasive decentralisation of digital infrastructures: a

    framework for blockchain enabled system and use case analysis,”

    2017.

    [29]

    R. Beck, C. M¨uller-Bloch, and J. L. King, “Governance in the

    blockchain economy: A framework and research agenda,” Journal

    of the Association for Information Systems, vol. 19, no. 10, p. 1,

    2018.

    [30]

    J. Fu, S. Qiao, Y. Huang, X. Si, B. Li, and C. Yuan, “A study on

    the optimization of blockchain hashing algorithm based on prca,”

    Security and Communication Networks, vol. 2020, September

    2020.

    [31]

    T. M. Fernandez-Caramas and P. Fraga-Lamas, “Towards post-

    quantum blockchain: A review on blockchain cryptography re-

    sistant to quantum computing attacks,” IEEE Access, vol. 8, pp.

    21 091–21 116, 2020.

    [32]

    H.-N. Dai, Z. Zheng, and Y. Zhang, “Blockchain for internet of

    things: A survey,” IEEE Internet Things J., vol. 6, no. 5, pp. 8076–

    8094, October 2019.

    [33]

    Y. Liu, J. Zhang, and J. Zhan, Privacy protection for fog computing

    and the internet of things data based on blockchain.

    Cluster

    Comput.

    [34]

    S. Ferretti and G. D’Angelo, “On the ethereum blockchain struc-

    ture: A complex networks theory perspective,” Concurrency and

    Computation: Practice and Experience, vol. 32, p. 12, 2020.

    [35]

    F. Chen, Z. Xiao, L. Cui, Q. Lin, J. Li, and S. Yu, “Blockchain for

    internet of things applications: A review and open issues,” Journal

    of Network and Computer Applications, vol. 172, December 2020.

    [36]

    M. S. Ferdous, M. J. M. Chowdhury, M. A. Hoque, and A. Colman,

    “Blockchain consensus algorithms: A survey,” [cs], Feb, vol. 2020,

    Apr. 2021. [Online]. Available: http://arxiv.org/abs/2001.07091

    [37]

    L. W. Cong and Z. He, “Blockchain disruption and smart con-

    tracts,” The Review of Financial Studies, vol. 32, no. 5, pp. 1754–

    1797, May 2019.

    [38]

    T. H. al., “Transaction-based classification and detection approach

    for ethereum smart contract,” Information Processing

    Manage-

    ment, vol. 58, p. 2, March 2021.

    [39]

    Z. Shah, I. Ullah, H. Li, A. Levula, and K. Khurshid, “Blockchain

    based solutions to mitigate distributed denial of service (ddos)

    attacks in the internet of things (iot): A survey,” Sensors, vol. 22,

    no. 3, p. 1094, 2022.

    [40]

    ““electronics | free full-text | blockchain for iot applications: Tax-

    onomy, platforms, recent advances, challenges and future research

    directions.”.”

    [41]

    N.

    Deepa,

    Q.-V.

    Pham,

    D.

    C.

    Nguyen,

    S.

    Bhattacharya,

    B. Prabadevi, T. R. Gadekallu, P. K. R. Maddikunta, F. Fang, and

    P. N. Pathirana, “A survey on blockchain for big data: approaches,

    opportunities, and future directions,” Future Generation Computer

    Systems, 2022.

    [42]

    S. Saxena, B. Bhushan, and M. A. Ahad, “Blockchain based

    solutions to secure iot: Background, integration trends and a way

    forward,” J. Netw. Comput. Appl., vol. 181, May 2021.

    [43]

    A. K. Paul, X. Qu, and Z. Wen, Blockchain-a promising solution

    to internet of things: A comprehensive analysis, opportunities,

    challenges and future research issues.

    Peer Peer Netw. Appl.

    [44]

    A. A. Sadawi, M. S. Hassan, and M. Ndiaye, “A survey on the

    integration of blockchain with iot to enhance performance and

    eliminate challenges,” IEEE Access, vol. 9, pp. 54 478–54 497,

    2021.

    [45]

    P. Patil, M. Sangeetha, and V. Bhaskar, “Blockchain for iot access

    control, security and privacy: A review,” Wirel. Pers. Commun.,

    vol. 117, no. 3, pp. 1815–1834, April 2021.

    [46]

    F. H. Al-Naji and R. Zagrouba, “A survey on continuous au-

    thentication methods in internet of things environment,” Comput.

    Commun., vol. 163, pp. 109–133, November 2020.

    [47]

    A. Sharma, E. S. Pilli, A. P. Mazumdar, and P. Gera, “Towards

    trustworthy internet of things: A survey on trust management

    applications and schemes,” Comput. Commun., vol. 160, pp. 475–

    493, July 2020.

    Int. J. Com. Dig. Sys. 13, No.1, 97-129 (Jan-2023)

    125

    [48]

    J. Sengupta, S. Ruj, and S. D. Bit, “A comprehensive survey on

    attacks, security issues and blockchain solutions for iot and iiot,”

    J. Netw. Comput. Appl., vol. 149, January 2020.

    [49]

    B. Alotaibi, “Utilizing blockchain to overcome cyber security

    concerns in the internet of things: A review,” IEEE Sens, vol. 19,

    no. 23, pp. 10 953–10 971, December 2019.

    [50]

    P. J. Taylor, T. Dargahi, A. Dehghantanha, R. M. Parizi, and K.-

    K. R. Choo, “A systematic literature review of blockchain cyber

    security,” Digital Communications and Networks, vol. 6, no. 2, pp.

    147–156, May 2020.

    [51]

    M. Wu, K. Wang, X. Cai, S. Guo, M. Guo, and C. Rong, “A com-

    prehensive survey of blockchain: From theory to iot applications

    and beyond,” IEEE Internet Things J., vol. 6, no. 5, pp. 8114–8154,

    October 2019.

    [52]

    M. S. Ali, M. Vecchio, M. Pincheira, K. Dolui, F. Antonelli,

    and M. H. Rehmani, “Applications of blockchains in the internet

    of things: A comprehensive survey,” IEEE Commun. Surv. Tutor,

    vol. 21, no. 2, pp. 1676–1717, 2019.

    [53]

    A. K. Yadav and K. Singh, “Comparative analysis of consensus

    algorithms of blockchain technology,” in Ambient Communications

    and Computer Systems, Singapore pp, pp. 205–218, 2020.

    [54]

    S. M. H. Bamakan, A. Motavali, and A. B. Bondarti, “A survey of

    blockchain consensus algorithms performance evaluation criteria,”

    Expert Syst. Appl., vol. 154, September 2020.

    [55]

    L. Lao, Z. Li, S. Hou, B. Xiao, S. Guo, and Y. Yang, “A survey

    of iot applications in blockchain systems: Architecture, consensus,

    and traffic modeling,” ACM Comput. Surv., vol. 53, no. 1, pp. 1–18,

    February 2020.

    [56]

    Y. Wen, F. Lu, Y. Liu, P. Cong, and X. Huang, “Blockchain

    consensus mechanisms and their applications in iot: A literature

    survey,” in Algorithms and Architectures for Parallel Processing,

    Cham pp, pp. 564–579, 2020.

    [57]

    M. Salimitari, M. Chatterjee, and Y. P. Fallah, “A survey on consen-

    sus methods in blockchain for resource-constrained iot networks,”

    Internet of Things, vol. 11, September 2020.

    [58]

    M. Salimitari and M. Chatterjee, “A survey on consensus protocols

    in blockchain for iot networks,” [cs], Jun, vol. 2019, Apr. 2021.

    [Online]. Available: http://arxiv.org/abs/1809.05613

    [59]

    H. Rathore, A. Mohamed, and M. Guizani, “A survey of blockchain

    enabled cyber-physical systems,” Sensors, vol. 20, p. 1, January

    2020.

    [60]

    A. Pieroni, N. Scarpato, and L. Felli, “Blockchain and iot

    convergence-a systematic survey on technologies, protocols and

    security,” Applied Sciences, vol. 10, p. 19, January 2020.

    [61]

    S. Aggarwal, R. Chaudhary, G. S. Aujla, N. Kumar, K.-K. R.

    Choo, and A. Y. Zomaya, “Blockchain for smart communities:

    Applications, challenges and opportunities,” J. Netw. Comput.

    Appl., vol. 144, pp. 13–48, October 2019.

    [62]

    P. Mehta, R. Gupta, and S. Tanwar, “Blockchain envisioned uav

    networks: Challenges, solutions, and comparisons,” Comput. Com-

    mun., vol. 151, pp. 518–538, February 2020.

    [63]

    U.

    Bodkhe,

    S.

    Tanwar,

    P.

    Bhattacharya,

    and

    N.

    Kumar,

    “Blockchain for precision irrigation: Opportunities and chal-

    lenges,” Trans. Emerg. Telecommun. Technol., p. e, vol. 4059.

    [64]

    M. Torky and A. E. Hassanein, “Integrating blockchain and the

    internet of things in precision agriculture: Analysis, opportunities,

    and challenges,” Comput. Electron, vol. 178, November 2020.

    [65]

    S. E. Chang and Y. Chen, “When blockchain meets supply chain: A

    systematic literature review on current development and potential

    applications,” IEEE Access, vol. 8, pp. 62 478–62 494, 2020.

    [66]

    P. P. Ray, D. Dash, K. Salah, and N. Kumar, “Blockchain for

    iot-based healthcare: Background, consensus, platforms, and use

    cases,” IEEE Syst. J., vol. 15, no. 1, pp. 85–94, March 2021.

    [67]

    U. Majeed, L. U. Khan, I. Yaqoob, S. M. A. Kazmi, K. Salah,

    and C. S. Hong, “Blockchain for iot-based smart cities: Recent

    advances, requirements, and future challenges,” J. Netw. Comput.

    Appl., vol. 181, May 2021.

    [68]

    M. B. M. al., “Blockchain for the internet of vehicles towards

    intelligent transportation systems: A survey,” IEEE Internet Things

    J., vol. 8, no. 6, pp. 4157–4185, March 2021.

    [69]

    I. Mistry, S. Tanwar, S. Tyagi, and N. Kumar, “Blockchain for 5g-

    enabled iot for industrial automation: A systematic review, solu-

    tions, and challenges,” Mechanical Systems and Signal Processing,

    vol. 135, January 2020.

    [70]

    K. Zhang, Y. Zhu, S. Maharjan, and Y. Zhang, “Edge intelligence

    and blockchain empowered 5g beyond for the industrial internet

    of things,” IEEE Network, vol. 33, no. 5, pp. 12–19, September

    2019.

    [71]

    S. Tanwar, Q. Bhatia, P. Patel, A. Kumari, P. K. Singh, and

    W. Hong, “Machine learning adoption in blockchain-based smart

    applications: The challenges, and a way forward,” IEEE Access,

    vol. 8, pp. 474–488, 2020.

    [72]

    O. Alfandi, S. Khanji, L. Ahmad, and A. Khattak, “A survey on

    boosting iot security and privacy through blockchain exploration,

    requirements, and open issues,” Cluster Comput., vol. 24, no. 1,

    pp. 37–55, March 2021.

    [73]

    R. A. Memon, J. P. Li, J. Ahmed, M. I. Nazeer, M. Ismail,

    and K. Ali, “Cloud-based vs. blockchain-based iot: a comparative

    survey and way forward,” Front. Inform, vol. 21, no. 4, pp. 563–

    586, April 2020.

    [74]

    F. H. Pohrmen, R. K. Das, and G. Saha, “Blockchain-based security

    aspects in heterogeneous internet-of-things networks: A survey,”

    Trans. Emerg. Telecommun. Technol., vol. 30, p. 10, October 2019.

    [75]

    N. T. al., “The security of big data in fog-enabled iot applications

    including blockchain: A survey,” Sensors, vol. 19, p. 8, April 2019.

    [76]

    D. C. Nguyen, P. N. Pathirana, M. Ding, and A. Seneviratne,

    “Integration of blockchain and cloud of things: Architecture,

    applications and challenges,” IEEE Commun. Surv. Tutor, vol. 22,

    no. 4, pp. 2521–2549, 2020.

    [77]

    S. Hakak, W. Z. Khan, G. A. Gilkar, M. Imran, and N. Guizani,

    “Securing smart cities through blockchain technology: Architec-

    ture, requirements, and challenges,” IEEE Network, vol. 34, no. 1,

    pp. 8–14, January 2020.

    [78]

    B. Nour, A. Ksentini, N. Herbaut, P. A. Frangoudis, and

    126

    Sadia Showkat, et al.:Securing the Internet of things through Blockchain approach.

    H. Moungla, “A blockchain-based network slice broker for 5g

    services,” IEEE Networking Letters, vol. 1, no. 3, pp. 99–102,

    September 2019.

    [79]

    S. Gupta, P. Thakur, K. Biswas, S. Kumar, and A. P. Singh,

    “Developing a blockchain-based and distributed database-oriented

    multi-malware detection engine,” in Machine Intelligence and Big

    Data Analytics for Cybersecurity Applications.

    Springer, 2021,

    pp. 249–275.

    [80]

    X. Jia, N. Hu, S. Yin, Y. Zhao, C. Zhang, and X. Cheng, “A2

    chain: A blockchain-based decentralized authentication scheme for

    5g-enabled iot,” Mobile Information Systems, vol. 2020, December

    2020.

    [81]

    S. P. Sankar, T. D. Subash, N. Vishwanath, and D. E. Geroge,

    “Security improvement in block chain technique enabled peer to

    peer network for beyond 5g and internet of things,” Peer-to-Peer

    Netw. Appl., vol. 14, no. 1, pp. 392–402, January 2021.

    [82]

    G. Papadodimas, G. Palaiokrasas, A. Litke, and T. Varvarigou,

    “Implementation of smart contracts for blockchain based iot ap-

    plications,” in 2018 9th International Conference on the Network

    of the Future (NOF, November 2018, pp. 60–67.

    [83]

    Y. Gao, W. Wu, H. Nan, Y. Sun, and P. Si, “Deep reinforcement

    learning based task scheduling in mobile blockchain for iot appli-

    cations,” in International Conference on Communications (ICC)

    pp, I. Ieee, Ed.

    1-7, June 2020, pp. 2020–2020.

    [84]

    Z. Xiong, Y. Zhang, D. Niyato, P. Wang, and Z. Han, “When

    mobile blockchain meets edge computing,” IEEE Communications

    Magazine, vol. 56, no. 8, pp. 33–39, August 2018.

    [85]

    W. Sun, J. Liu, Y. Yue, and P. Wang, “Joint resource allocation and

    incentive design for blockchain-based mobile edge computing,”

    IEEE Transactions on Wireless Communications, vol. 19, no. 9,

    pp. 6050–6064, September 2020.

    [86]

    N. Waheed, X. He, M. Ikram, M. Usman, S. S. Hashmi, and

    M. Usman, “Security and privacy in iot using machine learning and

    blockchain: Threats and countermeasures,” ACM Comput. Surv.,

    vol. 53, no. 6, pp. 1–122, December 2020.

    [87]

    B. Podgorelec, M. Turkanovic, and S. Karakatic, “A machine

    learning-based method for automated blockchain transaction sign-

    ing including personalized anomaly detection,” Sensors, vol. 20,

    p. 1, January 2020.

    [88]

    T. Wang, “Trustable and automated machine learning running with

    blockchain and its applications,” vol. 10, 2019.

    [89]

    B. K. Mohanta, D. Jena, U. Satapathy, and S. Patnaik, “Survey on

    iot security: Challenges and solution using machine learning, arti-

    ficial intelligence and blockchain technology,” Internet of Things,

    vol. 11, September 2020.

    [90]

    C. Qiu, X. Wang, H. Yao, J. Du, F. R. Yu, and S. Guo, “Networking

    integrated cloud-edge-end in iot: A blockchain-assisted collective

    q-learning approach,” IEEE Internet of Things Journal, pp, pp. 1–1,

    2020.

    [91]

    S. Muralidharan and H. Ko, “An interplanetary file system (ipfs)

    based iot framework,” in 2019 IEEE International Conference on

    Consumer Electronics (ICCE, January 2019, pp. 1–2.

    [92]

    M. Steichen, B. Fiz, R. Norvill, W. Shbair, and R. State,

    “Blockchain-based, decentralized access control for ipfs,” in 2018

    IEEE International Conference on Internet of Things (iThings) and

    IEEE Green Computing and Communications (GreenCom) and

    IEEE Cyber.

    Physical and Social Computing (CPSCom) and

    IEEE Smart Data (SmartData, July 2018, pp. 1499–1506.

    [93]

    X. Zheng, J. Lu, S. Sun, and D. Kiritsis, “Decentralized industrial

    iot data management based on blockchain and ipfs,” in Advances

    in Production Management Systems, pp. 222–229, 2020.

    [94]

    M. S. Ali, K. Dolui, and F. Antonelli, “Iot data privacy via

    blockchains and ipfs,” in Proceedings of the Seventh International

    Conference on the Internet of Things.

    NY, USA: New York,

    October 2017, pp. 1–7.

    [95]

    A. Panarello, N. Tapas, G. Merlino, F. Longo, and A. Puliafito,

    “Blockchain and iot integration: A systematic survey,” Sensors,

    vol. 18, p. 8, August 2018.

    [96]

    Y.-J. Choi, H.-J. Kang, and I.-G. Lee, “Scalable and secure internet

    of things connectivity,” Electronics, vol. 8, no. 7, p. 752, 2019.

    [97]

    B. A. Tama, B. J. Kweka, Y. Park, and K.-H. Rhee, “A critical

    review of blockchain and its current applications,” in 2017 In-

    ternational Conference on Electrical Engineering and Computer

    Science (ICECOS).

    IEEE, 2017, pp. 109–113.

    [98]

    S. Seebacher and R. Sch¨uritz, “Blockchain technology as an

    enabler of service systems: A structured literature review,” in

    International conference on exploring services science.

    Springer,

    2017, pp. 12–23.

    [99]

    O. Ali, A. Jaradat, A. Kulakli, and A. Abuhalimeh, “A comparative

    study: Blockchain technology utilization benefits, challenges and

    functionalities,” IEEE Access, vol. 9, pp. 12 730–12 749, 2021.

    [100]

    D. Sivaganesan, “A data driven trust mechanism based on

    blockchain in iot sensor networks for detection and mitigation

    of attacks,” Journal of trends in Computer Science and Smart

    technology (TCSST), vol. 3, no. 01, pp. 59–69, 2021.

    [101]

    D. Wang, H. Wang, and Y. Fu, “Blockchain-based iot device iden-

    tification and management in 5g smart grid,” EURASIP Journal

    on Wireless Communications and Networking, vol. 2021, no. 1,

    pp. 1–19, 2021.

    [102]

    K. Abbas, L. A. Tawalbeh, A. Rafiq, A. Muthanna, I. A. Elgendy,

    A. El-Latif, and A. Ahmed, “Convergence of blockchain and iot

    for secure transportation systems in smart cities,” Security and

    Communication Networks, vol. 2021, 2021.

    [103]

    P. Sharma, N. R. Moparthi, S. Namasudra, V. Shanmuganathan,

    and C.-H. Hsu, “Blockchain-based iot architecture to secure health-

    care system using identity-based encryption,” Expert Systems, p.

    e12915, 2021.

    [104]

    M. A. Bouras, Q. Lu, S. Dhelim, and H. Ning, “A lightweight

    blockchain-based iot identity management approach,” Future In-

    ternet, vol. 13, no. 2, p. 24, 2021.

    [105]

    D. C. Nguyen, P. N. Pathirana, M. Ding, and A. Seneviratne,

    “Secure computation offloading in blockchain based iot networks

    with deep reinforcement learning,” IEEE Transactions on Network

    Science and Engineering, vol. 8, no. 4, pp. 3192–3208, 2021.

    [106]

    T. H. Pranto, A. A. Noman, A. Mahmud, and A. B. Haque,

    Int. J. Com. Dig. Sys. 13, No.1, 97-129 (Jan-2023)

    127

    “Blockchain and smart contract for iot enabled smart agriculture,”

    PeerJ Computer Science, vol. 7, p. e407, 2021.

    [107]

    S. A. Latif, F. B. X. Wen, C. Iwendi, F. W. Li-li, S. M. Mohsin,

    Z. Han, and S. S. Band, “Ai-empowered, blockchain and sdn

    integrated security architecture for iot network of cyber physical

    systems,” Computer Communications, vol. 181, pp. 274–283, 2022.

    [108]

    J. Wu, M. Dong, K. Ota, J. Li, and W. Yang, “Application-aware

    consensus management for software-defined intelligent blockchain

    in iot,” IEEE Network, vol. 34, no. 1, pp. 69–75, January 2020.

    [109]

    I. Makhdoom, M. Abolhasan, H. Abbas, and W. Ni, “Blockchain’s

    adoption in iot: The challenges, and a way forward,” Journal

    of Network and Computer Applications, vol. 125, pp. 251–279,

    January 2019.

    [110]

    S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,”

    vol. 9.

    [111]

    S. King and S. Nadal, “Ppcoin: Peer-to-peer crypto-currency with

    proof-of-stake,” vol. 6.

    [112]

    O. Onireti, L. Zhang, and M. A. Imran, “On the viable area

    of wireless practical byzantine fault tolerance (pbft) blockchain

    networks,” in, vol. 2019, pp. 1–6, December 2019.

    [113]

    S. M. S. Saad and R. Z. R. M. Radzi, “Comparative review of the

    blockchain consensus algorithm between proof of stake (pos) and

    delegated proof of stake (dpos),” Int J Innov Comp, vol. 10, p. 2,

    November 2020.

    [114]

    G. Christofi, “Study of consensus protocols and improvement of

    the delegated byzantine fault tolerance (dbft) algorithm,” STUDY

    OF

    CONSENSUS

    PROTOCOLS

    AND

    IMPROVEMENT

    OF

    THE DELEGATED BYZANTINE FAULT TOLERANCE (DBFT)

    ALGORITHM, Oct, vol. 2019, Apr. 2021. [Online]. Available:

    https://upcommons.upc.edu/handle/2117/171243

    [115]

    “Burstflash, “burstcoin poc (proof of capacity) an ecofriendly

    consensus mechanism,” burstcoin.”

    [116]

    M. A. Kumar, V. Radhesyam, and B. SrinivasaRao, “Front-end iot

    application for the bitcoin based on proof of elapsed time (poet),”

    in 2019 Third International Conference on Inventive Systems and

    Control (ICISC, January 2019, pp. 646–649.

    [117]

    ““leased proof of stake — waves documentation.” [Online].

    Available: https://docs.waves.tech/en/blockchain/leasing

    [118]

    I. Bentov, C. Lee, A. Mizrahi, and M. Rosenfeld, “Proof of activity:

    Extending bitcoin’s proof of work via proof of stake [extended

    abstract]y,” SIGMETRICS Perform, vol. 42, no. 3, pp. 34–37,

    December 2014.

    [119]

    N. Bozic, G. Pujolle, and S. Secci, “A tutorial on blockchain and

    applications to secure network control-planes,” in, vol. 2016, no. 3,

    pp. 1–8, December 2016.

    [120]

    J.

    He,

    G.

    Wang,

    G.

    Zhang,

    and

    J.

    Zhang,

    “Consensus

    mechanism design based on structured directed acyclic graphs,”

    [cs, math], Jan, vol. 2019, Apr. 2021. [Online]. Available:

    http://arxiv.org/abs/1901.02755

    [121]

    V.

    Buterin

    and

    V.

    Griffith,

    “Casper

    the

    friendly

    finality

    gadget,” [cs], Jan, vol. 2019, Apr. 2021. [Online]. Available:

    http://arxiv.org/abs/1710.09437

    [122]

    D. Mazieres, “The stellar consensus protocol - a federated model

    for internet-level consensus,” vol. 97.

    [123]

    I. Amores-Sesar, C. Cachin, and J. Micic, “Security analysis of

    ripple consensus,” [cs], Nov, vol. 2020, Apr. 2021. [Online].

    Available: http://arxiv.org/abs/2011.14816

    [124]

    J. Kwon, “Tendermint: Consensus without mining,” vol. 11.

    [125]

    M. Zamani, M. Movahedi, and M. Raykova, “Rapidchain: Scaling

    blockchain via full sharding,” in Proceedings of the 2018 ACM

    SIGSAC Conference on Computer and Communications Security.

    NY, USA: New York, October 2018, pp. 931–948.

    [126]

    E. Kokoris-Kogias, P. Jovanovic, L. Gasser, N. Gailly, E. Syta, and

    B. Ford, “Omniledger: A secure, scale-out, decentralized ledger via

    sharding,” in 2018 IEEE Symposium on Security and Privacy (SP,

    May 2018, pp. 583–598.

    [127]

    L. Luu, V. Narayanan, C. Zheng, K. Baweja, S. Gilbert, and

    P. Saxena, “A secure sharding protocol for open blockchains,” in

    Proceedings of the 2016 ACM SIGSAC Conference on Computer

    and Communications Security.

    NY, USA: New York, October

    2016, pp. 17–30.

    [128]

    G.

    Danezis

    and

    S.

    Meiklejohn,

    “Centrally

    banked

    cryptocurrencies,” [cs], Dec, vol. 2015, Apr. 2021. [Online].

    Available: http://arxiv.org/abs/1505.06895

    [129]

    Y. Gilad, R. Hemo, S. Micali, G. Vlachos, and N. Zeldovich,

    “Algorand: Scaling byzantine agreements for cryptocurrencies,”

    in Proceedings of the 26th Symposium on Operating Systems

    Principles.

    NY, USA: New York, October 2017, pp. 51–68.

    [130]

    E. K. Kogias, P. Jovanovic, N. Gailly, I. Khoffi, L. Gasser,

    and B. Ford, “Enhancing bitcoin security and performance with

    strong consistency via collective signing,” vol. 2016, pp. 279–296,

    Apr. 2021. [Online]. Available: https://www.usenix.org/conference/

    usenixsecurity16/technical-sessions/presentation/kogias&

    [131]

    A. Charapko, A. Ailijiang, and M. Demirbas, “Bridging paxos

    and blockchain consensus,” in 2018 IEEE International Conference

    on Internet of Things (iThings) and IEEE Green Computing and

    Communications (GreenCom) and IEEE Cyber.

    Physical and

    Social Computing (CPSCom) and IEEE Smart Data (SmartData,

    July 2018, pp. 1545–1552.

    [132]

    W. F. Silvano and R. Marcelino, “Iota tangle: A cryptocurrency

    to communicate internet-of-things data,” Future Generation Com-

    puter Systems, vol. 112, pp. 307–319, November 2020.

    [133]

    D. Huang, X. Ma, and S. Zhang, “Performance analysis of the raft

    consensus algorithm for private blockchains,” IEEE Transactions

    on Systems, Man, and Cybernetics: Systems, vol. 50, no. 1, pp.

    172–181, January 2020.

    [134]

    A. Dorri and R. Jurdak, “Tree-chain: A fast lightweight consensus

    algorithm for iot applications,” [cs], May, vol. 2020, Apr. 2021.

    [Online]. Available: http://arxiv.org/abs/2005.09443

    [135]

    B. Farahani, F. Firouzi, and M. Luecking, “The convergence of iot

    and distributed ledger technologies (dlt): Opportunities, challenges,

    and solutions,” Journal of Network and Computer Applications,

    vol. 177, March 2021.

    [136]

    C. Saraf and S. Sabadra, “Blockchain platforms: A compendium,”

    128

    Sadia Showkat, et al.:Securing the Internet of things through Blockchain approach.

    in 2018 IEEE International Conference on Innovative Research

    and Development (ICIRD, May 2018, pp. 1–6.

    [137]

    H. Tian, X. Ge, J. Wang, C. Li, and H. Pan, “Research on

    distributed blockchain-based privacy-preserving and data security

    framework in iot,” IET Communications, vol. 14, no. 13, pp. 2038–

    2047, April 2020.

    [138]

    M. Ma, G. Shi, and F. Li, “Privacy-oriented blockchain-based

    distributed key management architecture for hierarchical access

    control in the iot scenario,” IEEE Access, vol. 7, pp. 34 045–34 059,

    2019.

    [139]

    Y. Ding and H. Sato, “Bloccess: Towards fine-grained access con-

    trol using blockchain in a distributed untrustworthy environment,”

    in 2020 8th IEEE International Conference on Mobile Cloud

    Computing.

    and Engineering (MobileCloud: Services, August

    2020, pp. 17–22.

    [140]

    Y. E. Oktian and S.-G. Lee, “Borderchain: Blockchain-based access

    control framework for the internet of things endpoint,” IEEE

    Access, vol. 9, pp. 3592–3615, 2021.

    [141]

    T. Sultana, A. Almogren, M. Akbar, M. Zuair, I. Ullah, and

    N. Javaid, “Data sharing system integrating access control mecha-

    nism using blockchain-based smart contracts for iot devices,” Appl.

    Sci, vol. 10, p. 2, January 2020.

    [142]

    G. Ali, N. Ahmad, Y. Cao, M. Asif, H. Cruickshank, and Q. E.

    Ali, “Blockchain based permission delegation and access control

    in internet of things (baci),” Comput. Secur., vol. 86, pp. 318–334,

    September 2019.

    [143]

    T. Li, H. Wang, D. He, and J. Yu, “Blockchain-based privacy-

    preserving and rewarding private data sharing for iot,” IEEE

    Internet of Things Journal, 2022.

    [144]

    M. S. al., “Blockchain-assisted secure device authentication for

    cross-domain industrial iot,” IEEE Journal on Selected Areas in

    Communications, vol. 38, no. 5, pp. 942–954, May 2020.

    [145]

    L. Wu, X. Du, W. Wang, and B. Lin, “An out-of-band authentica-

    tion scheme for internet of things using blockchain technology,” in

    2018 International Conference on Computing.

    Networking and

    Communications (ICNC, March 2018, pp. 769–773.

    [146]

    S. Hong, “P2p networking based internet of things (iot) sensor node

    authentication by blockchain,” Peer-to-Peer Netw. Appl., vol. 13,

    no. 2, pp. 579–589, March 2020.

    [147]

    U. Khalid, M. Asim, T. Baker, P. C. K. Hung, M. A. Tariq, and

    L. Rafferty, “A decentralized lightweight blockchain-based authen-

    tication mechanism for iot systems,” Cluster Comput, vol. 23, no. 3,

    pp. 2067–2087, September 2020.

    [148]

    S. Amjad, S. Abbas, Z. Abubaker, M. H. Alsharif, A. Jahid,

    and N. Javaid, “Blockchain based authentication and cluster head

    selection using ddr-leach in internet of sensor things,” Sensors,

    vol. 22, no. 5, p. 1972, 2022.

    [149]

    R. Almadhoun, M. Kadadha, M. Alhemeiri, M. Alshehhi, and

    K. Salah, “A user authentication scheme of iot devices using

    blockchain-enabled fog nodes,” in 2018 IEEE/ACS 15th interna-

    tional conference on computer systems and applications (AICCSA).

    IEEE, 2018, pp. 1–8.

    [150]

    J. Zheng, X. Dong, T. Zhang, J. Chen, W. Tong, and X. Yang,

    “Microthingschain: Edge computing and decentralized iot architec-

    ture based on blockchain for cross-domain data shareing,” in 2018

    International Conference on Networking and Network Applications

    (NaNA).

    IEEE, 2018, pp. 350–355.

    [151]

    J. Cao, X. Wang, M. Huang, B. Yi, and Q. He, “A security-driven

    network architecture for routing in industrial internet of things,”

    Trans. Emerg. Telecommun. Technol., p. e, vol. 4216.

    [152]

    H. Lazrag, A. Chehri, R. Saadane, and M. D. Rahmani, “Efficient

    and secure routing protocol based on blockchain approach for

    wireless sensor networks,” Concurr. Comput.-Pract. Exp, vol.

    6144.

    [153]

    J. Wang, Y. Liu, S. Niu, and H. Song, “Lightweight blockchain

    assisted secure routing of swarm uas networking,” Comput. Com-

    mun., vol. 165, pp. 131–140, January 2021.

    [154]

    R. K. al., “Iotmalware: Android iot malware detection based on

    deep neural network and blockchain technology,” [cs], Feb, vol.

    2021, Mar. 2021. [Online]. Available: http://arxiv.org/abs/2102.

    13376

    [155]

    S. Homayoun, A. Dehghantanha, R. M. Parizi, and K.-K. R. Choo,

    “A blockchain-based framework for detecting malicious mobile

    applications in app stores,” in, vol. 2019, pp. 1–4, May 2019.

    [156]

    S. Talukder, S. Roy, and T. A. Mahmud, “An approach for an

    distributed anti-malware system based on blockchain technology,”

    in 2019 11th International Conference on Communication Systems

    Networks (COMSNETS, January 2019, pp. 1–6.

    [157]

    S. Liu, J. Wu, and C. Long, “Iot meets blockchain: parallel

    distributed architecture for data storage and sharing,” in 2018 IEEE

    International Conference on Internet of Things (iThings) and IEEE

    Green Computing and Communications (GreenCom) and IEEE

    Cyber, Physical and Social Computing (CPSCom) and IEEE Smart

    Data (SmartData).

    IEEE, 2018, pp. 1355–1360.

    [158]

    Y. Li, Y. Tu, J. Lu, and Y. Wang, “A security transmission and

    storage solution about sensing image for blockchain in the internet

    of things,” Sensors, vol. 20, p. 3, January 2020.

    [159]

    J. Lockl, V. Schlatt, A. Schweizer, N. Urbach, and N. Harth,

    “Toward trust in internet of things ecosystems: Design principles

    for blockchain-based iot applications,” IEEE Transactions on En-

    gineering Management, vol. 67, no. 4, pp. 1256–1270, November

    2020.

    [160]

    M. Zhaofeng, W. Xiaochang, D. Jain, H. Khan, G. Hongmin, and

    W. Zhen, “A blockchain-based trusted data management scheme

    in edge computing,” IEEE Transactions on Industrial Informatics,

    pp. 1–1, August 2019.

    [161]

    C. H. Liu, Q. Lin, and S. Wen, “Blockchain-enabled data collection

    and sharing for industrial iot with deep reinforcement learning,”

    IEEE Transactions on Industrial Informatics, vol. 15, no. 6, pp.

    3516–3526, June 2019.

    [162]

    “Ethereum price history 2015-2021, statista.” [Online]. Available:

    https://www.statista.com/statistics/806453/price-of-ethereum/

    [163]

    Y. K. Peker, X. Rodriguez, J. Ericsson, S. J. Lee, and A. J.

    Perez, “A cost analysis of internet of things sensor data storage on

    blockchain via smart contracts,” Electronics, vol. 9, p. 2, February

    2020.

    Int. J. Com. Dig. Sys. 13, No.1, 97-129 (Jan-2023)

    129

    [164]

    U. Gallersdorfer, L. KlaaBen, and C. Stoll, “Energy consumption

    of cryptocurrencies beyond bitcoin,” Joule, vol. 4, no. 9, pp. 1843–

    1846, September 2020.

    [165]

    B. W. Nyamtiga, J. C. S. Sicato, S. Rathore, Y. Sung, and J. H.

    Park, “Blockchain-based secure storage management with edge

    computing for iot,” Electronics, vol. 8, p. 8, August 2019.

    [166]

    R. van Renesse, “A blockchain based on gossip? - a position paper,”

    vol. 4.

    [167]

    “Automatic discovery mechanism of blockchain nodes based on

    the kademlia algorithm — springerlink.” [Online]. Available:

    https://link.springer.com/chapter/10.1007/978-3-030-24274-9 55

    [168]

    L. Kiffer, A. Salman, D. Levin, A. Mislove, and C. Nita-Rotaru,

    “Under the hood of the ethereum gossip protocol,” vol. 26.

    [169]

    S. Sun, R. Du, S. Chen, and W. Li, “Blockchain-based iot access

    control system: Towards security, lightweight, and cross-domain,”

    IEEE Access, vol. 9, pp. 36 868–36 878, 2021.

    [170]

    J. Moubarak, E. Filiol, and M. Chamoun, “On blockchain security

    and relevant attacks,” in, vol. 2018, pp. 1–6, April 2018.

    [171]

    D. Gabay, K. Akkaya, and M. Cebe, “Privacy-preserving authen-

    tication scheme for connected electric vehicles using blockchain

    and zero knowledge proofs,” IEEE Transactions on Vehicular

    Technology, vol. 69, no. 6, pp. 5760–5772, June 2020.

    Sadia Showkat

    Sadia Showkat is affil-

    iated to Computer Science and Engineer-

    ing, National Institute of Technology. Sa-

    dia Showkat is currently enrolled as a PhD

    scholar under the supervision of Dr. Shaima

    Qureshi, and has published her work in in-

    ternational peer-reviewed journals and con-

    ferences. Sadia Showkat has completed her

    B.Tech through University of Kashmir in

    Computer Science and Engineering and her

    M.Tech through National Institute of Technology in Communica-

    tion and Information Technology. Sadia Showkat has qualified the

    GATE exam three times and as well as cleared the UGC-NET in

    Computer science. Sadia Showkat’s clinical and scientific research

    interests include Machine Learning, Deep Learning, Federated

    Learning, Blockchain and Internet of Things.

    Shaima Qureshi Dr. Shaima Qureshi is

    affiliated to Computer Science and Engi-

    neering, National Institute of Technology.

    Dr. Shaima Qureshi is currently providing

    services as Associate Professor. Dr. Shaima

    Qureshi has published numerous publica-

    tions in various national and international

    peer-reviewed journals and presented scien-

    tific papers across the world. Because of

    her active association with different societies

    and academies as well as the contributions, Dr. Shaima Qureshi has

    been recognized by subject experts around the world. Dr. Shaima

    Qureshi contributions are appreciated by various reputed awards.

    Dr. Shaima Qureshi’s clinical and scientific research interests

    include Computer Networks, Mobile Communication, Algorithms.

    '
  inline_citation: '>'
  journal: International Journal of Computing and Digital Systems
  limitations: '>'
  pdf_link: https://journal.uob.edu.bh:443/bitstream/123456789/4728/1/IJCDS_130109_1570772664.pdf
  publication_year: 2023
  relevance_score1: 0
  relevance_score2: 0
  title: Securing the Internet of Things Through Blockchain Approach:Security Architectures,
    Consensus Algorithms, Enabling Technologies, Open Issues, and Research Directions
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.1109/access.2023.3295889
  analysis: '>'
  authors:
  - Javier Ordóñez
  - Angelos Alexopoulos
  - Κωνσταντίνος Κούτρας
  - Αθανάσιος Καλογεράς
  - Kyriakos Stefanidis
  - Vanessa Martos
  citation_count: 2
  full_citation: '>'
  full_text: '>

    IEEE.org IEEE Xplore IEEE-SA IEEE Spectrum More Sites 404: Page Not Found The
    page you were looking for could not be found. Browse or search IEEE Xplore to
    continue. Email us at onlinesupport@ieee.org for further assistance. © Copyright
    2024 IEEE - All rights reserved.'
  inline_citation: '>'
  journal: IEEE access
  limitations: '>'
  pdf_link: https://ieeexplore.ieee.org/ielx7/6287639/6514899/10184418.pdf
  publication_year: 2023
  relevance_score1: 0
  relevance_score2: 0
  title: 'Blockchain in Agriculture: A PESTELS Analysis'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.1109/access.2022.3197151
  analysis: '>'
  authors:
  - Shahidullah Kaiser
  - Md Sadun Haq
  - Ali Şaman Tosun
  - Turgay Korkmaz
  citation_count: 8
  full_citation: '>'
  full_text: '>

    IEEE.org IEEE Xplore IEEE-SA IEEE Spectrum More Sites 404: Page Not Found The
    page you were looking for could not be found. Browse or search IEEE Xplore to
    continue. Email us at onlinesupport@ieee.org for further assistance. © Copyright
    2024 IEEE - All rights reserved.'
  inline_citation: '>'
  journal: IEEE access
  limitations: '>'
  pdf_link: https://ieeexplore.ieee.org/ielx7/6287639/6514899/09852232.pdf
  publication_year: 2022
  relevance_score1: 0
  relevance_score2: 0
  title: 'Container Technologies for ARM Architecture: A Comprehensive Survey of the
    State-of-the-Art'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.5210/fm.v20i8.6130
  analysis: '>'
  authors:
  - John W. Brock
  - Donald J. Patterson
  citation_count: 0
  full_citation: '>'
  full_text: '>

    About Search Current Archives Announcements Submissions Search Register Login
    Home / Archives / Volume 20, Number 8 - 3 August 2015 / Articles Cacophony: Building
    a resilient Internet of things John Brock Donald J. Patterson DOI: https://doi.org/10.5210/fm.v20i8.6130
    Abstract The proliferation of sensors in the world has created increased opportunities
    for context-aware applications. However, it is often cumbersome to capitalize
    on these opportunities due to the difficulties inherent in collecting, fusing,
    and reasoning with data from a heterogeneous set of distributed sensors. The fabric
    that connects sensors lacks resilience and fault tolerance in the face of infrastructure
    intermittency. To address these difficulties, we introduce Cacophony, a network
    of peer-to-peer nodes (CNodes), where each node provides real-time predictions
    of a specified set of sensor data. The predictions from each of the Cacophony
    prediction nodes can be used by any application with access to the Web. Creating
    a new CNode involves three steps: (1) Developers and domain-knowledge experts,
    via a simple Web UI, specify which sensor data they care about. Possible sources
    of sensor data include stationary sensors, mobile sensors, and the real-time Web;
    (2) The CNode automatically aggregates data from the relevant sensors in real
    time using a JXTA-based peer-to-peer network; and, (3) The CNode uses the aggregated
    data to train a prediction model via the Weka machine-learning library (Hall,
    et al., 2009). Real-time predictions made by the CNode are then made publicly
    available to applications that wish to use data from a CNode’s particular set
    of sensors. The real-time predictions themselves can also be used recursively
    as sensor data, enabling the creation of CNodes that make predictions based on
    other CNodes. Author Biographies John Brock graduate student in the Department
    of Computer Science Â at the University of California, Irvine Donald J. Patterson
    Associate Professor in the Department of Informatics at the Donald Bren School
    of Information and Computer Sciences at the University of California, Irvine HTML
    Published 2015-07-31 How to Cite Brock, J., & Patterson, D. J. (2015). Cacophony:
    Building a resilient Internet of things. First Monday, 20(8). https://doi.org/10.5210/fm.v20i8.6130
    More Citation Formats Issue Volume 20, Number 8 - 3 August 2015 Section Articles
    License Authors retain copyright to their work published in First Monday. Please
    see the footer of each article for details. Open Journal Systems A Great Cities
    Initiative of the University of Illinois at Chicago University Library. © First
    Monday, 1995-2024. ISSN 1396-0466.'
  inline_citation: '>'
  journal: First Monday
  limitations: '>'
  pdf_link: null
  publication_year: 2015
  relevance_score1: 0
  relevance_score2: 0
  title: 'Cacophony: Building a resilient Internet of things'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.36227/techrxiv.22029974
  analysis: '>'
  authors:
  - Soleiman Ahmadi
  citation_count: 0
  full_citation: '>'
  full_text: '>

    LOG IN SIGN UP TechRxiv 9,172,904 views 4,235,710 downloads About TechRxiv TechRxiv
    (pronounced "tech archive") is an open, moderated preprint server for unpublished
    research in the areas of engineering, computer science, and related technology.
    https://www.techrxiv.org/ Public Documents 9174 Members by author by title by
    keyword Filter All Sort by Most Recent BIOENGINEERING 873 COMMUNICATION, NETWORKING
    AND BROADCAST TECHNOLOGIES 2286 COMPONENTS, CIRCUITS, DEVICES AND SYSTEMS 1069
    COMPUTING AND PROCESSING 3379 ENGINEERED MATERIALS, DIELECTRICS AND PLASMAS 249
    ENGINEERING PROFESSION 544 FIELDS, WAVES AND ELECTROMAGNETICS 856 GENERAL TOPICS
    FOR ENGINEERS 648 GEOSCIENCE 268 NUCLEAR ENGINEERING 70 PHOTONICS AND ELECTROOPTICS
    345 POWER, ENERGY AND INDUSTRY APPLICATIONS 1202 ROBOTICS AND CONTROL SYSTEMS
    879 TRANSPORTATION 388 AEROSPACE 267 SIGNAL PROCESSING AND ANALYSIS 1950 Terahertz
    Communications and Sensing for 6G and Beyond: A Comprehensive Review Wei Jiang
    and 14 more April 04, 2024 Next-generation cellular technologies, commonly referred
    to as the sixth generation (6G), are envisioned to support a higher system capacity,
    better performance, and network sensing capabilities. The terahertz (THz) band
    is one potential enabler to this end due to the large unused frequency bands and
    the high spatial resolution enabled by the short signal wavelength and large bandwidth.
    Different from earlier surveys, this paper presents a comprehensive treatment
    and technology survey on THz communications and sensing in terms of advantages,
    Rapid Feasibility Assessment of Energy Unit Integration in Distribution Networks
    Sicheng Gong and 2 more April 03, 2024 In contemporary heavy-load distribution
    networks, preceding feasibility assessment is imperative before incorporating
    additional energy units. However, the feasibility examination for massive combined
    operational scenarios of relevant units is computationally intensive with repetitive
    power flow calculations. To this end, this paper proposes a rapid assessment framework,
    the kernel of which is to learn from formerly examined scenarios, thus forming
    expansive feasible/infeasible regions to geometrically rule in/out subsequent
    scenarios. Without running the power flow computation in most scenarios, we accelerate
    the assessment process. Moreover, enlightened by heuristic hypersurface search,
    such prechecking efficiency can be further boosted. In a risk-averse manner, this
    framework can be conceptualized using the exact grid model. Especially, evidenced
    by testing on a 10.5kV distribution grid, the framework shows a significant assessment
    efficiency improvement and strict accuracy guarantee, where we observe at least
    76.13% assessment time reduction and zero accuracy loss in all testing cases.
    We anticipate this work to be a starting point for more sophisticated geometry-accelerating
    feasibility assessment methods. Improving Molecular De Novo Drug Design with Transformers
    Dhaval Soni and 7 more April 03, 2024 Drug design is undergoing a transformation
    as we challenge conventional methods by integrating state-of-the-art artificial
    intelligence with the intricate domain of molecular biology. At the heart of our
    endeavor lies a significant challenge: the scarcity of datasets containing active
    compounds for emerging target proteins. To confront this obstacle, we''re pioneering
    an innovative approach. We''re merging the advanced Generative Pre-trained Transformer
    (GPT) architecture with the nuanced capabilities of Long Short-Term Memory (LSTM)
    networks, with the aim of generating Simplified Molecular Input Line Entry System
    (SMILES) strings to unveil novel therapeutic pathways. Additionally, we''re employing
    a Bidirectional Encoder Representations from Transformers (BERT) pretraining strategy
    to enrich our model with comprehensive molecular data, including amino acid sequences
    and molecular SMILES datasets. Through meticulous fine-tuning on a meticulously
    curated protein-ligand complex dataset, we''re achieving precise conditional generation
    via autoregressive supervised learning. Our research introduces a groundbreaking
    method to assess molecular affinity, validated against established proteins, showcasing
    superior binding affinities compared to certain FDA-approved drugs in docking
    experiments. By pushing the boundaries of generative algorithms and establishing
    a robust framework for evaluating molecular affinity, we''re driving forward the
    field of de novo drug design, offering promising therapeutic avenues and enabling
    deeper exploration of the chemical landscape. Formalising a Gateway-based Blockchain
    Interoperability Solution with Event-B Guzmán Llambías and 2 more April 03, 2024
    A document by Guzman Llambias . Click on the document to view its contents. Magnetic
    Behavior of NO Fe-Si Sheets under Tensile and Compressive Stress Carlo Appino
    and 6 more April 03, 2024 The stress dependence of the magnetic properties of
    non-oriented Fe-Si steel sheets has been investigated by measurement and analysis
    of hysteresis loop, magnetization curve, and energy losses taken at different
    peak polarization values Jp (0.5 T – 1.5 T) between DC and f = 400 Hz. The salient
    feature of the material response to the stress lies in the monotonic deterioration
    of the soft magnetic properties, across the whole (Jp - f) domain, on passing
    from the maximum tensile stress (σ = +30 MPa) to the maximum compression (σ =
    -30 MPa). This is understood in terms of stress-induced redistribution of the
    domains between easy axes, making magnetic hardening by compression directly related
    to unfavorably directed domains and 90° domain-wallmediated magnetization transitions.
    The loss decomposition is carried out across the whole investigated frequency
    range, taking into account the skin effect at the highest frequencies. Quasi-static
    and dynamic losses follow a same trend with σ, both monotonically increasing on
    passing from the tensile to the compressive stress limits, according to the theoretically
    expected relationship existing between the hysteresis and the excess loss components.
    The latter is shown to identify the correlation regions where the magnetization
    is reversed of size comparable with the average grain size and loosely following
    the dependence of the loss figure on the applied stress. A bio-inspired hardware
    implementation of an analog spike-based hippocampus memory mo... Daniel Casanueva-Morato
    and 4 more April 03, 2024 The need for processing at the edge the increasing amount
    of data that is being produced by multitudes of sensors has led to the demand
    for mode power efficient computational systems, by exploring alternative computing
    paradigms and technologies. Neuromorphic engineering is a promising approach that
    can address this need by developing electronic systems that faithfully emulate
    the computational properties of animal brains. In particular, the hippocampus
    stands out as one of the most relevant brain region for implementing auto associative
    memories capable of learning large amounts of information quickly and recalling
    it efficiently. In this work, we present a computational spike-based memory model
    inspired by the hippocampus that takes advantage of the features of analog electronic
    circuits: energy efficiency, compactness, and real-time operation. This model
    can learn memories, recall them from a partial fragment and forget. It has been
    implemented as a Spiking Neural Networks directly on a mixed-signal neuromorphic
    chip. We describe the details of the hardware implementation and demonstrate its
    operation via a series of benchmark experiments, showing how this research prototype
    paves the way for the development of future robust and low-power mixed-signal
    neuromorphic processing systems. Exploratory Study of oneM2M-based Interoperability
    Architectures for IoT: A Smart Cit... VJS Pranavasri and 6 more April 03, 2024
    The advent of the Internet of Things (IoT) has ushered in transformative possibilities
    for smart cities, with the potential to revolutionize urban living through enhanced
    connectivity and data-driven decision-making. However, the effective realization
    of IoT in smart cities hinges upon the seamless interoperability of diverse devices
    and systems. To address this critical need, the oneM2M standards initiative has
    emerged as a foundational framework for IoT interoperability. In this research
    paper, we perform an exploratory analysis of three prominent open-source oneM2M
    based interoperability systems-Mobius, OM2M, and ACME. We leverage an existing
    large-scale system provided by our Smart City Living Lab deployed at IIIT Hyderabad,
    sprawling a 66-acre campus featuring over 370 nodes across eight verticals. We
    investigate the architectural characteristics of each solution, considering their
    strengths and limitations in facilitating IoT interoperability. Through this analysis,
    our paper aims to provide valuable insights for stakeholders seeking to implement
    IoT interoperability solutions in the context of smart cities. By evaluating the
    strengths and limitations of Mobius, OM2M, and ACME, we seek to offer guidance
    for selecting the most suitable solution. Our analysis reveals that the optimal
    framework choice depends on specific quality constraints: Mobius excels in performance,
    while ACME offers advantages in ease of setup for smaller-scale implementations.
    Comparing Concepts of Service Blocking Queues in Hardware-in-the-Loop Systems
    Tobias Konheiser and 3 more April 03, 2024 ZF is developing an autonomous driving
    system, which requires extensive testing of the developed devices and software
    on hardware-in-the-loop (HIL) systems. Therefore, a robust and high-performing
    HIL system is essential. The purpose of a HIL system is to replay recorded data
    to the device-undertest. Recordings are loaded, processed and streamed to the
    deviceunder-test with real-time requirements. This streaming chain includes processing
    nodes and queues. This requires careful management of queue configurations. An
    overflow in the queue will result in packet loss, while an underflow may violate
    the real-time constraint. This study aims to develop and evaluate concepts for
    service blocking queues. These concepts block or pause the incoming service to
    a queue when necessary to avoid queue overflows and associated data loss. However,
    an out-of-the-box solution is not available and different approaches affect the
    behaviour and performance of the system. Therefore, the developed concepts are
    evaluated against each other and against the existing system based on selected
    performance parameters in specific scenarios. The scenarios cover a wide range
    of situations, reflecting standard input data with varying numbers of parallel
    streams and bottleneck scenarios forcing queue overflows or blockages. The developed
    service blocking queue concepts eliminate data loss in all scenarios, but introduce
    overhead, resulting in reduced system performance. However, the service blocking
    queue concept using a modified token-bucket approach proved to be the best solution,
    as the elimination of data loss justifies the additional overhead. This concept
    is proposed for implementation and deployment on the HIL system. Generative AI-Based
    Text Generation Methods Using Pre-Trained GPT 2 Model Rohit Pandey and 7 more
    April 03, 2024 A text generation model is a machine learning model that uses neural
    networks, especially transformers architecture to generate contextually relevant
    text based on linguistic patterns learned from extensive corpora. The models are
    trained on a huge amount of textual data so that they can model and learn complex
    concepts of any language like its grammar, vocabulary, phrases, and styles. FlowDep
    - An efficient and optical-flow-based algorithm of obstacle detection for aut...
    Chen-Fu Yeh and 7 more April 03, 2024 Obstacle detection is crucial for the safety
    and efficiency of autonomous vehicles. For mini-vehicles such as palm-sized drones,
    it is a challenge to implement traditional methods like Lidar due to high costs
    and physical constraints. Vision-based deep learning approaches, while accurate,
    are too resource-intensive for the mini-vehicles. To address this issue, we introduce
    Flowdep, a novel optical-flow-based algorithm inspired by the low-resolution but
    efficient motion-detection mechanisms in insects. Flowdep combines optic flow
    and IMU (or positioning information) to estimate the depth of every image pixel.
    We also generate a variant of Flowdep using the artificial neural network (Flowdep-ANN).
    Our tests show that Flowdep and Flowdep-ANN are 5.8 to 114.7 times faster than
    the DNN networks we tested, while the accuracies of Flowdep and Flowdep-ANN are
    on par with these networks. We further tested Flowdep and Flowdep-ANN on a small
    autonomous vehicle with Raspberry Pi4 as the computing platform, and both models
    successfully performed real-time object detection. The present work demonstrates
    the potential of using optical flow as an efficient approach to estimate depth
    and detect obstacles in resource-constrained mini-vehicles. Misinformative Data
    Visualizations in the Sports Media Domain Drew Scott April 03, 2024 Sports are
    data-driven: individual performances are measured using statistics and teams leverage
    data analytics to outperform competition. Sports media-which is created by media
    outlets, teams, and individuals-engage its consumers by creating narratives about
    the sport, teams, and players. Due to the importance of data in the sports world,
    data visualizations are a pillar in the sports media landscape. These data visualizations,
    while appearing to accurately convey data to its consumers, can be misinformative;
    media creators often have incentives to present specific narratives which don''t
    always fit the data. This work contributes to an existing misinformative data
    visualization taxonomy. In doing so, it makes it easier to understand the techniques
    and design choices used to create misinformative visualizations in all domains,
    not only in sports media. A Survey of RFID Authentication Protocols Drew Scott
    April 03, 2024 "Radio frequency identification" (RFID) systems are ubiquitous
    in today''s world. In an RFID system, it is a desirable to attain mutual authentication
    between a reader and a tag before commencing application-level communications.
    This is because tags should not share secret information with unknown parties
    and readers need to defend against tag impersonation. Authentication protocols
    designed for communication between computers, however, are not appropriate for
    RFID systems because tags are extremely resource constrained (low energy, small
    memory, etc.). Thus, there have been many attempts to design secure and practical
    authentication protocols for RFID systems over the years since RFID systems became
    prevalent. This survey summarizes and compares these protocols. The Effect of
    Multipath in Distributed Arrays with Time Reversal Hassna Ouassal and 2 more April
    03, 2024 This article examines the effect of multipath channels on the performance
    of distributed arrays that employ time reversal. A model of the signal received
    from a distributed array is formulated, and a statistical analysis of the variation
    in signal power in the presence of phase noise and multipath is given. We present
    the impact these nonidealities have on received signal power, and we analyze the
    received power for three specific cases: continuous waveform, impulse waveform,
    and modulated rectangular pulse waveform in the presence of standard channel models.
    It is shown that for larger arrays in multipath channels, the change in power
    between coherent and incoherent states converges to the line-of-sight channel.
    It is further shown that in a line-of-sight channel time-reversal completely cancels
    unknown channel delays resulting in coherent signals from all nodes in a distributed
    array, while in a multipath channel only the main diagonal round-trip paths are
    coherent. Nevertheless, this additional benefit improves signal coherence in complex
    channels and can aide in distributed array synchronization using two-way time
    transfer. Disproof of Hodge Conjecture by Graph Theory Jihyeon Yoon April 02,
    2024 Hodge conjecture is turned out to be false in extension of graph theory based
    on its algebraic attribute. Hash3D: Training-free Acceleration for 3D Generation
    Xingyi Yang and 1 more April 02, 2024 The evolution of 3D generative modeling
    has been notably propelled by the adoption of 2D diffusion models. Despite this
    progress, the cumbersome optimization process per se presents a critical hurdle
    to efficiency. In this paper, we introduce Hash3D, a universal acceleration for
    3D generation without model training. Central to Hash3D is the insight that feature-map
    redundancy is prevalent in images rendered from camera positions and diffusion
    time-steps in close proximity. By effectively hashing and reusing these feature
    maps across neighboring timesteps and camera angles, Hash3D substantially prevents
    redundant calculations, thus accelerating the diffusion model''s inference in
    3D generation tasks. We achieve this through an adaptive grid-based hashing. Surprisingly,
    this feature-sharing mechanism not only speed up the generation but also enhances
    the smoothness and view consistency of the synthesized 3D objects. Our experiments
    covering 5 textto-3D and 3 image-to-3D models, demonstrate Hash3D''s versatility
    to speed up optimization, enhancing efficiency by 1.3 ∼ 4×. Additionally, Hash3D''s
    integration with 3D Gaussian splatting largely speeds up 3D model creation, reducing
    text-to-3D processing to about 10 minutes and image-to-3D conversion to roughly
    30 seconds. The code is provided in https://github.com/Adamdad/hash3D. Area and
    Power Efficient Implementation of Configurable Ring Oscillator PUF Enas Abulibdeh
    and 4 more April 02, 2024 Physically Unclonable Function (PUF) is an emerging
    hardware security primitive that provides a promising solution for lightweight
    security. PUFs can be used to generate a secret key that depends on the random
    manufacturing process variation of the device for lightweight authentication and
    device identification. This work proposes an optimized version of the Configurable
    Ring Oscillator (CRO) PUF that aims to reduce power consumption and area overhead.
    The proposed design eliminates the duplication of ROs, reduces the switching activity,
    and introduces the inter-stage delay as an additional source of randomness. The
    proposed PUF has been implemented in 22nm FDSOI technology using the Synopsys
    tools. A comprehensive security analysis has been acquired utilizing Challenge-Response
    Pairs collected from 8 chips. Results show an average of 49.42%, 38.25%, 9.95%,
    and 45.5% for uniformity, diffuseness, reliability, and uniqueness, respectively.
    Compared with the state-of-the-art, the proposed design achieves an area and power
    reduction of 75% and 65.1%, respectively. With the proposed PUF delivering 10
    32 CRPs, it is classified as a strong PUF. Additionally, the proposed design passes
    NIST tests and achieves an average prediction accuracy of 67.1% of machine learning
    modeling. A Hero Or A Killer? Overview Of Opportunities, Challenges, And Implications
    Of Text-T... Mijat Kustudic and 1 more April 02, 2024 SORA is a text-to-video
    model that can create videos based on simple user prompts. The model promises
    to revolutionize the way content is created. When SORA is released to the general
    public, it may transform a wide array of industries but also pose significant
    challenges and risks. This research aims to provide a comprehensive understanding
    of SORA''s opportunities, challenges, and implications. It explores its potential
    applications in film-making, education, gaming, advertising, accessibility, healthcare,
    and social media content creation. Additionally, it delves into its potential
    challenges and risks, including misinformation, privacy concerns, bias, regulatory
    complexities, and dependence on technology. This research provides important recommendations
    to promote responsible deployment of the AI model. Advancements and Challenges
    in Robot Grasping and Manipulation for Aspiring Researche... Claudio Zito April
    02, 2024 Robot grasping and manipulation represent pivotal aspects of robotics
    research with profound implications for the future of autonomous systems. This
    report delves into the intricacies of designing robotic hands, the hurdles in
    creating robust manipulation actions, and the advancements in the field that poised
    to catalyze a new era of autonomy. Drawing inspiration from science fiction''s
    portrayal of robotics, we bridge the conceptual gap between fiction and ongoing
    real-world technical research, aiming to provide a comprehensive overview for
    students interested in robotics. ← Previous 1 2 3 4 5 6 7 8 9 … 509 510 Next →
    TechRxiv | Powered by Authorea.com Home About Submission Guidelines FAQs Terms
    of Use Privacy Policy Contact Us'
  inline_citation: '>'
  journal: ''
  limitations: '>'
  pdf_link: https://www.techrxiv.org/articles/preprint/A_Systematic_Literature_Review_Security_Threats_and_Countermeasure_in_Smart_Farming/22029974/1/files/39098063.pdf
  publication_year: 2023
  relevance_score1: 0
  relevance_score2: 0
  title: 'A Systematic Literature Review: Security Threats and Countermeasure in Smart
    Farming'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.20944/preprints201901.0285.v1
  analysis: '>'
  authors:
  - Peng Zhou
  - Decheng Zuo
  - K.M. Hou
  - Zhan Zhang
  - Jian Dong
  - Jian-Jin Li
  - Haiyin Zhou
  citation_count: 0
  full_citation: '>'
  full_text: '>

    This website uses cookies We use cookies to personalise content and ads, to provide
    social media features and to analyse our traffic. We also share information about
    your use of our site with our social media, advertising and analytics partners
    who may combine it with other information that you’ve provided to them or that
    they’ve collected from your use of their services. Consent Selection Necessary
    Preferences Statistics Marketing Show details             Deny Allow selection
    Allow all Instructions for Authors Awards About FAQ Submit Log in/Register preprints.org
    > engineering > control and systems engineering > doi: 10.20944/preprints201901.0285.v1
    Preprint Review Version 1 Preserved in Portico This version is not peer-reviewed
    A Comprehensive Technological Survey on the Dependable Self-Management CPS: From
    Self-Adaptive Architecture to Self-Management Strategies Peng Zhou * , Decheng
    Zuo , Kunmean Hou , Zhan Zhang * , Jian Dong , Jianjin Li , Haiyin Zhou Version
    1 : Received: 27 January 2019 / Approved: 29 January 2019 / Online: 29 January
    2019 (04:45:47 CET) A peer-reviewed article of this Preprint also exists. Zhou,
    P.; Zuo, D.; Hou, K.M.; Zhang, Z.; Dong, J.; Li, J.; Zhou, H. A Comprehensive
    Technological Survey on the Dependable Self-Management CPS: From Self-Adaptive
    Architecture to Self-Management Strategies. Sensors 2019, 19, 1033. Copy Abstract
    Cyber Physical Systems (CPS) has been a popular research area in the last decade.
    The dependability of CPS is still a critical issue, and rare survey has been published
    in this domain. CPS is a dynamic complex system, which involves various multidisciplinary
    technologies. To avoid human error and to simplify management, self-management
    CPS (SCPS) is a wise choice. And to achieve dependable self-management, systematic
    solution is necessary to verify the design and to guarantee the safety of self-adaptation
    decision, as well as to maintain the health of SCPS. This survey first recalls
    the concepts of dependability, and proposes a generic environment-in-loop processing
    flow of self-management CPS, and then analyzes the error sources and challenges
    of self-management through the formal feedback flow. Focus on reducing the complexity,
    we first survey the self-adaptive architecture approaches and applied dependability
    means; then we introduce a hybrid multi-role self-adaptive architecture, and discuss
    the supporting technologies for dependable self-management at the architecture
    level. Focus on dependable environment-centered adaption, we investigate the verification
    and validation (V&V) methods for making safe self-adaptation decision and the
    solutions for processing decision dependably. For system-centered adaption, the
    comprehensive self-healing methods are summarized. Finally, we analyze the missing
    pieces of the technology puzzle and the future directions. In this survey, the
    technical trends for dependable CPS design and maintenance are discussed, an all-in-one
    solution is proposed to integrate these technologies and build a dependable organic
    SCPS. To the best of our knowledge, this is the first comprehensive survey on
    dependable SCPS building and evaluation. Keywords cyber physical systems; industry
    4.0; MDE; lifetime verification & validation; dependability; correctness; flexibility;
    real-time self-adaptation, self-management; self-healing Subject Engineering,
    Control and Systems Engineering Copyright: This is an open access article distributed
    under the Creative Commons Attribution License which permits unrestricted use,
    distribution, and reproduction in any medium, provided the original work is properly
    cited. Download PDF Comments (0) We encourage comments and feedback from a broad
    range of readers. See criteria for comments and our Diversity statement. Leave
    a public comment Send a private comment to the author(s) * All users must log
    in before leaving a comment Related Articles Peer-review Articles A Decentralized
    Compositional Framework for Dependable Decision Process in Self-Managed Cyber
    Physical Systems Peng Zhou et al. Sensors, 2017 Incremental Construction for Scalable
    Component-Based Systems Tauseef Rana et al. Sensors, 2020 Adaptive Threshold Generation
    for Fault Detection with High Dependability for Cyber-Physical Systems Youngmi
    Baek et al. Applied Sciences, 2018 Autonomic Web Services Based on Different Adaptive
    Quasi-Asynchronous Checkpointing Techniques Mariano Vargas-Santiago et al. Applied
    Sciences, 2020 QHAR: Q-Holonic-Based ARchitecture for Self-Configuration of Cyber–Physical
    Production Systems Douha Macherki et al. Applied Sciences, 2021 Incremental Composition
    Process for the Construction of Component-Based Management Systems Tauseef Rana
    et al. Sensors, 2020 How to Deal with the Complexity of Future Cyber-Physical
    Systems? Martin Törngren et al. Designs, 2018 Failure Detection and Prevention
    for Cyber-Physical Systems Using Ontology-Based Knowledge Base Nazakat Ali et
    al. Computers, 2018 An Effective Security Requirements Engineering Framework for
    Cyber-Physical Systems Shafiq Rehman et al. Technologies, 2018 Minding the Cyber-Physical
    Gap: Model-Based Analysis and Mitigation of Systemic Perception-Induced Failure
    Yaniv Mordecai et al. Sensors, 2017 Views 519 Downloads 583 Comments 0 Get PDF
    Cite Share 0 Bookmark BibSonomy Mendeley Reddit Delicious Alerts Notify me about
    updates to this article or when a peer-reviewed version is published. Preprints.org
    is a free preprint server subsidized by MDPI in Basel, Switzerland. Contact us
    RSS MDPI Initiatives SciProfiles Sciforum Encyclopedia MDPI Books Scilit Proceedings
    JAMS Important links How it Works Advisory Board FAQ Friendly Journals Instructions
    for Authors About Statistics Subscribe Choose the area that interest you and we
    will send you notifications of new preprints at your preferred frequency. Subscribe
    © 2024 MDPI (Basel, Switzerland) unless otherwise stated Disclaimer Privacy Policy
    Terms of Use  Feedback'
  inline_citation: '>'
  journal: ''
  limitations: '>'
  pdf_link: null
  publication_year: 2019
  relevance_score1: 0
  relevance_score2: 0
  title: 'A Comprehensive Technological Survey on the Dependable Self-Management CPS:
    From Self-Adaptive Architecture to Self-Management Strategies'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.20944/preprints202306.1467.v1
  analysis: '>'
  authors:
  - Emmanuel Effah
  - Ousmane Thiaré
  - Alexander M. Wyglinski
  citation_count: 0
  full_citation: '>'
  full_text: '>

    This website uses cookies We use cookies to personalise content and ads, to provide
    social media features and to analyse our traffic. We also share information about
    your use of our site with our social media, advertising and analytics partners
    who may combine it with other information that you’ve provided to them or that
    they’ve collected from your use of their services. Consent Selection Necessary
    Preferences Statistics Marketing Show details             Deny Allow selection
    Allow all Instructions for Authors Awards About FAQ Submit Log in/Register preprints.org
    > computer science and mathematics > other > doi: 10.20944/preprints202306.1467.v1
    Preprint Review Version 1 Preserved in Portico This version is not peer-reviewed
    A Tutorial on Agricultural IoT: Fundamental Concepts, Architectures, Routing,
    and Optimization Emmanuel Effah *,‡ , Ousmane Thiare ‡ , Alexander M. Wyglinski
    ‡ These authors contributed equally to the work. Version 1 : Received: 20 June
    2023 / Approved: 21 June 2023 / Online: 21 June 2023 (03:23:58 CEST) A peer-reviewed
    article of this Preprint also exists. Effah, E.; Thiare, O.; Wyglinski, A.M. A
    Tutorial on Agricultural IoT: Fundamental Concepts, Architectures, Routing, and
    Optimization. IoT 2023, 4, 265-318. Copy Abstract This paper presents an in-depth
    contextualized tutorial on Agricultural IoT (Agri-IoT), covering the fundamental
    concepts, assessment of routing architectures and protocols, and performance optimization
    techniques via systematic survey and synthesis of related literature. The negative
    impacts of climate change and the increasing global population on food security
    and unemployment threats have motivated the adoption of the wireless sensor network
    (WSN)-based Agri-IoT as an indispensable underlying technology in precision agriculture
    and greenhouses to improve food production capacities and quality. However, most
    related Agri-IoT testbed solutions have failed to achieve their performance expectations
    due to the lack of an in-depth and contextualized reference tutorial that provides
    a holistic overview of communication technologies, routing architectures, and
    performance optimization modalities based on users’ expectations. Thus, although
    IoT applications are founded on a common idea, each use case (e.g., Agri-IoT)
    varies based on specific performance and users expectations as well as its technological,
    architectural, and deployment requirements. Likewise, the agricultural setting
    is a unique and hostile area where conventional IoT technologies do not apply,
    hence the need for this tutorial. Consequently, this tutorial addresses these
    via the following contributions: (1) a systematic overview of the fundamental
    concepts, technologies, and architectural standards of WSN-based Agri-IoT, (2)
    an evaluation of the technical design requirements of a robust, location-independent,
    and affordable Agri-IoT, (3) a comprehensive survey of the benchmarking fault
    tolerance techniques, communication standards, routing and medium access control
    (MAC) protocols, and WSN-based Agri-IoT testbed solutions, and (4) an in-depth
    case study on how to design a self-healing, energy-efficient, affordable, adaptive,
    stable, autonomous, and cluster-based WSN-specific Agri-IoT from a proposed taxonomy
    of multi-objective optimization (MOO) metrics that can guarantee an optimized
    network performance. Furthermore, this tutorial established new taxonomies of
    faults, architectural layers, and MOO metrics for cluster-based Agri-IoT (CA-IoT)
    networks and a 3-tier objective framework with remedial measures for designing
    an efficient associated supervisory protocol for cluster-based Agri-IoT networks.
    Keywords Bluetooth Low Energy (BLE); Cluster-based Agricultural IoT (CA-IoT);
    Fault Management (FM); Multi-Objective Optimization (MOO); Wireless Sensor Network-based
    Agricultural IoT (WSN-based Agri-IoT) Subject Computer Science and Mathematics,
    Other Copyright: This is an open access article distributed under the Creative
    Commons Attribution License which permits unrestricted use, distribution, and
    reproduction in any medium, provided the original work is properly cited. Download
    PDF Comments (0) We encourage comments and feedback from a broad range of readers.
    See criteria for comments and our Diversity statement. Leave a public comment
    Send a private comment to the author(s) * All users must log in before leaving
    a comment Related Articles Peer-review Articles Enhancing Energy Saving in Smart
    Farming through Aggregation and Partition Aware IoT Routing Protocol Karim Fathallah
    et al. Sensors, 2020 An Agile AI and IoT-Augmented Smart Farming: A Cost-Effective
    Cognitive Weather Station Amine Faid et al. Agriculture, 2021 LoRaFarM: A LoRaWAN-Based
    Smart Farming Modular IoT Architecture Gaia Codeluppi et al. Sensors, 2020 A Testbed
    to Evaluate the FIWARE-Based IoT Platform in the Domain of Precision Agriculture
    Ramón Martínez et al. Sensors, 2016 Latency-Adjustable Cloud/Fog Computing Architecture
    for Time-Sensitive Environmental Monitoring in Olive Groves Athanasios Tsipis
    et al. AgriEngineering, 2020 Towards Climate Smart Farming—A Reference Architecture
    for Integrated Farming Systems Georgios Kakamoukas et al. Telecom, 2021 LDAP:
    Lightweight Dynamic Auto-Reconfigurable Protocol in an IoT-Enabled WSN for Wide-Area
    Remote Monitoring Gazi Rahman et al. Remote Sensing, 2020 IoT-Enabled Precision
    Agriculture: Developing an Ecosystem for Optimized Crop Management Shadi Atalla
    et al. Information, 2023 UBER: UAV-Based Energy-Efficient Reconfigurable Routing
    Scheme for Smart Wireless Livestock Sensor Network Mohammed Alanezi et al. Sensors,
    2022 Traffic-Aware Secured Cooperative Framework for IoT-Based Smart Monitoring
    in Precision Agriculture Ibrahim Abunadi et al. Sensors, 2022 Views 86 Downloads
    180 Comments 0 Get PDF Cite Share 0 Bookmark BibSonomy Mendeley Reddit Delicious
    Alerts Notify me about updates to this article or when a peer-reviewed version
    is published. Preprints.org is a free preprint server subsidized by MDPI in Basel,
    Switzerland. Contact us RSS MDPI Initiatives SciProfiles Sciforum Encyclopedia
    MDPI Books Scilit Proceedings JAMS Important links How it Works Advisory Board
    FAQ Friendly Journals Instructions for Authors About Statistics Subscribe Choose
    the area that interest you and we will send you notifications of new preprints
    at your preferred frequency. Subscribe © 2024 MDPI (Basel, Switzerland) unless
    otherwise stated Disclaimer Privacy Policy Terms of Use  Feedback'
  inline_citation: '>'
  journal: ''
  limitations: '>'
  pdf_link: null
  publication_year: 2023
  relevance_score1: 0
  relevance_score2: 0
  title: 'A Tutorial on Agricultural IoT: Fundamental Concepts, Architectures, Routing,
    and Optimization'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.3390/iot4030014
  analysis: '>'
  authors:
  - Emmanuel Effah
  - Ousmane Thiaré
  - Alexander M. Wyglinski
  citation_count: 0
  full_citation: '>'
  full_text: ">\nCitation: Effah, E.; Thiare, O.;\nWyglinski, A.M. A Tutorial on\n\
    Agricultural IoT: Fundamental\nConcepts, Architectures, Routing,\nand Optimization.\
    \ IoT 2023, 4,\n265–318. https://doi.org/10.3390/\niot4030014\nAcademic Editors:\
    \ Antonio\nCano-Ortega and Francisco\nSánchez-Sutil\nReceived: 15 June 2023\n\
    Revised: 12 July 2023\nAccepted: 17 July 2023\nPublished: 27 July 2023\nCopyright:\n\
    © 2023 by the authors.\nLicensee MDPI, Basel, Switzerland.\nThis article is an\
    \ open access article\ndistributed\nunder\nthe\nterms\nand\nconditions of the\
    \ Creative Commons\nAttribution (CC BY) license (https://\ncreativecommons.org/licenses/by/\n\
    4.0/).\nIoT\nReview\nA Tutorial on Agricultural IoT: Fundamental Concepts,\nArchitectures,\
    \ Routing, and Optimization\nEmmanuel Effah 1,*,†\n, Ousmane Thiare 2,†\nand Alexander\
    \ M. Wyglinski 3,†\n1\nComputer Science and Engineering Department, University\
    \ of Mines and Technology,\nTarkwa P.O. Box 237, Ghana\n2\nDepartment of Informatics,\
    \ Gaston Berger University, Saint-Louis PB 234, Senegal;\nousmane.thiare@ugb.edu.sn\n\
    3\nRobotics Engineering Department, Worcester Polytechnic Institute, Worcester,\
    \ MA 01609, USA;\nalexw@wpi.edu\n*\nCorrespondence: eeffah@umat.edu.gh\n†\nThese\
    \ authors contributed equally to this work.\nAbstract: This paper presents an\
    \ in-depth contextualized tutorial on Agricultural IoT (Agri-IoT), cov-\nering\
    \ the fundamental concepts, assessment of routing architectures and protocols,\
    \ and performance\noptimization techniques via a systematic survey and synthesis\
    \ of the related literature. The negative\nimpacts of climate change and the increasing\
    \ global population on food security and unemployment\nthreats have motivated\
    \ the adoption of the wireless sensor network (WSN)-based Agri-IoT as an\nindispensable\
    \ underlying technology in precision agriculture and greenhouses to improve food\n\
    production capacities and quality. However, most related Agri-IoT testbed solutions\
    \ have failed to\nachieve their performance expectations due to the lack of an\
    \ in-depth and contextualized reference\ntutorial that provides a holistic overview\
    \ of communication technologies, routing architectures, and\nperformance optimization\
    \ modalities based on users’ expectations. Thus, although IoT applications\nare\
    \ founded on a common idea, each use case (e.g., Agri-IoT) varies based on the\
    \ speciﬁc performance\nand user expectations as well as technological, architectural,\
    \ and deployment requirements. Likewise,\nthe agricultural setting is a unique\
    \ and hostile area where conventional IoT technologies do not\napply, hence the\
    \ need for this tutorial. Consequently, this tutorial addresses these via the\
    \ following\ncontributions: (1) a systematic overview of the fundamental concepts,\
    \ technologies, and architectural\nstandards of WSN-based Agri-IoT, (2) an evaluation\
    \ of the technical design requirements of a robust,\nlocation-independent, and\
    \ affordable Agri-IoT, (3) a comprehensive survey of the benchmarking\nfault-tolerance\
    \ techniques, communication standards, routing and medium access control (MAC)\n\
    protocols, and WSN-based Agri-IoT testbed solutions, and (4) an in-depth case\
    \ study on how to\ndesign a self-healing, energy-efﬁcient, affordable, adaptive,\
    \ stable, autonomous, and cluster-based\nWSN-speciﬁc Agri-IoT from a proposed\
    \ taxonomy of multi-objective optimization (MOO) metrics\nthat can guarantee an\
    \ optimized network performance. Furthermore, this tutorial established new\n\
    taxonomies of faults, architectural layers, and MOO metrics for cluster-based\
    \ Agri-IoT (CA-IoT)\nnetworks and a three-tier objective framework with remedial\
    \ measures for designing an efﬁcient\nassociated supervisory protocol for cluster-based\
    \ Agri-IoT networks.\nKeywords: Bluetooth Low-Energy (BLE); cluster-based Agricultural\
    \ IoT (CA-IoT); fault management\n(FM); multi-objective optimization (MOO); wireless\
    \ sensor network-based Agricultural IoT (WSN-\nbased Agri-IoT)\n1. Introduction\
    \ and Tutorial Contributions\nCurrently, agriculture is the world’s largest business,\
    \ employing over one-third of the\neconomically active global population and over\
    \ 70% of the economically active population\nin Africa [1,2]. The impacts of high\
    \ population growth rates and climate change-induced\ndrought (according to Figure\
    \ 1) on food security, unemployment threats and reduced crop\nIoT 2023, 4, 265–318.\
    \ https://doi.org/10.3390/iot4030014\nhttps://www.mdpi.com/journal/iot\nIoT 2023,\
    \ 4\n266\nquantity/quality make smart Agricultural Internet-of-Things technology\
    \ (Agri-IoT) via\nprecision farming and greenhouses the most promising remedy.\
    \ However, the existing\nbenchmarking Agri-IoT solutions can only be acquired,\
    \ deployed, and managed by farmers\nwith sufﬁcient ﬁnancial resources, an electricity\
    \ grid, Wi-Fi/cellular coverage, and technical\nexpertise in IoT, which is generally\
    \ not the case in Ghana and Sub-Saharan Africa. These\ncall for a paradigm shift\
    \ in farming techniques, and the most promising game-changers are\nprecision farming\
    \ and greenhouses whose underlying technology is a robust, affordable,\nautonomous,\
    \ and optimized, innovative WSN-based Agri-IoT [3] that satisﬁes the critical\n\
    design expectations presented in Figure 2.\nFigure 1. Seasonal failure probability-2014\
    \ [4] depicting the extent of climate change impact on\nAfrica’s farmlands.\n\
    1/19/22, 2:05 PM\n7g.svg\nGeneralized Design  \nExpectations of  \nWSN-based Agri-IoT\
    \  \nTechnology\nSNs Deployment Density\nSNs Deployment Uniformity\nRouting Architectural\
    \ Quality\nSelf-healing Capacity\nSelf-adaptability to dynamic conditions\nPower\
    \ Optimization\nEvent Monitoring Accuracy\nAffordability\nSimple to Deploy and\
    \ Operate\nLocation-unrestricted\nInfrastructure-less\nBased on Freely Available\
    \ Technologies\nUsers' (Farmers)  \nExpectations\nNB: All red-colored expectations\
    \ are moderated by the associated Routing Protocol (RP)\nPerformance-based \n\
    Expectations\nUse Case-Specific \nExpectations\nFigure 2. Generalized design expectations\
    \ of WSN-based Agri-IoT technology.\nIoT 2023, 4\n267\nAlthough few surveys and\
    \ tutorials have been authored on this subject, they present\nmere classifications\
    \ of communications trends on classical IoT [2,5–8] without any context-\nspecific\
    \ technical considerations of the critical design expectations in Figure 2. For\
    \ instance,\nthe authors in [2,6,7] examined IoT’s communication infrastructure,\
    \ platforms, standards,\ndevelopment trends, and possible network solutions in\
    \ agriculture. Similarly, the roles of\nindustrial IoT (thus, identification-based\
    \ IoT (example, RFID [6], WSN [9], QR codes [5],\nbarcodes) and communication-based\
    \ IoT (example, ZigBee [5], Z-wave [6], MQTT [5,6],\nLoRa [10], SigFox [11], BLE\
    \ [12], Li-Fi [5], Wi-Fi [13], Near-Field Communication (NFC) [5],\nand power\
    \ line area network) were reviewed in terms of current research trends, applications,\n\
    and main challenges in [5]. Although RFID tags and WSNs have similar data acquisition\n\
    capacities, the authors concluded that WSN technology is more energy-efficient\
    \ and suitable\nfor Agri-IoT than the costly RFID technologies [5]. Overall, Agri-IoT\
    \ technology has not\nyielded its intended paradigm transformation in the agricultural\
    \ sector due to several technical\nchallenges that have not received adequate\
    \ contextual research considerations [14]:\n1.\nThe agricultural setting is a\
    \ unique area where conventional IoT technologies do\nnot apply. Existing Agri-IoT\
    \ solutions are location-restricted because they are mostly\nbased on Wi-Fi or\
    \ cellular communication technologies and electricity grids with\nconstrained\
    \ coverages in Africa. A typical African agricultural setting lacks access\nto\
    \ reliable electricity and the Internet for cellular/Wi-Fi-based technologies,\
    \ and the\nintended users (farmers) of Agri-IoT technology are low-income earners\
    \ with limited\ntechnological expertise. Common Agri-IoT applications mainly utilize\
    \ architecture-\nrestricted, high-resource-demanding routing techniques (e.g.,\
    \ routing over low-power\nand lossy networks protocol (RPL)) and communication\
    \ standards (e.g., 4G, 5G, Zig-\nBee, LoRa, Wi-FI, and long-term evolution (LTE))\
    \ [15], which are difﬁcult to access\nin typical African farms. Consequently,\
    \ Agri-IoT users in Africa expect a context-\nrelevant solution that is affordable,\
    \ simple to deploy and operate by non-experts,\nlocation-unrestricted, supportive\
    \ of large-scale farm management, and based on freely\navailable technologies\
    \ that do not require licensing. Thus, they are unlike popular IoT\nuse cases\
    \ such as medical, vehicular, and industrial IoT, whose designs are mainly\naffected\
    \ by critical factors including security, stable connectivity, and interference,\n\
    respectively, Agri-IoT is compelled to drive on affordable battery-powered SNs,\
    \ which\nmake architecture, low-power communication technology, power optimization,\
    \ cost,\nfault tolerance, multihop routing, scalability, and environmental impact\
    \ critical design\nfactors in order to address its resource or deployment-induced\
    \ challenges [12,16,17].\n2.\nHigh susceptibility to faults and failures: Agri-IoT\
    \ networks are vulnerable to faults\nand failures since the resource-constrained\
    \ SNs are densely deployed in hostile envi-\nronments to autonomously operate\
    \ via a network supervisory protocol with limited\npost-deployment maintenance\
    \ services. This supervisory protocol must incorporate\nsufﬁcient power optimization,\
    \ auto-fault management (FM), and self-adaptability\ntechniques in order to achieve\
    \ the desired performance expectation. Due to the lack of\nan in-depth and context-relevant\
    \ tutorial that bridges the gap between theoretical tax-\nonomies and real-world\
    \ designs, most canon Agri-IoT testbed solutions, such as those\nauthored in [1,10,11,17–20],\
    \ suffered abrupt failures during outdoor deployments.\n3.\nAgri-IoT technology\
    \ lacks comprehensive context-based synthesis from SN de-\nsign to ﬁeld deployment.\n\
    The power- and resource-constrained SNs that form\nthe WSN-based Agri-IoT network\
    \ in the aforementioned context require limited\ndata transmission rates, computational\
    \ capabilities, memory capacities, commu-\nnication distance, and operational\
    \ stability. Consequently, the associated routing\nprotocol [9,12,17,21], communication\
    \ technology, and routing architecture [22–24]\nmust support mechanisms that ensure\
    \ packet size and communication distance mod-\neration [16], efﬁcient channel\
    \ access management (CAM), and SN’s tasks manage-\nment. It is not a mere application\
    \ of conventional IoT to a farm, as many authors\nattempted [1,10–12,17–20,23,25,26],\
    \ which lacked application-speciﬁc requirements\nsuch as dense network inter-connectivity,\
    \ higher information perceptibility, compre-\nIoT 2023, 4\n268\nhensive intelligence\
    \ services, remote monitoring, smart decision making, and the\nexecution of precise\
    \ control/actuation actions on the farm.\n4.\nSuperﬁcial consideration of desired\
    \ communication technologies of Agri-IoT with-\nout considering the cluster-based\
    \ architecture: To date, Agri-IoT-related surveys and\ntutorials focused on high-power-demanding\
    \ communication technologies (Wi-Fi and\ncellular-based technologies), the centralized\
    \ architecture-constrained ZigBee standard,\nand the operation principles of conventional\
    \ IoT as authored in [1,10,11,14,18,19]\nwithout an in-depth consideration of\
    \ the unique case of Agri-IoT. It is well estab-\nlished that the cluster-based\
    \ architecture is the best candidate for Agri-IoT applica-\ntion [12,16,17,24];\
    \ however, there are no systematic evaluations to cement this fact.\nFor instance,\
    \ most benchmarking WSN-based IoT testbed solutions are founded on the\nZigBee\
    \ IEEE 802.15.4 communication standard and high-resource-demanding Wi-Fi,\ncellular-based,\
    \ and 6LoWPAN/IPv6 routing standards. These standards also thrive on\nwired or\
    \ ﬁxed IP-based infrastructural backbones, total Internet/electricity coverage,\n\
    and highly complex graph-based and centralized routing protocols [1,10,11,14,18,19],\n\
    leading to a lack of global signiﬁcance because Africa, which is the focus of\
    \ this study,\nhas less than 50% electricity/Internet coverage [27]. Also, ZigBee,\
    \ Wi-Fi and cellular-\nbased communication technologies with centralized or ﬂooding-based\
    \ routing archi-\ntecture [1,10,11,14,18,19] are capital-intensive, complex to\
    \ manage, location-restricted,\nenergy-inefﬁcient, and over-reliant on ﬁxed supporting\
    \ infrastructure. Therefore,\nan in-depth contextual assessment of how low-power\
    \ communication standards such\nas LoRa, SigFox, and Bluetooth Low-Energy (BLE)\
    \ evolve in cluster-based Agri-IoT\n(CA-IoT) networks can be of immeasurable beneﬁts\
    \ to the IoT community and farmers.\n5.\nThe role of Agri-IoT in eliminating food\
    \ insecurity, improving crop quality, alle-\nviating global poverty, and increasing\
    \ agricultural production volumes has been\nunderestimated [2,7,8,10,16,28,29].\
    \ The agricultural sector, which has been hindered\nby climate change, is the\
    \ largest global employer [3]. To revitalize this sector, CA-IoT\nhas emerged\
    \ with the most promising opportunities to address food and employ-\nment insecurity\
    \ issues and improve crop quality and economic conditions for the\nfarmers. However,\
    \ these beneﬁts have not been fully realized due to insufﬁcient\nresearch publicity.\n\
    To the best of our knowledge, no survey or tutorial articles have sufﬁciently\
    \ consid-\nered these technical issues and provided sufﬁcient technical guidelines\
    \ for the designers of\nAgri-IoT systems to make well-informed decisions in order\
    \ to achieve satisfactory network\nperformance. Additional realistic research\
    \ is needed regarding the contextual evaluation\nof SN design and deployment factors,\
    \ fundamental network design concepts and require-\nments, multi-objective optimization\
    \ (MOO) analysis of the parameters for designing the\nassociated routing protocol,\
    \ and efﬁcient operational metrics of the WSN sublayer of the\nAgri-IoT using\
    \ the cluster-based architecture. In addition, the assessment of the possibil-\n\
    ity of using low-power and accessible wireless communication technologies such\
    \ as BLE\nvia cluster-based architecture to achieve a complete infrastructure-less,\
    \ cheaper, energy-\nefﬁcient, self-healing, adaptive, and robust Agri-IoT network\
    \ is imperative. Furthermore,\na broader contextual overview covering all vital\
    \ aspects such as the fundamental concepts\nof Agri-IoT, technical design requirements\
    \ of SNs and WSN-based Agri-IoT, surveys of the\nbenchmarking communication standards,\
    \ routing protocols, and testbed solutions, and an\nin-depth case study on how\
    \ to design a self-healing, energy-efﬁcient, adaptive, and CA-IoT\nbased on the\
    \ performance and users expectations are illustrated in Figure 2. Such a refer-\n\
    ence document can help support researchers when they attempt to accurately model\
    \ and\noptimize the performance of Agri-IoT [14] so that the performance gap between\
    \ the simu-\nlated networks and the realized Agri-IoT testbed solutions [1] can\
    \ be addressed. By way of\naddressing these technical challenges, this tutorial\
    \ presents the following contributions:\n•\nPerform an in-depth synthesis and\
    \ review (1) the basic concepts of Agri-IoT, (2) the\ncomprehensive design considerations\
    \ of these networks, (3) the technical design re-\nIoT 2023, 4\n269\nquirements\
    \ of Agri-IoT, and (4) the up-to-date research progress on routing techniques,\n\
    communication standards, and testbed solutions of WSN-based Agri-IoT.\n•\nSystematically\
    \ survey the benchmarking of WSN-based IoT networks’ communication\nstandards,\
    \ FM techniques, routing and MAC protocols, and realization testbeds to\nrespectively\
    \ uncover the appropriate communication requirements for Agri-IoT, unveil\nthe\
    \ root faults and possible remedies in the WSN sublayer, derive a generalized\n\
    taxonomy of routing architectures, and deﬁne appropriate routing paradigms for\n\
    WSN-based Agri-IoT using the core PHY layer design metrics: affordability, self-\n\
    healing capacity, energy-efﬁciency, location independence, and network adaptability.\n\
    •\nSystematic synthesis of canon cluster-based routing protocols to uncover the\
    \ plethora\nof possible research gaps, derive a realistic taxonomy of MOO metrics\
    \ and propose\npossible MOO remedies that can be implemented using CA-IoT routing\
    \ architecture\nfreely available low-power communication standards.\n•\nProposition\
    \ of MOO-induced guidelines in the form of open issues that can help Agri-\nIoT\
    \ designers to build adaptive, robust, fault-tolerant, energy-efﬁcient, affordable,\n\
    and optimized CA-IoT networks in both simulation and real-world implementations.\n\
    Overall, this tutorial is motivated to provide a contextualized, in-depth understanding\n\
    of this technology and assist the reader in designing robust, affordable, and\
    \ optimized Agri-\nIoT networks that can act as reliable game-changers to avert\
    \ the stipulated challenges. Also,\nthe critical design, deployment, and QoS requirements\
    \ of WSN-based Agri-IoT networks\nfrom theoretical modeling to real-world deployment\
    \ are unveiled in order to bridge the\nexisting gap between the theory and practice\
    \ of this technology [1,14].\nThe remainder of this paper is organized into the\
    \ following sections: Section 2\nprovides a brief background comparative overview\
    \ of WSN, IoT, and Agri-IoT technologies,\nwhile Section 3 focuses on their components,\
    \ protocols, architectural layers, and proposed\narchitectural layers for WSN-based\
    \ Agri-IoT technology. Section 4 presents the detailed\ncontextual design and\
    \ implementation requirements of Agri-IoT networks, while Section V\ndeduces the\
    \ unique characteristics, challenges, and proposed performance expectations of\n\
    the associated routing protocols for the WSN sublayer of Agri-IoT. Sections 6–8\
    \ present\nsystematic surveys on routing protocols, FM techniques, and the canon\
    \ real-world testbed\nimplementations of WSN-based Agri-IoT solutions. Section\
    \ 9 examines how the above\ndiscussions have evolved using a case study of cluster-based\
    \ Agri-IoT (CA-IoT) for precision\nirrigation.Section 10 unveils open issues and\
    \ future works, while Section 11 concludes\nthe paper.\n1.1. Comparative Overview\
    \ of WSN, IoT, and Agri-IoT Technologies\nA comparative overview of the underlying\
    \ technologies (i.e., WSN, IoT, and Agri-\nIoT) forming the WSN-based Agri-IoT\
    \ are compared from the perspective of architectural\nvariations, users’ expectations,\
    \ and design and implementational differences in Table 1.\nAs depicted in Figure\
    \ 3, WSNs are formed by spatially distributed, autonomous,\nresource-constrained\
    \ SNs that wirelessly interconnect to communicate their sampled data\nto a BS\
    \ for further monitoring or event tracking purposes without necessarily requiring\n\
    the Internet. The main components of the WSN are the SNs, the BS/gateway, and\
    \ the\nevent sampling/routing software that supervises the entire network process.\
    \ A node\nmay route data directly or via relay SNs to the BS based on its location\
    \ and assigned\ntasks. The BS locally takes actionable decisions and execution\
    \ of the actuation actions.\nAlthough the WSNs are resource-constrained and fault-vulnerable,\
    \ they constitute the\ninevitable part of this technology [2] and the underlying\
    \ innovation of the WSN-based\nAgri-IoT framework. In contrast, classic IoT consists\
    \ of IoT devices that sense and transmit\ntheir sampled information directly or\
    \ via telemetry to the Internet for monitoring or event-\ntracking purposes, mostly\
    \ via the centralized routing architecture. Like BS in WSNs, IoT\ndevices can\
    \ connect to the Internet/IoT cloud via ﬁxed-line (thus, for a factory), 5G/4G/LTE\n\
    cellular/mobile networks, or Wi-Fi for further processing, storage, and decisions/actions.\n\
    IoT 2023, 4\n270\nTable 1. Comparison of WSN, IoT, and Agri-IoT technologies.\n\
    Characteristics\nWSN Technology\nIoT Technology\nAgri-IoT Technology\nInternet\
    \ Connectivity\nSNs have no direct connection to\nthe Internet, always via a\n\
    BS/router/gateway if necessary\nNodes directly send sampled\ndata to the Internet\n\
    SNs’ Internet connectivity can be either\ndirect or via a BS\nCritical Design\
    \ Factors/\nExpectations\nApplication-speciﬁc\nSecurity, interference, linking\n\
    ﬂeet\nPower optimization, routing\narchitectural support, fault tolerance,\non-site\
    \ auto-actuation demand,\nand self-adaptability to network\ndynamisms\nDeployment\
    \ Density\nApplication-speciﬁc\nModerate\nHigh\nPower Supply Constraints\nApplication-dependent\n\
    Application-speciﬁc\nCompelled to drive on battery power\nOn-Site Electricity\
    \ and Internet\nCoverage\nMay be possible\nRequired\nMostly inaccessible\nImplementational\
    \ Routing\nArchitecture\nCentralized or ﬂooded\nMostly centralized\nContextualized\
    \ cluster-based but\ninadequately researched\nCommunication Technology\nApplication-speciﬁc\n\
    May use high-power standards\nsuch as Wi-Fi, cellular-based,\nsatelite, ﬁxed-line,\
    \ etc.\nRequires low-cost low-power\nstandards such as BLE, LoRa, SigFox,\nZigBee,\
    \ etc. that support cluster-based\narchitecture\nUsers’ Expectations\nPerformance\
    \ stability\nPerformance stability\nAffordability, autonomous\nperformance stability,\n\
    location-independence, simple to\ndeploy and operate by non-experts,\nsupportive\
    \ of large-scale farm\nmanagement, and based on freely\navailable communication\
    \ technologies\nthat do not require licensing.\nNetwork Type\nData-centric\nUse\
    \ information network directly\nMostly data-centric\nBasic Components\nResource-constrained\
    \ SNs, BS or\nSink Node\nMay include smartphones, PCs,\nWSN, BS, Internet, IoT\
    \ cloud\nwith data analytic tools, and the\nuser interface app.\nWSN, BS, IoT-cloud\
    \ with\napplication-deﬁned user apps and data\nanalytical engines\nSecurity and\
    \ Privacy\nMedium\nHigh\nLow\nOn-Site Actuation Required?\nNot always\nNo\nYes\n\
    Network Participant Mobility\nduring Operation\nUsually static\nMobile\nApplication-speciﬁc\n\
    As presented in Figure 4, WSN-based Agri-IoT is an information- and knowledge-\n\
    intensive intelligent feedback control system for farm monitoring, data sampling/computing,\n\
    resource optimization, automation of farm operation (e.g., precision irrigation,\
    \ chemical ap-\nplication, livestock monitoring, and disease management [16]),\
    \ and actionable decision mak-\ning via a variety of battery-powered and wirelessly\
    \ connected SNs with sensing, processing,\nand communication capacities [2,29,30].\
    \ Unlike the WSN, Agri-IoT and IoT sample data to\nan Internet-based cloud. The\
    \ SNs that form the WSN sublayer are spatially distributed and\nself-conﬁgured\
    \ to achieve a myriad of remote sensing, surveillance/monitoring, and control\n\
    applications via automated sensing, wireless communication, and computing, making\
    \ in-\nformed decisions and performing actuation control [31] using precise, accurate,\
    \ and timely\nsampled information about a real-world phenomenon [32].\nIoT 2023,\
    \ 4\n271\n1/21/22, 10:46 AM\n700t.svg\nfile:///C:/Users/emman/Downloads/700t.svg\n\
    BS or Gateway  \nNode\nCell Phone  \nUser\nWeb App. User\nIoT Cloud + \nData Analytic\
    \  \nEngines\nDatabase \nServer\nWireless SN\nSmart IoT Device\n (a) The Agri-IoT\
    \ Framework\nE.g. Battery\nBLE\nE.g., a. DHT22     \nb. Soil Moisture  \nSensor\n\
    Cellular Tech. \ne.g. NB-IoT, LTE,  \nGSM\nZ-Wave Wi-Fi ZigBee\nE.g. a. RPi b.\
    \ Arduino\nPower Supply Unit\nSensing Unit\nCommunication Unit\nController Unit\n\
    (c)   Key Components of a SN for Agri-IoT Application \nAgricultural Field with\
    \ Agri-IoT\nDeployment\ni.e., expensive, fixed,\nenergy-inefficient,\nand non-ubiquitous\n\
    \ (b) Current Method of Agri-IoT Deployment\nSolar-Powered SNs in an\nExpensive,\
    \ Fixed\nInfrastructural Agri-IoT Field\nDeployment\nFigure 3. Generalized Agri-IoT\
    \ framework consisting of: ﬁeld layout overview of Agri-IoT framework\n(a), sample\
    \ of classic Agri-IoT in the state of the art (b), and key components of an SN\
    \ or a BS (c).\nIoT 2023, 4\n272\n8/19/2021\n2t.svg\nfile:///C:/Users/emman/Downloads/2t.svg\n\
    Functionality-Based\nTaxonomy of MMAC \nProtocols\nDuty-Cycle \nOptimization\n\
    Channel  \nAssignment \nManagement\n1. Synchronous\n2. Asynchronous\n3. Hybrid\n\
    1. Contention-based\n2. Scheduled-based\n3. Hybride\n1. Fixed Channel Assignment\n\
    2. Semi-Dynamic Channel Assignment\n3. Dynamic Channel Assignment\nHydrid (Required\
    \ for \nWSN-based Agri-IoT)\nAgri-IoT Tech. for Smart  \nSensing & Farm Monitoring\n\
    Smart Control\nSmart Analysis & \nResource Planning\nAgri-IoT-Based Farm Monitoring\
    \ and control cycle.\nBLE\nZ-Wave\nWi-Fi\nZigBee\nFarm Management Tools/Technologies\n\
    Figure 4. Conceptual framework: Agri-IoT-based farm monitoring and control cycle.\n\
    The main hardware components of an Agri-IoT framework, as presented in Figure\
    \ 3\nand Table 2, include the WSN (i.e., comprising the ﬁeld-deployed SNs or IoT\
    \ devices),\na base station (BS) or gateway or actuator controller, cloud servers,\
    \ and the user’s monitor-\ning/control devices. The on-farm participants (e.g.,\
    \ SNs and BS) in Agri-IoT are mostly\nbattery-powered and must be equipped with\
    \ sensing, computing, and communication\nabilities to form infrastructure-less,\
    \ robust, self-healing, and self-conﬁgured WSNs for data\ncollection and event\
    \ management [33]. The core units of the SNs in Figure 3c and the BS\nare compared\
    \ and contrasted in Table 2. As the framework in Figure 3a depicts, the IoT\n\
    devices can sense, process, and transmit their sampled data directly to the Internet\
    \ or IoT\ncloud without a gateway, whereas the SNs in WSN-based Agri-IoT perform\
    \ likewise via\na BS. This resource-sufﬁcient BS interfaces between the IoT cloud/user\
    \ and the WSN or\nactuator control system. It can also process the received data\
    \ and locally execute actionable\ndecisions via the actuator of the farm event\
    \ being monitored. The received data can also be\nrelayed to the analytical data\
    \ engines in the IoT cloud via a wired and wireless medium for\nfurther processing\
    \ and actions [13]. The resource-constrained WSN sublayer mainly uses\ndata-centric\
    \ protocols due to the SNs’ high deployment densities, high network dynamics,\n\
    and limited power supply of SNs. Although data-centric protocols are fragile and\
    \ not\nstandardized, they are more suitable than the high resource-demanding ID-based\
    \ IPv4 or\nIPv6 protocols in the addressing space of the WSN-based Agri-IoT.\n\
    Table 2. Comparison of SN and BS.\nNetwork\nParticipant\nPower Source\nCommunication\
    \ Technologies\nController Type\nProcessor/Memory\nRequirements\nRequires\nSensors\n\
    SN\nMostly battery-powered\nMostly relies on low-power,\nshort-ranged standards\
    \ such as\nBLE, LoRa, SigFox, and ZigBee for\non-ﬁeld communication\nCan be Arduino-based,\n\
    Raspberry Pi\n(RPi)-based, etc.\nLow processing and\nstorage powers but\nbased\
    \ on SN roles\nYes\nBS\nCan be battery-powered\nbut mostly use a more\nreliable\
    \ power supply\nMostly communicate with IoT\ncloud via ﬁxed line, Wi-Fi, cellular\n\
    technologies, and the WSN via\nthe low-power standards,\ne.g., BLE, LoRa, SigFox,\
    \ ZigBee,\nLoRa-based Satellite, etc.\nCan be RPi or\nArduino-based or a PC.\n\
    Requires high memory\nand processing powers\nNo\nIoT 2023, 4\n273\nAgri-IoT combines\
    \ WSN and IoT technologies into contextualized intelligent farm\nmanagement systems\
    \ to achieve higher event data quality and offer remote monitoring\nand control.\
    \ WSN-based Agri-IoT consists of the WSN sublayer, the gateways, the cloud\nservers,\
    \ and the remote interface application, as illustrated in Figures 3a and 5. Uniquely,\n\
    the current trends of Agri-IoT mandate that both intra-SN and BS–cloud communication\n\
    are based on low-power, ubiquitous, and freely available wireless standards [2].\
    \ Also,\nmost Agri-IoT solutions support bidirectional communications between\
    \ the BS/gateway\nand the cloud/users, whereby the BS updates the cloud/user database\
    \ and receives ac-\ntionable/control remote messages from the user or cloud analytical\
    \ decision results for\nactuation purposes. The WSN-based Agri-IoT is the most\
    \ dominant technology in the global\nsmart farming use cases in the agricultural\
    \ sector. The core tasks of SNs in a WSN-based\nAgri-IoT application, which are\
    \ frequently supervised by the associated routing protocol,\ninclude network construction/management,\
    \ data sensing, data processing/aggregation,\nfault tolerance, and communication\
    \ [9,12]. Also, the routing architecture must be supported\nby the associated\
    \ communication platform and the application-speciﬁc requirements of\nthe network.\n\
    1/21/22, 10:14 AM\n713.svg\nThings \nGateway/BS \n(Actuator controller) \nIoT\
    \ Cloud Servers \n(Data storage and process) \nSNs, Actuators, IoT-Enabled\nDevices,\
    \ WSNs\nZigbee, LoRa, SIGFOX,\nBLE, Z-Wave, etc\nCellular, WiFi, NFC,\nMobile,\
    \ LoRa DSL, Fibre\nEdge\nComputing\nUser Innterface\nMobile App,\nWeb App\nPhysical/Perception\
    \  \nLayer\nNetwork Management & \n Actuator Control Layer \nInformation Management\
    \ Layer  \n(Storage, Data Analytic Engines)\nIntegrated Application Layer, \n\
    Business Layer\nApplication  \nLayer\nAgri-IoT Layers\nAgri-IoT Architectural\
    \ Components\n-Purpose of use  \n-Type of internet \n connection \n-Type of device\
    \ \n (sensor, server etc.) \n-Device dimensions \n-Energy consumption\nThings\
    \ Taxonomy \ne.g., \nDDS\nCoAP \nAMQP \nMQTT \nXMPP \nHTTP\nDDS: Data Distribution\
    \ Service, CoAP: Constrained Application Protocol\nMQTT: Message Queue Telemetry\
    \ Transport, XMPP: Extensible Messaging and Presence Protocol \nAMQP: Advanced\
    \ Message Queuing Protocol, HTTP: Hypertext transfer protocol\nClassification\
    \ of Design Challenges  \nof Agri-IoT Technology\nAgri-IoT Participant Design\
    \  \n(e.g., SNs, Relay SNs, and BS)\nComponents selection \n(e.g., Controller,\
    \ Sensors,  \nPower supply, Comm. Tech.).\nTask-scalability\nBattery sizing\n\
    Design of Supervisory  \nRouting Protocol\nFault management (FM\nPower optimizattion\n\
    Network construction & event routing \n(Route architecture selection)\nAdaptability/scalability\n\
    Network maintenance\nOperation and \nSelf-maintenance\nSN deployment density \n\
    SN uniformity \nPhysical Architecture\nField Deployment/ \nParticipants' Placement\n\
    Adaptability \nSelf-healing capacity \nNetwork management \nFigure 5. Proposed\
    \ Agri-IoT architectural layers with core components of Agri-IoT ecosystem and\
    \ the\n“things” taxonomy.\nUnlike IoT and WSN whose design expectations are application-speciﬁc,\
    \ WSN-based\nAgri-IoT requires holistic integrations of the expectations in Figure\
    \ 2.\n1.2. Classiﬁcations of IoT Applications and Speciﬁc Roles of Agri-IoT\n\
    Generally, IoT technology is application-speciﬁc. However, it has limitless applications\n\
    and roles in the smart world agenda. Based on their intended purpose, WSN-based\
    \ IoT sys-\ntems can be broadly classiﬁed into condition monitoring and event-tracking\
    \ categories [34],\nas illustrated in Figure 6.\nThe monitoring-based applications\
    \ involve real-time event data collection and analysis,\nsupervision, and operational\
    \ control of systems. In contrast, tracking-based applications\ntrack changes\
    \ in the phenomenon of interest, such as the locations of objects, persons,\n\
    transported goods, animals, and vehicles. Both application domains can be subdivided\n\
    into industrial, environmental, and societal IoT applications in Figure 6, where\
    \ speciﬁc\nexamples are provided for each application domain. For instance, monitoring-based\
    \ ap-\nplications may include indoor/outdoor environmental monitoring [6], industrial\
    \ process\nmonitoring [5,29], process control [2], greenhouse automation [7],\
    \ precision agriculture\n(e.g., irrigation management, crop disease prediction,\
    \ prediction of production quality,\nIoT 2023, 4\n274\nand pest and disease control)\
    \ [2,8], biomedical or health monitoring [8], electrical grid net-\nwork monitoring/control\
    \ [12,29], military location monitoring [9], and so forth. Conversely,\nspecific\
    \ examples of tracking-based applications may include habitat tracking, traffic\
    \ tracking,\nplant/animal condition tracking, and military target tracking, as\
    \ outlined in Figure 6.\n1/21/22, 10:55 AM\n701.svg\nEcology: Wildlife Tracking\n\
    Water Level/Quality Tracking\nCondition  \nMonitoring \nEvent  \nTracking\nIndustrial\
    \ IoT\nEnvironmental IoT\nSocietal IoT\nIndustrial IoT\nEnvironmental IoT\nSocietal\
    \ IoT\nPublic Health: WSN Body Area\nNetwork-WBAN\nMilitary: Enemy tracking\n\
    Farm Animal Tracking\nVehicular Tracking\nEquipment & Goods Tracking\nSmart Tracking\
    \ Control\nAerospace & Aviation\nSmart Transportation &\nLogistics\nSmart Electrical\
    \ Grid &\nMetering Systems\nWarehouses & Storage\nIndustrial Process & Plant\n\
    Automation\nSmart Agriculture: Precision\nFarming & Greenhouses \nDisaster Management\n\
    Pollution Control\nInfrastructural Monitoring\nSmart Power Plants\nSecurity &\
    \ Surveillance\nMilitary: Intrution\nDetection\nMedical IoT\nEntertainment & Media\n\
    Smart Environment: e.g.\nHomes, Schools, Cities,\nHospitals\nIoT  \nApplications\
    \ \nFigure 6. Generalized taxonomy of IoT applications.\n1.3. Agri-IoT Roles and\
    \ Use-Cases\nThe concept of intelligent farming involves data acquisition, data\
    \ processing/planning,\nand smart control using the WSN and IoT technologies,\
    \ big data, and cloud computing\ntechniques to provide proﬁtable solutions, as\
    \ presented in Figure 7. These principal roles\nin Figure 7 deﬁne their use cases.\
    \ For instance, monitoring the state of crops or the\nclimate of the ﬁeld using\
    \ Agri-IoT technology can allow farmers to know precisely the\namount of pesticides,\
    \ water, and fertilizers required to attain optimal crop quality and\nproduction\
    \ volume. However, the QoS requirements, the routing techniques, architectural\n\
    requirements, and the operational dynamics differ from one use case to another.\
    \ This\ntutorial focused on the critical and unique design requirements of WSN-based\
    \ Agri-IoT,\nwhich is the backbone of the smart agricultural initiative [35].\
    \ The resulting use-cases in\nFigure 7 can be explained as follows:\n1.\nAgri-IoT\
    \ for Climate Condition or Agronomical Monitoring: This Agri-IoT system mostly\n\
    comprises BS (i.e., weather stations) and a deployed WSN. The analytical data\
    \ engines\nmine the sampled climate or crop condition data in the cloud to predict\
    \ future climate\nconditions and farm automation plans. The most suitable crop\
    \ and precise farming\npractices can then be predeﬁned to improve agriculture\
    \ production capacity and\nquality.\n2.\nAgri-IoT for Precision Farming: This\
    \ is the most famous application of Agri-IoT, whereby\nfarming practices (e.g.,\
    \ irrigation, fertilizer application, etc.) are precisely and accu-\nrately controlled\
    \ to optimize these resources. Here, the SNs are mostly ﬁtted with soil\nsensors\
    \ to collect a vast array of microclimatic data (e.g., soil moisture, temperature,\n\
    and salinity) that can enable farmers to estimate optimal amounts of water, fertiliz-\n\
    IoT 2023, 4\n275\ners, and pesticides needed by the crops to minimize resources’\
    \ costs and produce\nhealthier crops. Additionally, the BS controls the event\
    \ actuation system via accurate\ndata-driven real-time decisions on the crops\
    \ using climate data, crop growth data,\nand disease infection data.\n3.\nAgri-IoT\
    \ for Greenhouse Automation: The Agri-IoT-based approach provides more accu-\n\
    rate real-time information on greenhouse conditions, such as lighting, temperature,\n\
    soil condition, and humidity, unlike manual greenhouse management. This allows\n\
    precise remote monitoring and control or automation of all farming practices.\n\
    4.\nAgri-IoT for Livestock Monitoring and Management: In this system, SNs are\
    \ attached\nto livestock to monitor their real-time health, track their physical\
    \ location, and log\ntheir performance. This helps the farmer identify and isolate\
    \ sick animals to avoid\ncontamination and reduce stafﬁng expenses.\n5.\nAgri-IoT\
    \ for Predictive Analytics: This Agri-IoT system provides highly relevant real-\n\
    time data that can be analyzed to make essential predictions, such as crop harvesting\n\
    time, risk of disease infection, yield volume, yield quality, and yield vulnerability,\n\
    for proper planning.\n6.\nAgricultural Drones (Agri-Drones): Agri-Drones, such\
    \ as DroneSeed, are ﬁtted with\nmobile SNs and farming tools to collect agricultural\
    \ data or perform activities such\nas ﬁeld surveillance, crop planting, pest control,\
    \ farm spraying, crop monitoring, etc.\nFor example, for Agri-Drones, all the\
    \ above use cases utilize the WSN-based Agri-IoT\nframework.\n1/21/22, 11:01 AM\n\
    712.svg\nResource Optimization  \ne.g. water, fertilizer,  \npesticides, insecticides\n\
    Soil Management \nCrop monitoring/ Animal\nCondition monitoring or\ntracking (Disease\
    \ Control)\nFarm Automation\nRoles of  \nAgri-IoT\nRoles of  Agri-IoT  \nin Smart\
    \ Farming\nE.g. Crop Monitoring via: \nAgric. Drones\nClimatic Conditions\nSmart\
    \ Greenhouses\nPrecision Farming\nTaxonomy of  \n Agri-IoT Use-cases\nWSN-based\
    \ Agri-IoT Use-Cases \nClimate Condition Monitoring\nPrecision Farming\nGreenhouse\
    \ Automation\nLivestock Monitoring \nPredictive Analysis\nDrone-based Agri-IoT\
    \  \nUse-Cases \nDroneSeed\nAgri-Drones\nFigure 7. The roles of Agri-IoT in smart\
    \ farming with speciﬁc use cases.\n2. The Agri-IoT Ecosystem\nThe authors in [1,14]\
    \ established that the existing real-world attempts of Agri-IoT could\nnot meet\
    \ both performance and user users’ expectations because they are founded on the\n\
    fundamental concepts and the operational principles of classic IoT and WSN technologies.\n\
    To effectively achieve the expectations in Figure 2, it is imperative to conduct\
    \ a systematic\nassessment of the related architectural layers in classic IoT\
    \ and propose a suitable option for\nthe WSN-based Agri-IoT ecosystem. Generally,\
    \ the conventional IoT ecosystem consists\nof the network architectural layers\
    \ and the data management platforms [2,7,8], which\nare further grouped into devices\
    \ (sensors, actuators, and gateways/BS), network (BS to\ncloud), platforms/applications’\
    \ cloud, and agents/users. Due to the domain-speciﬁc\nrequirements of IoT applications\
    \ and the incorporation of numerous heterogeneous devices\nIoT 2023, 4\n276\n\
    with application-speciﬁc requirements, there are generally no uniﬁed or standardized\n\
    IoT architectural layers. Therefore, most application-defined layers are frequently\
    \ adapted\nfrom the canon architectural layers, which include the three-layer\
    \ [5], the cloud-based [7],\nthe service-oriented architecture (SOA) [2,7], and\
    \ the fog-based [2,7,29], as illustrated in\nFigure 8.\n1/20/22, 8:49 PM\n714.svg\n\
    file:///C:/Users/emman/Downloads/714.svg\nPhysical/Perception  \nLayer\nProcess\
    \ Layer\nCloud-based \nArchitecture of IoT\nCloud Services\nGateway\nPhysical\
    \  \nLayer\nNetwork Layer\nApplication \n Layer\nThe 3-Layer \nArchitecture of\
    \ IoT\nClient Services\nStorage Layer\nData from IoT \nDevices\nProcessing Layer\n\
    Fog-based \nArchitecture of IoT\nData Acquisition Layer\nNetwork Layer\nInterface\
    \ Layer\nManagement Layer\nService Oriented \nArchitecture of IoT\nPhysical &\
    \ MAC Layer \ne.g.  Z-wave, ZigBee\nAdaptation Layer \nIPv6, 6LoWPAN\nApplication\
    \ Layer\nNetwork Layer e.g. \n IPv4, IPv6, RPL,RCEEFT\n6LoWPAN Layer  \nStructure\
    \ (e.g. RPL)\nTransport Layer,TCP, UDP\nFigure 8. Different architectural layers\
    \ in the state of the art of IoT ecosystem.\nThe fog-based architecture was adapted\
    \ from the three-layer parent architecture to in-\nclude cloud computing by offering\
    \ computing, storage, and network information between\nthe clients and the cloud\
    \ services [29] in a decentralized manner. Here, cloud computing\nand fog/edge\
    \ computing architectures only differ in where data computing occurs. These\n\
    layers are not uniﬁed because the respective network layers do not cover all underlying\n\
    technologies that transfer data to all IoT platforms [5]. Additionally, they are\
    \ based on com-\nplicated centralized and ﬂooding-based routing architectures,\
    \ high-resource-demanding\nand capital-intensive Wi-Fi/cellular-based communication\
    \ technologies. As well, they\nrequire wired infrastructural support in the farm,\
    \ which is too complex, location-restricted,\nand capital-intensive for most low-income\
    \ and non-expert farmers to implement and\nmanage. Consequently, they are unsuitable\
    \ candidates for the resource-constrained SNs\nin WSN-based Agri-IoT. By implication,\
    \ there are no reference guidelines for designing\nAgri-IoT participants and supervisory\
    \ protocols, controlling the speed of packet delivery,\nsmoothing out SN’s integration,\
    \ unifying technology, and creating standardized Agri-\nIoT reference models,\
    \ among other considerations. In contrast, an Agri-IoT ecosystem,\ndepicted in\
    \ Figure 3, consists of:\n1.\nAgri-IoT network architectural layers: This shows\
    \ how the physical network elements,\nnetwork operation principles, and operational\
    \ techniques interact throughout the\nentire ecosystem.\n2.\nNetwork supervisory\
    \ software/routing protocol and routing architectures: This con-\ntains the virtual\
    \ arrangement of multiple network elements [8] and the event sam-\npling/routing\
    \ protocol that constructs the routing architecture, supervises sampling\nand\
    \ moderates all communications in the PHY layer.\n3.\nData management platform:\
    \ It hosts all high-resource-demanding data analytic en-\ngines, event databases,\
    \ and remote control algorithms in a cloud model.\n2.1. Proposed Architectural\
    \ Layers for WSN-Based Agri-IoT\nIn designing an efﬁcient Agri-IoT system of global\
    \ signiﬁcance, it is imperative to\npropose suitable architectural layers and\
    \ evaluate how the various components interact in\nthese layers. With the emerging\
    \ advances in low-power, freely available, and boundless\ncommunication standards\
    \ (e.g., BLE) and unfulﬁlled potentials of CA-IoT network [12,16],\nIoT 2023,\
    \ 4\n277\na new framework of cluster-based architectural layers for the WSN-based\
    \ Agri-IoT ecosys-\ntem is proposed in the left side of Figure 5. The center portion\
    \ of Figure 5 presents the key\ncomponents/technologies required in each layer,\
    \ while the Things taxonomies of hardware\ncomponents from the related literature\
    \ [4,8,29] are depicted on the right portion of Figure 5.\nThe underlying layers\
    \ in our four-tier layers in Figure 5 can be elaborated on as follows:\n1.\nIntegrated\
    \ Application and Management Layer: This operates all agriculture-related\napplications\
    \ that interface between the user (for example, farmer) and the Agri-IoT\nsystem\
    \ to make decisions and execute remote actions to keep their crops or animals\n\
    healthy. This layer manages the entire Agri-IoT system and its application-speciﬁc\n\
    functionality, high-resource-demanding applications, and core business model in\
    \ the\ncloud. This layer’s security requirements are crucial to the next sublayer;\
    \ however,\nthese are beyond the scope of this research. The business or management\
    \ sublayer\nmaintains end-to-end data integrity and security by ensuring that\
    \ data are transferred\nto the correct user. It also ensures that the correct\
    \ user executes the actuation.\n2.\nInformation Management Layer: This handles\
    \ data processing, storage, and other special-\nized cloud services and functionality\
    \ that make precise, actionable decisions. In Agri-\nIoT, the sensory data are\
    \ preprocessed locally to optimize communication power\nbut can be further processed\
    \ using analytic engines in the cloud for better decision\nmaking and remote monitoring\
    \ and control. This layer can be embedded in the above\napplication layers and\
    \ hosted in the cloud in a typical Agri-IoT ecosystem.\n3.\nNetwork Management\
    \ Layer: This layer discovers, connects, and translates devices over\na network,\
    \ and it coordinates with the above application layers. It also contains the\n\
    BS, which interfaces the resource-constrained WSN and cloud information network.\n\
    By convention, the WSN sublayer must utilize low-power communication standards\n\
    such as Zigbee, SigFox, LoRa, BLE, Z-Wave, SigFox, and IEEE P802.11ah (low-power\n\
    Wi-Fi), while the BS-to-Cloud connectivity can be achieved via the traditional\
    \ cellular\nnetworks, satellite networks, Wi-Fi, LAN, WAN, and LoRa, among others.\
    \ Unlike clas-\nsic IoT, Agri-IoT requires that the BS-to-Cloud connectivity utilize\
    \ low-power commu-\nnication standards. Also, since every communication standard\
    \ for the resource-limited\nWSN sublayer comes with unique resource speciﬁcations\
    \ and design tradeoffs be-\ntween power consumption, routing architectural constraints,\
    \ and bandwidth [4,14,17],\nthe best connectivity option must be selected to achieve\
    \ the desired application goals.\nConsequently, the stated WSN-based connectivity\
    \ technologies can be classiﬁed using\nseveral distinct parameters, such as energy\
    \ consumption rates, uplink/downlink data\nrates, packet size, SN-count per BS\
    \ (gateway), network routing topology, the SNs’\nsensing range, the SNs’ transmitter/receiver\
    \ power, frequency bandwidth, channel\nwidth, etc. (refer to the right portion\
    \ of Figure 5).\n4.\nPhysical/Perception/Things Layer: This layer refers to the\
    \ ﬁeld and all devices such as\nSNs, actuators, RFID tags, sensors, and edge devices\
    \ that interact with the environment.\nThis layer senses and collects the necessary\
    \ information from the connected devices in\nthe WSN sublayer to the BS. In Agri-IoT\
    \ networks, the sampled microclimatic data\ncan be processed and stored on the\
    \ local BS, the cloud, or both. The activities in the\ncloud or application layers\
    \ are beyond the scope of this tutorial.\n2.2. Associated Hardware Components\
    \ and Technologies Required in the Proposed Architectural Layers\nTo precisely\
    \ model and design an Agri-IoT network of desired expectations (refer to\nFigure\
    \ 2) using the proposed architectural layers shown in Figure 5, the knowledge\
    \ of the\nprincipal components and technologies used in each of these layers and\
    \ how they interact\nand adapt for their intended functions is imperative. As\
    \ depicted in the middle of Figure 5,\nthe Agri-IoT ecosystem is composed of the\
    \ following core components/technologies:\n1.\nThings: The Things unit is the\
    \ physical interface between the tracked/monitored asset\nand the BS or actuator\
    \ controller, which aligns with the physical or perception layer. It\ncomprises\
    \ the monitored/tracked asset (for example, ﬁeld, crop, or animal), the SNs,\n\
    or the entire IoT devices making up the WSN (for example, SNs, actuators, IoT-enabled\n\
    IoT 2023, 4\n278\ndevices, WSNs, and other smart devices), the event sampling,\
    \ and routing technology\nin the WSN. Since the SNs constituting this unit are\
    \ resource-constrained, freely\navailable communication standards such as Zigbee,\
    \ BLE, Z-Wave, and IEEE P802.11ah\n(low-power Wi-Fi) are the most suitable for\
    \ both SN–SN and SN–BS communications.\nThe Things unit accesses the cloud/Internet\
    \ via gateways (BS).\n2.\nGateway (BS): The BS interfaces the WSN out in the ﬁeld\
    \ and the applications situated\nin the cloud servers. This unit aligns with the\
    \ network management and actuator\ncontrol layer shown in the middle of Figure\
    \ 5. The WSN sublayer may have more\nthan one BS(s), each with the capacity to\
    \ handle most resource-demanding com-\nputational tasks besides actuation execution,\
    \ network construction, scheduling of\nevent sampling, and network supervision\
    \ services. They may also allow bidirectional\ncommunication with the cloud/user\
    \ and WSN. Similar to standalone IoT devices,\nthe BS can be equipped with 4G/5G/LTE/NB-IoT,\
    \ cellular-based, Wi-Fi, LoRaWAN,\nor wired ethernet communication technologies\
    \ to interact with the cloud, and low-\npower communication standards such as\
    \ LoRa, low-power Wi-Fi, SIGFOX, UMTS,\nBLE, and Zigbee (Figure 5) to communicate\
    \ with the sensor ﬁeld. However, Agri-IoT\nnetworks require that both upper-layer\
    \ and lower-layer communication technolo-\ngies of the BS should be low-power,\
    \ freely available, easy to deploy and manage,\nand platform-independent. The\
    \ BS may preprocess or relay the raw data to the cloud\nfor remote data processing.\
    \ The BS(s) locations are strategically chosen to optimize\nnetwork communication\
    \ costs.\n3.\nIoT Cloud: The Cloud unit aligns with the applications layer. It\
    \ consists of an on-\npremises or remote server farm that hosts the applications\
    \ layer, event data analytic\nengines, security protocols, robust IoT applications,\
    \ user interface, and event database.\nThe high resource-demanding data-processing\
    \ tasks are mostly executed by well-\nequipped cloud-hosted applications to manage\
    \ and store huge amounts of data,\nprovide monitoring and data analytical services,\
    \ enable communication with devices,\nand manage information access. The merits\
    \ of edge computing can be exploited to\nensure that large amounts of data are\
    \ post-processed off-device to reduce the response\ntimes of the cloud.\n4.\n\
    User Interface: With the aid of a web or mobile app, the user or farmer can live-\n\
    monitor the farm’s conditions and execute control actions. Additionally, a presentation\n\
    or business intelligence layer may be added to coordinate the activities of non-technical\n\
    business users through dashboards and reports rather than with the application\n\
    layer itself.\n2.3. Quality Expectations of Agri-IoT’s Architectural Layers\n\
    Although there is no uniﬁed, certiﬁed, and ﬂexible Agri-IoT architecture layer,\
    \ any\nsuitable options deduced from the benchmarking architectures in Figure\
    \ 8 must satisfy\ncertain quality requirements, including:\n1.\nSimultaneous data\
    \ acquisition, analysis, and control from many sensors or actuators.\n2.\nMinimization\
    \ of huge raw data transmissions via data aggregation techniques to\nmaximize\
    \ actionable information quality.\n3.\nProvision of reliable network architecture\
    \ that supports energy-efﬁcient routing, sta-\nble connectivity, self-adaptability,\
    \ fault tolerance, operational simplicity/ﬂexibility,\nplatform independence,\
    \ affordability, and location independence of Agri-IoT designs.\n4.\nSupport for\
    \ automated/remote device management and updates.\n5.\nEasy integration of each\
    \ layer with existing applications and other IoT solutions via\nspeciﬁed APIs.\n\
    6.\nUtilization of freely available, location-unrestricted, cheap, energy-efﬁcient,\
    \ and simple\nto deploy and manage by non-experts [4,29] underlying communication\
    \ technologies\nin the PHY and network layers as well as based on open standards\
    \ to guarantee\ninteroperability.\nIoT 2023, 4\n279\n3. Design and Implementation\
    \ of Agri-IoT Networks\nDespite the technical challenges associated with the WSN-based\
    \ Agri-IoT, its potential\ncontributions in the agricultural sector largely surpass\
    \ the least complex, capital-intensive,\npure IoT-based solutions, as illustrated\
    \ in Figures 3b and 7. Due to the broader applicability\nand higher signiﬁcance\
    \ of the WSN-based Agri-IoT networks relative to the classic IoT\nnetworks, this\
    \ study focuses on the former technology whose design and implementation\ninvolve\
    \ four crucial phases, namely:\n1.\nCustom-building of robust, affordable, energy-efﬁcient,\
    \ location-independent, and\nadaptive SNs and a BS that can form an infrastructure-less\
    \ and easily manageable WSN.\nThe SNs and the BS must consist of cost-effective,\
    \ architecture-deﬁned, and context-\ndeﬁned components so that the system operates\
    \ stably and efﬁciently, becomes afford-\nable to farmers, and easily integrates\
    \ to any real-world scenario without any expensive,\nﬁxed/wired backbone connections.\
    \ The low-power capabilities of the SNs help to\neasily integrate them into any\
    \ precision farms and greenhouses to operate over the\nentire crop season without\
    \ many technical hindrances.\n2.\nPhysical deployment of the SNs in the ﬁeld,\
    \ selection of the WSN’s communication\ntechnology, and design of a suitable supervisory\
    \ protocol to coordinate the construc-\ntion of appropriate event routing architecture,\
    \ the duty-cycle schedule of event sam-\npling to the BS, fault management, data\
    \ management, and network maintenance.\nAdditionally, a range of techniques such\
    \ as network participant mobility, cross-layer\ndesign, MAC techniques, data aggregation,\
    \ self-healing techniques, nodes’ duty-cycle\nschedule, security measures, localization,\
    \ and communication speciﬁcations of the\nSNs can also be exploited in the associated\
    \ routing protocols.\n3.\nSelection of appropriate BS/gateway communication technology\
    \ and design of a\nsuitable higher protocol to update the cloud database and execute\
    \ the actuation\nactions based on users’ requests or decisions on processed event\
    \ data.\n4.\nDesign of data analytical engines and applications in the cloud and\
    \ users’ remote\nmonitoring and control interface app, which is beyond the scope\
    \ of this tutorial.\nThese call for a systematic application-speciﬁc assessment\
    \ of the hardware components\nselected for every use case.\n3.1. Sensor Nodes\
    \ Design Considerations\nAs illustrated at the bottom of Figure 3, a node for\
    \ the WSN-based Agri-IoT network\nconsists of four main units, which include the\
    \ following:\n1.\nSensing Unit: This unit interfaces with the physical environment\
    \ and records the\nphysical phenomenon of interest. The type of sensor is application-speciﬁc\
    \ and can\nbe contact-based or non-contact-based. For instance, the STEMMA soil\
    \ moisture\nsensor and the DHT22 sensor can be used to sample environmental temperature\
    \ and\nhumidity (refer to Figure 3c).\n2.\nController Unit: This unit hosts the\
    \ processor, storage, and connection pins for the\nother units and all auxiliary\
    \ peripherals. The suitable controllers for building Agri-IoT\nSNs are Arduino-based\
    \ and Raspberry-Pi-based (refer to the bottom of Figure 3) due\nto their ability\
    \ to withstand extreme weather conditions. However, other off-the-shelf,\napplication-speciﬁc\
    \ controllers such as the ProPlant Seed Rate Controller, John Deere\nGreenStar\
    \ Rate Controller, Viper Pro multi-function ﬁeld computer, Radion 8140,\nTrimble\
    \ Field-IQ, etc. are also available.\n3.\nCommunication Unit: This unit is the\
    \ principal determinant of the node’s power\nconsumption, operational stability,\
    \ and affordability, as well as the routing architecture\nin the associated supervisory\
    \ protocol. The bottom of Figure 3 shows the available\ncommunication technologies,\
    \ but an Agri-IoT-based SN demands an energy-efﬁcient,\naffordable, freely available,\
    \ simple, and reliable communication standard. Conse-\nquently, LoRa, BLE, ZigBee,\
    \ LoRaWan, and SigFox are the best candidates based on\nIoT 2023, 4\n280\nthe\
    \ support of the routing architecture of the resulting WSN, but the selection\
    \ must be\njustiﬁed from the technology requirement metrics via a decision matrix.\n\
    4.\nPower Unit: Since the SNs are mostly battery-powered, the appropriate battery\
    \ size\nand probable energy-harvesting techniques must be determined during the\
    \ SNs’\ndesign according to the intended network lifespan and stability requirements.\
    \ Modern\ntrends in battery power banks with integrated solar-based energy-harvesting\
    \ systems\nand power ratings above 30,000 Ah are available.\nWhen selecting hardware\
    \ components, adequate caution should be taken to avoid unit\nincompatibility,\
    \ high operational complexities, unsuitable operational thresholds, and high\n\
    energy consumption, among others. This implies that high component survivability\
    \ and op-\nerational stability under different environmental conditions and the\
    \ application speciﬁcities\nare vital to monitor.\n3.2. Wireless Spectrum and\
    \ Core Communication Platforms of WSN-Based Agri-IoT\nThe wireless electromagnetic\
    \ (EM) spectrum, which has invisible, ﬁnite radio fre-\nquencies for wireless\
    \ communication, can be licensed and sold exclusively by speciﬁc\nproviders or\
    \ unlicensed for free usage. For instance, the Industrial, Scientiﬁc, and Medical\n\
    (ISM) frequency band (e.g., Bluetooth classic, BLE, Wi-Fi, ZigBee, and LoRaWAN)\
    \ is an\nunlicensed microwave frequency band clustered around 2.4 GHz and globally\
    \ reserved for\napplications such as Agri-IoT. Table 3 presents the various bands\
    \ and their applications.\nA suitable candidate for a given Agri-IoT application\
    \ is based on several factors, such\nas communication and the route architectural\
    \ requirements, power consumption, cost,\nand environmental adaptability impacts.\n\
    Table 3. Wireless spectrum with the core communication platforms/applications.\n\
    Frequency Band\nApplications\nLicensed Band\n0–20 MHz\nAM radio\n86–108 MHz\n\
    FM radio\n470–800 MHz\nTV band\n850–1900 MHz\nCellular-based: GSM/3G/4G/5G/LTE\n\
    Around 3.5 GHz\nSatelite comm.\nUnlicensed Band\n863–928 MHz\nLoRa, LoRaWAN, SigFox\n\
    Legality location-dependent: e.g.,\n915 MHz (Australia & North America),\n865\
    \ MHz to 867 MHz (India), 923 MHz (Asia)\nAround 2.4 GHz\nWi-Fi, BLE, ZigBee,\
    \ Classic Bluetooth\nAround 5 GHz\nWi-Fi\n3.3. Factors to Consider When Deploying\
    \ SNs and Designing the Supervisory\nSampling/Routing Protocol\nAfter custom-building\
    \ or selecting off-the-shelf SNs, the next activity is to deploy\nthe SNs on the\
    \ ﬁeld and design a contextualized supervisory protocol to coordinate the\naforementioned\
    \ network’s activities. The SNs’ deployment in the ﬁeld can be either random\n\
    or deterministic. Both options require different methods to optimize the resulting\
    \ network’s\nperformance. For instance, under the deterministic approach, the\
    \ optimal parameters such\nas node uniformity and density must be predeﬁned based\
    \ on the distance thresholds of the\nassociated communication technology (i.e.,\
    \ connectivity/distance range), the SNs’ resource\noptimization mechanisms, the\
    \ type of routing architecture, and the sensing range of the\nphysical parameter\
    \ to be measured. Since communication is the principal power consumer,\nthe best\
    \ ways to conserve power are to minimize communication distance and data sizes\
    \ as\nwell as operate the SNs in the appropriate sleep–active duty cycles using\
    \ a cluster-based\nrouting architecture [9,24,26].\nBeyond the physical installation\
    \ of the SNs at their most suitable in-range locations,\nthe remaining activities,\
    \ such as network construction, event sensing, data management, FM,\nIoT 2023,\
    \ 4\n281\nnetwork maintenance, sleep–active duty-cycle scheduling of SNs for sampling,\
    \ network adapt-\nability to turbulent and scalable conditions, power-optimization\
    \ mechanisms, and network\nreconfiguration, among others, are controlled by the\
    \ associated routing protocol [12,16,17,26,36].\nThis places crucial merits on\
    \ the physical locations of the SNs in the ﬁeld, thorough synthe-\nsis of network\
    \ design factors, and assessment of available routing architectures/techniques,\n\
    since this protocol manages all post-deployment tasks. This can be summarized\
    \ into\nthe core objectives of the routing protocol and its architecture, which\
    \ include power op-\ntimization, self-healing of any faults without the obstruction\
    \ of its normal operation,\nand self-adaptability to all turbulent and scalable\
    \ conditions. From the analysis above,\nwe can derive the critical primary factors\
    \ to consider when designing a routing protocol\nfor Agri-IoT networks, which\
    \ are presented in Figure 9 and grouped into the following\ncategories: SNs speciﬁcations,\
    \ security issues, application-speciﬁc factors, communication\nstandard compatibility\
    \ and capacities, and other auxiliary factors. At the PHY layer level,\nwhich\
    \ is the focus of this tutorial, these critical factors can translate into the\
    \ stipulated core\ndesign objectives, which can be addressed via phase-based multi-objective\
    \ optimization\n(MOO) formulation frameworks [12,23,24,37].\n1/21/22, 10:18 AM\n\
    707.svg\n1. Resource Limitations\n    -e.g. Power, memory,    \n     computation,\
    \ bandwidth,  \n     transmission Range, etc.\nHardware Specification  \nof Agri-IoT\
    \ Device\n1. Routing protocol, network tech. & \n    architecture, and MAC technique\
    \ \n2. Interoperability of standard \n3. Deployment density & uniformity\n4. Routing\
    \ table capacity of SNs\n5. Connectivity issues \nCommunication Standard\n1. Resource\
    \ capacity \n2. Security necessity\n3. Information access type \nSecurity Issues\n\
    \ \n1. Data reporting frequency & trigger\n2. Environmental/field conditions\n\
    \    - Dust concentration, physical  \n      obstructions and landscape\n3. Routing\
    \ architecture & SN density\n4. Post-deployment maintainability\n5. Mobility of\
    \ network participants\n6. Data analysis   \nApplication-defined factors\n \n\
    1. Network Architecture (e.g. flat, hierarchical, location-based)\n2. MOO technique\
    \ of A-IoT functionality (e.g. of MOO metrics:   \n    energy efficiency, connectivity,\
    \ latency, coverage, packet  \n    delivery rate, SNs density & uniformity)\n\
    3. Fault Management (e.g fault detection, fault-tolerance, fault     avoidance)\n\
    4. Adaptability, scalability & control message complexity\n5 Suitability of MAC\
    \ techniques\nRouting Protocol\n1. User interface \n2. Software tools \n3. Sampling\
    \ schedules \n4. SN deployment density\nAuxiliary Factors\nAgri-IoT Network\n\
    Design Considerations\nAffordability\nFigure 9. Principal design factors for Agri-IoT\
    \ networks.\nHardware Speciﬁcations of SNs and BS Agri-IoT Device: The functional\
    \ and re-\nsource capacities of participants’ hardware units must be considered\
    \ before their respective\ntasks in the protocol are assigned. For instance, the\
    \ selected sensors’ quality must suit\nthe type of event information and its accuracy,\
    \ the available communication platforms,\nand the general purpose of the Agri-IoT\
    \ solution. Also, the communication standard must\nsupport the routing architecture\
    \ and SNs’ resource- and deployment-induced limitations.\nThe crucial communication-based\
    \ parameters of the SNs are illustrated in Table 4.\nIoT 2023, 4\n282\nTable 4.\
    \ Comparison of common communication platforms of the WSN sublayer of Agri-IoT.\n\
    Standard/\nNetwork\nPTx/mW\nPRx−elec/mW\nRange\nFreq.\nData Rate/\nNetwork\nEnergy\n\
    Topology\nSize\nBand\nLatency\nType\nBLE/ IEEE\n802.15.1 [6]\nApplication-\ndeﬁnned\n\
    3–10\n2 × 10−14\n10–50 m\n2.4 GHz\n1 Mbps/6 ms\nPAN, WSN\nVery Low\nStar, mesh\n\
    Bluetooth Classic/\nIEEE 802.15.1 [5]\n7\n215\n200 × 10−14\n10–100 m\n2.4 GHz\n\
    1–3 Mbps/100 ms\nPAN\nHigh\nScatternet\nWiFi/ IEEE 802.11\na/c/b/d/g/n [7]\n255\n\
    800–835\n162\n100 m\n5–60 GHz\n1 Mb/s–7\nGbps/50 ms\nLAN\nHigh\nPoint-to-hub\n\
    LoRaWAN/\nLoRaWAN\nR1.0 [6,8]\n104\n25–100\n2 × 10−14\n5–10 km\n868/900 MHz\n\
    0.4–100 Kbps/NA\nWAN\nVery Low\nStar\nSigFox [2,6]\nUndeﬁned\n122\n106\n15 miles\n\
    200 kHz\n100–600 bps\nPAN\nLow\nStar\nZigBee/IEEE\n802.15.4 [2,23]\n64,000+\n\
    36.9–100\n77\n10–20 m\n2.4 GHz\n20–250\nKbps/(20–30) ms\nPAN, WSN\nLow\nP2P, tree,\
    \ star,\nmesh\nNB-IoT,LTE/2G-\nGSM,\n4G-LTE [2,4]\n1000\n200–560\n80\n10–15 km\n\
    2.4 GHz\n200 Kb/s–1\nGbps/1 s\nWAN\nMedium\nCellular system\ncc2420//IEEE\n802.15.4\
    \ [23]\n64,000+\n8.9–36.9\n35.28\n580 m\n2.4 GHz\n20–\n250 Kbps/40 ms\nPAN\nLow\n\
    P2P, tree, star,\nmesh\nXBee PRO [24]\n64,000+\n36.9–63\n6.31 × 10−11\n90 m–1.6\
    \ km\n900 MHz\n20–250\nKbps/40 ms\nPAN, WSN\nLow\nP2P, tree, star,\nmesh\nJennic\n\
    JN5121/IEEE\n802.15.4\n64,000+\n100\n45 × 10−9\n0.4 km\n2.4 GHz\n20–250\nKbps/30\
    \ ms\nPAN, WSN\nLow\nP2P, tree, star,\nmesh\nRFID/ISO\n18000-6C [4,29]\nUndeﬁned\n\
    3000\nunspeciﬁed\n1–5 m\n860–960 MHz\n40–160 Kbps/\n45 ms\nPAN\nLow\nStar\nIoT\
    \ 2023, 4\n283\nCost or Affordability of the Resulting Agri-IoT System: In addition\
    \ to being\ninfrastructure-less, ﬂexible, self-healing, adaptive, and energy-efﬁcient,\
    \ a WSN-based\nAgri-IoT must consist of cost-effective hardware and software components\
    \ so that the\nsystem is affordable for farmers, since existing real-world solutions\
    \ are too expensive and\ncomplicated [1,14]. Additionally, the installation, operational,\
    \ and maintenance costs of\nthe resulting WSN-based Agri-IoT network must be kept\
    \ to a minimum so that it can be\neasily acquired.\nSecurity Issues in Agri-IoT:\
    \ Security is still a challenge in classic IoT systems that\nhandle sensitive\
    \ information, especially during cloud communications. Although Agri-\nIoT networks\
    \ lack the requisite resource capacities in most large-scale, broadcast-based,\n\
    distributed, and infrastructure-less WSN systems to achieve adequate data conﬁdentiality,\n\
    authenticity, integrity, and other security requirements, the security of the\
    \ agricultural\ndata is rarely a priority [2,4]. Nevertheless, the associated\
    \ routing architecture, such as\nthe clustering architecture, has an embedded\
    \ capacity to resolve on-site security issues.\nIn addition, both on-site and\
    \ remote information access types (e.g., via a smartphone or\ndesktop computer)\
    \ must be selected based on solid internal infrastructure and security\nprecautions\
    \ to secure unwanted access to sensitive information.\nThe Application-Speciﬁc\
    \ Factors: As indicated in Figure 9, the application-deﬁned\nfactors vary based\
    \ on the Agri-IoT application, the ﬁeld settings, network maintenance prac-\n\
    tices, intended event routing architecture, and network participants’ mobility,\
    \ among other\nfactors. However, the routing protocol must incorporate all relevant\
    \ operational efﬁciency\nfactors of the routing software design objectives. Since\
    \ the collected ﬁeld data itself cannot\nmake sense without using analytic data\
    \ engines and predictive algorithms in machine learn-\ning, the BS or the application\
    \ layer in the cloud should deﬁne appropriate data-processing\nframeworks to obtain\
    \ accurate, actionable decisions from the collected data.\nCommunication Standards\
    \ of Agri-IoT Devices: The power-constrained WSN sub-\nlayer of Agri-IoT network\
    \ places hard restrictions on operational states of SNs’ radio\ntransceivers,\
    \ code space, and processing cycles as well as memory capacities of SNs to\nenhance\
    \ power savings [9,12,23]. The type of communication technology selected for a\n\
    typical Agri-IoT is the principal predictor of its routing architecture, affordability,\
    \ simplicity,\nadaptability, power-saving capacity, location independence, self-healing\
    \ capacity, and event\ndata quality [12,16]. Consequently, power and routing architectural\
    \ limitations constrain\nthe network design requirements. Despite the aforementioned\
    \ technical challenges on\nthe network’s operational efﬁciency, interconnected\
    \ SNs that form the WSN are expected\nto withstand extra operational disruptions\
    \ caused by unfavorable weather conditions in\nthe ﬁeld [2,4]. Consequently, the\
    \ de facto PHY-layer communication standards for this\nlow-power, low bandwidth,\
    \ and distance-limited communication Agri-IoT devices/SNs\nhave been the energy-efﬁcient\
    \ platforms such as BLE, LoRa, Sigfox, and NB-IoT. Also, a suit-\nable MAC technique\
    \ is imperative in the routing architecture to curb all channel access\nchallenges.\
    \ For instance, the ZigBee/IEEE 802.15.4 standard focuses on the physical and\n\
    the MAC layer speciﬁcations for WSNs, and it also supports the sleep–active or\
    \ duty-cycle\nscheduled operation modes of SNs to enhance energy savings in centralized\
    \ or mesh-based\narchitectures. BLE does likewise in the highly endowed cluster-based\
    \ routing architecture.\nConsequently, Agri-IoT network designers must make the\
    \ most appropriate and critical de-\ncisions regarding the network’s communication\
    \ requirements when designing the routing\nprotocol. Using Table 4, WSN-based\
    \ Agri-IoT designers can make realistic design decisions\nregarding energy-efﬁcient\
    \ multihop routing, architectural requirements of routing proto-\ncol, bandwidth,\
    \ routing table capacities, total communication cost, and the desired MAC\ntechnique.\
    \ Additionally, the physical conditions within the agricultural environment such\n\
    as atmospheric dust concentration, physical obstruction to wireless signal transmissions,\n\
    and the terrain need to be considered.\nAuxiliary Factors and Available Software\
    \ Tool: Finally, the auxiliary factors can be\nnon-exhaustive depending on the\
    \ designer’s ﬁnancial capacity, user interface, information\nrequisition model,\
    \ cloud activities, operational expectations, and the available software\nIoT\
    \ 2023, 4\n284\ntools. Additionally, an assortment of PHY-Layer design software\
    \ tools for Agri-IoT exper-\niments (thus, in both simulations and real-world\
    \ testbed deployments) that can be used\ninclude NS-3 [9,38], OMNeT++, MATLAB/Simulink\
    \ [9,12,39], Python [16], PAWiS [39],\nGloMoSim/QualNet [39,40], OPNET [12,39],\
    \ SENSE [37,39], J-Sim [39], Ptolemy II [39],\nShawn [9,39], and PiccSIM [12,39,41],\
    \ among others. The key features that are frequently\nconsidered when selecting\
    \ any of these software platforms include Python or MAT-\nLAB/Simulink compatibility\
    \ for software model and hardware prototype integration\nduring real-world operation,\
    \ compatibility with low-power communication standards\n(e.g., BLE, LoRa, ZigBee,\
    \ and SIGFOX), operating system support, programming lan-\nguage implementation,\
    \ the density of simultaneously simulated or ﬁeld-deployed SNs,\nco-simulation\
    \ with other hardware, documentation, easy access to upgraded versions,\nand installation\
    \ challenges [39]. MATLAB/Simulink and Python are the most commonly\nused experimental\
    \ tools, since these software tools are well-equipped with the stipu-\nlated features.\n\
    4. Unique Characteristics and Challenges of WSN Sublayer of Agri-IoT\nUnlike the\
    \ traditional IoT, which generally relies on ﬁxed hardware to route network\n\
    trafﬁc, a WSN sublayer of Agri-IoT combines automated sensing, computation, actua-\n\
    tion, and wireless communication tasks into the SNs that are spatially distributed\
    \ across\nthe farm to autonomously form an infrastructure-less WSN [31]. A node\
    \ may perform\nadditional tasks such as local data processing (data aggregation),\
    \ network construction,\ndata redundancy, error control, data routing (e.g., in\
    \ multihop networks), and network\nmaintenance practices based on the network\
    \ size, application speciﬁcity, and associated\nrouting techniques. Also, the\
    \ WSN can be equipped to observe heterogeneous conditions\nsuch as temperature,\
    \ humidity, sound, color, location, light, vibration, and motion, using a\nwide\
    \ variety of sensors contained within a task-scalable SN. Therefore, assuming\
    \ that the\naccuracy and precision of event data in upper layers are preserved,\
    \ the Agri-IoT’s lifespan\nand its operational efﬁciency are rooted in the WSN’s\
    \ robustness. Thus, a deeper contextual\nexegesis into the design and maintenance\
    \ of this sublayer is imperative. As opposed to con-\nventional IoT and wireless\
    \ ad hoc communication networks, the operational efﬁciency of\nthe WSN sublayer,\
    \ as well as Agri-IoT, hinge upon some application-speciﬁc characteristics\nand\
    \ resource-constrained factors such as:\n•\nHigher SN Deployment Densities: Generally,\
    \ SNs are densely deployed in either a deter-\nministic or random manner to provide\
    \ the desired redundancies, spatial variability of\nsoil, topography, distributed\
    \ monitoring and processing, accurate and precise event\nreporting, and fault\
    \ tolerance. However, this mostly leads to undesirable transmission\noverlaps,\
    \ data redundancies from the simultaneous reporting of the same data, routing\n\
    interferences, and packet collisions due to connectivity issues and the coexistence\
    \ of\ncommon standards in the ISM band [42].\n•\nLimited Power Supply: The SNs\
    \ are frequently battery-powered, which does not only\nconstrain their data transmission\
    \ rate, computational capabilities, and communication\ndistance but also subjects\
    \ Agri-IoT to possible SN-out-of-service and data outlier\nfaults due to rapid\
    \ power depletion beyond certain thresholds [26,43]. Consequently,\nnetwork power\
    \ management through data-management-related, architectural-related,\nand communication-related\
    \ parameters has been one of the principal research focuses\nin WSN-based IoT\
    \ applications to improve network lifetime.\n•\nFault Management (FM) (i.e., fault\
    \ detection, fault tolerance, or fault avoidance): The\nresource-constrained WSN\
    \ is highly vulnerable to faults and failures due to high\ndeployment densities\
    \ and a lack of post-deployment maintenance services [25]. Al-\nthough faults\
    \ are inevitable in Agri-IoT for the stipulated reasons, their occurrence\nrates\
    \ and effects on the network’s functionality can be minimized, avoided, or tolerated\n\
    without hindering the normal functionality of the network if the associated WSN’s\
    \ rout-\ning protocol is well-equipped with efﬁcient self-healing and fault-avoidance\
    \ (power-\nsaving) mechanisms [12].\nIoT 2023, 4\n285\n•\nSelf-Adaptability and\
    \ Scalability: Although WSNs are application-speciﬁc, the topologi-\ncal dynamism\
    \ is inevitable due to node failures, node mobility, and scalable conditions.\n\
    Therefore, the associated routing protocol and network architecture must adapt\
    \ to\nthese dynamic conditions using apt auto-reconﬁguration and reactive multihop\
    \ event\nrouting techniques [44,45].\n•\nNetwork Architecture: The underlying\
    \ routing protocol of the WSN sublayer constructs\na network architecture that\
    \ can be ﬂat, hierarchical (e.g., clustering, chain-based,\nand tree architectures)\
    \ or location-based. This routing architecture prescribes the\npossible measures\
    \ to achieve efﬁcient local data processing, network maintenance,\nscalability,\
    \ minimized communication overhead, prolonged network lifespan, and re-\nduced\
    \ network management complexities [25,36]. Therefore, a suitable network\ntopology\
    \ indirectly determines the resulting network’s ﬂexibility, scalability, reliability,\n\
    communication strategy/costs, and the quality of the reported event data [12].\n\
    •\nMostly Requires On-site Actuation: Regardless of where data are managed in\
    \ a typical\nWSN-based Agri-IoT, the actionable decision signal must be sent to\
    \ execute on-farm\nactuation.\nProposed Design Objectives of WSN-Based Routing\
    \ Protocols for Agri-IoT and\nRealization Mechanisms\nFrom the systematic evaluation\
    \ of the unique characteristics and challenges of the\nWSN sublayer, a three-tier\
    \ cluster-based framework that constitutes the condensed ex-\npected core design\
    \ objectives and their corresponding remedial strategies of WSN-based\nrouting\
    \ protocols for Agri-IoT applications is demonstrated in Figure 10. Suppose the\
    \ corre-\nsponding remedies in Figure 10 are implemented in the associated routing\
    \ protocol. In that\ncase, the desired power optimization, self-healing, and auto-adaptability\
    \ expectations can\ntransitively yield the desired event data quality and operational\
    \ stability requirements or\nthe global performance expectations of the resulting\
    \ network.\nEvent Sensing\nCommunication & Nodes'  \nActivity Schedule issues\n\
    Data Computation Strategy\nFault  \nManagement \nPower \nOptimization\nSelf-Healing\n\
    Self-Reconfigurability\nMultihop Routing\nFault Detection\nFault Tolerance/Self-Healing\n\
    Fault-Avoidance\nDesign Objectives of\nAgri-IoT Routing\nProtocols\nControl Message\
    \ Complexity\n*Local Processing\n*Local Network Administration\ne.g., - Network\
    \ construction phase\n (CH selection, cluster formation)\n     -  Network maintenance\n\
    *Local or Self-fault Detection\n*Local Processing \n  e.g. Data aggregation by\
    \ CHs \n*Event Data Redundancy Control \n*Event Data Management Techniques \n\
    \  e.g., Representative event reporting \n*Duty-Cycling Strategies \n  -Role rotation,\
    \ sleep-active\n*Communication Mode\n  -Single-hop, multihop\n*Connectivity Strategies\
    \ \n -Optimal density and uniformity of\nSNs \n*MAC Techniques\n -single channel/multichannel\
    \ MAC\n*Data Outlier Fault\n*SN-Out-of-Service Fault\nRouting\nArchitecture- \
    \ \nbased\nScalability & \nAdaptability\nFigure 10. Proposed design objectives\
    \ and strategies of WSN-based Agri-IoT routing protocols.\nThe importance of this\
    \ three-tier framework can be expanded on as follows:\n•\nAn adaptive and scalable\
    \ WSN-based routing protocol, as proposed in Figure 10, normally\nconstructs a\
    \ routing architecture that supports multihop routing, self-reconfiguration,\n\
    self-healing, and local network administration at a minimal routing table size,\
    \ commu-\nnication cost, and and control message complexity requirement. Since\
    \ communication\nIoT 2023, 4\n286\nis the principal power consumer, the operation\
    \ of the routing protocol must invlove\nfewer control messages. Also, it must\
    \ adapt to network turbulence due to SN failures.\nThe cluster-based architecture\
    \ exhibits the highest potential compared to related ar-\nchitectures [9,16,17,26].\
    \ The cluster heads (CHs) efﬁciently coordinate these activities\nby registering\
    \ and tolerating all dynamism resulting from SN-out-of-service faults,\nincreasing\
    \ the network size and SN density.\n•\nDue to the high vulnerability of SNs to\
    \ faults and failures, it is imperative to deploy\nsuitable FM techniques that\
    \ can detect, tolerate, or avoid possible root faults such\nas SN-out-of-service\
    \ and data outliers [25]. The adaptive clustering approach can\neffectively resolve\
    \ SN-out-of-service faults, while the threshold-based decision theory\nat the\
    \ local nodes and global levels can be suitable candidates for event data outlier\n\
    detection and correction in the PHY layer. Since power mismanagement is the root\n\
    cause of most faults and failures, the best fault-avoidance techniques optimize\
    \ the\nnodes’ power consumption rates.\n•\nFigure 10 also outlines the suitable\
    \ measures for power optimization in the WSN\nsublayer of Agri-IoT. In clustering\
    \ approaches, power consumption in the constrained\nWSN can be managed via message\
    \ complexity control, connectivity-related metrics,\nand communication-related\
    \ parameters by exploiting the clustering architecture [46].\nIn addition to local\
    \ data processing (data aggregation, data redundancy, and error\nchecks) and local\
    \ network administration (FM, adaptability to network dynamics),\nsuitable MOO\
    \ and multihop routing frameworks can be derived using the clustering\narchitecture,\
    \ total communication cost, and optimal cluster quality metrics to serve as\n\
    a design optimization guide for the simulation and real-world implementations\
    \ of the\nWSN phase of Agri-IoT.\nTo achieve the expectations in Figure 10, there\
    \ is a need for an architecture-speciﬁc\nmulti-objective assessment of the WSN’s\
    \ design cycle; from this, the associated parameters\nand theoretical models can\
    \ be derived and then theoretically optimized and validated\nexperimentally. A\
    \ novel holistic MOO framework can help realize these expected goals in\nboth\
    \ simulation and real-world Agri-IoT implementations. Consequently, there exists\
    \ the\nneed to carry out a systematic survey and assessment on existing routing\
    \ architectures, FM\nschemes, and routing protocols, and how these evolved in\
    \ existing real-world realization\ntestbeds of Agri-IoT. Such an in-depth literature\
    \ synthesis can help assess these qualitative\nperformance indicators constituting\
    \ the root QoS metrics in Figure 10 as well as deduce\napplication-speciﬁc guidelines\
    \ for improving CA-IoT networks using a precision irrigation\nsystem as a case\
    \ study.\n5. State of the Art on Routing Protocols for WSN-Based Agri-IoT Applications\n\
    In Agri-IoT, it is not simply a matter of applying IoT to a farm; contextual due\
    \ diligence\non architecture, communication standard, cost, actuator, performance\
    \ stability, control,\nand environmental impacts augment the routing protocol\
    \ requirements. This section\npresents a systematic synthesis of WSN-applicable\
    \ routing protocols under network ar-\nchitecture, the route discovery process,\
    \ and protocol operation as illustrated in Figure 11.\nTo help Agri-IoT designers\
    \ make well-informed decisions concerning architectural selection,\nwe classiﬁed\
    \ the canon protocols based on routing architecture, route-discovery process,\n\
    and operations in order to uncover their strengths, weaknesses, and contextual\
    \ reasons why\nthey can be adopted for Agri-IoT applications. Generally, event\
    \ routing in every protocol\ncan either be source-initiated or destination-initiated,\
    \ and the optimal path selection from\nthe constructed routing architecture can\
    \ also be broadcast-based, probabilistic, cluster-\nbased, or parameter-determined\
    \ using location-related, weight-based, and content-based\nmetrics [13]. Also,\
    \ routing protocols must commonly resist link failures using mechanisms\nthat\
    \ ensure balanced network-wide power depletion rates, energy-efﬁcient multihop\
    \ rout-\ning, and effective implementation of the indispensable QoS metrics presented\
    \ in Figure 10.\nThe related routing protocols can be classiﬁed as illustrated\
    \ in Figure 11.\nIoT 2023, 4\n287\nfile:///C:/Users/emman/Downloads/704.svg\n\
    IoT/WSN\nRouting\nProtocols\nNetwork  \nArchitecture\nProtocol  \nOperation\n\
    Route Discovery  \nProcess\n1. Flat-based\n2. Architectural-based\n3. Location-based\n\
    1. Reactive\n2. Proactive\n3. Hybrid\n1. Negotiation-based\n2. Multipath-based\n\
    3. Query-based\n4. QoS-based\n5. Coherent-based\nFigure 11. Taxonomy of WSN-based\
    \ routing protocols of Agri-IoT.\n5.1. Architectural-Based Routing Protocols\n\
    This class of protocols presented in Figures 11 and 12 can be sub-grouped into\
    \ ﬂat-\nbased centralized or direct communication and decentralized [47] (e.g.,\
    \ ﬂooding/peer-\nto-peer/graphical/mesh-like architectures), hierarchical/cluster-based/tree\
    \ architectures,\nand the location-based protocols [37].\n1/21/22, 11:11 AM\n\
    200.svg\nBS\nInter-cluster Communication  (e.g., BLE, SigFox, LoRa)\nIntra-cluster\
    \ Communication (e.g., BLE, SigFox)\nCH\nMN\nSensing Range\nSNs\nBS\nBS\nInternet\
    \ +IoT Storage  \n      Cloud + Data Analytic Engines\nSN\n Decentralized (Flooding)Routing\
    \ Architecture\nCentralized Routing Architecture\nCluster-based Routing Architecture\n\
    User with Web or Mobile  \nApp. for Remote  \nMonitoring & Control\nFigure 12.\
    \ Sample network architectures: centralized-data-centric, cluster-based, and graph/ﬂooding-\n\
    based architectural frameworks of WSN sublayer.\nIoT 2023, 4\n288\nThe centralized\
    \ protocols route data to the BS via single-hop routing, while the ﬂooding\nand\
    \ graph-based protocols ﬂood data through multihop routing. The graph-based routing\n\
    protocols construct a reactive or proactive graphical routing architecture with\
    \ G(V, E)\nwhere a node and path represent the vertex and edges, respectively.\
    \ This method relies\non resource-intensive routing techniques from graph theory\
    \ used in classic IoT and ad\nhoc networks to transmit event data to the BS. In\
    \ contrast, the clustering/tree topology\ndepicted in Figure 12 groups the SNs\
    \ into either static or dynamic clusters, each with an\noptimally selected CH\
    \ to minimize the communication distances of the cluster’s member\nnodes (MN).\
    \ The CH is then tasked with aggregating the received readings from its MNs,\n\
    executing error and measurement redundancy checks, and communicating directly\
    \ (single-\nhop routing) or via a relay CH (RCH) using a multihop routing technique\
    \ to the sink\nnode or BS. However, the RCHs must be assigned fewer MNs to balance\
    \ the network’s\npower depletion rates, since aggregated packet forwarding inﬂicts\
    \ extra energy burden\non the RCHs [37]. Additionally, the CH can be equipped\
    \ to perform extra roles such as\nFM, coordination of the reclustering process,\
    \ network maintenance, relaying of aggregated\npackets in large-scale networks,\
    \ and management of network dynamism [12]. In general,\ncluster-based routing\
    \ protocols differ in terms of CH selection methods and coincide in\nterms of\
    \ intra-cluster and inter-cluster multihop routing, local data processing by the\
    \ CHs,\nand CH role rotation [47], which ensure balanced network-wide power depletion,\
    \ prevent\nabrupt power exhaustion, and lead to exponential energy savings [37].\n\
    Although the ﬂat-based architectures, such as centralized and ﬂooding (see Figure\
    \ 12),\ncan be easily implemented in real-world small-scale Agri-IoT networks,\
    \ they suffer severe\npacket collisions, communication bottlenecking at the BS,\
    \ and high inaptness for scalable\nor turbulent large-scale WSNs where energy\
    \ efﬁciency is a priority. Again, an optimized\nclustering approach can provide\
    \ an ideal topology for addressing the proposed expectations\nin Figure 10, and\
    \ it can also offer extra beneﬁts such as minimized communication cost,\nstabilized\
    \ network topology, efﬁcient load management, improved network maintenance,\n\
    and improved network trafﬁc and channel access management [37,48]. The main challenge\n\
    of the clustering method is how to achieve the desired cluster quality (e.g.,\
    \ optimal cluster\ncount and cluster size) so that the computational, bandwidth,\
    \ memory, and routing table\ncapacities of the resource-constrained CHs are not\
    \ exceeded. Typical examples of clustering\nprotocols are the LEACH family of\
    \ protocols, which include RCEEFT, ESAA, DEEC, SEP,\nand PEGASIS in [12].\nIn\
    \ location-based routing architectures, routing decisions are made either reactively\n\
    (e.g., Ad hoc On-demand Distance Vector—AODV) or proactively (e.g., RPL—Routing\n\
    over Low-Power and Lossy Networks protocol), using the SNs’ location information.\
    \ This\nnormally results in a decentralized, graphical architecture. Since the\
    \ SNs that form the\nWSN are spatially deployed in the ﬁeld without any IP-addressing\
    \ schemes, location\ninformation is needed in order to establish communication\
    \ between the nodes in a location-\nbased architecture. The location information\
    \ helps eliminate unwanted transmissions by\ncollecting data from a speciﬁc region\
    \ of interest. This architecture suffers from routing\ndelays, high infrastructural\
    \ cost, extreme difﬁculties in deployment and management,\nand high energy waste\
    \ due to SNs’ long idling durations. However, they are the most\ncommonly used\
    \ protocol in existing ZigBee-based Agri-IoT testbed solutions [1,10,14,17].\n\
    Since this approach yields non-energy-aware architectures, it is not suitable\
    \ for Agri-IoT\napplications [12].\nIt is evident from the above discussions that\
    \ Agri-IoT-based network architectures\nmust be deﬁned by the associated routing\
    \ protocol using the design requirements in Figure 9\nas well as the application-deﬁned\
    \ requirements [49] in order to enhance the performance\nexpectations in Figure\
    \ 10. In addition, the routing architecture must not compromise on\nthe quality,\
    \ precision, and accuracy of the event information. It must be in unison with\
    \ the\napplication-speciﬁc requirements to address possible deployments- and network-induced\n\
    challenges, such as network turbulence and SN mobility.\nIoT 2023, 4\n289\n5.2.\
    \ Route Discovery-Based Protocols\nAs shown in Figure 11, route discovery-based\
    \ protocols focus on when the route for\ndata transmission is built and can be\
    \ grouped into proactive, reactive, and hybrid protocols.\nIn proactive routing\
    \ protocols, the routes are pre-created before they are needed.\nThese protocols\
    \ are table-driven, since every node stores a large routing table containing a\n\
    list of all possible destinations, next-hop neighbors to those destinations, and\
    \ the associated\ncosts of all next-hop options. Proactive protocols such as the\
    \ RPL and the APTEEN family of\nprotocols [15] make local routing decisions using\
    \ the routing table’s content. For instance,\nthe RPL operates as a distant-vector\
    \ protocol for IPv6 low-power devices, utilizes the\nZigBee/IEEE 802.15.4 standard\
    \ on established IP infrastructure, and also supports the\n6LoWPAN adaptation\
    \ layer. RPL creates a multihop tree routing hierarchy of SNs, such\nthat nodes\
    \ can send data through their respective parent nodes to the BS/sink node in a\n\
    ﬂooded manner (Figure 12). Similarly, the BS or sink node can send a unicast message\
    \ to a\nspeciﬁc SN in order to complete a bidirectional operational framework\
    \ of RPL. The optimal\ncommunication costs and routes are estimated by ranking\
    \ the associated objective function\n(OF) metrics, which can be single-objective\
    \ optimization, SOO metrics, or MOO metrics.\nThis routing over LLNs (RoLL) restricts\
    \ densely deployed and resource-limited SNs to\ncommunicate using peer-to-peer\
    \ or extended star network topologies [13]. Technically,\nRPL builds a directed\
    \ acyclic graph (DAG) with no outgoing edges from the root element\n(e.g., BS)\
    \ to eliminate loops. RPL is the primary underlying routing protocol in most failed\n\
    Agri-IoT testbed attempts. Although the proactive or RPL-based family of protocols\
    \ are\nrobust, reliable, scalable, and can relatively operate at minimized control\
    \ messages with the\nhelp of timers, they are not suitable for Agri-IoT networks\
    \ due to these technical challenges:\n•\nThe core of RPL/proactive protocols still\
    \ suffers from key challenges such as en-\nergy wastage, a lack of adaptability/scalability,\
    \ reliability, congestion, and security\nissues. Speciﬁcally, the energy expended\
    \ by RPL-inherited protocols to create routes\n(e.g., establish and maintain routing\
    \ tables) and transmit data can be too high for\nresource-constrained SNs in recent\
    \ Agri-IoT applications.\n•\nThe underlying technology of RPL (e.g., ZigBee, 6LoWPAN,\
    \ or IPv6) was designed\nfor energy-sufﬁcient devices with high processing and\
    \ memory capacities. Therefore,\nRPL is inapt for typical resourced-constrained\
    \ Agri-IoT networks (refer to Table 5).\n•\nThey require costly ﬁxed IP infrastructural\
    \ supports and utilize the centralized routing\narchitecture, which becomes practically\
    \ impossible to manage as the network scales.\nConversely, the source-initiated\
    \ reactive or on-demand routing protocols only create\nthe routes on-demand by\
    \ a source to send data to a receiver. Reactive protocols (e.g., Ad hoc\nOn-demand\
    \ Distance Vector, AODV Protocol [13]) have no speciﬁc procedures for creating\n\
    and updating routing tables with route information at regular intervals. For instance,\n\
    the AODV is a loop-free, self-starting, and reactive routing protocol meant for\
    \ LLNs\n(e.g., WSN-based IoT) that are characterized by node mobility, link failures,\
    \ and packet\nlosses. AODV mainly consists of the route discovery process (RREQ\
    \ and RREP messages)\nand route maintenance (RERR and HELLO messages). Although\
    \ reactive or AODV-based\nprotocols can adapt to network dynamics and eliminate\
    \ periodic updates, the associated\nﬂooding-based route–search process incurs\
    \ severe overheads resulting in high control\nmessage complexity, high route acquisition\
    \ latency, and high energy wastages due to longer\nSN idling periods. Consequently,\
    \ these protocols are unsuitable for power-constrained\nWSN-based Agri-IoT applications.\n\
    The hybrid-based routing protocols merge the features of both reactive and proactive\n\
    routing processes. However, hybrid protocols such as APTEEN [13] also require\
    \ expensive\nﬁxed infrastructural support, which renders them unsuitable for Agri-IoT,\
    \ even if the\ncombined merits of reactive and proactive protocols are exploited.\n\
    A comparative assessment of the strengths and weaknesses of the parent WSN-based\n\
    routing protocols for Agri-IoT applications is illustrated in Table 5.\nIoT 2023,\
    \ 4\n290\nTable 5. Comparison of some cardinal hierarchical WSN-based routing\
    \ protocols for Agri-IoT in state\nof the art.\nProtocol\nTopology\nStrength\n\
    Weakness\nSuitability: Low-Power\nWSN Sublayer of Agri-IoT\nLEACH and\nLEACH-\n\
    inherited [9,12,21]\nTree or\nCluster-based\n•\nHigh power savings,\n•\nFM and\
    \ adaptability,\n•\nLoad balancing,\n•\nLess resource\ndemanding than RPL,\nAODV\n\
    •\nDifﬁcult to attain desired\ncluster quality\nSuitable (optimal cluster\nquality\
    \ yet required)\nRPL and\nRPL-Inherited [15]\nGraphical\n•\nHigh adaptability,\n\
    •\nHigh robustness,\n•\nMinimized control\nmessages,\n•\nSuitable for small-scaled,\n\
    power-sufﬁcient\nnetworks\n•\nHigh energy wastages,\n•\nHigh storage\nrequirements,\n\
    •\nLow reliability,\n•\nHigh congestion rates,\n•\nUnsuitable for large-scale\n\
    turbulent networks,\n•\nMore resource-demanding\nthan AODV and\nLEACH-based\n\
    methods [50,51]\nUnsuitable (high resource\ndemanding underlying\ntechnology,\
    \ 6LoWPAN,\nand routing tables)\nAODV and AODV-\ninherited [13]\nMostly graphical\n\
    •\nHigh adaptability,\n•\nSuitable for small-scaled,\npower-sufﬁcient\nnetworks\n\
    •\nHigh control messages,\n•\nHigh energy wastages [28],\n•\nHigh-resource-demanding\n\
    Unsuitable (extremely high\ncontrol message complexities\nduring route construction\
    \ and\nmaintenance)\n5.3. Operation-Based Routing Protocols\nFinally, routing\
    \ protocols can be classiﬁed based on the operation or communication\nmodel employed,\
    \ which may include:\n•\nNegotiation-Based Protocols: These protocols exchange\
    \ negotiation messages or use\nmeta-data negotiations between neighboring SNs\
    \ before the actual data transfers to\nreduce redundant transmissions in the network.\
    \ A typical example is the SPIN family\nof protocols [13].\n•\nMultipath-Based\
    \ Protocols: These use multiple routes simultaneously to accomplish\nhigher resilience\
    \ to route failure (i.e., fault tolerance) and load balancing.\n•\nQuery-Based\
    \ Routing Protocols: These are receiver-initiated protocols whereby a desti-\n\
    nation node broadcasts a query to initiate a data-sensing task from a node through\
    \ the\nnetwork. A node having the data being queried sends it in response to the\
    \ query.\n•\nCoherent and Non-Coherent Protocols: The coherent routing method\
    \ forwards data for\naggregation after a minimum local pre-processing. However,\
    \ in non-coherent routing,\nthe nodes locally process the raw data before routing\
    \ to the BS for further processing.\n•\nQoS-Based Routing Protocols: These protocols’\
    \ purpose is to satisfy a speciﬁc QoS metric\nor multiple QoS metrics such as\
    \ low latency, energy efﬁciency, or low packet loss.\nThese protocols ensure a\
    \ balance between energy consumption and data quality in\nevery event-reporting\
    \ task.\nIn addition to route architectural construction and data transmission,\
    \ efﬁcient MAC\nmust be embedded in the routing protocol to manage the wireless\
    \ medium access and the\nduty-cycle/sampling schedules of the deployed SNs in\
    \ Agri-IoT networks. As opposed\nto classic IoT, the MAC techniques in Agri-IoT\
    \ are architecture-deﬁned by the associated\nrouting protocol to meet the energy\
    \ efﬁciency requirements of the network via channel\naccess management (CAM) and\
    \ the moderation of the active–sleep duty cycles of the\ndeployed SNs to save\
    \ extra energy. The next subsection presents a concise overview of\nMAC techniques\
    \ and their roles in WSN-based Agri-IoT networks.\n5.4. MAC Techniques and Requirements\
    \ for Agri-IoT\nNext to node deployment, the routing protocol deﬁnes the network\
    \ architecture and\nselects a suitable MAC technique and a communication pattern\
    \ for the routing architec-\nture. Unlike classic IoT, requirements for Agri-IoT\
    \ applications include a low control\nIoT 2023, 4\n291\nmessage complexity and\
    \ low latency MAC technique that moderates sampling schedules,\naccess to a shared\
    \ medium, transceiver operation modes, (e.g., packet transmission and\nreception,\
    \ retransmission, collision, over-hearing, overhead handling, and idle listening)\n\
    active–sleep duty cycles of the deployed SNs, and transceiver channels. Thus,\
    \ an MAC\nprotocol for WSN-based Agri-IoT applications must be architecture-speciﬁc\
    \ and adaptive\nto network dynamics such as data transmission errors, interferences/packet\
    \ collisions,\nand regular interfacing of the active–sleep duty-cycled schedules\
    \ of the SNs’ transceiver\nstates (e.g., transmitting state, receiving state,\
    \ idle state, and sleep state [52]) during packet\ntransmission and reception\
    \ in order to improve network throughput, energy efﬁciency,\nlatency, and other\
    \ QoS metrics.\nUnlike MAC protocols for classic IoT, an efﬁcient MAC technique\
    \ for Agri-IoT must\nensure exponential energy savings via channel assignment\
    \ management (CAM) and active–\nsleep duty-cycle coordination in both time and\
    \ channel perspectives. Based on these\ncommon dual tasks of Agri-IoT-based MAC\
    \ (thus, duty-cycle optimization—DCO and\nchannel access management—CAM), existing\
    \ IoT-based MAC techniques can be classiﬁed\nas illustrated in Figure 13 and the\
    \ state of the art in Table 6.\nfile:///C:/Users/emman/Downloads/14.svg\nFunctionality-based\n\
    Taxonomy of MMAC \nProtocols\nDuty-Cycle \nOptimization\nChannel  \nAssignment\
    \ \nManagement\n1. Synchronous\n2. Asynchronous\n3. Hybrid\n1. Contention-based\n\
    2. Scheduled-based\n3. Hybride\n1. Fixed Channel Assignment\n2. Semi-Dynamic Channel\
    \ Assignment\n3. Dynamic Channel Assignment\nHydrid (Required for \nWSN-based\
    \ Agri-IoT)\nSensing & Farm Monitoring\nSmart Control\nSmart Analysis & \nResource\
    \ Planning\nAgri-IoT-Based Farm Monitoring and control cycle.\nBLE\nZ-Wave\nWi-Fi\n\
    ZigBee\nFarm Management Tools/Technologies\nFigure 13. Proposed functionality-based\
    \ MAC classiﬁcation framework.\nThe CAM role eliminates packet collisions, overhearing,\
    \ and over-emitting to ensure\nthe desired functional balance, while the DCO task\
    \ minimizes idle listening. A comparative\nassessment of related MAC methods used\
    \ in recent WSN-based Agri-IoT applications in\nTable 6 afﬁrms the need for further\
    \ research on the functionality balance between DCO and\nCAM as well as a context-based\
    \ MMAC approach for the LEACH family of protocols used\nin Agri-IoT applications.\n\
    IoT 2023, 4\n292\nTable 6. Summary of state of the art on duty-cycle and CAM MMAC\
    \ protocols.\nName\nMain Task\nApplication\nWeakness\nApproach\nOverhead\nSync/Async\n\
    S-MAC, T-MAC,\nDS-MAC [53,54]\nDCO\nEvent-driven with long idle\nlistening times,\
    \ collision-prone\nHigh PC, complexity, latency\nContention-based, distributed\n\
    MAC\nRTS, CTS, ACK, SYNC\nSync\nX-MAC [55]\nDCO\nHigh energy savings, throughput,\n\
    collisions, delays\nHigh complexity, higher PC, high\ncollisions\nContention-based,\
    \ distributed\nMAC\nPreamble\nAsync\nLA-MAC [56] Inherits\nX-MAC [55]\nDCO\nMore\
    \ energy savings than X-MAC,\nthroughput, scalability collisions,\nlow delays\n\
    High complexity, weak collision\ncontrol measures\nContention-based, distributed\n\
    MAC\nPreamble\nAsync\nB-MAC [57]\nDCO\nDelay-tolerant, high energy savings,\n\
    throughput, DDR more than\nS-MAC,\nHigh complexity, weak collision\ncontrol measures,\
    \ low throughput\nContention-based, distributed\nMAC (CSMA)\nPreamble length\n\
    Async\n(PEDAMACS) [58]\nDCO with collision\navoidance\nEvent-driven, energy-saving\n\
    High computational complexity,\nimpracticable\nSchedule-based, centralized MAC\n\
    RTS, CTS, ACK, SYNC,\nlearning\nTight Sync\nPW-MAC [59]\nDCO\nLow delay, long\
    \ idle time\nHigh complexity\nContention-based, distributed\nMAC\nBeacon\nAsync\n\
    Cluster-based time\nsynchronization [60]\nDCO\nHigh energy savings\nHigh computational\
    \ complexity\nSchedule-based, cluster-based,\ndistributed MAC\nSchedule, CHs’\
    \ formation\nTight Sync\nLEACH [61]\nDCO and CAM\nPeriodic sampling surveillance,\n\
    energy balance, savings\nHigh complexity, weak collision\ncontrol measures\nSchedule-based,\
    \ cluster-based,\ndistributed MAC\nSchedule, CHs’ selection\nTight Sync\nPRIMA\
    \ [62]\nDCO and CAM\nPeriodic sampling/surveillance,\nbalanced energy savings\n\
    High complexity, weak collision\ncontrol measures\nSchedule-based, cluster-based,\n\
    distributed MAC\nSchedule, CHs’ selection\nTight Sync\nWiseMAC [63]\nDCO\nHigh\
    \ energy savings, collision,\nhidden terminal problem, poor duty\nschedule\nHigh\
    \ complexity, weak collision\ncontrol measures, high PC\nHybrid, distributed MAC\n\
    Long wake-up preamble\nSync\nAdvanced WiseMAC [64]\nDCO\nHigher energy savings\
    \ than\nWiseMAC, collision, hidden\nterminal problem\nHigh complexity, weak collision\n\
    control measures, poor duty\nschedule\nHybrid, distributed MAC\nShorter wake-up\
    \ preamble\nthan WiseMAC\nSync\nWideMAC [65]\nDCO\nWider duty-cycle ranges, aperiodic\n\
    or periodic Tx, higher energy\nsavings, low memory requirements\nWeak collision\
    \ control measures\nHybrid, distributed MAC\nPreamble but short\nSync\nIoT 2023,\
    \ 4\n293\nTable 6. Cont.\nName\nMain Task\nApplication\nWeakness\nApproach\nOverhead\n\
    Sync/Async\nEM-MAC [66]\nCAM\nHeavy trafﬁc, delay-tolerant, hidden\nterminal problem\n\
    Prediction accuracy depends on the\naccuracy pseudorandom function\nSchedule-based,\
    \ predictive-based,\ndynamic CAM, distributive MAC\nInitial preamble\nAsync\n\
    MCAS-MAC [67]\nCAM\nHigh energy savings, latency, low\nidle listening\nEnergy\
    \ efﬁciency decreases with\nhigh trafﬁc densities (high DDR)\nSchedule-based,\
    \ distributed MAC\nPreamble\nAsync\nAMMAC [68]\nCAM and DCO\nHigh energy savings,\
    \ DDR\nTime drift will affect accuracy\nContention-based, distributed\nMAC\nRequires\
    \ asynchronous\nmodiﬁcations of duty cycles\nAsync.\nLL-MCLMAC [69]\nCAM\nImproved\
    \ end-to-end delay and\nthroughput, low trafﬁc with two\ntime-slots\nData Tx on\
    \ same control channel,\nsusceptible to co-channel or adjacent\nchannel interference\n\
    Semi-dynamic schedule-based,\ndistributed MAC\nCommon control channel\nnotiﬁcation\n\
    Async\nMC-LMAC [70]\nCAM\nScalable WSNs, collision avoidance\nHigh delays due\
    \ to dynamic channel\nswitching\nDedicated channel control,\ndynamic channels\
    \ switching,\nschedule-based, distribute d MAC\nCommon control channel\nnotiﬁcation\n\
    Async\nIoT 2023, 4\n294\n5.5. Overall Perspective\nThis section systematically\
    \ surveyed core Agri-IoT-based routing protocols and evalu-\nated the parent protocols\
    \ (i.e., RPL, AODV, and LEACH/cluster-based families of protocols)\nfor classic\
    \ WSN-based IoT networks, of which LEACH-based methods are the best candi-\ndates\
    \ for the resource-limited WSN-based Agri-IoT. However, the RPL and AODV have\n\
    received more research considerations in terms of realizations in both simulations\
    \ and prac-\ntice [9,12,21]. Although the cluster-based architecture has unique\
    \ endowments for realizing\nthe proposed expectations in Figures 2 and 10, it\
    \ lacks an in-depth design synthesis in the\ncurrent state of the art that can\
    \ uncover its contextualized performance optimization modal-\nities for real-world\
    \ Agri-IoT applications. In addition, the deployment requirements with\ntrending\
    \ technologies such as BLE, LoRaWAN, SigFox, 5G, LoRa via Satellite, and NB-IoT\n\
    under both simulation and real-world operational conditions is imperative. Consequently,\n\
    the following sections present in-depth overviews on FM, the benchmarking of WSN-based\n\
    Agri-IoT testbed solutions, clustering methods in the existing state of the art,\
    \ and how\nthe possible deductions from these syntheses can evolve in a typical\
    \ case-study such as a\nWSN-speciﬁc Agri-IoT routing protocol for precision irrigation.\n\
    6. State of the Art on FM Techniques for Classic WSN Sublayer of IoT\nSince faults\
    \ and failures are inevitable in the WSN sublayer of Agri-IoT networks (refer\n\
    to Figure 10), it is imperative to reevaluate the faults, causes, types, strengths/weaknesses\n\
    of existing FM (i.e., fault detection—FD, fault tolerance—FT, and fault-avoidance—FA)\n\
    schemes, revisit their founding assumptions [71], and make appropriate recommendations\n\
    for Agri-IoT network designers. In this section, we establish the root source/cause(s)\
    \ of\nfaults in the WSN sublayer by assessing the behaviors of the different fault\
    \ types, examining\nthe extent to which the existing FM schemes address these\
    \ root faults, and exploring\nhow these schemes will evolve in realistic WSN-based\
    \ Agri-IoT networks based on their\ncore assumptions, control message overheads/complexities,\
    \ and energy-saving capacities.\nFrom this thorough assessment, this section proposes\
    \ practical fault-avoidance-based FM\ntechniques for the next generation of WSN-based\
    \ Agri-IoT.\n6.1. Systematic Overview of Faults, Sources, and Taxonomy of Faults\
    \ in Agri-IoT\nAccording to the fault–error–failure cycle depicted in Figure 14,\
    \ a fault can be defined as\nany impairment that causes a system to produce erroneous\
    \ results or leads to the failure of the\nentire system or specific components\
    \ [72]. The prevalence of faults in WSN-based Agri-IoT\nis primarily due to the\
    \ SN component malfunction, lack of post-deployment maintenance,\nor resource\
    \ exhaustion [73], which can lead to either impaired event data quality (thus,\
    \ sensory\ndata error/outlier) or SN-out-of-service (thus, the shortened lifespan\
    \ of SNs) [25].\nDue to the high susceptibility of WSNs to faults, the supervisory\
    \ routing protocol is\nexpected to incorporate efﬁcient FM mechanisms that can\
    \ guarantee optimum event data\nquality and network availability. By implication,\
    \ FM algorithms for WSNs must not be\nstand-alone as currently seen in the state\
    \ of the art [73]; instead, they must be an integral\naspect of the routing protocol\
    \ that agrees with the core participants of the PHY layer, such as\nthe SN, wireless\
    \ communication medium, and the BS. As illustrated on the left of Figure 15,\n\
    the WSN sublayer is the most prevalent source of faults in the Agri-IoT ecosystem,\
    \ in which\nthe SNs are the central origin of faults that can propagate to the\
    \ upper layers [25,43,73].\nThis is because the BS is resource-sufﬁcient mainly,\
    \ and the link’s reliability also hinges\nupon the SNs’ availability, as indicated\
    \ in Figure 15. At the local SN’s level, each unit\ndepicted at the bottom of\
    \ Figure 3 is a potential source of fault/failure, but the degree of\nprevalence\
    \ is frequently accelerated whenever power consumption is mismanaged through\n\
    the disregard of any of the network design requirements and deployment conditions\n\
    presented in later sections.\nThe different taxonomies of faults in the state\
    \ of the art of the WSN sublayer [44,71,73–77],\nas illustrated on the left side\
    \ of Figure 16, can be compared as follows:\nIoT 2023, 4\n295\n•\nHard or permanent\
    \ fault refers to the inability of a node to stay active and communicate\ndue\
    \ to resource exhaustion or component malfunction, while in soft or static faults,\n\
    nodes continue to work and communicate with other nodes, but they sense, process,\n\
    or transmit erroneous data [44,74].\n•\nThe authors in [75,78] categorized faults\
    \ as permanent (refers to SN-out-of-service\nfaults), transient (caused by temporary\
    \ conditions), intermittent (shows sporadic\nmanifestations due to unstable behavior\
    \ of hardware and software), and potential\n(due to depletion of hardware resources\
    \ [78]).\n•\nData inconsistency faults can also result from faulty sensing, processing,\
    \ and communi-\ncation, which is frequently caused by power depletion below a\
    \ certain threshold, while\npower failure occurs when a node exhausts its battery\
    \ power completely [43,77,79].\n•\nThe authors in [73] classiﬁed faults into software\
    \ and hardware faults based on soft-\nware and hardware impairments, respectively.\n\
    •\nAccording to [71], faults can be either time-based, due to the depreciation\
    \ of hardware\ncomponents with time, or behavioral-based, due to SNs’ inability\
    \ to cope with harsh\nenvironmental and operating conditions.\n1/20/22, 8:48 PM\n\
    1.svg\nAspects\nImpairment\nStructure \nState \nBehavior\nFault\nError\nFailure\n\
    Logic\nInformation\nAbstraction\nImpairment\nComponent\nSystem\nService\nResult\n\
    Fault\nError\nDefect\nMalfunction\nDegradation\nFailure\n1st  \nCycle\n2nd  \n\
    Cycle\nLow- \nLevel\nMid- \nLevel\nHigh- \nLevel\n(a)  SNs' Lifespan Statistics\
    \ \n(b)  CH-count Stability Statistics\nFigure 14. Fault–error–failure cycle [72].\n\
    1/20/22, 8:49 PM\n708.svg\nSources of\nFaults\nNetwork Level\nFaults\nFaults Caused\
    \ by\nAdversaries\nNode Level\nFaults\nSink Level\nFaults\nSoftware\nHardware\n\
    Environment\nOperating\nSystem \n  \nBattery \nMemory,\nTransceiver,\nSensor,\n\
    Processor\nWeather \nCoexisting\nSignals\n  Intermittent Faults  \nPermanent Faults\n\
    Coverage \nConnectivity \nCoexisting  \n   Signals\nNode\nNetwork  \n(Path & Link)\n\
    Sink/BS\nAgri-IoT  \nCloud\n(b)   Agri-IoT Fault PropagationModel\n(a)  Sources\
    \ of Faults in Agri-IoT\nFigure 15. Faults in the WSN sublayer of Agri-IoT: sources\
    \ and fault propagation model.\nIoT 2023, 4\n296\nFaults  \nClassifications\n\
    Static Faults \nPermanent Faults \nHard Faults\nSoft Faults\nSN Failure\nNetwork\
    \ Failure\nPower Failure\nData Inconsistency\nSN Reading Error\nHardware\nSoftware\n\
    \ \nBehavior-based\n e.g. soft & hard\nTime-based\n e.g.transient,   \n      \
    \ intermittent,    \n       permanent,\n       potential\n \na.  Different Taxonomies\
    \ of Faults in State-of-the-Art of Classic IoT\nAgri-IoT Device (SN, BS):  \n\
    Origin of  Impairments\nComponent Malfunction & \nResources Exhaustion\nData Outlier\
    \ or \nErrored Data\nSN-out-of-service\nSoft/data inconsistency faults \nInaccurate\
    \ or unprecise in-network\n& global decision \nHard/static faults\nNetwork/link\
    \ failures\nEntire network failure\nRoot Causes Faults\n 1st Effects\n Main Quantifiable\
    \  \nMetrics of Faults \nb.  Proposed Classification of Faults for Agri-IoT\n\
    Transient & Permanent Faults\n 2nd Effects\nFigure 16. Classiﬁcation of faults\
    \ in the state of the art and proposed fault taxonomies for WSN-\nbased Agri-IoT.\n\
    From the above deﬁnitions and the fault taxonomies on the left side of Figure\
    \ 16, it can\nbe deduced that hard, permanent, and static faults are practically\
    \ manifested as SN-out-of-\nservice, while soft, dynamic, and data-inconsistency\
    \ faults can be observed as data outliers.\nBoth SN-out-of-service and data outliers\
    \ are consequences of unit malfunction or resource\nexhaustion and can be permanent\
    \ or intermittent in behavior. Both conditions can impair\nthe quality of event\
    \ data and the global actionable decisions of the network. Therefore,\nthe quality\
    \ of FM schemes can be evaluated based on their capacities to effectively detect,\n\
    tolerate, or avoid SN-out-of-service and data outlier faults. In summary, most\
    \ FM schemes\nin the state of the art focus on their effects, instead of the root\
    \ faults, which are the ﬂaws in\nexisting FM schemes [25]. Additionally, since\
    \ the SN is the sole network device responsible\nIoT 2023, 4\n297\nfor event sensing,\
    \ data computation, packet forwarding, and communication in the WSN\nsublayer\
    \ of Agri-IoT, it is the principal source of faults in Agri-IoT networks. A new\
    \ fault\nclassiﬁcation framework shown in Figure 16 can be deduced from the above\
    \ analysis.\nSecondly, it is discernible that SNs’ power mismanagement is the\
    \ most prevalent\norigin of faults [43,80,81], which then propagate to the backend\
    \ or application level (refer\nto the right side of Figure 15). For instance,\
    \ communication, sensing, and computational\naccuracies of a node can be impaired\
    \ when the battery energy falls below certain thresh-\nolds [43]. Also, network\
    \ faults can be traced to power exhaustion and node failures, which\ncreate holes\
    \ in the topology that divide the network into multiple disjointed segments [43].\n\
    On that account, faults can be avoided in WSN-based Agri-IoT if the energy-saving\
    \ strate-\ngies presented in Figures 9 and 10 are effectively implemented.\nAdditionally,\
    \ any FM scheme or fault-monitoring mechanism, be it proactive, reactive,\npassive,\
    \ or active, must incorporate the following underlying qualities: thresholds that\n\
    represent the probable fault conditions without false alarms, fault discovery,\
    \ minimized\nmessage/time complexities, and self-healing and self-reconﬁguration\
    \ to neutralize the\neffects of the faults [43].\nFM Framework and Architectures\
    \ in WSN Sublayer of Agri-IoT\nAs illustrated in Figure 17, every FM scheme consists\
    \ of three main steps, which\ninclude fault detection (FD), fault diagnosis, and\
    \ fault recovery/tolerance (FT) [82,83],\nwhich always require input information.\
    \ These steps are implemented in a decision-making\nframework that involves four\
    \ major processes: data/information collection, FD model\nformulation, FD decision\
    \ and fault classiﬁcation, and tolerance of its effects using any of\nthe FT mechanisms\
    \ shown in Figure 17. Thus, the FD model detects the fault, the fault\ndiscovery\
    \ technique distinguishes that fault from false alarms, while the FT mechanism\n\
    helps to auto-heal and recover from the faults or failures [84]. Mainly, SN-out-of-service\n\
    faults are detected and tolerated using self-reconﬁguration techniques, whereas\
    \ data outlier\nfaults must strictly follow Figure 17.\n1/20/22, 8:49 PM\n4.svg\n\
    file:///C:/Users/emman/Downloads/4.svg\n1/1\nMN (RPi 3B+)\nMN (RPi 3B+)\nCH (RPi\
    \ 3B+)\nBS (RPi 3B+)\nGoogle API \n& GitHub\nAggregated  \nData\nAggregated  \n\
    Data\nInformation  \nSampling\nLearning & \nModeling\nFD Decisioning\nSystem attributes,\
    \ \nSensory data, \nProbabilities\nCorrelation model,  \nThreshold model\nCoparision\
    \ or  \ninference =>  \nFault discovery\nCentralized FD Scheme\nDistributed FD\
    \ Scheme\nIf Host = BS\nIf Host = Local SNs\nFault Detection & Fault Discovery\
    \ (FD) Scheme\nFD Architecture\nSelf detection\nNeighbor coordination\nClustering\
    \ approach\nBS-coordinated\nFalse alarm \nMissed FD\n \n \nFD Output\nCorrect\
    \ FD\nFT Mechanisms\n+ Cluster-based mechanism\n(e.g. 1-hop, m-hop, hierarchical)\n\
    + Redundancy-based mechanism\n(e.g. node, path, data, time redun.)\n+ Deployment-based\
    \  mechanism\n(e.g. Topology design & control)\nAggregatedData from \n CHs to\
    \ the Cloud via BS\nSample Field Data From MNs Received by CHs\nSample Aggregated\
    \ Data from CHs Received at BS\nCH and or  \nRCH Code\nClient/MN Code\nClient/MN\
    \ Code\nServer \nCode\nActuation Signal  \nto Irrigation System\nWi-Fi\nOr\nOR\n\
    Figure 17. FM framework in WSN sublayer of Agri-IoT.\nIn addition, FM schemes\
    \ can be implemented using either a centralized or distributed\narchitecture [44,85,86].\
    \ In a centralized scheme, the FD/FT protocol is hosted and managed\non the BS,\
    \ whereas the distributed scheme hosts and manages this algorithm on the local\n\
    SNs [87,88] (see Figure 17). The centralized approach is simpler for small-scaled\
    \ networks\nbut suffers many technical challenges, such as common point failure\
    \ due to heavy message\ntrafﬁc at the BS and high SN energy waste. In contrast,\
    \ the distributed approach saves\npower and controls message trafﬁc on the BS\
    \ because it allows local decision and self-\nIoT 2023, 4\n298\nFD/FT with or\
    \ without neighboring. According to Figure 17, the distributed architecture\n\
    can be implemented in three major ways [43,89–91], which include self-detection,\
    \ neighbor\ncoordination, and the clustering approach. Since the basic design\
    \ requirement of a WSN-\nbased Agri-IoT is to maintain the healthy functionality\
    \ and longevity of the SNs and the\nBS, any post-deployment impairments that cannot\
    \ be self-ﬁxed must be tolerated to not\ninterfere with the core function of the\
    \ network. Therefore, any automated FT mechanism\nthat can be achieved through\
    \ the self-reconﬁguration and self-management for enhanced\nnetwork availability,\
    \ reliability, and dependability is encouraged in the WSN sublayer [92].\nAccording\
    \ to Figure 17, an efﬁcient WSN-based Agri-IoT, therefore, requires a calculated\n\
    mix of FT mechanisms based on the intended application.\n6.2. Systematic Survey\
    \ of Fault Management Schemes in WSN-Based IoT\nFM in Agri-IoT networks has not\
    \ received adequate conceptualized research con-\nsiderations. As a result, existing\
    \ Agri-IoT solutions inherit the FM propositions from\nthe traditional WSN-based\
    \ IoT networks, which have proven to be unsuitable [14]. This\nsubsection presents\
    \ a concise overview of these FM schemes, including their strengths,\nweaknesses,\
    \ and underlying theories/concepts. It then proposes a more suitable remedy for\n\
    WSN-based Agri-IoT technology. In canon centralized FM schemes (see references\
    \ in [93–97]),\nthe underlying FM algorithm is hosted and managed on the BS, while\
    \ the local SNs host\nand manage the FM algorithm in distributed architectures\
    \ [87,88]. Although the centralized\napproach is simpler for small-scale networks,\
    \ it suffers many technical challenges, such\nas common point failure due to heavy\
    \ message trafﬁc at the BS, management difﬁculties,\nand high energy wastages\
    \ on distant routing. This clearly explains why most outdoor\nAgri-IoT testbed\
    \ experiments in [1,10,11,14,18,19] experienced severe FM complications to\nthe\
    \ extent that the networks became infeasible to operate or manage at higher scalability\n\
    levels. However, the distributed approach (see references in [74,76,77,91,98–103])\
    \ saves\npower and controls message trafﬁc and workload on the BS because it allows\
    \ local decisions\nas well as local-FD/FT with or without neighboring nodes. The\
    \ distributed FD/FT scheme\ncan also be self-executed, neighbor-coordinated, or\
    \ clustering-aided [89–91]. Although the\nclustering-based FM architecture has\
    \ promising potential to improve energy conservation,\nnetwork adaptability, and\
    \ ease of implementation, it has not been extensively researched\nand exploited.\n\
    Again, distributed FD schemes are mainly established on the assumption that the\n\
    failure of SNs is spatially uncorrelated, while event information is spatially\
    \ correlated.\nTherefore, the FD’s decision framework is frequently modeled using\
    \ sensory data or statis-\ntical properties of the spatial or temporally correlated\
    \ SNs [79,104–106] from the immediate\nneighborhood of a node [74,103] or data\
    \ from farther SNs [107]. To date, the applicabil-\nity of these solutions to\
    \ the Agri-IoT context has attracted several technical challenges.\nConsequently,\
    \ the strengths and weaknesses of the main results of the benchmarking FM\nschemes,\
    \ their underlying assumptions, and how they addressed the critical fault-afﬁnity\n\
    factors such as energy conservation, FT/FA, control message complexity, and processor\n\
    burden of the SNs, are presented in the comparative evaluation summary of Table\
    \ 7.\nIoT 2023, 4\n299\nTable 7. Comparative summary of FM schemes for WSN-based\
    \ IoT networks.\nAuthor/Year\nRoot Faults? (i.e., Data\nOutliers and\nSN-Out-of-Service)\n\
    FM Architecture\nUnrealistic Assumptions\nEnergy Saving (FA)?\nFT?\nHigh Control\
    \ Message\nComplexity\nStand-Alone?\n[77] (2013)\nYes, both\nCluster-based\nAll\
    \ SNs have the same lifetime; SNs record the\nsame sensory data regardless of\
    \ location\n\x15\n✓\nHigh\n\x15\n[93] (2016)\nPartial: data outliers\nCentralized\n\
    SNs have binary sensing outputs\n✓\n\x15\nLow\n✓\n[79] (2015)\nPartial: data outliers\n\
    Distributed\nAll fault-free sensors measure the same physical\nvalue at any instant\
    \ of time, while the faulty\nsensors measure different physical values\n✓\n\x15\
    \nModerate\n✓\n[103] (2006)\nPartial: SN-out-of-service\nDistributed\nAll SNs\
    \ must have enough neighbors\n\x15\n✓\nHigh\n✓\n[74] (2009)\nPartial: SN-out-of-service\n\
    Distributed\nSNs must have unvarying detected initial status\n\x15\n✓\nHigh\n\
    ✓\n[76] (2016)\nPartial: SN-out-of-service\nDistributed\nSNs must have the same\
    \ initial status and a\npredeﬁned number of neighbors\n\x15\n✓\nHigh\n✓\n[91,98,99]\
    \ (2004, 2005, 2005)\nPartial: SN-out-of-service\nDistributed\nAll SNs have the\
    \ same error detection\nprobability, all neighboring nodes of an SN have\nidentical\
    \ levels of accuracy regardless of\ndistance\n\x15\n\x15\nHigh\n✓\n[100] (2009)\n\
    Partial: data outliers\nDistributed\nSNs have binary sensing outputs\n\x15\n✓\n\
    High\n✓\n[104] (2014)\nPartial: data outliers &\nSN-out-of-service\nCentralized\n\
    Silent on assumptions\n\x15\nNo\nLow\n✓\n[101] (2008)\nYes: transient faults\n\
    Distributed\nAll neighboring nodes have the same\ntransmission range and reading\
    \ values\n\x15\n\x15\nHigh\n✓\n[105] (2016)\nPartial: SN-out-of-service\nDistributed\n\
    Silent on assumptions\n\x15\n\x15\nModerate\n✓\n[108] (2015)\nPartial: data outliers\n\
    Distributed\nSilent on assumptions\n✓\n✓\nLow\n✓\n[109] (2009)\nPartial: SN-out-of-service\n\
    Distributed\nAll nodes must have identical measurements,\na quadrant must have\
    \ the same number of SNs\n\x15\n✓\nHigh\n✓\n[94] (2014)\nPartial: SN-out-of-service\n\
    Centralized\nBased on historical network data: assumes all\nSNs are healthy initially\
    \ to obtain training data\n\x15\n\x15\nModerate\n✓\n[95] (2016)\nPartial: SN-out-of-service\n\
    Centralized\nBased on historical network data: assumes all\nSNs are healthy initially\
    \ to obtain training data\n\x15\n\x15\nModerate\n✓\nIoT 2023, 4\n300\nTable 7.\
    \ Cont.\nAuthor/Year\nRoot Faults? (i.e., Data\nOutliers and\nSN-Out-of-Service)\n\
    FM Architecture\nUnrealistic Assumptions\nEnergy Saving (FA)?\nFT?\nHigh Control\
    \ Message\nComplexity\nStand-Alone?\n[96] (2015)\nPartial: SN-out-of-service\n\
    Centralized\nSilent on assumptions\n\x15\n\x15\nModerate\n✓\n[110] (2018)\nFT\
    \ protocol\nDistributed\nAssumed centralized BS\n✓\n✓\nHigh\n✓\n[111] (2017)\n\
    Effects: network failure\nDistributed\nAll SNs are homogeneous in terms of energy,\n\
    communication, and processing capabilities\n\x15\n\x15\nHigh\n✓\n[97] (2018)\n\
    Partial: SN-out-of-service\nCentralized\nAll faulty SNs must have at least a sleeping\n\
    node in its proximity\n\x15\n✓\nModerate\n✓\n[112] (2018)\nPartial: SN-out-of-service\n\
    Distributed\nSilent on assumptions\n✓\n✓\nHigh\n✓\n[113] (2016)\nPartial: SN-out-of-service\n\
    Distributed\nAll faulty SNs must have at least a sleeping\nnode in its proximity\n\
    \x15\n✓\nModerate\n✓\n[114] (2013)\nPartial: SN-out-of-service\nDistributed\n\
    Silent on assumptions\n\x15\n\x15\nModerate\n✓\n[115] (2016)\nPartial: data outliers\n\
    Distributed\nSilent on assumptions\n✓\n✓\nModerate\n✓\n✓: Present or YES, \x15\
    : Absent or NO.\nIoT 2023, 4\n301\n6.3. Theories/Concepts of Benchmarking FM Schemes\
    \ and Their Shortcomings\nThe conceptual models/theories of the canon FD decision\
    \ frameworks and the associ-\nated shortcomings can be expressed as follows:\n\
    •\nStatistical approaches such as Neyman–Pearson formulation [116], Bayesian statis-\n\
    tics [77,103], and normal distribution test types (e.g., Thompson Tau statistical\
    \ test [105])\nare high-resource-demanding techniques that may apply to classic\
    \ IoT. Still, they are\nunsuitable for power-constrained Agri-IoT devices or SNs.\
    \ In addition to being stand-\nalone and without application speciﬁcity, these\
    \ methods operate at high computational\nand control message complexities. Their\
    \ operational efﬁciencies increase with increas-\ning data dimensionality and\
    \ also require a priori knowledge of data distribution,\nwhich is not possible\
    \ in many real-life applications of Agri-IoT networks. Additionally,\nthey rely\
    \ on predeﬁned thresholds to make local and global FD decisions. Therefore,\n\
    regardless of the extensive research considerations of these methods, they are\
    \ generally\nnot suitable for low-power IoT applications, of which Agri-IoT is\
    \ no exception.\n•\nGraph-based FM techniques lack precise criteria for outlier\
    \ detections [83,109], suffer\nhigher computational complexities, and also make\
    \ unrealistic assumptions about the\ndata distribution. In addition, these approaches\
    \ (e.g., De Bruijn graph theory [109]\nand depth-based techniques) are unsuitable\
    \ for multidimensional and huge datasets.\n•\nMachine learning decision concepts\
    \ such as the k-out-of-n and majority decision\nrule concepts [93], naive Bayes,\
    \ iterative algorithms [107], and neural network-based\ntechniques, among others,\
    \ are susceptible to high dimensional datasets, suffer high\ncomputational cost,\
    \ and rely on sensitive model parameters.\nIn addition to the stipulated shortcomings,\
    \ these benchmarking FM methods usually\nignore the sensory data correlation (i.e.,\
    \ attribute correlation, spatial correlation, and tem-\nporal correlation) properties\
    \ of SNs, require high communication overhead with high FD\ndelays [83], and normally\
    \ operate in an ofﬂine manner, which is inconsistent with the\nmodus operandi\
    \ of typical Agri-IoT. Hence, they are unsuitable for the recent low-power\nAgri-IoT\
    \ applications.\n6.4. Open Issues on Existing FM Solutions for Classic WSN-Based\
    \ IoT Networks and\nRecommended Design Guidelines for Achieving Efﬁcient FM in\
    \ WSN-Based Agri-IoT\nA fault in the WSN sublayer of Agri-IoT networks can be\
    \ manifested as a data outlier\nand SN-out-of-service or node failure, both of\
    \ which must be detected and resolved locally\nor globally using the spatially\
    \ correlated event information and efﬁcient threshold-based\ndecision frameworks.\
    \ Although there has been extensive research concerning FM schemes\nfor the WSN\
    \ sublayer, several technical challenges that require urgent contextual research\n\
    considerations exist. They include the following:\n1.\nMost faults in the PHY\
    \ layer of Agri-IoT originate from the SNs’ power exhaustion,\nwhich implies that\
    \ the best fault-avoidance techniques are those that optimize power\nconsumption.\
    \ However, most FM schemes waste more energy and make the net-\nwork prone to\
    \ more faults/failures via high control messages and computational\ncomplexities.\n\
    2.\nMost FM schemes exist as stand-alone frameworks without architectural consider-\n\
    ations and are founded on unrealistic assumptions, which make them difﬁcult to\n\
    incorporate into existing routing protocols.\n3.\nThe cluster-based routing architecture\
    \ is endowed with many untapped local/global FM\npotentials and fault-avoidance\
    \ capacities for the next-generation Agri-IoT. However, these\npromising potentials\
    \ have received the least contextualized research considerations.\nExisting FM\
    \ solutions are meant for resource-sufﬁcient and expensive classic WSN-\nbased\
    \ IoT, not resource-constrained, context-speciﬁc use cases like Agri-IoT networks.\n\
    Regarding these technical challenges, this tutorial presents the following design\
    \ guidelines\nfor building efﬁcient and realistic FM schemes for WSN-based Agri-IoT:\n\
    IoT 2023, 4\n302\n1.\nFM schemes must rely on realistic and contextual assumptions\
    \ in order to detect and\nauto-tolerate sensory data outliers and SN-out-of-service\
    \ faults in real-time routing\nprotocols with minimal message, computational,\
    \ and memory complexities. Such FM\nschemes will be suitable for all power-constrained\
    \ WSN-based Agri-IoT applications.\n2.\nFuture works on FM schemes must be embedded\
    \ into speciﬁc routing protocols so\nthat their adaptability to topological dynamism\
    \ and scalability in terms of network\nsizes and node densities can be assessed\
    \ in an unsupervised manner. Therefore, fault\ndetection and fault-tolerance schemes\
    \ based on simple threshold-based theories are\nthe best candidates for this context,\
    \ since the threshold boundaries of agronomical\nmetrics can be accurately computed\
    \ from the historical data of the location.\n3.\nFM schemes must incorporate redundancy\
    \ check mechanisms by exploiting spatial\nand temporal correlations among sensory\
    \ data.\n4.\nFM schemes should maintain a good balance between local and global\
    \ FDs as well as\na reasonable detection rate and false alarm rate.\n7. State\
    \ of the Art on Real-World, Canon WSN-Based Agri-IoT Testbed Solutions\nIt is\
    \ well documented that WSN-based Agri-IoT is the most reliable remedy for mitigat-\n\
    ing the negative impacts climate change has had on agricultural production, for\
    \ which many\narchitectural designs and testbed prototypes have been proposed\
    \ [12,36]. In addition, since\nthe autonomous, resource-constrained SNs in Agri-IoT\
    \ are expected to operate without\npost-deployment maintenance checks, the issues\
    \ of FM, power optimization, and self-\norganization during SN design and network\
    \ deployment cannot be ignored in existing\ntestbed solutions [12,117]. Essentially,\
    \ the results from most research projects on Agri-IoT\nrelied on simulation experiments\
    \ [1,10,14], which have retained the gap between the phi-\nlosophy of this technology\
    \ and the comprehension of its real-world behavior for a more ac-\ncurate performance\
    \ assessment. This section presents a systematic performance assessment\nof the\
    \ few real-world WSN-based Agri-IoT testbed solutions currently based on the classic\n\
    WSN-based IoT principles. To understand how the benchmarking realization testbeds\
    \ of\nAgri-IoT in [1,10,11,14,18,19] fared in real-world operational conditions,\
    \ the results from\ntheir respective performances are systematically evaluated\
    \ and summarized in Table 8. It\nwas discovered that the current benchmarking\
    \ testbed solutions in [1,10,11,14,18,19] are\ncapital-intensive because they\
    \ are reliant on ﬁxed/location-restricted backbone infrastruc-\ntures (see the\
    \ middle of Figure 3), too complicated to deploy and manage by even expert\nusers,\
    \ based on unrealistic indoor conditions which do not commensurate real-world\
    \ envi-\nronmental conditions, and based on the high- power-demanding centralized\
    \ or ﬂooding\narchitectures which further complicate network manageability when\
    \ up-scaled. A concise\nand systematic survey of these benchmarking real-world\
    \ Agri-IoT networks and their ﬂaws\nin the state of the art is summarized in Table\
    \ 8.\nAdditionally, it can be established from the comparative assessment of the\
    \ benchmark-\ning Agri-IoT testbeds in Table 8 [10,11,18,19] that the embedded\
    \ communication technology,\nevent routing architecture, and the SNs’ power management\
    \ are the core factors that made\nthem capital-intensive and complicated to both\
    \ experts and low-income farmers. Addi-\ntionally, self-healing, reconﬁgurability,\
    \ and adaptability mechanisms to faults were not\ndeployed [1,14,17]; hence, faulty\
    \ and turbulent conditions could not be tolerated. Further-\nmore, since the battery-powered\
    \ SNs rely on expensive Wi-Fi and cellular communication\ntechnologies that are\
    \ not freely accessible at all locations, the SNs exhausted their battery\nsupply\
    \ a few days after deployment. Similarly, those that relied on ZigBee/IEEE 802.15.\
    \ 4\ncommunication technologies with power-intensive 6LoWPAN or IPv6 protocols\
    \ restricted\nthe resulting network to drive on the problematic centralized or\
    \ ﬂooding architectures\nwithout any efﬁcient FM techniques. As a result, these\
    \ solutions used costly ﬁxed IP\ninfrastructural supports and the centralized\
    \ routing architecture, making them practically\nimpossible to manage as the networks\
    \ scaled. This is why the SNs unstably exhausted their\nbattery power and abruptly\
    \ abridged network lifespans [1,10,11,14,18,19].\nIoT 2023, 4\n303\nTable 8. Comparative\
    \ analysis of WSN-based Agri-IoT testbed solutions.\nAuthor/Deployment Type\n\
    Testbed Objective\nComm. Tech & Architecture\nWeaknesses\n[10] (Outdoor)\nDisease\
    \ control\nIEEE 802.15.4/centralized,\nﬂooding\nRelied on a ﬁxed support system,\n\
    expensive, power-inefﬁcient,\nlocation-restricted\n[11] (Outdoor)\nPrecision farming,\
    \ to gather\nreal-world experiences\nZigBee, Mica2 clones hardware\nand TinyOS\
    \ software/centralized,\nﬂooding\nRelied on a ﬁxed support system,\nexpensive,\
    \ power-inefﬁcient,\nlocation-restricted, no single\nmeasurement was achieved\
    \ due to high\nnetwork complexity\n[18] (Indoor)\nData outlier detection and\n\
    decision support system for\nprecision irrigation testbeds\nZigBee/ﬂooding-based\n\
    Results based on 3 SNs under unrealistic\nindoor conditions\n[19] (Indoor)\nLatency\
    \ improvement\nFog computing, 6LoWPAN, 6LBR,\nand WiFi-based/centralized,\nﬂooding\n\
    Capital-intensive, energy-inefﬁcient,\nhigh complexity, location-restricted\n\
    [1] (Indoor and Outdoor)\nGather real-world deployment\nexperiences\nZigBee/centralized,\
    \ ﬂooding\nResult focused on mere observation, not\nreal-world deployment scenarios.\n\
    Therefore, the freely available low-power wireless technologies (e.g., LoRa, BLE,\
    \ 5G,\nZ-wave, NB-IoT, and SigFox) that are founded on a suitable routing topology\
    \ are the best\ncandidates for making this ubiquitous application [1,16] cheap\
    \ [1,20] and simple for all\nusers. Thus, the cluster-based topology is more pivotal\
    \ to addressing the above challenges\nof Agri-IoT [10,17] than the traditional\
    \ cellular and WiFi technologies that are inaccessible\nin many farms, depending\
    \ on their locations [10,20]. However, besides distance-power\nconstraints, architectural\
    \ support, and network manageability challenges, these freely\naccessible wireless\
    \ communication technologies have speciﬁc limitations, which include:\n1.\nZigBee\
    \ technology achieves the desired power savings only when deployed in star or\n\
    centralized topology [14], and it operates at its low-power distance range (10–100\
    \ m)\nin line-of-sight mode depending on the environmental characteristics.\n\
    2.\nLoRa is limited to low-density and ﬁxed network sizes (non-scalable), a low\
    \ data rate,\nand a low message capacity [14]. It may require registration and\
    \ expensive antennae,\ndepending on its operation location.\n3.\nSigFox supports\
    \ a very low data rate and requires registration. LoRa and SigFox\npossess complex\
    \ implementations because they both require speciﬁc modules to\nfunction and gateways.\n\
    4.\nWiFi, GPRS, cellular technologies, and NB-IoT are high power consumption standards\n\
    and location-/architecture-restricted.\n5.\nBLE has a short communication range\
    \ but supports clustering architecture, which is the\nmost optimal architecture\
    \ for ensuring the best operational efﬁciency of WSN-based\nAgri-IoT deployments,\
    \ since this architecture allows cluster isolation and management.\nTherefore,\
    \ a research opportunity exists for a ﬂexible, ubiquitous, realistic, energy-\n\
    efﬁcient, self-healing, simple, low-cost, cluster-based, and wireless outdoor-based\
    \ testbed\nthat consists of infrastructure-less, task-scalable, and wirelessly\
    \ conﬁgurable experimental\nSNs and a BS. It should also be deployed, re-deployed,\
    \ monitored, controlled, and managed\nby non-experts to operate stably throughout\
    \ the entire crop-growing season.\n8. Case Study: Cluster-Based Agri-IoT (CA-IoT)\
    \ for Precision Irrigation\nAs earlier established in Figure 2, the design and\
    \ implementation of Agri-IoT networks\nare driven by unique critical factors,\
    \ which are mainly determined by the associated\nrouting architecture, communication\
    \ technology, actuation management mechanisms,\nand environmental impacts. In\
    \ the operation phase, these factors constitute the speciﬁc\nobjectives in Figure\
    \ 10, which the supervisory routing protocol must address in order\nto optimize\
    \ performance efﬁciency and stability. As systematically established above,\n\
    the LEACH-inherited cluster-based architecture has the most promising potential\
    \ to address\nIoT 2023, 4\n304\nthese technical challenges. It helps to attain\
    \ high power optimization via communication\ndistance and packet minimization,\
    \ efficient network administration/adaptability, high event\ndata quality through\
    \ auto-FM, and local data quality management, as indicated in Figure 10.\nSo,\
    \ this section presents a systematic analysis of how the merits of this architecture\
    \ evolve\nin CA-IoT for precision irrigation use cases. Using the framework in\
    \ Figure 12, the cluster-\nbased architecture was pre-examined to uncover how\
    \ the fundamental Agri-IoT design\nrequirements and goals presented in the reference\
    \ frameworks in Figures 2, 9 and 10 can\nunfold into realistic multi-parametric\
    \ optimization metrics.\nThe conceptual architectural framework of the proposed\
    \ network, as illustrated in\nFigure 18, can be implemented using Arduino-based\
    \ or Raspberry Pi(RPi)-based micro-\ncontrollers, BLE and LoRa for intra-cluster,\
    \ inter-cluster, and BS–cloud communications,\nrespectively, and DHT22/STEMMA\
    \ soil moisture sensors for measuring the respective\nambient and soil microclimatic\
    \ parameters. Also, a unit cluster from Figure 18 detailing\nthe key network components\
    \ of MNs, CH, BS, and the ﬁeld-deployed precision irrigation\nsystem is shown\
    \ in Figure 19. It is assumed that the core units constituting the MNs, CH,\n\
    and BS, as illustrated in Figure 19, are optimally selected and designed after\
    \ Figure 2. Using\nFigures 18 and 19 as the reference architectural frameworks\
    \ for achieving our contextualized\nobjectives, this section presents an in-depth\
    \ systematic assessment and characterization\nof the scores of canon cluster-based\
    \ routing protocols of conventional WSN-based IoT\napplications so that the desired\
    \ MOO metrics can be appropriately deduced and adapted\nfor the design of the\
    \ associated routing for our case study.\n1/21/22, 10:27 AM\n300tt.svg\nBS\nInter-cluster\
    \ Communication  (e.g. BLE, SigFox, LoRa)\nIntra-cluster Communication (e.g. BLE,\
    \ SigFox)\nCH: RPi 3B+\nMN: RPi 3B+\nInternet +IoT Storage  \n      Cloud + Data\
    \ Analytic\nEngines\nProposed Cluster-based Routing Architecture Using RPi 3 and\
    \ DHT22  \nfor microclimatic data (temperature and humidity) Acquisition\nUser\
    \ with Web  \nor Mobile Application\nControl Signal to  \nIrrigation System\n\
    CH/RCH: RPi 3B+\nWeb Server/Python/Bluez\nOther Modules\ne.g. Linux Scripts, ATOM\
    \ \n, ADAFRUITs, DHT22, Soil\nSensor\nRadio Module\ne.g. BLE 4.2/LoRa \nMN: RPi\
    \ 3B+\nMN: RPi 3B+\nPC/Smartphone: Remote\nMonitoring and Control\nBS\nPower-Sufficient\n\
    e.g., RPi 3B+\nFigure 18. Conceptual architectural framework of the proposed CA-IoT\
    \ for precision irrigation\nmanagement.\nIoT 2023, 4\n305\n1/21/22, 10:35 AM\n\
    300t.svg\nfile:///C:/Users/emman/Downloads/300t.svg\n1/1\nE.g. Battery\nOnboard\
    \  \nBLE  Module\nCH\nBS\nMN\nMN\nMN\nLEDs & \nDHT22 Sensor\nUser with Web or\
    \ Mobile Application \nfor Remote Monitoring and Control\nInlet From Water Reservoir\n\
    Water Pump\nIrrigation System on SNs-Deployed Field \nControl Signal to  \nIrrigation\
    \ System\nPump Relay \nControl Board\nIoT Cloud\nLocal Data Storage\nCluster-based\
    \ WSN\nSolar Cell  \nPanels\nSolar Cell  \nPanels\nSolar Cell  \nPanels\nSolar\
    \ Cell  \nPanels\nBattery  \nBank\nBattery  \nBank\nBLE\nE.g. a. DHT22     b.\
    \ Soil Moisture  \nSensor\nCellular Tech. \ne.g. NB-IoT, LTE,  \nGSM\nZ-Wave\n\
    Wi-Fi ZigBee\nE.g. a. RPi\nb. Arduino\nPower Supply Unit\nSensing Unit\nCommunication\
    \ Unit\nController Unit\nFigure 19. CA-IoT use case cluster illustrating the key\
    \ network components: MNs, CH, and BS.\n8.1. Characterization of Canon Clustering-Based\
    \ Routing Protocols and Deduction of\nMOO Metrics\nA systematic survey (refer\
    \ to Table 9) and characterization of LEACH-based routing\nprotocols were conducted\
    \ using the clustering process, CH features, and cluster features,\nas indicated\
    \ in Figure 20, in order to conceive the core MOO metrics for the proposed CA-\n\
    IoT network framework. The clustering process, CH features, and cluster features\
    \ deﬁne the\nperformance optimalities and the quality of the sampled data of the\
    \ resulting architecture.\n1/21/22, 1:23 PM\n012.svg\nTaxonomy of MOO \nMetrics\n\
    Energy-related\nApplication-related\nCommunication- \nrelated \nConnectivity \n\
    Issues\nSNs' Operational  \nPattern\nCluster  \nfeatures\nClustering \n process\n\
    Cluster Size: equal, variable \nCluster Count: constant,  \nrandom, determined\
    \ \nIntra/Inter-cluster Comm. Type:  \nsingle-hop, multihop\nComm. type,\nComm.\
    \ distance\nPacket size\nLatency, scalability, DR-\nmodel, adaptability, FM,\n\
    data management, etc\nCH  \nfeatures\nCH Role Rotation: yes, no \nCH Mobility:\
    \ yes, no \nSN Type: homogeneous,  \n                heterogeneous  \nCH Role:\
    \ data fusion, router, FM, \nnetwork maintenance, all\nClustering Method: centralized,\
    \  \ndecentralized, hybrid \nCH Election Method: Preset,  \nrandom, attribute-determined\
    \ \nDynamism: static, adaptive \nAlgorithmic Complexity: constant,   \nvariable\n\
    a. Characterization of Cluster-based Networks\nb. Deduced Taxonomy of MOO Metrics\n\
    Cluster size,\nCluster count,\nSNs' density,\n& uniformity\nSNs' Role, \nSNs'\
    \ activity time schedules\nFigure 20. Characterization of cluster-based networks\
    \ and deduced taxonomy of MOO metrics for\noptimizing Agri-IoT networks.\nIoT\
    \ 2023, 4\n306\nTable 9. Comparative summary of Agri-IoT-applicable clustering-based\
    \ routing protocols using characterization parameters.\nProtocol/Year\nHierarchy\n\
    DR-Model\nClustering\nComm. Type\nObjective\nCH Selection\nCluster\nSN Mobility\n\
    SN Type\nCH Role\nConstant Time\nMethod\nMethod\nSize\nRotation\nComplexity\n\
    LEACH,\n2002 [21,47]\n2-level\nTime-driven\nDecentralized\nIntra: Single-hop\n\
    Max. WSN lifespan\nRandom\nuncontrolled\nStatic\nHomogeneous\n✓\n\x15\nInter:\
    \ Single-hop\nSEP, 2004 [118]\n2-level\nTime-driven\nDecentralized\nIntra: Single-hop\n\
    WSN stability pan\nRandom\nuncontrolled\nStatic\nHeterogeneous\n✓\n\x15\nInter:\
    \ Single-hop\nTL-LEACH,\n2007 [119]\n3-level\nTime-driven\nDecentralized\nIntra:\
    \ Single-hop\nData aggregation\nAttribute-based\nuncontrolled\nStatic\nHomogeneous\n\
    ✓\n\x15\nInter: Multihop\nPECRP,\n2009 [120]\nmultilevel\nTime-driven\nHybrid\n\
    Intra: Single-hop\nMax. WSN lifespan\nRandom\ncontrolled\nStatic\nHomogeneous\n\
    ✓\n\x15\nInter: Multihop\nAttribute-based\nLEACH-DT,\n2012 [121]\n3-level\nTime-driven\n\
    Decentralized\nIntra: Single-hop\nMax. WSN lifespan\nRandom\nuncontrolled\nStatic\n\
    Homogeneous\n✓\n\x15\nInter: Single-hop\nAttribute-based\nEESAA, 2012 [9]\n2-level\n\
    Time-driven\nDecentralized\nIntra: Single-hop\nMax. WSN lifespan\nRandom\nuncontrolled\n\
    Static\nHomogeneous\n✓\n✓\nInter: Single-hop\nAttribute-based\nDEEC,\n2014 [122]\n\
    2-level\nTime-driven\nDecentralized\nIntra: Single-hop\nWSN stability pan\nRandom\n\
    uncontrolled\nStatic\nHeterogeneous\n✓\n\x15\nInter: Single-hop\nDHCR,\n2015 [123]\n\
    multilevel\nTime-driven\nDecentralized\nIntra: Single-hop\nMin. control messages\n\
    Random\ncontrolled\nStatic\nHomogeneous\n✓\n✓\nInter: Multihop\nMax. WSN lifespan\n\
    Attribute-based\nHEER,\n2016 [124]\nmultilevel\nTime-driven\nDecentralized\nIntra:\
    \ Multihop\nMax. WSN lifespan\nRandom\ncontrolled\nStatic\nHomogeneous\n\x15\n\
    \x15\nInter: Single-hop\nAttribute-based\nS-BEEM,\n2017 [33]\n2-level\nTime-driven\n\
    Decentralized\nIntra: Single-hop\nLoad balancing\nRandom\ncontrolled\nMobile BS\n\
    Homogeneous\n✓\n✓\nInter: Multihop\nEAMR,\n2018 [125]\nmultilevel\nTime-driven\n\
    Decentralized\nIntra: Single-hop\nMin. control messages\nRandom\ncontrolled\n\
    Static\nHomogeneous\n✓\n✓\nInter: Multihop\nMax. WSN Lifespan\nAttribute-based\n\
    ✓: YES or Present, \x15: NO or Absent.\nIoT 2023, 4\n307\nAs depicted in Figure\
    \ 20a, the cluster features deﬁne the underlying connectivity\nissues, such as\
    \ cluster quality indices (thus, cluster count, cluster size) and intra-cluster\n\
    and inter-cluster communication types (thus, single-hop or multihop or both) [23,24].\n\
    From the network design viewpoint, the cluster quality depends on the optimality\
    \ of the\nCH count and cluster sizes, which in turn rely on the core design parameters,\
    \ such as the\nspatial density and uniformity of the deployed nodes, the speciﬁcation\
    \ of the wireless\ncommunication standard, the routing architecture, and the size\
    \ of the network [47]. Since\nthe deployment of SNs in a typical Agri-IoT can\
    \ be controlled, the stipulated cluster quality\nproperties can be optimized to\
    \ resolve connectivity issues in Figure 20b. In a randomly\ndeployed ﬁeld, these\
    \ cluster quality parameters can be optimized using a pairing-based SN\nduty-scheduling\
    \ mechanisms [9,12].\nSecondly, the CH features can be static, mobile, or role-rotated\
    \ in both homogeneous\nor heterogeneous networks [9,12] based on the SNs’ resource\
    \ hierarchy. Additionally,\nthe CHs can be assigned different tasks, such as data\
    \ aggregation, FM, coordinating\nnetwork reconﬁguration or duty cycling, and network\
    \ maintenance, depending on their\nresource capacities and network requirements.\
    \ This case study is based on static SNs and\nthe distributed network construction\
    \ approach (see references in [9,12,33,126–132]), where\nthe SNs locally manage\
    \ the entire clustering process, and a CH is elected without the entire\nnetwork’s\
    \ information.\nAs shown in Figure 20a, the clustering process can be characterized\
    \ by the clustering\nmethod/network type (thus, centralized or distributed), the\
    \ CH selection method, recluster-\ning or network adaptability to topological\
    \ or scalable conditions, and the complexities (thus,\ncontrol message and computational\
    \ complexities) of the entire network operation cycle.\nUnlike the static approach\
    \ with ﬁxed CH, the adaptive clustering approach selects CH\nbased on the current\
    \ network conditions and rotates this role. However, both approaches\ncan incorporate\
    \ self-reclustering techniques to self-heal SN-out-of-service faults. Data\noutlier\
    \ faults can be best detected and corrected using threshold-based decision theory\
    \ or\nspatial correlation methods with the least complexities. Due to the large-scale\
    \ and high\ndeployment densities of WSN-based Agri-IoT, the distributed clustering\
    \ process is more\nsuitable for enhancing local FM, scalability, network management,\
    \ and power optimization\nthan the centralized approaches [37,47].\nGenerally,\
    \ the CA-IoT network can be optimized by formulating the deduced optimal\ndecision\
    \ metrics in Figure 20a into a MOO framework and multihop routing model in\norder\
    \ to provide the guidelines for the design of the WSN sublayer of Agri-IoT. From\
    \ the\ncomparative evaluations of Figures 10 and 20a, a taxonomy of MOO metrics\
    \ for designing\nan efﬁcient WSN-based CA-IoT network is proposed in Figure 20b.\
    \ To enhance the clarity\nof the state of the art on cluster-based protocols and\
    \ justify the need for the proposed MOO\nmetrics, a comparative summary based\
    \ on the characterization parameters is presented in\nTable 9.\n8.2. CH Election\
    \ Techniques\nA CH selection process is very critical to the resulting network’s\
    \ performance efﬁciency.\nIn addition to centralized networks and the computationally\
    \ expensive fuzzy-based clus-\ntering approaches [133,134], the efﬁciencies of\
    \ all LEACH-inherited protocols are mainly\ndependent on their CH selection techniques\
    \ [47,49]. Therefore, the correct estimation of\nthe cluster quality metrics (i.e.,\
    \ CHs count and cluster size) is pivotal in attaining the\nobjectives in Figure\
    \ 10. With the aid of nodes’ residual energy and location metrics, the op-\ntimal\
    \ CH count and cluster size can be preset before network deployment. Currently,\n\
    these metrics are randomly selected using a probabilistic approach in LEACH-inherited\n\
    protocol [9,21] or derived using a deterministic or an attribute-based method\
    \ [47,135].\nHowever, the probabilistic clustering, such as the LEACH-inherited\
    \ protocols, is expected\nto perform better in terms of network lifespan, minimal\
    \ clustering overhead, improved\nconnectivity, network/coverage stability, low\
    \ latency, collision-free routing, load balanc-\ning, high network stability span,\
    \ and algorithmic simplicity if the optimal CH count was\nIoT 2023, 4\n308\npredeﬁned\
    \ correctly [136]. However, the CH count is randomly predeﬁned in these proto-\n\
    cols [9,21], which undermines the CH’s stability and the resulting architecture’s\
    \ optimality.\nThis challenge can be addressed via common CH selection metrics\
    \ including Euclidean\ndistance, intra-cluster/inter-cluster communication costs,\
    \ energy-harvesting capacities,\nand probabilistic factors. To date, the related\
    \ attempts in [49,126,137–139] only relied on\nthe SNs’ residual energy and location\
    \ information to re-elect CHs after the initial CH count\nis deﬁned, which cannot\
    \ be ideal for WSN-based Agri-IoT.\nFor instance, an active SN in a particular\
    \ round decides whether or not to become\na CH by choosing a random number (rn)\
    \ ranging between 0 and 1 and comparing the\nnumber with a speciﬁed threshold\
    \ Th. A node, therefore, becomes a CH for that round if\nrn < Th, where Th is\
    \ expressed as:\nTh =\n(\npd\n1−pd×(( f irst−round)mod 1\npd\n,\nif n ∈ G\n0,\n\
    otherwise\n(1)\nwhere pd is the desired percentage of CHs or CH count per round,\
    \ and G is the number of\nSNs that have not been a CH in the previous 1/p rounds.\n\
    The authors in [119] proposed a three-layered LEACH (TL-LEACH) that operates in\n\
    three functional phases—CH election, MN recruitment, and data transfer—to enhance\
    \ the\nenergy efﬁciency of LEACH. Their ﬁrst-level CH election approach modiﬁed\
    \ Equation (1)\ninto an enhanced threshold T(i), which is expressed as:\nT(i)\
    \ =\n(\n(r + 1) × mod( 1\np × p),\nif i ∈ G\n0,\notherwise\n(2)\nwhere p is the\
    \ CH count, r is the current round number, and G is the number of SNs that\nhave\
    \ not been a CH in the previous 1/p rounds. The second-level CHs are selected\
    \ from\nthe ﬁrst-level CHs based on the shortest distance to the BS to function\
    \ as aggregated packet\nforwarders or relay CHs (RCHs).\nThe authors in [120]\
    \ introduced energy (E(i)) and distance (D(i)) attributes into Equa-\ntion (1)\
    \ to improve the load-balancing merit of LEACH. The resulting Th is expressed\
    \ as:\nTh =\n(\npd\n1−pd[r×mod 1\npd ] × [E(i) + (1 − D(i))],\nif n ∈ G\n0,\n\
    otherwise\n(3)\nMultihop routing via relay CHs (RCHs) was recommended for distant\
    \ CHs in the\nfuture scope of [120].\nIn the LEACH presented with a distance-based\
    \ threshold (LEACH-DT) algorithm\nin [121], the probability of becoming a CH depends\
    \ on the relative distance between a\nnode and the BS. This algorithm differs\
    \ from the LEACH algorithm because the desired\npercentage of CHs (pi) is predeﬁned\
    \ using Equation (5), while the threshold T(I, r) is\nexpressed as:\nT(i, r) =\n\
    (\npi\n1−pi×[r×mod 1\npi ],\nif Gi(r) = 0\n0,\nif Gi(r) = 1\n(4)\nNote that the\
    \ terms retain their usual deﬁnitions, namely:\np(i) = k\nξi\n∑N\nj=1 ξj\n, 0\
    \ ≤ pi ≤ 1,\n(5)\nwhere\nξi = 1/ECH × di − Enon−CH,\n(6)\nThe variable di depicts\
    \ the distance between node i and the BS, and ECH and Enon−CH\nare the average\
    \ residual energies in CHs and non-CHs, respectively. The authors further\nIoT\
    \ 2023, 4\n309\nestablished the need for a multihop routing approach in simulations\
    \ and real-world WSNs\nto validate the countless theoretical propositions and\
    \ beneﬁts.\nIn the decentralized energy-efﬁcient hierarchical cluster-based routing\
    \ algorithm\n(DHCR) [123], SNs compete to become CHs. First, the BS broadcasts\
    \ a trigger message at a\nspeciﬁc range. The receiving nodes then compete to become\
    \ a CH by disseminating a new\nmessage containing their residual energies and\
    \ distances from the BS. Using this informa-\ntion, a neighboring node i within\
    \ the target range receives the message and calculates its\nCHSn f uni as:\nCHSn\
    \ f uni = a × Erei\nEmax\n+ b ×\n1\nDis − To − BSi\n,\n(7)\nwhere Erei and Emax\
    \ are the residual and initial energy levels of node i, respectively;\nDis − To\
    \ − BSi is the distance between node i and the BS, and a and b are real random\n\
    values between 0 and 1 such that a + b = 1. The values of Dis − To − BSi of node\
    \ i\nand its neighbors are compared, and the node with the highest Dis − To −\
    \ BSi value is\nselected as the CH. A ﬁrst-level CH broadcasts its residual energy,\
    \ neighboring node count,\nand distance from the BS via a speciﬁc route. The next-level\
    \ CHs receive the information\nand similarly repeat the procedure to ensure that\
    \ every node determines a redistributor\nCH to the BS at the same time. A redistributor\
    \ CH has more energy and fewer neighbors\n(neighboring degrees).\nHowever, the\
    \ Hamilton energy-efﬁcient routing protocol (HEER) [124] creates an\nentire cluster\
    \ of nodes, aggregates data, and transmits them to the BS via a Hamiltonian\n\
    path that has been created by the entire cluster of nodes and controls the cluster\
    \ size by\nselecting one node as the CH using the probability function p, which\
    \ can be expressed as:\np = Lmessage\nFmax\n(8)\nwhere Lmessage is the size of\
    \ every node, and Fmax is the maximum size of a frame. The\nHEER protocol creates\
    \ the clusters only once in the ﬁrst round based on LEACH, and it\nrole-rotates\
    \ the CHs per the energy on the Hamiltonian path after a determined period.\n\
    Similarly, the two-phased EAMR protocol [125] randomly preselects the CH. A CH\n\
    also selects its closest CH as its redistributor CH. The clusters are static over\
    \ the entire\nnetwork lifetime, and the CH role rotates randomly within the clusters\
    \ according to a cluster\nreplacement threshold. The new CH inherits the redistributor\
    \ role if the old CH had one.\nOverall, since the node location, residual energy,\
    \ and sleep schedule are indispensable in the\nCH selection process, the CH selection\
    \ methods proposed by the authors in [9,12,36,120,140]\nare recommended WSN-based\
    \ Agri-IoT applications.\n8.3. Challenges of Existing MOO Frameworks and Recommended\
    \ Future Works\nAs Figures 9 and 10 illustrate, the performance efﬁciency of an\
    \ infrastructure-less\nWSN-based Agri-IoT mainly depends on the embedded MOO remedies\
    \ in the associated\nsupervisory routing protocol [12]. Several MOO frameworks\
    \ have been researched since\nAgri-IoT networks are subjected to multiple design\
    \ and operational constraints. A MOO\nframework is expected to formulate multiple\
    \ objective functions from a set of MOO metrics\nto simultaneously optimize these\
    \ multiple objectives, such as the maximal energy savings,\nhighest connectivity,\
    \ best latency, highest reliability, and balanced SN power depletion\nrates across\
    \ the network. Although the MOO methods are the best candidates for Agri-IoT,\n\
    the existing MOO solutions used in Agri-IoT are adopted from traditional WSN-based\
    \ IoT\nwithout any contextual evaluation [12,16,26]. Consequently, they have not\
    \ fulﬁlled their\nintended purposes due to several technical challenges, including\
    \ the following:\n1.\nThey are limited to non-cluster-based network architectures,\
    \ which implies that the promis-\ning potentials of the clustering architecture\
    \ are not adequately exploited [9,12,50,51].\n2.\nThey are frequently implemented\
    \ in the operational phase of the network, which\nmakes it challenging to ﬁnd\
    \ global optimal solutions with a balanced tradeoff among\nIoT 2023, 4\n310\n\
    conﬂicting objective functions. The performance optimality of the Agri-IoT network\n\
    starts from the SN design.\n3.\nThey rely on high-resource-demanding algorithms,\
    \ such as mathematical programming-\nbased scalarization methods, multi-objective\
    \ genetic algorithms (MOGAs), heuristics/\nmetaheuristics-based optimization algorithms,\
    \ and other advanced optimization\ntechniques [23,26,48], making them unsuitable\
    \ for the battery-powered SNs in Agri-IoT.\n4.\nThere are no contextual MOO guidelines\
    \ based on Figure 20 to govern the PHY-layer\ndesign of Agri-IoT to achieve global\
    \ optimal solutions with a balanced tradeoff among\nconﬂicting objectives. Consequently,\
    \ there are conﬂicting scenarios in existing MOO\nsolutions [50].\nTherefore,\
    \ there is an urgent demand for a realistic low-power MOO framework for\nCA-IoT\
    \ networks that is founded on the core WSN design metrics and MOO taxonomy\nmetrics\
    \ in Figure 10 and the top of Figure 20, respectively. The following section assesses\n\
    how evaluations and deductions evolve in a typical event sampling and routing\
    \ protocol\nin a CA-IoT network for precision irrigation system management.\n\
    9. Design of WSN-Speciﬁc CA-IoT Routing Protocol\nThis section proposes a CA-IoT-based\
    \ supervisory routing protocol that supports\nstatic SNs, rotatable/ﬁxed CH roles,\
    \ and enhanced SN resource management under the\ndeterministic deployment approach.\
    \ This can improve energy savings, connectivity, dis-\ntance moderation, and multihop\
    \ inter-cluster communication in the resulting network.\nThe operational cycle\
    \ and the embedded activities of our WSN-based CA-IoT protocol for\nprecision\
    \ irrigation application, as illustrated in Figure 21, include the following:\n\
    1.\nNetwork Construction or Setup Phase: This phase involves network modeling,\
    \ CH election,\nand cluster formation, which is explained in Figure 21. The active–sleep\
    \ duty-cycle\nscheduling ensures the SNs only switch to active mode during their\
    \ scheduled sampling\ndurations. In randomly deployed WSNs, redundant event reporting\
    \ can be avoided\nusing a correlated pairing-based active–sleep duty-cycle scheduling\
    \ approach in [12].\nThe optimal CH count and cluster size must be predeﬁned from\
    \ the resource capacities\nof the SNs. After the initial CH election, the MNs\
    \ are recruited and assigned their\nrespective sampling and intra-cluster communication\
    \ timeslots.\n2.\nSampling, Data Management, and Transmission Phase: The tasks\
    \ executed in this phase\ninclude event sampling, intra-cluster and inter-cluster\
    \ data transmissions, data outlier\nFM, and event data redundancy management.\
    \ Since microclimatic soil parameters do\nnot change swiftly [1,14], sampling\
    \ can only be scheduled during the day at 3-hourly\ntime intervals. In addition\
    \ to power optimization, the clustering approach provides\nsuperb potential for\
    \ both local and global FM using threshold-based FM theory and\nspatial correlation\
    \ techniques. Based on the architecture in Figure 19 and the resource\nlimitations\
    \ of the SNs, it is recommended that the communication beyond the BS or\ngateway\
    \ can utilize LoRa or Wi-Fi AirBox, whereas the intra-cluster and inter-cluster\n\
    communications must be the freely available low-power BLE technology, since it\
    \ is\nthe most suitable for the clustering architecture.\n3.\nNetwork Maintenance\
    \ and Reclustering Phase: This phase resolves all unforeseen topolog-\nical dynamics\
    \ caused by the SNs’ failures, network scalability, node mobility, and un-\nexpected\
    \ operational ﬂaws, without interfering with the normal network functionality\n\
    via adaptive reclustering, self-healing, and multihop routing techniques [12,23,24].\n\
    Here, a parent CH coordinates the election of child CHs (CCHs). While all non-CCHs\n\
    switch to sleep mode, the CCHs recruit new MNs using location and residual energy\n\
    parameters, assign them their respective sampling timeslots, and repeat Phase\
    \ 2 after-\nward, as shown in Figure 21. SN-out-of-service faults are auto-detected\
    \ and tolerated\nin this phase.\nIoT 2023, 4\n311\nCA-IoT  \nOperational\nCycle\n\
    SNs pairing\nActive-sleep duty-cycle scheduling\nCH-counts predefined\nCH selection\n\
    MN recruitment  \nMNs assigned sampling timeslots \nEvent sensing & local FM\n\
    1-hop intra-cluster comm.\nData aggregation by CHs\nData redundancy checks & FM\n\
    Inter-cluster 1-hop/m-hop comm.\nOld CHs select new CHs\nActive-Sleep duty-cycle\
    \ activated \nNew MNs recruited\nMNs assigned sampling timeslots \n1. Network\
    \ Construction\n2. Sampling, Data Management, \n and Data Transmission\n3. Network\
    \ Maintenance and \nReclustering\nFigure 21. Proposed operation cycle for designing\
    \ our CA-IoT network’s routing protocol.\nAdditionally, Figure 21 uniquely incorporates\
    \ correlated pairing-based duty cycling,\nconstant control message complexity\
    \ FM/data redundancy scheme, network construc-\ntion/maintenance, and cluster\
    \ quality measures that can ensure unprecedented energy\nsavings and event data\
    \ quality. This clustering approach can further minimize energy\nwastage via a\
    \ suitable MAC method, a low-power wireless communication standard, data\naggregation\
    \ with data redundancy checks, and CH role rotation, among other factors.\nAlthough\
    \ the various sections of the deduced MOO metrics have been implemented in our\n\
    CA-IoT operational cycle, the most desired performance can be optimally attained\
    \ when\nthe MOO metrics are modeled into their respective objective functions,\
    \ and their optimal\nvalues are determined and implemented in both simulation\
    \ and testbed experiments in\nfuture works. Also, a realistic multihop routing\
    \ framework can also be inculcated into this\nprotocol for large-scale applications.\n\
    10. Open Issues and Future Works: Cluster-Based WSN-Speciﬁc Agri-IoT Networks\n\
    This tutorial has ﬁrmly established that the WSN-based Agri-IoT is an indispens-\n\
    able component of smart or precision farming and greenhouses, despite its resource-\
    \ and\ndeployment-induced challenges [12,26,141]. Unlike the conventional IoT,\
    \ Agri-IoT is com-\npelled to drive on batteries and affordable task-scalable\
    \ SNs. However, it must meet the\nexpectations in Figure 2 to guarantee a stable\
    \ performance. The cluster-based routing\ntechnique has emerged with promising\
    \ potential to mitigate these challenges. However,\nresults from existing testbed\
    \ solutions in this study show otherwise due to the absence of a\ncontextualized\
    \ in-depth overview of Agri-IoT as well as the following open issues which\nhave\
    \ not received extensive contextual research considerations in Agri-IoT applications:\n\
    1.\nThe cluster-based routing architecture for WSN-based Agri-IoT has not received\
    \ holistic\nand practical research considerations as far as FM, power optimization,\
    \ and network\nadaptability are concerned. Therefore, there is a demand for multi-parametric\
    \ optimiza-\ntion frameworks and guidelines for designing and implementing the\
    \ WSN sublayer.\n2.\nConcerning FM, most proposed schemes in the canon state of\
    \ the art are stand-\nalone, have high control message and computational complexities\
    \ (energy-inefﬁcient),\nand are mostly incompatible with the clustering architecture\
    \ [25,52]. The desired\nFM schemes for CA-IoT applications should be equipped\
    \ with fault-avoidance mech-\nIoT 2023, 4\n312\nanisms and the capacity to detect\
    \ and self-heal root faults (SN-out-of-service and\nsensory data outliers [25]),\
    \ not their effects.\n3.\nMultihop routing, which is a requirement to attain the\
    \ desired energy savings and\nnetwork adaptability in large-scale CA-IoT networks,\
    \ is asserted to be more energy-\nefﬁcient only in simulation experiments [33,120,121,123–125,128–130]\
    \ but not in real-\nworld implementation [22–24]. This imbalance is due to a lack\
    \ of a comprehensive\nand reliable theoretical multihop routing framework that\
    \ is based on the total commu-\nnication costs of multihop routing.\n4.\nThere\
    \ is a demand for a more realistic and holistic MOO framework that can op-\ntimize\
    \ the operational efﬁciency metrics such as cluster size, cluster counts, den-\n\
    sity/uniformity of nodes, communication distance, and activity schedule/duration,\n\
    right from the network design phase to the operational phase of Agri-IoT networks.\n\
    5.\nAlthough the current literature supports adaptive clustering with CH role\
    \ rotation\nideology, there exists the need for an optimal initial CH-count estimator\
    \ in order to\nimprove the stability of CH elections and the architecture. Thus,\
    \ the cluster quality\nindices (e.g., optimal cluster count and size) must be\
    \ predetermined before deﬁning\nthem in the associated CH election method, since\
    \ CH stability is compromised in most\nclustering methods [9,21,119–121,123,124].\n\
    6.\nMost protocols in the state of the art rely on perfect homogeneous networks,\
    \ which is\nunrealistic due to variations in modular specifications and resource\
    \ utilization and the\nfact that different SNs may have different communication\
    \ and data computational roles.\nTherefore, a more realistic, contextualized,\
    \ and adaptive clustering approach that leverages\nthe gap between the philosophy\
    \ and practice of Agri-IoT applications is needed.\n7.\nIn addition to the parent\
    \ LEACH protocol [21,61] which is a complete suite application\ncomprising routing,\
    \ MAC, and physical characteristics for wireless communication in\nWSNs, most\
    \ benchmarking MAC protocols purposed for traditional IoT applications\nare shelved,\
    \ since they are developed in solitude without application speciﬁcity and\nnetwork\
    \ architectural considerations. A custom-built and holistic protocol suite for\n\
    Agri-IoT remains a research opportunity.\n11. Conclusion and Future Works\nThis\
    \ tutorial presented: (1) a systematic overview of the fundamental concepts, tech-\n\
    nologies, and architectural standards of WSN-based Agri-IoT; (2) an evaluation\
    \ of the tech-\nnical design requirements of a robust, ubiquitous, self-healing,\
    \ energy-efﬁcient, adaptive,\nand affordable Agri-IoT; (3) a comprehensive survey\
    \ of the benchmarking FM techniques,\ncommunication standards, routing protocols,\
    \ MMAC protocols, and WSN-based testbed\nsolutions; and (4) an in-depth case study\
    \ on how to design a self-healing, energy-efﬁcient,\naffordable, adaptive, stable,\
    \ and cluster-based WSN-speciﬁc Agri-IoT from a proposed\ntaxonomy of MOO metrics\
    \ that can guarantee optimized network performance. Further-\nmore, this tutorial\
    \ established new taxonomies of faults, architectural layers, and MOO\nmetrics\
    \ for CA-IoT networks. Using the open technical issues, it recommended application-\n\
    speciﬁc requirements of Agri-IoT, general design expectations, and remedial measures,\n\
    and it evaluated them in CA-IoT for precision irrigation in order to optimally\
    \ exploit the\nproposed MOO metrics in a typical CA-IoT design in both simulation\
    \ and real-world\ndeployment scenarios. Overall, this tutorial can serve as a\
    \ new reference document for the\nIoT community and Agri-IoT designers, since\
    \ it adequately examined all critical aspects of\nWSN-based Agri-IoT networks\
    \ from theoretical modeling to real-world implementation.\nAuthor Contributions:\
    \ The First Author contributed 60% while the second the third Authors con-\ntributed\
    \ 20% each. Conceptualization, E.E.; methodology, A.M.W.; writing, review and\
    \ editing, E.E.,\nO.T. and A.M.W.; supervision, O.T. and A.M.W.; project administration,\
    \ E.E.; and funding acquisition,\nE.E., and O.T. All authors have read and agreed\
    \ to the published version of the manuscript.\nFunding: The work was carried out\
    \ with the ﬁnancial support of icipe- World Bank Financing\nAgreement No D347-3A\
    \ and the World Bank Korea Trust Fund Agreement No TF0A8639 for the\nIoT 2023,\
    \ 4\n313\nPASET Regional Scholarship and Innovation Fund. The views expressed\
    \ herein do not necessarily\nreﬂect the ofﬁcial opinions of the donors.\nData\
    \ Availability Statement: This research has no such data.\nConﬂicts of Interest:\
    \ The authors declare no conﬂict of interest.\nAbbreviations\nSN\nSensor Node\n\
    WSN\nWireless Sensor Network\nIoT\nInternet of Things\nAgri-IoT\nAgricultural\
    \ Internet-of-Things\nCA-IoT\nCluster-based Agricultural Internet of Things\n\
    FD/FT\nFault Detection and Fault Tolerance\nFA\nFault Avoidance\nFM\nFault Management\n\
    MOO\nMulti-Objective Optimization\nBS\nBase Station\nMMAC\nMultichannel Medium\
    \ Access Control\nMAC\nMedium Access Control\nBLE\nBluetooth Low-Energy\nCH\n\
    Cluster Head\nRCH\nRelay Cluster Head\nMN\nMember Node\nAODV\nAd hoc On-demand\
    \ Distance Vector\nRPL\nRouting over Low-Power and Lossy Networks protocol\nCAM\n\
    Channel Access Management\nDCO\nDuty-Cycle Optimization\nReferences\n1.\nKumar,\
    \ P.; Reddy, S.R.N. Lessons Learned From the Deployment of Test-Bed for Precision\
    \ Agriculture. In Proceedings of the\nInternational Conference on Sustainable\
    \ Computing in Science, Technology & Management (SUSCOM-2019), Jaipur, India,\
    \ 26–28\nFebruary 2019; pp. 25686–25697. [CrossRef]\n2.\nAbbasi, M.; Yaghmaee,\
    \ M.H.; Rahnama, F. Internet of Things in agriculture: A survey. In Proceedings\
    \ of the 2019 3rd International\nConference on Internet of Things and Applications\
    \ (IoT), Isfahan, Iran, 17–18 April 2019; pp. 1–12.\n3.\nGennari, P.; Moncayo,\
    \ J.R. World Food and Agriculture Statistical Pocketbook; Food and Agriculture\
    \ Organization of the United\nNations: Rome, Italy, 2018; Volume 1, pp. 1–248.\n\
    4.\nShiferaw, B.; Tesfaye, K.; Kassie, M.; Abate, T.; Prasanna, B.M.; Menkir,\
    \ A. Managing vulnerability to drought and enhancing\nlivelihood resilience in\
    \ Sub-Saharan Africa: Technological, institutional and policy options. Weather.\
    \ Clim. Extrem. 2014, 3, 67–79.\n[CrossRef]\n5.\nDevi, K.H.; Gupta, M.V. IoT Application,\
    \ A Survey. Int. J. Eng. Technol. 2018, 7, 891–896. [CrossRef]\n6.\nStoces, M.;\
    \ Vanˇek, J.; Masner, J.; Pavlík, J. Internet of Things (IoT) in Agriculture—Selected\
    \ Aspects. AGRIS On-Line Pap. Econ.\nInform. 2016, 8, 83–88. [CrossRef]\n7.\n\
    Lova, R.; Vijayaraghavan, V. IoT Technologies in Agricultural Environment: A Survey.\n\
    Wireless Pers. Commun. 2020, 113,\n2415–2446. [CrossRef]\n8.\nFarooq, M.S.; Riaz,\
    \ S.; Abid, A.; Abid, K.; Naeem, M.A. A Survey on the Role of IoT in Agriculture\
    \ for the Implementation of\nSmart Farming. IEEE Access 2019, 7, 56237–156271.\
    \ [CrossRef]\n9.\nTauseef, S.; Nadeem, J.; Talha, Q. Energy Efﬁcient Sleep Awake\
    \ Aware (EESAA) intelligent Sensor Network routing protocol.\nIn Proceedings of\
    \ the 15th International Multitopic Conference (INMIC), Islamabad, Pakistan, 13–15\
    \ December 2012; pp. 317–322.\n[CrossRef]\n10.\nHartung, R.; Kulau, U.; Gernert,\
    \ B.; Rottmann, S.; Wolf, L. On the Experiences with Testbeds and Applications\
    \ in Precision Farm-\ning. In Proceedings of the 15th ACM Conference on Embedded\
    \ Network Sensor Systems, Delft, The Netherlands, 5 November\n2017; pp. 54–61.\n\
    11.\nLangendoen, K.; Baggio, A.; Visser, O. Murphy loves potatoes: Experiences\
    \ from a pilot sensor network deployment in precision\nagriculture. In Proceedings\
    \ of the 20th IEEE International Parallel & Distributed Processing Symposium,\
    \ Rhodes, Greece, 25–29\nApril 2006; Volume 51, pp. 8–13. [CrossRef]\n12.\nEffah,\
    \ E.; Thiare, O. Realistic Cluster-Based Energy-Efﬁcient and Fault-Tolerant (RCEEFT)\
    \ Routing Protocol for Wireless Sensor\nNetworks (WSNs). In Advances in Information\
    \ and Communication; Springer: Cham, Switzerland, 2020; pp. 320–337.\nIoT 2023,\
    \ 4\n314\n13.\nNasser, N.; Karim, L.; Ali, A.; Anan, M.; Kheliﬁ, N. Routing in\
    \ the Internet of Things. In Proceedings of the GLOBECOM\n2017—2017 IEEE Global\
    \ Communications Conference, Singapore, 4–8 December 2017; pp. 1–6.\n14.\nJawad,\
    \ H.M.; Nordin, R.; Gharghan, S.K.; Jawad, A.M.; Ismail, M. Energy-Efﬁcient Wireless\
    \ Sensor Networks for Precision\nAgriculture: A Review. Sensors 2017, 8, 1781.\
    \ [CrossRef]\n15.\nClausen, T.; Herberg, U.; Philipp, M. A critical evaluation\
    \ of the IPv6 Routing Protocol for Low Power and Lossy Networks\n(RPL). In Proceedings\
    \ of the 2011 IEEE 7th International Conference on Wireless and Mobile Computing,\
    \ Networking and\nCommunications (WiMob), Shanghai, China, 10–12 October 2011;\
    \ pp. 365–372.\n16.\nEffah, E.; Thiare, O.; Wyglinski, A.M. Multi-Objective Modeling\
    \ of Clustering-Based Agricultural Internet of Things. In Pro-\nceedings of the\
    \ 2020 IEEE 92nd Vehicular Technology Conference (VTC2020-Fall), Victoria, BC,\
    \ Canada, 18 November–16\nDecember 2020. [CrossRef]\n17.\nEffah, E.; Thiare, O.;\
    \ Wyglinski, A.M. Energy-Efﬁcient Multihop Routing Framework for Cluster-Based\
    \ Agricultural Internet of\nThings (CA-IoT). In Proceedings of the 2020 IEEE 92nd\
    \ Vehicular Technology Conference (VTC2020-Fall), Victoria, BC, Canada,\n18 November–16\
    \ December 2020. [CrossRef]\n18.\nKhan, R.; Ali, I.; Zakarya, M.; Ahmad, M.; Imran,\
    \ M.; Shoaib, M. Technology-Assisted Decision Support System for Efﬁcient Water\n\
    Utilization: A Real-Time Testbed for Irrigation Using Wireless Sensor Networks.\
    \ IEEE Access 2018, 6, 25686–25697. [CrossRef]\n19.\nAhmed, N.; De, D.; Hussain,\
    \ I. Internet of Things (IoT) for Smart Precision Agriculture and Farming in Rural\
    \ Areas. IEEE Internet\nThings J. 2018, 5, 4890–4899. [CrossRef]\n20.\nEffah,\
    \ E.; Dorgloh, W. GSM-Controlled Irrigation System (GSMCIS) for Vegetable Farmers\
    \ in Ghana. Ghana J. Technol. 2016,\n1, 21–24.\n21.\nMehmood, A.; Mauri, J.L.;\
    \ Noman, M.; Song, H. Improvement of the Wireless Sensor Network Lifetime Using\
    \ LEACH with\nVice-Cluster Head. Ad Hoc Sens. Wirel. Netw. 2015, 28, 1–17.\n22.\n\
    Haenggi, M.; Puccinelli, D. Routing in Ad Hoc Networks: A Case for Long Hops.\
    \ IEEE Commun. Mag. 2005, 43, 93–101.\n23.\nPešovi´c, U.M.; Mohorko, J.J.; Benkiˇc,\
    \ K.; ˇCuˇcej, Ž.F. Single-hop vs. multi-hop—Energy efﬁciency analysis in wireless\
    \ sen-\nsor networks. In Proceedings of the 18th Telekomunikacioni forum TELFOR\
    \ 2010, Belgrade, Serbia, 23–25 November 2010;\npp. 471–474.\n24.\nHaenggi, M.\
    \ Twelve Reasons not to Route over Many Short Hops. In Proceedings of the IEEE\
    \ 60th Vehicular Technology\nConference, Los Angeles, CA, USA, 26–29 September\
    \ 2004; pp. 1–4.\n25.\nEffah, E.; Tiare, O. Survey: Faults, Fault Detection and\
    \ Fault Tolerance Techniques in Wireless Sensor Networks. Int. J. Comput.\nSci.\
    \ Inf. Secur. 2018, 16, 1–14.\n26.\nFerentinos, K.; Tsiligiridis, T. Adaptive\
    \ design optimization of wireless sensor networks using genetic algorithms. Comput.\
    \ Netw.\n2007, 51, 1031–1051.\n27.\nWorld Bank. Access to electricity (% of population)—Sub-Saharan\
    \ Africa. In The World Bank and UN Data on SSA; The World\nBank: Washington, DC,\
    \ USA, 2021; pp. 1–3.\n28.\nElleuchi, M.; Boujelben, M.; Saleh, M.S.B.; Obeid,\
    \ A.M.; Abid, M. Tree based routing protocol in WSNs: A comparative\nperformance\
    \ study of the routing protocols DEEC and RPL. Future Technol. Publ. 2016, 5,\
    \ 7–16.\n29.\nAl-Fuqaha, A.; Guizani, M.; Mohammadi, M.; Aledhari, M.; Ayyash,\
    \ M. Internet of Things: A Survey on Enabling Technologies,\nProtocols and Applications.\
    \ IEEE Commun. Surv. Tutor. 2015, 17, 2347–2376. [CrossRef]\n30.\nLoukatos, D.;\
    \ Manolopoulos, I.; Arvaniti, E.-S.; Arvanitis, K.G.; Sigrimis, N.A. Experimental\
    \ Testbed for Monitoring the Energy\nRequirements of LPWAN Equipped Sensor Nodes.\
    \ IFAC-PapersOnLine 2018, 51, 309–313. [CrossRef]\n31.\nAkyildiz, I.F.; Su, W.;\
    \ Sankarasubramaniam, Y.; Cayirci, E. A survey on sensor networks. IEEE Commun.\
    \ Mag. 2002, 40, 102–114.\n[CrossRef]\n32.\nJovanovic, M.D.; Djordjevic, G.L.;\
    \ Nikolic, G.S.; Petrovic, B.D. Multichannel Media Access Control for Wireless\
    \ Sensor Networks:\nA survey. In Proceedings of the 2011 10th International Conference\
    \ on Telecommunication in Modern Satellite Cable and\nBroadcasting Services (TELSIKS),\
    \ Nis, Serbia, 5–8 October 2011; pp. 741–744. [CrossRef]\n33.\nXu, L.; O’Hare,\
    \ G.; Collier, R. A Smart and Balanced Energy-Efﬁcient Multihop Clustering Algorithm\
    \ (Smart-BEEM) for MIMO\nIoT Systems in Future Networks. Sensors 2017, 17, 1574.\n\
    34.\nFei, Z.; Li, B.; Yang, S.; Xing, C.; Chen, H.; Hanzo, L. A Survey of Multi-Objective\
    \ Optimization in Wireless Sensor Networks:\nMetrics, Algorithms, and Open Problems.\
    \ IEEE Commun. Surv. Tutor. 2017, 19, 550–586.\n35.\nMcBratney, A.O. Future Directions\
    \ of Precision Agriculture. Precis. Agric. 2005, 6, 7–23. [CrossRef]\n36.\nEffah,\
    \ E.; Thiare, O. Estimation of Optimal Number of Clusters: A New Approach to Minimizing\
    \ Intra-Cluster Communication\nCost in WSNs. Int. J. Innov. Technol. Explor. Eng.\
    \ 2018, 8, 521–524.\n37.\nAsim Zeb, A.K.M.; Islam, M.; Zareei, M.; Mamoon, I.A.;\
    \ Mansoor, N.; Baharun, S.; Katayama, Y.; Komaki, S. Clustering Analysis\nin Wireless\
    \ Sensor Networks: The Ambit of Performance Metrics and Schemes Taxonomy. Int.\
    \ J. Distrib. Sens. Netw. 2016,\n12, 4979142.\n38.\nYounis, O.; Fahmy, S. HEED:\
    \ A hybrid, energy-efﬁcient, distributed clustering approach for ad hoc sensor\
    \ networks. IEEE Trans.\nMob. Comput. 2004, 3, 660–669.\n39.\nRajaram, M.L.; Kougianos,\
    \ E.; Mohanty, S.P.; Choppali, U. Wireless Sensor Network Simulation Frameworks:\
    \ A Tutorial Review:\nMATLAB/Simulink bests the rest. IEEE Consum. Electron. Mag.\
    \ 2016, 5, 63–69. [CrossRef]\nIoT 2023, 4\n315\n40.\nGurpreet, K.; Sukhpreet,\
    \ K. Enhanced M-Gear Protocol for Lifetime Enhancement in Wireless Clustering\
    \ System. Int. J. Comput.\nAppl. 2016, 147, 30–34.\n41.\nYen, H. Optimization-based\
    \ channel constrained data aggregation routing algorithms in multi-radio wireless\
    \ sensor networks.\nSensors 2009, 9, 4766–4788. [PubMed]\n42.\nLe, T.T.T.; Moh,\
    \ S. Link Scheduling Algorithm with Interference Prediction for Multiple Mobile\
    \ WBANs. Sensors 2017, 17, 2231.\n[CrossRef]\n43.\nDarwish, I.M.; Elqafas, S.M.\
    \ Enhanced Algorithms for Fault Nodes Recovery in Wireless Sensors Network. Int.\
    \ J. Sens. Netw.\nData Commun. 2016, 6, 150.\n44.\nManisha, M.; Deepak, N. Fault\
    \ Detection in Wireless Sensor Networks. IPASJ Int. J. Comput. Sci. 2015, 3, 6–10.\n\
    45.\nBanerjee, I.; Chanak, P.; Rahaman, H.; Samanta, T. Effective fault detection\
    \ and routing scheme for wireless sensor networks.\nComput. Electr. Eng. 2014,\
    \ 40, 291–306. [CrossRef]\n46.\nSharma, P.; Kaur, I. A Comparative Study on Energy\
    \ Efﬁcient Routing Protocols in Wireless Sensor Networks. Int. J. Comput. Sci.\n\
    Issues 2015, 8, 98–106.\n47.\nFaniana, F.; Rafsanjanibc, M. Cluster-based routing\
    \ protocols in wireless sensor networks: A survey based on methodology. J.\nNetw.\
    \ Comput. Appl. 2019, 142, 111–142.\n48.\nIqbal, M.; Naeem, M.; Anpalagan, A.;\
    \ Ahmed, A.; Azam, M. Wireless Sensor Network Optimization: Multi-Objective Paradigm.\n\
    Sensors 2015, 15, 17572–17620. [PubMed]\n49.\nMamalis, B.; Gavalas, D.; Konstantopoulos,\
    \ C.; Pantziou, G. Clustering in Wireless Sensor Networks. In RFID and Sensor\
    \ Networks;\nCRC Press: Boca Raton, FL, USA, 2009; pp. 324–364.\n50.\nKalkha,\
    \ H.; Satori, H.; Satori, K. Performance Evaluation of AODV and LEACH Routing\
    \ Protocol. Adv. Inf. Technol. Theory Appl.\n2016, 1, 113–118.\n51.\nDwivedi,\
    \ A.K.; Kushwaha, S.; Vyas, O.P. Performance of Routing Protocols for Mobile Adhoc\
    \ and Wireless Sensor Networks: A\nComparative Study. Int. J. Recent Trends Eng.\
    \ 2009, 2, 101–105.\n52.\nFjellin, J.E. Medium Access Control (MAC) in WSN. Unpublished\
    \ Lecture Notes, 12 October 2018; pp. 1–27. Available\nonline: https://www.uio.no/studier/emner/matnat/iﬁ/nedlagte-emner/INF5910CPS/h11/undervisningsmateriale/201111\n\
    01_mac_in_wsn.pdf (accessed on 16 July 2023).\n53.\nYe, W.; Heidemann, J.; Estrin,\
    \ D. Medium access control with coordinated adaptive sleeping for wireless sensor\
    \ networks.\nIEEE/ACM Trans. Netw. 2004, 12, 493–506. [CrossRef]\n54.\nKabara,\
    \ J.; Calle, M. MAC Protocols Used by Wireless Sensor Networks and a General Method\
    \ of Performance Evaluation. Int. J.\nDistrib. Sens. Netw. 2012, 8, 834784. [CrossRef]\n\
    55.\nBuettner, M.; Yee, G.V.; Anderson, E.; Han, R. X-MAC: A Short Preamble MAC\
    \ Protocol for Duty-Cycled Wireless Sensor\nNetworks. 2006. pp. 307–320. Available\
    \ online: http://portal.acm.org/citation.cfm?id=1182807.1182838 (accessed on 16\n\
    July 2023).\n56.\nKuntz, R.; Gallais, A.; Noel, T. Auto-adaptive MAC for energy\
    \ efﬁcient burst transmissions in wireless sensor networks.\nIn Proceedings of\
    \ the 2011 IEEE Wireless Communications and Networking Conference, Cancun, Mexico,\
    \ 28–31 March 2011;\npp. 233–238.\n57.\nPolastre, J.; Hill, J.; Culler, D. Versatile\
    \ low power media access for wireless sensor networks. In Proceedings of the Second\n\
    International Conference on Embedded Networked Sensor Systems(SenSys’04), Baltimore,\
    \ MD, USA, 3–5 November 2004;\npp. 95–107.\n58.\nErgen, S.C.; Varaiya, P. PEDAMACS:\
    \ Power efﬁcient and delay aware medium access protocol for sensor networks. IEEE\
    \ Trans.\nMob. Comput. 2006, 5, 920–930. [CrossRef]\n59.\nTang, L.; Sun, Y.; Gurewitz,\
    \ O.; Johnson, D.B. PWMAC: An energy-efﬁcient predictive-wakeup MAC protocol for\
    \ wireless sensor\nnetworks. In Proceedings of the 2011 IEEE INFOCOM, Shanghai,\
    \ China, 10–15 April 2011; pp. 1305–1313.\n60.\nGautam, G.C.; Chand, N. A Novel\
    \ Cluster Based Time Synchronization Technique for Wireless Sensor Networks. Wirel.\
    \ Sens.\nNetw. 2017, 9, 145–165. [CrossRef]\n61.\nHeinzelman, W.B.; Chandrakasan,\
    \ A.P.; Balakrishnan, H. An application-speciﬁc protocol architecture for wireless\
    \ microsensor\nnetworks. IEEE Trans. Wirel. Commun. 2002, 1, 660–670. [CrossRef]\n\
    62.\nBen-Othman, J.; Mokdad, L.; Yahya, B. An energy efﬁcient priority-based QoS\
    \ MAC protocol for wireless sensor networks.\nIn Proceedings of the 2011 IEEE\
    \ International Conference on Communications (ICC), Kyoto, Japan, 5–9 June 2011;\
    \ pp. 1–6.\n63.\nKumar, A. WiseMAC Protocol for Wireless Sensor Network-An Energy-Efﬁcient\
    \ Protocol. Master’s Thesis, National Institute of\nTechnology, Rourkela, India,\
    \ 2014; pp. 1–63.\n64.\nKarki, V.S.; Udupi, G.R.; Gadgil, A. Advanced WiseMAC\
    \ Protocol for Wireless Sensor Network. Int. Res. J. Eng. Technol. 2015, 2,\n\
    771–778.\n65.\nPak, W. Ultra-low-power media access control protocol based on\
    \ clock drift characteristics in wireless sensor networks. Int. J.\nDistrib. Sens.\
    \ Netw. 2017, 13, 1550147717722155. [CrossRef]\n66.\nTang, L.; Sun, Y.; Gurewitz,\
    \ O.; Johnson, D.B. EM-MAC: A dynamic multichannel energy-efﬁcient MAC protocol\
    \ for wireless\nsensor networks. In Proceedings of the Twelfth ACM International\
    \ Symposium on Mobile Ad Hoc Networking and Computing,\nParis, France, 17–19 May\
    \ 2011; p. 23.\nIoT 2023, 4\n316\n67.\nLim, J.B.; Jang, B.; Sichitiu, M.L. MCAS-MAC:\
    \ A Multichannel asynchronous scheduled MAC protocol for Wireless Sensor\nNetworks.\
    \ Comput. Commun. 2014, 56, 98–107.\n68.\nIrandegani, M.; Bagherizadeh, M. Designing\
    \ an asynchronous multi-channel media access control protocol based on service\n\
    quality for wireless sensor networks. Int. J. Adv. Comput. Res. 2017, 7, 190–199.\
    \ [CrossRef]\n69.\nvan Hoesel, L.F.W.; Havinga, P.J.M. A Lightweight Medium Access\
    \ Protocol (LMAC) for Wireless Sensor Networks: Reducing\nPreamble Transmissions\
    \ and Transceiver State Switches. In Proceedings of the 1st International Workshop\
    \ on Networked Sensing\nSystems, Tokyo, Japan, 1–6 January 2004.\n70.\nIncel,\
    \ O.D. Multi-Channel Wireless Sensor Networks: Protocols, Design And Evaluation.\
    \ Ph.D. Dissertation, University of\nTwente, Enschede, The Netherlands, 2009;\
    \ pp. 1–162.\n71.\nZhang, Z.; Mehmood, A.; Shu, L.; Huo, Z.; Zhang, Y.; Mukherjee,\
    \ M. A Survey on Fault Diagnosis in Wireless Sensor Networks.\nIEEE Access 2018,\
    \ 6, 11349–11364. [CrossRef]\n72.\nParhami, B. Fault-Tolerant Computing; Lecture\
    \ Notes; Electrical and Computer Engineering Department, University of California:\n\
    Santa Barbara, CA, USA, 2018; pp. 1–2.\n73.\nRaghunath, K.M.K.; Rengarajan, N.\
    \ Investigation of Faults, Errors and Failures in Wireless Sensor Network: A Systematical\n\
    Survey. Int. J. Adv. Comput. Res. 2013, 3, 2249–7277.\n74.\nJiang, P. A New Method\
    \ for Node Fault Detection in Wireless Sensor Networks. Sensors 2009, 9, 1282–1294.\
    \ [CrossRef]\n75.\nKoushanfar, K.; Potkonjak, M.; Sangiovanni-Vincentell, A. Fault\
    \ tolerance techniques for wireless ad hoc sensor networks. Proc.\nIEEE Sens.\
    \ 2002, 2, 1491–1496.\n76.\nOyiza, O.S. Implementation of New Fault Tolerance\
    \ Solution in Wireless Sensor Networks in A Multi-Channel Context. Master’s\n\
    Thesis, Department of Computer Science, African University of Science and Technology,\
    \ Galadima, Nigeria, 2016; pp. 1–36.\n77.\nBhattacharya, R.; Chhanda, R. Wireless\
    \ sensor networks—A study of fault detection and recovery based on OSI layers.\
    \ Int. J.\nConceptions Comput. Inf. Technol. 2013, 1, 7–14.\n78.\nYu, M.; Mokhtar,\
    \ H.; Merabti, M. Self-Managed Fault Management in Wireless Sensor Networks. In\
    \ Proceedings of the Second\nInternational Conference on Mobile Ubiquitous Computing,\
    \ Systems, Services and Technologies (UBICOMM’08), Valencia, Spain,\n29 September–4\
    \ October 2008; pp. 13–18.\n79.\nPanda, M.; Khilar, P.M. Distributed Byzantine\
    \ Fault detection technique in wireless sensor networks based on hypothesis testing.\n\
    Comput. Electr. Eng. 2015, 48, 270–285. [CrossRef]\n80.\nParadis, L.; Han, Q.\
    \ A Survey of Fault Management in Wireless Sensor Networks. J. Netw. Syst. Manag.\
    \ 2007, 15, 171–190.\n[CrossRef]\n81.\nDing, M.; Chen, D.; Xing, K.; Cheng, X.\
    \ Localized fault-tolerant event boundary detection in sensor networks. In Proceedings\
    \ of\nthe 24th Annual Joint Conference of the IEEE Computer and Communications\
    \ Societies, Miami, FL, USA, 13–17 March 2005;\nVolume 2, pp. 902–913.\n82.\n\
    Lee, W.L.; Datta, A.; Cardell-Oliver, R. Network Management in Wireless Sensor\
    \ Networks. In Handbook of Mobile Ad Hoc and\nPervasive Communication; American\
    \ Scientiﬁc Publishers: Valencia, CA, USA, 2006; pp. 1–201.\n83.\nZhang, Y.; Dragoni,\
    \ N.; Wang, J. A framework and classiﬁcation for fault detection approaches in\
    \ Wireless Sensor Networks with\nan energy efﬁciency perspective. Int. J. Distrib.\
    \ Sens. Netw. 2015, 2, 678029.\n84.\nAsim, M.; Mokhtar, H.; Merabti, M. self-managing\
    \ fault management mechanism for wireless sensor network. Int. J. Wirel. Mob.\n\
    Netw. 2010, 2, 184–197. [CrossRef]\n85.\nHeena, H.; Kapoor, S. Survey of Fault\
    \ Detection Algorithm in WSN. SSRG Int. J. Comput. Sci. Eng. 2015, 5, 78–81.\n\
    86.\nKaur, E.J.; Kaur, E.P. A Survey on Fault Detection and Recovery Techniques\
    \ in Wireless Sensor Networks. Int. J. Eng. Res. Gen.\nSci. 2015, 3, 638–642.\n\
    87.\nZhang, Z.; Chong, E.K.P.; Pezeshki, A.; Moran, W.; Howard, S.D. Detection\
    \ performance in balanced binary relay trees with node\nand link failures. IEEE\
    \ Trans. Signal Process. May 2013, 61, 2165–2177. [CrossRef]\n88.\nHo, J.; Tay,\
    \ W.P.; Quek, T.Q.S.; Chong, E.K.P. Robust decentralized detection and social\
    \ learning in tandem networks. IEEE Trans.\nSignal Process. 2015, 63, 5019–5032.\
    \ [CrossRef]\n89.\nNardelli, P.H.J.; de Lima, C.H.M.; Alves, H.; Cardieri, P.;\
    \ Latva-aho, M. Throughput analysis of cognitive wireless networks with\nPoisson\
    \ distributed nodes based on location information. Ad Hoc Netw. 2015, 33, 1–18.\
    \ [CrossRef]\n90.\nUmebayashi, K.; Lehtomaki, J.J.; Yazawa, T.; Suzuki, Y. Efﬁcient\
    \ Decision fusion for cooperative spectrum sensing based on\nOR-rule. IEEE Trans.\
    \ Wireless Commun. 2012, 11, 2585–2595. [CrossRef]\n91.\nLuo, X.; Dong, M.; Huang,\
    \ Y. On distributed fault-tolerant detection in wireless sensor networks. IEEE\
    \ Trans. Comput. 2006, 55,\n58–70. [CrossRef]\n92.\nKakamanshadi, G.; Gupta, S.;\
    \ Singh, S. A survey on fault tolerance techniques in Wireless Sensor Networks.\
    \ In Proceedings of\nthe 2015 International Conference on Green Computing and\
    \ Internet of Things (ICGCIoT), Greater Noida, India, 8–10 October\n2015; pp.\
    \ 168–173. [CrossRef]\n93.\nPedro, H.; Nardelli, J.; Ramezanipour, I.; Alves,\
    \ H.; de Lima, H.M.C.; Latva-aho, M. Average Error Probability in Wireless Sensor\n\
    Networks With Imperfect Sensing and Communication for Different Decision Rules.\
    \ arXiv 2016, arXiv:1508.02253v2.\n94.\nLau, B.C.; Ma, E.W.; Chow, T.W. Probabilistic\
    \ fault detector for wireless sensor network. Expert Syst. Appl. 2014, 41, 3703–3711.\n\
    [CrossRef]\nIoT 2023, 4\n317\n95.\nTang, P.; Chow, T.W. Wireless sensor-networks\
    \ conditions monitoring and fault diagnosis using neighborhood hidden conditional\n\
    random ﬁeld. IEEE Trans. Ind. Inform. 2016, 12, 933–940. [CrossRef]\n96.\nDhal,\
    \ R.; Torres, J.A.; Roy, S. Detecting link failures in complex network processes\
    \ using remote monitoring. Phys. Stat. Mech.\nAppl. 2015, 437, 36–54. [CrossRef]\n\
    97.\nTitouna, C.; Ari, A.A.A.; Moumen, H. FDRA: Fault Detection and Recovery Algorithm\
    \ for Wireless Sensor Networks. In Proceed-\nings of the Mobile Web and Intelligent\
    \ Information Systems, 15th International Conference, MobiWIS 2018, Barcelona,\
    \ Spain, 6–8\nAugust 2018; Springer: Cham, Switzerland, 2018; pp. 72–85.\n98.\n\
    Krishnamachari, B.; Iyengar, S. Distributed Bayesian algorithms for fault-tolerant\
    \ event region detection in wireless sensor\nnetworks. IEEE Trans. Comput. 2004,\
    \ 53, 1. [CrossRef]\n99.\nChen, Q.; Lam, K.-Y.; Fan, P. Comments on ”Distributed\
    \ Bayesian algorithms for fault-tolerant event region detection in wireless\n\
    sensor networks”. IEEE Trans. Comput. 2005, 54, 1182–1183. [CrossRef]\n100. Ould-Ahmed-Vall,\
    \ E.; Ferri, B.H.; Riley, G.F. Distributed Fault-Tolerance for Event Detection\
    \ Using Heterogeneous Wireless\nSensor Networks. IEEE Trans. Mob. Comput. 2012,\
    \ 11, 1994–2007. [CrossRef]\n101. Lee, M.; Choi, Y. Fault detection of wireless\
    \ sensor networks. Comput. Commun. 2008, 31, 3469–3475.\n102. Akbari, A.; Arash,\
    \ A.D.; Khademzadeh, A.; Beikmahdavi, N. Fault Detection and Recovery in wireless\
    \ Sensor Network Using\nClustering. Proc. Int. J. Wirel. Mob. Netw. 2011, 3, 130–137.\n\
    103. Chen, J.; Kher, S.; Somani, A. Distributed Fault Detection of Wireless Sensor\
    \ Networks. In Proceedings of the 2006 Workshop on\nDependability Issues in Wireless\
    \ ad Hoc Networks and Sensor Networks, Los Angeles, CA, USA, 26 September 2006;\
    \ pp. 1–11.\n104. Nandi, M.; Dewanji, A.; Roy, B.; Sarkar, S. Model Selection\
    \ Approach for Distributed Fault Detection in Wireless Sensor Networks.\nIEEE\
    \ Trans. Comput. 2014, 55, 1–12.\n105. Guclua, S.O.; Ozcelebia, T.; Lukkiena,\
    \ J. Distributed Fault Detection in Smart Spaces Based on Trust Management. Procedia\n\
    Comput. Sci. 2016, 83, 66–73.\n106. Ji, S.; Shen-fang, Y.; Ma, T.; Tan, C. Distributed\
    \ Fault Detection for Wireless Sensor Based on Weighted Average. In Proceedings\
    \ of\nthe 2010 Second International Conference on Networks Security, Wireless\
    \ Communications and Trusted Computing, Wuhan,\nChina, 24–25 April 2010; pp. 57–60.\n\
    107. DePaola, A.; Gaglio, S.; Re, G.; Milazzo, F.; Ortolani, M. Adaptive distributed\
    \ outlier detection for wsns. IEEE Trans. Cybern. 2015,\n45, 888–899.\n108. Li,\
    \ W.; Bassi, F.; Dardari, D.; Kieffer, M.; Pasolini, G. Low-complexity distributed\
    \ fault detection for wireless sensor networks. In\nProceedings of the 2015 IEEE\
    \ International Conference on Communications (ICC), London, UK, 8–12 June 2015;\
    \ pp. 3469–3475.\n109. Taleb, A.A.; Mathew, J.; Kocak, T.; Pradhan, D.K. A Novel\
    \ Fault Diagnosis Technique in Wireless Sensor Networks. Int. J. Adv.\nNetw. Serv.\
    \ 2009, 2, 230–240.\n110. Myoupo, J.F.; Nana, B.P.; Tchendji, V.K. Fault-tolerant\
    \ and energy-efﬁcient routing protocols for a virtual three-dimensional\nwireless\
    \ sensor network. Comput. Electr. Eng. 2018, 72, 949–964.\n111. Titouna, C.; Gueroui,\
    \ M.; Aliouat, M.; Ari, A.A.A.; Adouane, A. Distributed fault-tolerant algorithm\
    \ for wireless sensor networks.\nInt. J. Commun. Netw. Inf. Secur. 2017, 9, 241–246.\n\
    112. Furquim, G.; Jalali, R.; Pessin, G.; Pazzi, R.W.; Ueyama, J. How to improve\
    \ fault tolerance in disaster predictions: A case study\nabout ﬂash ﬂoods using\
    \ IoT, ML and real data. Sensors 2018, 18, 907.\n113. Titouna, C.; Aliouat, M.;\
    \ Gueroui, M. FDS: Fault Detection Scheme for Wireless Sensor Networks. Wirel.\
    \ Pers. Commun. 2016, 86,\n549–562. [CrossRef]\n114. Tosic, T.; Thomos, N.; Frossard,\
    \ P. Distributed sensor failure detection in sensor networks. Signal Process.\
    \ 2017, 93, 399–410.\n[CrossRef]\n115. Li, W.; Bassi, F.; Dardari, D.; Kieffer,\
    \ M.; Pasolini, G. Defective Sensor Identiﬁcation for WSNs Involving Generic Local\
    \ Outlier\nDetection Tests. IEEE Trans. Signal Inf. Process. Over Netw. 2016,\
    \ 2, 29–48. [CrossRef]\n116. Viswanathan, R.; Varshney, P.K. Distributed detection\
    \ with multiple sensors—Part I: Fundamentals. Proc. IEEE 1997, 85, 54–63.\n[CrossRef]\n\
    117. Bredin, J.; Demaine, E.; Hajiaghayi, M.; Rus, D. Deploying sensor networks\
    \ with guaranteed capacity and fault tolerance.\nIn Proceedings of the MobiHoc’05,\
    \ Urbana-Champaign, IL, USA, 25–27 May 2005; pp. 309–319.\n118. Smaragdakis, G.;\
    \ Matta, I.; Bestavros, A. SEP: A Stable Election Protocol for Clustered Heterogeneous\
    \ Wireless Sensor Networks.\nOpenBU, 2004. Available online: https://open.bu.edu/handle/2144/1548\
    \ (accessed on 16 July 2023).\n119. Zhixiang, D.; Bensheng, Q. Three-layered routing\
    \ protocol for WSN based on LEACH algorithm. In Proceedings of the 2007\nIET Conference\
    \ on Wireless, Mobile and Sensor Networks (CCWMSN07), Shanghai, China, 12–14 December\
    \ 2007; pp. 72–75.\n[CrossRef]\n120. Liu, T.; Li, F. Power-efﬁcient clustering\
    \ routing protocol based on applications in wireless sensor network. In Proceedings\
    \ of\nthe 2009 5th International Conference on Wireless Communications, Networking\
    \ and Mobile Computing, Beijing, China, 24–26\nSeptember 2009.\n121. Kang, S.;\
    \ Nguyen, T. Distance based thresholds for cluster head selection in wireless\
    \ sensor networks. IEEE Commun. Lett. 2012,\n16, 1396–1399. [CrossRef]\n122. Rajeev,\
    \ K.; Rajdeep, K. Evaluating the Performance of DEEC variants. Int. J. Comput.\
    \ Appl. 2014, 97, 9–16.\nIoT 2023, 4\n318\n123. Sabet, M.; Naji, H. A decentralized\
    \ energy-efﬁcient hierarchical cluster-based routing algorithm for WSNs. AEU Int.\
    \ J. Electron.\nCommun. 2015, 69, 790–799. [CrossRef]\n124. Yi, D.; Yang, H. HEER—A\
    \ delay-aware and energy-efﬁcient routing protocol for WSNs. Comput. Netw. 2016,\
    \ 104, 155–173.\n[CrossRef]\n125. Cengiz, K.; Dag, T. Energy aware multi-hop routing\
    \ protocol for WSNs. IEEE Access 2018, 6, 2622–2633. [CrossRef]\n126. Sasikumar,\
    \ P.; Khara, S. K-Means Clustering In Wireless Sensor Networks. In Proceedings\
    \ of the 2012 Fourth International\nConference on Computational Intelligence and\
    \ Communication Networks, Mathura, India, 3–5 November 2012; pp. 140–144.\n[CrossRef]\n\
    127. Hassana, M.E.; Ziedanb, N.I. A Mobile BS and Multi-Hop LEACH-C Extension\
    \ for WSNs. Am. Sci. Res. J. Eng. Technol. Sci. 2017,\n36, 198–210.\n128. Farooq,\
    \ M.O.; Dogar, A.B.; Shah, G.A. MR-LEACH: Multi-hop routing with low energy adaptive\
    \ clustering hierarchy. In Pro-\nceedings of the 2010 Fourth International Conference\
    \ on Sensor Technologies and Applications, Venice, Italy, 18–25 July 2010;\npp.\
    \ 262–268.\n129. Al-Sodairi, S.; Ounia, K. Reliable and energy-efﬁcient multi-hop\
    \ LEACH-based clustering protocol for WSNs. Sustain. Comput.\nInform. Syst. 2018,\
    \ 20, 1–13.\n130. Amiri, A. Extending Network Lifetime of Wireless Sensor Networks.\
    \ Int. J. Comput. Netw. Commun. 2015, 7, 1–17. [CrossRef]\n131. Shanthi, G.; Sundarambal,\
    \ M. Investigation of Multi Hop Sensor Node Data Aggregation in Building Management\
    \ System. Res. J.\nBiotech 2017, 324–330.\n132. Akbar, M.; Javaid, N.; Imran,\
    \ M.; Rao, A.; Younis, M.S.; Niaz, I.A. A multi-hop angular routing protocol for\
    \ wireless sensor\nnetworks. Int. J. Distrib. Sens. Netw. 2016, 12, 1–7. [CrossRef]\n\
    133. Sert, S.A.; Alchihabi, A.; Yazici, A. A Two-Tier Distributed Fuzzy Logic\
    \ Based Protocol for Efﬁcient Data Aggregation in Multihop\nWSNs. IEEE Trans.\
    \ Fuzzy Syst. 2018, 26, 3615–3629. [CrossRef]\n134. Sert, S.A.; Yazici, A. Optimizing\
    \ the performance of rule-based fuzzy routing algorithms in WSNs. In Proceedings\
    \ of the 2019\nIEEE International Conference on Fuzzy Systems (FUZZ-IEEE), New\
    \ Orleans, LA, USA, 23–26 June 2019; pp. 1–6.\n135. Mohrehkesh, S.; Weigle, M.\
    \ Optimizing Communication Energy Consumption in Perpetual Wireless Nanosensor\
    \ Networks.\nIn Proceedings of the IEEE Globecom, Atlanta, GA, USA, 9–13 December\
    \ 2013; pp. 545–550.\n136. Basagni, S. Distributed Clustering for Ad Hoc Networks.\
    \ 1999, pp. 310–315. Available online: https://ieeexplore.ieee.org/\ndocument/778957\
    \ (accessed on 16 July 2023).\n137. Devi, G.Y.D. Clustering Algorithms In Wireless\
    \ Sensor Networks—A Survey. Int. J. Electr. Electron. Comput. Syst. 2013, 1, 1–9.\n\
    138. Tandon, R.; Dey, B.; Nandi, S. Weight Based Clustering in Wireless Sensor\
    \ Networks. In Proceedings of the 2013 National\nConference on Communications\
    \ (NCC), New Delhi, India, 1–3 February 2013; pp. 1–5.\n139. Ducrocq, T.; Mitton,\
    \ N.; Hauspie, M. Energy-based Clustering for Wireless Sensor Network Lifetime\
    \ Optimization. In Proceedings\nof the WCNC—Wireless Communications and Networking\
    \ Conference, Shanghai, China, 7–10 April 2013.\n140. Wan, R.; Xiong, N.; Loc,\
    \ N.T. An energy-efﬁcient sleep scheduling mechanism with similarity measure for\
    \ WSNs. Hum. Cent.\nComput. Inf. Sci. 2018, 8, 1–6. [CrossRef]\n141. Nanda, S.;\
    \ Panda, G. Automatic clustering algorithm based on multi-objective Immunized\
    \ PSO to classify actions of 3D human\nmodels. Eng. Appl. Artif. Intell. 2013,\
    \ 26, 1429–1441. [CrossRef]\nDisclaimer/Publisher’s Note: The statements, opinions\
    \ and data contained in all publications are solely those of the individual\n\
    author(s) and contributor(s) and not of MDPI and/or the editor(s). MDPI and/or\
    \ the editor(s) disclaim responsibility for any injury to\npeople or property\
    \ resulting from any ideas, methods, instructions or products referred to in the\
    \ content.\n"
  inline_citation: '>'
  journal: Iot
  limitations: '>'
  pdf_link: https://www.mdpi.com/2624-831X/4/3/14/pdf?version=1690458486
  publication_year: 2023
  relevance_score1: 0
  relevance_score2: 0
  title: 'A Tutorial on Agricultural IoT: Fundamental Concepts, Architectures, Routing,
    and Optimization'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.20944/preprints202308.0451.v1
  analysis: '>'
  authors:
  - Abdellatif Soussi
  - Enrico Zero
  - Ahmed Ouammi
  - Driss Zejli
  - Said Zahmoun
  - Roberto Sacile
  citation_count: 0
  full_citation: '>'
  full_text: '>

    This website uses cookies We use cookies to personalise content and ads, to provide
    social media features and to analyse our traffic. We also share information about
    your use of our site with our social media, advertising and analytics partners
    who may combine it with other information that you’ve provided to them or that
    they’ve collected from your use of their services. Consent Selection Necessary
    Preferences Statistics Marketing Show details             Deny Allow selection
    Allow all Instructions for Authors Awards About FAQ Submit Log in/Register preprints.org
    > engineering > energy and fuel technology > doi: 10.20944/preprints202308.0451.v1
    Preprint Review Version 1 Preserved in Portico This version is not peer-reviewed
    Greenhouse Towards Near Zero Energy Consumption: Challenges, Opportunities, and
    Future Directions Abdellatif Soussi , Enrico Zero , Ahmed Ouammi , Driss Zejli
    , Said Zahmoun , Roberto Sacile * Version 1 : Received: 3 August 2023 / Approved:
    4 August 2023 / Online: 4 August 2023 (19:16:18 CEST) How to cite: Soussi, A.;
    Zero, E.; Ouammi, A.; Zejli, D.; Zahmoun, S.; Sacile, R. Greenhouse Towards Near
    Zero Energy Consumption: Challenges, Opportunities, and Future Directions. Preprints
    2023, 2023080451. https://doi.org/10.20944/preprints202308.0451.v1 Abstract The
    global agricultural sector is increasingly pressured to adopt sustainable practices
    and reduce its environmental impact. In this context, greenhouses play a crucial
    role in enabling year-round crop production, ensuring food security, and minimizing
    reliance on traditional open-field farming. However, the energy consumption associated
    with greenhouse operations poses a significant challenge to achieving sustainability
    goals. As a result, there is a growing emphasis on transitioning greenhouses towards
    near-zero energy consumption. Near-zero energy consumption in greenhouses refers
    to the ambitious objective of minimizing energy usage to the greatest extent possible
    while maintaining optimal growing conditions for crops. This goal encompasses
    reducing energy consumption for heating, cooling, lighting, and other operational
    needs, as well as exploring renewable energy sources to power greenhouse operations.
    This review article offers a comprehensive overview of greenhouse energy consumption,
    with the main goal of analyzing the present situation, identifying key challenges,
    exploring potential opportunities, and proposing future perspectives for decreasing
    energy usage in greenhouse environments. As the focus on sustainable agricultural
    practices grows, the need to reduce energy consumption in greenhouses becomes
    increasingly important. The review critically examines current technological models
    and strategies applied in smart greenhouse applications, as well as the monitoring
    of microclimatic conditions inside the greenhouse, encompassing factors such as
    temperature, humidity, CO2 levels, soil quality, and crop cultivation. Moreover,
    it aims to present existing literature that investigates the advancement of greenhouses
    toward achieving significant reductions in energy consumption. Keywords Smart
    Greenhouse; Optimization; Control; Zero energy Subject Engineering, Energy and
    Fuel Technology Copyright: This is an open access article distributed under the
    Creative Commons Attribution License which permits unrestricted use, distribution,
    and reproduction in any medium, provided the original work is properly cited.
    Download PDF Comments (0) We encourage comments and feedback from a broad range
    of readers. See criteria for comments and our Diversity statement. Leave a public
    comment Send a private comment to the author(s) * All users must log in before
    leaving a comment Views 150 Downloads 327 Comments 0 Get PDF Cite Share 0 Bookmark
    BibSonomy Mendeley Reddit Delicious Alerts Notify me about updates to this article
    or when a peer-reviewed version is published. Preprints.org is a free preprint
    server subsidized by MDPI in Basel, Switzerland. Contact us RSS MDPI Initiatives
    SciProfiles Sciforum Encyclopedia MDPI Books Scilit Proceedings JAMS Important
    links How it Works Advisory Board FAQ Friendly Journals Instructions for Authors
    About Statistics Subscribe Choose the area that interest you and we will send
    you notifications of new preprints at your preferred frequency. Subscribe © 2024
    MDPI (Basel, Switzerland) unless otherwise stated Disclaimer Privacy Policy Terms
    of Use  Feedback'
  inline_citation: '>'
  journal: ''
  limitations: '>'
  pdf_link: null
  publication_year: 2023
  relevance_score1: 0
  relevance_score2: 0
  title: 'Greenhouse Towards Near Zero Energy Consumption: Challenges, Opportunities,
    and Future Directions'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.1109/chilecon54041.2021.9703041
  analysis: '>'
  authors:
  - Gastón Lefranc
  - Mario Andrés Gómez Fernández
  - Ramón Pino Pérez
  - Karina A. Barbosa
  - F. Rotaru
  - Gheorghe Filip
  - Jorge Rodas
  - Rafael Sotelo
  - Héctor Chávez
  - Gastón Lefranc
  - Gastón Lefranc
  - Carlos Muñoz
  - Cristian Duran
  - Enrique Espina
  - Félix Rojas
  - Gastón Lefranc
  - José Ricardo Pérez-Correa
  - Manuel A. Duarte‐Mermoud
  - María del Carmen González Fernández
  - Wesley Peres
  - Salgueiro Yamisleydi
  - Alberto Sicilia
  - Abualkasim Rodríguez-Mata
  - Quispe Alcides
  - Alex Sanca
  - Navas Dario
  - Adriana Rodrigues Fonseca
  - Firoozabadi Dehghan
  - Felipe Andrés
  - Andrés Arroyo
  - Arantxa Orozco
  - Antonio Rienzo
  - Arturo Villalon
  - Anthony Gonzalez
  - Arturo Letelier
  - Belén Padilla
  - Hart El
  - Benites Peralta
  - Bruno Santos Ferreira
  - Vânia Camilo
  - Carlos del Pozo
  - Carlos R. Baier
  - Cecilia Llamosas
  - Claudio Taipe
  - Carolina Alarcón
  - Cristian Becker
  - Cristián Ahumada
  - Caterina Pesce
  - Cynthia Torrealba
  - Daniel I. Pineda
  - Daniel Alencar da Costa
  - Daniel Sbárbaro
  - Diego González Carrasco
  - Serra Valdés
  - Diego Adamatti
  - Diego Altamirano
  - D.S. Pesantez Coronel
  - Diego Fuentealba
  - A Barbosa
  - Karina Abdo
  - Safaa Aboukheir
  - Hanna Aguilera
  - Ana Aguilera
  - Carlos Agüero
  - Juan L. Ahumada
  - Cristián Álvarez
  - P Michelle Albornoz
  - Miguel Ángel Martínez Alfonso
  - Ricardo Amarilla
  - Raúl Amezcua-L
  - Erick Anello
  - María Jesús Espuny i Tomás
  - M Aravena
  - Barbara Aravena
  - J. Fernando Arévalo
  - M.G. Vázquez Armenta
  - Santiago Aros
  - Nelson Arredondo
  - Teresa Patricia Feria Arroyo
  - Richard Arrua
  - Silvia Arzamendia
  - Mario Arévalo
  - Mario Asto-Aguilar
  - Diana E. Ayala
  - Magno Azcarate
  - Rodrigo Azócar
  - J Meza
  - C A Costales Badillo
  - Diego Baeza
  - E.J. Baeza
  - Gerold Baier
  - Carlos Bancila
  - Daniel Banguera
  - Leonardo Barberia
  - Jorge Luís Victória Barbosa
  - Karen Valdes de la Barra
  - Pabla Barzola
  - Jhonny Bautista-López
  - Aiskel Belen-Barreto
  - Jamil Belupú
  citation_count: 0
  full_citation: '>'
  full_text: '>

    This website utilizes technologies such as cookies to enable essential site functionality,
    as well as for analytics, personalization, and targeted advertising purposes.
    To learn more, view the following link: Privacy Policy IEEE.org IEEE Xplore IEEE
    SA IEEE Spectrum More Sites Donate Cart Create Account Personal Sign In Browse
    My Settings Help Access provided by: University of Nebraska - Lincoln Sign Out
    All Books Conferences Courses Journals & Magazines Standards Authors Citations
    ADVANCED SEARCH Conferences >2021 IEEE CHILEAN Conference ... Program Publisher:
    IEEE Cite This PDF 68 Full Text Views Abstract Metrics Abstract: Provides a schedule
    of conference events and a listing of which papers were presented in each session.
    Published in: 2021 IEEE CHILEAN Conference on Electrical, Electronics Engineering,
    Information and Communication Technologies (CHILECON) Date of Conference: 06-09
    December 2021 Date Added to IEEE Xplore: 11 February 2022 ISBN Information: DOI:
    10.1109/CHILECON54041.2021.9703041 Publisher: IEEE Conference Location: Valparaíso,
    Chile Metrics More Like This Decoding by linear programming IEEE Transactions
    on Information Theory Published: 2005 Program Slicing IEEE Transactions on Software
    Engineering Published: 1984 Show More IEEE Personal Account CHANGE USERNAME/PASSWORD
    Purchase Details PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS Profile Information
    COMMUNICATIONS PREFERENCES PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help?
    US & CANADA: +1 800 678 4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow
    About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination
    Policy | IEEE Ethics Reporting | Sitemap | IEEE Privacy Policy A not-for-profit
    organization, IEEE is the world''s largest technical professional organization
    dedicated to advancing technology for the benefit of humanity. © Copyright 2024
    IEEE - All rights reserved.'
  inline_citation: '>'
  journal: 2021 IEEE CHILEAN Conference on Electrical, Electronics Engineering, Information
    and Communication Technologies (CHILECON)
  limitations: '>'
  pdf_link: https://ieeexplore.ieee.org/ielx7/9702895/9702885/09703041.pdf
  publication_year: 2021
  relevance_score1: 0
  relevance_score2: 0
  title: Program
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- DOI: https://doi.org/10.7190/shu-thesis-24182
  analysis: '>'
  authors:
  - Alireza Janani
  citation_count: 0
  full_citation: '>'
  full_text: ">\nInvestigation into Swarm-based Cooperative Behaviour in Execution\
    \ of Open Field \nAgricultural Tasks\nJANANI, Alireza\nAvailable from the Sheffield\
    \ Hallam University Research Archive (SHURA) at:\nhttp://shura.shu.ac.uk/24182/\n\
    A Sheffield Hallam University thesis\nThis thesis is protected by copyright which\
    \ belongs to the author.    \nThe content must not be changed in any way or sold\
    \ commercially in any format or medium \nwithout the formal permission of the\
    \ author.    \nWhen referring to this work, full bibliographic details including\
    \ the author, title, awarding \ninstitution and date of the thesis must be given.\n\
    Please visit http://shura.shu.ac.uk/24182/ and http://shura.shu.ac.uk/information.html\
    \ for \nfurther details about copyright and re-use permissions.\nInvestigation\
    \ into Swarm-based Cooperative Behaviour in Execution of\nOpen Field Agricultural\
    \ Tasks\nAlireza Janani\nA doctoral project report submitted in partial fulﬁlment\
    \ of the requirements of\nSheﬃeld Hallam University\nfor the degree of Doctor\
    \ of Professional Studies Doctor of Philosophy\nSheﬃeld Hallam Univeristy\nMaterials\
    \ and Engineering Research Institute\nUK\nMarch 2018\nAbstract\nBecause of the\
    \ signiﬁcant drop in the number of farmers and increase in the earth\npopulation,\
    \ the use of autonomous farming units including unmanned tractors is be-\ncoming\
    \ more and more popular. However, relying on a single autonomous farming\nunit\
    \ to carry out the entire task on a large ﬁeld is ineﬃcient. Using multiple au-\n\
    tonomous tractors bring more eﬃciency, however, without cooperation this attempt\n\
    will fail (Mataric et al., 1995). This cooperation can be achieved by an appropriate\n\
    task allocation and coordination mechanism between the participating units. The\n\
    current trend in this ﬁeld is to use direct forms of communication in any form\
    \ of\ndirectional or broadcasting meaningful messages among the group. The messages\n\
    assist the group to identify the state of the task, assigned workload, collision\
    \ and\ncongestion avoidance, and etc. These forms of approaches are fast and eﬃcient\
    \ when\nunits are within the communicating signal range.\nIn this thesis, we aim\
    \ to investigate the feasibility of cooperative execution of open\nﬁeld farming\
    \ task including spraying and ploughing while inter-team interaction\nis other\
    \ than direct communication methods. For every task, an algorithm is sug-\ngested\
    \ and an appropriate mathematical model is presented. Then, using ROS Stage\n\
    simulation environment, each algorithm is implemented and multiple tests are con-\n\
    ducted. Finally, the simulation results and the correspondent mathematical results\n\
    are compared and appropriate modiﬁcations are suggested.\nCandidate’s Statement\n\
    I declare that this work has been conducted in accordance with the regulations\
    \ of\nSheﬃeld Hallam University and is the author’s own work apart from where\
    \ indicated\nby speciﬁc reference to other sources. The work has not been submitted\
    \ as part of\nany other award or presented to any other institution.\nAlireza\
    \ Janani 20/01/2018.\nAcknowledgement\nI would like to, ﬁrstly, thank my wife\
    \ who supported me through thick and thin in\nthis journey. I couldn’t complete\
    \ this program without her support and patience.\nMy gratitude goes to my Director\
    \ of Studies, Prof. Jacques Penders, for his contin-\nued invaluable support,\
    \ advice and guidance and with whom my robotic life began.\nI am also grateful\
    \ to Dr Lyuba Alboul, my Doctoral supervisor, who challenged my\nthinking and\
    \ made me realise the importance of each small achievement. Both of\nyou have\
    \ been inspirational and this journey would not have been possible without\nyou.\
    \ Finally, I would like thank my sister and parents, who also supported me in\n\
    this journey.\nContents\nContents . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . .\ni\nList of Figures . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . .\nvi\nList of Tables\n. . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . .\nix\n1\nAGRICULTURE AND ROBOTICS:\
    \ TRENDS AND CHALLENGES\n1\n1.1\nAgriculture: Everlasting Tension . . . . . .\
    \ . . . . . . . . . . . . . . .\n1\n1.2\nAgriculture: Current Trends and Methods\n\
    . . . . . . . . . . . . . . .\n3\n1.2.1\nMechanisation . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . .\n3\n1.2.2\nPrecision Farming . . . . . . . . .\
    \ . . . . . . . . . . . . . . . .\n4\n1.2.3\nMulti Robot Approach . . . . . .\
    \ . . . . . . . . . . . . . . . .\n5\n1.3\nResearch Question, Aim and Objectives\
    \ . . . . . . . . . . . . . . . . .\n8\n1.4\nThesis Contribution . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . .\n8\n1.5\nThesis Layout . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . .\n10\n1.6\nResearch Location\n\
    . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n11\n2\nLITERATURE REVIEW\n\
    . . . . . . . . . . . . . . . . . . . . . . .\n13\n2.1\nFrom Multi Agent System\
    \ to Multi Robot System . . . . . . . . . . .\n13\n2.2\nMulti Robot System\n.\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . .\n14\n2.3\nApplication Domain\
    \ of Multi Robot System\n. . . . . . . . . . . . . .\n15\n2.3.1\nForaging . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n15\n2.3.2\nArea Coverage\
    \ and Exploration . . . . . . . . . . . . . . . . .\n15\n2.3.3\nMulti-Target Observation\n\
    . . . . . . . . . . . . . . . . . . . .\n16\n2.3.4\nObject Transportation . .\
    \ . . . . . . . . . . . . . . . . . . . .\n16\n2.3.5\nFlocking . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . .\n17\ni\n2.3.6\nSoccer . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . .\n17\n2.4\nTeam Characteristics\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . .\n17\n2.4.1\nControl Structure\
    \ . . . . . . . . . . . . . . . . . . . . . . . . .\n18\n2.4.2\nDiﬀerentiation\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . .\n21\n2.4.3\nCommunication\
    \ Structure . . . . . . . . . . . . . . . . . . . .\n23\n2.4.4\nRepresentative\
    \ Architecture . . . . . . . . . . . . . . . . . . .\n27\n2.5\nMain Questions\
    \ in Multi Robot System . . . . . . . . . . . . . . . . .\n29\n2.5.1\nTask Partitioning\
    \ and Allocation\n. . . . . . . . . . . . . . . .\n30\n2.5.2\nCoordination\n.\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . .\n32\n2.5.3\nCongestion Avoidance\
    \ and Clearance . . . . . . . . . . . . . .\n34\n2.6\nCooperative Farming: Review\
    \ and Analysis\n. . . . . . . . . . . . . .\n36\n2.6.1\nAgricultural Tasks\n.\
    \ . . . . . . . . . . . . . . . . . . . . . . .\n37\n2.6.2\nAnalysis of the Related\
    \ Works . . . . . . . . . . . . . . . . . .\n38\n2.6.3\nThe Problem of Localisation\
    \ in Agricultural Robotics . . . . .\n42\n2.7\nConclusion . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . .\n48\n3\nCOOPERATIVE PLOUGHING:\
    \ DESIGN AND IMPLEMEN-\nTATION\n. . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . .\n49\n3.1\nPloughing Analysis . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . .\n49\n3.1.1\nPloughing Patterns . . . . . . . . .\
    \ . . . . . . . . . . . . . . .\n50\n3.1.2\nPloughing Restrictions . . . . . .\
    \ . . . . . . . . . . . . . . . .\n52\n3.1.3\nPloughing Mouldboards and Furrow\
    \ Transitioning . . . . . . .\n52\n3.1.4\nPloughing Cost . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . .\n54\n3.2\nDesign Requirements and Considerations\
    \ . . . . . . . . . . . . . . . .\n56\n3.3\nInteraction Model . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . .\n58\n3.3.1\nFurrow Detection . . .\
    \ . . . . . . . . . . . . . . . . . . . . . .\n58\n3.3.2\nVision Based Furrow\
    \ Detection\n. . . . . . . . . . . . . . . . .\n60\n3.3.3\nAccuracy of the Vision\
    \ Based Furrow Detection . . . . . . . .\n61\n3.4\nPoints of Failure . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . .\n63\n3.5\nCongestion Clearance\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . .\n63\n3.5.1\nSpatial Resource\
    \ Conﬂict . . . . . . . . . . . . . . . . . . . . .\n64\nii\n3.5.2\nProposed Solution\
    \ to Spatial Resource Conﬂict\n. . . . . . . .\n64\n3.5.3\nCollision Avoidance\
    \ . . . . . . . . . . . . . . . . . . . . . . . .\n67\n3.6\nChallenges in Obstacle\
    \ Detection Implementation . . . . . . . . . . .\n70\n3.6.1\nDiﬀerentiation between\
    \ other team members and the rest of\nthe obstacles in the environment . . . .\
    \ . . . . . . . . . . . . .\n70\n3.6.2\nEntering the Field due to Collision Avoidance\
    \ . . . . . . . . .\n78\n3.6.3\nCombination of Collision and Congestion Avoidance\
    \ . . . . . .\n78\n3.7\nTeam Ploughing . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . .\n79\n3.8\nFurrow Transitioning . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . .\n80\n3.8.1\nPloughing with a Reversible Mouldboard:\
    \ First-In, First-Out .\n81\n3.8.2\nPloughing with a Reversible Mouldboard: Last-In,\
    \ First-Out .\n88\n3.8.3\nComparison and Discussion\n. . . . . . . . . . . . .\
    \ . . . . . .\n94\n3.9\nPloughing Optimisation\n. . . . . . . . . . . . . . .\
    \ . . . . . . . . . .\n99\n3.9.1\nIssues with FIFO and LIFO . . . . . . . . .\
    \ . . . . . . . . . . 100\n3.9.2\nToward Self-Organising Ploughing . . . . . .\
    \ . . . . . . . . . . 101\n3.10 Conclusion . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . 106\n4\nCOOPERATIVE SPRAYING: DESIGN AND IMPLEMENTA-\n\
    TION . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n107\n\
    4.1\nMotivation Behind Further Investigation . . . . . . . . . . . . . . . . 107\n\
    4.2\nSpraying Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . 111\n4.2.1\nSingle Robotic Sprayer . . . . . . . . . . . . . . . . . . . .\
    \ . . 112\n4.3\nCooperative Spraying: Design Description\n. . . . . . . . . .\
    \ . . . . . 115\n4.3.1\nTask Partitioning Analysis . . . . . . . . . . . . . .\
    \ . . . . . . 117\n4.3.2\nTask Allocation Analysis . . . . . . . . . . . . . .\
    \ . . . . . . . 118\n4.3.3\nTask Initiation Analysis\n. . . . . . . . . . . .\
    \ . . . . . . . . . 121\n4.3.4\nSpraying Time Analysis\n. . . . . . . . . . .\
    \ . . . . . . . . . . 121\n4.3.5\nDesign Limitations . . . . . . . . . . . . .\
    \ . . . . . . . . . . . 122\n4.4\nImplementation and Testing . . . . . . . . .\
    \ . . . . . . . . . . . . . . 126\n4.4.1\nMathematical Results . . . . . . . .\
    \ . . . . . . . . . . . . . . . 126\n4.4.2\nSimulation Results . . . . . . . .\
    \ . . . . . . . . . . . . . . . . 128\niii\n4.5\nSystem Optimisation . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . 132\n4.5.1\nDynamic vs Static Checkpoints\n\
    . . . . . . . . . . . . . . . . . 132\n4.5.2\nOptimum Team . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . 132\n4.5.3\nLarge Team and Fewer Checkpoints\
    \ . . . . . . . . . . . . . . . 133\n4.6\nConclusion . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . 138\n4.7\nCritiques and Future Work\
    \ . . . . . . . . . . . . . . . . . . . . . . . . 140\n5\nDiscussions, Conclusions\
    \ and Future Works\n. . . . . . . . . . . .\n141\n5.1\nResearch Recap . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . 141\n5.2\nRegion-based vs\
    \ Self-organised, FIFO, LIFO . . . . . . . . . . . . . . 145\n5.2.1\nExecution\
    \ Time Comparison . . . . . . . . . . . . . . . . . . . 146\n5.2.2\nScalability,\
    \ Flexibility and the Required Coordination . . . . . 147\n5.2.3\nResilience Toward\
    \ Failure\n. . . . . . . . . . . . . . . . . . . . 149\n5.3\nApplication Scope\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152\n5.3.1\nSeeding\n\
    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152\n5.3.2\nHarvesting\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153\n5.3.3\nMulti-Robotic\
    \ De-mining and Mine Field Mapping\n. . . . . . 157\n5.3.4\nCooperative Beacon\
    \ Distribution\n. . . . . . . . . . . . . . . . 158\n5.4\nConclusion and Future\
    \ Directions of Research . . . . . . . . . . . . . 160\n5.4.1\nRecovering from\
    \ Failure During Task Execution . . . . . . . . 163\n5.4.2\nHybrid Approaches\
    \ . . . . . . . . . . . . . . . . . . . . . . . . 163\nReferences . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n165\nAppendix A Spraying\
    \ Optimum Team Size . . . . . . . . . . . . . .\n190\nAppendix B C++ Code for\
    \ Artiﬁcial Potential Field Using ROS .\n195\nAppendix C C++ Code for Cluster\
    \ Class . . . . . . . . . . . . . . .\n200\nAppendix D C++ Code for Cluster Finding\n\
    . . . . . . . . . . . . .\n202\nAppendix E C++ Code for Chilitag Fiducial Finding\
    \ . . . . . . . .\n209\nAppendix F C++ Code for Color-based Pattern Recognition\
    \ . . .\n212\niv\nAppendix G C++ Code for FIFO Task Handler . . . . . . . . .\
    \ . .\n218\nAppendix H C++ Code for LIFO Task Handler . . . . . . . . . . .\n\
    228\nAppendix I\nC++ Code for Self-organised Task Handler . . . . . .\n236\nAppendix\
    \ J\nC++ Code for Region-based Task Handler Using ROS 242\nAppendix K C++ Code\
    \ for Reach Point Using ROS\n. . . . . . . .\n252\nv\nList of Figures\n3.1\nPloughing\
    \ in action . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n50\n3.2\n\
    Ploughing Patterns . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n50\n\
    3.3\nFurrow Transitioning in Action\n. . . . . . . . . . . . . . . . . . . . .\n\
    51\n3.4\nPloughing Mouldboards\n. . . . . . . . . . . . . . . . . . . . . . .\
    \ . .\n53\n3.5\nPloughing Patterns Using Conventional Mouldboards . . . . . .\
    \ . . .\n54\n3.6\nPloughing Patterns Using Reversible Mouldboards . . . . . .\
    \ . . . . .\n55\n3.7\nFurrow Detection Results . . . . . . . . . . . . . . . .\
    \ . . . . . . . . .\n61\n3.8\nCongestion Demonstration . . . . . . . . . . . .\
    \ . . . . . . . . . . . .\n65\n3.9\nCongestion From Diﬀerent Direction\n. . .\
    \ . . . . . . . . . . . . . . .\n65\n3.10 Division of Field of View . . . . .\
    \ . . . . . . . . . . . . . . . . . . . .\n66\n3.11 Artiﬁcial Potential Field(APF)\
    \ Demonstration . . . . . . . . . . . . .\n68\n3.12 Demonstration of Local Minima\
    \ Issue in APF . . . . . . . . . . . . .\n69\n3.13 QR-code Tracking . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . .\n73\n3.14 Flickering Pixel Eﬀect\n\
    . . . . . . . . . . . . . . . . . . . . . . . . . .\n75\n3.15 RGB-LED Feature\
    \ Localisation . . . . . . . . . . . . . . . . . . . . .\n76\n3.16 RGB-LED Feature\
    \ Based Localisation Camera View\n. . . . . . . . .\n77\n3.17 RGB-LED Feature\
    \ Based Localisation Noise Removal . . . . . . . . .\n77\n3.18 Field View for\
    \ Combining Collision and Congestion Avoidance . . . .\n79\n3.19 Ideal Position\
    \ of the Robot for Ploughing . . . . . . . . . . . . . . . .\n81\n3.20 FIFO Furrow\
    \ Transitioning Demonstration . . . . . . . . . . . . . . .\n83\n3.21 Ploughing\
    \ with a Reversible Mouldboard FIFO - Flow Chart . . . . .\n87\n3.22 LIFO Furrow\
    \ Transitioning Demonstration . . . . . . . . . . . . . . .\n91\n3.23 Ploughing\
    \ with a Reversible Mouldboard LIFO - Flow Chart . . . . .\n93\n3.24 FIFO vs LIFO\
    \ Productivity Comparison . . . . . . . . . . . . . . . .\n95\nvi\n3.25 FIFO vs\
    \ LIFO Processing Time Comparison . . . . . . . . . . . . . .\n96\n3.26 FIFO vs\
    \ LIFO Travelled Distance Comparison . . . . . . . . . . . . .\n97\n3.27 Software\
    \ System Diagram for Ploughing\n. . . . . . . . . . . . . . . .\n98\n3.28 FIFO\
    \ and LIFO Diﬀerence between Simulation and Mathematical\nResults . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n99\n3.29 The Self-Organised\
    \ Approach Demonstration . . . . . . . . . . . . . . 102\n3.30 Furrow Transitioning\
    \ in the Self-Organised approach\n. . . . . . . . . 102\n3.31 Self-organised ploughing\
    \ ﬂowchart . . . . . . . . . . . . . . . . . . . . 104\n3.32 Self-Organised Ploughing\
    \ Required Travelling Distance . . . . . . . . 105\n3.33 Time Analysis of Ploughing\
    \ Methods . . . . . . . . . . . . . . . . . . 105\n4.1\nShortcoming of Ploughing\
    \ Interaction Method in Spraying\n. . . . . . 108\n4.2\nExcessive Spraying Demonstration\
    \ . . . . . . . . . . . . . . . . . . . . 109\n4.3\nShortcoming of Static Task\
    \ Allocation in Spraying . . . . . . . . . . . 110\n4.4\nSpraying in Action\n\
    . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112\n4.5\nIrrigation Robot\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113\n4.6\nHortibot\
    \ Robot . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114\n4.7\n\
    Spraying Task Allocation Demonstration . . . . . . . . . . . . . . . . 116\n4.8\n\
    Spraying Task Initiation Demonstration . . . . . . . . . . . . . . . . . 117\n\
    4.9\nSpraying Time Analysis\n. . . . . . . . . . . . . . . . . . . . . . . . .\
    \ 119\n4.10 Spraying Time Analysis Checkpoint Occupation . . . . . . . . . . .\
    \ . 120\n4.11 Spraying Task Allocation Breaking Point Demonstration\n. . . . .\
    \ . . 123\n4.12 Spraying Successful Task Initiation Condition Demonstration .\
    \ . . . . 124\n4.13 Spraying Task Allocation Failure Demonstration . . . . . .\
    \ . . . . . . 124\n4.14 Detection Range Issue with Spraying Approach\n. . . .\
    \ . . . . . . . . 125\n4.15 Team Size for Diﬀerent Field Size . . . . . . . .\
    \ . . . . . . . . . . . . 127\n4.16 Spraying Time Comparison\n. . . . . . . .\
    \ . . . . . . . . . . . . . . . 128\n4.17 Spraying Software Diagram\n. . . . .\
    \ . . . . . . . . . . . . . . . . . . 129\n4.18 Region-based Task Handler Flowchart\
    \ . . . . . . . . . . . . . . . . . . 130\n4.19 Region-based Simulation vs Mathematical\
    \ Results Comparison . . . . 131\n4.20 Modiﬁcation on Spraying Checkpoint Distance\
    \ . . . . . . . . . . . . . 133\nvii\n4.21 Spraying Task Initiation with Patrol\
    \ Robot . . . . . . . . . . . . . . . 135\n4.22 Patrol Robot Excessive Execution\
    \ Prevention\n. . . . . . . . . . . . . 136\n4.23 The Eﬀect of Patrol Robot on\
    \ the Rest of the Team . . . . . . . . . . 136\n4.24 Spraying Task Completion\
    \ . . . . . . . . . . . . . . . . . . . . . . . . 137\n5.1\nExecution Time Comparison\
    \ for Diﬀerent Team Sizes . . . . . . . . . 147\n5.2\nSeeding Patterns\n. . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . 153\n5.3\nHarvesting Carrot\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154\n5.4\nDiﬀerent\
    \ Harvesting Machines . . . . . . . . . . . . . . . . . . . . . . 154\n5.5\nSingle\
    \ Harvester in the Region-based Approach\n. . . . . . . . . . . . 156\n5.6\nSingle\
    \ Harvester in Self-organising Approach . . . . . . . . . . . . . . 156\n5.7\n\
    Current Di-mining Approaches . . . . . . . . . . . . . . . . . . . . . . 158\n\
    viii\nList of Tables\n3.1\nVariation in tag position and observer position vs\
    \ Distance to the tag\n74\n3.2\nList of parameters for simulation and mathematical\
    \ visualisation . . .\n94\nix\nCHAPTER 1\nAGRICULTURE AND ROBOTICS: TRENDS AND\n\
    CHALLENGES\nThis chapter presents the research motivation and background, and\n\
    the research aim and objectives. The main aim of this chapter is\nto assure that\
    \ the reader comprehends the urge for human inde-\npendent approaches to perform\
    \ agricultural tasks. A global and\nepidemic issue in agriculture which jeopardizes\
    \ the future of food\nindustry is discussed in 1.1. The current trends aiming\
    \ to compen-\nsate the raised issue are presented in 1.2. The direction of research\n\
    and aim and objectives of the research are listed 1.3. Finally, the\nthesis layout\
    \ is explained in 1.5\n1.1\nAgriculture: Everlasting Tension\nAgriculture is deﬁned\
    \ as domestication of animals and plants. There are various\ntasks to consider\
    \ in the ﬁeld of agriculature. Chandrasekaran et al. (in 2010) classi-\nﬁed agricultural\
    \ branches into various categories including, Crop Production (deal-\ning with\
    \ production of various food crops), Horticulture (dealing with production\nof\
    \ ﬂowers, fruits, and vegetables), Forestry (dealing with large scale cultivation\
    \ of\nperennial trees for supplying wood), Animal Husbandry (dealing with maintenance\n\
    of various types of livestock for direct energy), Fishery Science, and Home Science.\n\
    The archaeological excavations date back agriculture to 10,000 years ago. Since\
    \ then,\nhuman beings have used agriculture mainly to provide food. However, nowadays\n\
    agricultural products are demanded by various industries including pharmaceutical,\n\
    energy and fashion. (Chandrasekaran et al., 2010).\n1\nAs population increases,\
    \ the demand for food increases too.\nBetween 1960 and\n2000 the population of\
    \ the earth was doubled. In return, agricultural productivity\nimproved by 2.4%\
    \ annually between 1969 and 1989, but this fell to only 2% between\n1989 and 2000\
    \ (Fao, 2002). By 2050, it is estimated that the population of the earth\nwill\
    \ reach 9.15 billion by which time the overall demand for agricultural products\
    \ is\nexpected to grow at 1.1% per year (Alexandratos and Bruinsma, 2012). To\
    \ satisfy\nthis level of demand, the agricultural productivity has to be improved\
    \ by 25% of\nthe current rate (Fao, 2009).\nThis everlasting tension has always\
    \ forced farmers to invent more eﬃcient cultivation\nmethods. However, recent\
    \ researches are suggesting that the future improvements\nmay not be easily achievable.\
    \ The main reason is the shortage of input labour force.\nIn Japan, the number\
    \ of farmers is decreasing, and every year more rice paddies are\nabandoned, while\
    \ the average age of the farmers is increasing (Noguchi and Barawid,\n2011). In\
    \ addition, studies reveal that the younger generations are not interested in\n\
    agricultural activities. According to Bloss (2014), 60% of the farmers in Japan\
    \ are\nover 65 years of age.\nThe shortage in input labour force is a global issue,\
    \ and it is not limited to a\nparticular region. For instance, in United States\
    \ of America, less than 1% of people\nare engaged in agricultural activities (Bloss,\
    \ 2014), and in Europe (EU-27), 24.9%\nof agricultural labour dropped(Eurostat,\
    \ 2015) since 2000.\nThe main reason is that agriculture is a labour intensive\
    \ activity with mediocre to\nlow level income. In addition, traditional and conventional\
    \ farming methods, for\nexample relying on seasonal rain for watering the crop,\
    \ endangers the end products\n(Golait, 2007). In this era where demand for food\
    \ is continuously increasing, the\nshortage of manpower makes achieving the targeted\
    \ improvement in agricultural\n2\nmethods much more diﬃcult.\n1.2\nAgriculture:\
    \ Current Trends and Methods\nOver the years, more eﬃcient tools and techniques\
    \ have been developed to improve\nproductivity of agricultural processes. However,\
    \ the proposed methods require one\ncommon parameter: Human Labour. In recent\
    \ decades, various approaches have\nbeen developed to minimise dependency to human\
    \ input labour force. As a result,\ntwo main trends have been identiﬁed: (I) Mechanisation\
    \ and (II) Precision Farming\n(Zhang et al., 2002).\n1.2.1\nMechanisation\nMechanisation\
    \ in agriculture refers to “the application of tools, implements, and\npowered\
    \ machineries as inputs to achieve agricultural production” (Clarke, 1997).\n\
    The main advantage of agricultural mechanisation is that the technology satisﬁes\n\
    the real need of the farmers while the prices are aﬀordable (Houmy et al., 2013).\n\
    Generally, agricultural machineries can be powered from three sources of energy:\n\
    manpower (or manual), animal, and motorised (using fossil fuel or electric power).\n\
    A manpower source produces 0.1 Hp (Horsepower) over a limited period. However\n\
    by harnessing power of animals, the productivity increases by 6 to 7 fold per\
    \ animal.\nBy invention of combustion engine, the productivity was increased even\
    \ more, up\nto 10 fold. Today, agricultural tractors boost this eﬃciency up to\
    \ 450 kW (612 Hp)\nor more (Shearer and Pitla, 2013). But, even with the introduction\
    \ of tractors still\na human is required for operation. A human has to drive the\
    \ machineries through\na large ﬁeld for various purposes during cultivation period.\n\
    In open ﬁeld farming, one popular trend to reduce ﬁeld processing time is to process\n\
    3\nlarger portions of the ﬁeld at a time. This requires the machines to become\
    \ larger\nand heavier, and this will lead to occurrence of soil compaction.\n\
    Soil compaction occurs whenever an external stress or pressure exceeds the internal\n\
    soil strength, also known as pre-compression stress value (Horna et al., 1995).\
    \ Soils\nlevel of stress depends on the soil type, the climate, and varies from\
    \ one location\nto another. Soil compaction results in reduction of soil pore\
    \ volume which causes\nreduction in space for air and water in the soil, and consequently\
    \ reduction in soil\nwater inﬁltration (Graves et al., 2015). As a result, less\
    \ rainwater can penetrate\ninto the compacted soil which either increases the\
    \ potential of erosion and runoﬀ,\nor may cause the water to remain on the soil\
    \ surface for longer period of time,\nespecially in wheel tracks (Wolkowski and\
    \ Lowery, 2008). Other impacts of soil\ncompaction are limited root growth, reduction\
    \ in nutrient uptake by roots, and re-\nduction in micro-organism and earthworm\
    \ activity (Graves et al., 2015). Recovering\nfrom soil compaction is time consuming,\
    \ and it increases the cost of cultivation by\n90% (Blackmore, 2012).\n1.2.2\n\
    Precision Farming\nEven though by mechanisation the productivity is boosted signiﬁcantly,\
    \ the need\nfor a human as an operator constrains further progress. However in\
    \ recent decades,\nprogress in search for human independent approaches has led\
    \ to invention of au-\ntonomous unmanned robotic vehicles.\nThe search for autonomous\
    \ robots in agriculture started in 1920 when furrows\nwere used to guide tractors\
    \ across the ﬁelds with reduced eﬀort from the operator\n(Mousazadeh, 2013), (Shearer\
    \ et al., 2010). However the concept of fully autonomous\nagricultural vehicles\
    \ dates back to the 1950s and 1960s where unmanned agricul-\n4\ntural vehicles\
    \ navigated throughout the ﬁeld using leader cable guidance (Ming\net al., 2009).\
    \ Today, autonomous agricultural robots are applied for various tasks.\nGrift\
    \ et al. (2008) classiﬁed advancement in agricultural robotics into four main\
    \ ar-\neas: (1) Plant Oriented Robotics, (2) Animal Robotics, (3) Controlled Environment\n\
    Robotics, and (4) Field Robotics. Signiﬁcant advances have been made in recent\n\
    decades in each of these application areas.\nEven though robotic systems are slow\
    \ in speed, they can operate consistently with\nhigh precision for a long period\
    \ of time in diﬀerent weather conditions while reducing\nthe labour cost. In fact,\
    \ autonomous dedicated farming units increase eﬃciency and\nyield (Sukkarieh,\
    \ 2012). This has convinced many countries to invest in autonomous\nagricultural\
    \ approaches (Tarannum et al., 2015). For instance in 2014, the Japanese\ngovernment\
    \ announced plans to fund the development of unmanned farm tractors\n(Bloss, 2014).\n\
    Although unmanned autonomous robotic approaches have succeeded at reducing\nthe\
    \ labour force, they still require human observation for maintenance and failure\n\
    recovery (Noguchi and Barawid, 2011). Moreover, the current autonomous tractors\n\
    are costly, and only a narrow margin of farmers can aﬀord them.\n1.2.3\nMulti\
    \ Robot Approach\nThe idea of true human independent farming (not even as a supervisory\
    \ role) led\nto the invention of a new approach: multi robot system. Multi robot\
    \ system is a\nwell-known topic in the robotics community in which a team of low-cost\
    \ robots is\ndeployed into the ﬁeld to cooperatively execute the given task.\n\
    Multi robotic approaches have several potential advantages over single robotic\
    \ ap-\nproaches. With the use of multiple simple and low cost robots, the total\
    \ execution\n5\ncost of the system can be reduced (Jones and Mataric, 2005). In\
    \ addition, a team\nof robots can increase system ﬂexibility and robustness by\
    \ taking advantage of in-\nherent parallelism and redundancy (Liu and Wu, 2001).\
    \ Furthermore, multi robotic\napproaches have better system reliability and scalability\
    \ (Yan et al., 2013). Finally,\nthey have the potential to become completely human\
    \ independent (Noguchi and\nBarawid, 2011).\nHowever, the main drawback of this\
    \ approach is system complexity. Deploying mul-\ntiple robotic units, which do\
    \ not interact with each other, in a ﬁeld to execute the\nsame task is insuﬃcient,\
    \ and often it results in complete failure (Jones and Mataric,\n2005). The key\
    \ parameter to an eﬀective and successful team of robots is coop-\neration. Cooperation\
    \ emerges from individual cooperative behaviour. Cooperative\nbehaviour of robots\
    \ has to be planned and designed accurately so that unwanted\ncompetition among\
    \ robots is prevented (Jones and Mataric, 2005).\nIn order to have a cooperative\
    \ team of robots, ﬁrst characteristics of the team have\nto be identiﬁed. These\
    \ characteristics deﬁne robots’ limitations and capabilities,\nand sometimes are\
    \ referred to as group architecture (Uny Cao et al., 1997). These\ncharacteristics\
    \ are as follows:\n• Communication or Interaction Structure: explicit vs implicit.\n\
    • Control Structure: centralised vs decentralised.\n• Diﬀerentiation: homogeneous\
    \ vs heterogeneous.\nNext, three main questions have to be answered:\n1. How to\
    \ divide the complex global task into smaller manageable subtasks (i.e.\ntask\
    \ partitioning)?\n6\n2. How to distribute and assign each subtask to each participating\
    \ robot (i.e. task\nallocation)?\n3. How robots can attend their assigned task\
    \ in a shared environment without any\ncollision and congestion (i.e. coordination)?\n\
    Consequently, by answering these three questions, cooperation could emerge from\n\
    a team of robots.\nThe emerged cooperation can be scaled and quantiﬁed with\n\
    the following parameters: scalability, robustness, self-organisation, and coordination\n\
    strength (Barca and Sekercioglu, 2013), (Farinelli et al., 2004). These terminologies\n\
    will be discussed in more details in Chapter 2.\nThe current trend in multi robotic\
    \ approaches in the ﬁeld of agriculture is to achieve\ncooperation through a dedicated\
    \ coordinator via explicit forms of interaction. In ex-\nplicit forms of interaction,\
    \ each robot deliberately broadcasts its intentions to other\nmembers or an individual\
    \ in the team. These messages could be transmitted via\nWi-Fi, Bluetooth, or via\
    \ any other types of signalling including blinking LED, ul-\ntrasounds, vibration,\
    \ and etc (Uny Cao et al., 1997). With explicit forms of interac-\ntion, “robots’\
    \ behaviours can be planned according to a complete prior knowledge”\nBarca and\
    \ Sekercioglu (2013). However, these approaches are susceptible to the loss\n\
    of communicating signal while the computational cost increases with the increase\n\
    in the number of participating robots. In addition, they have limited scalability,\n\
    robustness, and self-organisation (Parker, 1993) (Lumelsky and Harinarayan, 1997).\n\
    However, in implicit forms of interaction, robots intentions are observed and\
    \ inter-\npreted either by changes in the environment created as a result of robots\
    \ movement\nor task execution or local interaction among robots (Uny Cao et al.,\
    \ 1997). This\nform of interaction is unintentional, and hence it is referred\
    \ to as indirect form of\ninteraction (Barca and Sekercioglu, 2013). With implicit\
    \ forms of interaction, the\n7\nsystem can become scalable, robust, and highly\
    \ self-organised. Besides, the loss of\ncommunicating signal can no longer aﬀect\
    \ the success of the team.\n1.3\nResearch Question, Aim and Objectives\nTo this\
    \ date, there have been no approaches in the ﬁeld of agriculture in which coop-\n\
    eration is achieved through implicit forms of interaction. This research is conducted\n\
    to investigate the feasibility of cooperation via implicit forms of interaction\n\
    in a large team of robots for various agricultural tasks which are executed\n\
    in an open ﬁeld.\nThe main aim of this research is to develop cooperative behaviour\
    \ mechanism\nby which a team of robots can execute an agricultural task (e.g.\
    \ plough-\ning, spraying, and harvesting) in a large environment without the use\
    \ of\nexplicit forms of communication or central organiser.\nTo obtain this aim,\
    \ the following objectives have been foreseen:\n• Description of the team architecture\
    \ and the cooperative model.\n• Review and analysis of related works.\n• Analysis\
    \ of the targeted tasks.\n• Description and modelling of cooperative approaches.\n\
    • Simulation of the proposed approaches.\n• Implementation and Validation of the\
    \ designed approaches.\n1.4\nThesis Contribution\nImplicit Forms of Communication\
    \ in Swarm in Open Field Farming\n8\nTo this point, there have been no attempt\
    \ in open ﬁeld farming in which a coopera-\ntive behaviour emerges in a team of\
    \ robots as a result of implicit interaction. All of\nthe related works in the\
    \ application of open ﬁeld farming have been accomplished\nusing explicit forms\
    \ of communication. In this thesis, the proposed approaches are\nbased on implicit\
    \ forms of communication. In other words, robots do not transmit\ntheir intentions\
    \ intentionally using explicit forms of interaction.\nSpatial Congestion Clearance\
    \ Using Implicit Form of Interaction In gen-\neral, when operating in a shared\
    \ environment, robots may aim to navigate to a\nshared coordinate in space. In\
    \ this situation, congestion is inevitable. Normally, a\ncentral unit coordinates\
    \ the robots to prevent congestion. Alternatively, a conges-\ntion is resolved\
    \ between two robots using some form of signalling. Both approaches\nrequire explicit\
    \ form of interaction. In this thesis, an approach is suggested that\nonly relies\
    \ on implicit form of interaction.\n9\n1.5\nThesis Layout\nThe layout of this\
    \ thesis are as follows:\nChapter 1: This chapter presents the research motivation\
    \ and background, and\nthe research aim and objectives. The main aim of this chapter\
    \ is to assure\nthat the reader comprehends the urge for human independent approaches\
    \ to\nperform agricultural tasks. In the ﬁrst section, a global and epidemic issue\
    \ in\nagriculture which jeopardizes the future of food industry is discussed.\
    \ Next,\ncurrent trends aiming to compensate the raised issue are presented. Finally,\n\
    the direction of research and aim and objectives of the research are listed.\n\
    Chapter 2: In this chapter, the terminology introduced previously are discussed.\n\
    Next, with the deﬁned terminology, the architecture of the team which is\nconsidered\
    \ in this thesis is introduced. Finally, similar works are described\nand analysed.\n\
    Chapter 3: In this chapter, ploughing with a team of robots is discussed. First,\n\
    the task of ploughing is analysed to determine the design considerations and\n\
    requirements. Next, the recognised problems are addressed, and two coopera-\n\
    tion models are presented. Further, the results obtained from analysing these\n\
    models are presented, compared, and criticised. Finally, to improve the system\n\
    and compensate the identiﬁed drawbacks, an optimised method is presented,\nanalysed,\
    \ and compared with the previous cooperation models.\nChapter 4: In this chapter,\
    \ spraying with a team of robots is discussed. This\nincludes analysis and identiﬁcation\
    \ of design consideration and requirements\nof the task of spraying, comparison\
    \ with ploughing, description of the cooper-\n10\native model, implementation\
    \ and discussion regarding the obtained simulation\nresults.\nChapter 5: This\
    \ chapter presents conclusions and discussions over the obtained\nresults. Moreover,\
    \ it aimed to identify the future research axis to this research.\n1.6\nResearch\
    \ Location\nThe research is carried out in Sheﬃeld Hallam University, Materials\
    \ and Engineering\nResearch Institute (MERI), Centre for Automation and Robotics\
    \ Research (CARR).\nNumerous robotic researches have been conducted in this centre\
    \ in variety of robotic\nﬁelds from human robotic interaction to multi robotic\
    \ systems and swarm robotics.\nThe related projects in multi robotics and swarm\
    \ robotics include GUARDIAN\n(Guardian, 2010) and I-SWARM (ISwarm, 2006). In the\
    \ GUARDIAN project, a\nteam of robots provide vital environmental information\
    \ (including obstacles, partic-\nular toxic gas level, and etc) to a ﬁre ﬁghter\
    \ who is surrounded by the team through\nthe modiﬁed oxygen mask. On the other\
    \ hand, the aim of I-SWARM is the real-\nisation of collective intelligence of\
    \ swarm of microrobots, in terms of cooperation\nand collective perception using\
    \ knowledge and methods of pre-rational intelligence,\nmachine learning, swarm\
    \ theory and classical multi-agent systems (ISwarm, 2006).\nIn addition to swarm\
    \ related projects, the research centre hosts projects from other\nareas in the\
    \ ﬁeld of robotics. In human robot interaction area, CARR hosts En-\ngineering\
    \ and Physical Sciences Research Council (EPSRC) funded project called\nREINS\
    \ (REINS, 2011). In REINS, the focus is to develop a semi-autonomous mo-\nbile\
    \ robot with sensory capabilities that transfer environmental information to the\n\
    attached ﬁre ﬁghter via haptic and tactile interaction methods in a smoked ﬁlled\n\
    environment in which the visibility is as low as none.\n11\nThe supervisory team,\
    \ Prof Jacques Penders and Dr. Lyuba Alboul, were involved\nin the mentioned projects\
    \ along with other related research projects which are not\nmentioned in here.\n\
    12\nCHAPTER 2\nLITERATURE REVIEW\nThe main aim of this chapter is to demonstrate\
    \ that the current\napproaches in the agricultural robotics are not reliable and\
    \ suﬃcient\nfor future development and expansion. The relevant deﬁnitions in\n\
    multi robot system are discussed in 2.1 and 2.2. The application\ndomain in multi\
    \ robot system is reviewed in 2.3.\nMulti-robotic\nteam characteristics are reviewed\
    \ in 2.4 and design questions in\nany multi-robotic team is mentioned in 2.5.\
    \ Finally, the previous\ncontributions in multi-robotic farming is reviewed in\
    \ 2.6.\n2.1\nFrom Multi Agent System to Multi Robot System\nThe modern approach\
    \ to artiﬁcial intelligence is centred around the concept of au-\ntonomous agents\
    \ (Vlassis, 2003). According to Wooldridge and Jennings (1995), an\nentity can\
    \ be counted as an agent if it has the following properties:autonomy: to\nmake\
    \ decisions without the direct intervention of others, reactivity: to perceive\n\
    the surrounding environment (e.g. the physical world or a graphical user interface)\n\
    and to provide appropriate response. pro-activeness: to exhibit goal-directed\
    \ be-\nhaviours by taking the initiative. social abilities: to interact with other\
    \ entities\nvia some kind of agent-communication language. Inter-agent communication\
    \ has\nutmost importance in multi agent systems in which multiple autonomous agents\n\
    aim to solve a problem cooperatively.\nThe concept of an agent in computer science,\
    \ generally is applied to software as it\nentails all the aforementioned characteristics.\
    \ However, robots can be counted as\nagents too since robots perceive their surrounding\
    \ environment through sensors and\n13\nact upon that environment through actuators\
    \ in a goal-directed behaviour while\nthey can communicate with other robots in\
    \ the environment (Russell and Norvig,\n2003). Therefore, the existing concepts\
    \ and solutions in agent-based systems can be\napplied (if applicable) to robotic-based\
    \ and multi robotic-based problems.\n2.2\nMulti Robot System\nIn the past decades,\
    \ single robot systems have been applied to numerous application\ndomains. As\
    \ tasks become more and more complex, the robotic units are designed\nmore complex\
    \ to ﬁt the given task. However, there are tasks which a single robot,\nregardless\
    \ of how sophisticated the robot design is, is either incapable to carry out\n\
    successfully or it requires a long time to complete the process. Consider a search\
    \ and\nrescue scenario in which a robot is given a map of the environment and\
    \ it is required\nto search for injured human beings and to act appropriately\
    \ upon detection. Clearly,\ntime is an important asset in this example, and it\
    \ is preferred to perform the task\nas fast as possible. If a single robotic unit\
    \ is deployed, despite how fast it performs\nat every single point on the map,\
    \ the maximum eﬃciency cannot be reached. In\naddition, the success of the task\
    \ is susceptible to the loss of the single robot. In\nother words, if the robot\
    \ fails in the middle of the operation, the task cannot be\ncompleted and the\
    \ robot has to be recovered.\nThese weaknesses of single robotic units have led\
    \ to the deployment of multiple\nrobots. In this approach, a group of robots functions\
    \ together to complete a shared\ngoal. The key to success of the given task is\
    \ the presence of some form of cooperation\namong the individuals in the group.\
    \ In other words, it is not possible to achieve\nsuccess within a group of non-cooperative\
    \ single robotic units.\n14\n2.3\nApplication Domain of Multi Robot System\nThe\
    \ concept of multi robot systems is being applied to various new tasks every year.\n\
    In this section, we provide a brief overview of the current application domains\
    \ for\nmulti robot systems.\n2.3.1\nForaging\nIn foraging, the aim is to pick\
    \ up and gather objects which are scattered in the\nenvironment (Farinelli et\
    \ al., 2004).\nThis application domain is inspired by the\nbehaviour of ants that\
    \ search for food sources distributed around their nest Sahin\net al. (2008).\n\
    The main challenge in this domain is to implement an optimised\nsearch strategy\
    \ to maximise the ratio of the returned food. There are various tasks\nwhich require\
    \ foraging including search and rescue (Beck et al., 2016), toxic waste\ncleaning,\
    \ mine cleaning, and service robots (e.g. (Jung and Zelinsky, 2000);(Jeon\net\
    \ al., 2016)).\n2.3.2\nArea Coverage and Exploration\nSimilarly to foraging, in\
    \ area coverage, the aim is to visit or analyse all the free\npoints in space\
    \ as eﬃciently as possible (Choset, 2001). Various tasks including\ndemining (Santana\
    \ et al., 2005), snow ploughing (Saska et al., 2013), line searching\n(Marjovi\
    \ et al., 2010), open ﬁeld processing (Noguchi et al., 2004); (Batalin and\nSukhatme,\
    \ 2002), beacon distributing (Howard et al., 2002), lawn mowing (Zheng\net al.,\
    \ 2005), and car-body painting (Graca et al., 2016) are categorised in area\n\
    coverage application domain.\nIn a slightly diﬀerent area of application, robots\
    \ are aimed to explore and analyse\nan unknown environment. This task is also\
    \ referred to as exploration. The main\n15\ndiﬀerence between exploration and\
    \ area coverage application domains is that in area\ncoverage the map of the environment\
    \ may or may not be given to the robots prior\nto execution, whereas in area exploration\
    \ the ﬁeld is completely unknown to the\nrobots. Therefore, the main issue in\
    \ area exploration is to generate a global map of\nthe environment cooperatively\
    \ and use the map for further navigation or processing\n(e.g. (Simmons et al.,\
    \ 2000); (Thrun and Liu, 2005); (Koch et al., 2015)).\n2.3.3\nMulti-Target Observation\n\
    In multi-target observation, also known as CMOMMT: Cooperative Multi-robot\nObservation\
    \ of Multiple Moving Targets (Farinelli et al., 2004), ﬁrst introduced by\nParker\
    \ (1999), a team of robots are required to detect and track a group of moving\n\
    targets cooperatively. Multi-Robot Target Observation has many connections with\n\
    security, surveillance and recognition problems (Werger and Mataric, 2000) where\n\
    targets moving around in a bounded area must be observed.\n2.3.4\nObject Transportation\n\
    In this application domain, robots are required to transport objects from point\
    \ A\nto point B. Depending on the size of the objects and capabilities of the\
    \ robots, the\napproaches could further be classiﬁed into (i) cooperative pulling/pushing\
    \ and (ii)\nindividual object transportation. In cooperative pulling/pushing,\
    \ individuals are\nincapable to transport an object from A to B. Instead, they\
    \ cooperatively push or\npull (sometimes the combination of both) the object (e.g.\
    \ (Mataric et al., 1995);(Jose\nand Pratihar, 2016);(Weber et al., 2015);(Vig\
    \ and Adams, 2006);(Yamada and Saito,\n1999)). In object transportation, however,\
    \ the robots are capable to pick up and\ncarry an object from one location and\
    \ deliver it to another location individually (e.g.\n(Wu et al., 2016a); (Barrientos\
    \ et al., 2016)).\n16\n2.3.5\nFlocking\nIn the ﬂocking task, the goal is to navigate\
    \ together while particular formation is\nmaintained in the team. This application\
    \ domain is inspired by formation control\nof a ﬂock of ﬂying birds. Cooperation\
    \ among the individuals is also used to localise\neach other, and to fuse information\
    \ acquired from the environment.\nSimilar to\nexploration, map building of unknown\
    \ environments is a common task tackled in\nthis application domain, though the\
    \ diﬀerence is that in exploration, there may or\nmay not be a particular formation\
    \ among the team. The problem of exploration\nand ﬂocking is related to several\
    \ applications such as transshipment operations in\nharbours, airports and marshalling\
    \ yards (Arbanas et al., 2016), motion coordination\nin industrial applications\
    \ and exploration of dangerous environments (Solovey et al.,\n2015).\n2.3.6\n\
    Soccer\nIn recent decades, robotic soccer has become an interesting test bed for\
    \ research\nin cooperative multi agent and multi robot system (Kitano et al.,\
    \ 1997). This is\nbecause the environment in which the robots operate is dynamic,\
    \ and hostile by\nwhich coordination becomes extremely challenging (Farinelli\
    \ et al., 2004).\n2.4\nTeam Characteristics\nBefore proposing any design or approach,\
    \ the characteristics of the team have to be\nidentiﬁed. These characteristics\
    \ determine the individual and the team level control\nstructure, strategies or\
    \ steps to distribute the subtasks and to allocate the required\nresources. In\
    \ this section, important team characteristics are reviewed.\n17\n2.4.1\nControl\
    \ Structure\nThe most fundamental decision that has to be made in deﬁning characteristics\
    \ of a\nmulti robotic team is how individuals in the team perform decision making.\
    \ Decision\nmaking is referred to as a “cognitive process resulting in the selection\
    \ of a course\nof action among several alternative scenarios” (Yan et al., 2013).\
    \ In a multi robot\nsystem, decision making is carried out in centralised or decentralised\
    \ manner.\nCentralised:\nIn a centralised team of robots, there must be at least\
    \ one robot\nor computer which has a complete global information of the environment,\
    \ other\nrobots, and the state of the task. This centralised unit is needed to\
    \ perform task\nallocation and coordination among the participating robots in\
    \ the team (Barca and\nSekercioglu, 2013).\nThe centralised approach has been\
    \ studied extensively in various ﬁelds of applica-\ntion.\nTang and Parker (2005)\
    \ developed a centralised based system by which a\ncollection of heterogeneous\
    \ robots reorganise into subteams as needed depending\nupon the requirements of\
    \ the application tasks and the sensory, perceptual, and\neﬀector resources available\
    \ to the robots. Tang and Parker then applied the system\nto the task of box pushing\
    \ and object transportation. The reason that robots have\nto form particular formation\
    \ at the beginning of the task is that not all robots in the\nteam have localisation\
    \ system. The formation will assist the robots without locali-\nsation to navigate.\
    \ Khan et al. (2016) proposed a centralised system for formation\ncontrol of nonholonomic\
    \ mobile robots for obstacle avoidance in a cluttered envi-\nronment. Khan et\
    \ al. tackled the problem by using “proportional-integral average\nconsensus estimators”,\
    \ whereby information from each robot diﬀuses through the\ncommunication network.\
    \ Banﬁ et al. (2016) provides another example of centralised\n18\ncontrol for\
    \ multi robot exploration application. In this approach, robots connect to\nthe\
    \ base station only when making new observations so the communication is per-\n\
    formed more eﬀectively. In exploration in known environment application, Yan et\
    \ al.\n(2010) developed an online sampling-based graph, by which the optimal path\
    \ is cal-\nculated for the robots. Wurm et al. (2008) proposes a coordination\
    \ mechanism\nfor a team of exploring robots using segmentation of the environment\
    \ to determine\nexploration targets for the individual robots. The central unit\
    \ assigns each robot to\na separate segment, thus a balanced distribution of the\
    \ robots over the environment\nis achieved. Yan et al. (2012) developed an empirical-based\
    \ heuristic planning strat-\negy for the goods transportation by multiple robots.\
    \ In here, the focus is to plan the\ntransportation task for each robot by estimating\
    \ the production rate of goods based\non multi-robot coordination. The centralised\
    \ approach is also used for multi robot\npath planning. Luna and Bekris (2011)\
    \ present an eﬃcient and complete approach\nfor multi-robot path planning problems\
    \ using graph-theory. In there, the central\nunit performs the calculations and\
    \ assigns the paths to each robot.\nDecentralized\nA decentralized architecture\
    \ is categorized as either distributed or\nhierarchical (Uny Cao et al., 1997).\
    \ In a distributed approach, there is no central\nagent to perform decision making,\
    \ and individuals are equal from the control the\npoint of view, and each participating\
    \ individual performs decision making completely\nautonomously. In a hierarchical\
    \ architecture, robots are divided into smaller groups,\nand decision making in\
    \ each group is carried out by local decision makers (Uny Cao\net al., 1997).\n\
    Yan et al.\n(2013) refers to this approach as hybrid since it has\nproperties\
    \ of both the centralised and decentralised approaches.\nDecentralised systems\
    \ are applied in various multi robot applications. In search\nand rescue, Penders\
    \ et al. (2011) developed a cooperation mechanism for a team\n19\nof homogeneous\
    \ robots by which a ﬁre-ﬁghter is guided through a smoked ﬁeld\nenvironment. In\
    \ this example, robots always maintain their distance toward the ﬁre-\nﬁghter\
    \ and each other. All the decision making is carried out individually and robots\n\
    utilise only the information collected by their sensors. In area coverage application\n\
    domain, Ranjbar-Sahraei et al. (2012) presents an intelligent approach by which\n\
    a team of robots covers an area cooperatively. In this example, robots mark their\n\
    territory by dispensing pheromone-like materials at the border of the claimed\
    \ area.\nUpon detection of another robots’ pheromone, they perform simple navigational\n\
    movement (e.g. turn left/right). In formation control application domain, Lopez-\n\
    Gonzalez et al. (2016) proposes a formation scheme, based on Lyapunov techniques,\n\
    if the orientation and distance information for each robot is available locally.\n\
    Discussion\nAlthough, with a centralised system, an optimal plan based on the\n\
    global knowledge can be planned, the eﬃciency drops signiﬁcantly as the size of\
    \ the\nteam increases. Besides, it is not robust in relation to dynamic environments\
    \ or\nfailure in communications and other uncertainties (Yan et al., 2013). Moreover,\
    \ a\ncentralised architecture is a leader dependent approach which means with\
    \ failure of\nthe central unit the system will be incapable of operating (Parker,\
    \ 1993).\nOn the other hand, using a decentralized system carries advantages including\
    \ the\ndecrease in delay and impracticalities associated with centralized processing,\
    \ inde-\npendence of computational complexity and size of the team, increase of\
    \ robustness\ntoward the loss of the leader, and eﬃcient use of parallelism. The\
    \ only drawback\nof a decentralized architecture is limited awareness of individuals\
    \ about the global\nknowledge (Barca and Sekercioglu, 2013).\n20\n2.4.2\nDiﬀerentiation\n\
    It is important to decide whether the individuals in a team of robots have the\
    \ same\ncapabilities or not since this will greatly aﬀect how the underlying control\
    \ schemes\nwill operate (Barca and Sekercioglu, 2013).\nA team of robots could\
    \ be either homogeneous or heterogeneous. In a homogeneous\nteam, individuals\
    \ are identical meaning that they have the same hardware and\ncontrol software\
    \ (Uny Cao et al., 1997). Various examples involving homogeneous\nteam of robots\
    \ are in cooperative path planning (Habibi et al., 2016), cooperative\nlocalisation\
    \ (Tsai et al., 2015), search and rescue (Balta et al., 2015); (Couceiro,\n2015),\
    \ cooperative exploration in an unknown environment (Wang and Olson, 2016),\n\
    and target tracking (Zheng and Tan, 2015); (Senanayake et al., 2016).\nIn a heterogeneous\
    \ team of robots, individuals have diﬀerent designs and functional-\nities which\
    \ compliment each other Barca and Sekercioglu (2013). Like homogeneous\nteams\
    \ of robots, heterogeneous teams of robots have been deployed in various ar-\n\
    eas of application including topological map-building (Ramaithitima et al., 2016),\n\
    search and rescue (Beck et al., 2016);(Gunn and Anderson, 2015), cooperative area\n\
    coverage (Pierson and Schwager, 2016), formation control (Sen et al., 2016), cooper-\n\
    ative exploration in an unknown environment (Dai et al., 2016), foraging (Castello\n\
    et al., 2016); (Prorok et al., 2016),and target tracking (Robin and Lacroix, 2016).\n\
    It is important to note that heterogeneity introduces more complexity to the system\n\
    due to (1) highly complex task allocation and (2) more dependency on modelling\n\
    other robots in the team (Uny Cao et al., 1997). Individuals in a heterogeneous\
    \ team\nof robots have diﬀerent capabilities. To quantify this, a concept called\
    \ task coverage\nis introduced. Task coverage (in individual level) measures “the\
    \ ability of an agent or\na member of a team to achieve a given task” (Parker,\
    \ 1994a). At the team level, task\n21\ncoverage determines the level of cooperation\
    \ in the team. When the task coverage\nis high, task can be accomplished without\
    \ cooperation, but otherwise, cooperation\nis necessary. In the homogeneous teams\
    \ of robots, the task coverage is maximal\nand decreases as the group becomes\
    \ more heterogeneous. Unlike homogeneous, in\nthe heterogeneous team of robots\
    \ task coverage is determined based on individual\ncapabilities hence more parameters\
    \ should be considered in the calculation of task\ncoverage (Uny Cao et al., 1997).\n\
    One common trend for task allocation in a homogeneous team of robots is through\n\
    role assignment which will be allocated either at design-time or arises dynamically\n\
    in real-time (Uny Cao et al., 1997).\nNumerous researches have been conducted\n\
    in this ﬁeld and diﬀerent task allocation and role assignment algorithms and tech-\n\
    niques have been developed for homogeneous teams of robots including Contract\
    \ Net\nProtocol (Smith, 1980), Dynamic token generation (Cottefoglie et al., 2004),\
    \ Game\ntheoretic approach (Arslan et al., 2007), etc.\nThere are also approaches\
    \ which\ndo not rely based on any well-known algorithm. Mendoza et al. (2016)\
    \ applied\nrole assignment-based task allocation to a homogeneous team of robots\
    \ deployed in\nROBOCUP 2015 soccer competition. In this particular example, robots\
    \ task, which\nis covering particular zone in the ﬁeld, is carried out by a dynamic\
    \ zone selection\nalgorithm in which robots select speciﬁc zones in the ﬁeld according\
    \ to the ﬂow of\nthe game.\nBut is it possible for a team of homogeneous robots\
    \ to turn into a heterogeneous\none? In theory, a homogeneous team of robots is\
    \ a team in which individuals are\nidentical in terms of software and hardware.\
    \ However, in various scenarios in which\nrobots have learning and self-designing\
    \ algorithms (e.g. (Li et al., 2002), Luke et al.\n(1998)) or structure reconﬁguration\
    \ capabilities (e.g. (Murphy, 2000)), with the\n22\nsuggested deﬁnition, a homogeneous\
    \ team becomes heterogeneous. In this scenario,\nthe task allocation could be\
    \ carried out in both ways depending on the application.\n2.4.3\nCommunication\
    \ Structure\nAnother important characteristic in any team of robots is how the\
    \ team share their\nknowledge about the task and the environment. This is referred\
    \ to as communication\nstructure or interaction structure.\nOver the past decades,\
    \ various classiﬁcations\nare proposed.\nUny Cao et al.\n(1997) classiﬁed multi\
    \ robot communication into\nthree categories: (i)interaction via environment,\
    \ (ii) interaction via sensing, and\n(iii) interaction via communication.\nLater,\
    \ a more abstract classiﬁcation was used to describe interaction models. In\n\
    this classiﬁcation, interactions are either implicit, which encompasses interaction\n\
    through sensing other robots and through the shared environment, or explicit,\
    \ which\nencompasses interaction through communication, (Yan et al., 2013).\n\
    Interaction via environment\nIn this approach, robots utilise the available hints\n\
    in the shared environment created by other robots as a result of their execution\
    \ to\nextract necessary information. This form of interaction is inspired by the\
    \ complex\nnest building behaviours in ants and termites ﬁrst described by Grass´e\
    \ (1959). More-\nover, since the information is perceived and not intentionally\
    \ transmitted, this form\nof interaction is categorised as an indirect form of\
    \ interaction.\nThis form of interaction is extremely popular in the multi robotic\
    \ and swarm com-\nmunity, and there are several examples in which cooperation\
    \ among robots is merged\nas a result of their indirect interaction. Parker et\
    \ al. (2003) presents a robust al-\ngorithm for collective robotic construction.\
    \ In here, the robots, which are equipped\nwith a force sensitive plough and collision\
    \ sensors, aim to clear a designated ﬁeld\n23\nof any rubbles with an algorithm\
    \ called blind bulldozing. In this three state ﬁnite\nstate machine algorithm,\
    \ the robots wander around the ﬁeld and plough the existing\nrubbles into the\
    \ ﬁeld borders. When the material that the robot is pushing exerts\na force which\
    \ is beyond certain threshold, the robot reorient its heading and con-\ntinues\
    \ as before. The similar reorientation occurs if the robot collides with another\n\
    robot. Willmann et al. (2012) presents another scalable and robust cooperative\n\
    team using only indirect form of communication. In this example, the autonomous\n\
    ﬂying vehicles are given the blueprint of the structure and the location where\
    \ they\ncan pick the building materials. In this sequential construction, robots\
    \ place the\nbuilding materials right next to the last placed building block.\
    \ In this way, robots\ninteraction is through the constructed building.\nIn (Ranjbar-Sahraei\
    \ et al., 2012), a team of robots mark their territory by dispensing\nparticular\
    \ pheromone. Upon detection marks of another robot, the robot deviates\nits path.\n\
    In this way, robots can cover the entire area cooperatively.\nZedadra\net al.\
    \ (2016) demonstrates a multi agent foraging algorithm named Cooperative\nSwitching\
    \ Algorithm for Foraging (C-SAF) inspired from the classical ant system.\nIn this\
    \ approach, robots, while searching for food, mark their trail by dispensing\n\
    detectable forms of pheromones. In the meantime, “robots create simultaneously\n\
    and synchronously a pheromone wave front expansion from the nest to the food and\n\
    can use the negative gradient to go back to nest”(Zedadra et al., 2016).\nInteraction\
    \ via sensing\nIn an alternative approach, the necessary information is\nperceived\
    \ by sensing other robots in the team. This approach is inspired by forma-\ntion\
    \ control in ﬂocking birds described by Reynolds (1987). This form of interaction\n\
    is also classiﬁed as an indirect form of interaction since there is no intention\
    \ in con-\nveying the information. One key requirement in this approach is that\
    \ each robot has\n24\nto diﬀerentiate and recognise other robots from other objects\
    \ in the environment\nwhich demands a modelling. The main application is those\
    \ that require some form\nof formation control for example cooperative guidance\
    \ of a ﬁreﬁghter in smoke ﬁlled\nenvironment (Saez-Pons et al., 2010). Saez-Pons\
    \ et al. presents a cooperative team\nof robots that surrounds the ﬁreﬁghter and\
    \ provide environmental information back\nto the ﬁreﬁghter. In this approach,\
    \ robots aim to maintain their formation while\nnavigating using the attached\
    \ range sensors. In (Saska et al., 2013), the robots,\nwhich are performing snow\
    \ ploughing the roads at the airport, monitor each others’\nbehaviour and trail\
    \ with the attached range sensor to adjust their trajectory.\nInteraction via\
    \ communication\nIn this approach, robots transmit their inten-\ntions directly\
    \ to another robot or broadcast via explicit forms of communication\nincluding\
    \ RF messages (e.g. Bluetooth, Wi-Fi), visual signals (e.g. blinking LED,\nRGB\
    \ LEDs), and other methods including ultrasound messages (Uny Cao et al.,\n1997).\
    \ This often requires a dedicated onboard communication module (Yan et al.,\n\
    2013). An interesting taxonomy based on communication presented by Dudek et al.\n\
    (1996) classiﬁes multi robotic teams according to their communication range, com-\n\
    munication topology, and communication bandwidth. Since conveying information\n\
    is intentional, this form of interaction is referred to as a direct form of interaction.\n\
    Extensive works have been carried out in this form of interaction in various ap-\n\
    plication domains. Simmons et al. (2000) demonstrates how a team of robots can\n\
    cooperatively create a global map of the environment. In this example, the mapping\n\
    problem is decomposed in a modular, hierarchical fashion: Each robot maintains\
    \ its\nown local map. A central module receives the local maps and combines them\
    \ into\na single, global map. Rao et al. (2016) presents an algorithm for cooperative\
    \ ex-\nploration in which robots exchange the required information with each other\
    \ rather\n25\nthan a central module. In this approach, Utility Based Return (UBR)\
    \ is used to\nperform collaborative exploration. All vehicles start moving from\
    \ a unique base sta-\ntion and spread out by performing frontier-based exploration.\
    \ Frontiers are selected\nbased on a utility value which is a trade-oﬀ between\
    \ the expected information gain\nat the frontier and the cost to get to it. The\
    \ vehicles in the vicinity of each other\nassign these frontiers among themselves\
    \ based on the utility value so as to maximise\nthe total utility of the exploration.\
    \ The vehicles sense obstacles and map the area\naccording to the obstacles found,\
    \ while detecting new frontiers to decide where to\nmove. When in range with other\
    \ vehicles, the exploration decision is collaborative\nand each vehicle chooses\
    \ a diﬀerent frontier to explore in order to avoid more than\none vehicle exploring\
    \ the same area.\nDiscussion\nAlthough with explicit forms of communication high\
    \ level of accu-\nracy can be achieved, the overall computational cost of the\
    \ system increases as the\nnumber of participating robots increases. With implicit\
    \ forms of communication,\nalthough perception and interpretation of information\
    \ are more complex, the sta-\nbility, ﬂexibility, and fault tolerance of the system\
    \ are better than with explicit\nforms of communication. However, various researches\
    \ suggest that systems in which\ninteraction is carried out by the combination\
    \ of both implicit and explicit forms\nof communication simultaneously can have\
    \ both approaches’ advantages. Various\npieces of literature refer to this form\
    \ of interaction as a hybrid form of interaction\nincluding (Barca and Sekercioglu,\
    \ 2013);(Yan et al., 2013);(Sahin et al., 2008) to\nname a few.\n26\n2.4.4\nRepresentative\
    \ Architecture\nAny multi robot system inevitably needs to deﬁne the aforementioned\
    \ parameters\nprior to system level design or individual behaviour design.\nIn\
    \ fact, these axes\ndetermine the type of behaviours required for individuals.\
    \ For instance, if a team of\nrobots is homogeneous, individuals can model each\
    \ with uniﬁed dimensions. Over\nthe past decade, several architectures have been\
    \ developed for diﬀerent applications.\nFew of these architectures are so well-deﬁned\
    \ that they are adopted as sub-categories\nand directions in multi robot system.\
    \ In this section, few of these architectures are\nreviewed.\nCEBOT (Cellular\
    \ roBOTics system): First introduced by Fukuda and Kawauchi\n(1990). It is a decentralised\
    \ hierarchical architecture. A CEBOT team is divided\ninto smaller groups with\
    \ local leaders. The leader robots are responsible to allo-\ncate subtasks and\
    \ communicate with other leaders. A distinctive characteristic of\nCEBOT is that\
    \ robots dynamically reconﬁgure their formation by changes in the\nenvironment\
    \ as the architecture is inspired by the cellular organisation of biological\n\
    entities (Cao et al, 1997).\nSWARM: It is a distributed, decentralised, autonomous\
    \ large groups of robots\n(n > 10) that normally interact with each other through\
    \ the environment. Swarm\nrobotics inspired mostly by swarm intelligence. Swarm\
    \ intelligence is deﬁned as col-\nlective intelligence that emerges from interactions\
    \ among large groups of autonomous\nindividuals (Barca and Sekercioglu, 2013).\
    \ Sahin (2004) deﬁnes “Swarm robotics as\nthe study of how a large number of relatively\
    \ simple physically embodied agents can\nbe designed such that a desired collective\
    \ behaviour emerges from the local inter-\nactions among the agents and between\
    \ the agents and the environment”. In swarm\nrobotics, the main inspirations stem\
    \ from the observation of social insects (Sahin\n27\net al., 2008). Robustness,\
    \ ﬂexibility, and scalability are built in characteristics of a\nswarm.\nGOFER:\
    \ It is ﬁrst developed by Caloud et al. (1990) to study distributed problem\n\
    solving in indoor environment in a team of mobile robots (Uny Cao et al., 1997).\n\
    In this approach, a central unit, which has a global view of the given task and\
    \ the\nrest of the robots, generate a plan structure which contains task distribution\
    \ and\nteam scheduling. The GOFER architecture was successfully used with three\
    \ physical\nrobots for tasks such as following, box-pushing, and wall tracking\
    \ in a corridor.\nACTRESS (ACTor-based Robot and Equipment Synthetic System):\
    \ First intro-\nduced by Asama et al. (1989), and inspired by Universal Modular\
    \ ACTOR Formal-\nism (Hewitt et al., 1973). This architecture consists of three\
    \ heterogeneous robots\neach responsible for diﬀerent task along with three workstations.\
    \ In the deployed\napplication domain, individuals are not capable to perform\
    \ the given task (e.g. push-\ning a box) alone, and they have to cooperate with\
    \ each other. The cooperation and\ncoordination are achieved through negotiation\
    \ among robots, hence the focus of this\napproach is to improve the eﬃciency of\
    \ the communication among robots.\nALLIANCE: Introduced by Parker (1994b), ALLIANCE\
    \ is developed originally\nto study cooperation in a heterogeneous, small-to-medium-sized\
    \ team of robots.\nALLIANCE is a hybrid in communication architecture since the\
    \ information is per-\nceived from the environment as well as broadcast messages\
    \ in the environment.Although\nwith explicit forms of communication high level\
    \ of accuracy can be achieved, the\noverall computational cost of the system increases\
    \ as the number of participating\nrobots increases. With implicit forms of communication,\
    \ although perception and\ninterpretation of information are more complex, the\
    \ stability, ﬂexibility, and fault\ntolerance of the system are better than with\
    \ explicit forms of communication. How-\n28\never, various researches suggest\
    \ that systems in which interaction is carried out by\ncombination of both implicit\
    \ and explicit forms of communication simultaneously\ncan have both approaches’\
    \ advantages. Numerous pieces of literature refer to this\nform of interaction\
    \ as hybrid (Barca and Sekercioglu, 2013);(Yan et al., 2013);(Sahin\net al., 2008).\n\
    2.5\nMain Questions in Multi Robot System\nThe multi robot system is a group of\
    \ autonomous agents which have a shared goal\nand work together to achieve the\
    \ given task. From the psychological point of view,\nrobots are selﬁsh, utility-driven\
    \ agents (Uny Cao et al., 1997) which only aim to\nsucceed at the given task.\
    \ In this situation, competition rather cooperation emerges\nin a group of single\
    \ robot systems to access the shared resources in the environment\n(Jones and\
    \ Mataric, 2005). It could be said that the key element that separates\nmulti\
    \ robot teams from a group of single robot systems is cooperation (Jones and\n\
    Mataric, 2005).\nCooperation requires three main elements: task partitioning,\
    \ task allocation, and\ncoordination. In any multi robot application, the global\
    \ task has to be analysed,\nand if necessary the global task has to be divided\
    \ into manageable portions referred\nto as sub-tasks. This process is referred\
    \ to as task partitioning. Next, each subtask\nis distributed to one or more individuals\
    \ in the team. This process is referred to\nas task allocation. Finally, robots\
    \ attending sub-tasks require resources (including a\npoint in space) which have\
    \ to be accessed while any probable congestion is avoided.\nThis process is referred\
    \ to as coordination. In this section, these research elements\nand current trends\
    \ to resolve them are reviewed.\n29\n2.5.1\nTask Partitioning and Allocation\n\
    The problem of task allocation is to respond to the question of “which robot is\
    \ doing\nwhich task?”. In order to answer this question, the global task has to\
    \ be decomposed\ninto two or more sub-tasks. Task allocation and task partitioning\
    \ are strongly inter-\ntwined together. According to Dias et al. (2006), there\
    \ are two common approaches\nfor the aforementioned question. In one approach,\
    \ the task is ﬁrst decomposed and\nthen sub-tasks are allocated to the robots\
    \ (also refer to as decompose-then-allocate)\n(Caloud et al., 1990), or the global\
    \ task is given to all individuals, and each robot\nindividually decomposes it\
    \ to smaller manageable pieces (also known as allocate-\nthen-decompose) (Botelho\
    \ and Alami, 1999);(Pini et al., 2011).\nTask partitioning (or decomposition)\
    \ also depends on the characteristics of the task\nand the capabilities of the\
    \ robots. According to the taxonomy provided in (Gerkey\nand Mataric, 2004), a\
    \ team of robots and a task can be classiﬁed based on few\ncharacteristics:\n\
    (I) Single Task robots versus Multi Task robots: Multi Task refers to robots\n\
    which are capable of executing multiple tasks at a time, and Single Task refers\n\
    to robots which are capable of executing only one task at a time.\n(II) Single\
    \ Robot task versus Multi Robot task: A Single Robot task refers\nto a task which\
    \ require only one robot, whereas a Multi Robot task refers to\na task which require\
    \ more than one robot to be completed.\n(III) Instantaneous Assignment versus\
    \ Time extended Assignment: Instan-\ntaneous Assignment means that the task can\
    \ be allocated to individuals in-\nstantaneously and without any extra information.\
    \ Time Extended refers to\ntasks in which task allocation demands more information\
    \ regarding the envi-\n30\nronment, the team, or the completion state of the task.\n\
    There are various methods that the global task can be divided and distributed\
    \ among\na team of robots. In here, the reviewed task allocation methods are divided\
    \ into two\nmain approaches: (I) Static Task Allocation, and (II) Dynamic Task\
    \ Allocation.\nIn static task allocation, prior to task execution, the task is\
    \ divided into smaller man-\nageable sub-tasks and distributed to each individual\
    \ in the team at the design time.\nFor instance in applications related to processing\
    \ an open ﬁeld, the environment is\nﬁrst divided and distributed among robots\
    \ in a way so that robots’ navigation are\nminimised using various theories and\
    \ algorithms including graph theory (Sungjun\net al., 2015), (Fazeli et al., 2010),\
    \ and (Ahmadi and Stone, 2006). Although static\nallocation is fast and eﬃcient,\
    \ it does not tolerate any real-time changes that could\noccur in the environment.\n\
    In dynamic task allocation, the task will be distributed among robots during the\
    \ task\nexecution. According to Karla and Martinoli (2006) The dynamic task allocation\n\
    can further be classiﬁed into two sub-categories: threshold-based and market-based\n\
    task allocation. In threshold-based approaches, the robots utilise the changes\
    \ in the\nenvironment to identify the state of the global task and what is required\
    \ to be done\nnext. A robot resumes its search for hints in the environment until\
    \ it reaches the\nconclusion that the global task is completed. Threshold-based\
    \ task allocation has\nbeen applied to various application domain including foraging\
    \ (Krieger et al., 2000)\nand aggregation (Agassounon and Martinoli, 2002).\n\
    In market-based approaches, robots act as self-interested agents in pursuit of\
    \ indi-\nvidual proﬁt. Tasks often are distributed through auctions held by an\
    \ auctioneer.\nThe auctioneer is either a supervisor agent or one of the robots.\
    \ “Each robot lo-\ncally plans the achievement of the available task, computes\
    \ its cost of execution,\n31\nand encapsulate the cost in the bids” (Dias et al.,\
    \ 2006). Depending on the task,\nthe auctioneer selects the highest or the lowest\
    \ bidder (Karla and Martinoli, 2006).\nSometimes, instead of allocating particular\
    \ task, such as shoot the ball or cover\na speciﬁc area, roles are assigned to\
    \ the robots.\nRoles deﬁne a collection of re-\nlated actions or behaviour (Dias\
    \ et al., 2006). Auction-based task-allocations have\nbeen applied to cooperative\
    \ exploration (Zlot et al., 2002) and object manipulation\n(Gerkey and Mataric,\
    \ 2002).\n2.5.2\nCoordination\nCoordination is the core element of a multi robot\
    \ system by which the overall perfor-\nmance of the system is aﬀected directly\
    \ (Yan et al., 2013). Various works have been\ncarried out in this area. In here,\
    \ we review the available two important categories\nof coordination systems in\
    \ multi robot systems: Dynamic and Static.\nDynamic vs Static\nIn one classiﬁcation,\
    \ coordination can be carried out stati-\ncally, or dynamically. In static coordination,\
    \ which is also known as deliberative or\noﬄine coordination (Todt et al., 2000);(Iocchi\
    \ et al., 2000), robots adapt series of\nconventions prior to engaging in the\
    \ task (Yan et al., 2013). Kato et al. in (Kato\net al., 1992) coordinates a team\
    \ of robots by simply applying few navigational rules\n(e.g. “keep right” or “stop\
    \ at an intersection”, etc). Although coordination can be\nachieved eﬃciently\
    \ and quickly, it requires detailed analysis of the given task, and\nit can easily\
    \ fail by radical changes in the given task or the environment.\nDynamic coordination,\
    \ which is referred to as online or reactive coordination (Todt\net al., 2000);(Iocchi\
    \ et al., 2000), is carried out during execution of a task and is\nbased on “analysis\
    \ and synthesis” of information which can be obtained by means of\ncommunication\
    \ (Yan et al., 2013). As discussed in section 2.4.3, information among\n32\nrobots\
    \ is conveyed explicitly or implicitly. Accordingly, dynamic coordination is\n\
    performed either by transferring intentional messages (i.e.\nexplicit coordination\n\
    (Gerkey and Mataric, 2004)) or as a result of robots local interacting with the\
    \ other\nrobots or the shared environment (i.e. implicit coordination). Dynamic\
    \ coordination\ncan well adapt to changes in the environment in real-time, however,\
    \ coordination is\nbecoming more complex by the increase in complexity of the\
    \ task.\nTaxonomy Based on Individual Knowledge and Awareness\nIn another clas-\n\
    siﬁcation introduced by Farinelli et al. (2004), coordination in the team can\
    \ be cat-\negorised according to individuals’ knowledge and awareness. In this\
    \ classiﬁcation, a\nmulti robot system is one of the following:\nUnaware in which\
    \ individuals have no information about other robots in the team\nwhile they execute\
    \ their share of the task. Since robots have no knowledge about\neach other, the\
    \ communication among the robots cannot be direct. Unaware teams\nare easily scalable,\
    \ thus they are adopted for swarm robotic applications.\nAware, not coordinate\
    \ systems in which robots of the team have the knowledge\nof the presence of other\
    \ robots in the environment, and act together in order to\naccomplish the same\
    \ global goal. However, a robot may not take into account the\nactions performed\
    \ by other robots in order to accomplish its task.\nWeakly coordinated systems\
    \ in which individuals follow explicit predeﬁned co-\nordination protocols. In\
    \ here, coordination protocols refer to the explicit predeﬁned\nrules that select\
    \ particular\nStrongly coordinated, strongly centralized systems in which a robot\
    \ plays the\nrole of the leader and it coordinates other robots in the environment.\
    \ This method\nrequires explicit messages to be transferred among robots. This\
    \ method suﬀers from\nrobustness since the coordination is susceptible to the\
    \ loss of communicating signal.\n33\nStrongly coordinated, weakly centralized\
    \ systems in which the leader is se-\nlected in prior, and it will be selected\
    \ during execution time. In weakly centralised\napproaches, the interaction architecture\
    \ is hybrid. This means that the robots ex-\nchange information via explicit and\
    \ implicit forms of communication. Noreils (1993)\nand Simmons et al. (2001) are\
    \ two examples in which the coordination is achieved\nby means of hybrid interaction\
    \ architecture.\nStrongly coordinated, distributed systems in which each individual\
    \ in the team\nexecutes a coordination protocol, and takes its decision completely\
    \ autonomous.\nThese systems are generally more robust to communication failures\
    \ and robot mal-\nfunctioning, even though these problems may aﬀect the overall\
    \ performance of the\nteam in the accomplishment of the task.\n“The strongly coordinated\
    \ distributed\napproach entails that some kind of communication has to be used,\
    \ and leaves un-\nconstrained the other System Dimensions” (Farinelli et al.,\
    \ 2004).\n2.5.3\nCongestion Avoidance and Clearance\nThe goal of coordination\
    \ is to prevent or resolve probable congestions during task\nexecution. There\
    \ are two sources of congestion in a multi robot system: collisions\nand resource\
    \ conﬂicts. Resource conﬂicts occurs when multiple requests targeting\nthe same\
    \ resource arrive simultaneously (Yan et al., 2013).\nThe problem of re-\nsource\
    \ conﬂict is not speciﬁc to robotic applications. In distributed computing and\n\
    multi-access networking, where a single resource is accessed by diﬀerent processes,\n\
    a resource conﬂict occurs (Uny Cao et al., 1997).\nIn multi robot system, a resource\
    \ conﬂict arises when two or more robots need\nto access a shared space, communication\
    \ media, or to manipulate an object (e.g.\nobject transportation). The current\
    \ trend to avoid or resolve resource conﬂicts is\n34\nto coordinate robots (Yan\
    \ et al., 2013). As mentioned in section 2.5.2, robots in a\nteam can be coordinated\
    \ statically, or dynamically. In static coordination, probable\ncongestions are\
    \ avoided from the beginning of the task by “adoption of a convention”\n(Yan et\
    \ al., 2013). Kato et al. in 1992 coordinate a team of robots to avoid collision\n\
    and congestion by simply applying few navigational rules (e.g. “keep right” or\
    \ “stop\nat the intersection”, etc).\nIn dynamic coordination, robots resolve\
    \ their congestion avoidance during execution\ntime. Various approaches have been\
    \ applied to resolve resource conﬂicts in a team\nof robots during execution time.\n\
    However, the proposed approaches either aim\nto resolve the resource conﬂict via\
    \ a central decision maker or by letting robots\nnegotiate. In central approaches,\
    \ the central unit, which has the global view of\nthe environment, observes the\
    \ trajectory of the robots and plans the trajectories\nof the robots so that any\
    \ deadlock is prevented. This approach is inspired by the\nﬂight controls at the\
    \ airport. At the airport, the ﬂight control, which has the global\nposition of\
    \ each airplane, controls the landing and takeoﬀ of each airplane to prevent\n\
    collisions.\nIn negotiation-based methods, robots, at the point of conﬂict, exchange\
    \ information\nto resolve the congestions. The decision making of the robots and\
    \ further motion\nplanning are completely decentralised and in parallel.\nJager\
    \ and Nebel in 2001\ndescribed a decentralised method to resolve a spatial resource\
    \ conﬂict by which\nrobots exchange information about their planned trajectories\
    \ whenever the distance\nbetween two robots drops below a certain value. Using\
    \ the exchanged information,\nrobots can determine whether they are in danger\
    \ of a collision/congestion or not.\nIn case of detection of a possible collision,\
    \ robots monitor each others trajectory,\nand if necessary they introduce time\
    \ delays in certain points of their movements.\n35\nOn the other hand, if a deadlock\
    \ is detected, each robot plans diﬀerent trajectories\nuntil the congestion is\
    \ resolved.\nMarcolino and Chaimowics in 2009b proposed\nanother method for avoiding\
    \ congestion and collision in a swarm of robots moving in\nopposite direction.\
    \ In their method, each robot perceives the possibility of collision\nand warns\
    \ their teammates through local sensing and intentional communication.\nUpon receiving\
    \ the warning, the following robots change their trajectories to avoid\ncongestion.\
    \ In another research (Marcolino and Chaimowicz, 2009a), a coordination\nalgorithm\
    \ is proposed for a scenario in which robots try to access the same target.\n\
    The algorithm deﬁnes an action based on a probabilistic ﬁnite state machine and\n\
    relies on the local sensing and communication.\nThe current trend in multi robot\
    \ system and swarm robotic is to resolve the con-\ngestion via explicit forms\
    \ of communication. To the best of our knowledge, there is\nnot any systematic\
    \ approach which relies only on implicit forms of communication\nto resolve resource\
    \ conﬂicts.\n2.6\nCooperative Farming: Review and Analysis\nAlthough multi robot\
    \ system and swarm robotic have been around for decades, these\ntopics are still\
    \ fresh in agricultural robotics. Agricultural tasks, particularly those\nrelated\
    \ to open farms, have similarities with the previous area of application covered\n\
    in swarm robotics and multi robot systems. Hence, many of the experienced gained\n\
    in these examples can be used for cooperative farming. Liekna and Grundspenkins\n\
    (2014) match the areas of application in swarm robotic and multi robot system\
    \ with\nthe task of cereal cultivation. In here, the author suggests that a team\
    \ of robots,\nwhich are capable of harvesting and transportation, are required\
    \ to:\naggregate : to achieve the starting point of the mission.\n36\nform patterns,\
    \ self-deployment, area coverage : to eﬀectively cover the entire\nﬁeld.\nself-assemble\
    \ : with the transporter.\nobject clustering and assembling : to mow cereal to\
    \ a particular point of the\nﬁelds, and to store goods eﬀectively in the warehouses.\n\
    forage : to go into the ﬁeld, and bring back the goods from the ﬁeld.\nIn this\
    \ section, a short summary of the tasks considered in this thesis is provided,\n\
    and similar application domains and questions are identiﬁed. Next, the environment\n\
    in which the robots are assumed to be operating is described. Finally, the related\n\
    works are reviewed.\n2.6.1\nAgricultural Tasks\nIn multi robot systems, it is\
    \ necessary to analyse the global task before any fur-\nther development is performed.\
    \ Task analysis helps to identify design questions,\nrequirements, and solution\
    \ boundaries.\nTasks in open ﬁeld agricultural robotics can be categorised in\
    \ two classiﬁcations;\n(1) Those in which the ﬁeld can be processed from diﬀerent\
    \ points at the same\ntime, hereafter referred to as independent tasks. (2) Those\
    \ in which the ﬁeld has to\nbe processed sequentially, hereafter referred to as\
    \ sequential tasks. In independent\ntasks, the result of execution of one robot\
    \ will not aﬀect others.\nIn this thesis, three agricultural tasks are considered:\
    \ ploughing (or seed-bed prepa-\nration), spraying (of chemicals), and harvesting.\
    \ These tasks are diﬀerent in nature\nand require diﬀerent cooperative mechanisms.\
    \ In the task of ploughing, the ﬁeld\nis processed sequentially, and in a particular\
    \ order. This is because the result of\n37\nexecution of the current part of the\
    \ ﬁeld depends on the results of the previous\nones. In the task of spraying,\
    \ the ﬁeld is processed independently, meaning that the\nﬁeld can be processed\
    \ from both directions and from diﬀerent locations in the ﬁeld.\nHowever, it has\
    \ to be carried out in a restricted number of times. In harvesting, the\nredundancy\
    \ in execution does not aﬀect the results, and the ﬁeld can be processed\nin any\
    \ order. Other tasks including seedings, seed mapping, and etc belong to one\n\
    of these three categories, and they can utilise the implemented approaches. Even\n\
    though all tasks are executed within the same framework, each task has diﬀerent\n\
    properties and characteristics, hence diﬀerent cooperative mechanisms are required.\n\
    2.6.2\nAnalysis of the Related Works\nAs mentioned, there are few examples in\
    \ which agricultural tasks are tackled by a\nteam of cooperative robots. One example\
    \ of such system is RHEA (Robot Fleets for\nHighly Eﬀective Agriculture and Forestry\
    \ Management) European project (RHEA,\n2014).\nThe RHEA project is aimed to improve\
    \ product quality by diminishing\nchemical usage in weed control (Drenjanac and\
    \ Tomic, 2013). During execution,\nrobots have to continuously report their status\
    \ and position to the base station. At\nthe base station, the transmitted status\
    \ and position of the robots are analysed.\nOnce all the required information\
    \ is received, area decomposition algorithm divides\na working area into cells\
    \ which are then dynamically assigned to robots (Drenjanac\net al., 2014). The\
    \ RHEA presents a robust and scalable system, however, one main\nissue of this\
    \ approach is that robots have to be within the communicating signal\nand that\
    \ will limit the area that the team can cover during execution.\nAnil et al. (2015)\
    \ presents another swarm system for agricultural application. In\nthis example,\
    \ low cost multi-functional team of robots are developed. Each robot is\n38\n\
    capable to reconﬁgure itself so that it can carry out diﬀerent agricultural processes\n\
    such as ploughing, seeding, spraying, and harvesting. Robots are equipped with\
    \ ap-\npropriate tools to carry out each task. In addition, each robot is also\
    \ equipped with\na ZigBee transceiver for communication with the central unit.\
    \ In case of ploughing,\nﬁrst, few robots are sent out for scouting the area.\
    \ Then the next group of robots is\nsent to plough the ﬁeld based on the obtained\
    \ scouting data in the central unit. In\nthe presented work, the task allocation\
    \ is carried out based on the initial position of\nthe robots as well as the received\
    \ data from the central unit. The presented system\nis robust and scalable, but\
    \ the individuals are sharing their information by a central\nunit. This makes\
    \ the system vulnerable to the loss of the central unit.\nLi et al. (2015) presents\
    \ another central-based cooperative model for a heterogeneous\nteam of ground\
    \ robots applied in citrus harvesting activity in a known environment.\nIn this\
    \ example, a robot team is divided into multiple smaller groups with local\nleaders,\
    \ and each group is sent to diﬀerent tree locations. At each location, the\nrobots\
    \ in each team are divided into two groups: one to shake the tree, and one to\n\
    collect the fruits. At the beginning of the task, when the initial signal is received\
    \ by\nany individual in the team, the central unit, which knows the position of\
    \ all robots\nand the tasks, selects an appropriate formation from a predeﬁned\
    \ collection and\nchooses the leader in the team based on their positions in the\
    \ selected formation.\nOnce the leader is determined by the central unit, the\
    \ position of the followers also\nare determined based on the selected formation.\
    \ Again, if the central unit fails the\nentire unit will fail.\nNoguchi et al.\
    \ (2004) developed a master-slave team of two robots that constantly\ncommunicate\
    \ over Wi-Fi for distance commanding and distance adjustment. The\nleader robot\
    \ makes the decisions and transmits appropriate commands to the fol-\n39\nlower\
    \ robot. The non-leader robot follows the leader and sends its status in terms\n\
    of current location back to the leader at the frequency of 2Hz. The cooperative\n\
    execution is carried out by two behaviour-based algorithms: FOLLOW and GOTO.\n\
    In GOTO algorithm, the leader requests the follower to go to a speciﬁc location\
    \ in\nthe ﬁeld, and in FOLLOW algorithm, the leader wants the non-leader unit\
    \ to simply\nfollow the leader at a speciﬁc distance with a speciﬁc angle.\nSimilarly,\
    \ Zhang and Noguchi (2016) presents a cooperation mechanism for a team of\ntwo\
    \ driverless tractors for cooperative navigation in an open ﬁeld. In this approach,\n\
    a robot is either client or server. The server robot receives the information\
    \ from the\nclient robot via Bluetooth messages, and it performs series of calculations\
    \ to obtain\nthe correct velocity and path for itself and the client robot. It\
    \ is worth noting that\nthe paths are predetermined and they are given to both\
    \ robots.\nRoldan et al. (2016) developed a heterogeneous team of two robots for\
    \ the purpose of\ngreenhouse monitoring. The team consists of an Unmanned Ground\
    \ Vehicle (UGV)\nand an Unmanned Arial Vehicle (UAV). the UGV carries the UAV\
    \ on a platform\nwhile it develops its tasks, and when it is required, the UAV\
    \ takes-oﬀ, performs some\ntasks and lands on the UGV (Roldan et al., 2016). To\
    \ increase the robustness, a\ncharging pad on the UGV is mounted so the UAV can\
    \ be recharged while it is being\ncarried, also, there are charging locations\
    \ in the greenhouse for refuelling the UGV.\nThe UAV carries the required monitoring\
    \ sensors (including humidity, CO2, and\nTemperature), and the team travels to\
    \ particular locations to measure the required\nvariables.\nArguenon et al. in\
    \ 2006 developed a multi agent system in simulation for transport-\ning grapes\
    \ in vineyard. The proposed system is for a heterogeneous team of robots.\nThere\
    \ are two types of robots in the team: large transportation robots and small\n\
    40\ntransportation robots. Large transportation robots have three diﬀerent behaviours:\n\
    move to one of the transport robots, move to the transportation centre, or wait\
    \ for\ninstruction. Small transportation robots also have three rules: move to\
    \ one of the\ntransport robots, move to one of the harvesting robots, or wait\
    \ for instructions. Each\nrobot, regardless of their size, must have some displacement\
    \ strategies or behaviours:\nReachTarget which deﬁnes the desired location for\
    \ the robot, Perception which is a\nprocedure consisted of obtaining some information\
    \ about the neighborhood of the\nrobot from the diﬀerent sensors available and\
    \ Avoid whenever an obstacle is detected\nand the desired location of the robot\
    \ can be called into question, as for example when\nit cannot move. Arguenon (2006)\
    \ utilised a centralised system to provide a global\nview of the farm to transportation\
    \ robots over Wi-Fi by sending speciﬁc messages\nwhenever it is requested. Each\
    \ message consists of four main components: a state\nwhich refers to the context\
    \ of the message, recipient which corresponds to the ID of\nthe robot that should\
    \ receive the message, transmitter which corresponds to an ID\nof the robot that\
    \ sends the message, and location which refers to the location of the\ntransmitting\
    \ robot.\nIn a similar application, Kong et al. (2006) presents a cooperative\
    \ mechanism by\nwhich a team of autonomous and homogeneous lawn mowers processes\
    \ a ﬁeld. The\nrobots in this approach are assumed to have communication capabilities.\
    \ At the\nbeginning, the ﬁeld is decomposed into smaller pieces, and each is allocated\
    \ statically\nto a robot. As robots are processing the allocated section, they\
    \ regularly share their\ninformation to optimise their performance and determine\
    \ where to process next\nusing customised task selection protocols.\nSaska et\
    \ al. (Saska et al.) presents a homogeneous team of robots for a snowplough\n\
    application at the airport. The system aimed to control the robots in the sweeping\n\
    41\nand moving modes. In the sweeping mode, the snowplough formations are capable\
    \ to\ncompletely cover the surface of runways by following their axes. The moving\
    \ mode is\nimportant for the autonomous design of manoeuvres required for displacement\
    \ of the\nformation into the position of the next sweeping task. Besides, the\
    \ turning on the\nspot in a scattered environment is enabled for large formations\
    \ in the moving mode.\nThis is an important skill of the system that enables to\
    \ turn the sweeping formations\nat the end of blind runways or in a case of runways\
    \ blocking. The demonstrated\napproach utilises the leader-follower method in\
    \ which non-leader robots track the\nleaders trajectory in a predeﬁned spacing\
    \ as if they interact with each other using\nthe environment, and robots maintain\
    \ their relative distance to the leader in a\ncurvilinear coordinate system.\n\
    2.6.3\nThe Problem of Localisation in Agricultural Robotics\nIn autonomous open-ﬁeld\
    \ farming in which agricultural tasks such as ploughing and\nspraying need to\
    \ be performed in a large area, the need for navigation and localisa-\ntion is\
    \ prominent. Without localisation, mobile robots will lose their orientation and\n\
    global position in the farm which result in the failure of the operation. Numerous\n\
    researches have been conducted and as a result, diﬀerent localisation systems\
    \ in the\nfarm have been developed and successfully ﬁeld tested.\nGenerally, localisation\
    \ and position measurement can be divided in two main groups:\nrelative (also\
    \ known as dead-reckoning) and absolute (also known as reference-based)\nposition\
    \ measurements. In relative localisation, positions can be measured relatively\n\
    using Odometry and inertial navigation sensors such as Gyroscope and Accelerom-\n\
    eter (Borenstein et al., 1997). However, relative approaches (standalone) do not\n\
    provide suﬃcient accuracy for agricultural purposes. For instance, odometry, which\n\
    42\nis inexpensive with good short-term accuracy with the high sampling rate,\
    \ consists\nof systematic and un-systematic errors (Borenstein and Feng, 1996).\
    \ Systematic\nerrors are resulted from kinematic imperfections of the robot and\
    \ are measurable\nusing UMBmark test. The source of unsystematic errors is the\
    \ ﬂoor that the robot\nis moving on, so measuring such error is not useful especially\
    \ in the farm where\nthe tracks and roads are bumpier and slippage and sticking\
    \ are more probable. On\nthe other hand, inertial-based navigation systems which\
    \ do not need any external\nreferences are subject to drift over time (Borenstein\
    \ et al., 1997).\nAlternatively, robots position can be obtained using reference-based\
    \ techniques. Ac-\ncording to Borenstein et al. (1997), these techniques can be\
    \ categorized as follows:\nMagnetic Compasses, Active Beacons, Global Positioning\
    \ Systems, Landmark Nav-\nigation, and Model Matching.\nGlobal Positioning System:\
    \ Nowadays GPS is widely being used to obtain the\nabsolute position of the robots\
    \ in an open ﬁeld. Researchers at Stanford Univer-\nsity successfully guided a\
    \ John Deere 7800 tractor on prescribed straight row courses\nwith headland turns\
    \ (Bell, 2000). Although the results were promising, the accuracy\nwasnt enough\
    \ for precision farming. Instead, real-time kinematic version of GPS (or\nGPS-RTK)\
    \ brought enough accuracy for the localisation problem in agriculture. Lo-\ncalisation\
    \ systems demonstrated by (Stoll and Kutzbach, 2000) and (Thuilot et al.,\n2001)\
    \ capable of navigating a vineyard or orchard using GPS-RTK are the examples\n\
    of such localisation system. This navigational technique is suitable for open\
    \ ﬁelds\ndue to the fact that GPS signals could not be interfered by RF signals\
    \ in the ﬁeld.\nNavigational Landmark-based Localisation system: The lack of GPS\
    \ avail-\nability due to environmental conditions such as large canopies need\
    \ for prior sur-\nveying of the area, and unreliable connectivity in certain areas\
    \ compels to search\n43\nfor GPS-free localisation techniques. Marden and Whitty\
    \ (2014) introduced a GPS-\nfree approach for navigating in a vineyard. The system\
    \ utilizes LiDAR sensor to\nextract point clouds from the environment and perform\
    \ simultaneous localisation\nand mapping (SLAM). In this work, Localisation and\
    \ mapping is performed by ex-\ntracting features from the rows in the vineyard\
    \ in an EKF-SLAM framework. Then,\nRANSAC (RANdom Sample Consensus) is used to\
    \ extract lines from the 2D Li-\nDAR laser scan data and parametrised in polar\
    \ coordinates. Then the navigation\nis achieved by the speciﬁc control law. The\
    \ system has been tested intensively in\nsimulation only. The results of the system\
    \ promise 2.5 meters accuracy which is\nenough for the ﬁeld of application. Nonetheless,\
    \ the localisation accuracy slowly\ndrifts over time. However, in open ﬁeld area\
    \ in which landmarks are scarce, this\ntechnique cannot be utilised.\nVision-Based\
    \ Localisation System: In another GPS-free approach, tractors are\nable to localise\
    \ themselves in the farm using artiﬁcial landmarks. Imou et al. (2009)\ndescribes\
    \ a system in which an Omni-directional camera is used to trilaterate the\nposition\
    \ of a robot in the farm. The key advantage of this approach is the robot has\n\
    a panoramic view of its environment, which makes it possible to create features\
    \ that\nare variant to the robots orientation, yet each tractor requires direct\
    \ line of sight\nwith all available landmarks, so this approach is not suitable\
    \ for multi robot system\nas one robot could block each other’s view.\nRFID Localisation\
    \ System: The recent advances in RFID (Radio Frequency\nIDentiﬁcation) have made\
    \ this particular technology more useful for agricultural\nindustry.\nThe most\
    \ important characteristics of RFID tags is that they do not\nrequire line of\
    \ sight to be read, hence they are suitable in the crowded environment\nor in\
    \ multi robot scenario. Moreover, having longer range readability (even more\n\
    44\nthan 100 meters), fast reading rate (up to 100 tags per second), and data\
    \ storing\ncapabilities (up to 4KB in passive mode and up to 1 MB in active mode)\
    \ will make\nthem even more suitable for multi robot and agricultural applications\
    \ (Ruiz-Garcia\nand Lunadei, 2011).\nRFID can be used in food traceability, animal\
    \ identiﬁcation and tracking, livestock\napplication, and precision agriculture.\
    \ In precision farming, RFID tags can be used\nfor localisation purposes, however,\
    \ the accuracy of the localisation results depends\ncompletely on the type of\
    \ RFID that is being used. Generally, there are two types of\nRFID tags: Active\
    \ and Passive. A passive RFID tag comprises a micro-circuit and\nan antenna, and\
    \ they are active whenever they are within the range of RFID readers.\nActive\
    \ RFID tag, however, is integrated with an external power source which gives\n\
    the active tag the capability to transmit information about itself at the greater\
    \ range\neither by constantly transmitting information or whenever it is prompted.\
    \ One great\nadvantage that active RFID tags could bring to the system is that\
    \ they require very\nlow signal strength from the reader to initiate their operation.\
    \ This means that\nthey can operate in the noisy environment and/or long range.\
    \ Moreover, their range\ncould go to 100 meters which make them suitable for trilateration\
    \ based localisation\nfor outdoor applications. It is worth mentioning that trilateration\
    \ is a method to\ndetermine the position of an object based on simultaneous range\
    \ measurements from\nthree reference nodes at a known location using only the\
    \ magnitude of the received\nsignal also known as RSSI (Received Signal Strength\
    \ Indicator) (Chung and Lau,\n2007).\nYet, diﬀerent researches have utilised passive\
    \ RFID tags in localisation application.\nIn (Choi et al., 2009), a system is\
    \ developed to use the properties of PASSIVE UHF\nRFID such as RSSI (Received\
    \ Signal Strength Indicator) to localise a robot in an\n45\noutdoor environment.\
    \ The result was not satisfactory as the RSSI value can be\neasily changed by\
    \ the environment. Active RFID tags, on the other hand, provides\nmore accurate\
    \ and consistent localisation information as demonstrated in various re-\nsearches.\
    \ In (Huang et al., 2006), a cost-eﬀective probabilistic approach is simulated\n\
    via MATLAB with errors less than 7 meters. Chawla and Robins (2011) proposed\n\
    an accurate, scalable and reliable RFID-based approach for localising objects\
    \ by\ndeploying four active RFID tags in the environment and used RSSI and intersecting\n\
    circle technique to estimate the location. They also calibrated the tags to overcome\n\
    the problem raised by Choi et al..\nHybrid Approaches: Despite shortcomings of\
    \ relative positioning sensors (odom-\netry, Accelerometer, and Gyroscope), results\
    \ of infusion of dead reckoning solutions\nwith other techniques (including low-cost\
    \ GPS receivers) are to some extend promis-\ning. In (Oksanen et al., 2005), a\
    \ tractor guiding system is developed by infusing\nIMU (Inertial Motion Unit)\
    \ data with coordinates obtained from a low-cost GPS\nreceiver via ﬁrst order\
    \ Kalman ﬁlter. It was concluded that the system is reliable for\nshort distances\
    \ as short time noise type errors in positions can be eliminated, but\nlongtime\
    \ bias type error is impossible to eliminate. In another example, coordination\n\
    obtained from a low-cost global positioning system is infused with low cost inertial\n\
    sensors and a technique for vision-based row tracking (English et al., 2013).\
    \ Vehicle\nroll and pitch is estimated with the infusion of visual horizon detection\
    \ and IMU\ndata which are combined with a simple Kalman ﬁlter. As a result, the\
    \ positioning\nsystem is capable of handling long correction GPS signal dropouts.\n\
    In the current research, we are not considering the problem of localisation in\
    \ the\nteam since the current results from the related works can successfully\
    \ provide the\nrequired information. The currently available localisation systems\
    \ for agricultural\n46\napplications can provide up to centimetre precision and\
    \ they are commercially avail-\nable. One example of such navigation system is\
    \ AutoDrive developed by ATC (Au-\ntonomous Tractor Corporation). AutoDrive is\
    \ an autonomous navigation system\nwhich does not suﬀer from dead spot or no reception\
    \ like the GPS-based system\nand it is not aﬀected by sun-spots. One advantage\
    \ of AutoDrive is its integrability\nto any autonomous tractors. John Deere, an\
    \ agricultural machinery company, has\ndeveloped an autonomous tractor which utilises\
    \ AutoDrive. The current direction\nof research in this ﬁeld is aimed to reduce\
    \ the cost of the proposed approaches while\nmaintaining high accuracy up to few\
    \ centimetres.\n47\n2.7\nConclusion\nIn this chapter, we reviewed the main problems,\
    \ which is occur in every coopera-\ntive team of robots, possible directions to\
    \ resolve them, and analysis of the related\nsolutions. Our investigation suggests\
    \ that the current trend in multi robot systems\nin the agricultural application\
    \ domain is to resolve the cooperation solutions via ex-\nplicit forms of communication.\
    \ This is insuﬃcient and unreliable because depending\non explicit forms of communication\
    \ makes the system vulnerable to the loss of the\ncommunicating signal, limits\
    \ the area of coverage, limits team ﬂexibility to the dy-\nnamic changes that\
    \ could occur during execution, and increases the computational\ncomplexity of\
    \ the system. Instead, the current research aims to resolve the coop-\neration\
    \ related problems via implicit forms of communication. Speciﬁcally, it aims\n\
    at developing a fully autonomous self-organising robotic team that does not depend\n\
    on the number of participating robots (scalable), does not require neither central\n\
    unit nor explicit negotiation, is aﬀected by loss of a participating robot (robust),\n\
    and can be further improved or integrated with diﬀerent teams (heterogeneous and\n\
    ﬂexible). To the best of our knowledge, such system does not exist in the community\n\
    of agricultural robotics and it is the ﬁrst of its kind.\nIn the following chapters,\
    \ we look into three diﬀerent tasks: ploughing, spraying,\nand harvesting. As\
    \ mentioned, these tasks provide diﬀerent constraints to the team\nof robots,\
    \ thus robots have to behave diﬀerently.\n48\nCHAPTER 3\nCOOPERATIVE PLOUGHING:\
    \ DESIGN AND\nIMPLEMENTATION\nIn this chapter, ploughing in a team of robots is\
    \ discussed. In 3.1\nthe task of ploughing is analysed, and the design considerations\n\
    and requirements are described in 3.2. Potential issues including\ninter robot\
    \ interaction model between robots for task allocation us-\ning local data acquired\
    \ from 2D-camera (3.3), congestion avoidance\n(3.5) using pre-deﬁned navigational\
    \ conventions and ﬂee-opposite\nalgorithm, and collision avoidance (3.6) using\
    \ artiﬁcial potential\nfunctions are described in words along with appropriate\
    \ ﬂow charts\nand the implemented C++ codes in appendix sections. Two team\nlevel\
    \ cooperative algorithms (FIFO and LIFO) for ploughing are\ndescribed in two diﬀerent\
    \ sections: the main ploughing (3.7), and\nthe furrow transitioning (3.8). The\
    \ proposed approaches are anal-\nysed and an optimised approach (self-organised)\
    \ is described, and\ncompared with other approaches in (3.9).\nThe points of this\
    \ chapter have been published in the following:\nJanani, A., Alboul, L. and Penders,\
    \ J., 2016, May. Multi-agent cooper-\native area coverage: case study ploughing.\
    \ In Proceedings of the 2016\nInternational Conference on Autonomous Agents and\
    \ Multiagent Sys-\ntems (pp. 1397-1398). International Foundation for Autonomous\
    \ Agents\nand Multiagent Systems.\n3.1\nPloughing Analysis\nPloughing is part\
    \ of the seedbed preparation process, and it is carried out by drag-\nging a ploughing\
    \ mouldboard across the ﬁeld. The ploughing mouldboard digs deep\ninto the soil\
    \ and disperses the soil in one direction. Ploughing removes soil com-\npaction,\
    \ buries the weed, and brings up the nutrient materials to the surface.\nPloughing\
    \ creates a two-part pattern: (1) A narrow trench referred to as furrow,\nand\
    \ (2) a hill-top soil which is called ridge. The dimensions of the furrows depend\n\
    49\non various environmental factors (including soil type, the frequency of rain,\
    \ and etc)\nand the type of crop that will be harvested. However, the distance\
    \ between two\nconsecutive furrows ranges between 25 cm and 50 cm.\nFigure 3.1:\
    \ A farmer is ploughing a ﬁeld using tractor equipped with conventional\nmouldboards\
    \ (Fao, 1997).\n3.1.1\nPloughing Patterns\nPloughing determines the amount of\
    \ crop that can be harvested. There are two\npatterns by which a ﬁeld can be ploughed:\
    \ straight ploughing (Figure 3.2(a)),\nand zigzag ploughing (Figure 3.2(b)).\n\
    Figure 3.2: Ploughing patterns: (a) Straight ploughing, (b) Zigzag ploughing.\n\
    Both approaches provide the same area for ploughing given the following:\n50\n\
    L × W = wf\nK\nX\n1\nlfi\n(3.1)\nIn here, the length and width of the ﬁeld are\
    \ represented by L and W respectively,\nwf is the width of a furrow, K is the\
    \ number of furrows ploughed in a ﬁeld, and lf\nis the length of a furrow.\nHowever,\
    \ between the two ploughing patterns, straight ploughing distributes the\nsame\
    \ cultivable (meaning farmable) area with the lower number of furrows which\n\
    also means less turning at the end of each round of ploughing.\nEvery time a furrow\
    \ is completed, the ploughing unit has to travel to the beginning\nof the next\
    \ furrow. This stage is referred to as furrow transitioning in which the\nploughing\
    \ unit uses the top side or bottom side of the ﬁeld to travel to the next\nfurrow\
    \ (see Figure 3.3). The area that is used for furrow transitioning is called\n\
    headland. Headlands are unprocessed areas that should be kept as small as possible\n\
    since they limit the length of cultivable area (h1 and h2 in Figure 3.5 and 3.6).\n\
    Figure 3.3: Ploughing units are performing furrow transitioning (Estate, 2015)\n\
    This allows future ﬁeld processing (including seeding, spraying, harvesting, and\
    \ etc)\nto be executed faster.\nFurthermore, since in straight ploughing the furrows\
    \ are\n51\ncreated homogeneously, the ﬁeld can be processed simultaneously. Whereas,\
    \ with\nzigzag ploughing each furrow has to be processed separately. Therefore,\
    \ straight\nploughing is the most popular and commercially endorsed ploughing\
    \ pattern. Thus\nin this research, only ploughing in straight lines is considered.\n\
    3.1.2\nPloughing Restrictions\nWhen a furrow is created, a ridge is also created.\
    \ During ploughing, the ploughing\nunit uses the previously created furrow to\
    \ navigate while the soil removed to create\na furrow is turned up and dumped\
    \ in the previous furrow (see Figure 3.1). In order\nto keep this pattern, three\
    \ rules have to be followed: (i) a location can be ploughed\nif and only if the\
    \ previous location is ploughed, (ii) furrows can be created only\nonce, and (iii)\
    \ furrows cannot be created simultaneously. These restrictions make\nploughing\
    \ a sequential and dependent task.\n3.1.3\nPloughing Mouldboards and Furrow Transitioning\n\
    Besides the restrictions caused by the nature of ploughing, the type of ploughs\n\
    constrains the task execution even more. There are various types of ploughs (e.g.\n\
    Chisel, Ridge, Disk, and etc), but plough mouldboards are the popular and widely\n\
    used ploughs. Plough mouldboards can be classiﬁed into two categories: (1) con-\n\
    ventional mouldboards by which the soil is dispersed in one ﬁxed direction, and\
    \ (2)\nreversible mouldboards by which the dispersion of the soil can be set in\
    \ two opposite\ndirections. Traditionally, a plough would have single mouldboard\
    \ by which only a\nsingle furrow could be created at a time. However, nowadays\
    \ ploughs have multiple\nmouldboards and few furrows can be created at a time.\
    \ This reduces the ploughing\ntime, but the mouldboard weight increases signiﬁcantly,\
    \ and in return, they require\nstronger and bigger tractors to drag them across\
    \ the ﬁeld.\n52\nFigure 3.4(a) and (b) demonstrates 4-plough conventional and\
    \ reversible mould-\nboards respectively.\nFigure 3.4: Plough mouldboards: (a)\
    \ 4-plough conventional mouldboard, (b) 4-\nplough reversible mouldboard. (Agriavis,\
    \ 2015)\nA ploughing unit is capable of creating a limited number of furrows at\
    \ a time, so\nit has to repeat ploughing until the ﬁeld is completely ploughed:\
    \ maximum number\nof furrows are created. Maximum number of furrows in a ﬁeld\
    \ can be calculated as\nfollows:\nK = ⌊W\ndf\n⌋\n(3.2)\nIn here, W is the width\
    \ of the ﬁeld, df is the width of a furrow, and ⌊ W\ndf ⌋ represents\nthe largest\
    \ previous integer.\nThe attached mouldboards determine where to plough next.\n\
    With conventional\nmouldboards, ploughing is carried out in loops, and either\
    \ starts from one side of\nthe ﬁeld, and ends in the middle ( Figure 3.5 (a)),\
    \ or starts in the middle and ends\non one side of the ﬁeld (Figure 3.5 (b)).\
    \ Whereas with reversible mouldboards,\nploughing starts in one side of the ﬁeld\
    \ and ends on the other side of the ﬁeld(see\nFigure 3.6).\nWith a reversible\
    \ mouldboard, furrows are created in a consistent\npattern (i.e. a ridge will\
    \ always accompany a furrow). However, with conventional\nmouldboard, the created\
    \ pattern on the ﬁeld is inconsistent, meaning that in one\n53\nhalf of the ﬁeld\
    \ the soil is dispersed into one direction and on the other half the\nsoil is\
    \ dispersed on the opposite direction. Consequently, this will result in either\n\
    “Closing Furrow” (two consecutive furrows) or “Opening Crown” (two consecutive\n\
    ridges) in the middle of the ﬁeld.\nFigure 3.5: Pattern of ploughing with conventional\
    \ mouldboard: (a) ploughing starts\non one side and ends in the middle, (b) ploughing\
    \ starts in the middle and ends on\none side.\n3.1.4\nPloughing Cost\nThe task\
    \ of ploughing can be re-expressed as a navigational task in which a ploughing\n\
    unit has to travel between series of coordinates. While navigating, the ploughing\n\
    unit is either ploughing or furrow transitioning. With this, a ploughing cost\
    \ function\ncan be expressed in terms of the travelled distance as follows:\n\
    54\nFigure 3.6: Pattern of ploughing with a reversible mouldboard: ploughing starts\n\
    from one side and ends on the other side.\nPC = distpl + distft\n(3.3)\nWhere,\
    \ PC is the ploughing cost, distpl is the required travelled distance during\n\
    ploughing, and distft is the required travelled distance for furrow transitioning.\n\
    If only one furrow can be ploughed at a time, regardless of the attached plough\n\
    mouldboard, the required travelled distance during ploughing of K number of fur-\n\
    rows with lf as the length of a furrow can be obtained as follows:\nDpl = K.lf\n\
    (3.4)\nHowever, the type of the attached ploughing mouldboard determines how far\
    \ the\nploughing unit is required to travel during furrow transitioning period.\
    \ With con-\nventional mouldboard, the required travelling distance during furrow\
    \ transitioning\n55\nis determined as follows:\nDft = K\n2 (W − df)\n(3.5)\nWhereas,\
    \ with a reversible mouldboard the required distance for furrow transitioning\n\
    is:\nDft = (K − 1).df\n(3.6)\nWhere, Dft is the required travelling distance for\
    \ furrow transitioning, K is the\nnumber of furrows, and df is the distance between\
    \ two adjacent furrows.\nComparing 3.5 and 3.6, it can be concluded that ploughing\
    \ with a reversible mould-\nboard is more cost eﬀective since the travelling distance\
    \ required during furrow\ntransitioning is reduced signiﬁcantly.\n3.2\nDesign\
    \ Requirements and Considerations\nSection 3.1 considers generic ploughing with\
    \ a single unit (equipped with a sin-\ngle plough mouldboard).\nIn the current\
    \ section, ploughing by a team of robots\nis discussed. But before we proceed,\
    \ the term cooperation within the context of\ncooperative ploughing has to be\
    \ deﬁned.\nDeﬁnition 3.1 A ﬁeld is cooperatively ploughed if the sum of furrows\
    \ ploughed by\neach participating individual is equal to the total number of furrows\
    \ in the ﬁeld (K):\nK =\nn\nX\ni=1\nki\n(3.7)\nTo perform ploughing in a team\
    \ within the mentioned restrictions, an order has to\nemerge among the participating\
    \ robots. However, as it is demonstrated in Figure\n3.5 and 3.6, depending on\
    \ the attached mouldboard, the furrows are to be ploughed\n56\nin a particular\
    \ order. This demands diﬀerent ordering among robots.\nIn cooperative ploughing,\
    \ there are two main questions to address: (1) How to\nidentify the ﬁrst furrow\
    \ to plough? and (2) Where to plough next after completing\nthe ﬁrst furrow?\n\
    There are various approaches to divide and distribute furrows among robots. Clearly,\n\
    to assure that furrows are ploughed consecutively, furrows cannot be statically\
    \ dis-\ntributed among robots. This is because robots may be scattered initially\
    \ around\nthe ﬁeld, and attend their assigned furrow locations at diﬀerent instances\
    \ of time.\nThis will violate the ploughing order discussed before. Therefore,\
    \ the distribution\nof furrows has to be carried out in real-time.\nAs mentioned\
    \ in Chapter 2, a popular trend for real-time and dynamic task al-\nlocation and\
    \ coordination in multi robot system is to utilise a central unit. The\ncentral\
    \ unit could be a dedicated stationary unit or one of the participating robots.\n\
    Clearly, robots are required to communicate with the central unit via explicit\
    \ forms\nof communication to exchange information. One major problem with this\
    \ approach\nis the susceptibility to the loss of contact with the central unit.\
    \ The success of the\nsystem depends on the state of the central unit. If the\
    \ central unit fails, no furrows\nwill be ploughed. Furthermore, robots have to\
    \ be within signal coverage distance\nat the time of task allocation, otherwise,\
    \ they cannot contribute to the task. This\nnormally occurs when robots are scattered\
    \ around a large ﬁeld. This approach may\nbe suitable for small size ﬁelds, but\
    \ for large size ﬁelds (bigger than the signal cov-\nerage distance), which is\
    \ normally the case, the central unit fails to communicate\nwith other robots.\
    \ Therefore, cooperative ploughing task allocation should not rely\non explicit\
    \ forms of communication.\nSo, what are the characteristics of the appropriate\
    \ approach for task allocation and\n57\ncoordination in cooperative ploughing?\
    \ The proposed approach has to be scalable\n(independent of the number of participating\
    \ robots), distributed (no central co-\nordinator: robots make their own decisions\
    \ based on the collected information),\nself-organised (the cooperative behaviour\
    \ should emerge as a result of their local\ninteraction and not based on negotiation),\
    \ independent of any initial position (e.g.\nrobots should not be at particular\
    \ location) so that the same team can contribute\nto other farming tasks (e.g.\
    \ spraying, or harvesting).\n3.3\nInteraction Model\nFor task allocation and coordination,\
    \ robots have to interact with each other. As\nmentioned, robots have to rely\
    \ on their local information to perform task alloca-\ntion, collision-free navigation,\
    \ and congestion clearance.\nThis includes detecting\nand diﬀerentiating other\
    \ robots from the rest of the objects in the environment and\nextracting marks\
    \ or hints that other robots left in the environment as a result of\ntheir execution.\
    \ But what kind of information can be extracted from ploughing? and\nhow should\
    \ they be interpreted?. In brief, if a robot can determine whether a location\n\
    is ploughed or not, then it can ﬁnd out by itself where it is required to plough\
    \ next.\n3.3.1\nFurrow Detection\nAs mentioned before, as a result of ploughing\
    \ two-part pattern is created: furrows\nand ridges. Participating individuals\
    \ could use previously created furrows as an in-\ndication to determine whether\
    \ a location is ploughed or it is required to be ploughed.\nPrevious works suggest\
    \ that it is possible to analyse the soil to detect any existing\npattern. One\
    \ of the widely common approaches for furrow detection is via vision\nsensors.\n\
    58\nIn various single robotic agricultural works, furrows and ridges are used\
    \ to guide\nunmanned vehicles within the ﬁeld. Vision based furrow and ridge detection\
    \ has\nbeen applied in real world application including cauliﬂower (Marchant and\
    \ Brivot,\n1995), cotton (Billingsley and Schoenﬁsch, 1997; Slaughter et al.,\
    \ 1996), tomato and\nlettuce (Slaughter et al., 1996), sugar beet (Marchant, 1996),and\
    \ cereal (Hague and\nTillett, 2001; Sgaard and Olsen, 2003).\nIn the early works,\
    \ near-infrared images were popular to extract the desired features.\nIn Tillett\
    \ et al. (2002), a guidance system for navigation between sugar beet rows\nis\
    \ described. Tillett et al. utilised band-pass ﬁlter to extract lateral crop row\
    \ loca-\ntion. In another example, Astrand and Baerveldt (2002) applied grayscale\
    \ Hough\ntransform on images provided by near-infrared camera to detect sugar\
    \ beet rows.\nIn recent years, by the development of high-quality inexpensive\
    \ cameras, vision-\nbased furrow and ridge detection become even more popular\
    \ since image processing\ncan be carried out simpler, quicker, and more accurately.\
    \ Tang et al. (2013) presents\na real-time row detection method for an autonomous\
    \ weeding robot to robust de-\ntection of wheat row based on pixel histogram.\
    \ This method involves two steps\nsegmentation of grey scale image and wheat row\
    \ detection based on after segmenta-\ntion. In Zhang and F. (2013), color images\
    \ are transformed into saturation images\nand binary images sequentially. Using\
    \ Radon transform and the position of the\nrobot, the furrows lines are located.\
    \ In Tian et al. (2014), navigation paths are\nextracted by simply applying image\
    \ segmentation and morphological ﬁlters using\nMATLAB software.\n59\n3.3.2\nVision\
    \ Based Furrow Detection\nIn order to examine the feasibility of furrow detection,\
    \ a vision based approach\nis developed and implemented. Analysing the close-up\
    \ images of freshly ploughed\nﬁeld reveals that the main diﬀerence between a ploughed\
    \ and unploughed ﬁeld is\nthe pixel intensity of the soil. The ploughed area contains\
    \ darker pixels, compared\nto the unploughed area of the ﬁeld.\nIn the implemented\
    \ approach, an inexpensive camera is bundled in the front of the\nrobot. At each\
    \ ploughing location, the robot stops and analyse the ploughing lo-\ncation for\
    \ the existence of a furrow. The furrow detection procedure is as follows:\nFirst,\
    \ the captured RGB-image is converted to gray-scale colour space. Then, a bi-\n\
    nary image is created with the threshold value obtained from the histogram analysis\n\
    of the grayscale image. Next, the image is inverted so that the area of interest\
    \ is\nrepresented as white spots. To remove the noise from the image, morphological\
    \ ﬁl-\nters are applied on the image. The image is eroded using a rectangular\
    \ sized matrix\n(10 X 3), and then it is dilated with the same matrix. The matrix\
    \ is chosen in this\nshape because it is similar to the shape of a furrow from\
    \ the perspective of the robot.\nThe proposed vision system is applied to various\
    \ images taken from the ﬁeld with\ndiﬀerent background light condition (see Figure\
    \ 3.7). Although the results obtained\nfrom these analyses are not suﬃcient for\
    \ guidance purposes within the ﬁeld, it is\nenough to determine if a location\
    \ is ploughed or not.\n60\nFigure 3.7: The vision based furrow detection algorithm\
    \ can successfully separate\nfurrows from the background environment under various\
    \ light conditions.\n3.3.3\nAccuracy of the Vision Based Furrow Detection\nUsing\
    \ the online resources, various ploughing picture similar to the ones displayed\
    \ in\nFigure 3.7 were collected and passed through the implemented vision algorithms.\
    \ As\na result the accuracy of 70.35 percent was achieved (i.e. from 200 testing\
    \ pictures,\nfurrows in 141 pictures were successfully detected). This is because\
    \ of the nature\nof the approach. As mentioned, the approach ﬁrst ﬁnds the histogram\
    \ of pixel in-\ntensities, then looks for local maxima with the neighbour gradients\
    \ higher than a\nthreshold in the resulted histogram as they are considered to\
    \ be furrows. Now, if\nthe furrow pixels’ intensity are not dark enough, the peak\
    \ of the local maxima drops\nbelow the threshold and it cannot be identiﬁed as\
    \ a furrow. One main factor in this\nphenomenon is the depth of the ploughed furrow.\
    \ If the ploughed furrow is not deep\n61\nenough the required properties cannot\
    \ be achieved and the detection will fail. In\nother words, the deeper the furrows,\
    \ the more accurate the detection. This is the\nkey reason that the reviewed approaches\
    \ are successful. For instance, the reviewed\nmethods including (Marchant and\
    \ Brivot, 1995), (Billingsley and Schoenﬁsch, 1997),\n(Slaughter et al., 1996),\
    \ (Marchant, 1996), (Hague and Tillett, 2001), (Sgaard and\nOlsen, 2003) in which\
    \ the furrow detection is used as a method for guiding the au-\ntonomous units,\
    \ unanimously claim errors less than 20mm and less than 2.0 degrees\nin heading.\
    \ In all mentioned approaches, there is a signiﬁcant change in pixel in-\ntensity\
    \ between the crop and the surrounding soil, therefore it is easily detectable\n\
    with traditional image processing techniques including the method presented in\
    \ this\nthesis (i.e. Histogram Analysis).\nDue to this shortcoming, more reliable\
    \ detection methods should be applied. One\navailable solution is to use machine\
    \ learning approaches and in particular deep learn-\ning. By providing negative\
    \ and positive examples, a model can be trained (i.e. a\nconvolution neural network\
    \ in the deep learning) with which high accuracy in clas-\nsiﬁcation and detection\
    \ can be achieved. The accuracy depends on the number of\nprovided positive and\
    \ negative examples, how diﬀerent the examples are from one\nanother, and the\
    \ type of convolution neural network used.\nHowever, one major drawback of deep\
    \ learning approaches is how expensive the\nprocess is computationally. Deep learning\
    \ approaches requires extensive amount of\ncomputational resources. It is so demanding\
    \ that, for optimization, the models are\nnormally run on NVIDIA graphic cards,\
    \ and this will increase the cost of the system.\n62\n3.4\nPoints of Failure\n\
    Distributed team of robots operating in a shared environment raises certain concerns\n\
    with which failure in the team becomes inevitable and therefore they have to be\n\
    addressed. In here, these problems are brieﬂy described.\nIn general, the failure\
    \ could be happening either outside of the ﬁeld (during task allo-\ncation) or\
    \ during the actual individual task execution (e.g. ploughing, or spraying).\n\
    The latter, in case of sequential tasks such as ploughing, requires further planning\n\
    and it is outside of the scope of this research. It is recommended as one future\
    \ work\nto this project. Therefore, only the failures outside of the ﬁeld is considered.\n\
    Let’s consider the scenario in which a team of robots are distributed around a\
    \ large\nﬁeld randomly. When the task is started, all available robots navigate\
    \ toward the\nﬁeld entrance point. At this stage, any collision with static and\
    \ dynamic obstacles\nin the environment will result in the elimination of that\
    \ unit from the team.\nIn addition, as all robots are targeting one shared location\
    \ in space, congestion due\nto acquiring the spacial target simultaneously will\
    \ prevent the robot to proceed the\nﬁeld and will result in the team failure.\n\
    In the following sections, more details for the mentioned issues are provided\
    \ and\nappropriate solutions are listed.\n3.5\nCongestion Clearance\nSince robots\
    \ operate in a shared environment, the occurrence of congestion in the\nﬁeld becomes\
    \ inevitable. The congestion has to be resolved or avoided otherwise it\nwill\
    \ result in the failure of the given task. In this research, congestion results\
    \ from\ntwo main sources: congestion as a result of spatial resource conﬂict,\
    \ and congestion\nas a result of a collision with dynamic and static obstacles\
    \ in the environment. In\n63\nthis section, the solutions for overcoming both\
    \ congestions are described.\n3.5.1\nSpatial Resource Conﬂict\nRobots have to\
    \ approach and analyse ploughing locations one by one to determine\nthe state\
    \ of the task (i.e. the location which is required to be ploughed next). Since\n\
    robots are initially scattered around the ﬁeld, they approach the ploughing locations\n\
    from various directions. Clearly, robots should not pass through the ﬁeld as they\n\
    are unaware of the state of the task (i.e. robots do not know how much of the\
    \ ﬁeld\nis ploughed). Figure 3.8 illustrates the permitted directions of approach\
    \ to the ﬁrst\nploughing location.\nWhen approaching the ﬁrst ploughing location,\
    \ two or more robots could reach the\ntargeted location at the same time from\
    \ diﬀerent directions (Figure 3.9 demonstrates\nthe possible direction of approaches\
    \ to the ﬁrst ploughing location). The question\nthat has to be addressed is which\
    \ robot will take the priority in movement? (i.e.\nspatial resource conﬂict).\n\
    3.5.2\nProposed Solution to Spatial Resource Conﬂict\nTo resolve the probable\
    \ resource conﬂict, a robot has to decide to either give priority\nto another\
    \ robot or to ignore the existence of others and takes the path. This decision\n\
    has to be made only on the basis of the local information of the robot.\nFor this,\
    \ ﬁrst the ﬁeld of view of the robot is divided into three regions: Left Region\n\
    (LR), Front Region (FR), and Right Region (RR) (see Figure 3.10 (a)). Then,\n\
    using the following conventions, a robot can decide whether to take priority or\
    \ not.\n• Left Convention: If another robot is detected on the left region (LR),\
    \ ignore\nand take the priority.\n64\nFigure 3.8:\nRobots approach the ploughing\
    \ locations from diﬀerent directions.\nRobots should not pass through the ﬁeld\
    \ to examine the ploughing locations as\nthe state of the task is unknown.\nFigure\
    \ 3.9: diﬀerent direction congestion: robots approaching the same location\nfrom\
    \ diﬀerent side of the target.\n• Right and Front Convention: If a robot is detected\
    \ in front (FR) or on\nthe right region (RR), wait (i.e. stop with zero velocity)\
    \ and give priority to\nthe detected robot.\nHowever, sensors are subject to noise,\
    \ and they cover only a limited range. This,\nsometimes, leads to not detecting\
    \ robots in the regions of interest. This is common\nwhen robots are very close\
    \ to the shared location. To rectify this, a threshold dis-\ntance is deﬁned on\
    \ the left region. With this, the detected robots will be considered\n65\non the\
    \ left region if the distance becomes less than a certain threshold distance.\
    \ The\nregion of interest in the ﬁeld of view of a robot is demonstrated in Figure\
    \ 3.10 (b).\nFigure 3.10: Robots are assumed to have a limited ﬁeld of view. (a)\
    \ The ﬁeld of view\nof the robot is divided into three regions: LR (Left Region),\
    \ FR (Front Region),\nand RR (Right Region). (b) Applied conventions on the regions.\n\
    The conventions are only eﬀective when robots are approaching from the same di-\n\
    rection.\nHowever, it is completely ineﬀective when robots are approaching from\n\
    opposite directions since both robots stop for the path to be cleared.\nThere\
    \ are two reasons why congestion still occurs: (I) The deﬁned conventions\nmake\
    \ the robots to wait for another robot to take initiatives to clear the path.\n\
    (II) Robots behave homogeneously (i.e. robots behave the same upon encountering\n\
    another robot in the aforementioned regions).\nIn order to break the homogeneity\
    \ in robots’ behaviour, instead of waiting at the time\nof detection, robots move\
    \ reversely with random velocity until the triggered region\nis cleared (i.e.\
    \ the robot is no longer in sight). This idea is inspired by ﬂee-opposite\nwhich\
    \ is a straightforward obstacle avoidance method described in (Penders, 1999).\n\
    The simulation video for the proposed solution is available in (Janani, 2018c)\
    \ 1.\n1Congestion Avoidance Video Link:\n66\n3.5.3\nCollision Avoidance\nBesides\
    \ resource conﬂicts, collisions with dynamic and stationary obstacles in the\n\
    environment also result in congestion. To avoid collisions, in this research,\
    \ Artiﬁcial\nPotential Field (APF), ﬁrst introduced by (Khatib, 1986), is implemented\
    \ on each\nrobot. According to Arkin (1998), APF is the most common continuous\
    \ response\nmethod approach in which only overview of the surroundings of the\
    \ robot is consid-\nered. The APF is fast, computationally inexpensive, and easy\
    \ to implement (Wu\net al., 2016b).\nThe Artiﬁcial Potential Field is inspired\
    \ by the particles interaction model. Particles\nwith the same polarity repel\
    \ each other, whereas particles with the opposite polarity\nattract one another\
    \ (see Figure 3.11). As a result, the potential function is the sum\nof the corresponding\
    \ attraction and repulsions ﬁelds and it can be expressed as\nfollows:\nU(q) =\
    \ Uatt(q) +\nX\nUrep(q)\n(3.8)\nIn robotic terminology, a robot is considered\
    \ to be in the opposite polarity with\nthe goal, and in the same polarity with\
    \ other obstacles in the environment. Conse-\nquently, the robot is always attracted\
    \ to the goal location while moving away from\nthe surrounding obstacles.\nA popular\
    \ and widely used attractive potential function is quadratic well (Park\net al.,\
    \ 2001). It is simple and provides a linear control law with constant gain. The\n\
    quadratic well attraction ﬁeld is expressed as follows:\nUatt(q) = 1\n2ωa|q −\
    \ qd|2\n(3.9)\nWhere ωa is the attraction gain, q is the position vector of the\
    \ goal, and qd is the\n67\nFigure 3.11: In Artiﬁcial Potential Field, the goal,\
    \ which is in the opposite polarity\nof the robot, attracts the robot and the\
    \ obstacles, which are in the same polarity as\nthe robot, repel (Safadi, 2007).\n\
    position vector of the robot. The attraction force is the gradient of the attraction\n\
    ﬁeld:\nFatt = −∇Uatt(q) = −Ka|q − qd|\n(3.10)\nUnlike attraction force, it has\
    \ generally been recognised that a repulsive potential\nshould have limited range\
    \ of inﬂuence. This prevents an object from aﬀecting the\nmotion of the robot\
    \ when it is far away from the object. The repulsion ﬁeld and the\ncorresponding\
    \ force are expressed as follows:\nUrep(q) =\n\n\n\n\n\n\n\n\n\n1\n2Kr(\
    \ 1\nρ − 1\nρo)2\nρ ≤ ρ0\n0,\nρ > ρ0\n(3.11)\nFrep = −∇Urep =\n\n\n\n\n\n\
    \n\n\n\nKr( 1\nρ − 1\nρo)( 1\nρ0)\nρ ≤ ρ0\n0,\nρ > ρ0\n(3.12)\n68\nArtiﬁcial\
    \ Potential Function suﬀers from oscillation and local minima. Oscillation\nand\
    \ local minima occur when the attractive force and the sum of repulsive forces\
    \ are\nequal or almost equal and collinear but in the opposite direction moving\
    \ to the goal\nlocation (Li et al., 2012). Zero-sum force causes the robot to\
    \ oscillate (see Figure\n3.12(a) and (c)). When local minima occurs near the goal,\
    \ the robot cannot reach\nthe target (see Figure 3.12(b))\nFigure 3.12: Local\
    \ minima (Li et al., 2012).\nOvercoming local minima and oscillation have been\
    \ investigated extensively, and as a\nresult, various methods have been suggested.\
    \ Okamoto and Akella (2016) classiﬁed\nthe proposed solutions into two categories:\
    \ (i) solutions which aim to eliminate\nthe local minima by using special potential\
    \ functions including navigation function\n(Koditschek and Rimon, 1990) and harmonic\
    \ function (Connolly and Grupen, 1993).\nAnd (ii) solutions which aim to resolve\
    \ the local minima after the robot is trapped.\nThere are a variety of approaches\
    \ in this category including applying additional\nforces (Li et al., 2011), Regression\
    \ search method (Li et al., 2012), placing a virtual\nobstacle (Park and Lee,\
    \ 2003), virtual goal (Yang and Dong, 2012), and applying\nrandom movement direction\
    \ (Lee et al., 2012). These approaches provide promising\nresults, and they can\
    \ be applied to the current research.\nThe cpp code for collision avoidance with\
    \ the artiﬁcial potential function using laser\n69\nrange ﬁnder in ROS can be\
    \ accessed in Appendix B. The code is implemented in\nStage simulation environment\
    \ (Janani, 2017) 2 and on Pioneer-3AT robot (Janani,\n2018a) 3 and (Janani, 2018b)\
    \ 4.\n3.6\nChallenges in Obstacle Detection Implementation\nWhen implementing\
    \ the artiﬁcial potential function collision avoidance in the team,\nfew team-level\
    \ concerns appear which have to be addressed.\n3.6.1\nDiﬀerentiation between other\
    \ team members and the rest of the\nobstacles in the environment\nThis valuable\
    \ piece of information assists robots to decide more eﬃciently on the\nrequired\
    \ action when encountering other robots.\nIn other words, by recognising\nother\
    \ robots in the ﬁeld, robots can understand other robots intention and perform\n\
    collision avoidance in a more eﬃcient way.\nThere are various approaches with\
    \ or without direct communication to assist robot\nto diﬀerentiate between other\
    \ robots and obstacles in the environment. However,\ntwo communication free approaches\
    \ are identiﬁed.\nThese two approaches utilise\n2APF Simulation Video Link:\n\
    3APF in Action Video Link:\n4APF in Action Video Link:\n70\nthe attached sensory\
    \ system (i.e. laser range ﬁnder and 2D camera), hence do not\nrequire to add\
    \ any more hardware to each individual.\nObject Proﬁling Using Laser Range Finder\n\
    Laser rangeﬁnders return data\nin a dense format. For example, Hokuyo RG-04LX-UG01\
    \ returns 683 beams in 240o\nﬁeld of view meaning that the angle between two consecutive\
    \ beams is 0.3515625o.\n(Hokuyo, 2009). When encountering an object multiple range\
    \ points will represent\nthe object. The objective in here is to classify these\
    \ points into diﬀerent objects\nand correlate the objects with pre-deﬁned models\
    \ and separate those that are close\nto the deﬁnition of other robots.\nOne of\
    \ the most popular approaches is clustering. Clustering is one of the most\nwidely\
    \ used techniques for exploratory data analysis (Shalev-Shwartz and Ben-\nDavid,\
    \ 2014). Shalev-Shwartz and Ben-David in 2014 describe in details various\nmethods\
    \ for clustering. In here, connectivity-based cluster ﬁnding is implemented\n\
    since the number of points is limited.\nIn this approach, ﬁrst, the acquired range\
    \ data, which is returned in the polar\nsystem of coordinate, is converted into\
    \ pointclouds, which are in the 2D Carte-\nsian system of coordinate.\nForming\
    \ the ﬁrst cluster at point zero p[0], for ev-\nery point, Euclidean distance\
    \ to the next immediate neighbour is calculated.\nIf\nthe distance to the next\
    \ neighbour is smaller than a pre-deﬁned parameter called\nmaximum cluster distance,\
    \ the point will be included in the current clusters, oth-\nerwise, the previous\
    \ cluster will be closed and a new cluster will be created. The\nclosed cluster\
    \ will be discarded if the size of the cluster, i.e. the number of points\nin\
    \ the cluster, is less than another predeﬁned parameter called min cluster size.\n\
    Cluster ﬁnding class and other laser analysis ros-package is available in github\n\
    through https://github.com/ajanani85/laser_analysis.git. In addition, the\n71\n\
    cpp code for cluster ﬁnding is in Appendix C and D.\nTeam-mate Recognition Using\
    \ 2D Camera\nIn teammate recognition using\n2D vision sensor, robots search for\
    \ speciﬁc 2D features on their acquired images.\nThe feature could be a mounted\
    \ artiﬁcial feature (e.g. QR Code, Fiducial Tag, etc)\nor predeﬁned 2D template\
    \ of the operating robots. They bring diﬀerent beneﬁts\nand drawbacks. One main\
    \ common beneﬁt of both approaches is that with the help\nof OpenCV solvePnP and\
    \ Rodriguez function, you can get distance and orientation\nof the detected feature.\n\
    Using QR-Code, Fiducial Tag recognition (including Chilitags (Q. Bonnard and\n\
    Dillenbourg, 2013), Apriltags (Wang and Olson, 2016), Aruco (Garrido-Jurado et\
    \ al.,\n2014), and etc), or any other artiﬁcially mounted features one can identify\
    \ and\ndistinguish the robots from each other while increasing the design time.\
    \ This in\nthe future can beneﬁt the team if, for example, the group aimed to\
    \ be divided into\nsmaller ones and masters are required. In this scenario, the\
    \ robots can ﬁnd their\nmasters by searching for particular tag id.\nOn the other\
    \ hand, template ﬁnding approaches, including SIFT, SURF, FAST,\nand BRIEF algorithms\
    \ requires minimum design time, however, it does not provide\ndiﬀerentiation between\
    \ robots in a homogeneous team of robots and it is, in terms\nof computation time,\
    \ expensive.\nIn this research, two approaches have been implemented and tested:\n\
    Chilitags and QR-Code: In separate approaches, the Chilitags and QR-Codes\nwere\
    \ mounted on the body of the robots as demonstrated in (3.13) and upon\ndetection,\
    \ the robot be able to ﬁnd the position of the tag using solvePnP and\nRodriguez\
    \ (in OpenCV) in the attached camera’s frame of reference. Since,\nQR-codes, speciﬁcally,\
    \ can carry up to 4000 characters, certain messages could\n72\nbe encoded with\
    \ which certain behaviour could be triggered on other robots.\nFigure 3.13: The\
    \ displayed QR-code is causing the rear robot to follow the front one\nThe main\
    \ problem with both the QR-code and ﬁducial tags is that both have\nlimited range\
    \ of detection and they require a direct line of sight. In particular,\nusing\
    \ 15 cm by 15 cm ﬁducial tag, the detection range with VGA resolution\ncamera\
    \ (480 X 640) is only 3.0 meters at detection frequency of 20 Hz. Series\nof tests\
    \ conducted in diﬀerent lighting conditions proving the claim.\nOn the other hand,\
    \ as the distance increases, error in the evaluated orienta-\ntion resulted from\
    \ cv::solvePnP and cv::Rodriguez increases. This is due to the\nﬂickering of one\
    \ or more pixels at the corners which will result in diﬀerent 3D\norientation\
    \ estimation. As it is demonstrated in 3.14, a mistakenly included\nor excluded\
    \ pixel in either direction (x or y) will result in a diﬀerent 3D repre-\nsentation\
    \ of a 2D image. This will be intensiﬁed if the observer is in motion.\nThe impact\
    \ of this phenomena is highlighted when it is used to determine the\nposition\
    \ of the observer. Generally, to the position of the observer (or in this\ncase\
    \ the camera) can be determined using the following:\n73\n\n\nXo\nYo\n\
    Zo\n\n\n= R−1 ∗\n\n\nXt\nYt\nZt\n\n\n(3.13)\nWhere, o\
    \ refers to the observer, t is the perceived tag position, and R is the\nperceived\
    \ rotation matrix of the tag.\nSeries of tests have been conducted to estimate\
    \ the variation in the estimated\nposition of the observer and the tag. In this\
    \ test, the camera is set at particular\ndistances toward the tag and a software\
    \ record the position of the tag and\ncalculate the corresponding camera position\
    \ using the equation 3.13.\nThe\nresults of the ﬁeld test is demonstrated in Table\
    \ 3.1.\nAs it can be seen, the phenomena a signiﬁcant eﬀect in X and Y direction\
    \ on\ncamera pose estimation and at 3.00 meters it varies more than 50 cm.\nTable\
    \ 3.1: Variation in tag position and observer position vs Distance to the tag\n\
    Distance (m)\nVariation in Tag Position (m)\nVariation in Camera Position (m)\n\
    ∆X\n∆Y\n∆X\n∆Y\n0.50\n0.0007\n0.0007\n0.001\n0.001\n1.00\n0.0009\n0.0008\n0.010\n\
    0.0090\n1.50\n0.0012\n0.0011\n0.025\n0.030\n2.00\n0.0020\n0.0017\n0.050\n0.045\n\
    2.50\n0.0030\n0.0025\n0.120\n0.100\n3.00\n0.0057\n0.0060\n0.65\n0.50\n74\nFigure\
    \ 3.14: The ﬂickering pixels at corners will cause diﬀerent orientation estima-\n\
    tion in 3D\nWith this consideration, it is recommended to rely only on the 3-DOF\
    \ position\nof the tag. However, if one aims to utilise the orientation of the\
    \ tag in the\ncalculation, including estimating the orientation of the vehicle\
    \ or position of\nthe observer, either the camera has to be ﬁxed with a gimbal\
    \ so that the\ncamera motion is compensated or a synchronized IMU has to be fused\
    \ with\nthe captured image.\nRGB-LED pattern Recognition: Fiducial tags are passive\
    \ features, meaning\nthat the detection result is sensitive toward changes in\
    \ environmental lighting.\nUsing active source features will reduce this eﬀect\
    \ and improves the detec-\n75\ntion. To test this idea, RGB-LED-based patterns\
    \ are created and mounted\non robots, and appropriate software is designed to\
    \ detect the pattern (refer to\nAppendix F).\nThis form of feature detection is\
    \ implemented in indoor localisation project\ndescribed in (Prez, 2016) supervised\
    \ by the author and Dr. Lyuba Alboul at\nSheﬃeld Hallam University. In this project,\
    \ a particular RGB-LED pattern\ndemonstrated in Figure 3.15, is mounted on top\
    \ of the Khepera III robot(K-\nTeam, 2017).\nFigure 3.15: RGB-LED Feature Localisation:\
    \ (a) The Pattern contains a big-cluster\nand small-cluster, (b) The feature conﬁguration\
    \ on Khepera III robot\nThe vision system consists of a 1080p Logitec camera c920\
    \ mounted on the ceil-\ning and a detection software. The feature detection software\
    \ and localisation,\nwhich is based on the HSV color detection, ﬁrst converts\
    \ the acquired RGB\nimage to the HSV colorspace. Due to the noise in the environment,\
    \ the result-\ning image contains many points with the similar ﬁltered color characteristics\n\
    (Figure 3.16.b).\n76\nFigure 3.16: RGB-LED Feature Based Localisation Camera View:\
    \ (a) 1080p Logitec\ncamera c920 mounted on the ceiling, (b) HSV-based color detection\
    \ result contains\nnoise\nTo remove the small white spots, morphological ﬁlters\
    \ are applied and the\nimage is opened: that is to erode the image (Figure 3.17.a)\
    \ ﬁrst followed by\ndilation (Figure 3.17.b).\nFigure 3.17: RGB-LED Feature Based\
    \ Localisation Noise Removal: (a) Erosion\nresult, removing small white spots\
    \ from the frame (b) Dilation result, emphasising\nthe small spots left after\
    \ erosion.\nAccording to Prez (2016), the maximum errors in position is 6.9352\
    \ (mm),\nand 1.6183 degrees in the heading.\n77\n3.6.2\nEntering the Field due\
    \ to Collision Avoidance\nAs robots get closer and closer to the ﬁeld, the resulting\
    \ collision avoidance sum\nvector may force them to enter the ﬁeld. This is unacceptable\
    \ and has to be avoided\nbecause of two main reasons: 1. robots in the ﬁeld are\
    \ not performing collision\navoidance, and 2. the already created patterns on\
    \ the soil will be run over. As\nrobots are performing the task of ploughing,\
    \ they are not performing APF-based\ncollision avoidance. This is due to the fact\
    \ that any evasive manoeuvre inside the\nﬁeld will make the robots exiting their\
    \ trajectory, destroying the created pattern,\nand running over the ploughed section.\
    \ Therefore, this is non-ploughing robots’\nresponsibility to take action.\nTo\
    \ prevent robots from entering the ﬁeld, an artiﬁcial repulsion force is applied\
    \ at\nthe borders of the ﬁeld.\nAny robots that are closer than a particular threshold\n\
    distance to the borders will consider this force. Therefore, the sum force near\
    \ the\nﬁeld borders will look like the following:\nFsum = Fatt −\nn\nX\ni=1\n\
    FREPi − FBRep\n(3.14)\n3.6.3\nCombination of Collision and Congestion Avoidance\n\
    It is clear that robots have to avoid collision and resource conﬂict at the same\
    \ time.\nHowever, there is one more problem: robots have to apply the resource\
    \ conﬂict\nclearance behaviour only when they encounter another robot. In other\
    \ words, in\norder for this approach to be successful, robots have to diﬀerentiate\
    \ each other from\nother objects in the environment. But, this is still not suﬃcient\
    \ since a faulty robot\nmight create congestion in the ﬁeld. Therefore, the status\
    \ of the detected robot has\nto be determined too.\n78\nSurely, if robots had\
    \ the capabilities to broadcast their status to the nearby robots,\nthe problem\
    \ becomes trivial. But robots are only capable to interact with each\nother via\
    \ implicit forms of communication. One way to resolve this is to analyse\nthe\
    \ behaviour of the detected object by monitoring its activities using the attached\n\
    range sensors. This approach is noise prone and may not always lead to success.\n\
    Another method is to avoid collision until certain distance toward the shared\
    \ location\nis reached, and switch to resource conﬂict clearance while within\
    \ this threshold\ndistance (see Figure 3.18). In this research, the latter approach\
    \ is implemented.\nFigure 3.18: The ﬁeld applies repulsion to prevent robots from\
    \ entering while ap-\nproaching the ﬁrst ploughing location. Robots in the blue\
    \ region avoid collisions\nonly. Robots in the green region avoid resource conﬂicts\
    \ only.\n3.7\nTeam Ploughing\nRegardless of the type of ploughing mouldboard,\
    \ furrows are created the same way.\nAs mentioned, ploughing is a two-dimensional\
    \ navigational process.\nIf a robot\nploughs a ﬁeld at a constant speed, the required\
    \ time for a robot to complete plough-\ning a furrow is\n79\ntp = lf\nv\n(3.15)\n\
    Where lf is the length of a furrow and v is the constant velocity of the robot.\n\
    When in a team, the robots have to plough in a queue as illustrated in Figure\
    \ 3.19.\nThis is because furrows have to be created consecutively. Assuming that\
    \ robots\nare informed where to plough, they have equal length (λ), and there\
    \ is an equal\nminimum distance between robots (ϵ), they plough the ﬁeld with\
    \ equal constant\nvelocity, v. Thus applying a team introduces a delay time, as\
    \ each robot except the\nﬁrst one has to wait for its predecessor. The delay time\
    \ required for each robot can\nbe calculated as follows:\ntdelayi = (i − 1)(λ\
    \ + ϵ)\nv\n(3.16)\nThis delay is generated only once and propagates through to\
    \ the following round of\nploughing. Therefore, ploughing time for a robot is\
    \ obtained as follows:\nCorollary 1: The time to plough the ploughable area is\n\
    Tploughing = K.tp + tdelayn\n3.8\nFurrow Transitioning\nHow to determine the ﬁrst\
    \ location to plough is one problem, but where to plough\nnext is another. As\
    \ emphasised in section 3.1.4, with reversible mouldboards it is\npossible to\
    \ plough the ﬁeld more eﬃciently as furrows can be created consecutively\nfrom\
    \ both sides. Let’s assume that robots are equipped with reversible mouldboards,\n\
    and they are capable of ploughing from both directions. In order to utilise this\
    \ capa-\n80\nFigure 3.19: Team of n robots are aiming to plough. In the best case\
    \ scenario, if\nthe robots have formed the queue initially.\nbility, upon ﬁnishing\
    \ ploughing a location, robots have to standby in the headland\narea waiting for\
    \ the last participating robot to complete its current furrow. In this\nsituation,\
    \ where to plough next depends directly on how robots behave in headland\nduring\
    \ furrow transitioning. In other words, furrow transitioning dictates how to\n\
    distribute furrows among robots. According to this, two furrow transitioning models\n\
    have been identiﬁed, and they are presented in the following sections.\n3.8.1\n\
    Ploughing with a Reversible Mouldboard: First-In, First-Out\nLet’s assume that\
    \ there is an initial order in a team of n robots. The order for the\nﬁrst shift\
    \ is roboti is assigned with furrowi. In FIFO, robots aim to maintain the\noriginal\
    \ order throughout execution. As the number of robots is smaller than the\nnumber\
    \ of furrows (n < K), robots may need to plough more than one furrow. If\nrobots\
    \ aim to maintain the original order in the team and if the task is distributed\n\
    among robots always from r1 to rn, then the number of times that ri has to perform\n\
    ploughing can be obtained as follows:\n81\nki =\n\n\n\n\n\n\n\n\n\n⌈\
    \ K\nn ⌉\nif i ≤ (K\nmod n)\n⌊ K\nn ⌋\nif i > (K\nmod n)\n(3.17)\nIn here, ⌈ K\n\
    n ⌉ represents the smallest following integer, and ⌊ K\nn ⌋ represents the largest\n\
    previous integer.\nKnowing ki is necessary but it is not suﬃcient as the ploughing\
    \ locations allocated\nto ri are distributed throughout the ﬁeld and they are\
    \ not next one another. For\nthat, if R is the set of robots, R = {ri|i ∈ {1,\
    \ 2, ..., n}}, and F is the set of furrow\nnumbers in the ﬁeld, F = {fl|fl ∈ {1,\
    \ 2, ..., K}}, and Gi is the set of ploughing\nlocations allocated to ri, where\n\
    |Gi| = ki, and\n∪\n∀i|i∈{1,2,...,n}Gi = F, and\nGα\n∩\nα,β∈{1,2,...,n},α̸=β Gβ\
    \ = φ,\nthen ploughing locations (or furrow number) allocated to ri is:\nGi =\
    \ {fi+jn|j ∈ {0, 1, ..., (ki − 1)}}\n(3.18)\nDuring FIFO headland navigation,\
    \ robots have to achieve three goals: (1) maintain-\ning the original order, (2)\
    \ reaching the next ploughing location, and (3) adjusting\nthe heading by 180◦.\
    \ As fj always have to be processed before fj+1, the robot that\nis responsible\
    \ for processing fj+1 is not allowed to enter the ﬁeld before the robot\nwhich\
    \ is allocated with fj. This means that r1 cannot start the ploughing before rn\n\
    exited the ﬁeld.\nTo maintain the original order, in FIFO, robots stack behind\
    \ r1 until rn exits the\nﬁeld. To achieve this, the robots have to form a loop,\
    \ as illustrated in Figure 3.20.\nUpon completing a furrow, each robot joins the\
    \ queue in the direction of the (virtual)\n82\npoint A in Figure 3.20. Then the\
    \ robot turns to B and C respectively. Where C is\nin the line of the next furrow.\
    \ Ploughing starts at point D, as soon as there is space\n(the last robot has\
    \ left, or rj−1 has begun).\nFigure 3.20: First-In, First-Out Furrow Transitioning:\
    \ (A) Move to the last position\nof r1. (B) Approach orthogonal projection of\
    \ point A on headland. (C) Move to\nyour next starting point orthogonal projection\
    \ on the margin of the ﬁeld. (D) Next\nStarting point for r1.\nTime analysis of\
    \ furrow transitioning is carried out in two stages: The time for a\nrobot to\
    \ travel the designated distance (tffti), and the waiting period during furrow\n\
    transitioning (twi).\nIn the ﬁrst case, where there is no traﬃc to aﬀect robots’\
    \ locomotion, duration of\nfurrow transitioning for a robot can be obtained from\
    \ the sum of all 2-dimensional\nlocomotion at each stage. For that, let’s break\
    \ down the distance that a robot travels\nduring each stage. In the ﬁrst stage,\
    \ a robot travels to the position of the ﬁrst robot.\n83\nThis position is df.(i\
    \ − 1) meters away from the current position of the ri where\ni is the rank of\
    \ the robot obtained during task allocation, and df is the distance\nbetween two\
    \ consecutive furrows. r1 can skip this stage since it is already at point\n(A).\
    \ In stage 2, robots have to travel for the distance of h2 meters, until they\
    \ reach\nthe lowest or the highest margin of the ﬁeld. In stage 3, robots have\
    \ to travel to\ntheir next allocated furrow in Gi. This position is df.(n + i\
    \ − 1) meters away from\npoint B for ri. Finally, in stage 4, robots travel for\
    \ another h2 meters to reach the\nbeginning of the ploughing location. Figure\
    \ 3.20 demonstrates the described furrow\ntransitioning pattern.\nConsidering\
    \ that furrow transitioning has to be repeated on both sides of the ﬁeld,\nit\
    \ could be assumed that the width of the headland on both sides are equal (h2\
    \ =\nh1 = H). With this, the overall travelled distance that a robot needs to\
    \ take for\nfurrow transitioning without considering the impact of traﬃc is:\n\
    dfti = dstage1 + dstage2 + dstage3 + dstage4\ndfti = 2H + df.(n + 2i − 2)\n(3.19)\n\
    Where, H refers to the minimum required headland, and it can be obtained as\n\
    follows:\nH = (λ + ϵ)(n − ⌊df.(2n − 1)\nλ + ϵ\n⌋)\n(3.20)\nDerivation: Let’s assume\
    \ that the length of all robots are equal, and it is denoted\nby λ. Let’s also\
    \ assume that the threshold distance between two robots is denoted\nby ϵ. If a\
    \ team of 10 robots is transiting their furrows, between the position of last\n\
    robot (r10) and point (A) there are 9 furrows. Also, between point (B) and point\n\
    84\n(C), which is the next furrow position for r1, there are 10 furrows. Therefore,\
    \ the\nsum of distances in both stages is 19.df meters. With this, it is possible\
    \ to identify\nthe number of robots that can ﬁt in these two sides: ⌊ 19.df\n\
    λ+ϵ ⌋. The length that the rest\nof the robots, n − ⌊ 19.df\nλ+ϵ ⌋, require to\
    \ ﬁt between point (A) and (B) is the minimum\nwidth for the headland, (λ + ϵ)⌊n\
    \ − df.(2n−1)\nλ+ϵ\n⌋.\nWhen dfti is known, it is possible to evaluate the time\
    \ required for a robot to perform\nfurrow transitioning in a traﬃc-free manner.\n\
    tffti = dfti\nv\n(3.21)\nAs mentioned, robots have to wait in the headland area\
    \ until the last robot exited\nthe ploughing area. This means rn has a direct\
    \ impact on the waiting period of\neach robot. In order to determine the eﬀect\
    \ of rn’s ploughing time on r1’s furrow\ntransitioning time, one needs to take\
    \ into account that during the time that rn is\nploughing, r1 is also performing\
    \ ploughing and furrow transitioning, and by the time\nr1 reaches its waiting\
    \ point (which is point C in Stage 3), rn has already completed\nsome portion\
    \ of its task. If the task is performed without any collision or congestion\n\
    and at a constant speed, the eﬀect of the ploughing time of rn on furrow transitioning\n\
    time of r1 can be evaluated as follows:\ntw1 = tpn − tp1 − H + n.df\nv\n(3.22)\n\
    In here, H+n.df\nv\nrefers to stage 2 and stage 3 of furrow transitioning performed\
    \ by\nr1, v is the velocity of the robot, tpn and tp1 are the ploughing period\
    \ for robot rn\nand r1 respectively.\nOther robots, ri>1, will travel shorter\
    \ distances as they stack behind r1. With this\n85\nconsideration standby time,\
    \ twi, for robots can be obtained as follows:\ntwi = tpn − tpi − H + n.df − (i\
    \ − 1)(λ + ϵ)\nv\n(3.23)\nFrom both, the furrow transitioning and traﬃc eﬀect\
    \ time, it is possible to determine\nthe overall time required for a robot to\
    \ perform furrow transitioning in a team with\nn robots in one round.\ntfti =\
    \ twi + tffti\n(3.24)\nIf ri is required to plough ki furrow, it has to perform\
    \ furrow transitioning for ki − 1\ntimes. Therefore, ri’s overall furrow transitioning\
    \ duration is (ki − 1).tfti.\nFigure 3.21 demonstrates the described algorithm\
    \ in the form of ﬂow chart.\n86\nFigure 3.21: Ploughing with a Reversible Mouldboard\
    \ FIFO - Flow Chart\n87\n3.8.2\nPloughing with a Reversible Mouldboard: Last-In,\
    \ First-Out\nIt can be seen in equation 3.20 that the width of the headland depends\
    \ heavily on\nthe number of robots in the team: the size of the ploughable area\
    \ will shrink by the\nincrease in the number of participating robots. This is\
    \ a major drawback of FIFO\nsince it aﬀects the proﬁtability of the ﬁeld (there\
    \ are many other applications which\ncan still utilise this model with the current\
    \ results). Therefore, we sought for an\nalternative approach by which the more\
    \ headlands could be limited.\nIn LIFO, the main aim is to preserve more headlands.\
    \ One way to improve FIFO\napproach is to introduce a more ﬂexible task allocation\
    \ method. Similar to FIFO,\nlet’s assume that the order of the ﬁrst round of ploughing\
    \ among n robots is roboti\nis assigned with furrowi. Instead of maintaining this\
    \ order for next round, robots\naim to reverse this order by letting the last\
    \ robot to start ﬁrst. This means that\nrobots will change their order in the\
    \ team to their n − i + 1 ranks. For example,\nif the original rank of a robot\
    \ is 2 (i = 2) in a team of 5 robots (n = 5), in the\nnext round of ploughing\
    \ its rank will change to 4. As robots will be assigned with\ndiﬀerent ranks in\
    \ the team, the number of furrows that each robot has to process\n(ki) and members\
    \ of robots’ furrow sets (Gi) have to be redeﬁned to compensate this\nchange.\
    \ Like FIFO, task is distributed from the r1 to rn. Therefore ki is determined\n\
    as follows:\nif ⌊ K\nn ⌋ ∈ {2, 4, 6, ...}:\nki =\n\n\n\n\n\n\n\n\n\n\
    ⌈ K\nn ⌉\nif i ≤ (K\nmod n)\n⌊ K\nn ⌋\nif i > (K\nmod n)\n(3.25)\n88\nand if ⌊\
    \ K\nn ⌋ ∈ {1, 3, 5, ...}:\nki =\n\n\n\n\n\n\n\n\n\n⌊ K\nn ⌋\nif i ≤\
    \ (K\nmod n)\n⌈ K\nn ⌉\nif i > n − (K\nmod n)\n(3.26)\nAlso, members of Gi can\
    \ be identiﬁed by the following:\n∀j ∈ {1, 2, ..., ki}\nfj =\n\n\n\n\n\n\
    \n\n\n\n\n\n\n\n\n\n\n\n\n\ni\nif j = 1\nfj−1 + 2(n − i) + 1\nif\
    \ j = 2p, p ∈ Z\nfj−1 + 2i − 1\nif j = 2p + 1, p ∈ Z\n(3.27)\nWith order of a\
    \ robot changing at every round, the ploughing time of a robot also\nis aﬀected:\n\
    ∀j ∈ {1, 2, ..., ki}\ntpi =\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
    \n\n\nlp−2H+(i−1)(λ+ϵ)\nv\nif j = 2p + 1, p ∈ Z\nlp−2H+(n−i)(λ+ϵ)\nv\nif j\
    \ = 2p, p ∈ Z\n(3.28)\nThe furrow transitioning that satisfy this condition requires\
    \ that ri instead of stack-\ning behind of ri−1, stack in front of it. With this,\
    \ the robot that was originally\nassigned with rank i will be re-ordered in the\
    \ team by n − i + 1. For example, r1\nbecomes rn in every other round.\nTo implement\
    \ this, a three-stage procedure is designed, and robots as long as their\norder\
    \ during the ploughing are not the last robot in the team (i ̸= n) has to comply\n\
    89\nwith these stages. In the ﬁrst stage, robots have to keep rotating to the\
    \ left (during\nfurrow transitioning at h1) until their heading diﬀerence becomes\
    \ 90◦. If the length\nof a robot and its extension is denoted by λ, then a location\
    \ with (xc − λ, yc + λ)\ncoordinate could be assigned as a target for the robot\
    \ (where (xc, yc) is referring to\nthe furrow ending coordinate). This location\
    \ is marked by (A) in Figure 3.22.\nIn stage 2, the robot maintains its heading\
    \ and moves for double of its length\nreversely. This point can be addressed by\
    \ (xc + 2λ, yc + λ) coordinate in the ﬁeld\n(refer to (B) in Figure 3.22.\nDuring\
    \ its approach to point B, a robot does not\nnecessarily have to observe the behind\
    \ area.\nInstead, a robot that has already\nreached the point (B), scans for any\
    \ critically closing objects. Upon detection of a\nreversely approaching robot,\
    \ the detector robot will move reversely to maintain the\ncritical distance. The\
    \ last robot that joins the queue is rn−1. In addition to moving\nreversely, a\
    \ robot that reached point B has to monitor the behaviour of the front\nrobot\
    \ for initiation of stage 3. This could be carried out by a range based sensor\
    \ or\na simple camera.\nStage 3 starts when rn−1 detects that rn which becomes\
    \ the ﬁrst robot for a new\nround clears the path. rn, instead of complying with\
    \ the stages, can directly access\nits next ploughing starting coordinate as there\
    \ are no other robots in the ﬁeld.\nOnce rn moves out of the ﬁeld of view of rn−1,\
    \ it starts approaching its next round\nof ploughing. Other robots behave the\
    \ same as soon as they detect such behaviour\nfrom the front robot.\nDuring Stage\
    \ 1, robots travel equal distances if they have equal dimensions. The\ntravelled\
    \ distance at this stage can be evaluated as follows (let λ be the length of\n\
    the robot and):\n90\nFigure 3.22: Three stage procedure of ploughing with a reversible\
    \ mouldboard LIFO\ndstage1i = λ.\n√\n2\n(3.29)\nIn Stage 2, each robot will travel\
    \ two diﬀerent sets of distances: (1) distance to reach\nthe designated point\
    \ B, and (2) distance to avoid collision with the front robot(s).\nIn the ﬁrst\
    \ part of stage 2, each robot has to travel 2λ meters to reach the location\n\
    of point B. However, in order to obtain the travelled distance in part 2, a deeper\n\
    analysis is required. The initial distance diﬀerence between two consecutive robots\n\
    is equal to the distance between two adjacent furrows (df). And as point A and\n\
    B’s coordinates for robots are relative to their end ploughing locations, then\
    \ point\nA and B of two consecutive robots are df meters away from each other.\
    \ If distance\nbetween two consecutive furrows, df, is smaller than the length\
    \ of the robots, λ, and\nthe threshold distance between two robots is denoted\
    \ by ϵ, then the total distance\nthat a robot with complementary rank i has to\
    \ travel is:\ndstage2i = (n − 1 − i)(ϵ + df) + 2λ\n(3.30)\n91\nIn stage 3, once\
    \ the path is cleared, robots have to travel to their next starting point.\nThe\
    \ travelling distance consists of the travelled distance during stage 2 to reach\
    \ to\nthe initial point, and the distance to reach the new ploughing location:\n\
    dstage3i = dstage2i − λ + df.(n + i + 1)\n(3.31)\nWith travelled distances at\
    \ each stage known, it is possible to identify the duration\nfor ri to perform\
    \ furrow transitioning without consideration of traﬃc eﬀect:\ntffti = dstage1i\
    \ + dstage2i + dstage3i\nv\n(3.32)\nLike FIFO, robots execution aﬀects one another.\
    \ However, this eﬀect is compensated\nby the time that each robot spends to reach\
    \ stage 2 of furrow transitioning. Because\nof the re-ordering, the eﬀect of the\
    \ traﬃc will also change for each robot. This eﬀect\nfor each robot can be evaluated\
    \ as follows:\n∀j ∈ {1, 2, ..., ki}\ntwi =\n\n\n\n\n\n\n\n\n\n\n\n\
    \n\n\n\n\n\n\n\ntpn − tpi − tstage1i − tstage2i\nif j = 2p + 1\ntp1 −\
    \ tpn−i+1 − tstage1n−i+1 − tstage2n−i+1\nif j = 2p\n(3.33)\nWith this approach,\
    \ robots require less heading width for obtaining the required\norientation:\n\
    H = ζ + λ\n(3.34)\nWhere ζ is the width and λ is the length of the robot. Figure\
    \ 3.23 demonstrates the\ndescribed algorithm in the form of ﬂowchart.\n92\nFigure\
    \ 3.23: Ploughing with a Reversible Mouldboard LIFO - Flow Chart\n93\n3.8.3\n\
    Comparison and Discussion\nIn the previous section, two furrow transitioning method\
    \ (FIFO and LIFO) along\nwith the corresponding task partitioning and allocation\
    \ were discussed. The pro-\nductivity and eﬃciency of the proposed approaches\
    \ can be indicated via three pa-\nrameters: (i) the length of the ploughed furrow\
    \ (lp), (ii) team ploughing execution\ntime, and (iii) the required travelled\
    \ distance. (i) indicates the amount of crop that\ncan be grown in the ﬁeld (yield),\
    \ whereas (ii) and (iii) indicate the ploughing cost.\nFor mathematical visualisation\
    \ and simulation purposes, a series of environmental\nparameters have to be set.\
    \ The details of the ﬁeld are demonstrated in Table 3.2.\nTable 3.2: List of parameters\
    \ for simulation and mathematical visualisation\nParameter Name\nValues\nField\
    \ Dimension (W × L)\n20(m) × 26(m)\nDistance Between Two Consecutive Furrows (df)\n\
    40(cm)\nLength of a Furrow (lp)\n20(m)\nRobot’s Dimension (ζ × λ)\n0.5(m) × 0.5(m)\n\
    Threshold Distance between Two Robots\n0.25(m)\nFurrow Analysis Period\n5(s)\n\
    Robot Velocity\n0.5(m/s)\nFurrow transitioning is performed in the headland area\
    \ at both ends of the ﬁeld.\nThe width of the headland aﬀects the length of the\
    \ ploughed furrow:\nlf = L − 2H\n(3.35)\nWhere, lf is the length of the ploughed\
    \ furrow, L is the length of the ﬁeld, and H\n94\nis the width of the headland\
    \ (assuming h1 = h2 = H). This means that the wider\nthe headland, the shorter\
    \ the length of the furrow, hence smaller cultivation area.\nTherefore, the productivity\
    \ of a furrow transitioning method in terms of the length\nof the furrow can be\
    \ expressed as follows:\n%Prod = lp\nL × 100\n(3.36)\nUsing equations 3.20 and\
    \ 3.34, the required headland, and the corresponding pro-\nductivity can be predicted\
    \ in diﬀerent team sizes. A script is developed to calculate\nthe productivity\
    \ in both methods, and the results are demonstrated in Figure 3.24.\nFigure 3.24:\
    \ FIFO vs LIFO impact on productivity of the ploughing. By increase\nof number\
    \ of participating robots in the team, the productivity in FIFO furrow\ntransitioning\
    \ method drops signiﬁcantly.\nThis is because the headland depends\non the team\
    \ size as described in equation 3.20. Whereas in LIFO, robots require\nconsistent\
    \ width for headland navigation, hence productivity remains uninﬂuenced\nby the\
    \ team size.\nAccording to Figure 3.24, the productivity in FIFO drops signiﬁcantly\
    \ by increase\n95\nin number of participating robots. Whereas, the productivity\
    \ remains consistent in\nLIFO regardless of the team size (Only in a team of three\
    \ robots FIFO becomes\nmore productive).\nFurthermore, the total ploughing execution\
    \ time in the team and the maximum\ntravelled distance that an individual will\
    \ take during execution can be estimated\nand compared in diﬀerent team sizes.\
    \ Total ploughing execution time refers to the\nduration between the time that\
    \ the ﬁrst robot enters the ﬁeld and the time that the\nlast robot leaves the\
    \ ﬁeld. With this, series of simulations have been conducted to\nestimate the\
    \ total execution time for both furrow transitioning methods in diﬀerent\nteam\
    \ sizes.\nAs it is demonstrated in Figure 3.25 and Figure 3.26, in LIFO, robots\
    \ perform\nfurrow transitioning faster while travelling shorter distances. This\
    \ reduces the cost\nof ploughing compare to FIFO furrow transitioning method.\n\
    Figure 3.25: Ploughing time visualisation: team size ∈ [3, 20].\nWith LIFO, the\n\
    team can plough the ﬁeld much faster. The results are obtained from simulation\n\
    conducted in Matlab.\n96\nFigure 3.26: Ploughing distance visualisation: team\
    \ size ∈ [3, 20]. In FIFO, robots\nhave to travel longer distances for furrow\
    \ transitioning. This increases the cost of\nploughing.\nSimulation\nIn addition\
    \ to mathematical visualisation, series of simulations were\nconducted in Stage\
    \ simulation environment (Gerkey et al., 2003) in conjunction\nwith ROS (Robot\
    \ Operating System) (Quigley et al., 2009). In the robot simulation\nmodel, each\
    \ robot is equipped with a forward facing Hokuyo laser range ﬁnder\nwith 180.0\
    \ degrees ﬁeld of view, a 32 x 32 pixel 2D camera facing forward pitched\n45.0\
    \ degrees downwards, a localisation system providing the 3DOF (three degree of\n\
    freedom) position of the unit in world model (x, y, yaw in radian), and a receiver\n\
    unit for receiving task initiation signal. The simulation begins by broadcasting\
    \ the\nstart signal throughout the system.\nThe behaviour of each robot is being\
    \ controlled by three C++ programs: task-\nhandler.cpp which is responsible for\
    \ decision making and selecting the target lo-\ncations for the robot navigation,\
    \ reach-point.cpp which utilises the information\nprovided by the localisation\
    \ system and the range sensor information to guide the\nrobot to the requested\
    \ location by avoiding collisions and resolving resource con-\n97\nﬂict.\nAnd\
    \ image-analyser.cpp which is responsible for furrow detection.\nThe\ntask-handler.cpp\
    \ communicates with other modules through ROS interprocess com-\nmunication API.\
    \ Figure 3.27 demonstrates the overview of the simulation control\nsystem.\nFigure\
    \ 3.27: Overview of Stage simulation control system for each robot.\nThe videos\
    \ for the simulations are in (Janani, 2015b) 5 for FIFO and (Janani, 2015a)\n\
    for LIFO 6. The simulations are run for diﬀerent team sizes ([3 15]). Robots start\n\
    the task simultaneously as soon as the programs start. During simulation, the\
    \ time-\nstamp along with the position of the robots are recorded separately while\
    \ the robots\nare within 40 × 40 meters area. This is to observe the eﬀect of\
    \ simultaneous ﬁeld\naccessing while robots are outside of the ﬁeld. As demonstrated\
    \ in Figure 3.28, the\nsimulation results indicate similarities with results obtained\
    \ from the mathematical\ndescription. However, there are diﬀerences between simulation\
    \ results and math-\nematical visualisation which is due to the fact that mathematical\
    \ descriptions do\n5FIFO Simulation Video Link:\n6LIFO Simulation Video Link:\n\
    98\nnot consider: the initial position of the robots, the existence of random\
    \ velocity for\ncongestion avoidance, and limited area of consideration (1600m2\
    \ for simulations and\n520m2 for mathematical visualisation).\nFigure 3.28: FIFO\
    \ and LIFO Diﬀerence between Simulation and Mathematical Re-\nsults: (a) FIFO\
    \ Simulation (black colour) and Mathematical(red colour) Results. (b)\nLIFO Simulation\
    \ (black colour) and Mathematical(red colour) Results. The blue\nline indicates\
    \ the diﬀerence between simulation results and the results obtained from\nmathematical\
    \ description.\nAll in all, if ploughing with a reversible mouldboard is desired,\
    \ LIFO approach will\nprovide faster and cheaper furrow transitioning while it\
    \ maintains a ﬁxed headland\nfor diﬀerent team size.\n3.9\nPloughing Optimisation\n\
    The results obtained from FIFO and LIFO conﬁrm the feasibility of cooperative\n\
    ploughing. However, the proposed approaches have a few drawbacks. In this section,\n\
    ﬁrst, these drawbacks are discussed. Next, a new method is described by which\n\
    cooperative ploughing becomes more resilient towards the dynamic changes that\n\
    could occur during ploughing.\n99\n3.9.1\nIssues with FIFO and LIFO\nIn FIFO and\
    \ LIFO, in order for robots to perform furrow transitioning, robots have\nto consider\
    \ the number of participating robots. In other words, the team size is\nﬁxed during\
    \ execution time, and it can only be updated during the design period.\nThis makes\
    \ both approaches vulnerable to dynamic changes in the environment.\nSpeciﬁcally,\
    \ the loss of an individual during execution time results in incomplete\nploughing.\
    \ In other words, the system is not robust and it is susceptible to the loss\n\
    of an individual. The worst case scenario occurs when the last robot fails. In\
    \ both\nFIFO and LIFO, the last robot dictates when a new round of ploughing should\
    \ be\nrestarted as the rest of the team is standing by at the headland. In this\
    \ situation, if\nthe last robot fails to reach the headland, the rest of the team\
    \ maintain their status.\nAs a result, a signiﬁcant portion of the ﬁeld remains\
    \ unploughed.\nMoreover, the number of participating robots cannot be increased\
    \ during ploughing\neither (i.e. the system is not scalable in real-time). For\
    \ instance, if one robot is added\nto a team of 10 robots, without updating the\
    \ other robots, ploughed locations will\nbe redundantly ploughed. Therefore, increasing\
    \ the team size during execution time\nhas no impact on the processing time.\n\
    These limitations are due to the lack of communication among robots. Since the\n\
    information regarding the team size cannot be updated during execution time, any\n\
    changes in the team size (including increase or decrease) will impair the results.\n\
    Robots should be able to ﬁnd their next ploughing location independent of the\n\
    team size.\nIn addition, robots are assumed to be equipped with only reversible\
    \ mouldboards.\nThis means that the system cannot tolerate any heterogeneity in\
    \ the team. However,\nreversible mouldboards may not always be available. The\
    \ system should be ﬂexible\n100\nenough to adapt to these insigniﬁcant changes\
    \ and tolerate heterogeneity in the\nteam.\nWith these new design considerations,\
    \ a new approach has to be investigated. An\napproach which is more ﬂexible toward\
    \ changes that could occur during execution.\nInstead of ploughing in a highly\
    \ coordinated method, the cooperation should emerge\nas a result of individual\
    \ executions. This is referred to as emergent cooperation. In\nemergent cooperation,\
    \ robots do not explicitly work together (whereas in FIFO and\nLIFO, robots furrow\
    \ transitioning depends on each other), but cooperation emerges\nas a result of\
    \ their interactions with each other and the world and it is independent\nof team\
    \ size (Gerkey et al., 2003).\n3.9.2\nToward Self-Organising Ploughing\nAs mentioned,\
    \ the most important drawback of FIFO and LIFO is task allocation’s\ndependency\
    \ on the number of participating robots which make the system suscepti-\nble to\
    \ the loss of a single robot. Robots utilise the information about the team size\n\
    to determine where to plough next. If robots plough the ﬁeld from only one side\n\
    (instead of both sides in FIFO and LIFO), the answer to the question of where\
    \ to\nplough next? can be responded independently of the number of participating\
    \ robots.\nIn this approach, robots plough the ﬁeld only from one side. After\
    \ completion of a\nfurrow, robots navigate back to the ﬁrst ploughing location\
    \ using the width of the\nﬁeld (see Figure 3.29).\nAs robots analyse the ploughing\
    \ locations, their understanding of the task increases.\nFor example, if a robot\
    \ ploughs the third ploughing locations (f3), for the next round\nit does not\
    \ need to re-analyse the ﬁeld up to the third ploughing location. Instead,\nthe\
    \ robots directly approach the fourth ploughing location (f4).\n101\nFigure 3.29:\
    \ The self-organised approach: robots plough the ﬁeld from one side only.\nThese\
    \ learnings not only prevents redundant ﬁeld analysis, but also it assists the\n\
    robot to select the shortest path to the next ploughing location. If robot determines\n\
    that the next ploughing location to analyse belongs to the second half of the\
    \ ﬁeld,\nit selects the opposite side of the ﬁeld to reach to the targeted ploughing\
    \ location\n(see Figure 3.30).\nFigure 3.30: By building up the understanding\
    \ of the environment, robots can select\nthe shortest path to the next ploughing\
    \ location.\nA robot concludes that a ﬁeld is ploughed when it ﬁnds the last ploughing\
    \ location\n102\nprocessed. As soon as this conclusion is made, the robot clears\
    \ the path for others\nto process to prevent congestion. Figure 3.31 demonstrates\
    \ the ﬂow chart of the\nself-organised ploughing, and Appendix I contains C++\
    \ task handler for the self-\norganised ploughing. (Janani, 2016) 7 contains the\
    \ link to the video of simulation\nfor self-organised ploughing.\nIn this approach,\
    \ the task allocation is carried out in real-time and independent of\nthe number\
    \ of participating robots. Thus, the team becomes more robust toward\nthe failure\
    \ of one or more individual.\nAlso, the approach is more scalable since by increasing\
    \ the number of participating\nrobots, the individual behaviour will not be aﬀected.\
    \ In addition, this approach is\nindependent of the attached ploughing mouldboard.\
    \ Robots could be equipped with\nreversible or conventional mouldboard and yet\
    \ they can contribute to the task.\nHowever, one major drawback of this approach\
    \ is that robots have to travel long\ndistances for furrow transitioning to reach\
    \ the next ploughing location. As a result,\nthe cost of ploughing increases signiﬁcantly.\
    \ Using the same control architecture as\nFIFO and LIFO (Figure 3.27), series\
    \ of simulations were conducted. As it is demon-\nstrated in Figure 3.32, using\
    \ the optimised ploughing approach robots have to travel\nfarther distances. This\
    \ increases the cost of ploughing signiﬁcantly. However, by in-\ncrease in the\
    \ number of participating robots, this diﬀerence is reduced considerably.\nIt\
    \ could be concluded that the optimised ploughing approach has better eﬃciency\n\
    when applied to a large team.\n7Self-Organised Simulation Video Link:\n103\nFigure\
    \ 3.31: Self-organised ploughing ﬂowchart\n104\nFigure 3.32: With the self organised\
    \ method, robots have to travel longer distances.\nThis increases the cost of\
    \ ploughing.\nFigure 3.33: Time Analysis of Ploughing Methods: The impact of improvement\
    \ on\nexecution time (a single robot can plough the same ﬁeld in tsingle = 2854.4(sec)).\n\
    By increase of number of robots in the team, the self organised ploughing method\n\
    has better response.\n105\n3.10\nConclusion\nIn this chapter, the feasibility\
    \ of cooperative ploughing in a team of robots is in-\nvestigated. As a result,\
    \ three cooperative ploughing approaches (FIFO, LIFO, Self-\norganised) are described,\
    \ analysed and compared. In FIFO and LIFO, the aim is\nto utilise the capability\
    \ of reversible mouldboard and perform ploughing from both\nsides of the ﬁeld.\
    \ The task allocation depends on the number of participating robots\nin the team,\
    \ and this makes both approaches susceptible to the loss of a single robot.\n\
    Since both approaches are not real-time scalable and robust system, any changes\
    \ in\nthe team size (including removal or increase of an individual) aﬀect the\
    \ end result. It\ncould be said that FIFO and LIFO are eﬀective only when the\
    \ success of individuals\ncan be guaranteed.\nTherefore, the self-organising approach\
    \ is proposed in which task allocation is car-\nried out independent from the\
    \ number of participating robots. The self-organising\napproach is not aﬀected\
    \ by changes in the team size (both increasing and decreasing\nthe team size will\
    \ not aﬀect the system).\nEven though the self-organising approach is more reliable,\
    \ it increases the cost of\nploughing since the robots have to travel relatively\
    \ farther distances to reach the\nnext ploughing location. The obtained results\
    \ from simulation suggest that this\neﬀect becomes insigniﬁcant as the number\
    \ of participating robots increases.\n106\nCHAPTER 4\nCOOPERATIVE SPRAYING: DESIGN\
    \ AND\nIMPLEMENTATION\nIn this chapter, the feasibility of spraying a large ﬁeld\
    \ with a dis-\ntributed team of robots is investigated. The motivation behind\
    \ this\nchapter is presented in 4.1. The task of spraying is described and\nanalysed\
    \ in 4.2. The proposed approach for spraying in a team of\nrobots are described\
    \ in words, ﬂow charts, and the implemented\nC++ codes in 4.3. The proposed approach\
    \ is analysed, criticised ,\nand an optimised approach is described in 4.5.\n\
    The points described in this chapter is published in the following:\nJanani, A.,\
    \ Alboul, L. and Penders, J., 2016, June.\nMulti robot co-\noperative area coverage,\
    \ case study: spraying. In Conference Towards\nAutonomous Robotic Systems (pp.\n\
    165-176).\nSpringer International\nPublishing.\n4.1\nMotivation Behind Further\
    \ Investigation\nIn the previous chapter, a scalable distributed cooperative algorithm\
    \ was suggested\nfor the task of ploughing. At ﬁrst glance, it seems that the\
    \ proposed solution can be\napplied to all agricultural tasks despite being classiﬁed\
    \ as independent or sequential.\nOne important point which is taken into consideration\
    \ in cooperative ploughing is\nthe physical changes that ploughing creates on\
    \ the soil (i.e. ridges and furrows).\nSuch patterns do not come into existence\
    \ with other agricultural tasks.\nLet’s consider the task of spraying which starts\
    \ after the task of ploughing.\nIn\nthis task, the furrows (which are now crop\
    \ rows) are already created. If the same\ninteraction method is applied(i.e. robots\
    \ rely on detection of furrows to indicate if a\nlocation is processed), the spraying\
    \ will never be initiated as robots perceive that the\n107\ntask is completed,\
    \ bear in mind that the existence of furrows are the indication for\nthis. In\
    \ other words, for spraying, the detected furrows carry insuﬃcient information\n\
    for concluding the state of completion of the task (see Figure 4.1).\nFigure 4.1:\
    \ The ploughing interaction method cannot be applied to spraying or\nseeding since\
    \ the furrows are already created.\nIn order to use the same cooperative algorithm,\
    \ the considered task needs to have\npermanent and detectable eﬀects on the soil\
    \ which are diﬀerent than the one that\nalready exists. Let’s assume a team of\
    \ robots in which individuals are equipped\nwith appropriate sensors to determine\
    \ the level of chemical on certain locations.\nAs mentioned in the initial condition\
    \ in chapter 3, the robots are assumed to be\nscattered around the ﬁeld, and thus\
    \ the robots will access the ﬁeld at diﬀerent\ninstances of time. If so, it is\
    \ possible that by the time a robot is analysing a location\nto determine the\
    \ level of chemicals, it concludes that the location has not been yet\nsprayed\
    \ as the chemicals are evaporated. As a result, that particular location will\n\
    be sprayed more than once (see Figure 4.2).\nThe tasks including spraying (the\
    \ sprayed chemicals could be evaporated and it be-\ncomes untraceable) and seeding\
    \ (the seeds might be covered with soil) create changes\nwhich are either temporary\
    \ or time-consuming to detect.This creates another level\nof failure for each\
    \ task as multiple robots could spray or seed certain area of the\n108\nﬁeld more\
    \ than once.\nFigure 4.2: Any mistake in detecting the chemicals will result in\
    \ excessive spraying.\nIt could be concluded that the solutions presented in the\
    \ chapter 3 is only valid for\ntasks by which there will be permanent and detectable\
    \ changes in the environment,\nand therefore it is inappropriate for tasks such\
    \ as spraying and seeding.\nOne obvious solution is to divide the ﬁeld into smaller\
    \ regions and assign each region\nto a robot during design. With this solution,\
    \ task allocation is carried out really\nsafely and fast as excessive spraying\
    \ is prevented. However, since robots have no\ninformation about the status of\
    \ other participating robots, and since there are no\nexplicit forms of communication\
    \ the spraying will start asynchronously and in an\nuncoordinated fashion.\nAs\
    \ a result, even if the direction of execution is uniﬁed\n(i.e. robot spray the\
    \ ﬁeld in the same direction), it will be possible that two robots\nprocess two\
    \ consecutive tracks from opposite directions. As a result, robots will\nreach\
    \ congestions in the middle of the ﬁeld. This is undesirable since robots cannot\n\
    navigate in other directions as there are crops in the environment.\n109\nFigure\
    \ 4.3: With static task allocation, congestions in the middle of the ﬁeld are\n\
    inevitable as spraying is uncoordinated.\nThese points are the motivations to\
    \ investigate a new cooperative behaviour for a\nlarge team of robots by which\
    \ a large ﬁeld can be sprayed at diﬀerent stages of\ncultivation. Although the\
    \ targeted task is spraying, the provided solution should be\napplicable for similar\
    \ tasks including seeding, re-seeding, seed mapping, and etc.\n110\n4.2\nSpraying\
    \ Analysis\nSpraying is the process of dispensing Plant Protection Products (PPP)\
    \ on the crop at\ndiﬀerent stages during cultivation. PPP includes herbicides,\
    \ pesticides, fungicides,\nand growth fertilizers. According to Faivre et al.\
    \ (in 2008) it is common to mix PPPs\nwith water pumped through the irrigation\
    \ system. For example, liquid fertiliser\nand/or insecticides can be drawn into\
    \ the stream of water which is pumped from a\nwater source such as a river or\
    \ well. Proper application of the chemicals allows the\ncrops to be grown with\
    \ a bit more certainty since nutrient problems and/or insect\ninfestations can\
    \ be addressed while the crop is growing (Faivre et al., 2008).\nThe deﬁnition\
    \ of spraying also encompasses water irrigation. The earliest archaeo-\nlogical\
    \ evidence of irrigation in farming dates to about 6000 B.C. while the earliest\n\
    pictorial representation of irrigation is from Egypt around 3100 B.C (Sojka et\
    \ al.,\n2002).\nTraditional irrigation methods vary from using natural ﬂood cycles\
    \ of the local\nrivers, in which the natural river stream was guided to the furrows\
    \ (or crop rows)\nthroughout a ﬁeld to direct moisture to the plants therein,\
    \ to trickle or drip irriga-\ntion methods, in which a small amount of water is\
    \ applied to the plants to reduce\nevaporation of the water (Faivre et al., 2008).\
    \ When high-pressure delivery systems\nbecame available, spray irrigation became\
    \ popular because of the distance that it\ncould cover.\nThe spray irrigation\
    \ may additionally utilise machinery that relocates the spray\nnozzles throughout\
    \ diﬀerent portions of the ﬁeld in a controlled manner. Conven-\ntionally, a tractor\
    \ with a spraying unit is driven through the ﬁeld and the PPPs are\ngradually\
    \ dispensed on the crop. The task of spraying can be initiated from any\npoint\
    \ in the ﬁeld and the tracks can be sprayed in any order (see Figure 4.4).\n111\n\
    Figure 4.4: Spraying unit is driven on the tracks while PPPs are gradually dispensed\n\
    on the crop (AAPlus, 2017).\nSpraying is distinguished from other agricultural\
    \ tasks in that of redundancy of\nprocessing. In other agricultural tasks (e.g.\
    \ ploughing, seeding, and harvesting),\neven though redundancy in processing (that\
    \ is processing a point in the ﬁeld more\nthan once) increases the cost of execution,\
    \ the ﬁnal result is still acceptable. In\nspraying, any location in the ﬁeld\
    \ has to be processed only once, since excessive\nPPPs dispensing will destroy\
    \ the crop. Moreover, in spraying, the direction of ﬁeld\nprocessing is ﬁxed.\
    \ The sprayer unit is allowed to navigate through the ﬁeld via\ngaps between the\
    \ crop rows referred to as tracks (since spraying is carried in various\nstages\
    \ of cultivation, furrows may or may not exist, therefore they are referred to\
    \ as\ntracks). Any other motions or manoeuvres are prohibited since the crop will\
    \ be run\nover.\n4.2.1\nSingle Robotic Sprayer\nIn the recent years, automated\
    \ spraying system has been improved signiﬁcantly,\nand today there are variety\
    \ of spraying units from time-based static sprayers to\nautonomous mobile sprayers.\n\
    112\nOne of the well-known autonomous spraying units is Irrigation Robot developed\
    \ by\nJohn Deer (Figure 4.5). The Irrigation Robot can move in two directions\
    \ and spray\nthe ﬁeld uniformly. Although the Irrigation robot can be extended\
    \ or reduced in\nsize for diﬀerent ﬁeld sizes (Faivre et al., 2008), the ﬁeld\
    \ has to be relatively ﬂat\nwith minimal rough terrain. Besides, the accuracy\
    \ of the spraying unit is relatively\nlow since the dispense of the materials\
    \ is from a long distance.\nFigure 4.5: Irrigation Robot (tarmakbir, 2017)\nAccuracy\
    \ in spraying motivated various researchers to apply mobile robots in this\nﬁeld.\
    \ For example, Aarhus University in Denmark developed a semi-autonomous\nmobile\
    \ robot for weed removing (see Figure 4.6). Using an ECODAN camera, GPS\nsystem,\
    \ and a gyro sensor, the robot navigates the entire ﬁeld. While in the ﬁeld,\n\
    the robot continuously captures pictures of the ground and sprays only the detected\n\
    weed. The robot can detect up to 25 diﬀerent types of weed, and as a result, it\
    \ saves\nthe usage of herbicides by 75 percent (Sujaritha et al., 2016). Using\
    \ a vision system\nto detect and distinguish the existing weed from the crop is\
    \ a popular approach in\n113\nweed control robots. (Bakker, 2009), (Choi et al.,\
    \ 2015), (Sabanci and Aydin, 2017)\nand (Aiswarya et al., 2016) are few examples\
    \ of vision based spray robot.\nFigure 4.6: Hortibot made by Aarhus University\
    \ in Denmark\nEven though these robots are very soil friendly, they are considerably\
    \ slow (Sujaritha\net al., 2016). One way to reduce time in this approach is to\
    \ increase the number\nof participating spray robots in the ﬁeld. In the past\
    \ few years, there have been\nvery few attempts. Hansen et al. (in 2013) designed\
    \ and implemented a cooperative\nstructure for a team of two robots to spray herbicides\
    \ on a large ﬁeld. The described\nteam consists of a UAS (Unmanned Aerial System)\
    \ and a UGV (Unmanned Ground\nVehicle) along with a Task Manager. The job of the\
    \ task manager is to decompose\nthe overall task in such a way that the UGV and\
    \ the UAS perform the execution in\nthe fastest and least resource-demanding fashion.\
    \ The task manager continuously\nis communicating with the participating units,\
    \ thus its success is prone to success\nin communication. Again, there has not\
    \ been a cooperative system in which robots\nrely only on their local information.\n\
    114\n4.3\nCooperative Spraying: Design Description\nIn this section, the proposed\
    \ cooperative spraying is described by ﬁrst describing\nthe process of task allocation.\n\
    In spraying, task allocation has to guarantee that each location in the ﬁeld is\
    \ visited\nonly once. In addition, task allocation has to be carried out in real-time,\
    \ and only\nthe local information of the robots is available. Therefore, a mechanism\
    \ is required\nby which robots are informed about the state of the task. Note\
    \ that this information\ncannot be conveyed with explicit forms of communication.\n\
    The proposed strategy is to divide the ﬁeld into regions (while each region consists\n\
    of a few tracks), with the aim to process each region by only one robot. For this,\
    \ the\nrobots have to identify unattended regions and claim their share of task.\
    \ Each robot\nclaims processing a region by occupying a particular location, hereafter\
    \ referred\nto as checkpoint, whose locations are common knowledge among robots.\
    \ In here,\ncheckpoints are set to be the last track of each region. Spraying\
    \ a region starts from\nthis location and tracks are processed consecutively to\
    \ the ﬁrst track in the region.\nThere is no restriction on which track is selected\
    \ as a checkpoint or the direction of\nregion processing. However, the direction\
    \ of region execution has to be uniﬁed. In\nother words, spraying from ﬁrst to\
    \ last or last to ﬁrst.\nNote: if a region consists of tracks between track number\
    \ n and n + k − 1, k is the\nnumber of tracks on the region, n + k − 1 is the\
    \ last track and n is the ﬁrst track in\nthat region.\nTherefore, robots have\
    \ to check each checkpoint to see if the region is occupied.\nIf an unoccupied\
    \ location is found, the robot proceeds and occupies the location\n(see Fig. 4.7).\
    \ Once occupied, the robots should not initiate the spraying to assure\nthat all\
    \ other robots are informed about the state of that region. All robots have\n\
    115\nto standby at the occupied checkpoint except the last robot.\nSince there\
    \ is no\nother unattended region, the task can be initiated. During this process,\
    \ robots keep\ncount of the number of visited (with occupied status) checkpoints.\
    \ Knowing the\ntotal number of checkpoints, one can determine whether the current\
    \ investigating\ncheckpoint location is the last checkpoint.\n.\nFigure 4.7: A\
    \ team of 8 robots are performing task allocation. r1, r2, and r3 have\nfound\
    \ unoccupied checkpoints. In the meantime, other robots are examining every\n\
    checkpoint.\nOnce the task allocation is completed, other robots have to be informed\
    \ otherwise\nthey will never start spraying the ﬁeld.\nTo solve this, when a robot\
    \ occupies a\ncheckpoint, it poses itself in a way that it continuously monitors\
    \ the next checkpoint.\nThe last robot does not need to comply with this, and\
    \ instead, it starts the task\nright after it occupies the last checkpoint. rn−1\
    \ which is contentiously monitoring\nthe behaviour of rn, identiﬁes that rn is\
    \ appears and disappears from its ﬁeld of\nview. This is the signal which indicates\
    \ task start. Thus, rn−1 starts spraying once\nrn is no longer detected. With\
    \ this, robots start spraying one after another, and the\nﬁrst robot will be the\
    \ last to start spraying(see Fig. 4.8).\n116\nFigure 4.8: Task initiation stage\
    \ for a team of 8 robots; Spraying task starts when-\never r8 reaches checkpoint\
    \ on the last region. r7 starts spraying once it perceives r8\ndecision.\n4.3.1\n\
    Task Partitioning Analysis\nAs mentioned, in the proposed approach the ﬁeld should\
    \ be divided into regions each\nof which consists of a set of adjacent tracks.\
    \ Also, since regions are divided among\nthe participating robots, the number\
    \ of regions should be equal to the number of\nrobots (or the team size). Therefore,\
    \ if there are n robots and K tracks in the ﬁeld,\nthe number of tracks in each\
    \ region, ki, can be determined as follows:\nki =\n\n\n\n\n\n\n\n\n\n\
    ⌈ K\nn ⌉\nif i ≤ K\nmod n\n⌊ K\nn ⌋\nif i > K\nmod n\n(4.1)\nIn here, ⌈ K\nn ⌉\
    \ represents the smallest following integer, and ⌊ K\nn ⌋ represents the largest\n\
    previous integer.\nNext, it is important to identify the track numbers within\
    \ each region.\nRobots\nrequire this to locate the checkpoints. Let’s assume that\
    \ TR is the set of track\nnumbers in the ﬁeld, TR = {trl|l ∈ {1, 2, ..., K}},\
    \ and R is the set of robots,\nR = {ri|i ∈ {1, 2, ..., n}}, then track numbers\
    \ allocated to ri, can be determined as\n117\nfollows:\nGi = {trj|j ∈ {m + 1,\
    \ m + 2, ..., m + ki}}\n(4.2)\nWhere m is the last track number assigned to the\
    \ previous robots, and it can be\ncalculated as follows:\nm =\ni−1\nX\nj=1\nkj\n\
    (4.3)\n4.3.2\nTask Allocation Analysis\nThe proposed task allocation mechanism\
    \ consists of redundant checkpoint analysis.\nAs the number of robots increases,\
    \ the number of locations that the robot has to\ncheck also increases. To determine\
    \ the time required for the team to complete task\nallocation, let’s ﬁrst deﬁne\
    \ the duration of task allocation for a robot.\nDeﬁnition 1. Task allocation duration\
    \ for a robot is the period from initial position\nuntil the time that the robot\
    \ detects an unoccupied checkpoint.\nWith this deﬁnition, time analysis becomes\
    \ complex since robots are initially scat-\ntered around the ﬁeld. To simplify\
    \ estimation, let’s assume that robots have formed\na queue behind a location\
    \ outside of the ﬁeld. This location is referred to as alpha.\nBefore robots access\
    \ the ﬁrst checkpoint, they ﬁrst have to access alpha. However,\nthe distance\
    \ that a robot has to travel to reach alpha depends on the robot’s posi-\ntion\
    \ in the queue. The length of the queue for each robot is (λ + ϵ)(i + 1) meters.\n\
    In here, λ is the length of a robot, and ϵ(epsilon) is the minimum distance between\n\
    two consecutive robots (see Figure 4.9).\nOnce a robot reaches alpha, regardless\
    \ of their position in the line, it has to analyse\nthe ﬁrst checkpoint, and hence\
    \ all robots have to travel a ﬁxed distance between\nalpha and the ﬁrst checkpoint,\
    \ dα,l1. Also, except the ﬁrst robot, other robots have\n118\nFigure 4.9: Illustration\
    \ of robots queueing for accessing α. Robots have the same\nlength, λ, and the\
    \ distances between robots, ϵ, are equal.\nto travel to other checkpoints, dlj−1,lj.\
    \ For example, r2 has to travel distance between\nthe ﬁrst and second checkpoint\
    \ to reach its destination.\nOnce a robot reaches a checkpoint, it takes a period\
    \ of time to draw a conclusion on\nthe status of the checkpoint. This period is\
    \ denoted by τ and it will be propagated\nin the queue since robots have to wait\
    \ for the path to be cleared. The total delay\nfor a robot is (2i − 1)τ.\nThis\
    \ is easy to see. Let’s consider a team of three robots which are lined up behind\n\
    a point outside the ﬁeld (α)(Figure 4.10).i). r1 analyses only the ﬁrst checkpoint,\n\
    hence spends only a τ seconds. Consequently, the rest of the team wait τ seconds\
    \ as\nwell (Figure (4.10).ii). Once the path is cleared for r2, it will analyse\
    \ checkpoint one\nand as a result another τ seconds of delay is propagated to\
    \ r3 (Figure (4.10).iii). r2\nresumes its analysis to checkpoint two and spend\
    \ another τ seconds on checkpoint\ntwo. During this period, r2 creates no eﬀect\
    \ on the rest of the team since by this\ntime, r3 is already performing analysis\
    \ on the ﬁrst checkpoint (Figure (4.10).iv).\nr3 resumes checkpoint analysis on\
    \ checkpoint two (.Figure (4.10).v) and the last\n119\ncheckpoint (Figure (4.10).vi).\n\
    Figure 4.10: The redundant checkpoint analysis propagates delay in the team. (i)\n\
    robots are in a queue behind α. (ii) r1 is processing the ﬁrst checkpoint, all\
    \ other\nrobots have to wait until r1 completed its analysis. (iii) r2 is analysing\
    \ the ﬁrst\ncheckpoint, another delay is aﬀecting the unassigned robots. (vi)\
    \ r2 is processing\nthe second checkpoint, however there is no eﬀect on r3 as\
    \ it is processing the ﬁrst\ncheckpoint. (v) r3 is checking the second checkpoint.\
    \ (iv) r3 also needs to check the\nlast checkpoint.\nIf the velocities of all\
    \ robots are equal and robots move with constant speed, task\nallocation duration\
    \ for a robot (ri) can be evaluated as follows:\nttai = dαl1\nv\n+ (2i − 1)τ +\
    \ (λ + ϵ)(i − 1)\nv\n+\ni\nX\nj=2\ndlj−1lj\nv\n(4.4)\n120\n4.3.3\nTask Initiation\
    \ Analysis\nTask allocation for a robot is completed when it identiﬁes the ﬁrst\
    \ unoccupied\ncheckpoint, but the task is not yet initiated since the robot has\
    \ to assure that all\nother robots are informed about the status of the occupied\
    \ region. Before any further\nanalysis, let’s deﬁne task initiation duration.\n\
    Deﬁnition 2. Task initiation duration for a robot is the period that a robot has\
    \ to\nremain at a checkpoint until the initiation signal is detected.\nSince spraying\
    \ will not start for all robots until the last robot has occupied the last\nregion,\
    \ the task initiation time for a robot will be aﬀected by the last robots task\n\
    allocation time. However, this impact is partially compensated by the robot’s\
    \ task\nallocation period. With this, if τinit is the constant time to perceive\
    \ task initiation\nevent (that is appearing and disappearing of the next region\
    \ robot), the standby\nperiod for a robot before it starts its task is evaluated\
    \ from the following:\ntsti = ttan − ttai + τinit(n − 1)\n(4.5)\nWith this strategy,\
    \ r1 is the ﬁrst robot that completes the task allocation, but it is\nthe last\
    \ robot to initiate spraying. Therefore, (4.5) can also be expressed as follows:\n\
    tst = tst1 = ttan − tta1 + τinit(n − 1)\nIn here, tst refers to total spraying\
    \ execution time, and tst1 is the ﬁrst robot spraying\ntime.\n4.3.4\nSpraying\
    \ Time Analysis\nRight after the task is initiated, robots start spraying. Spraying\
    \ is a two-dimensional\nnavigation task which is performed asynchronously (i.e.\
    \ during spraying robots only\n121\nconcentrate on the allocated region. Plus\
    \ they do not require any information from\nother participating robots during\
    \ this stage). If the velocity of a robot is denoted\nby v, and the length of\
    \ a track is denoted by lp, then spraying time for a robot after\nthe task initiation\
    \ can be evaluated as follows:\ntsprayingi = 1\nv(kilp + (ki − 1)df)\n(4.6)\n\
    In here, tsprayingi refers to the spraying time for robot i, df corresponds to\
    \ the\ndistance between two consecutive tracks. Bear in mind that a robot has\
    \ to repeat\nspraying as many as ki times, obtained from (4.1). In addition, as\
    \ part of spraying,\na robot also has to switch between tracks for ki − 1 times.\n\
    The total system execution time including all three steps (task allocation, task\n\
    initiation and spraying) is the sum of maximum in each task. The ﬁeld is partitioned\n\
    from the ﬁrst regions, therefore it is safe to conclude that the ﬁrst region always\
    \ has\nthe highest number of rows to cover and the maximum spraying time (ts1).\
    \ It is the\nlast robot that has the longest task allocation time ttan, but it\
    \ is the ﬁrst robot that\nhas the longest task initiation time tts1.\nt = ts1\
    \ + ttan + tts1\n(4.7)\n4.3.5\nDesign Limitations\nThe proposed strategy promises\
    \ that a group of robots can spray a large ﬁeld coop-\neratively relying only\
    \ on their local sensing. However, there are few limitations in\nthe system, and\
    \ this section is dedicated to review them.\nExtreme Sensitivity: One main limitation\
    \ of the designed system is that in order\nfor the task to begin, all checkpoints\
    \ have to be occupied. But what if one or more\n122\nrobots fail during the process\
    \ of task allocation? As a result, (since the number of\nrobots and number of\
    \ regions are equal) the task will not begin and the ﬁeld will\nnever be sprayed\
    \ (see Figure 4.11).\nThis ﬂaw could simply be compensated by increasing the number\
    \ of participating\nrobots. But how far can the system tolerate this increase?\n\
    In particular, if Rm represents the number of participating robots, and Regn repre-\n\
    sents the number of available regions:\nifRegn < Rm < 2 ∗ Regn the ﬁeld will be\
    \ sprayed once, but the system will be\nineﬃcient as there will be robots which\
    \ are not participating (see Figure 4.12).\nifRm ∈ {2 ∗ Regn, 3 ∗ Regn, 4 ∗ Regn,\
    \ ...} → the ﬁeld will be sprayed more than once\n(see Figure 4.13).\nFigure 4.11:\
    \ Rn < Regn: The spraying task will never initiated\n123\nFigure 4.12: Regn <\
    \ Rn < 2 ∗ Regn: The spraying begins, and there are robots\nwhich will never participate\
    \ in spraying, but they have to perform redundant task\nallocation stage.\nFigure\
    \ 4.13: Rn ∈ {2 ∗ Regn, 3 ∗ Regn, 4 ∗ Regn, ...}: The ﬁeld will be sprayed more\n\
    than once.\nLimited Range of Perception: Robots rely on their local sensing for\
    \ task alloca-\ntion particularly during task initiation period (see Figure 4.8).\
    \ However, robots can\nperceive only a limited range. Let’s denote this range\
    \ by Γ. If the distance between\ntwo consecutive checkpoints (i.e. the distance\
    \ between two consecutive robots dur-\ning task initiation period) is greater\
    \ than Γ, the robots will not be able to detect\nthe initiation signal as they\
    \ are not able to observe the behaviour of the adjacent\n124\nrobot. As a result,\
    \ only the last region will be sprayed because the last robot is not\nrequired\
    \ to observe any other robots. Figure 4.14 demonstrates this situation.\nFigure\
    \ 4.14: If the distance between two consecutive checkpoints is greater than the\n\
    detection range of the robot, it cannot monitor the behaviour of the adjacent\
    \ robot.\nThus, the task will never begin for that particular robot.\nSince the\
    \ maximum distance between two consecutive robots cannot exceed the\ndetection\
    \ range of the robots, it is possible to determine the minimum number of\nregions\
    \ which are required to prevent spraying a ﬁeld.\nnmin = ⌊W\nΓ ⌋\n(4.8)\nPhysical\
    \ Dimension Limitation: Robots have physical dimensions (λ × ζ), and\nsimilar\
    \ to ploughing they need free space to perform track transitioning after one\n\
    cycle of spraying, and for actual spraying in opposite direction. This will limit\
    \ how\nclose the checkpoint can be appointed. The minimum required distance between\
    \ two\nconsecutive regions is λ + ϵ. In here, ϵ is the threshold collision distance\
    \ between\ntwo robots. The minimum distance deﬁnes the maximum number of participating\n\
    125\nrobot:\nnmax = ⌊ W\nλ + ϵ⌋\n(4.9)\n4.4\nImplementation and Testing\nIn this\
    \ section, we present both numerical results based on mathematical consider-\n\
    ation and the results obtained from the Stage simulation environment.\n4.4.1\n\
    Mathematical Results\nSince the allowed number of participating robots depends\
    \ on the dimension of the\nﬁeld, ﬁrst the boundaries of the team sizes have to\
    \ be identiﬁed. In here, a few\nparameters about the environment have to be ﬁxed.\n\
    We assumed that there are 50 to 250 tracks available in the ﬁeld and the distance\n\
    between two consecutive tracks is 0.2(m), and the length of each track (lp) is\
    \ 20(m).\nRobots have equal dimensions with length (λ) equal to 0.5(m). The threshold\
    \ dis-\ntance (ϵ) between two robots is set to be 0.3(m), and all robots are assumed\
    \ to move\nat constant velocity equal to 0.5(m/s). The checkpoint analysis duration\
    \ (τ) and\nrobot behaviour analysis duration (τinit) is ﬁxed to 5(s).\nFrom equations\
    \ (4.8) and (4.9), it is possible to identify the maximum and the\nminimum number\
    \ of robots allowed in various ﬁeld sizes, since W = Kdf. Figure\n(4.15) demonstrates\
    \ the results of Matlab simulation for various ﬁeld sizes and their\nappropriate\
    \ ﬁeld team sizes. In Figure (4.15) the red line indicates the maximum\nteam size\
    \ and the blue line indicates the minimum number of participating robots.\nNote:\
    \ The deﬁnition of a team in a multi robot system ﬁxes the minimum number\nof\
    \ robots to be greater than three (nmin ≥ 3).\nFor a ﬁeld with hundred tracks\
    \ (K = 100), the number of participating robots could\n126\nFigure 4.15: Number\
    \ of participating robots against number of tracks in the ﬁeld\nvary between four\
    \ and forty (n ∈ [4, 40]). Consequently, task allocation and task\ninitiation\
    \ time can be predicted (see Fig 4.16).\nAs the number of participating robots\
    \ increases, the duration for both task allocation\nand task initiation increases\
    \ by which the total execution time increases. In a ﬁeld\nwith 100 tracks, K =\
    \ 100, if appropriate team sizes are applied (n ∈ [4, 40]), the\ntotal execution\
    \ time opposes with what is expected from the nature of a multi robot\nsystem\
    \ (see Fig.4.16). It could be concluded that the applied strategy is not eﬃcient\n\
    enough to receive positive eﬀects from an increase in the number of robots.\n\
    127\nFigure 4.16: Region-based Approach Time Analysis. The resulted graph is obtained\n\
    via Matlab\n4.4.2\nSimulation Results\nOn the other hand, a series of simulations\
    \ were conducted in Stage simulation envi-\nronment in ROS (Robot Operating System).\
    \ Similar to the simulation environment\ndescribed in Section 3.8.3, each robot\
    \ is equipped with a model of a Hokuyo Laser\nRange Finder, and a ﬁxed camera\
    \ which both are placed at the front of the robot.\nThe current location of the\
    \ robot in the global frame of coordinates is provided by\nthe simulation environment.\
    \ However, during the trials, no robot is aware of the\nposition of other robots\
    \ in the team.\nBehaviours on each robot are controlled by collaboration between\
    \ three C++ mod-\nules (see Figure 4.19): (1) Task Handler, (2) Reach Point, and\
    \ (3) Camera Analyser.\nAll three modules are communicating via ROS speciﬁc messages\
    \ via namedPipes.\n128\nFigure 4.17: Spraying Software Overview\nThe Task Handler\
    \ is responsible to trigger speciﬁc behaviours in the robot: setting\na new target\
    \ for Reach Point module, activating Camera Analyser, analysing the\nﬁeld, and\
    \ executing the cooperative procedures.\nFigure 4.18 demonstrates Task\nHandler\
    \ ﬂowchart, and Appendix J contains C++ implementation.\nReach Point is responsible\
    \ to guide the robot to the requested coordinate in a\ncollision-free manner.\
    \ As explained in chapter 3, Artiﬁcial Potential Field is used\nfor navigation.\
    \ The exact same module can be reused in here.\nCamera Analyser is responsible\
    \ for (a) determining if checkpoints are occupied,\nand (b) determining when to\
    \ initiate the task. This can solely be carried out if\nother robots can be distinguished\
    \ from all other objects in the environment. In here,\nrobots are assumed to have\
    \ a diﬀerent colour than other objects in the environment.\nTherefore, the camera\
    \ analyser performs colour detection upon the task handler\nrequest.\n(Janani,\
    \ 2015c) 1 contains a link to the video for the simulation of the cooperative\n\
    spraying.\n1Spraying Simulation Video Link:\n129\nFigure 4.18: Region-based Task\
    \ Handler Flowchart\n130\nTrials conducted for a ﬁeld with 51 tracks (K = 51),\
    \ and various team sizes were\ndeployed (n ∈ [3, 10]). In all team sizes, robots\
    \ performed task allocation and task\ninitiation successfully. During simulation,\
    \ position and time of robots are recorded.\nData recording for a robot initiates\
    \ when the robot passes α, and it stops as soon\nas the robot exits the margin\
    \ of the ﬁeld. The maximum execution time then is\nplotted and compared with the\
    \ equivalent corresponding numerical prediction (see\nFigure 4.19). It can be\
    \ seen that there is a slight diﬀerence between Stage simulation\nresults and\
    \ the numerical results. This diﬀerence is due to the ﬁeld exiting duration\n\
    which has not been considered in the mathematical description.\nFigure 4.19: Comparison\
    \ between results collected during simulation and numerical\nvisualisation.\n\
    131\n4.5\nSystem Optimisation\nThe proposed cooperative method relies solely on\
    \ local sensing of the robots. With\nlocal sensing comes certain limitations.\
    \ These limitations have impacts on the sys-\ntem performance. In here, we review\
    \ these impacts and implement further actions\nto overcome these restrictions.\n\
    4.5.1\nDynamic vs Static Checkpoints\nThe proposed method is conﬁned by the detection\
    \ range of the robots. This in return\nlimits the width of regions that a ﬁxed\
    \ number of robots can spray. Let’s consider\na large ﬁeld (100m × 100m). Let’s\
    \ also assume that there are only 5 participating\nrobots. According to subsection\
    \ 4.3.5, this team size is inappropriate for this ﬁeld\nand the ﬁeld cannot be\
    \ sprayed. In this section, the aim is to demonstrate a simple\nsolution with\
    \ which a small team can spray a large ﬁeld.\nThe source of this issue is the\
    \ position of consecutive checkpoints. With the current\nsolution, the checkpoints\
    \ are appointed according to the last track of each region. As\nthe allocated\
    \ regions are widened the distance between two consecutive checkpoints\nincreases.\
    \ In order to use a small number of robots for a large ﬁeld, the distance\nbetween\
    \ two consecutive checkpoints has to be within the robot’s range of vicinity\n\
    (see Figure 4.20).\n4.5.2\nOptimum Team\nReferring to ﬁgure 4.16, it is clear\
    \ that by increasing the number of participating\nrobots despite being within\
    \ the permitted range, demonstrated in ﬁgure 4.15, the\noverall spraying time\
    \ will not decrease. This is due to the presence of two increasing\nlinear functions\
    \ and one decreasing hyperbolic function in formula (4.7). Therefore\n132\nFigure\
    \ 4.20: Check points are set outside of the ﬁeld and the distance between them\n\
    is reduced so that few robots are enabled to spray a large ﬁeld.\nthe resulting\
    \ function will have a global minimum. This is the optimal team size\nthat could\
    \ be deployed to the given ﬁeld and it can be obtained as follows:\nnopt =\ns\n\
    K(lp + df)\n2τv + τinitv + λ + ϵ\n(4.10)\nIn here, K is the number of tracks,\
    \ lp is length of the track, df is the distance between\ntwo consecutive tracks,\
    \ τ is the image processing delay for checkpoint analysis, τinit\nis task initiation\
    \ image processing delay, λ is the length of the robot, and ϵ is the\nthreshold\
    \ collision distance between two consecutive robots. Derivation of 4.10 is\nprovided\
    \ in Appendix A.\nThe optimal number of robots corresponding to the minimum time\
    \ from the start\nof time allocation and the completion of spraying depends on\
    \ the parameters in the\nexpression is 15.6. So the optimised number of robots\
    \ is either 15 or 16.\n4.5.3\nLarge Team and Fewer Checkpoints\nAs mentioned,\
    \ the main target in task allocation is that all checkpoints have to be\noccupied.\
    \ The proposed solution has limited ﬂexibility. If a robot fails during this\n\
    stage, the team will fail to initiate the task, and the ﬁeld will never get sprayed.\
    \ This\n133\nis due to the nature of the solution as there is no central controller\
    \ to monitor robots\nbehaviour, and there is no explicit communication between\
    \ the robots to receive the\nlatest updates. One way to reduce the probability\
    \ of team failure is to increase the\nnumber of participating robots. However,\
    \ the system is designed in a way that by the\nincrease of the team size excessive\
    \ spraying will occur if the number of participating\nrobots is at least double\
    \ the number of checkpoints (Nrobots ≥ 2∗Ncheckpoints). When\nthe ﬁrst wave of\
    \ robots start the task, the second wave of robots have no information\nabout\
    \ the status of the task, and hence the robots resume the process. This situation\n\
    is demonstrated in Figure 4.13.\nIt is clear that some form of coordination between\
    \ the robot that occupies the\nlast checkpoint and other robots which have not\
    \ occupied any checkpoints needs to\nprevent any excessive spraying. One way to\
    \ coordinate them is to use the last check-\npoint robot as an indication for\
    \ others that their participation is no longer needed.\nOriginally, the last checkpoint\
    \ robot initiates the task right after last checkpoint\noccupation, but in this\
    \ method, the last robot remains at its location until another\nrobot is in place\
    \ (see Figure 4.21). Once the robot, hereafter referred to as Patrol\nRobot, is\
    \ in place, others can proceed with the rest of the task.\n134\nFigure 4.21: Last\
    \ checkpoint robot does not start its task until Patrol Robot is in\nplace.\n\
    The Patrol Robot, knowing that the task is fully partitioned and distributed,\
    \ occu-\npies the last checkpoint region upon task initiation with which any further\
    \ execution\nwill be prevented. As further waves of robots complete occupying\
    \ the rest of the\ncheckpoints, one by one, robots are notiﬁed that the last checkpoint\
    \ is occupied\nearlier.\nIf the ﬁrst wave, the event perceived from the vision\
    \ system indicating\ntask initiation is Undetected-Detected-Undetected of the\
    \ last checkpoint, however\nin this situation the event will be Detected-Detected-Detected\
    \ meaning that the last\ncheckpoint was occupied before the robot attendance (Figure\
    \ 4.22). The conclusion\nis drawn that the task has started already and hence\
    \ they return back. Upon this\naction, going home, the robot occupying the previous\
    \ checkpoint perceive the direc-\ntion by which the action is performed and consequently\
    \ it concludes that the task is\ncompleted. This information is propagated down\
    \ the line until the ﬁrst checkpoint\n(Figure 4.23).\nBut what is the eﬀect of\
    \ this procedure on the overall execution time? With this\nadditional procedure,\
    \ as if another checkpoint is added to the collection. That is if\n135\nthere\
    \ are n number of regions, there need to be n + 1 corresponding checkpoints.\n\
    Therefore, task initiation required time obtained in 4.3.3 can be re-written as:\n\
    tst = tst1 = ttan+1 − tta1 + τinit(n)\n(4.11)\nFigure 4.22: The presence of the\
    \ Patrol Robot in the last checkpoint before the\nrobot at n − 1 checkpoint indicates\
    \ that the ﬁeld is already being processed and no\nfurther action is required.\n\
    Figure 4.23: Upon detecting the presence of the Patrol Robot, other robots one\
    \ by\none leave the area.\nOnce spraying the ﬁeld is completed, the Patrol Robot\
    \ is informed to leave the\n136\ncheckpoint by the participating robots passing\
    \ from its vicinity (see Figure 4.24).\nWith this modiﬁcation, the robustness\
    \ of the system will be increased as the system\nbecomes independent of the number\
    \ of participating robots.\nFigure 4.24: The movement of other robots within the\
    \ vicinity of the Patrol Robot\nis an indication of task completion.\n137\n4.6\n\
    Conclusion\nAs mentioned, the restrictions deﬁned by the task of spraying do not\
    \ allow the\ncooperative approach designated to the task of ploughing to be applied\
    \ for the task\nof spraying. Speciﬁcally, the method that robots interact with\
    \ each other to obtain\nnecessary information is only appropriate in ploughing\
    \ since the execution result of\nploughing does not exist in spraying.\nThe main\
    \ idea of this project is to use the same robotic team for various open ﬁeld\n\
    related tasks including ploughing, spraying, harvesting, and etc. Therefore, another\n\
    interaction and coordination method have to be investigated for spraying. Since\n\
    explicit forms of communications do not exist in the robot, indirect methods are\n\
    only considered. However, spraying has temporary impact on the environment, thus\n\
    stigmergy-based interactions are inappropriate. Thus robots can only interact\
    \ with\neach other by monitoring each others behaviour. This was the focus of\
    \ this chapter:\nto answer cooperative-related questions including task allocation,\
    \ and coordination\nwith a speciﬁc form of indirect interaction.\nIn the proposed\
    \ approach, the task allocation is carried out in real-time and dur-\ning the\
    \ execution time in which robots occupy designated locations referred to as\n\
    checkpoints. While uncertain about their share of the task, the robots search\
    \ for an\nempty checkpoint to occupy. The checkpoints are appointed during design\
    \ period\nand all robots are aware of them. Once a checkpoint is occupied, the\
    \ robot remains\nat the location to assure that no other robots will spray the\
    \ region corresponding to\nthat location, otherwise, excessive spraying of chemicals\
    \ will ruin the crop. During\nthis stage, they continuously monitor the adjacent\
    \ checkpoint. The task will be ini-\ntiated once the last checkpoint is occupied.\
    \ The event of occupying and leaving the\ncheckpoint by the last robot triggers\
    \ the initiation task for the n−1 robot. This will\n138\npropagate down to all\
    \ checkpoints and robots one after another initiate the task.\nWhile spraying,\
    \ the interaction among robots will be reduced to simple collision\navoidance\
    \ as they need no other information to execute the rest of the task. The\nrobots\
    \ in the proposed solution face similar issues as in ploughing. This includes\n\
    mainly spacial congestion and collision avoidance. The implemented solutions in\n\
    ploughing can be transferred to spraying with minor to none modiﬁcation.\n139\n\
    4.7\nCritiques and Future Work\nRobots in this approach rely solely on their local\
    \ sensing with which there will\nbe certain limitations. The limitations are reviewed\
    \ and appropriate actions are\ntaken, and as a result, the robustness of the system\
    \ is improved to a certain extent.\nHowever, there are still few points which\
    \ result in total failure of the team.\nFirstly, even though Patrol Robot prevents\
    \ the overspray of the ﬁeld and prevents\nthe other robots to initiate the extra\
    \ round of spraying, the proposed update still\ndoes not entail how this is prevented\
    \ when the Patrol Robot has left the checkpoint.\nRobots are scattered around\
    \ the ﬁeld, and ﬁeld accessing is asynchronous, thus one\nor more robots may access\
    \ the ﬁeld when the task is ﬁnished. Consequently, the\nﬁeld may be resprayed\
    \ if enough robots are present.\nMoreover, as robots do not interact with each\
    \ other during the task of spraying, if\na robot fails in the middle of the ﬁeld,\
    \ how would other robots be informed about\nthis situation. Somehow, this information\
    \ has to be propagated through the team\nso further actions can be taken.\nThese\
    \ points have been identiﬁed as shortcomings of the proposed approach for\ncooperative\
    \ spraying, and they are suggested as further research directions.\n140\nCHAPTER\
    \ 5\nDiscussions, Conclusions and Future Works\nIn this chapter, a review of the\
    \ research and the proposed ap-\nproaches is provided 5.1. All proposed solutions\
    \ in diﬀerent aspect\nare compared in 5.2. The applicability of the proposed approaches\n\
    and their outcomes in other ﬁelds of application is discussed in 5.3.\nAnd ﬁnally,\
    \ the research is criticised, and the future directions of\nthe research and conclusion\
    \ are presented in 5.4.\n5.1\nResearch Recap\nThe main goal of this research was\
    \ to achieve the required cooperation using only\nthe local information of each\
    \ robot. In this way, task allocation and coordination\namong robots can be achieved\
    \ independent of the existence of a central unit and\ncommunicating signal. However,\
    \ the algorithm depends on the given task.\nIn open ﬁeld farming, tasks are either\
    \ sequential or concurrent. In sequential tasks,\nthe ﬁeld is processed in a particular\
    \ and strict order, and any violation of the exe-\ncution order cannot be tolerated\
    \ and the results are considered failure. Ploughing\nis an example of sequential\
    \ tasks. In furrow (narrow trench) and ridge (hill-top\nsoil) type of ploughing,\
    \ the plough creates a furrow by depositing to soil on a ridge.\nWhen creating\
    \ the next furrow the soil should be deposited in the previous furrow.\nViolating\
    \ the order will result in valleys (two consequent furrows) or crowns (two\nconsequent\
    \ ridges). This in return will cause irregularities in irrigation throughout\n\
    141\nthe process. On the other hand, in concurrent tasks, the ﬁeld can be processed\
    \ in\nany desired order. Spraying is categorised as concurrent.\nIn our ﬁeld investigation,\
    \ it was revealed that the task of ploughing is carried out\nusing two types of\
    \ ploughing mouldboard: reversible (with which the ploughing\nmould board can\
    \ be rotated) and conventional (with which the direction of the\nploughing mouldboard\
    \ is ﬁxed). Using conventional mouldboard, the ﬁeld could be\nploughed in one\
    \ direction in order to maintain the mentioned pattern. However,\nwith reversible\
    \ mouldboard, the ﬁeld could be ploughed from both ends of the ﬁeld.\nThis could\
    \ beneﬁt the ploughing cost as the ploughing units would require to travel\nless\
    \ distances to cover the entire ﬁeld.\nWith this in mind, ﬁrst, two approaches\
    \ were proposed for the task of ploughing\n(FIFO and LIFO) in which the robots\
    \ were assumed to be equipped with reversible\nmouldboards. In both described\
    \ approaches, the main idea was to carry out the\nmajority of cooperation during\
    \ the design time by performing oﬄine task allocation:\nto allocate series of\
    \ ploughing locations to each robot once robots found an order\nin the team. Knowing\
    \ the number of participating robots, to ﬁnd the order, robots\nmove to the ﬁrst\
    \ ploughing location assuming they are the ﬁrst robot in the order.\nWith the\
    \ use of the front-facing 2D-camera, they could identify the status of that\n\
    location (whether it is ploughed or not). If it was ploughed, they move on to\
    \ the\nnext ploughing location and increment their order in the team. Once an\
    \ unploughed\nlocation is identiﬁed, they would know their rank and could identify\
    \ the sets of\nploughing locations that is allocated to them.\nSince the ploughing\
    \ is carried out in both sides, robots could not plough the next\nlocation unless\
    \ all robots have completed their ploughing.\nThat is necessary to\nguarantee\
    \ the required sequential ploughing pattern. This means that a delay from\n142\n\
    a single robot will be propagated throughout the entire team. Even worse, if a\
    \ robot\nfails during or before task execution, the entire system would fail.\n\
    With this newly learned point in mind, the self-organised approach was introduced.\n\
    In this approach, the idea of beneﬁting from the reversible ploughing mouldboard\n\
    and the knowledge of the participating robots are ignored. The task allocation\
    \ is\nperformed in real-time in which robots have to seek for a new ploughing\
    \ location\nevery time. In this way, if a robot fails after a round of ploughing\
    \ or before even\nstarting the ploughing the team can recover from this failure\
    \ and complete the task.\nAlthough redundancy in the self-organising approach\
    \ is higher, it is more robust\ntoward failure of a single robot.\nThe self-organised\
    \ approach for the task of ploughing works only because the process\nof task allocation\
    \ can be carried out through changes made by other robots in the\nenvironment\
    \ (i.e. robots can detect and resume the task which is done by others).\nHowever,\
    \ this feature does not exist in other open farm tasks.\nHence, the self-\norganised\
    \ approach will fail if such feature does not exist. The task of spraying is\n\
    an example of these tasks.\nTherefore, for spraying, a new approach is proposed\
    \ in which robots perform the\nprocess of task allocation relying only on monitoring\
    \ each others behaviour. Spraying\ncan be categorised as a concurrent task. This\
    \ means that the ﬁeld can be processed\nfrom multiple locations independently.\
    \ Using this characteristic, in the proposed\nstrategy, the ﬁeld is divided into\
    \ smaller manageable regions.\nThe strategy is to spray each region by a unique\
    \ robot so that excessive spraying is\nprevented. Then, for each region, a representative\
    \ location is designated outside of\nthe ﬁeld called checkpoints. The checkpoints\
    \ are appointed during the design time\nand they are made known to all robots.\
    \ The robots, one after another, examine\n143\nthe checkpoints one by one to ﬁnd\
    \ the ﬁrst unoccupied checkpoint. Once an un-\noccupied location is identiﬁed,\
    \ the robot occupies it and position itself so that the\nvery next checkpoint\
    \ can be observed. In this way, the robots will inform others by\ntheir presence\
    \ that the correspondent region is claimed, also they can monitor any\nactivities\
    \ of the adjacent neighbour. In theory, the robots have to remain in their\nposition\
    \ until all checkpoints are occupied. Once a robot ﬁnds the last checkpoint\n\
    unoccupied, it proceeds but instead of remaining in the location, the robot resumes\n\
    the task. In the meantime, the adjacent robot monitoring this behaviour, appearing\n\
    and disappearing in the vicinity, concludes that the task is initiated, hence\
    \ it starts\nthe task. This propagates through all robots, and they initiate the\
    \ task one after\nanother.\nIn all four proposed approaches, two shared problems\
    \ have been identiﬁed: collision\navoidance, and resource conﬂict.\nFor collision\
    \ avoidance, the artiﬁcial potential\nfunction is implemented. Also, to prevent\
    \ the robots to enter the ﬁeld as a result of\nthe collision avoidance, an artiﬁcial\
    \ potential force is applied if the distance to the\nﬁeld is less than a threshold.\n\
    To resolve the resource conﬂict, a robot has to decide to either give priority\
    \ to\nanother robot or to ignore the presence of others and takes the path. This\
    \ decision\nhas to be made only on the basis of the local information of the robot.\
    \ For this,\nﬁrst the ﬁeld of view of the robot is divided into three regions:\
    \ Left Region (LR),\nFront Region (FR), and Right Region (RR). Then, using the\
    \ following conventions,\na robot can decide whether to take priority or not.\n\
    • Left Convention: If another robot is detected on the left region (LR), ignore\n\
    and take the priority.\n• Right and Front Convention: If a robot is detected in\
    \ front (FR) or on\n144\nthe right region (RR), wait (i.e. stop with zero velocity)\
    \ and give priority to\nthe detected robot.\nHowever, sensors are subject to noise,\
    \ and they cover only a limited range. This,\nsometimes, leads to robots remaining\
    \ undetected in the regions of interest. This is\ncommon when the robots are very\
    \ close to the shared location. To rectify this, a\nthreshold distance is deﬁned\
    \ on the left region. With this, the detected robots will\nbe considered on the\
    \ left region if the distance becomes less than a certain threshold\ndistance.\n\
    The conventions are only eﬀective when the robots are approaching from the same\n\
    direction. However, it is in-eﬀective when the robots are approaching from opposite\n\
    directions since both robots stop for the path to be cleared.\nThere are two reasons\
    \ why congestion still occurs in this situation: (I) The deﬁned\nconventions make\
    \ the robots to wait for another robot to take initiatives to clear\nthe path.\
    \ (II) Robots behave homogeneously (i.e. robots behave the same upon\nencountering\
    \ another robot in the aforementioned regions). In order to break the\nhomogeneity\
    \ in robots’ behaviour, instead of waiting at the time of detection, the\nrobots\
    \ move reversely with random velocity until the triggered region is cleared (i.e.\n\
    the robot is no longer in sight).\n5.2\nRegion-based vs Self-organised, FIFO,\
    \ LIFO\nIn this research, four cooperative area coverage algorithms are introduced\
    \ for two\ndiﬀerent methods of interaction.\nIn one, the group interacts via changes\
    \ in the\nenvironment as a result of execution of the task (chapter 3), and in\
    \ the other, via\nsensing and monitoring one another (chapter 4).\nThe considered\
    \ applications (spraying and ploughing) had limitations which did not\n145\nallow\
    \ for both approaches to be implemented. However, there are other applications\n\
    in which both approaches can be applied.\nFor example, in beacon distribution\n\
    application, robots can either collect information by observing each others behaviour\n\
    or by detecting the planted beacons in the environment. In this situation, which\n\
    approach is more appropriate? In this section, all proposed approaches are compared\n\
    with each other.\n5.2.1\nExecution Time Comparison\nOne of the main elements of\
    \ comparison is execution time. That is the amount\nof time required to cover\
    \ and process the entire ﬁeld. This includes both the task\nallocation and execution.\n\
    In all four proposed approaches, robots have to identify their share of the task\
    \ in\nreal-time and during execution time. This process is repeated for each robot\
    \ at the\nend of each turn in self-organising ploughing approach. Whereas in FIFO,\
    \ LIFO\nand spraying (hereafter refer to as the region-based), it occurs only\
    \ once and at the\nbeginning of the task. This decreases the overall execution\
    \ time for the region-based\napproach.\nHowever, as the number of robots increases,\
    \ the task allocation duration for the\nregion-based, FIFO, and LIFO approach\
    \ increases. This is due to the fact that task\nallocation in these three approaches\
    \ is performed sequentially and the resulted delay\naccumulates and propagates\
    \ over the system. Subsequently, all four approaches will\nhave more or less the\
    \ same execution time.\nThe results obtained from the simulation of both systems\
    \ in the Stage simulation\nenvironment using ROS API suggest that for smaller\
    \ team sizes (between 3 and\n10), using the region-based approach, a ﬁeld with\
    \ 51 process locations (furrows or\n146\ntracks) can be covered and processed\
    \ at shorter period of time (see Figure 5.1).\nHowever, with larger team sizes\
    \ (between 11 and 20), this advantage goes away and\nboth approaches perform equally.\n\
    Note that during data collection, the robots’ initial positions were ﬁxed around\
    \ the\nﬁeld. It started when the ﬁrst robot reached the ﬁrst point of interest\
    \ (ﬁrst ploughing\nlocation for the self-organised ploughing, and ﬁrst checkpoint\
    \ for the region-based).\nThe data collection stops when the last robot completes\
    \ the current task and leaves\nthe ﬁeld.\nFigure 5.1: Comparison between the self-organised,\
    \ FIFO, LIFO, and the region-\nbased in terms of execution time for team sizes\
    \ between 3 and 20 robots. Number\nof furrows in the ﬁeld = 51. The Stage simulation\
    \ results plotted using Matlab.\n5.2.2\nScalability, Flexibility and the Required\
    \ Coordination\nAnother element of comparison is scalability and ﬂexibility. That\
    \ is the level of\ntolerance when a single or a group of robots are added or removed\
    \ during execution\ntime. The level of scalability and ﬂexibility of the system\
    \ can be determined by the\namount of adjustment after the change is made. The\
    \ main area of impact when\n147\na robot is added or removed is task allocation.\
    \ In other words, when such change\nis made, the following question has to be\
    \ answered: which robot(s) will cover the\nunallocated portion of the task?\n\
    In FIFO and LIFO, the task allocation occurs only once (at the ﬁrst round of\n\
    execution) with a ﬁxed number of robots in the team. Any changes in team size\
    \ at\nany point during execution (e.g. a robot joins the team, or a faulty robot\
    \ breaks\ndown and get removed from the team) cannot be tolerated and the ﬁeld\
    \ will never\nget processed. It could be said that both FIFO and LIFO are not\
    \ ﬂexible, and any\nchanges to the team requires design time adjustments.\nIn\
    \ the region-based approach, robots also perform task allocation only once at\
    \ the\nbeginning. However, unlike FIFO and LIFO in which robots in advance have\
    \ team\nsize as global knowledge, in the region-based the team size is unknown\
    \ to the par-\nticipating robots. This improves the ﬂexibility of the system to\
    \ a certain extent.\nHowever, if a robot is removed from the team after the task\
    \ allocation is completed,\npart of the ﬁeld will require extra and separate attention\
    \ as no other robots will en-\nter the ﬁeld. It could be concluded that the region-based\
    \ approach is ﬂexible before\ntask allocation, however, the system cannot recover\
    \ itself if a robot is removed after\ntask allocation is completed. On the other\
    \ hand, adding a robot will not create ma-\njor impact on the performance of the\
    \ team, meaning that if a robot is added before\ntask allocation, the robot may\
    \ even be useful and replace a faulty robot, but after\nthe task allocation, it\
    \ has zero impact on the performance as it cannot participate\nin the task.\n\
    The self-organised approach has better scalability and ﬂexibility compared to\
    \ other\napproaches since the task allocation is occurring more than once for\
    \ each robot (i.e.\na robot’s understanding of the task and the environment is\
    \ refreshed at the end of\n148\nevery round of execution) as task allocation and\
    \ task execution are intertwined. In\naddition, like the region-based, the number\
    \ of participating robots is not considered\nfor task allocation. Therefore, at\
    \ any point during task execution, while the robots\nare outside the ﬁeld, if\
    \ a new robot or a group of robots join the process, the overall\nexecution time\
    \ will decrease. This is the same with removing a robot or a group of\nrobots\
    \ during execution. In either case, no changes are required to be made on the\n\
    behaviour of the robots and the system can fully recover if a robot is removed\
    \ or\nadded.\n5.2.3\nResilience Toward Failure\nIn the real world, robots may\
    \ fail due to various environmental causes, and it is\nimportant to consider how\
    \ does a team can adapt to the new situation and complete\nthe task. In the considered\
    \ applications, for each proposed cooperative algorithm,\nthe adaptability of\
    \ the system is viewed based on the location where the failure has\noccurred.\n\
    The points of failure could be listed as follows:\n1. failure during task allocation\
    \ : robots failure to be part of the team and fail\nto identify its share of the\
    \ task. This could be before task allocation or shortly\nafter task allocation.\n\
    2. failure during task execution : robots fail to complete the allocated share\
    \ of\nthe task. At this point, the task is initiated.\nThe focus of this section\
    \ is to view the ﬂexibility of the proposed algorithms during\nand shortly after\
    \ the task allocation. In any of the proposed approaches, failure\nduring task\
    \ execution has not been discussed. This is due to the limitations of both\ntasks\
    \ (spraying and ploughing) thus robots are not allowed to evade any traﬃc while\n\
    149\nin the ﬁeld (reminder: while in the ﬁeld, evasive manoeuvres of the robots\
    \ causes\nthe already processed part of the ﬁeld to be run over. This will destroy\
    \ the crop (in\nspraying) and the soil pattern (in ploughing)).\nHowever, the\
    \ eﬀect of this failure is diﬀerent. If any robot fails while performing\nthe\
    \ actual task of ploughing, the following robots will fail to resumes as the robots\n\
    cannot manoeuvre and pass the faulty robot. In other cases, the other robots can\n\
    treat the faulty one as a static obstacle and perform normal obstacle avoidance\
    \ while\nswitching the processing track. In the task of spraying, since the robots\
    \ process\nindependent sections of the ﬁeld, if a robot fails during the execution,\
    \ other robots\ncan successfully complete their share of the task. Therefore,\
    \ the failure tolerance is\nslightly higher.\nIn both the FIFO and LIFO approaches,\
    \ the team size is part of the common knowl-\nedge (i.e. every robot in the team\
    \ knows and relies on the number of participating\nrobot). Using this information,\
    \ robots in both approaches estimate where to plough\nnext. Since in ploughing\
    \ there is the sequential limitation (i.e. one furrow has to be\nfollowed by a\
    \ ridge), robot will never be able to successfully create this pattern on\nthe\
    \ ground if the predeﬁned team size is violated. This is because the execution\
    \ ini-\ntiation signal of a robot comes from the previous robot’s execution result\
    \ (i.e. each\nrobot has to make sure that the previous robot either has completed\
    \ the current\nploughing or already started a new round of ploughing). Therefore,\
    \ any failures in\nindividuals execution (including sudden death of a robot, or\
    \ addition of robots) will\nbe propagated throughout the team, and the ﬁeld will\
    \ not be ploughed.\nUnlike FIFO and LIFO, in the self-organised approach, the\
    \ task allocation does not\ndepend on the number of participating robots. In other\
    \ words, when losing one or\nmore robots at any point during task allocation others\
    \ can resume the task and\n150\nobtain where to plough next.\nIn the region-based\
    \ approach, the task allocation is dependent. In other words, if a\nrobot fails\
    \ during this stage, the task may never be initiated. However, once the task\n\
    has begun, the failure of one robot during execution does not aﬀect other robots.\n\
    151\n5.3\nApplication Scope\nIn this thesis, two cooperative algorithms are suggested\
    \ for the area coverage ap-\nplications which rely only on local sensing. The\
    \ considered ﬁeld applications are\nspraying and ploughing. There are more ﬁeld\
    \ applications (in area coverage cate-\ngory) which can beneﬁt from the proposed\
    \ algorithms including seeding, harvesting,\nde-mining, beacon distribution, aggregation\
    \ and etc. But which algorithm is suit-\nable for these ﬁeld of applications?\
    \ that is the question that is going to be answered\nin this section.\n5.3.1\n\
    Seeding\nAccording to Fao in 1997, “the location of plants In a furrow system\
    \ is not ﬁxed\nbut depends on the natural circumstances”. In areas with heavy\
    \ rainfall, the plants\nshould stand on top of the ridge in order to prevent damage\
    \ as a result of waterlog-\nging (Figure 5.2(a)). If water is scarce, the plants\
    \ may he put in the furrow itself,\nto beneﬁt more from the limited water (Figure\
    \ 5.2(b)). As salts tend to accumulate\nin the highest point, a crop on saline\
    \ soils should be planted away from the top of\nthe ridge. Usually it is planted\
    \ in two rows at the sides (Figure 5.2(c)). For winter\nand early spring crops\
    \ in colder areas, the seeds may be planted on the sunny side\nof the ridge (Figure\
    \ 5.2(d)). In hotter areas, seeds may be planted on the shady side\nof the ridge,\
    \ to protect them from the sun.\n152\nFigure 5.2: Seeding Methods (Fao, 1997):\
    \ (a) ridge seeding. (b) furrow seeding. (c)\nside ridge seeding. (d) side ridge\
    \ seeding sun movement\nIn some seeding approaches, it is possible to detect seeds\
    \ after it is planted, and in\nothers this feature does not exist. Depending on\
    \ seed detecting feature, either of\nthe self-organised, or the region-based approach\
    \ can be applied. Note that in the\nself-organised approach, the robots, instead\
    \ of searching for soil pattern changes,\nsearch for existence of seeds at particular\
    \ pre-deﬁned locations.\n5.3.2\nHarvesting\nHarvesting is the process of gathering\
    \ a ripe crop from the ﬁelds. This involves\nnavigation of the harvesting unit\
    \ throughout the ﬁeld. The navigation pattern of\nthe harvesting unit depends\
    \ on the crop. Root crops including onions, potatoes,\ncarrots, and beat roots\
    \ are harvested in rows. In this approach, the harvester has\nto follow the rows\
    \ and lift the crop out of the soil (Figure 5.3). Whereas when\nharvesting grains,\
    \ the harvester unit can navigate in any direction.\n153\nFigure 5.3: Harvesting\
    \ Carrot (Radu, 2014): the harvesting machine moves through\nthe rows and dig\
    \ out carrots\nIn this process for each group of crops, diﬀerent harvesting tools\
    \ are required which\nin return expects a diﬀerent form of behaviour. Generally,\
    \ harvesting machineries\ncan be classiﬁed into three diﬀerent categories: Human-Machine\
    \ Cooperation in\nwhich human is involved in actual picking of the crop (Figure\
    \ 5.4(a)), Machine-\nMachine Coordination in which there is at least one harvester\
    \ in cooperation with\na group of containers (Figure 5.4(b)), and Self-Containing\
    \ Machine Harvesters in\nwhich there is only one group of machines involved in\
    \ the process (Figure 5.4(c)).\nFigure 5.4: Harvesting Machines: (a) human-machine\
    \ cooperation harvesting (Hay-\ngrove, 2017). (b) machine-machine cooperation\
    \ (Deere, 2014). (c) self-contained\nharvesters (Landwirt, 2017)\n154\nHeterogeneous\
    \ Team for Harvesting\nA visit has been made to Noord Oost\nPolder in the Netherlands\
    \ during carrot and beet roots harvesting period. Interviews\nwere conducted with\
    \ the farmers and the harvesting operation was observed. Based\non our ﬁeld investigation,\
    \ when harvesting carrots or beet roots (to name a few),\nnormally a harvester\
    \ along with a group of container units are deployed into the\nﬁeld. The harvester\
    \ takes the lead and navigates through the ﬁeld. The containers,\none after another,\
    \ pose themselves in a way that they can receive the load from the\nharvester.\
    \ Only when the container robot is in position the harvester resumes with\nthe\
    \ operation.\nFrom a multi robotic perspective, this is a heterogeneous team since\
    \ there are two\nkinds of robots in the team (i.e.\nthey are diﬀerent in software\
    \ and hardware).\nAlthough the considered team in the proposed approaches (the\
    \ region-based and\nthe self-organised approach) is homogeneous (i.e. the participating\
    \ robots have the\nsame hardware and software), with slight modiﬁcation the self-organised\
    \ approach\ncan be applied in here. As there is only one harvester and it processes\
    \ the ﬁeld\nsequentially, the region-based approach is less eﬃcient and inappropriate.\n\
    The reason is the limitation in the participation of robots. Unlike spraying and\n\
    ploughing in which robots can participate with no self-deﬁned limitations, in\
    \ har-\nvesting robots can participate as much as the container capacity. In spraying\
    \ and\nploughing, robots can resume the task for the entire region or furrow,\
    \ whereas their\ncapacity may force them to leave the task after a short period\
    \ of participation. In\nthis situation, the more eﬃcient approach is the one in\
    \ which there are other robots\nto replace the full-capacity robot and ﬁll the\
    \ delay gap.This delay cannot be cov-\nered using the region-based approach, as\
    \ it is demonstrated in Figure 5.5. Whereas,\nrobots in self-organising approach\
    \ can recover each other (see Figure 5.6).\n155\nFigure 5.5: Single Harvester\
    \ Region-based Approach: robots on other regions cannot\ncontribute to the task\
    \ when other regions are being processed\nFigure 5.6: Single Harvester Self-organising\
    \ Approach: task progress does not de-\npend on the progress of another region\
    \ or track. All robots can participate at any\nlocation in the ﬁeld if the harvester\
    \ is available.\n156\nHomogeneous Team for Harvesting\nWhen each harvester becomes\
    \ capable\nto harvest and store the crop within itself, from the multi robotic\
    \ perspective, it\nbecomes a homogeneous team (since there is only one role in\
    \ the team and hence\nthe required software and hardware is the same). In this\
    \ situation, all available\napproaches can be applied. Note that redundancy in\
    \ the harvesting has no negative\neﬀect on the crop, unlike spraying.\n5.3.3\n\
    Multi-Robotic De-mining and Mine Field Mapping\nLandmines have killed more than\
    \ one million people since 1975 (Baudoin et al.,\n1999). It is estimated that\
    \ every year between 15000 and 25000 people are maimed\nor killed by landmines\
    \ (Walsh and Walsh, 2003). Interesting to know that the cost of\nmaking one landmine\
    \ is $3 - $10 whereas deactivating one cost between $300 - $1000.\nDemining operations\
    \ are deadly operations. According to Baudoin et al. (1999)\nfor every 5000 cleared\
    \ mines, there is one deminer killed. In order to clear some\n60,000,000 mines,\
    \ we could count some 12,000 deminers killed. This logic attracted\nmany human\
    \ free operations including human-rat cooperation (Nanayakkara et al.,\n2008),\
    \ and teleoperated robotics such as Uran-6 (Army-Technology, 2016) developed\n\
    by the Russian army.\nDuring the de-mining operation, the ﬁeld is investigated\
    \ for TNT signatures and\ndepending on the approach either the location is pinpointed\
    \ or the mine is disarmed.\nSince the unit has to deal with explosives, the failure\
    \ is highly probable, hence multi\nrobot system and redundancy in the approach\
    \ increases the chance of success.\n157\nFigure 5.7: human-free demining: (a)\
    \ Rats are trained to detect mines (Sumocake-\nwalk, 2015). (b) Uran-6, the latest\
    \ Russian demining unit deployed in Syria which\ncan tolerate upto 20 KG TNT explosion\
    \ (More, 2016).\nSince landmine deactivation is an open ﬁeld operation, and redundancy\
    \ is an ad-\nvantage as the chances of losing an agent due to dealing with explosives\
    \ is high,\nthe use of the region-based algorithm is recommended. This is solely\
    \ due to the\nfact that the region-based approach has higher ﬂexibility and tolerance\
    \ toward loss\nof an agent during task execution. In other proposed approaches\
    \ including FIFO,\nLIFO and the self-organised method, the failure of an agent\
    \ has impact on the task\nprogress, thus they are not appropriate for this task.\n\
    5.3.4\nCooperative Beacon Distribution\nAnother important ﬁeld operation that\
    \ can beneﬁt from the proposed approaches is\nthe distribution of beacons in an\
    \ open ﬁeld. In this application, a group of robots has\nto distribute themselves\
    \ (if they are the sensor) or they loaded sensors throughout\nthe ﬁeld. One example\
    \ of this application is localisation for underwater robotics.\nUnderwater robotic\
    \ requires localisation system since GPS signals cannot be reached\nunder the\
    \ water. One method is to distribute GPS beacons on the surface of the\nwater\
    \ as GPS receiving points.\n158\nAt the ﬁrst glance, it seems that both approaches\
    \ can be applied in this application.\nBut with a slight modiﬁcation: instead\
    \ of detecting pattern on water (furrow-ridge),\nthe approach should look for\
    \ beacons.\nBut there is one major drawback which\nprevents this approach to work.\
    \ The movement on the surface of the water makes\nthe self-organise approach to\
    \ be less reliable due to movement on the surface of the\nwater. However, the\
    \ region-based approach provides more reliable result compare\nto the self-organised\
    \ approach since does not require analysis of the changes in the\nenvironment\
    \ at particular locations.\n159\n5.4\nConclusion and Future Directions of Research\n\
    In this research, we provided four cooperative algorithms with which a team of\
    \ robots\ncan cover an open ﬁeld cooperatively with restrictions deﬁned by two\
    \ fundamentally\ndiﬀerent tasks, spraying, and ploughing. In the design of each\
    \ cooperative algorithm\nwe aimed to answer the following questions:\nTask Allocation\
    \ and Interaction : Which robot is processing which part of the\nﬁeld? and how\
    \ does each robot is informed about the state of the task and\nthe ﬁeld?\nCoordination\
    \ and Interaction : How robots detects and avoid obstacles? and\nhow robots reach\
    \ the targeted location one by one without congestion? (i.e.\nIn case two or more\
    \ robots want to access the same coordinate at the same\ntime, which one will\
    \ get there ﬁrst?)\nMethods using explicit forms of communication for coordination\
    \ and interaction was\nnot an option. This is due to the fact that these extensively\
    \ studied approaches suf-\nfer from losing the central organiser or the communicating\
    \ signal, and short range\nof signal coverage which makes them inappropriate for\
    \ large ﬁelds. Also, they all\nassume that initially robots are located within\
    \ the communication range which be-\ncomes invalid if robots are distributed around\
    \ the ﬁeld executing other tasks prior\nto the execution time.\nInstead, the focus\
    \ was to answer these research questions relying only on robot local\nsensing\
    \ (i.e.\ninteraction through the environment and through agent detection).\nHowever,\
    \ a single approach could not be applied for both considered tasks since\ndiﬀerent\
    \ task have diﬀerent characteristics. In ploughing, for example, as a result of\n\
    execution, a particular pattern is created on the soil. This pattern exists in\
    \ seeding\n160\nor spraying from the beginning, and if the ploughing interaction\
    \ method is applied in\nspraying, it will cause destructive results (reminder:\
    \ excessive chemical spraying on\na same location). Therefore the logic behind\
    \ team interaction could be in two ways:\neither robots detect previous robots\
    \ trail at particular locations, or they monitor\neach other behaviour throughout\
    \ the process.\nAs a result of ploughing, a 2D vision-based algorithm was developed\
    \ to detect\nthe created pattern on the soil at particular locations. And in ploughing,\
    \ a 2D\nvision-based and laser-based algorithm were developed to detect robots\
    \ behaviours\nthroughout the process.\nArtiﬁcial Potential Field (APF) method\
    \ is applied with which robots utilise the head-\nmounted laser range ﬁnder to\
    \ navigate through the ﬁeld while avoiding obstacles.\nUsing this method, robots\
    \ also prevented to enter the ﬁeld as the state of the task\nmay be unknown to\
    \ the robots. For this, massive artiﬁcial repulsion force is assigned\nto the\
    \ border of the ﬁeld which redirects the resultant sum force.\nIt also understood\
    \ that relying solely on the APF is not suﬃcient for navigation as\nall robots\
    \ aim to reach the same location at once. This is a known problem and it is\n\
    referred to as Spatial Resource Conﬂict. To solve this issue, an algorithm, Random\n\
    Reverse Velocity (RRV), was developed and infused with APF.\nCombining these algorithms,\
    \ four approaches was introduced: FIFO, LIFO, and the\nself-organised for ploughing\
    \ and the region-based approach for spraying. In FIFO,\nLIFO and the self-organised\
    \ approaches, the task allocation is carried out based on\nrobots visiting ploughing\
    \ locations and monitoring for a particular pattern (furrow-\nridge) on the soil.\
    \ The key diﬀerence between FIFO, LIFO and the self-organised\napproach is the\
    \ knowledge of the number of participating robots.\nIn FIFO and\nLIFO, the number\
    \ of participating robots is ﬁxed in other words it has no real-time\n161\nscalability\
    \ characteristics. That makes the task allocation really fast, but at the\nsame\
    \ time makes the approaches fragile since it needs every single robot to perform\n\
    at their best. Therefore, if the approach is applied in other applications in\
    \ which the\nstate of the robots can be guaranteed, FIFO and LIFO provide faster\
    \ performances.\nThe self-organised approach, on the other hand, is more reliable\
    \ for tasks in which\nrobots cannot be trusted as it provides more ﬂexibility\
    \ toward loss of an agent during\ntask allocation.\nIn the region-based approach,\
    \ the task allocation is carried out by claiming particular\nlocations outside\
    \ of the regions which are known to all robots. The robots visiting\nthese locations\
    \ see if the location is free. In this case, they proceed to occupy the\nlocation\
    \ otherwise they move on to the next location. They continuously monitor\nthe\
    \ robot in the next location to determine when to start their task. Once the task\n\
    is started, the robots resume the process independently. This makes the region-\n\
    based approach more ﬂexible towards loss of an agent during task execution in\n\
    contrast with other three approaches in which failure in the middle of execution\n\
    prevents the task to be completed. However, it is less ﬂexible that the self-organised\n\
    approach toward loss of an agent during task allocation process as task allocation\n\
    is a dependent task in the region-based approach.\nThe proposed approaches are\
    \ not solely designed for spraying and ploughing and\nthey can be applied to other\
    \ applications including seeding, harvesting, de-mining,\nline searching, aggregation,\
    \ beacon distribution and any other open ﬁeld operations\nwhich require a team.\n\
    Even though the simulation results in stage simulation environment with ROS is\n\
    promising, there are certain factors which are missing when simulating. These\
    \ im-\nproving factors are considered as the future direction of research and\
    \ they are listed\n162\nbelow:\n5.4.1\nRecovering from Failure During Task Execution\n\
    System optimisations introduced in chapter 3 and 4 make both the self-organised\n\
    and the region-based approach more resilient toward certain failure during task\n\
    allocation.\nHowever, if a robot fails during task execution in the middle of\
    \ the\nﬁeld, the task will never be completed successfully. Somehow other robots\
    \ have to\nbe informed about this situation and an appropriate action has to be\
    \ taken. For\napplications other than ploughing, evading the faulty robot and\
    \ resuming the task\ncould be an option, but the outcome is undesirable (now you\
    \ are left with a processed\nﬁeld with a faulty robot in the middle).\n5.4.2\n\
    Hybrid Approaches\nFrom the beginning of this research, the main aim was to obtain\
    \ the cooperation\nwithout the use of direct communication. Despite the promising\
    \ results, one cannot\ndeny and ignore the impact of direct communication in the\
    \ performance of the team.\nAlthough relying on direct communication for task\
    \ allocation is still recommended\nto be avoided due to initial assumption mentioned\
    \ in chapter 3, short range direct\ncommunication (e.g.\nvia RGB LED signals,\
    \ ultrasound messaging) can still be\nintegrated for coordination and error correction\
    \ purposes.\nThe followings are the foreseen areas in which short-range direct\
    \ communication can\nimprove:\nLocalisation Correction: robots can correct their\
    \ positioning system in case of\nlosing the GPS signal or whenever their conﬁdence\
    \ is dropped.\nRegion-based Task Allocation Optimisation: The region-based approach\
    \ they\n163\ncan reduce the region analysis time by broadcasting the region number\
    \ corre-\nsponding to the occupying checkpoint.\nSelf-organising Knowledge Update:\
    \ In the self-organised approach, each robot\nbuilds its own knowledge since they\
    \ solely rely on their ﬁeld investigation.\nWith the help of short-range communication,\
    \ robots which are spending more\ntime in the ﬁeld can broadcast their knowledge\
    \ (e.g. the last location number\nor coordinate that was processed, or the ﬁeld\
    \ has completely processed no need\nfor analysis) to whichever robot nearby. In\
    \ this way, the ﬁeld can be processed\nmuch quicker and more cost-eﬀectively.\n\
    Recovering From Failure During Task Execution: More importantly, short range\n\
    direct communication can be a quick solution for recovering from a failure dur-\n\
    ing task execution, particularly in ploughing. Since in ploughing, robots are\n\
    operating close to each other, robots which are trapped or stuck in the mid-\n\
    dle of the ﬁeld can beneﬁt from short range direct communication to ask for\n\
    assistance. The message can be propagated throughout the ﬁeld and appro-\npriate\
    \ strategies can take place. However, short-range direct communication\ncannot\
    \ resolve this issue if happens in the region-based approach since robots\nare\
    \ regions apart from each other. Unless the ﬁeld is partitioned in a way that\n\
    robots can be in communication range.\n164\nReferences\nAAPlus (2017). Pest control\
    \ courses.\nAgassounon, W. and Martinoli, A. (2002). Eﬃciency and robustness of\
    \ threshold-\nbased distributed allocation algorithms in multi-agent systems.\
    \ pages 1090–1097.\nAgriavis\n(2015).\nMouldboards.\nhttp://www.agriavis.com/\n\
    famille-115-charrues-1.html.\nAhmadi, M. and Stone, P. (2006). A multi-robot system\
    \ for continuous area sweep-\ning task. In Proceeding of the IEEE International\
    \ Conference on Robotics and\nAutomation (ICRA), pages 1724–1729.\nAiswarya, M.,\
    \ Farza, P., Kumar, S. S., Sneha, S., and Varughese, T. A. (2016).\nAutomatic\
    \ weed detection system and smart herbicide sprayer robot for corn\nﬁelds. IJRCCT,\
    \ 5(2):055–058.\nAlexandratos, N. and Bruinsma, J. (2012). World agriculture towards\
    \ 2030/2050:\nThe 2012 revision. Food and Agriculture Organization of the United\
    \ Nations, pages\n1–154.\nAnil, H., Nikhil, K., Charitra, V., and Gurusharan,\
    \ B. (2015). Revolutionizing farm-\ning using swarm robotics, modelling and simulation.\
    \ 6th International Conference\non Intelligent Systems, 19(3):141–147.\n165\n\
    Arbanas, B., Ivanovic, A., Car, M., Haus, T., Orsag, M., Petrovic, T., and Bogdan,\n\
    S. (2016). Aerial-ground robotic system for autonomous delivery tasks. pages\n\
    5463–5468.\nArguenon, V., Bergues-Lagarde, A., Rosenberger, C., Bro, P., and Smari,\
    \ W. (2006).\nMulti-agent based prototyping of agriculture robots. pages 282–288.\n\
    Arkin, R. (1998). Behaviour-based Robotic. The MIT Press, 1 edition.\nArmy-Technology\
    \ (2016). Uran-6 mine-clearing robot, russia.\nArslan, G., Marden, J., and Shamma,\
    \ J. (2007). Autonomous vehicle-target assign-\nment: A game-theoretical formulation.\
    \ Journal of Dynamic Systems, Measure-\nment, and Control, 129(5):584–596.\nAsama,\
    \ H., Matsumoto, A., and Ishida, Y. (1989). Design of an autonomous and\ndistributed\
    \ robot system: Actress. IROS, 89:283–290.\nAstrand, B. and Baerveldt, A. (2002).\
    \ An agricultural mobile robot with vision-\nbased perception for mechanical weed\
    \ control. Autonomous Robots, 13(1):21–35.\nBakker, T. (2009). An Autonomous Robot\
    \ for Weed Control.\nBalta, H., Bedkowski, J., Govindaraj, S., Majek, K., Musialik,\
    \ P., Serrano, D.,\nAlexis, K., Siegwart, R., and Cubber, G. (2015). Integrated\
    \ data management for\na ﬂeet of searchandrescue robots. Journal of Field Robotics.\n\
    Banﬁ, J., Li, A. Q., Basilico, N., Rekleitis, I., and Amigoni, F. (2016). Asynchronous\n\
    multirobot exploration under recurrent connectivity constraints. 2016 IEEE In-\n\
    ternational Conference on Robotics and Automation (ICRA), pages 5491–5498.\nBarca,\
    \ J. C. and Sekercioglu, Y. A. (2013). Swarm robotics reviewed. Robotica,\n13:345–359.\n\
    166\nBarrientos, A. G., Lopez, J. L., Espinoza, E. S., Hoyo, J., and Palomo, G.\
    \ V. (2016).\nObject transportation using a cooperative mobile multi-robot system.\
    \ IEEE Latin\nAmerica Transactions, 14(3):1184–1191.\nBatalin, M. A. and Sukhatme,\
    \ G. S. (2002). Spreading out: A local approach to\nmulti-robot coverage. pages\
    \ 373–382.\nBaudoin, Y., Acheroy, M., Piette, M., and Salmon, J. (1999). Humanitarian\
    \ demi-\nning and robotics. Mine Action Information Journal issue on Machine Assisted\n\
    Demining, 3(2).\nBeck, Z., Teacy, L., Rogers, A., and Jennings, N. (2016).\nOnline\
    \ planning for\ncollaborative search and rescue by heterogeneous robot teams.\
    \ In Proceedings of\nthe 2016 International Conference on Autonomous Agents and\
    \ Multiagent Systems\n- International Foundation for Autonomous Agents and Multiagent\
    \ Systems, pages\n1024–1033.\nBell, T. (2000).\nAutomatic tractor guidance using\
    \ carrier-phase diﬀerential gps.\nComputers and electronics in agriculture, 25(1):53–66.\n\
    Billingsley, J. and Schoenﬁsch, M. (1997).\nThe successful development of a vi-\n\
    sion guidance system for agriculture. Computers and electronics in agriculture,\n\
    16(2):147–163.\nBlackmore, S. (2012).\nRobotic agriculture:\nDesigning systems\
    \ for the farm of\ntomorrow.\nhttps://www.innovateuk.org/c/document_library/get_file?\n\
    groupId=2828839&folderId=7196297&title=3+Simon+Blackmore+Robotic_\nAgriculture.pdf.\n\
    Bloss, R. (2014). Robot innovation brings to agriculture eﬃciency, safety, labor\n\
    167\nsavings and accuracy by plowing, milking, harvesting, crop tending/picking\
    \ and\nmonitoring. Industrial Robot: An International Journal, 41(6):493–499.\n\
    Borenstein, J., Everett, H. R., Feng, L., and Wehe, D. (1997).\nMobile robot\n\
    positioning-sensors and techniques.\nBorenstein, J. and Feng, L. (1996).\nMeasurement\
    \ and correction of systematic\nodometry errors in mobile robots. IEEE Transactions\
    \ on robotics and automation,\n12(6):869–880.\nBotelho, S. C. and Alami, R. (1999).\
    \ M+: a scheme for multi-robot cooperation\nthrough negotiated task allocation\
    \ and achievement. 2:1234–1239.\nCaloud, P., Choi, W., Latombe, J. C., Le Pape,\
    \ C., and Yim, M. (1990). Indoor au-\ntomation with many mobile robots. Intelligent\
    \ Robots and Systems’ 90.’Towards a\nNew Frontier of Applications’, Proceedings.\
    \ IROS’90. IEEE International Work-\nshop on, pages 67–72.\nCastello, E., Yamamoto,\
    \ T., Dalla Libera, F., Liu, W., Winﬁeld, A., Nakamura, Y.,\nand Ishiguro, H.\
    \ (2016). Adaptive foraging for simulated and real robotic swarms:\nthe dynamical\
    \ response threshold approach. Swarm Intelligence, 10(1):1–31.\nChandrasekaran,\
    \ B., Annadurai, K., and Somasundaram, E. (2010). A Textbook of\nAgronomy. New\
    \ Age International, 1 edition.\nChawla, K. and Robins, G. (2011). An rﬁd-based\
    \ object localisation framework.\nInternational journal of radio frequency identiﬁcation\
    \ technology and applications,\n3(1-2):2–30.\nChoi, J. S. S., Lee, H., Elmasri,\
    \ R., and Engels, D. W. (2009). Localization systems\nusing passive uhf rﬁd. pages\
    \ 1727–1732.\n168\nChoi, K. H., Han, S. K., Park, K. H., Kim, K. S., and Kim,\
    \ S. (2015). Vision based\nguidance line extraction for autonomous weed control\
    \ robot in paddy ﬁeld. 2015\nIEEE International Conference on Robotics and Biomimetics\
    \ (ROBIO), pages\n831–836.\nChoset, H. (2001).\nCoverage for robotics–a survey\
    \ of recent results.\nAnnals of\nmathematics and artiﬁcial intelligence, 31(1-4):113–126.\n\
    Chung, W. and Lau, E. (2007). Enhanced rssi-based real-time user location tracking\n\
    system for indoor and outdoor environments. pages 1213–1218.\nClarke, L. (1997).\
    \ Agricultural mechanization strategy formulation, concepts and\nmethodology and\
    \ the roles of the private sector and the government. AGST, Food\nand Agriculture\
    \ Organisation (FAO), 7:143–147.\nConnolly, C. and Grupen, R. (1993). The applications\
    \ of harmonic functions to\nrobotics. Journal of Robotic Systems, 10(7):931–946.\n\
    Cottefoglie, F., Farinelli, A., Iocchi, L., and Nardi, D. (2004).\nDynamic token\n\
    generation for constrained tasks in a multi-robot system.\nSystems, Man and\n\
    Cybernetics, 2004 IEEE International Conference on, 1:911–917 vol.1.\nCouceiro,\
    \ M. (2015). An overview of swarm robotics for search and rescue applica-\ntions.\
    \ Handbook of Research on Design, Control, and Modeling of Swarm Robotics,\npage\
    \ 345.\nDai, X., Jiang, L., and Zhao, Y. (2016). Cooperative exploration based\
    \ on supervi-\nsory control of multi-robot systems. Applied Intelligence, pages\
    \ 1–12.\nDeere,\nJ.\n(2014).\nJohn\ndeere\nannounces\ncertiﬁed\npre-owned\nequip-\n\
    ment\nprogram.\nhttps://investor.deere.com/our-company/\n169\ninvestors-relations/news-releases/news-releases/2014/\n\
    John-Deere-Announces-Certified-Pre-Owned-Equipment-Program/\ndefault.aspx.\nDias,\
    \ M. B., Zlot, R., Kalra, N., and Stentz, A. (2006). Market-based multirobot\n\
    coordination: A survey and analysis. Proceedings of the IEEE, 94(7):1257–1270.\n\
    Drenjanac, D. and Tomic, S. (2013). Middleware challenges in robotic ﬂeets for\n\
    precision agriculture. In Recent Advances in Robotics and Mechateronics, pages\n\
    23–34.\nDrenjanac, D., Tomic, S., Klausner, L., and Kuhn, E. (2014). Harnessing\
    \ coher-\nence of area decomposition and semantic shared spaces for task allocation.\
    \ In\nInformation Processing in Agriculture, pages 23–34.\nDudek, G., Jenkin,\
    \ M. R., Milios, E., and Wilkes, D. (1996).\nA taxonomy for\nmulti-agent robotics.\
    \ Autonomous Robots, 3(4):375–397.\nEnglish, A., Ball, D., Ross, P., Upcroft,\
    \ B., Wyeth, G., and Corke, P. (2013). Low\ncost localisation for agricultural\
    \ robotics. pages 1–8.\nEstate, W. P. (2015). Three tractors ploughing together.\
    \ https://www.youtube.\ncom/watch?v=IcWuVXUvj9w.\nEurostat (2015).\nAgricultural\
    \ labour input.\nhttp://ec.europa.eu/eurostat/\nstatistics-explained/index.php/Archive:Agricultural_labour_input.\n\
    Faivre, S., Anderson, N., and Stelford, M. (2008). Agricultural automation system\n\
    with ﬁeld robot. US Patent App. 11/498,392.\nFao (1997). Chapter 3. furrow irrigation.\
    \ http://www.fao.org/docrep/s8684E/\ns8684e04.htm.\n170\nFao (2002). World agriculture:\
    \ towards 2015/2030 Summary report. FOOD AND\nAGRICULTURE ORGANIZATION OF THE\
    \ UNITED NATIONS, 1 edition.\nFao (2009). Global agriculture towards 2050. High\
    \ Level Expert Forum, pages 1–4.\nFarinelli, A., Iocchi, L., and Nardi, D. (2004).\
    \ Multirobot systems: a classiﬁcation\nfocused on coordination. IEEE Transactions\
    \ on Systems, Man, and Cybernetics,\nPart B (Cybernetics), 34(5):2015–2028.\n\
    Fazeli, P., Davoodi, A., and Pasquier, A. (2010). Fault-tolerant multi-robot area\
    \ cov-\nerage with limited visibility. Proceedings of the ICRA 2010 Workshop on\
    \ Search\nand Pursuit/Evasion in the Physical World: Eﬃciency, Scalability, and\
    \ Guaran-\ntees.\nFukuda, T. and Kawauchi, Y. (1990). Cellular robotic system\
    \ (cebot) as one of\nthe realization of self-organizing intelligent universal\
    \ manipulator. Robotics and\nAutomation, 1990. Proceedings., 1990 IEEE International\
    \ Conference on, pages\n662–667.\nGarrido-Jurado, S., Mu˜noz-Salinas, R., Madrid-Cuevas,\
    \ F., and Mar´ın-Jim´enez, M.\n(2014). Automatic generation and detection of highly\
    \ reliable ﬁducial markers\nunder occlusion. Pattern Recognition, 47(6):2280–2292.\n\
    Gerkey, B. and Mataric, M. J. (2004). A formal analysis and taxonomy of task\n\
    allocation in multi-robot systems. The International Journal of Robotics Research,\n\
    23(9):939–954.\nGerkey, B., Vaughan, R., and Howard, A. (2003). The player/stage\
    \ project: Tools\nfor multi-robot and distributed sensor systems. In Proceedings\
    \ of the 11th inter-\nnational conference on advanced robotics, 1:317–323.\n171\n\
    Gerkey, B. P. and Mataric, M. J. (2002). Sold!: Auction methods for multirobot\n\
    coordination. IEEE transactions on robotics and automation, 18(5):758–768.\nGolait,\
    \ R. (2007).\nCurrent issues in agriculture credit in india: An assessment.\n\
    Reserve Bank of India Occasional Papers, 28:1–22.\nGraca, R. A., Xiao, D., and\
    \ Cheng, S. (2016). Multi-arm robotic painting process\nsynchronization. US Patent\
    \ 9,227,322.\nGrass´e, P.-P. (1959). La reconstruction du nid et les coordinations\
    \ interindividuelles\nchezbellicositermes natalensis etcubitermes sp. la th´eorie\
    \ de la stigmergie: Essai\nd’interpr´etation du comportement des termites constructeurs.\
    \ Insectes sociaux,\n6(1):41–80.\nGraves, A., Morris, J., Deeks, L., Rickson,\
    \ R., Kibblewhite, M., Harris, J., Farewell,\nT., and Truckle, I. (2015). The\
    \ total costs of soil degradation in england and\nwales. Ecological Economics,\
    \ 119:399–413.\nGrift, T., Zhang, Q., Kondo, N., and Ting, K. (2008). A review\
    \ of automation and\nrobotics for the bio-industry. Journal of Biomechatronics\
    \ Engineering, 1:37–54.\nGuardian (2010). Guardian project. https://bit.ly/2Qp2zdL.\n\
    Gunn, T. and Anderson, J. (2015).\nDynamic heterogeneous team formation for\n\
    robotic urban search and rescue.\nJournal of Computer and System Sciences,\n81(3):553–567.\n\
    Habibi, G., Xie, W., Jellins, M., and McLurkin, J. (2016). Distributed path planning\n\
    for collective transport using homogeneous multi-robot systems. In Distributed\n\
    Autonomous Robotic Systems: Springer Japan, pages 151–164.\n172\nHague, T. and\
    \ Tillett, N. (2001). A bandpass ﬁlter-based approach to crop row\nlocation and\
    \ tracking. Mechatronics, 11(1):1–12.\nHansen, K. D., Garcia-Ruiz, F., Kazmi,\
    \ W., Bisgaard, M., la Cour-Harbo, A., Ras-\nmussen, J., and Andersen, H. J. (2013).\
    \ An autonomous robotic system for map-\nping weeds in ﬁelds. IFAC Proceedings\
    \ Volumes, 46(10):217–224.\nHaygrove\n(2017).\nPic-king\n5\nseries.\nhttp://www.haygrove.co.za/\n\
    harvesting-machinery/harvest-rigs/pic-king-5-series/.\nHewitt, C., Bishop, P.,\
    \ and Steiger, R. (1973). A universal modular actor formalism\nfor artiﬁcial intelligence.\
    \ Proceedings of the 3rd international joint conference on\nArtiﬁcial intelligence,\
    \ pages 235–245.\nHokuyo (2009). hokuyo-urg-04lx-ug01 data sheet. http://www.robotshop.com/\n\
    media/files/pdf/hokuyo-urg-04lx-ug01-specifications.pdf.\nHorna, R., Domialb,\
    \ H., Slowihka-Jurkiewiczb, A., and Van-Ouwekerk, C. (1995).\nSoild compaction\
    \ processes and their eﬀects on the structure of arable soils and\nthe environment.\
    \ Soil and Tillage Research, pages 23–36.\nHoumy, K., Clarke, L. J., Ashburner,\
    \ J. E., and Kienzle, J. (2013). Agricultural\nMechanisation in Sub-Saharan Africa\
    \ Guidlines for preparing a strategy. Food\nand Agriculture Organisation.\nHoward,\
    \ A., Mataric, M. J., and Sukhatme, G. S. (2002). Mobile sensor network\ndeployment\
    \ using potential ﬁelds: A distributed, scalable solution to the area\ncoverage\
    \ problem. pages 299–308.\nHuang, X., Janaswamy, R., and Ganz, A. (2006). Scout:\
    \ outdoor localization using\nactive rﬁd technology. pages 1–10.\n173\nImou, K.,\
    \ Tani, S., and Yokoyama, S. (2009). Localization of agricultural vehicle\nusing\
    \ landmarks based on omni-directional vision.\nIocchi, L., Nardi, D., and Salerno,\
    \ M. (2000). Reactivity and deliberation: a survey\non multi-robot systems. In\
    \ Balancing reactivity and social deliberation in multi-\nagent systems, 4:9–32.\n\
    ISwarm\n(2006).\nGuardian\nproject.\nhttps://www.shu.ac.uk/research/\nspecialisms/materials-and-engineering-research-institute/\n\
    what-we-do/projects/automation-and-robotics/\niswarm-intelligent-small-world-autonomous-robots-for-micro-manipulation.\n\
    Jager, M. and Nebel, B. (2001). Decentralized collision avoidance, deadlock de-\n\
    tection, and deadlock resolution for multiple mobile robots. Intelligent Robots\n\
    and Systems, 2001. Proceedings. 2001 IEEE/RSJ International Conference on,\n3:1213–1219.\n\
    Janani, A. (2015a). Ros-stage mrs area coverage, implicit form of interaction\
    \ (lifo).\nhttps://bit.ly/2OoUdFp.\nJanani, A. (2015b). Ros-stage mrs ploughing\
    \ (with reversible moldboard) team of\n8 robots (laser and camera) appraoch 1.\
    \ https://bit.ly/2y7Gzwa.\nJanani, A. (2015c). Ros-stage mrs spraying team of\
    \ 10 robots (laser and camera).\nhttps://bit.ly/2DKVtyI.\nJanani, A. (2016). Self-organising\
    \ ploughing. https://bit.ly/2OoRZWz.\nJanani, A. (2017). Artiﬁcial potential ﬁeld\
    \ ros stage simulation environment. https:\n//bit.ly/2OruUTh.\nJanani, A. (2018a).\
    \ Apf on pioneer 3at and hokuyo lidar. https://bit.ly/2xPuRXX.\n174\nJanani, A.\
    \ (2018b). Apf on pioneer 3at and hokuyo lidar(2). https://bit.ly/\n2OrvS1R.\n\
    Janani, A. (2018c). congestion avoidance: ﬂee-opposite algorithm (with random\n\
    reverse velocity). https://bit.ly/2RcwBm2.\nJeon, S., Jang, M., Lee, D., Cho,\
    \ Y., Kim, J., and Lee, J. (2016). Multiple robots\ntask allocation for cleaning\
    \ and delivery. pages 195–214.\nJones, C. and Mataric, M. J. (2005). Behavior-based\
    \ coordination in multi-robot\nsystems. Autonomous Mobile Robots: Sensing, Control,\
    \ Decision-Making, and\nApplications, pages 1–40.\nJose, K. and Pratihar, D. K.\
    \ (2016). Task allocation and collision-free path planning\nof centralized multi-robots\
    \ system for industrial plant inspection using heuristic\nmethods. Robotics and\
    \ Autonomous Systems, 80:34–42.\nJung, D. and Zelinsky, A. (2000). Grounded symbolic\
    \ communication between het-\nerogeneous cooperating robots. Autonomous Robots,\
    \ 8(3):269–292.\nK-Team\n(2017).\nKhepera\niii.\nhttps://www.k-team.com/\nmobile-robotics-products/old-products/khepera-iii.\n\
    Karla, N. and Martinoli, A. (2006).\nA comparative study of market-based and\n\
    threshold-based task allocation.\n8th Symposium on Distributed Autonomous\nRobotic\
    \ Systems, pages 91–101.\nKato, S., Nishiyama, S., and Takeno, J. (1992). Coordinating\
    \ mobile robots by\napplying traﬃc rules. Intelligent Robots and Systems, 1992.,\
    \ Proceedings of the\n1992 lEEE/RSJ International Conference on, 3:1535–1541.\n\
    175\nKhan, M. H., Li, S., Wang, Q., and Shao, Z. (2016). Distributed multirobot\
    \ forma-\ntion and tracking control in cluttered environments. ACM Trans. Auton.\
    \ Adapt.\nSyst., 11(2):1–22.\nKhatib, O. (1986). Real-time obstacle avoidance\
    \ for manipulators and mobile robots.\nInt. J. of Robotics Research, 5.\nKitano,\
    \ H., Asada, M., Kuniyoshi, Y., Noda, I., Osawa, E., and Matsubara, H.\n(1997).\
    \ Robocup: A challenge problem for ai. AI magazine, 18(1):73.\nKoch, P., May,\
    \ S., Schmidpeter, M., K¨uhn, M., Pﬁtzner, C., Merkl, C., Koch,\nR., Fees, M.,\
    \ Martin, J., and N¨uchter, A. (2015). Multi-robot localization and\nmapping based\
    \ on signed distance functions. pages 77–82.\nKoditschek, D. and Rimon, E. (1990).\
    \ Robot navigation functions on manifolds\nwith boundary. Advances in Applied\
    \ Mathematics, 11(4):412–442.\nKong, C. S., Peng, N., and Rekleitis, I. (2006).\
    \ Distributed coverage with multi-\nrobot system. Proceedings 2006 IEEE International\
    \ Conference on Robotics and\nAutomation, 2006. ICRA 2006., pages 2423–2429.\n\
    Krieger, M. J. B., Billeter, J., and Keller, L. (2000). Ant-like task allocation\
    \ and\nrecruitment in cooperative robots. Nature, 406:992–995.\nLandwirt (2017).\n\
    Grimme kartoﬀelroder se 260.\nhttps://www.landwirt.\ncom/berichtdiashow/Agritechnica_2013_News_Erntetechnik,13,\n\
    Grimme-Kartoffelroder-SE-260.html.\nLee, J., Nam, Y., Hong, S., and Cho, W. (2012).\
    \ New potential functions with\nrandom force algorithms using potential ﬁeld method.\
    \ Journal of Intelligent and\nRobotic Systems, 66(3):303–319.\n176\nLi, G., Yamashita,\
    \ A., Asama, H., and Tamura, Y. (2012). An eﬃcient improved arti-\nﬁcial potential\
    \ ﬁeld based regression search method for robot path planning. 2012\nIEEE International\
    \ Conference on Mechatronics and Automation, pages 1227–\n1232.\nLi, L., Martinoli,\
    \ A., and Y.S., A.-M. (2002). Emergent specialization in swarm\nsystems. Third\
    \ International Conference Manchester, UK, August 12-14, 2002\nProceedings, pages\
    \ 261–266.\nLi, N., Remeikas, C., Xu, Y., Jayasuriya, S., and Ehsani, R. (2015).\
    \ Task assignment\nand trajectory planning algorithm for a class of cooperative\
    \ agricultural robots.\nJournal of Dynamic Systems, Measurement and Control, 137(5):1–9.\n\
    Li, Q., Wang, L., Chen, B., and Zhou, Z. (2011). An improved artiﬁcial potential\
    \ ﬁeld\nmethod for solving local minimum problem. Proceedings of 2011 2nd International\n\
    Conference on Intelligent Control and Information Processing, pages 420–424.\n\
    Liekna, A. and Grundspenkins, J. (2014). Towards practical application of swarm\n\
    robotics: overview of swarm tasks. In Proceedings of the 13th International Con-\n\
    ference Engineering for Rural Development, pages 271–277.\nLiu, J. and Wu, J.\
    \ (2001). Multi-Agent Robotic Systems. CRC Press, 1 edition.\nLopez-Gonzalez,\
    \ A., Ferreira, E., Hernandez-Martinez, E., Flores-Godoy, J.,\nFernandez-Anaya,\
    \ G., and Paniagua-Contro, P. (2016). Multi-robot formation\ncontrol using distance\
    \ and orientation. Advanced Robotics, pages 1–13.\nLuke, S., Hohn, C., Farris,\
    \ J., Jackson, G., and Hendler, J. (1998). Co-evolving\nsoccer softbot team coordination\
    \ with genetic programming. Third International\nConference Manchester, UK, August\
    \ 12-14, 2002 Proceedings, pages 398–411.\n177\nLumelsky, V. and Harinarayan,\
    \ K. (1997). Decentralized motion planning for mul-\ntiple mobile robots: The\
    \ cocktail party model. Journal of Autonomous Robots,\n4:121–135.\nLuna, R. and\
    \ Bekris, K. E. (2011). Eﬃcient and complete centralized multi-robot\npath planning.\
    \ In Proceedings of IROS’11, pages 3268-3275, San Francisco, CA,\nUSA.\nMarchant,\
    \ J. (1996). Tracking of row structure in three crops using image analysis.\n\
    Computers and Electronics in Agriculture, 15(2):161–179.\nMarchant, J. and Brivot,\
    \ A. (1995). Real-time tracking of plant rows using a hough\ntransform. Real-Time\
    \ Imaging, 1(5):363–371.\nMarcolino, L. and Chaimowicz, L. (2009a). Traﬃc control\
    \ for a swarm of robots:\nAvoiding target congestions. 2009 IEEE/RSJ International\
    \ Conference on Intel-\nligent Robots and Systems, pages 1955–1966.\nMarcolino,\
    \ L. S. and Chaimowicz, L. (2009b). Traﬃc control for a swarm of robots:\nAvoiding\
    \ group conﬂicts. 2009 IEEE/RSJ International Conference on Intelligent\nRobots\
    \ and Systems, pages 1949–1954.\nMarden, S. and Whitty, M. (2014). Gps-free localisation\
    \ and navigation of an un-\nmanned ground vehicle for yield forecasting in a vineyard.\n\
    Marjovi, A., Nunes, J. G., Marques, L., and de Almeida, A. (2010). Multi-robot\
    \ ﬁre\nsearching in unknown environment. pages 341–351.\nMataric, M. J., Nilsson,\
    \ M., and Simsarin, K. T. (1995). Cooperative multi-robot\nbox-pushing. 3:556–561.\n\
    178\nMendoza, J., Biswas, J., Cooksey, P., Wang, R., Klee, S., Zhu, D., and Veloso,\
    \ M.\n(2016). Selectively reactive coordination for a team of robot soccer champions.\n\
    Proceedings of AAAI-16 (2016, to appear).\nMing, L., Imou, K., Wakabayashi, K.,\
    \ and Yokoyama, S. (2009). Review of research\non agricultural vehicle autonomous\
    \ guidance. International Journal of Agric Biol\nEng, 2:1–16.\nMore, R. Q. (2016).\
    \ Russia’s mine-clearing uran-6 robots to help get rid of hidden\nexplosives in\
    \ palmyra (videos).\nMousazadeh, H. (2013). A technical review on navigation systems\
    \ of agricultural\nautonomous oﬀ-road vehicles. Journal of Terramechanics, 50:211–232.\n\
    Murphy, R. R. (2000). Marsupial and shape-shifting robots for urban search and\n\
    rescue. IEEE Intelligent Systems and their Applications, 15(2):14–19.\nNanayakkara,\
    \ T., Dissanayake, T., Mahipala, P., and Sanjaya, K. G. (2008). A\nhuman-animal-robot\
    \ cooperative system for anti-personal mine detection.\nNoguchi, N. and Barawid,\
    \ O. (2011). Robot farming system using multiple robot\ntractors in japan agriculture.\
    \ Preprints of the 18th IFAC World Congress Milano,\n18(1):633–637.\nNoguchi,\
    \ N., Will, J., Reid, J., and Zhang, Q. (2004). Development of a master–\nslave\
    \ robot system for farm operations. Computers and Electronics in agriculture,\n\
    44(1):1–19.\nNoreils, F. R. (1993). Toward a robot architecture integrating cooperation\
    \ between\nmobile robots: Application to indoor environment. The International\
    \ Journal of\nRobotics Research, 12(1):79–98.\n179\nOkamoto, M. and Akella, M.\
    \ (2016). Avoiding the local-minimum problem in multi-\nagent systems with limited\
    \ sensing and communication. International Journal of\nSystems Science, 47(8):1943–1952.\n\
    Oksanen, T., Linja, M., and Visala, A. (2005). Low-cost positioning system for\n\
    agricultural vehicles. pages 297–302.\nPark, M., Jeon, J., and Lee, M. (2001).\
    \ Obstacle avoidance for mobile robots using\nartiﬁcial potential ﬁeld approach\
    \ with simulated annealing. Industrial Electronics,\n2001. Proceedings. ISIE 2001.\
    \ IEEE International Symposium on, 3:1530–1535.\nPark, M. and Lee, M. (2003).\n\
    Artiﬁcial potential ﬁeld based path planning for\nmobile robots using a virtual\
    \ obstacle concept. Proceedings of 2003 IEEE/ASME\nInternational Conference on\
    \ Advanced Intelligent Mechatronics, pages 735–740.\nParker, C. A. C., Zhang,\
    \ H., and Kube, C. R. (2003). Blind bulldozing: multiple\nrobot nest construction.\n\
    Intelligent Robots and Systems, 2003. (IROS 2003).\nProceedings. 2003 IEEE/RSJ\
    \ International Conference on, 2:2010–2015.\nParker, L. (1993). Designing control\
    \ laws for cooperative agent teams. Proceedings of\nthe IEEE International Conference\
    \ on Robotics and Automation, Hidden Valley,\nPennsylvania.\nParker, L. (1994a).\
    \ Heterogeneous multi-robot cooperation (no. ai-tr-1465). Mas-\nsachusetts Inst\
    \ of Tech Cambridge Artiﬁcial Intelligence Lab.\nParker, L. E. (1994b). Alliance:\
    \ An architecture for fault tolerant, cooperative con-\ntrol of heterogeneous\
    \ mobile robots. Intelligent Robots and Systems’ 94.’Advanced\nRobotic Systems\
    \ and the Real World’, IROS’94. Proceedings of the IEEE/RSJ/GI\nInternational\
    \ Conference on, 2:776–783.\n180\nParker, L. E. (1999). Cooperative robotics for\
    \ multi-target observation. Intelligent\nAutomation and Soft Computing, 5(1):5–19.\n\
    Penders, J. (1999). The practical art of moving physical objects. Doctoral thesis.\n\
    Penders, J., Alboul, L., Witkowski, U., Naghsh, A., Saez-Pons, J., Herbrechtsmeier,\n\
    S., and El-Habbal, M. (2011).\nA robot swarm assisting a human ﬁre-ﬁghter.\nAdvanced\
    \ Robotics, 25(1-2):93–117.\nPierson, A. and Schwager, M. (2016). Adaptive inter-robot\
    \ trust for robust multi-\nrobot sensor coverage. In Robotics Research: Springer\
    \ International Publishing,\npages 167–183.\nPini, G., Brutschy, A., Frison, M.,\
    \ Roli, A., Dorigo, M., and Birattari, M. (2011).\nTask partitioning in swarms\
    \ of robots: An adaptive method for strategy selection.\nSwarm Intelligence, 3(3-4):283–304.\n\
    Prorok, A., Hsieh, M., and Kumar, V. (2016). Adaptive distribution of a swarm\
    \ of\nheterogeneous robots. Acta Polytechnica, 56(1):67–75.\nPrez, F. J. L. (2016).\
    \ Autonomous Navigation in an Indoor environment.\nQ. Bonnard, S. Lemaignan, G.\
    \ Z. A. M. S. C. N. L. and Dillenbourg, P. (2013).\nChilitags2: Robust ﬁducial\
    \ markers for augmented reality and robotics. CHILI,\nEPFL, Switzerland.\nQuigley,\
    \ M., Conley, K., Gerkey, B., Faust, J., Foote, T., Leibs, J., Wheeler, R., and\n\
    Ng, A. (2009). Ros: an open-source robot operating system. In ICRA workshop\n\
    on open source software, 3(3.2):5.\nRadu,\nM. (2014).\nAutomated carrot harvester\
    \ machines are mesmerizing\nto\nwatch\nin\naction.\nhttps://s1.cdn.autoevolution.com/images/news/\n\
    181\nautomated-carrot-harvester-machines-are-mesmerizing-to-watch-in-action-video\n\
    1.jpg.\nRamaithitima, R., Whitzer, M., Bhattacharya, S., and Kumar, V. (2016).\
    \ Auto-\nmated creation of topological maps in unknown environments using a swarm\
    \ of\nresource-constrained robots. IEEE Robotics and Automation Letters, 1(2):746–\n\
    753.\nRanjbar-Sahraei, B., Weiss, G., and Nakisaee, A. (2012). A multi-robot coverage\n\
    approach based on stigmergic communication. German Conference on Multiagent\n\
    System Technologies, pages 126–138.\nRao, A., F., A. B., Lindgren, A., and Ziviani,\
    \ A. (2016). Team communication\nstrategy for collaborative exploration by autonomous\
    \ vehicles. 2016 IEEE Inter-\nnational Conference on Communications (ICC), pages\
    \ 1–6.\nREINS (2011). Reins project. https://www.shu.ac.uk/research/specialisms/\n\
    materials-and-engineering-research-institute/what-we-do/projects/\nautomation-and-robotics/the-reins-project.\n\
    Reynolds, C. W. (1987). Flocks, herds and schools: A distributed behavioral model.\n\
    ACM SIGGRAPH computer graphics, 21(4):25–34.\nRHEA (2014). Rhea project, robot\
    \ ﬂeets for highly eﬀective agriculture and forestry\nmanagement. http://www.rhea-project.eu/.\n\
    Robin, C. and Lacroix, S. (2016). Multi-robot target detection and tracking: tax-\n\
    onomy and survey. Autonomous Robots, 40(4):729–760.\nRoldan, J. J., Garcia-Aunon,\
    \ P., Garzon, M., de Leon, J., del Cerro, J., and Barri-\n182\nentos, A. (2016).\
    \ Heterogeneous multi-robot system for mapping environmental\nvariables of greenhouses.\
    \ Sensors, 16(7):1018.\nRuiz-Garcia, L. and Lunadei, L. (2011). The role of rﬁd\
    \ in agriculture: Applications,\nlimitations and challenges. Computers and Electronics\
    \ in Agriculture, 79(1):42–\n50.\nRussell, S. J. and Norvig, P. (2003). Artiﬁcial\
    \ Intelligence: a Modern Approach.\nPrentice Hall, 2 edition.\nSabanci, K. and\
    \ Aydin, C. (2017). Smart robotic weed control system for sugar\nbeet. Journal\
    \ of Agricultural Science and Technology, 19(1):73–83.\nSaez-Pons, J., Alboul,\
    \ L., Penders, J., and Nomdedeu, L. (2010). Multi-robot team\nformation control\
    \ in the guardians project. Industrial Robot: An International\nJournal, 37(4):372–383.\n\
    Safadi, H. (2007). Local path planning using virtual potential ﬁeld. http://www.\n\
    cs.mcgill.ca/~hsafad/robotics/.\nSahin, E. (2004). Swarm robotics: From sources\
    \ of inspiration to domains of appli-\ncation. pages 10–20.\nSahin, E., Girgin,\
    \ S., Bayindir, L., and Turgut, A. (2008). Swarm robotics. In\nNatuarl Computing\
    \ Series, chapter Swarm Intelligence, pages 87–100.\nSantana, P., Barata, J.,\
    \ Cruz, H., Mestre, A., Lisboa, J., and Flores, L. (2005). A\nmulti-robot system\
    \ for landmine detection. 1:8–pp.\nSaska, M., Von´asek, V., and Pˇreuˇcil, L.\
    \ (2013). Trajectory planning and control for\nairport snow sweeping by autonomous\
    \ formations of ploughs. Journal of Intelli-\ngent & Robotic Systems, 72(2):239–261.\n\
    183\nSen, A., Sahoo, S., and Kothari, M. (2016). A cooperative target-centric\
    \ formation\nwith bounded acceleration. IFAC-PapersOnLine, 49(1):425–430.\nSenanayake,\
    \ M., Senthooran, I., Barca, J., Chung, H., Kamruzzaman, J., and Mur-\nshed, M.\
    \ (2016). Search and tracking algorithms for swarms of robots: A survey.\nRobotics\
    \ and Autonomous Systems, 75:422–434.\nShalev-Shwartz, S. and Ben-David, S. (2014).\n\
    Understanding machine learning:\nFrom theory to algorithms. Cambridge university\
    \ press.\nShearer, S. A. and Pitla, S. K. (2013). Field crop production automation.\
    \ Agricul-\ntural Automation, pages 99–124.\nShearer, S. A., Pitla, S. K., and\
    \ Luck, J. (2010). Trends in the automation of agri-\ncultural ﬁeld machineries.\
    \ Biosystems and Agricultural Engineering, University\nof Kentucky, Lexington,\
    \ USA, pages 1–21.\nSimmons, R., Apfelbaum, D., Burgard, W., Fox, D., Moors, M.,\
    \ Thrun, S., and\nYounes, H. (2000). Coordination for multi-robot exploration\
    \ and mapping. pages\n852–858.\nSimmons, R., Singh, S., Hershberger, D., Ramos,\
    \ J., and Smith, T. (2001). First\nresults in the coordination of heterogeneous\
    \ robots for large-scale assembly. Ex-\nperimental Robotics VII, pages 323–332.\n\
    Slaughter, D., Chen, P., and Curley, R. (1996). Vision guided precision cultivation.\n\
    Precision Agriculture, 1(2):199–217.\nSmith, R. (1980). The contract net protocol:\
    \ high-level communication and control\nin distributed problem solver. IEEE Trans.\
    \ Computers, C-29(12):1104–1113.\n184\nSojka, R., Bjorneberg, D., and Entry, J.\
    \ (2002). Irrigation: A historical perspective.\nMarcel Dekker, Inc.\nSolovey,\
    \ K., Salzman, O., and Halperin, D. (2015). Finding a needle in an expo-\nnential\
    \ haystack: Discrete rrt for exploration of implicit roadmaps in multi-robot\n\
    motion planning. pages 591–607.\nStoll, A. and Kutzbach, H. D. (2000). Guidance\
    \ of a forage harvester with gps.\nPrecision Agriculture, 2(3):281–291.\nSujaritha,\
    \ M., Lakshminarasimhan, M., Fernandez, C. J., and Chandran, M. (2016).\nGreenbot:\
    \ A solar autonomous robot to uproot weeds in a grape ﬁeld. Interna-\ntional Journal\
    \ of Computer Science and Engineering, 4(2):1351–1358.\nSukkarieh, S. (2012).\
    \ Automated agriculture. http://sydney.edu.au/news/84.\nhtml?newsstoryid=10737.\n\
    Sumocakewalk (2015). Cambodia imports african rats for demining work.\nSungjun,\
    \ A., Youdan, K., and Jaemyung, A. (2015).\nArea allocation algorithm\nfor multiple\
    \ uavs area coverage based on clustering and graph. 1st IFAC Work-\nshop on Advanced\
    \ Control and Navigation for Autonomous Aerospace Vehicles\nACNAAV’15, 45(9):204–209.\n\
    Sgaard, H. and Olsen, H. (2003). Determination of crop rows by image analysis\n\
    without segmentation. Precision Agriculture, 38(2):141–158.\nTang, F. and Parker,\
    \ L. E. (2005). Asymtre: Automated synthesis of multi-robot\ntask solutions through\
    \ software reconﬁguration. Proceedings of the 2005 IEEE\nInternational Conference\
    \ on Robotics and Automation, pages 1501–1508.\n185\nTang, J., Geng, N., Zhang,\
    \ Z., and Zhu, Z. (2013). A vision-based method of wheat\nrow detection for agricultural\
    \ robot.\nInternational Journal of Digital Content\nTechnology and its Applications,\
    \ 7(5):129.\nTarannum, N., Rhaman, K. M., Ahmed Khan, S., and Shakil, R. (2015).\
    \ A brief\noverview and systematic approach for using agricultural robot in developing\
    \ coun-\ntries. Journal of Modern Science and Technology, 3:88–101.\ntarmakbir\
    \ (2017).\nLast day for grant support in irrigation systems 14 feburary\n(sulama\
    \ sistemlerinde hibe destei in son gn 14 ubat). US Patent App. 11/498,392.\nThrun,\
    \ S. and Liu, Y. (2005). Multi-robot slam with sparse extended information\nﬁlers.\
    \ pages 254–266.\nThuilot, B., Cariou, C., Cordesses, L., and Martinet, P. (2001).\
    \ Automatic guidance\nof a farm tractor along curved paths, using a unique cp-dgps.\
    \ 2:674–679.\nTian, Z., Junfang, X., Gang, W., and Jianbo, Z. (2014). Automatic\
    \ navigation path\ndetection method for tillage machines working on high crop\
    \ stubble ﬁelds based on\nmachine vision. International Journal of Agricultural\
    \ and Biological Engineering,\n7(4):29.\nTillett, N., Hague, T., and Miles, S.\
    \ (2002). Inter-row vision guidance for mechanical\nweed control in sugar beet.\
    \ Computers and Electronics in Agriculture, 33(3):163–\n177.\nTodt, E., Rausch,\
    \ G., and Suarez, R. (2000). Analysis and classiﬁcation of multiple\nrobot coordination\
    \ methods. Robotics and Automation, 2000. Proceedings. ICRA\n’00. IEEE International\
    \ Conference on, 4:3158–3163.\n186\nTsai, C., Chan, C., and Tai, F. (2015). Cooperative\
    \ localization using fuzzy de-\ncentralized extended information ﬁltering for\
    \ homogenous omnidirectional mobile\nmulti-robot system. New Trends on System\
    \ Science and Engineering: Proceedings\nof ICSSE 2015, 276:343.\nUny Cao, Y.,\
    \ Fukunaga, A. S., and Kahng, A. B. (1997).\nCooperative mobile\nrobotics: Antecedents\
    \ and directions. Autonomous Robots, 4:1–23.\nVig, L. and Adams, J. A. (2006).\
    \ Multi-robot coalition formation. IEEE transactions\non robotics, 22(4):637–649.\n\
    Vlassis, N. (2003). A Concise Introduction to Multiagent Systems and Distributed\n\
    AI. Universiteit van Amsterdam, 1 edition.\nWalsh, N. E. and Walsh, W. S. (2003).\
    \ Rehabilitation of landmine victims: the\nultimate challenge. Bulletin of the\
    \ World Health Organization, 81(9):665–670.\nWang, J. and Olson, E. (2016). Apriltag\
    \ 2: Eﬃcient and robust ﬁducial detection.\npages 4193–4198.\nWeber, J., Kaufmann,\
    \ C., Hache, C., and Schmidt, M. (2015). Solving the box-\npushing problem using\
    \ a spherical robot. pages 7–11.\nWerger, B. and Mataric, M. J. (2000). Broadcast\
    \ of local eligibility for multi-target\nobservation. pages 347–356.\nWillmann,\
    \ J., Augugliaro, F., Cadalbert, T., D’Andrea, R., Gramazio, F., and\nKohler,\
    \ M. (2012). Aerial robotic construction towards a new ﬁeld of architectural\n\
    research. International journal of architectural computing, 10(3):439–459.\nWolkowski,\
    \ R. and Lowery, B. (2008). Soil compaction: Causes, concerns, and cures.\nUniversity\
    \ of Wisconsin, pages 1–7.\n187\nWooldridge, M. and Jennings, N. (1995). Intelligent\
    \ agents: Theory and practice.\nThe Knowledge Engineering Review, 10(2):115–152.\n\
    Wu, M. H., Ogawa, S., and Konno, A. (2016a). Symmetry position/force hybrid\n\
    control for cooperative object transportation using multiple humanoid robots.\n\
    Advanced Robotics, 30(2):131–149.\nWu, Z., Hu, G., Feng, L., Wu, J., and Liu,\
    \ S. (2016b).\nCollision avoidance for\nmobile robots based on artiﬁcial potential\
    \ ﬁeld and obstacle envelope modelling.\nAssembly Automation, 36(3).\nWurm, K.\
    \ M., Stachniss, C., and Burgard, W. (2008). Coordinated multi-robot ex-\nploration\
    \ using a segmentation of the environment. 2008 IEEE/RSJ International\nConference\
    \ on Intelligent Robots and Systems, pages 1160–1165.\nYamada, S. and Saito, J.\
    \ (1999). Adaptive action selection without explicit commu-\nnication for multi-robot\
    \ box-pushing. 3:1444–1449.\nYan, Z., Jouandeau, N., and Cherif, A. A. (2010).\n\
    Sampling-based multi-robot\nexploration. pages 1–6.\nYan, Z., Jouandeau, N., and\
    \ Cherif, A. A. (2012).\nMulti-robot heuristic goods\ntransportation. pages 409–414.\n\
    Yan, Z., Jouandeau, N., and Cherif, A. A. (2013). A survey and analysis of multi-\n\
    robot coordination. International Journal of Advanced Robotic Systems, 10:1–18.\n\
    Yang, J. and Dong, M. (2012).\nDesign of a time-varying continuous control to\n\
    solve the potential ﬁeld local minima problem. Applied Mechanics and Materials,\n\
    130-134:2465–2469.\n188\nZedadra, O., Seridi, H., Jouandeau, N., and Fortino,\
    \ G. (2016).\nA cooperative\nswitching algorithm for multi-agent foraging. Engineering\
    \ Applications of Artiﬁ-\ncial Intelligence, 50:302–319.\nZhang and F. (2013).\
    \ Detecting crop rows for automated rice transplanters based\non radon transform.\
    \ Sensor Letters, 11(6-7):1100–1105.\nZhang, C. and Noguchi, N. (2016). Cooperation\
    \ of two robot tractors to improve\nwork eﬃciency. Adv Robot Autom, 5(146):2.\n\
    Zhang, N., Wang, M., and Wang, N. (2002).\nPrecision agriculturea worldwide\n\
    overview. Computers and Electronics in Agriculture, 36(2-3):113–132.\nZheng, X.,\
    \ Jain, S., Koenig, S., and Kempe, D. (2005). Multi-robot forest coverage.\npages\
    \ 3852–3857.\nZheng, Z. and Tan, Y. (2015). Mobile target tracking of swarm robotics\
    \ in unknown\nobstructive environment. Handbook of Research on Design, Control,\
    \ and Modeling\nof Swarm Robotics, 26:397.\nZlot, R., Stentz, A., Dias, M. B.,\
    \ and Thayer, S. (2002). Market-driven multi-robot\nexploration.\n189\nAppendix\
    \ A\nSpraying Optimum Team Size\nReferring to the total required time for spraying:\n\
    Given a ﬁeld and the task of spraying, what is the most optimum team size with\n\
    which spraying can be carried out as fast as possible?\nt = max\n1≤i≤n(tsi + ttai\
    \ + tsti)\n(A.1)\nWhere:\nttai is the task allocation time for robot i.\nttai\
    \ =\ndαl1\nv\n+ (2i − 1)τ + (λ+ϵ)(i−1)\nv\n+\niP\nj=2\ndlj−1lj\nv\ntsti is the\
    \ amount of time required for a robot to start its task.\ntsti = ttan − ttai +\
    \ τinit(n − i)\ntsi is the time that takes for robot i to spray the allocated\
    \ region.\ntsi = 1\nv(kilp + (ki − 1)df)\nIn here, ki is the number of tracks\
    \ in a region, df is the distance between two\nconsecutive regions, lp is the\
    \ length of a furrow, and v is the velocity of the robot.\nRe-writing A.12:\n\
    t = max\n1≤i≤n(tsi + ttai + ttan − ttai + τinit(n − i))\n190\nt = max\n1≤i≤n(tsi\
    \ + ttan + τinit(n − i))\nt = max\n1≤i≤n( 1\nv(kilp + (ki − 1)df) +\ndαl1\nv +\
    \ (2n − 1)τ + (λ+ϵ)(i−1)\nv\n+\niP\nj=2\ndlj−1lj\nv\n+ τinit(n − i))\nThe total\
    \ task allocation time for all robots is:\nttatot = dαl1\nv\n+ (2n − 1)τ + (λ\
    \ + ϵ)(n − 1)\nv\n+\nn\nX\ni=2\ndlj−1lj\nv\n(A.2)\nIn here,\nnP\ni=2\ndlj−1lj\n\
    v\nrefers to the width of the ﬁeld W. Hence, A.2 can be re-written\nas:\nttatot\
    \ = dαl1\nv\n+ (2n − 1)τ + (λ + ϵ)(n − 1)\nv\n+ W\nv\n(A.3)\nAlso, W = K.df, therefore:\n\
    ttatot = dαl1\nv\n+ (2n − 1)τ + (λ + ϵ)(n − 1)\nv\n+ K.df\nv\n(A.4)\nRe-arranging\
    \ A.4:\nttatot = dαl1\nv\n+ K.df\nv\n− ((λ + ϵ)\nv\n+ τ) + (2τ + (λ + ϵ)\nv\n\
    )n\n(A.5)\nWe denote the constant\ndαl1\nv + K.df\nv\n− ( (λ+ϵ)\nv\n+ τ) as C,\
    \ and the coeﬃcient by n as A,\nthen Equation A.5 will be represented as:\nttatot\
    \ = C + An\n(A.6)\nEquation A.6 is a linear equation, and it is clear that with\
    \ the number of robots the\ntotal allocation time with be increasing.\nThe total\
    \ initiation time (until the moment the last robot start spraying) is ttitot =\n\
    191\nτinit(n − 1) or:\nttitot = −τinit + τinitn\n(A.7)\nEquation A.7 also shows\
    \ a simple linear relationship between the number of robots\nand total time for\
    \ task initiation.\nIf we consider now the total spraying time, we can notice\
    \ that part of this time\ncomprises the total allocation time + time needed for\
    \ spraying by the last robot.\nThis time (spraying time for the last robot) is:\n\
    tsn = 1\nv(knlp + (kn − 1)df)\n(A.8)\nBearing in mind that kn = ⌈ K\nn ⌉, we can\
    \ rewrite A.8 as follows:\ntsn = 1\nv(⌈K\nn ⌉lp + (⌈K\nn ⌉ − 1)df)\n(A.9)\nOr\n\
    tsn = 1\nv(⌈K\nn ⌉(lp + df)) − df\nv\n(A.10)\nNote. We use ⌈ K\nn ⌉ (which is\
    \ the smallest integer greater or equal to K\nn ), as this is\nthe number of tracks\
    \ assigned to the last robot, according to our construction.\nThe relation A.10\
    \ between time and the number of the robots is hyperbolic, and\ntime decreases\
    \ with the number of robots.\nThe total spraying time is, therefore,\nttstot =\
    \ ttitot + tsn\n(A.11)\n192\nAnd the total time for robots from the task allocation\
    \ to completing spraying is:\nttot = ttatot + ttitot + tsn\n(A.12)\nThis equation\
    \ consists of two increasing linear functions (which can be presented as\none\
    \ linear increasing function) and one decreasing hyperbolic function. Therefore\
    \ the\nresulting function will have a global minimum. In order to determine this\
    \ minimum,\nwithout the loss of generality, instead of integer n, we use real\
    \ number x, x > 0.\nThen we rewrite A.10 as tsn = 1\nv(⌈ K\nn ⌉(lp + df)) − df\n\
    v and re-arrange as:\ntsn = K\nn (lp + df)1\nx − df\nv\n(A.13)\nDenoting K\nv\
    \ (lp + df) as B, and df\nv as D, we get\ntsn = B 1\nx − D\nThen, Equation A.12\
    \ takes the form of:\nttot = C + Ax + τinitx − τinit + B 1\nx − D\n(A.14)\nOr\n\
    ttot = (A + τinit)x + B 1\nx + C − D − τinit\n(A.15)\nDiﬀerentiating A.15 with\
    \ respect to x, and we get\nt′\ntot = (A + τinit) − B 1\nx2\n(A.16)\nTo ﬁnd the\
    \ extrema, we equate the right-hand side to zero, we get\n(A + τinit) − B 1\n\
    x2 = 0\nAs we interested only in positive x, we get the following value for x\
    \ at the minimum:\n193\nx =\nr\nB\nA + τinit\n(A.17)\nSubstituting corresponding\
    \ expressions for B and A into A.17:\nx =\ns\nK\nv (lp + df)\n2τ + λ+ϵ\nv + τinit\n\
    (A.18)\nand re-arranging it we have:\nx =\ns\nK(lp + df)\n(2τ + τinit)v + λ +\
    \ ϵ\n(A.19)\n194\nAppendix B\nC++ Code for Artiﬁcial Potential Field Using ROS\n\
    1\n#include <ros / ros . h>\n2\n#include <sensor msgs /LaserScan . h>\n3\n#include\
    \ <nav msgs/Odometry . h>\n4\n#include <geometry msgs/Twist . h>\n5\n#include\
    \ <t f / t f . h>\n6\n#include <geometry msgs/Quaternion . h>\n7\n#include <stdio\
    \ . h>\n/* printf, scanf, puts, NULL */\n8\n#include <s t d l i b . h>\n/* srand,\
    \ rand */\n9\n#include <time . h>\n/* time */\n10\n#include <string >\n11\n#include\
    \ <sstream>\n12\n13\nusing namespace std ;\n14\n15\n#define PI 3.14159265359\n\
    16\n#define Rad2Deg 57.2957795\n17\n#define Deg2Rad 0.0174532925\n18\n#define\
    \ PITCH 0.3522504892367\n19\n#define DistanceTh\n0.2\n20\n#define DistanceCrt\n\
    1.5\n21\n#define DistanceCrtTwo\n0.5\n22\n#define MaxVel 0.5\n23\n24\nvoid stop\
    \ ( void ) ;\n25\nstruct point\n26\n{\n27\nfloat x ;\n28\nfloat y ;\n29\nfloat\
    \ theta ;\n30\n};\n31\nstruct\nf o r c e\n32\n{\n33\nfloat mag ;\n34\nfloat theta\
    \ ;\n35\nfloat x ;\n36\nfloat y ;\n37\n};\n38\npoint\ntarget ,\ncurrent ;\n39\n\
    40\nbool targetIsReached = false ;\n41\n42\nros : : Publisher\nvel pub ;\n43\n\
    geometry msgs : : Twist\nvel ;\n44\nint robot id = 0;\n45\nclass APFClass\n46\n\
    {\n195\n47\npublic :\n48\nAPFClass ( ) ;\n49\nprivate :\n50\nros : : NodeHandle\
    \ nh ;\n51\n52\nros : : Subscriber\nl a s e r s u b ;\n53\nros : : Subscriber\n\
    pose sub ;\n54\n55\nvoid laserCB ( const sensor msgs : : LaserScan : : ConstPtr\
    \ &scan ) ;\n56\nvoid poseCB( const nav msgs : : Odometry : : ConstPtr &pose )\
    \ ;\n57\n};\n58\n59\nAPFClass : : APFClass ()\n60\n{\n61\nros : : NodeHandle n(\"\
    ~\" ) ;\n62\nn . getParam (\"robot_id\" , robot id ) ;\n63\nostringstream\nss\
    \ ;\n64\nss << \"robot_\" ;\n65\nss << robot id ;\n66\ns t r i n g\nlaser pipename\
    \ = ss . s t r () + \"/base_scan\" ;\n67\ns t r i n g\npose pipename = ss . s\
    \ t r () + \"/base_pose_ground_truth\" ;\n68\ns t r i n g\nvelcmd pipename = ss\
    \ . s t r () + \"/cmd_vel\" ;\n69\n70\nl a s e r s u b = nh . subscribe <sensor\
    \ msgs : : LaserScan>\n71\n( laser pipename ,10 ,&APFClass : : laserCB , this\
    \ ) ;\n72\npose sub = nh . subscribe <nav msgs : : Odometry>\n73\n( pose pipename\
    \ ,10 ,&APFClass : : poseCB , this ) ;\n74\nvel pub = nh . advertise <geometry\
    \ msgs : : Twist>\n75\n( velcmd pipename , 1 0 ) ;\n76\ntarget . x = 0 . 0 ;\n\
    77\ntarget . y = 0 . 0 ;\n78\n}\n79\n80\nvoid APFClass : : laserCB\n81\n( const\
    \ sensor msgs : : LaserScan : : ConstPtr &scan )\n82\n{\n83\nfloat beams [ 5 1\
    \ 2 ] ;\n84\npoint\ndir ,\nobj new [ 5 1 2 ] ,\nobj [ 5 1 2 ] ;\n85\nf o r c e\n\
    attraction ,\nrepulsion [ 5 1 2 ] , sum ;\n86\nint RotCoef = 1;\n87\nsum . x =\
    \ 0 . 0 ;\n88\nsum . y = 0 . 0 ;\n89\nint beamCounter = 1;\n90\ndir . x = target\
    \ . x − current . x ;\n91\ndir . y = target . y − current . y ;\n92\ndir . theta\
    \ = atan2 ( dir . y , dir . x)∗Rad2Deg ;\n93\nfloat distanceToTarget = sqrt (\
    \ dir . x∗ dir . x + dir . y∗ dir . y ) ;\n94\nfloat R[ 2 ] [ 2 ] = {{ cos ((90−\
    \ current . theta )∗Deg2Rad ) ,\n95\n−1∗sin ((90− current . theta )∗Deg2Rad )}\
    \ ,\n96\n{ sin ((90− current . theta )∗Deg2Rad ) ,\n97\ncos ((90− current . theta\
    \ )∗Deg2Rad )}};\n98\nif ( distanceToTarget >= DistanceTh )\n99\n{\n100\nfor (\
    \ int\ni =0; i <=511;\ni++)\n101\n{\n102\nif ( scan−>ranges [ i ] < 4.5\n)\n103\n\
    {\n104\nbeams [ i ] = scan−>ranges [ i ] ;\n105\n106\nobj [ i ] . x = beams [\
    \ i ]∗ cos (( i ∗PITCH)∗Deg2Rad ) ;\n196\n107\nobj [ i ] . y = beams [ i ]∗ sin\
    \ (( i ∗PITCH)∗Deg2Rad ) ;\n108\nbeamCounter++;\n109\n}\n110\nelse if ( scan−>ranges\
    \ [ i ] == 4.5)\n111\n{\n112\nbeams [ i ] = 0 . 0 ;\n113\nobj [ i ] . x = 0 .\
    \ 0 ;\n114\nobj [ i ] . y = 0 . 0 ;\n115\n}\n116\n}\n117\n118\n//form the orientation\
    \ matrix\n119\nfor ( int\ni =0; i<= 511;\ni++)\n120\n{\n121\nif ( beams [ i ]\
    \ > 0.0 && beams [ i ] < 4.5)\n122\n{\n123\n124\nrepulsion [ i ] . x = obj [ i\
    \ ] . x ;\n125\nrepulsion [ i ] . y = obj [ i ] . y ;\n126\n127\n//remember: repulsion\
    \ force is 180 degrees mirrored of the\n128\n//vector describing the object and\
    \ the robot\n129\nif ( beams [ i ] <= DistanceCrt && beams [ i ] > DistanceCrtTwo\
    \ )\n130\n{\n131\nrepulsion [ i ] . x = 20∗ obj [ i ] . x ;\n132\nrepulsion [\
    \ i ] . y = 20∗ obj [ i ] . y ;\n133\nRotCoef = 10;\n134\n}\n135\nif ( beams [\
    \ i ] <= DistanceCrtTwo )\n136\n{\n137\nrepulsion [ i ] . x = 100∗ obj [ i ] .\
    \ x ;\n138\nrepulsion [ i ] . y = 100∗ obj [ i ] . y ;\n139\nRotCoef = 100;\n\
    140\n}\n141\nif ( beams [ i ] > DistanceCrt )\n142\n{\n143\nrepulsion [ i ] .\
    \ x = obj [ i ] . x ;\n144\nrepulsion [ i ] . y = obj [ i ] . y ;\n145\nRotCoef\
    \ = 1;\n146\n}\n147\nrepulsion [ i ] . mag = 1/ sqrt ( repulsion [ i ] . x∗ repulsion\
    \ [ i ] . x\n148\n+repulsion [ i ] . y∗ repulsion [ i ] . y ) ;\n149\nrepulsion\
    \ [ i ] . theta = atan2 ( repulsion [ i ] . y , repulsion [ i ] . x ) ;\n150\n\
    }\n151\nelse if ( beams [ i ] == 0.0)\n152\n{\n153\nrepulsion [ i ] . x = 0 .\
    \ 0 ;\n154\nrepulsion [ i ] . y = 0 . 0 ;\n155\nrepulsion [ i ] . mag = 0 . 0\
    \ ;\n156\nrepulsion [ i ] . theta = 0 . 0 ;\n157\n}\n158\n159\nsum . x = sum .\
    \ x + repulsion [ i ] . x ;\n160\nsum . y = sum . y + repulsion [ i ] . y ;\n\
    161\n}\n162\n163\nfloat rx = sum . x∗ cos (180∗Deg2Rad) − sum . y∗ sin (180∗Deg2Rad\
    \ ) ;\n164\nfloat ry = sum . x∗ sin (180∗Deg2Rad) + sum . y∗ cos (180∗Deg2Rad\
    \ ) ;\n165\nsum . x = rx∗R[ 0 ] [ 0 ] − ry∗R [ 0 ] [ 1 ] ;\n166\nsum . y = −rx∗R[\
    \ 1 ] [ 0 ] + ry∗R [ 1 ] [ 1 ] ;\n197\n167\nsum . mag = sqrt (sum . x∗sum . x+sum\
    \ . y∗sum . y ) ;\n168\nsum . theta = Rad2Deg∗atan2 (sum . y , sum . x ) ;\n169\n\
    170\n//applying robot’s orientation\n171\n172\n173\n//attraction force\n174\n\
    a t t r a c t i o n . mag = sqrt ( dir . x∗ dir . x+dir . y∗ dir . y ) ;\n175\n\
    a t t r a c t i o n . theta = Rad2Deg∗atan2 ( dir . y , dir . x ) ;\n176\na t\
    \ t r a c t i o n . x = dir . x ;\n177\na t t r a c t i o n . y = dir . y ;\n\
    178\n179\n//sum force\n180\nint Krep = 7;\n181\nint Katt = 20;\n182\nsum . x =\
    \ sum . x + Katt∗ a t t r a c t i o n . x ;\n183\nsum . y = sum . y + Katt∗ a\
    \ t t r a c t i o n . y ;\n184\nsum . theta = Rad2Deg∗atan2 (sum . y , sum . x\
    \ ) ;\n185\nsum . mag = sqrt (sum . x∗sum . x+sum . y∗sum . y ) ;\n186\n187\n\
    /*Here is where you assign speed to the motors*/\n188\nif ( abs (sum . theta−current\
    \ . theta ) < 180)\n189\n{\n190\nvel . angular . z = RotCoef ∗0.02∗(sum . theta−current\
    \ . theta ) ;\n191\n}\n192\nelse if ((sum . theta−current . theta > 180)\n193\n\
    | |\n(sum . theta−current . theta < −180))\n194\n{\n195\nvel . angular . z = RotCoef\
    \ ∗ −0.02∗(sum . theta−current . theta ) ;\n196\n}\n197\nvel . l i n e a r . x\
    \ = sum . mag ;\n198\n//limiting the linear speed to 0.75 m/s\n199\nif ( vel .\
    \ l i n e a r . x >= MaxVel)\n200\n{\n201\nvel . l i n e a r . x = MaxVel ;\n\
    202\n}\n203\nif ( vel . l i n e a r . x <= −1∗MaxVel)\n204\n{\n205\nvel . l i\
    \ n e a r . x = −1∗MaxVel ;\n206\n}\n207\nvel pub . publish ( vel ) ;\n208\n209\n\
    }\n210\nelse if ( distanceToTarget < DistanceTh )\n211\n{\n212\nstop ( ) ;\n213\n\
    }\n214\n}\n215\nvoid APFClass : : poseCB\n216\n( const nav msgs : : Odometry :\
    \ : ConstPtr &pose )\n217\n{\n218\ncurrent . x = pose−>pose . pose . p osi t i\
    \ on . x ;\n219\ncurrent . y = pose−>pose . pose . p osi t i on . y ;\n220\ncurrent\
    \ . theta = Rad2Deg ∗\n221\nt f : : getYaw( pose−>pose . pose . o r i e n t a\
    \ t i o n ) ;\n222\n}\n223\nvoid stop ( void )\n224\n{\n225\nvel . l i n e a r\
    \ . x = 0 . 0 ;\n226\nvel . l i n e a r . y = 0 . 0 ;\n198\n227\nvel . l i n e\
    \ a r . z = 0 . 0 ;\n228\nvel . angular . x = 0 . 0 ;\n229\nvel . angular . y\
    \ = 0 . 0 ;\n230\nvel . angular . z = 0 . 0 ;\n231\nvel pub . publish ( vel )\
    \ ;\n232\n}\n233\nint main ( int argc ,\nchar∗∗ argv )\n234\n{\n235\nros : : i\
    \ n i t ( argc , argv , \"mrs_apf\" ) ;\n236\nAPFClass apfc ;\n237\nros : : spin\
    \ ( ) ;\n238\nreturn\n0;\n239\n}\n199\nAppendix C\nC++ Code for Cluster Class\n\
    1\n#include<ros / ros . h>\n2\n#include<c l u s t e r e x t r a c t o r / c l\
    \ u s t e r . h>\n3\n#include<sensor msgs /PointCloud . h>\n4\n#include<u t i\
    \ l i t y >\n5\n#include<math . h>\n6\n#include<vector>\n7\n8\nusing namespace\
    \ std ;\n9\n10\n11\nCluster : : Cluster ()\n12\n{\n13\n14\n}\n15\nCluster : :\
    \ ˜ Cluster ()\n16\n{\n17\n18\n}\n19\nvoid Cluster : : addMember( geometry msgs\
    \ : : Point32 p)\n20\n{\n21\nmembers . points . push back (p ) ;\n22\nsum x +=\
    \ p . x ;\n23\nsum y += p . y ;\n24\nsum x2 += p . x ∗ p . x ;\n25\nsum y2 +=\
    \ p . y ∗ p . y ;\n26\nsum xy += p . x ∗ p . y ;\n27\n}\n28\nvoid Cluster : :\
    \ getMembers ( sensor msgs : : PointCloud &p)\n29\n{\n30\np = members ;\n31\n\
    }\n32\ns i z e t\nCluster : : s i z e ()\n33\n{\n34\nreturn members . points .\
    \ s i z e ( ) ;\n35\n}\n36\npair<double ,\ndouble> Cluster : : getTrend ()\n37\n\
    {\n38\nx bar = sum x / members . points . s i z e ( ) ;\n39\ny bar = sum y / members\
    \ . points . s i z e ( ) ;\n40\n41\nslope = ( sum xy − y bar ∗ sum x − x bar ∗\
    \ sum y +\n42\nmembers . points . s i z e () ∗ x bar ∗ y bar )\n43\n/ ( sum x2\
    \ − 2 ∗ x bar ∗ sum x + members . points . s i z e ()\n44\n∗ x bar ∗ x bar ) ;\n\
    45\ny i n t e r c e p t = y bar − slope ∗ x bar ;\n46\n200\n47\nangle with x axis\
    \ = ( atan ( slope ) ∗ 180.0 / M PI) + 9 0 . 0 ;\n48\nreturn std : : make pair\
    \ ( slope ,\ny i n t e r c e p t ) ;\n49\n}\n50\nvoid Cluster : : c l e a r ()\n\
    51\n{\n52\nmembers . points . c l e a r ( ) ;\n53\nslope = 0 . 0 ;\n54\ny i n\
    \ t e r c e p t = 0 . 0 ;\n55\nx bar = 0 . 0 ;\n56\ny bar = 0 . 0 ;\n57\nsum x\
    \ = 0 . 0 ;\n58\nsum y = 0 . 0 ;\n59\nsum x2 = 0 . 0 ;\n60\nsum xy = 0 . 0 ;\n\
    61\nleftBound = 0;\n62\nrightBound = 0;\n63\ndistanceToLeftCluster = 0 . 0 ;\n\
    64\ndistanceToRightCluster = 0 . 0 ;\n65\n}\n66\ndouble Cluster : : getSlope ()\n\
    67\n{\n68\nreturn\nslope ;\n69\n}\n70\ndouble Cluster : : getYIntercept ()\n71\n\
    {\n72\nreturn\ny i n t e r c e p t ;\n73\n}\n74\ndouble Cluster : : getAngleWithXAxis\
    \ ()\n75\n{\n76\nreturn\nangle with x axis ;\n77\n}\n201\nAppendix D\nC++ Code\
    \ for Cluster Finding\n1\n#include<ros / ros . h>\n2\n#include<sensor msgs /LaserScan\
    \ . h>\n3\n#include<sensor msgs /PointCloud . h>\n4\n#include<geometry msgs/Point32\
    \ . h>\n5\n#include<c l u s t e r e x t r a c t o r / LaserClusters . h>\n6\n\
    7\n#include<math . h>\n8\n#include<u t i l i t y >\n9\n10\n#include<c l u s t\
    \ e r e x t r a c t o r / c l u s t e r . h>\n11\n#include<c l u s t e r e x t\
    \ r a c t o r / l o c a l . h>\n12\n#include<c l u s t e r e x t r a c t o r /\
    \ l a s e r a n a l y s i s . h>\n13\nusing namespace std ;\n14\n15\n16\nvoid\n\
    l a s e r a n a l y s i s : : r e c t i f y ( const sensor msgs : : LaserScan\n\
    17\n&src ,\nsensor msgs : : LaserScan &des )\n18\n{\n19\ndes = src ;\n20\nfor\
    \ ( int\ni = 0;\ni < des . ranges . s i z e ( ) ;\ni++)\n21\n{\n22\nif ( des .\
    \ ranges [ i ] < des . range min )\n23\n{\n24\ndes . ranges [ i ] = des . range\
    \ min ;\n25\n}\n26\nelse if ( des . ranges [ i ] > des . range max )\n27\n{\n\
    28\ndes . ranges [ i ] = des . range max ;\n29\n}\n30\n}\n31\n}\n32\n33\nint\n\
    l a s e r a n a l y s i s : : getIndex ( double angular res ,\ndouble beam angle\
    \ )\n34\n{\n35\nreturn\n(( beam angle\n+\n45.0) / angular res ) ;\n36\n}\n37\n\
    double\nl a s e r a n a l y s i s : : getAngle ( double angular res ,\nint beam\
    \ index )\n38\n{\n39\nreturn\n(( beam index ∗ angular res )− 4 5 . 0 ) ;\n40\n\
    }\n41\npair<int ,\nint> l a s e r a n a l y s i s : : getBoundaries\n42\n( const\
    \ sensor msgs : : LaserScan &src ,\ndouble frontFieldOfViewAngle )\n43\n{\n44\n\
    double min angle = ( src . angle min ∗ 180.0 / M PI ) ;\n45\ndouble max angle\
    \ = ( src . angle max ∗ 180.0 / M PI ) ;\n46\ndouble angle increment = src . angle\
    \ increment ∗ 180.0 / M PI ;\n202\n47\ndouble correctAng = ( max angle − min angle\
    \ ) − 180.0;\n48\n49\nreturn make pair ( getIndex ( angle increment ,\n50\n( correctAng\
    \ + ( frontFieldOfViewAngle / 2\n) ) ) ,\n51\ngetIndex ( angle increment ,\n52\n\
    ( correctAng − ( frontFieldOfViewAngle /\n2 ) ) ) ) ;\n53\n}\n54\nvoid\nl a s\
    \ e r a n a l y s i s : : convertLaserScanToPointCloud\n55\n( const sensor msgs\
    \ : : LaserScan &l ,\nsensor msgs : : PointCloud &pc )\n56\n{\n57\npc . header\
    \ = l . header ;\n58\n59\nint\nr a n g e s i z e = ( int ) l . ranges . s i z\
    \ e ( ) ;\n60\ndouble angle increment = l . angle increment ;\n61\ndouble angle\
    \ min = l . angle min ;\n62\ndouble max range =l . range max ;\n63\ndouble min\
    \ range = l . range min ;\n64\n65\nfor ( int\ni = 0;\ni < l . ranges . s i z e\
    \ ( ) ;\ni++)\n66\n{\n67\nif ( l . ranges [ i ] >= min range && l . ranges [ i\
    \ ] <= max range )\n68\n{\n69\ngeometry msgs : : Point32 p ;\n70\np . x = l .\
    \ ranges [ i ]\n∗ cos (( i\n∗ angle increment ) + angle min ) ;\n71\np . y = l\
    \ . ranges [ i ]\n∗ sin (( i\n∗ angle increment ) + angle min ) ;\n72\np . z =\
    \ 0 . 0 ;\n73\n74\npc . points . push back (p ) ;\n75\n}\n76\n}\n77\n}\n78\nvoid\n\
    l a s e r a n a l y s i s : : convertLaserScanToPointCloud\n79\n( const sensor\
    \ msgs : : LaserScan &l ,\nsensor msgs : : PointCloud &pc ,\n80\nbool rangeFilterIsOn\
    \ ,\ndouble maxRange ,\ndouble\nf r o n t f i e l d o f v i e w )\n81\n{\n82\n\
    pc . header = l . header ;\n83\n84\npair<int ,\nint> boundaries = getBoundaries\
    \ ( l ,\nf r o n t f i e l d o f v i e w ) ;\n85\n86\nint\nr a n g e s i z e =\
    \ ( int ) l . ranges . s i z e ( ) ;\n87\ndouble angle increment = l . angle increment\
    \ ;\n88\ndouble angle min = l . angle min ;\n89\n90\ndouble max range = 0 . 0\
    \ ;\n91\ndouble min range = l . range min ;\n92\nif ( rangeFilterIsOn )\n93\n\
    {\n94\nmax range = maxRange ;\n95\n}\n96\nelse\n97\n{\n98\nmax range =\nl . range\
    \ max ;\n99\n}\n100\n101\nfor ( int\ni = boundaries . second ;\ni <= boundaries\
    \ . f i r s t ;\ni++)\n102\n{\n103\nif ( l . ranges [ i ] >= min range && l .\
    \ ranges [ i ] <= max range )\n104\n{\n105\ngeometry msgs : : Point32 p ;\n106\n\
    p . x = l . ranges [ i ]\n∗ cos (( i\n∗ angle increment ) + angle min ) ;\n203\n\
    107\np . y = l . ranges [ i ]\n∗ sin (( i\n∗ angle increment ) + angle min ) ;\n\
    108\np . z = 0 . 0 ;\n109\n110\npc . points . push back (p ) ;\n111\n}\n112\n\
    }\n113\n}\n114\n115\nvoid\nl a s e r a n a l y s i s : : getClusters\n116\n( const\
    \ sensor msgs : : PointCloud &src ,\nvector<Cluster> &res ,\n117\ndouble max cluster\
    \ distance ,\nint\nm i n c l u s t e r s i z e )\n118\n{\n119\nCluster\nl c l\
    \ u s t e r ;\n120\nl c l u s t e r . distanceToRightCluster = 0 . 0 ;\n121\n\
    for ( int\ni = 0;\ni < src . points . s i z e () − 1;\ni++)\n122\n{\n123\ngeometry\
    \ msgs : : Point32 p = src . points [ i ] ;\n124\ngeometry msgs : : Point32 pn\
    \ = src . points [ i +1];\n125\ndouble dx = p . x − pn . x ;\n126\ndouble dy =\
    \ p . y − pn . y ;\n127\ndouble distanceToNeighbour = sqrt (dx∗dx + dy∗dy ) ;\n\
    128\nif ( distanceToNeighbour < max cluster distance )\n129\n{\n130\n//This is\
    \ the right index\n131\nif ( l c l u s t e r . s i z e () == 0)\n132\n{\n133\n\
    l c l u s t e r . rightBound = i ;\n134\nl c l u s t e r . addMember(p ) ;\n135\n\
    }\n136\nif ( i == src . points . s i z e () − 2 )\n137\n{\n138\nl c l u s t e\
    \ r . leftBound = i ;\n139\nl c l u s t e r . distanceToLeftCluster = 0 . 0 ;\n\
    140\nl c l u s t e r . getTrend ( ) ;\n141\nl c l u s t e r . addMember(p ) ;\n\
    142\nif ( l c l u s t e r . s i z e () >= m i n c l u s t e r s i z e )\n143\n\
    {\n144\nres . push back ( l c l u s t e r ) ;\n145\n}\n146\n147\n}\n148\nelse\n\
    149\n{\n150\nl c l u s t e r . addMember(p ) ;\n151\n}\n152\n}\n153\nelse\n154\n\
    {\n155\nl c l u s t e r . leftBound = i ;\n156\nl c l u s t e r . addMember(p\
    \ ) ;\n157\nl c l u s t e r . distanceToLeftCluster = distanceToNeighbour ;\n\
    158\nl c l u s t e r . getTrend ( ) ;\n159\n160\nif ( l c l u s t e r . s i z\
    \ e () >= m i n c l u s t e r s i z e )\n161\n{\n162\nres . push back ( l c l\
    \ u s t e r ) ;\n163\n}\n164\n//reseting the local cluster\n165\nl c l u s t e\
    \ r . c l e a r ( ) ;\n166\nl c l u s t e r . rightBound = i +1;\n204\n167\nl\
    \ c l u s t e r . distanceToRightCluster = distanceToNeighbour ;\n168\n}\n169\n\
    }\n170\n}\n171\nvoid\nl a s e r a n a l y s i s : : c l u s t e r s S i z e F\
    \ i l t e r\n172\n( vector<Cluster> &src ,\nvector<Cluster> &des ,\nint\ns i z\
    \ e t h )\n173\n{\n174\nfor ( int\ni = 0;\ni < src . s i z e ( ) ;\ni++)\n175\n\
    {\n176\nif (( int ) src [ i ] . s i z e () >= s i z e t h )\n177\n{\n178\ndes\
    \ . push back ( src [ i ] ) ;\n179\n}\n180\n}\n181\n}\n182\nvoid\nl a s e r a\
    \ n a l y s i s : : getLargestCluster\n183\n( vector<Cluster> &src ,\nCluster\
    \ &des )\n184\n{\n185\nint\ns i z e = 0;\n186\nint index = 0;\n187\nfor ( int\n\
    i = 0;\ni < src . s i z e ( ) ;\ni++)\n188\n{\n189\nif (( int ) src [ i ] . s\
    \ i z e () > s i z e )\n190\n{\n191\nindex = i ;\n192\n}\n193\n}\n194\ndes = src\
    \ [ index ] ;\n195\n}\n196\nvoid\nl a s e r a n a l y s i s : : publishClusters\n\
    197\n( vector<Cluster> &src ,\nros : : Publisher &pub ,\n198\nconst\ns t r i n\
    \ g &frame id ,\nint seq ,\n199\ndouble max cluster distance ,\nint\nm i n c l\
    \ u s t e r s i z e )\n200\n{\n201\nc l u s t e r e x t r a c t o r : : LaserClusters\n\
    l c s ;\n202\nl c s . header . frame id =frame id ;\n203\nl c s . header . seq\
    \ = seq ;\n204\nl c s . header . stamp = ros : : Time : : now ( ) ;\n205\nl c\
    \ s . max cluster distance = max cluster distance ;\n206\nl c s . m i n c l u\
    \ s t e r s i z e = m i n c l u s t e r s i z e ;\n207\n208\nfor ( int\ni = 0;\n\
    i < src . s i z e ( ) ;\ni++)\n209\n{\n210\nc l u s t e r e x t r a c t o r :\
    \ : LaserCluster\nl c ;\n211\nsensor msgs : : PointCloud p ;\n212\nsrc [ i ] .\
    \ getMembers (p ) ;\n213\nl c . points = p . points ;\n214\nl c . rightBound =\
    \ src [ i ] . rightBound ;\n215\nl c . leftBound = src [ i ] . leftBound ;\n216\n\
    l c . distanceToLeftCluster = src [ i ] . distanceToLeftCluster ;\n217\nl c .\
    \ distanceToRightCluster = src [ i ] . distanceToRightCluster ;\n218\nl c . slope\
    \ = src [ i ] . getSlope ( ) ;\n219\nl c . y i n t e r c e p t = src [ i ] . getYIntercept\
    \ ( ) ;\n220\nl c . clusterIndex = i ;\n221\nl c . angle with x axis = src [ i\
    \ ] . getAngleWithXAxis ( ) ;\n222\n223\nl c s . c l u s t e r s . push back (\
    \ l c ) ;\n224\n}\n225\npub . publish ( l c s ) ;\n226\n}\n205\n227\nvoid\nl a\
    \ s e r a n a l y s i s : : searchForLocals ( const sensor msgs : : PointCloud\
    \ &src ,\n228\nvector<Local> &des ,\nint n search ,\nbool searchForMinima )\n\
    229\n{\n230\nfor ( int cnt = n search + 1;\ncnt < src . points . s i z e () −\
    \ n search ;\ncnt++)\n231\n{\n232\nvector<geometry msgs : : Point32> temp ;\n\
    233\nbool\ni s I t L o c a l = true ;\n234\ngeometry msgs : : Point32 p = src\
    \ . points [ cnt ] ;\n235\ndouble mag = sqrt (( p . x )∗( p . x)\n+\n(p . y )∗(\
    \ p . y ) ) ;\n236\n237\nint lowBound = cnt − ( n search /\n2 ) ;\n238\nint highBound\
    \ = cnt + ( n search /\n2 ) ;\n239\n240\nfor ( int\ni = lowBound ;\ni <= highBound\
    \ ;\ni++)\n241\n{\n242\nif ( i == cnt ) continue ;\n243\n244\ngeometry msgs :\
    \ : Point32\np i = src . points [ i ] ;\n245\ntemp . push back ( p i ) ;\n246\n\
    double nmag = sqrt (( p i . x )∗( p i . x)\n+\n( p i . y )∗( p i . y ) ) ;\n247\n\
    if ( searchForMinima && mag > nmag)\n248\n{\n249\ni s I t L o c a l = false ;\n\
    250\nbreak ;\n251\n}\n252\nif ( ! searchForMinima && mag < nmag)\n253\n{\n254\n\
    i s I t L o c a l = false ;\n255\nbreak ;\n256\n}\n257\n}\n258\nif ( i s I t L\
    \ o c a l\n)\n259\n{\n260\nLocal lm ;\n261\nlm . setLocal (temp ,\nsearchForMinima\
    \ ) ;\n262\ndes . push back (lm ) ;\n263\n}\n264\n}\n265\n}\n266\nvoid\nl a s\
    \ e r a n a l y s i s : : searchForLocals ( Cluster &src ,\n267\nvector<Local>\
    \ &des ,\nint n search ,\nbool searchForMinima )\n268\n{\n269\nsensor msgs : :\
    \ PointCloud members ;\n270\nsrc . getMembers (members ) ;\n271\nfor ( int cnt\
    \ = n search + 1;\ncnt < ( int )\nsrc . s i z e () − n search ;\ncnt++)\n272\n\
    {\n273\nvector<geometry msgs : : Point32> temp ;\n274\nbool\ni s I t L o c a l\
    \ = true ;\n275\ngeometry msgs : : Point32 p = members . points [ cnt ] ;\n276\n\
    double mag = sqrt (( p . x )∗( p . x)\n+\n(p . y )∗( p . y ) ) ;\n277\n278\n279\n\
    int lowBound = cnt − ( n search /\n2 ) ;\n280\nint highBound = cnt + ( n search\
    \ /\n2 ) ;\n281\nfor ( int\ni = lowBound ;\ni <= highBound ;\ni++)\n282\n{\n283\n\
    if ( i == cnt ) continue ;\n284\ngeometry msgs : : Point32\np i = members . points\
    \ [ i ] ;\n285\ntemp . push back ( p i ) ;\n286\ndouble nmag = sqrt (( p i . x\
    \ )∗( p i . x)\n+\n( p i . y )∗( p i . y ) ) ;\n206\n287\nif ( searchForMinima\
    \ && mag > nmag)\n288\n{\n289\ni s I t L o c a l = false ;\n290\nbreak ;\n291\n\
    }\n292\nif ( ! searchForMinima && mag < nmag)\n293\n{\n294\ni s I t L o c a l\
    \ = false ;\n295\nbreak ;\n296\n}\n297\n}\n298\nif ( i s I t L o c a l\n)\n299\n\
    {\n300\nLocal lm ;\n301\nlm . setLocal (temp ,\nsearchForMinima ) ;\n302\ndes\
    \ . push back (lm ) ;\n303\n}\n304\n}\n305\n}\n306\nvoid\nl a s e r a n a l y\
    \ s i s : : AverageMagnitudeFilter\n307\n( vector<Local> &src ,\nvector<Local>\
    \ &res ,\ndouble\na v g c o e f l i m i t )\n308\n{\n309\ndouble avg = 0 . 0 ;\n\
    310\nfor ( Local\nl o c a l\n:\nsrc )\n311\n{\n312\navg += l o c a l . getMagnitude\
    \ ( ) ;\n313\n}\n314\navg = avg / src . s i z e ( ) ;\n315\n316\nfor ( int\ni\
    \ = 0;\ni < src . s i z e ( ) ;\ni++)\n317\n{\n318\nif ( src [ i ] . getMagnitude\
    \ () >= avg ∗ a v g c o e f l i m i t )\n319\n{\n320\nres . push back ( src [\
    \ i ] ) ;\n321\n}\n322\n}\n323\n}\n324\nvoid\nl a s e r a n a l y s i s : : neighbourDistanceFilter\n\
    325\n( vector<Local> &src ,\nvector<Local> &res ,\n326\ndouble ThresholdDistance\
    \ ,\ndouble Error Th )\n327\n{\n328\ndouble sm th = 0 . 1 ;\n329\nfor ( int\n\
    i = 0;\ni < src . s i z e ( ) ;\ni++)\n330\n{\n331\nint inRangeNeighbours = 0;\n\
    332\nfor ( int\nj = 0;\nj < src . s i z e ( ) ;\nj++)\n333\n{\n334\nif ( i ==\
    \ j ) continue ;\n335\n336\ndouble\nn d i s t = abs ( src [ i ] . centre . y −\
    \ src [ j ] . centre . y ) ;\n337\n//double n_dist = abs(p.points[src[i].pc_index].y\
    \ - p.points[src[j].pc_index].y);\n338\nif (( n d i s t <= ThresholdDistance +\
    \ Error Th\n339\n&&\nn d i s t >= ThresholdDistance − Error Th )\n| |\n340\n(\
    \ n d i s t <= 2∗( ThresholdDistance + Error Th )\n341\n&&\nn d i s t >= 2∗( ThresholdDistance\
    \ − Error Th ) ) )\n342\n{\n343\ninRangeNeighbours++;\n344\n}\n345\n}\n346\nif\
    \ ( inRangeNeighbours >= 1)\n207\n347\n{\n348\nsrc [ i ] . inRangeNeighbours =\
    \ inRangeNeighbours ;\n349\nres . push back ( src [ i ] ) ;\n350\n}\n351\n}\n\
    352\n}\n353\n//}\n208\nAppendix E\nC++ Code for Chilitag Fiducial Finding\n1\n\
    #include<iostream>\n2\n#include<string >\n3\n#include<stdio . h> //for popen();\n\
    4\n#include<sstream>\n5\n6\n//ROS includes\n7\n#include<sensor msgs /Image . h>\n\
    8\n#include<sensor msgs / image encodings . h>\n9\n#include<image transport /\
    \ image transport . h>\n10\n#include<cv bridge / cv bridge . h>\n11\n#include<ros\
    \ / ros . h>\n12\n#include <brain box msgs /TargetPoseArray . h>\n13\n#include<brain\
    \ box msgs /TargetPose . h> //for publishing fiducial locations\n14\n#include<brain\
    \ box msgs /Point2 . h>\n15\n16\n//opencv includes\n17\n#include<opencv2/opencv\
    \ . hpp>\n18\n#include<opencv2/ highgui . hpp>\n19\n#include<opencv2/imgproc .\
    \ hpp>\n20\n#include<opencv2/ imgcodecs . hpp>\n21\n22\n//third party library\
    \ includes\n23\n#include<c h i l i t a g s . hpp>\n24\n25\nusing namespace std\
    \ ;\n26\nusing namespace cv ;\n27\n28\nstruct gui component\n29\n{\n30\nint max;\n\
    31\nint handler ;\n32\nfloat\nglobal ;\n33\n};\n34\n35\n//MODE BOOL\n36\nbool\
    \ readCamera = false ;\n37\n38\nbool running = true ;\n39\n40\n//thread handler\n\
    41\npthread t\nf r a m e c o l l e c t i n g t h r e a d ;\n42\n43\n// First,\
    \ we set up some constants related to the information overlaid\n44\n// on the\
    \ captured image\n45\nconst static cv : : Scalar COLOR(255 ,\n0 ,\n255);\n46\n\
    // OpenCv can draw with sub-pixel precision with fixed point coordinates\n209\n\
    47\nstatic const int SHIFT = 16;\n48\nstatic const float PRECISION = 1<<SHIFT\
    \ ;\n49\nint native image width ;\n50\nint native image height\n;\n51\nint device\
    \ = −1;\n52\n53\ngui component\nbrightness ,\ncontrast ,\nsharpen ,\ngray ,\n\
    frame control ;\n54\n55\nros : : Publisher\npos pub ;\n56\n57\n//this function\
    \ gets the cv source frame and\n58\nreturns\na v a i l a b l e\nc h i l i t a\
    \ g s\non the\nscreen\n59\ninline void\nc h i l i t a g s d e t e c t ( cv : :\
    \ Mat &src ,\n60\nc h i l i t a g s : : TagCornerMap &tags )\n61\n{\n62\n// The\
    \ tag detection happens in the Chilitags class.\n63\nc h i l i t a g s : : C h\
    \ i l i t ag s\nc h i l i t a g s ;\n64\n/* The detection is not perfect ,\n65\n\
    so if a tag is not detected during one frame,\n66\nthe tag will shortly disappears\
    \ , which results in flickering.\n67\nTo address this, Chilitags \"cheats\" by\
    \ keeping tags for n frames\n68\nat the same position. When tags disappear for\
    \ more than 5 frames,\n69\nChilitags actually removes it.\n70\nHere, we cancel\
    \ this to show the raw detection results.\n71\n*/\n72\nc h i l i t a g s . s e\
    \ t F i l t e r (0 ,\n0.0 f ) ;\n73\n// Detect tags on the current image;\n74\n\
    // The resulting map associates tag ids (between 0 and 1023)\n75\n// to four 2D\
    \ points corresponding to the corners positions\n76\n// in the picture.\n77\n\
    tags = c h i l i t a g s . find ( src ) ;\n78\n}\n79\n80\n/*\n81\na function to\
    \ change brightness and contrast of the image\n82\nnew_image(i,j) = brightness_coef\
    \ * old_image(i,j) + contrast_coef\n83\n*/\n84\n85\n86\nvoid ZEDimgCB( const sensor\
    \ msgs : : ImageConstPtr &img )\n87\n{\n88\nbrain box msgs : : TargetPoseArray\
    \ bbPoses ;\n89\ncv bridge : : CvImagePtr cv ptr ;\n90\ntry\n91\n{\n92\ncv ptr\
    \ = cv bridge : : toCvCopy(img ,\nsensor msgs : : image encodings : :BGR8) ;\n\
    93\ncv : : Mat output image = cv ptr−>image ;\n94\nc h i l i t a g s : : TagCornerMap\
    \ tags ;\n95\n//actual detection\n96\nc h i l i t a g s d e t e c t ( output image\
    \ ,\ntags ) ;\n97\nfor ( const std : : pair<int ,\nc h i l i t a g s : : Quad>\
    \ & tag\n:\ntags )\n98\n{\n99\nbrain box msgs : : TargetPose tagPose ;\n100\n\
    tagPose . t a r g e t i d = tag . f i r s t ;\n101\nint id = tag . f i r s t ;\n\
    102\n// We wrap the corner matrix into a datastructure that allows an\n103\n//\
    \ easy access to the coordinates\n104\nconst cv : : Mat <cv : : Point2f> corners\
    \ ( tag . second ) ;\n105\n// We start by drawing the borders of the tag\n106\n\
    for ( s i z e t\ni = 0;\ni < 4; ++i )\n210\n107\n{\n108\nbrain box msgs : : Point2\
    \ bbPoint ;\n109\nbbPoint . x = corners ( i ) . x ;\n110\nbbPoint . y = corners\
    \ ( i ) . y ;\n111\ntagPose . ou t l i n e . push back ( bbPoint ) ;\n112\ncv\
    \ : : l i n e (\n113\noutput image ,\n114\nPRECISION∗ corners ( i ) ,\n115\nPRECISION∗\
    \ corners (( i +1)%4),\n116\n#i f d e f OPENCV3\n117\nCOLOR,\n1 , cv : : LINE\
    \ AA, SHIFT ) ;\n118\n#else\n119\nCOLOR,\n1 , CV AA, SHIFT ) ;\n120\n#endif\n\
    121\n}\n122\ncv : : Point2f\ncenter = 0.5 f ∗( corners (0) + corners ( 2 ) ) ;\n\
    123\ncv : : putText ( output image ,\ncv : : format (\"%d\" ,\nid ) ,\n124\ncenter\
    \ ,\ncv : : FONT HERSHEY SIMPLEX,\n1.0 f , COLOR) ;\n125\n//ROS_INFO(\"Detected\
    \ ID: %d\",id);\n126\nbbPoses . poses . push back ( tagPose ) ;\n127\n}\n128\n\
    pos pub . publish ( bbPoses ) ;\n129\nimshow (\"chilitags\" , output image ) ;\n\
    130\n131\n}\n132\ncatch ( cv bridge : : Exception& e )\n133\n{\n134\nROS ERROR(\"\
    cv_bridge␣exception:␣%s\" , e . what ( ) ) ;\n135\nreturn ;\n136\n}\n137\nif (\
    \ waitKey (1) >= 0)\n;\n//Do not act when a key is pressed as SIGINT is being\
    \ caught.\n138\n}\n139\n140\nint main ( int argc ,\nchar∗∗ argv )\n141\n{\n142\n\
    ros : : i n i t ( argc , argv , \"chilitags_zed_subscribe\" ) ;\n143\n144\nros\
    \ : : NodeHandle nh ;\n145\npos pub = nh . advertise <brain box msgs : : TargetPoseArray>\n\
    146\n(\"/chilitags/position\" ,100);\n147\nimage transport : : ImageTransport\n\
    i t\n( nh ) ;\n148\nimage transport : : Subscriber\nimg sub =\n149\ni t\n. subscribe\
    \ (\"/left/image_rect_color\" ,10 , &ZEDimgCB) ;\n150\n151\nnamedWindow(\"chilitags\"\
    \ ,WINDOWNORMAL) ; //creating a window for display\n152\nros : : spin ( ) ;\n\
    153\nreturn\n0;\n154\n}\n211\nAppendix F\nC++ Code for Color-based Pattern Recognition\n\
    1\n#include <ros / ros . h>\n2\n#include <image transport / image transport .\
    \ h>\n3\n#include <cv bridge / cv bridge . h>\n4\n#include <sensor msgs / image\
    \ encodings . h>\n5\n#include <opencv2/imgproc/imgproc . hpp>\n6\n#include <opencv2/\
    \ highgui / highgui . hpp>\n7\n#include <string >\n8\n#include <tinyxml . h>\n\
    9\n#include <math . h>\n10\n#include <iostream>\n11\n#include <vector>\n12\n#include\
    \ <geometry msgs/Pose2D . h>\n13\n14\n#define PI 3.14159265\n15\n#define FltTh\
    \ 1\n16\n17\nusing namespace std ;\n18\nusing namespace cv ;\n19\n20\nstruct ColorParam\n\
    21\n{\n22\nint lHue ;\n23\nint hHue ;\n24\nint lSat ;\n25\nint hSat ;\n26\nint\
    \ lVal ;\n27\nint hVal ;\n28\ns t r i n g\nfMode ;\n29\nint erode ;\n30\nint\n\
    d i l a t e ;\n31\n};\n32\n33\nstruct Blob\n34\n{\n35\nint x ;\n36\nint y ;\n\
    37\nint height ;\n38\nint width ;\n39\ndouble area ;\n40\nfloat x c ;\n41\nfloat\
    \ y c ;\n42\n};\n43\n44\n/*struct Pose\n45\n{\n46\nfloat x;\n212\n47\nfloat y;\n\
    48\nfloat th;\n49\n};*/\n50\ngeometry msgs : : Pose2D robot pose ;\n51\n//Pose\
    \ robot_pose;\n52\nBlob sb , bb ;\n53\nColorParam cp ;\n54\nint medianCount =\
    \ 0;\n55\ndouble t time p ;\n56\nint\nfreq = 0;\n57\ndouble headingSum ;\n58\n\
    double c x sum ,\nc y sum ;\n59\nint loadColorParam ( s t r i n g COLORCODE) ;\n\
    60\ndouble StableData ( vector<double> raw ) ;\n61\nvector<double> raw ( FltTh\
    \ ) ;\n62\nclass ImageConverter\n63\n{\n64\nros : : NodeHandle nh ;\n65\nimage\
    \ transport : : ImageTransport\ni t\n;\n66\nimage transport : : Subscriber\nimage\
    \ sub ;\n67\nros : : Publisher\npos publisher ;\n68\npublic :\n69\nImageConverter\
    \ ( ) :\ni t\n( nh )\n70\n{\n71\n//Subscrive to input video feed and publish output\
    \ video feed\n72\nimage sub\n= i t\n. subscribe\n73\n(\"/usb_cam/image_raw\" ,\
    \ 1,&ImageConverter : : imageCb ,\nthis ) ;\n74\npos publisher = nh . advertise\
    \ <geometry msgs : : Pose2D>(\"/RED/pose\" , 5 ) ;\n75\n}\n76\n˜ImageConverter\
    \ ()\n77\n{\n78\n}\n79\nvoid imageCb ( const sensor msgs : : ImageConstPtr& msg)\n\
    80\n{\n81\nros : : Time newTime = ros : : Time : : now ( ) ;\n82\ndouble t time\
    \ = newTime . sec + double (newTime . nsec )/1000000000;\n83\n//ROS_INFO(\"Now\
    \ = %f\" ,t_time);\n84\ncv bridge : : CvImagePtr cv ptr ;\n85\n/*1. convert the\
    \ ros_image to opencv_image*/\n86\ntry\n87\n{\n88\ncv ptr = cv bridge : : toCvCopy\n\
    89\n(msg ,\nsensor msgs : : image encodings : :BGR8) ;\n90\n}\n91\ncatch ( cv\
    \ bridge : : Exception& e )\n92\n{\n93\nROS ERROR(\"cv_bridge␣exception:␣%s\"\
    \ , e . what ( ) ) ;\n94\nreturn ;\n95\n}\n96\nMat hsv , img , thresh ;\n97\n\
    img = cv ptr−>image ;\n98\n99\n//Convert the captured frame from BGR to HSV\n\
    100\ncvtColor (img ,\nhsv , COLOR BGR2HSV) ;\n101\n//Extract Threshold based on\
    \ the appropriate color range\n102\ninRange ( hsv ,\nScalar ( cp . lHue ,\ncp\
    \ . lSat ,\ncp . lVal ) ,\n103\nScalar ( cp . hHue ,\ncp . hSat ,\ncp . hVal )\
    \ ,\nthresh ) ;\n104\n105\n//Apply the selected Morphological filter\n106\nif\
    \ ( cp . fMode . compare (\"open\") == 0)\n213\n107\n{\n108\nif ( cp . erode !=\
    \ 0)\n109\n{\n110\nerode ( thresh ,\nthresh ,\n111\ngetStructuringElement (MORPH\
    \ ELLIPSE,\n112\nSize ( cp . erode ,\ncp . erode ) ) ) ;\n113\n}\n114\nif ( cp\
    \ . d i l a t e\n!= 0)\n115\n{\n116\nd i l a t e (\nthresh ,\nthresh ,\ngetStructuringElement\n\
    117\n(MORPH ELLIPSE,\nSize ( cp . dilate ,\ncp . d i l a t e ) ) ) ;\n118\n}\n\
    119\n}\n120\nif ( cp . fMode . compare (\"close\") == 0)\n121\n{\n122\nif ( cp\
    \ . d i l a t e\n!= 0)\n123\n{\n124\nd i l a t e (\nthresh ,\nthresh ,\ngetStructuringElement\n\
    125\n(MORPH ELLIPSE,\nSize ( cp . dilate ,\ncp . d i l a t e ) ) ) ;\n126\n}\n\
    127\nif ( cp . erode != 0)\n128\n{\n129\nerode ( thresh ,\nthresh ,\ngetStructuringElement\n\
    130\n(MORPH ELLIPSE,\nSize ( cp . erode ,\ncp . erode ) ) ) ;\n131\n}\n132\n}\n\
    133\n134\n//Apply Contour to the obtained threshold\n135\nMat thresh clone = thresh\
    \ . clone ( ) ;\n136\nstd : : vector<std : : vector<cv : : Point> > contours ;\n\
    137\nstd : : vector<cv : : Vec4i> hierarchy ;\n138\ncv : : findContours (\nthresh\
    \ clone ,\n139\ncontours ,\n140\nhierarchy ,\n141\nCV RETR TREE,\n142\nCV CHAIN\
    \ APPROX SIMPLE,\n143\ncv : : Point (0 ,\n0 ) ) ;\n144\nstd : : vector<std : :\
    \ vector<cv : : Point> > contours poly (\ncontours . s i z e ()\n) ;\n145\nstd\
    \ : : vector<cv : : Rect> boundRect ( contours . s i z e ( ) ) ;\n146\n147\n//Filter\
    \ 1: There must be only two blobs in the frame.\n148\nif ( contours . s i z e\
    \ () == 2)\n149\n{\n150\nfor ( int\ni = 0;\ni < contours . s i z e ( ) ;\ni++\
    \ )\n151\n{\n152\ncv : : approxPolyDP ( cv : : Mat( contours [ i ] ) ,\ncontours\
    \ poly [ i ] ,\n3 , true ) ;\n153\nboundRect [ i ] = cv : : boundingRect ( cv\
    \ : : Mat( contours poly [ i ] ) ) ;\n154\n}\n155\n//Sorting blobs: Compare areas\
    \ - contour changes order of detection\n156\nif ( boundRect [ 0 ] . area () <\
    \ boundRect [ 1 ] . area ( ) )\n157\n{\n158\nbb . x = boundRect [ 1 ] . x ;\n\
    159\nbb . y = boundRect [ 1 ] . y ;\n160\nbb . area = boundRect [ 1 ] . area (\
    \ ) ;\n161\nbb . height = boundRect [ 1 ] . height ;\n162\nbb . width = boundRect\
    \ [ 1 ] . width ;\n163\n164\nsb . x = boundRect [ 0 ] . x ;\n165\nsb . y = boundRect\
    \ [ 0 ] . y ;\n166\nsb . area = boundRect [ 0 ] . area ( ) ;\n214\n167\nsb . height\
    \ = boundRect [ 0 ] . height ;\n168\nsb . width = boundRect [ 0 ] . width ;\n\
    169\n}\n170\nelse if ( boundRect [ 0 ] . area () > boundRect [ 1 ] . area ( )\
    \ )\n171\n{\n172\nsb . x = boundRect [ 1 ] . x ;\n173\nsb . y = boundRect [ 1\
    \ ] . y ;\n174\nsb . area = boundRect [ 1 ] . area ( ) ;\n175\nsb . height = boundRect\
    \ [ 1 ] . height ;\n176\nsb . width = boundRect [ 1 ] . width ;\n177\n178\nbb\
    \ . x = boundRect [ 0 ] . x ;\n179\nbb . y = boundRect [ 0 ] . y ;\n180\nbb .\
    \ area = boundRect [ 0 ] . area ( ) ;\n181\nbb . height = boundRect [ 0 ] . height\
    \ ;\n182\nbb . width = boundRect [ 0 ] . width ;\n183\n}\n184\n185\n//Calculating\
    \ the centre of the blobs\n186\nbb . x c = f l o o r (bb . x + bb . width /2);\n\
    187\nbb . y c = f l o o r (bb . y + bb . height /2);\n188\n189\nsb . x c = f l\
    \ o o r ( sb . x + sb . width /2);\n190\nsb . y c = f l o o r ( sb . y + sb .\
    \ height /2);\n191\n192\n//Obtaining the center of the robot\n193\nMoments oMoments\
    \ = moments( thresh ) ;\n194\nrobot pose . x = f l o o r (oMoments . m10/oMoments\
    \ . m00 ) ;\n195\nrobot pose . y = f l o o r (oMoments . m01/oMoments . m00 )\
    \ ;\n196\nrobot pose . theta = atan2 (( int )( sb . y−bb . y ) ,( int )( sb .\
    \ x−bb . x ))∗180/ PI ;\n197\n198\npos publisher . publish ( robot pose ) ;\n\
    199\nfreq++;\n200\n}\n201\n202\nif ( t time − t time p >= 1.0)\n203\n{\n204\n\
    ROS INFO(\"Frequency␣=␣%d\" , freq ) ;\n205\nt time p = t time ;\n206\nfreq =\
    \ 0;\n207\n}\n208\nimshow (\"Image\" , thresh ) ;\n209\nif ( waitKey (30) == 27)\n\
    210\n{\n211\ncout << \"esc␣key␣is␣pressed␣by␣user\" << endl ;\n212\n}\n213\n}\n\
    214\n};\n215\n216\ndouble StableData ( vector<double> raw )\n217\n{\n218\ndouble\n\
    res = 0 . 0 ;\n219\nint max = 0;\n220\nint temp [ 1 0 ] ;\n221\n//1. search\n\
    222\nfor ( int\ni =0; i<raw . s i z e ( ) ;\ni++)\n223\n{\n224\ntemp [ i ] = 0;\n\
    225\nfor ( int\nj =0; j<raw . s i z e ( ) ;\nj++)\n226\n{\n215\n227\nif ( raw\
    \ [ i ] == raw [ j ] )\n228\n{\n229\ntemp [ i ]++;\n230\n}\n231\n}\n232\n}\n233\n\
    //2. find max\n234\nfor ( int\ni =0; i<raw . s i z e ( ) ;\ni++)\n235\n{\n236\n\
    if (temp [ i ] > max)\n237\n{\n238\nres = raw [ i ] ;\n239\nmax = temp [ i ] ;\n\
    240\n}\n241\n}\n242\nreturn\nres ;\n243\n}\n244\n245\nint loadColorParam ( s t\
    \ r i n g COLORCODE)\n246\n{\n247\nTiXmlDocument doc\n248\n(\"/home/robot/catkin_ws/src/localisation_system/src/image_param.xml\"\
    \ ) ;\n249\nif\n( ! doc . LoadFile ( ) )\n250\n{\n251\ncerr << doc . ErrorDesc\
    \ () << endl ;\n252\nreturn −1;\n253\n}\n254\nTiXmlElement∗ color = doc . FirstChildElement\
    \ ( ) ;\n255\nif ( color == NULL) return −1;\n256\nfor ( TiXmlElement∗ elem =\
    \ color −>FirstChildElement ( ) ;\n257\nelem != NULL;\nelem = elem−>NextSiblingElement\
    \ ( ) )\n258\n{\n259\ns t r i n g elemName = elem−>Value ( ) ;\n260\nconst char∗\
    \ attr ;\n261\nif (elemName == COLORCODE. c s t r ( ) )\n262\n{\n263\nelem−>Attribute\
    \ (\"lHue\",&cp . lHue ) ;\n264\nelem−>Attribute (\"hHue\",&cp . hHue ) ;\n265\n\
    elem−>Attribute (\"lSat\",&cp . lSat ) ;\n266\nelem−>Attribute (\"hSat\",&cp .\
    \ hSat ) ;\n267\nelem−>Attribute (\"lVal\",&cp . lVal ) ;\n268\nelem−>Attribute\
    \ (\"hVal\",&cp . hVal ) ;\n269\ncp . fMode = elem−>Attribute (\"mode\" ) ;\n\
    270\nelem−>Attribute (\"erode\",&cp . erode ) ;\n271\nelem−>Attribute (\"dilate\"\
    ,&cp . d i l a t e ) ;\n272\nreturn\n1;\n273\n}\n274\n}\n275\n}\n276\n277\nint\
    \ main ( int argc ,\nchar∗∗ argv )\n278\n{\n279\nint parsingCheck = loadColorParam\
    \ (\"RED\" ) ;\n280\nif ( parsingCheck == 1)\n281\n{\n282\nROS INFO(\"HUE:␣low␣=␣%d,␣high␣=␣%d\"\
    \ , cp . lHue , cp . hHue ) ;\n283\nROS INFO(\"SAT:␣low␣=␣%d,␣high␣=␣%d\" , cp\
    \ . lSat , cp . hSat ) ;\n284\nROS INFO(\"VAL:␣low␣=␣%d,␣high␣=␣%d\" , cp . lVal\
    \ , cp . hVal ) ;\n285\nROS INFO(\"Filter:␣mode␣=␣%s,␣erode␣=␣%d,␣dilate␣=␣%d\"\
    \ ,\n286\ncp . fMode . c s t r () , cp . erode , cp . d i l a t e ) ;\n216\n287\n\
    }\n288\nelse\n289\n{\n290\nROS INFO(\"Problem␣parsing␣paramters.␣Check␣image_param.xml\"\
    \ ) ;\n291\nreturn EXIT FAILURE;\n292\n}\n293\nnamedWindow(\"Image\" ,CV WINDOW\
    \ AUTOSIZE) ;\n294\nros : : i n i t ( argc , argv , \"red_localiser\" ) ;\n295\n\
    ImageConverter\ni c ;\n296\nros : : spin ( ) ;\n297\nreturn EXIT SUCCESS;\n298\n\
    }\n217\nAppendix G\nC++ Code for FIFO Task Handler\n1\n#include <ros / ros . h>\n\
    2\n#include <p l o u g h i n g r e v e r s i b l e / task . h>\n3\n#include <p\
    \ l o u g h i n g r e v e r s i b l e /ReachPoint . h>\n4\n#include <p l o u g\
    \ h i n g r e v e r s i b l e / occupied . h>\n5\n#include <string >\n6\n#include\
    \ <std msgs /Bool . h>\n7\n8\n#define hX 14.0000\n9\n#define hY 9.0000\n10\n11\n\
    12\nusing namespace std ;\n13\n14\nstruct pose\n15\n{\n16\nfloat x ;\n17\nfloat\
    \ y ;\n18\n};\n19\n20\n//Method Signitures\n21\nl i s t <pose> furrowLocalizer\
    \ ( pose\nstart ,\npose end ,\nfloat\nd i s t ) ;\n22\npose getComponent ( l i\
    \ s t <pose>\nl i s t ,\nint\ni ) ;\n23\nint getIndex ( l i s t <pose>\nl i s\
    \ t ,\npose\npose ) ;\n24\n//Variables\n25\npose alpha ,A,B,C,D,\nlastKnownPose\
    \ ;\n26\nl i s t <pose> furCoordAB ,\nfurCoordCD , homeCD, homeAB;\n27\nfloat\
    \ furDist ,\nfurTransAB ,\nfurTransCD ;\n28\ns t r i n g taskCmd=\"\" , pointName=\"\
    \" ;\n29\nint teamSize=0, rank=1, furTotal ;\n30\nbool taskIsCompleted = false\
    \ ,\n31\ntargetIsReached = false ,\n32\niAmConfident = false ,\n33\nfurrowTransiting\
    \ = false ,\n34\npathIsCleared = false ;\n35\np l o u g h i n g r e v e r s i\
    \ b l e : : ReachPoint reach ;\n36\np l o u g h i n g r e v e r s i b l e : :\
    \ occupied\ncheckPoint , updatePoint ;\n37\nstd msgs : : Bool imageRes ;\n38\n\
    class TaskHandler\n39\n{\n40\npublic :\n41\nTaskHandler ( ) ;\n42\nprivate :\n\
    43\nros : : NodeHandle nh ;\n44\nros : : Subscriber\ntask cmd sub ;\n45\nros :\
    \ : Subscriber\nreach point status sub ;\n46\nros : : Subscriber\nf i e l d s\
    \ u b ;\n218\n47\nros : : Publisher\nreach point pub ;\n48\nros : : ServiceClient\n\
    a s k r e f e r e n c e ;\n49\nros : : ServiceClient\nupdate reference ;\n50\n\
    51\nvoid taskCmdCallback ( const\n52\np l o u g h i n g r e v e r s i b l e :\
    \ : task : : ConstPtr &msg ) ;\n53\n54\nvoid reachPointStatusCallback\n55\n( const\n\
    p l o u g h i n g r e v e r s i b l e : : ReachPoint : : ConstPtr &status ) ;\n\
    56\nvoid\nf i e l d C a l l b a c k ( const std msgs : : Bool : : ConstPtr &imgStatus\
    \ ) ;\n57\n};\n58\n//Class Constructor\n59\nTaskHandler : : TaskHandler ()\n60\n\
    {\n61\ntask cmd sub = nh . subscribe <p l o u g h i n g r e v e r s i b l e :\
    \ : task>\n62\n(\"task_cmd\" ,5 ,& TaskHandler : : taskCmdCallback , this ) ;\n\
    63\n64\nf i e l d s u b = nh . subscribe <std msgs : : Bool>\n65\n(\"field_status\"\
    \ ,10 ,& TaskHandler : : fieldCallback , this ) ;\n66\n67\nreach point status\
    \ sub = nh . subscribe <p l o u g h i n g r e v e r s i b l e : :\n68\nReachPoint\
    \ >(\"p1/reach_point_status\" ,100 ,\n69\n&TaskHandler : : reachPointStatusCallback\
    \ , this ) ;\n70\n71\nreach point pub = nh . advertise <p l o u g h i n g r e\
    \ v e r s i b l e : :\n72\nReachPoint >(\"p1/requested_point\" , 1 0) ;\n73\n\
    74\na s k r e f e r e n c e = nh . serviceClient <p l o u g h i n g r e v e r\
    \ s i b l e : :\n75\noccupied >(\"check_coordinate\" ) ;\n76\n77\nupdate reference\
    \ = nh . serviceClient <p l o u g h i n g r e v e r s i b l e : :\n78\noccupied>\
    \ (\"add_coordinate\" ) ;\n79\n80\n}\n81\n82\n83\n84\n//a method to receive the\
    \ staus of reach point.\n85\nvoid TaskHandler : : reachPointStatusCallback\n86\n\
    ( const\np l o u g h i n g r e v e r s i b l e : : ReachPoint : : ConstPtr &status\
    \ )\n87\n{\n88\npointName = status −>hint ;\n89\npose newPose ;\n90\n//case of\
    \ reaching alpha\n91\nif ( pointName . compare (\"alpha\") == 0)\n92\n{\n93\n\
    //go to first coordinate in AB set.\n94\nnewPose = getComponent ( furCoordAB ,\
    \ 0 ) ;\n95\nreach . point . x = newPose . x ;\n96\nreach . point . y = newPose\
    \ . y ;\n97\nreach . hint = \"ab\" ;\n98\nreach . status = false ;\n99\nreach\
    \ point pub . publish ( reach ) ;\n100\niAmConfident = false ;\n101\n}\n102\n\
    //if my rank is known\n103\nif ( iAmConfident )\n104\n{\n105\npose\nreachedPoint\
    \ ;\n106\nreachedPoint . x = status −>point . x ;\n219\n107\nreachedPoint . y\
    \ = status −>point . y ;\n108\n/*\n109\nfurrow transitioning:\n110\nstage1-> go\
    \ back to the last position taken by the first rank robot.\n111\nstage2-> go to\
    \ same x but y + furrowDistance.\n112\nstage3-> go to next target x but next target\
    \ y + furrowDistance\n113\nstage4-> go to your starting point\n114\nresume your\
    \ ploughing.\n115\n*/\n116\nif ( status −>hint . compare (\"cd\") == 0)\n117\n\
    {\n118\nlastKnownPose . x = status −>point . x ;\n119\nlastKnownPose . y = status\
    \ −>point . y ;\n120\n//continue to furrow transitioning\n121\nif ( getIndex (\
    \ furCoordCD , lastKnownPose)+teamSize <= furTotal −1)\n122\n{\n123\nnewPose =\
    \ getComponent ( furCoordCD ,\n124\ngetIndex ( furCoordCD , reachedPoint)−rank\
    \ +1);\n125\n126\nreach . point . x = newPose . x ;\n127\nreach . point . y =\
    \ newPose . y ;\n128\nreach . hint = \"stage1_cd\" ;\n129\nreach . status = false\
    \ ;\n130\nreach point pub . publish ( reach ) ;\n131\n132\n}\n133\n//go back home\n\
    134\nif ( getIndex ( furCoordCD , lastKnownPose)+teamSize > furTotal −1)\n135\n\
    {\n136\nnewPose = getComponent ( furCoordCD ,\n137\ngetIndex ( furCoordCD , reachedPoint)−rank\
    \ +1);\n138\n139\nreach . point . x = newPose . x ;\n140\nreach . point . y =\
    \ newPose . y ;\n141\nreach . hint = \"home_cd_init\" ;\n142\nreach . status =\
    \ false ;\n143\nreach point pub . publish ( reach ) ;\n144\n}\n145\n}\n146\nif\
    \ ( status −>hint . compare (\"home_cd_init\") == 0)\n147\n{\n148\nreach . point\
    \ . x = reachedPoint . x ;\n149\nreach . point . y = reachedPoint . y + furTransCD\
    \ ;\n150\nreach . hint = \"home_cd\" ;\n151\nreach . status = false ;\n152\nreach\
    \ point pub . publish ( reach ) ;\n153\n}\n154\nif ( status −>hint . compare (\"\
    stage1_cd\") == 0)\n155\n{\n156\nreach . point . x = reachedPoint . x ;\n157\n\
    reach . point . y = reachedPoint . y+furTransCD ;\n158\nreach . hint = \"stage2_cd\"\
    \ ;\n159\nreach . status = false ;\n160\nreach point pub . publish ( reach ) ;\n\
    161\n}\n162\nif ( status −>hint . compare (\"stage2_cd\") == 0)\n163\n{\n164\n\
    newPose = getComponent ( furCoordCD ,\n165\ngetIndex ( furCoordCD , lastKnownPose)+teamSize\
    \ ) ;\n166\n220\n167\nreach . point . x = newPose . x ;\n168\nreach . point .\
    \ y = newPose . y+furTransCD ;\n169\nreach . hint = \"stage3_cd\" ;\n170\nreach\
    \ . status = false ;\n171\nreach point pub . publish ( reach ) ;\n172\n}\n173\n\
    if ( status −>hint . compare (\"stage3_cd\") == 0)\n174\n{\n175\n/*If the you\
    \ are the first in rank,\n176\nthen wait for the path to cleared*/\n177\nif (\
    \ rank == 1 && teamSize > 1)\n178\n{\n179\nif ( ! pathIsCleared )\n180\n{\n181\n\
    newPose = getComponent ( furCoordCD ,\n182\ngetIndex ( furCoordCD , lastKnownPose)+teamSize\
    \ ) ;\n183\n184\nreach . point . x = newPose . x ;\n185\nreach . point . y = newPose\
    \ . y+furTransCD ;\n186\nreach . hint = \"stage3_cd\" ;\n187\nreach . status =\
    \ false ;\n188\nreach point pub . publish ( reach ) ;\n189\n}\n190\nif ( pathIsCleared\
    \ )\n191\n{\n192\nnewPose = getComponent ( furCoordCD ,\n193\ngetIndex ( furCoordCD\
    \ , lastKnownPose)+teamSize ) ;\n194\n195\nreach . point . x = newPose . x ;\n\
    196\nreach . point . y = newPose . y ;\n197\nreach . hint = \"stage4_cd\" ;\n\
    198\nreach . status = false ;\n199\nreach point pub . publish ( reach ) ;\n200\n\
    }\n201\n}\n202\nif ( rank != 1\n| |\nteamSize == 1)\n203\n{\n204\nnewPose = getComponent\
    \ ( furCoordCD ,\n205\ngetIndex ( furCoordCD , lastKnownPose)+teamSize ) ;\n206\n\
    207\nreach . point . x = newPose . x ;\n208\nreach . point . y = newPose . y ;\n\
    209\nreach . hint = \"stage4_cd\" ;\n210\nreach . status = false ;\n211\nreach\
    \ point pub . publish ( reach ) ;\n212\n}\n213\n}\n214\nif ( status −>hint . compare\
    \ (\"stage4_cd\") == 0)\n215\n{\n216\npathIsCleared = false ;\n217\nnewPose =\
    \ getComponent ( furCoordAB ,\n218\ngetIndex ( furCoordCD , lastKnownPose)+teamSize\
    \ ) ;\n219\n220\nreach . point . x = newPose . x ;\n221\nreach . point . y = newPose\
    \ . y ;\n222\nreach . hint = \"ab\" ;\n223\nreach . status = false ;\n224\nreach\
    \ point pub . publish ( reach ) ;\n225\n}\n226\nelse if ( status −>hint . compare\
    \ (\"ab\") == 0)\n221\n227\n{\n228\nlastKnownPose . x = status −>point . x ;\n\
    229\nlastKnownPose . y = status −>point . y ;\n230\n//continue to furrow transitioning\n\
    231\nif ( getIndex ( furCoordAB , lastKnownPose)+teamSize <= furTotal −1)\n232\n\
    {\n233\nnewPose = getComponent ( furCoordAB ,\n234\ngetIndex ( furCoordAB , reachedPoint)−rank\
    \ +1);\n235\n236\nreach . point . x = newPose . x ;\n237\nreach . point . y =\
    \ newPose . y ;\n238\nreach . hint = \"stage1_ab\" ;\n239\nreach . status = false\
    \ ;\n240\nreach point pub . publish ( reach ) ;\n241\n}\n242\n//go back home\n\
    243\nif ( getIndex ( furCoordAB , lastKnownPose)+teamSize > furTotal −1)\n244\n\
    {\n245\nnewPose = getComponent ( furCoordAB ,\n246\ngetIndex ( furCoordAB , reachedPoint)−rank\
    \ +1);\n247\n248\nreach . point . x = newPose . x ;\n249\nreach . point . y =\
    \ newPose . y ;\n250\nreach . hint = \"home_ab_init\" ;\n251\nreach . status =\
    \ false ;\n252\nreach point pub . publish ( reach ) ;\n253\n}\n254\n}\n255\nif\
    \ ( status −>hint . compare (\"home_ab_init\") == 0)\n256\n{\n257\nreach . point\
    \ . x = reachedPoint . x ;\n258\nreach . point . y = reachedPoint . y−furTransAB\
    \ ;\n259\nreach . hint = \"home_ab\" ;\n260\nreach . status = false ;\n261\nreach\
    \ point pub . publish ( reach ) ;\n262\n}\n263\nif ( status −>hint . compare (\"\
    stage1_ab\") == 0)\n264\n{\n265\nreach . point . x = reachedPoint . x ;\n266\n\
    reach . point . y = reachedPoint . y−furTransAB ;\n267\nreach . hint = \"stage2_ab\"\
    \ ;\n268\nreach . status = false ;\n269\nreach point pub . publish ( reach ) ;\n\
    270\n}\n271\nif ( status −>hint . compare (\"stage2_ab\") == 0)\n272\n{\n273\n\
    newPose = getComponent ( furCoordAB ,\n274\ngetIndex ( furCoordAB , lastKnownPose)+teamSize\
    \ ) ;\n275\n276\nreach . point . x = newPose . x ;\n277\nreach . point . y = newPose\
    \ . y−furTransAB ;\n278\nreach . hint = \"stage3_ab\" ;\n279\nreach . status =\
    \ false ;\n280\nreach point pub . publish ( reach ) ;\n281\n}\n282\nif ( status\
    \ −>hint . compare (\"stage3_ab\") == 0)\n283\n{\n284\n/*If the you are the first\
    \ in rank, then wait for the path to cleared*/\n285\nif ( rank == 1 && teamSize\
    \ > 1)\n286\n{\n222\n287\nif ( ! pathIsCleared )\n288\n{\n289\nnewPose = getComponent\
    \ ( furCoordAB ,\n290\ngetIndex ( furCoordAB , lastKnownPose)+teamSize ) ;\n291\n\
    292\nreach . point . x = newPose . x ;\n293\nreach . point . y = newPose . y−furTransAB\
    \ ;\n294\nreach . hint = \"stage3_ab\" ;\n295\nreach . status = false ;\n296\n\
    reach point pub . publish ( reach ) ;\n297\n}\n298\nif ( pathIsCleared )\n299\n\
    {\n300\nnewPose = getComponent ( furCoordAB ,\n301\ngetIndex ( furCoordAB , lastKnownPose)+teamSize\
    \ ) ;\n302\n303\nreach . point . x = newPose . x ;\n304\nreach . point . y = newPose\
    \ . y ;\n305\nreach . hint = \"stage4_ab\" ;\n306\nreach . status = false ;\n\
    307\nreach point pub . publish ( reach ) ;\n308\n}\n309\n}\n310\nif ( rank !=\
    \ 1\n| |\nteamSize == 1)\n311\n{\n312\nnewPose = getComponent ( furCoordAB ,\n\
    313\ngetIndex ( furCoordAB , lastKnownPose)+teamSize ) ;\n314\n315\nreach . point\
    \ . x = newPose . x ;\n316\nreach . point . y = newPose . y ;\n317\nreach . hint\
    \ = \"stage4_ab\" ;\n318\nreach . status = false ;\n319\nreach point pub . publish\
    \ ( reach ) ;\n320\n}\n321\n}\n322\nif ( status −>hint . compare (\"stage4_ab\"\
    ) == 0)\n323\n{\n324\npathIsCleared = false ;\n325\nnewPose = getComponent ( furCoordCD\
    \ ,\n326\ngetIndex ( furCoordAB , lastKnownPose)+teamSize ) ;\n327\n328\nreach\
    \ . point . x = newPose . x ;\n329\nreach . point . y = newPose . y ;\n330\nreach\
    \ . hint = \"cd\" ;\n331\nreach . status = false ;\n332\nreach point pub . publish\
    \ ( reach ) ;\n333\n}\n334\n}\n335\n//If the robot is not sure what rank it has\n\
    336\nif\n( ! iAmConfident && ! furrowTransiting )\n337\n{\n338\nif ( pointName\
    \ . compare (\"ab\") == 0)\n339\n{\n340\npose temp = getComponent ( furCoordAB\
    \ , rank −1);\n341\ncheckPoint . request . x = temp . x ;\n342\ncheckPoint . request\
    \ . y = temp . y ;\n343\nif ( a s k r e f e r e n c e . c a l l ( checkPoint ))\n\
    344\n{\n345\n//if the requested point is occupied\n346\nif ( checkPoint . response\
    \ . status == true )\n223\n347\n{\n348\n//update your rank\n349\nrank++;\n350\n\
    //go to the next ploughing target\n351\nnewPose = getComponent ( furCoordAB ,\
    \ rank −1);\n352\nreach . point . x = newPose . x ;\n353\nreach . point . y =\
    \ newPose . y ;\n354\nreach . hint = \"ab\" ;\n355\nreach . status = true ;\n\
    356\nreach point pub . publish ( reach ) ;\n357\n}\n358\n//if the requested point\
    \ is not occupied\n359\nelse if ( checkPoint . response . status == false )\n\
    360\n{\n361\n//update reference\n362\npose temp = getComponent ( furCoordAB ,\
    \ rank −1);\n363\nupdatePoint . request . x = temp . x ;\n364\nupdatePoint . request\
    \ . y = temp . y ;\n365\nif ( update reference . c a l l ( updatePoint ))\n366\n\
    {\n367\n//start plouging\n368\nnewPose = getComponent ( furCoordCD , rank −1);\n\
    369\nreach . point . x = newPose . x ;\n370\nreach . point . y = newPose . y ;\n\
    371\nreach . hint = \"cd\" ;\n372\nreach . status = false ;\n373\nreach point\
    \ pub . publish ( reach ) ;\n374\niAmConfident = true ;\n375\nfurrowTransiting\
    \ = true ;\n376\n}\n377\n}\n378\n}\n379\n}\n380\n}\n381\n//Going back to home\
    \ position through cd sideline\n382\nif ( status −>hint . compare (\"home_cd\"\
    ) == 0)\n383\n{\n384\npose\nreachedPoint ;\n385\nreachedPoint . x = status −>point\
    \ . x ;\n386\nreachedPoint . y = status −>point . y ;\n387\nif ( getIndex (homeCD,\
    \ reachedPoint)−1 > −1)\n388\n{\n389\nnewPose = getComponent (homeCD,\n390\ngetIndex\
    \ (homeCD, reachedPoint ) −1);\n391\n392\nreach . point . x = newPose . x ;\n\
    393\nreach . point . y = newPose . y ;\n394\nreach . hint = \"home_cd\" ;\n395\n\
    reach . status = false ;\n396\nreach point pub . publish ( reach ) ;\n397\n}\n\
    398\nif ( getIndex (homeCD, reachedPoint)−1 == −1)\n399\n{\n400\nreach . point\
    \ . x = hX;\n401\nreach . point . y = hY;\n402\nreach . hint = \"home\" ;\n403\n\
    reach . status = false ;\n404\nreach point pub . publish ( reach ) ;\n405\n}\n\
    406\n}\n224\n407\n//Going back to home position through ab sideline\n408\nif (\
    \ status −>hint . compare (\"home_ab\") == 0)\n409\n{\n410\npose\nreachedPoint\
    \ ;\n411\nreachedPoint . x = status −>point . x ;\n412\nreachedPoint . y = status\
    \ −>point . y ;\n413\nif ( getIndex (homeAB, reachedPoint)−1 > −1)\n414\n{\n415\n\
    newPose = getComponent (homeAB,\n416\ngetIndex (homeAB, reachedPoint ) −1);\n\
    417\n418\nreach . point . x = newPose . x ;\n419\nreach . point . y = newPose\
    \ . y ;\n420\nreach . hint = \"home_ab\" ;\n421\nreach . status = false ;\n422\n\
    reach point pub . publish ( reach ) ;\n423\n}\n424\nif ( getIndex (homeAB, reachedPoint)−1\
    \ == −1)\n425\n{\n426\nreach . point . x = hX;\n427\nreach . point . y = hY;\n\
    428\nreach . hint = \"home\" ;\n429\nreach . status = false ;\n430\nreach point\
    \ pub . publish ( reach ) ;\n431\n}\n432\n}\n433\n}\n434\n//a method to receive\
    \ status of the field\n435\nvoid TaskHandler : : f i e l d C a l l b a c k ( const\n\
    436\nstd msgs : : Bool : : ConstPtr &f i e l d S t a t u s )\n437\n{\n438\n//to\
    \ avoid unwanted reading during\n439\n//other stages of the process\n440\nif (\
    \ pointName . compare (\"stage3_ab\") == 0\n441\n| |\npointName . compare (\"\
    stage3_cd\") == 0)\n442\n{\n443\npathIsCleared = f i el d S t at u s −>data ;\n\
    444\nROS INFO(\"Image␣Response␣Received\" ) ;\n445\n}\n446\n}\n447\n//a method\
    \ to receive the task command\n448\nvoid TaskHandler : : taskCmdCallback ( const\n\
    449\np l o u g h i n g r e v e r s i b l e : : task : : ConstPtr &msg)\n450\n\
    {\n451\n//loading data to appropriate variables\n452\ntaskCmd = msg−>task ;\n\
    453\nalpha . x = msg−>alpha . x ;\n454\nalpha . y = msg−>alpha . y ;\n455\nA.\
    \ x = msg−>a . x ;\n456\nA. y = msg−>a . y ;\n457\nB. x = msg−>b . x ;\n458\n\
    B. y = msg−>b . y ;\n459\nC. x = msg−>c . x ;\n460\nC. y = msg−>c . y ;\n461\n\
    D. x = msg−>d . x ;\n462\nD. y = msg−>d . y ;\n463\nfurDist = msg−>furrow distance\
    \ ;\n464\nfurTransAB = msg−>t r a n s i t i o n a r e a a b ;\n465\nfurTransCD\
    \ = msg−>t r a n s i t i o n a r e a c d ;\n466\nteamSize = msg−>team size ;\n\
    225\n467\n// calculate furrow coordinates\n468\nfurCoordAB = furrowLocalizer (A,B,\
    \ furDist ) ;\n469\nfurCoordCD = furrowLocalizer (C,D, furDist ) ;\n470\nfurTotal\
    \ = furCoordCD . s i z e ( ) ;\n471\n//calculating homing coordinates\n472\nC.\
    \ y = C. y + furTransCD ;\n473\nD. y = D. y + furTransCD ;\n474\nA. y = A. y −\
    \ furTransAB ;\n475\nB. y = B. y − furTransAB ;\n476\nhomeCD = furrowLocalizer\
    \ (C,D, furDist ) ;\n477\nhomeAB = furrowLocalizer (A,B, furDist ) ;\n478\n479\n\
    /*the first step is to go to alpha*/\n480\nreach . point . x = alpha . x ;\n481\n\
    reach . point . y = alpha . y ;\n482\nreach . hint = \"alpha\" ;\n483\nreach .\
    \ status = false ;\n484\nreach point pub . publish ( reach ) ;\n485\n486\n}\n\
    487\n488\n//main method\n489\nint main ( int argc ,\nchar∗∗ argv )\n490\n{\n491\n\
    ros : : i n i t ( argc , argv , \"r1_task_handler\" ) ;\n492\nTaskHandler th ;\n\
    493\nros : : spin ( ) ;\n494\nreturn\n0;\n495\n}\n496\n//a method to map the furrow\
    \ coordinates.\n497\n//it collects all calculated coordinates in a list.\n498\n\
    l i s t <pose> furrowLocalizer ( pose\nstart ,\npose end ,\nfloat\nd i s t )\n\
    499\n{\n500\nl i s t <pose> createdList ;\n501\npose\ncurrentPose = s t a r t\
    \ ;\n502\nwhile ( currentPose . x >= end . x)\n503\n{\n504\n/*\n505\npush_back\
    \ -> add element at the end, last element.\n506\npush_front -> add element to\
    \ the front, element 0.\n507\n*/\n508\ncreatedList . push back ( currentPose )\
    \ ;\n509\ncurrentPose . x −= d i s t ;\n510\n}\n511\nreturn\ncreatedList ;\n512\n\
    }\n513\n//a method to get particular component in a given list.\n514\npose getComponent\
    \ ( l i s t <pose>\nl i s t ,\nint\ni ){\n515\nl i s t <pose >:: i t e r a t o\
    \ r\ni t =\nl i s t . begin ( ) ;\n516\nfor ( int\ni =0; i< i ;\ni ++){\n517\n\
    ++i t ;\n518\n}\n519\nreturn ∗ i t ;\n520\n}\n521\nint getIndex ( l i s t <pose>\n\
    l i s t ,\npose\npose )\n522\n{\n523\nint index = −1;\n524\npose temp ;\n525\n\
    for ( int\ni =0; i< l i s t . s i z e ( ) ;\ni++)\n526\n{\n226\n527\ntemp = getComponent\
    \ (\nl i s t , i ) ;\n528\nif (temp . x ==\npose . x && temp . y ==\npose . y)\n\
    529\n{\n530\nindex = i ;\n531\n}\n532\n}\n533\nreturn index ;\n534\n}\n227\nAppendix\
    \ H\nC++ Code for LIFO Task Handler\n1\n#include <ros / ros . h>\n2\n#include\
    \ <p l o u g h i n g r e v e r s i b l e / task . h>\n3\n#include <p l o u g h\
    \ i n g r e v e r s i b l e /ReachPoint . h>\n4\n#include <p l o u g h i n g r\
    \ e v e r s i b l e / occupied . h>\n5\n#include <string >\n6\n#include <std msgs\
    \ /Bool . h>\n7\n#include <stdio . h>\n8\n#include <iostream>\n9\n10\n#define\
    \ hX 14.0000\n11\n#define hY 9.0000\n12\n#define tranX 0.8\n13\n#define tranY\
    \ 1\n14\n15\n16\nusing namespace std ;\n17\n18\nstruct pose\n19\n{\n20\nfloat\
    \ x ;\n21\nfloat y ;\n22\n};\n23\n24\n//Method Signitures\n25\nl i s t <pose>\
    \ furrowLocalizer ( pose\nstart ,\npose end ,\nfloat\nd i s t ) ;\n26\npose getComponent\
    \ ( l i s t <pose>\nl i s t ,\nint\ni ) ;\n27\nint getIndex ( l i s t <pose>\n\
    l i s t ,\npose\npose ) ;\n28\n//Variables\n29\npose alpha ,A,B,C,D,\nlastKnownPose\
    \ ,\nnextPose ;\n30\nl i s t <pose> furCoordAB ,\nfurCoordCD , homeCD, homeAB;\n\
    31\nfloat furDist ,\nfurTransAB ,\nfurTransCD ;\n32\ns t r i n g taskCmd=\"\"\
    \ , pointName=\"\" ;\n33\nint teamSize=0, rank=1, furTotal ,\n34\nploughingTurn\
    \ = 0 ,\n35\nploughingRound = 0;\n36\nbool taskIsCompleted = false ,\n37\ntargetIsReached\
    \ = false ,\n38\niAmConfident = false ,\n39\nfurrowTransiting = false ,\n40\n\
    pathIsCleared = false ;\n41\np l o u g h i n g r e v e r s i b l e : : ReachPoint\
    \ reach ;\n42\np l o u g h i n g r e v e r s i b l e : : occupied\ncheckPoint\
    \ , updatePoint ;\n43\nstd msgs : : Bool imageRes ;\n44\nclass TaskHandler\n45\n\
    {\n46\npublic :\n228\n47\nTaskHandler ( ) ;\n48\nprivate :\n49\nros : : NodeHandle\
    \ nh ;\n50\nros : : Subscriber\ntask cmd sub ;\n51\nros : : Subscriber\nreach\
    \ point status sub ;\n52\n53\nros : : Publisher\nreach point pub ;\n54\nros :\
    \ : ServiceClient\na s k r e f e r e n c e ;\n55\nros : : ServiceClient\nupdate\
    \ reference ;\n56\n57\nvoid taskCmdCallback ( const\n58\np l o u g h i n g r e\
    \ v e r s i b l e : : task : : ConstPtr &msg ) ;\n59\n60\nvoid reachPointStatusCallback\
    \ ( const\n61\np l o u g h i n g r e v e r s i b l e : : ReachPoint : : ConstPtr\
    \ &status ) ;\n62\n63\nvoid\nf i e l d C a l l b a c k ( const\n64\nstd msgs :\
    \ : Bool : : ConstPtr &imgStatus ) ;\n65\n};\n66\n//Class Constructor\n67\nTaskHandler\
    \ : : TaskHandler ()\n68\n{\n69\ntask cmd sub = nh . subscribe <p l o u g h i\
    \ n g r e v e r s i b l e : : task>\n70\n(\"task_cmd\" ,5 ,& TaskHandler : : taskCmdCallback\
    \ , this ) ;\n71\n72\nreach point status sub = nh . subscribe <p l o u g h i n\
    \ g r e v e r s i b l e : :\n73\nReachPoint> (\"p1/reach_point_status\" ,100 ,&\
    \ TaskHandler : :\n74\nreachPointStatusCallback , this ) ;\n75\n76\nreach point\
    \ pub = nh . advertise <p l o u g h i n g r e v e r s i b l e : :\n77\nReachPoint\
    \ >(\"p1/requested_point\" , 1 0) ;\n78\n79\na s k r e f e r e n c e = nh . serviceClient\
    \ <p l o u g h i n g r e v e r s i b l e : :\n80\noccupied >(\"check_coordinate\"\
    \ ) ;\n81\n82\nupdate reference = nh . serviceClient <p l o u g h i n g r e v\
    \ e r s i b l e : :\n83\noccupied >(\"add_coordinate\" ) ;\n84\n}\n85\n86\n//a\
    \ method to receive the staus of reach point.\n87\nvoid TaskHandler : : reachPointStatusCallback\
    \ ( const\n88\np l o u g h i n g r e v e r s i b l e : : ReachPoint : : ConstPtr\
    \ &status )\n89\n{\n90\npointName = status −>hint ;\n91\npose newPose ;\n92\n\
    //Step 2-1: Enter the field by going\n93\n//to the coordinate of the first furrow\n\
    94\nif ( pointName . compare (\"alpha\") == 0)\n95\n{\n96\n//go to first coordinate\
    \ in AB set.\n97\nnewPose = getComponent ( furCoordAB , 0 ) ;\n98\nreach . point\
    \ . x = newPose . x ;\n99\nreach . point . y = newPose . y ;\n100\nreach . hint\
    \ = \"ab\" ;\n101\nreach . status = false ;\n102\nreach point pub . publish (\
    \ reach ) ;\n103\niAmConfident = false ;\n104\n}\n105\nif ( iAmConfident )\n106\n\
    {\n229\n107\n//It is important to keep track of the current\n108\n// position\
    \ of the robot when it is confident\n109\npose\nreachedPoint ;\n110\nreachedPoint\
    \ . x = status −>point . x ;\n111\nreachedPoint . y = status −>point . y ;\n112\n\
    //Next stage depends on the reached position of the robot (CD OR AB)\n113\nif\
    \ ( status −>hint . compare (\"cd\") == 0)\n114\n{\n115\n//Now this location will\
    \ be saved as reference location\n116\nlastKnownPose . x = status −>point . x\
    \ ;\n117\nlastKnownPose . y = status −>point . y ;\n118\n/*\n119\nDepending on\
    \ round number different\n120\nequations will be used to determine next furrow.\n\
    121\nRound number is either even or odd.\n122\n*/\n123\n//check if the next round\
    \ is available\n124\nif ( getIndex ( furCoordCD , lastKnownPose)+\n125\n2∗( teamSize\
    \ − rank)+1 <= furTotal −1)\n126\n{\n127\nnextPose = getComponent ( furCoordCD\
    \ ,\n128\ngetIndex ( furCoordCD , lastKnownPose )+2∗( teamSize − rank )+1);\n\
    129\n130\nif ( rank != teamSize )\n131\n{\n132\nreach . point . x = reachedPoint\
    \ . x − tranX ;\n133\nreach . point . y = reachedPoint . y + tranY ;\n134\nreach\
    \ . hint = \"stage1_cd\" ;\n135\nreach . status = false ;\n136\nreach point pub\
    \ . publish ( reach ) ;\n137\n}\n138\nelse if ( rank == teamSize )\n139\n{\n140\n\
    141\nreach . point . x = nextPose . x ;\n142\nreach . point . y = nextPose . y\
    \ ;\n143\nreach . hint = \"stage3_cd\" ;\n144\nreach . status = false ;\n145\n\
    reach point pub . publish ( reach ) ;\n146\n}\n147\n}\n148\nelse if ( getIndex\
    \ ( furCoordCD , lastKnownPose )\n149\n+2∗(teamSize − rank)+1 > furTotal −1)\n\
    150\n{\n151\nreach . point . x = reachedPoint . x ;\n152\nreach . point . y =\
    \ reachedPoint . y + tranY ;\n153\nreach . hint = \"home_cd\" ;\n154\nreach .\
    \ status = false ;\n155\nreach point pub . publish ( reach ) ;\n156\n}\n157\n\
    }\n158\nif ( status −>hint . compare (\"ab\") == 0)\n159\n{\n160\n//Now this location\
    \ will be saved as reference location\n161\nlastKnownPose . x = status −>point\
    \ . x ;\n162\nlastKnownPose . y = status −>point . y ;\n163\n/*\n164\nDepending\
    \ on round number different equations\n165\nwill be used to determine next furrow.\n\
    166\nRound number is either even or odd.\n230\n167\n*/\n168\n//when round is even\
    \ (because the task is start from ab,\n169\n//when the robot reaches ab ploughingRound\
    \ is always even)\n170\n//check if the next round is available\n171\nif ( getIndex\
    \ ( furCoordAB , lastKnownPose)+2∗rank−1 <= furTotal −1)\n172\n{\n173\n174\n//log\
    \ the next starting point before start ploughing\n175\nnextPose = getComponent\
    \ ( furCoordAB ,\n176\ngetIndex ( furCoordAB , lastKnownPose)+2∗rank −1);\n177\n\
    //If robot rank is not the first in the team,\n178\n//then the robot is compelled\
    \ to perform manuevering\n179\nif ( rank != 1)\n180\n{\n181\nreach . point . x\
    \ = reachedPoint . x − tranX ;\n182\nreach . point . y = reachedPoint . y − tranY\
    \ ;\n183\nreach . hint = \"stage1_ab\" ;\n184\nreach . status = false ;\n185\n\
    reach point pub . publish ( reach ) ;\n186\n}\n187\nelse if ( rank == 1)\n188\n\
    {\n189\n190\nreach . point . x = nextPose . x ;\n191\nreach . point . y = nextPose\
    \ . y ;\n192\nreach . hint = \"stage3_ab\" ;\n193\nreach . status = false ;\n\
    194\nreach point pub . publish ( reach ) ;\n195\n}\n196\n}\n197\nelse if ( getIndex\
    \ ( furCoordAB , lastKnownPose)+2∗rank−1 > furTotal −1)\n198\n{\n199\n//starting\
    \ going home\n200\nreach . point . x = reachedPoint . x ;\n201\nreach . point\
    \ . y = reachedPoint . y − tranY ;\n202\nreach . hint = \"home_ab\" ;\n203\nreach\
    \ . status = false ;\n204\nreach point pub . publish ( reach ) ;\n205\n}\n206\n\
    }\n207\n//execute the second stage of furrow transitioning on CD side\n208\nelse\
    \ if ( status −>hint . compare (\"stage1_cd\") == 0)\n209\n{\n210\nreach . point\
    \ . x = reachedPoint . x + 2∗tranX ;\n211\nreach . point . y = reachedPoint .\
    \ y ;\n212\nreach . hint = \"stage2_cd\" ;\n213\nreach . status = false ;\n214\n\
    reach point pub . publish ( reach ) ;\n215\n}\n216\nelse if ( status −>hint .\
    \ compare (\"stage1_ab\") == 0)\n217\n{\n218\nreach . point . x = reachedPoint\
    \ . x + 2∗tranX ;\n219\nreach . point . y = reachedPoint . y ;\n220\nreach . hint\
    \ = \"stage2_ab\" ;\n221\nreach . status = false ;\n222\nreach point pub . publish\
    \ ( reach ) ;\n223\n}\n224\n//wait until a message is received from\n225\n//horizon\
    \ detector module is received\n226\nelse if ( status −>hint . compare (\"go_cd\"\
    ) == 0)\n231\n227\n{\n228\n//log the next starting point before start ploughing\n\
    229\nnextPose = getComponent ( furCoordCD ,\n230\ngetIndex ( furCoordCD , lastKnownPose\
    \ )+2∗( teamSize − rank )+1);\n231\n232\n//nextPose logged from stage1_cd.\n233\n\
    reach . point . x = nextPose . x ;\n234\nreach . point . y = nextPose . y ;\n\
    235\nreach . hint = \"stage3_cd\" ;\n236\nreach . status = false ;\n237\nreach\
    \ point pub . publish ( reach ) ;\n238\n}\n239\nelse if ( status −>hint . compare\
    \ (\"go_ab\") == 0)\n240\n{\n241\nnextPose = getComponent ( furCoordAB ,\n242\n\
    getIndex ( furCoordAB , lastKnownPose)+2∗rank −1);\n243\n//nextPose logged from\
    \ stage1_ab.\n244\nreach . point . x = nextPose . x ;\n245\nreach . point . y\
    \ = nextPose . y ;\n246\nreach . hint = \"stage3_ab\" ;\n247\nreach . status =\
    \ false ;\n248\nreach point pub . publish ( reach ) ;\n249\n}\n250\n//when you\
    \ reached the starting point,\n251\n//find your next target in AB set and plough.\n\
    252\n//the target in AB set is mirror of the reached CD.\n253\nelse if ( status\
    \ −>hint . compare (\"stage3_cd\") == 0)\n254\n{\n255\nnextPose = getComponent\
    \ ( furCoordAB ,\n256\ngetIndex ( furCoordCD , reachedPoint ) ) ;\n257\n258\n\
    reach . point . x = nextPose . x ;\n259\nreach . point . y = nextPose . y ;\n\
    260\nreach . hint = \"ab\" ;\n261\nreach . status = false ;\n262\nreach point\
    \ pub . publish ( reach ) ;\n263\nploughingRound++;\n264\n}\n265\nelse if ( status\
    \ −>hint . compare (\"stage3_ab\") == 0)\n266\n{\n267\nnextPose = getComponent\
    \ ( furCoordCD ,\n268\ngetIndex ( furCoordAB , reachedPoint ) ) ;\n269\n270\n\
    reach . point . x = nextPose . x ;\n271\nreach . point . y = nextPose . y ;\n\
    272\nreach . hint = \"cd\" ;\n273\nreach . status = false ;\n274\nreach point\
    \ pub . publish ( reach ) ;\n275\nploughingRound++;\n276\n}\n277\n//Going back\
    \ to home position through cd sideline\n278\nif ( status −>hint . compare (\"\
    home_cd\") == 0)\n279\n{\n280\npose\nreachedPoint ;\n281\nreachedPoint . x = status\
    \ −>point . x ;\n282\nreachedPoint . y = status −>point . y ;\n283\nif ( getIndex\
    \ (homeCD, reachedPoint)−1 > −1)\n284\n{\n285\nnewPose = getComponent (homeCD,\n\
    286\ngetIndex (homeCD, reachedPoint ) −1);\n232\n287\n288\nreach . point . x =\
    \ newPose . x ;\n289\nreach . point . y = newPose . y ;\n290\nreach . hint = \"\
    home_cd\" ;\n291\nreach . status = false ;\n292\nreach point pub . publish ( reach\
    \ ) ;\n293\n}\n294\nif ( getIndex (homeCD, reachedPoint)−1 == −1)\n295\n{\n296\n\
    reach . point . x = hX;\n297\nreach . point . y = hY;\n298\nreach . hint = \"\
    home\" ;\n299\nreach . status = false ;\n300\nreach point pub . publish ( reach\
    \ ) ;\n301\n}\n302\n}\n303\n//Going back to home position through ab sideline\n\
    304\nif ( status −>hint . compare (\"home_ab\") == 0)\n305\n{\n306\npose\nreachedPoint\
    \ ;\n307\nreachedPoint . x = status −>point . x ;\n308\nreachedPoint . y = status\
    \ −>point . y ;\n309\nif ( getIndex (homeAB, reachedPoint)−1 > −1)\n310\n{\n311\n\
    newPose = getComponent (homeAB,\n312\ngetIndex (homeAB, reachedPoint ) −1);\n\
    313\n314\nreach . point . x = newPose . x ;\n315\nreach . point . y = newPose\
    \ . y ;\n316\nreach . hint = \"home_ab\" ;\n317\nreach . status = false ;\n318\n\
    reach point pub . publish ( reach ) ;\n319\n}\n320\nif ( getIndex (homeAB, reachedPoint)−1\
    \ == −1)\n321\n{\n322\nreach . point . x = hX;\n323\nreach . point . y = hY;\n\
    324\nreach . hint = \"home\" ;\n325\nreach . status = false ;\n326\nreach point\
    \ pub . publish ( reach ) ;\n327\n}\n328\n}\n329\n}\n330\n//robot will be confident\
    \ whenever it finds an unploughed furrow\n331\nelse if\n( ! iAmConfident )\n332\n\
    {\n333\nif ( pointName . compare (\"ab\") == 0)\n334\n{\n335\npose temp = getComponent\
    \ ( furCoordAB , rank −1);\n336\ncheckPoint . request . x = temp . x ;\n337\n\
    checkPoint . request . y = temp . y ;\n338\nif ( a s k r e f e r e n c e . c a\
    \ l l ( checkPoint ))\n339\n{\n340\n//if the requested point is occupied\n341\n\
    if ( checkPoint . response . status == true )\n342\n{\n343\n//update your rank\n\
    344\nrank++;\n345\n//go to the next ploughing target\n346\nnewPose = getComponent\
    \ ( furCoordAB , rank −1);\n233\n347\nreach . point . x = newPose . x ;\n348\n\
    reach . point . y = newPose . y ;\n349\nreach . hint = \"ab\" ;\n350\nreach .\
    \ status = true ;\n351\nreach point pub . publish ( reach ) ;\n352\n}\n353\n//if\
    \ the requested point is not occupied\n354\nelse if ( checkPoint . response .\
    \ status == false )\n355\n{\n356\n//update reference database for the next robot\n\
    357\npose temp = getComponent ( furCoordAB , rank −1);\n358\nupdatePoint . request\
    \ . x = temp . x ;\n359\nupdatePoint . request . y = temp . y ;\n360\nif ( update\
    \ reference . c a l l ( updatePoint ))\n361\n{\n362\n//start ploughing\n363\n\
    newPose = getComponent ( furCoordCD , rank −1);\n364\nreach . point . x = newPose\
    \ . x ;\n365\nreach . point . y = newPose . y ;\n366\nreach . hint = \"cd\" ;\n\
    367\nreach . status = false ;\n368\nreach point pub . publish ( reach ) ;\n369\n\
    iAmConfident = true ;\n370\nploughingRound++;\n371\n}\n372\n}\n373\n}\n374\n}\n\
    375\n}\n376\n}\n377\n378\n//a method to receive the task command\n379\nvoid TaskHandler\
    \ : : taskCmdCallback ( const\n380\np l o u g h i n g r e v e r s i b l e : :\
    \ task : : ConstPtr &msg)\n381\n{\n382\n//loading data to appropriate variables\n\
    383\ntaskCmd = msg−>task ;\n384\nalpha . x = msg−>alpha . x ;\n385\nalpha . y\
    \ = msg−>alpha . y ;\n386\nA. x = msg−>a . x ;\n387\nA. y = msg−>a . y ;\n388\n\
    B. x = msg−>b . x ;\n389\nB. y = msg−>b . y ;\n390\nC. x = msg−>c . x ;\n391\n\
    C. y = msg−>c . y ;\n392\nD. x = msg−>d . x ;\n393\nD. y = msg−>d . y ;\n394\n\
    furDist = msg−>furrow distance ;\n395\nteamSize = msg−>team size ;\n396\n// calculate\
    \ furrow coordinates\n397\nfurCoordAB = furrowLocalizer (A,B, furDist ) ;\n398\n\
    furCoordCD = furrowLocalizer (C,D, furDist ) ;\n399\nfurTotal = furCoordCD . s\
    \ i z e ( ) ;\n400\n//calculating homing coordinates\n401\nC. y = C. y + tranY\
    \ ;\n402\nD. y = D. y + tranY ;\n403\nA. y = A. y − tranY ;\n404\nB. y = B. y\
    \ − tranY ;\n405\nhomeCD = furrowLocalizer (C,D, furDist ) ;\n406\nhomeAB = furrowLocalizer\
    \ (A,B, furDist ) ;\n234\n407\n//Step 1: Go to point alpha\n408\nreach . point\
    \ . x = alpha . x ;\n409\nreach . point . y = alpha . y ;\n410\nreach . hint =\
    \ \"alpha\" ;\n411\nreach . status = false ;\n412\nreach point pub . publish (\
    \ reach ) ;\n413\n}\n414\n415\n//main method\n416\nint main ( int argc ,\nchar∗∗\
    \ argv )\n417\n{\n418\nros : : i n i t ( argc , argv , \"pra1_th\" ) ;\n419\n\
    TaskHandler th ;\n420\nros : : spin ( ) ;\n421\nreturn\n0;\n422\n}\n423\n//a method\
    \ to map the furrow coordinates.\n424\n//it collects all calculated coordinates\
    \ in a list.\n425\nl i s t <pose> furrowLocalizer ( pose\nstart ,\npose end ,\n\
    float\nd i s t )\n426\n{\n427\nl i s t <pose> createdList ;\n428\npose\ncurrentPose\
    \ = s t a r t ;\n429\nwhile ( currentPose . x >= end . x)\n430\n{\n431\n/*\n432\n\
    push_back -> add element at the end, last element.\n433\npush_front -> add element\
    \ to the front, element 0.\n434\n*/\n435\ncreatedList . push back ( currentPose\
    \ ) ;\n436\ncurrentPose . x −= d i s t ;\n437\n}\n438\nreturn\ncreatedList ;\n\
    439\n}\n440\n//a method to get particular component in a given list.\n441\npose\
    \ getComponent ( l i s t <pose>\nl i s t ,\nint\ni ){\n442\nl i s t <pose >::\
    \ i t e r a t o r\ni t =\nl i s t . begin ( ) ;\n443\nfor ( int\ni =0; i< i ;\n\
    i ++){\n444\n++i t ;\n445\n}\n446\nreturn ∗ i t ;\n447\n}\n448\nint getIndex (\
    \ l i s t <pose>\nl i s t ,\npose\npose )\n449\n{\n450\nint index = −1;\n451\n\
    pose temp ;\n452\nfor ( int\ni =0; i< l i s t . s i z e ( ) ;\ni++)\n453\n{\n\
    454\ntemp = getComponent (\nl i s t , i ) ;\n455\nif (temp . x ==\npose . x &&\
    \ temp . y ==\npose . y)\n456\n{\n457\nindex = i ;\n458\n}\n459\n}\n460\nreturn\
    \ index ;\n461\n}\n235\nAppendix I\nC++ Code for Self-organised Task Handler\n\
    1\n#include <ros / ros . h>\n2\n#include <iostream>\n3\n#include <sstream>\n4\n\
    #include <nav msgs/Odometry . h>\n5\n#include <p l o u g h i n g r e v e r s i\
    \ b l e /ReachPoint . h>\n6\n#include <p l o u g h i n g r e v e r s i b l e /\
    \ occupied . h>\n7\n#include <stdio . h>\n/* printf, scanf, puts, NULL */\n8\n\
    #include <s t d l i b . h>\n/* srand, rand */\n9\n#include <time . h>\n/* time\
    \ */\n10\n11\nusing namespace std ;\n12\n13\nint robot id = 0;\n14\ns t r i n\
    \ g\nrobot name ;\n15\nfloat cpX , cpY ;\n16\nbool sysIsReady = false ;\n17\n\
    int p index = 0;\n18\nstruct pose\n19\n{\n20\nfloat x ;\n21\nfloat y ;\n22\n};\n\
    23\n24\n//Method Signitures\n25\nl i s t <pose> furrowLocalizer ( pose\nstart\
    \ ,\npose end ,\nfloat\nd i s t ) ;\n26\npose getComponent ( l i s t <pose>\n\
    l i s t ,\nint\ni ) ;\n27\nint getIndex ( l i s t <pose>\nl i s t ,\npose\npose\
    \ ) ;\n28\nvoid map init ( void ) ;\n29\n//Variables\n30\npose alpha ,A,B,C,D,\n\
    lastKnownPose ,\nnewPose , topAd , bottomAd ,\nleftAd ;\n31\nl i s t <pose> furCoordAB\
    \ ,\nfurCoordCD , homeCD, homeAB;\n32\nfloat furDist ,\nfurTransAB ,\nfurTransCD\
    \ ;\n33\nint furTotal ;\n34\np l o u g h i n g r e v e r s i b l e : : ReachPoint\
    \ reach ;\n35\np l o u g h i n g r e v e r s i b l e : : occupied\ncheckPoint\
    \ , updatePoint ;\n36\n37\nros : : Publisher\nreach point pub ;\n38\n39\n40\n\
    class THClass\n41\n{\n42\npublic :\n43\nTHClass ( ) ;\n44\nprivate :\n45\n//a\
    \ normal node handle for general tasks\n46\nros : : NodeHandle n ;\n236\n47\n\
    ros : : Subscriber\npose sub ;\n48\nros : : Subscriber\nreach point status sub\
    \ ;\n49\n50\nros : : ServiceClient\na s k r e f e r e n c e ;\n51\nros : : ServiceClient\n\
    update reference ;\n52\n53\n54\nvoid reachPointStatusCallback ( const\np l o u\
    \ g h i n g r e v e r s i b l e\n55\n: : ReachPoint : : ConstPtr &reached point\
    \ ) ;\n56\nvoid poseCB( const nav msgs : : Odometry : : ConstPtr &pose ) ;\n57\n\
    };\n58\n59\nTHClass : : THClass ()\n60\n{\n61\n//a private node handle for collecting\
    \ parameters\n62\nros : : NodeHandle nh(\"~\" ) ;\n63\nostringstream\nss ;\n64\n\
    nh . getParam (\"robot_id\" , robot id ) ;\n65\nss << \"robot_\" ;\n66\nss <<\
    \ robot id ;\n67\nrobot name = ss . s t r ( ) ;\n68\ns t r i n g\npose pipename\
    \ = robot name+\"/base_pose_ground_truth\" ;\n69\ns t r i n g\npointreq pipename\
    \ = robot name + \"/requested_point\" ;\n70\ns t r i n g\npointres pointname =\
    \ robot name + \"/reach_point_status\" ;\n71\npose sub = n . subscribe <nav msgs\
    \ : : Odometry>\n72\n( pose pipename ,10 ,& THClass : : poseCB , this ) ;\n73\n\
    reach point status sub = n . subscribe <p l o u g h i n g r e v e r s i b l e\
    \ : : ReachPoint>\n74\n( pointres pointname ,100 ,& THClass : : reachPointStatusCallback\
    \ , this ) ;\n75\nreach point pub = n . advertise <p l o u g h i n g r e v e r\
    \ s i b l e : : ReachPoint>\n76\n( pointreq pipename , 1 0 ) ;\n77\na s k r e\
    \ f e r e n c e = n . serviceClient <p l o u g h i n g r e v e r s i b l e : :\
    \ occupied>\n78\n(\"check_coordinate\" ) ;\n79\nupdate reference = n . serviceClient\
    \ <p l o u g h i n g r e v e r s i b l e : : occupied>\n80\n(\"add_coordinate\"\
    \ ) ;\n81\n}\n82\nvoid THClass : : poseCB( const nav msgs : : Odometry : : ConstPtr\
    \ &pose )\n83\n{\n84\ncpX = pose−>pose . pose . p osi t i on . x ;\n85\ncpY =\
    \ pose−>pose . pose . p osi t i on . y ;\n86\n87\nif ( sysIsReady && reach point\
    \ pub . getNumSubscribers () != 0)\n88\n{\n89\nif (cpX <= C. x && cpY >= C. y)\n\
    90\n{\n91\nreach . point . x = topAd . x ;\n92\nreach . point . y = topAd . y\
    \ ;\n93\nreach . hint = \"ab1-adjust\" ;\n94\nreach . status = false ;\n95\nreach\
    \ point pub . publish ( reach ) ;\n96\n}\n97\nelse if (cpX <= B. x && cpY >= B.\
    \ y && cpY <= D. y)\n98\n{\n99\nreach . point . x = bottomAd . x ;\n100\nreach\
    \ . point . y = bottomAd . y ;\n101\nreach . hint = \"ab1-adjust\" ;\n102\nreach\
    \ . status = false ;\n103\nreach point pub . publish ( reach ) ;\n104\n}\n105\n\
    else\n106\n{\n237\n107\nnewPose = getComponent ( furCoordAB , 0 ) ;\n108\nreach\
    \ . point . x = newPose . x ;\n109\nreach . point . y = newPose . y ;\n110\nreach\
    \ . hint = \"ab1\" ;\n111\nreach . status = false ;\n112\nreach point pub . publish\
    \ ( reach ) ;\n113\n}\n114\nsysIsReady = false ;\n115\n}\n116\n}\n117\n118\nvoid\
    \ THClass : : reachPointStatusCallback\n119\n( const\np l o u g h i n g r e v\
    \ e r s i b l e : : ReachPoint : : ConstPtr &reached point )\n120\n{\n121\ns t\
    \ r i n g\ntarget name = reached point −>hint ;\n122\npose\nreached location ;\n\
    123\nreached location . x = reached point −>point . x ;\n124\nreached location\
    \ . y = reached point −>point . y ;\n125\nif ( target name . compare (\"ab1-left\"\
    ) == 0)\n126\n{\n127\nreach . point . x = bottomAd . x ;\n128\nreach . point .\
    \ y = bottomAd . y ;\n129\nreach . hint = \"ab1-adjust\" ;\n130\nreach . status\
    \ = false ;\n131\nreach point pub . publish ( reach ) ;\n132\n}\n133\nif ( target\
    \ name . compare (\"ab1-adjust\") == 0)\n134\n{\n135\nif ( p index < int ( furTotal\
    \ /2))\n136\n{\n137\npose newPose = getComponent ( furCoordAB , 0 ) ;\n138\nreach\
    \ . point . x = newPose . x ;\n139\nreach . point . y = newPose . y ;\n140\nreach\
    \ . hint = \"ab1\" ;\n141\nreach . status = false ;\n142\nreach point pub . publish\
    \ ( reach ) ;\n143\n}\n144\nelse if ( p index >= int ( furTotal /2))\n145\n{\n\
    146\npose newPose = getComponent ( furCoordAB , p index ) ;\n147\nreach . point\
    \ . x = newPose . x ;\n148\nreach . point . y = newPose . y ;\n149\nreach . hint\
    \ = \"ab-resume\" ;\n150\nreach . status = false ;\n151\nreach point pub . publish\
    \ ( reach ) ;\n152\n}\n153\n}\n154\nif ( target name . compare (\"ab1\") == 0\n\
    | |\n155\ntarget name . compare (\"ab\") == 0\n| |\n156\ntarget name . compare\
    \ (\"ab-resume\") == 0)\n157\n{\n158\npose temp = getComponent ( furCoordAB ,\
    \ p index ) ;\n159\ncheckPoint . request . x = temp . x ;\n160\ncheckPoint . request\
    \ . y = temp . y ;\n161\nif ( p index < furTotal − 1)\n162\n{\n163\nif ( a s k\
    \ r e f e r e n c e . c a l l ( checkPoint ))\n164\n{\n165\n//if the requested\
    \ point is occupied\n166\nif ( checkPoint . response . status == true )\n238\n\
    167\n{\n168\n//go to the next ploughing target\n169\np index = p index + 1;\n\
    170\nnewPose = getComponent ( furCoordAB , p index ) ;\n171\nreach . point . x\
    \ = newPose . x ;\n172\nreach . point . y = newPose . y ;\n173\nreach . hint =\
    \ \"ab\" ;\n174\nreach . status = true ;\n175\nreach point pub . publish ( reach\
    \ ) ;\n176\n}\n177\n//if the requested point is not occupied.\n178\nelse if (\
    \ checkPoint . response . status == false )\n179\n{\n180\n//update reference\n\
    181\npose temp = getComponent ( furCoordAB , p index ) ;\n182\n183\nupdatePoint\
    \ . request . x = temp . x ;\n184\nupdatePoint . request . y = temp . y ;\n185\n\
    if ( update reference . c a l l ( updatePoint ))\n186\n{\n187\n//start plouging\n\
    188\nnewPose = getComponent ( furCoordCD , p index ) ;\n189\nreach . point . x\
    \ = newPose . x ;\n190\nreach . point . y = newPose . y ;\n191\nreach . hint =\
    \ \"cd\" ;\n192\nreach . status = false ;\n193\nreach point pub . publish ( reach\
    \ ) ;\n194\n}\n195\n}\n196\n}\n197\n}\n198\nelse if ( p index >= furTotal −1)\n\
    199\n{\n200\nsrand\n( time (NULL) ) ;\n201\nfloat randx = −1∗rand ()%60+30; //a\
    \ random number between 5 and 15\n202\nusleep (500000);\n203\nsrand\n( time (NULL)\
    \ ) ;\n204\nfloat randy = −1∗(rand ()%30+15); //a random number between -1 and\
    \ 1\n205\n206\n207\nreach . point . x = cpX + randx ;\n208\nreach . point . y\
    \ = cpY + randy ;\n209\nreach . hint = \"done\" ;\n210\nreach . status = false\
    \ ;\n211\nreach point pub . publish ( reach ) ;\n212\n}\n213\n}\n214\nif ( target\
    \ name . compare (\"cd\") == 0)\n215\n{\n216\nif ( getIndex ( furCoordCD , reached\
    \ location ) < furTotal −1)\n217\n{\n218\n//decide which direction is closer\n\
    219\nif ( getIndex ( furCoordCD , reached location ) >= int ( furTotal /2))\n\
    220\n{\n221\nreach . point . x = leftAd . x ;\n222\nreach . point . y = leftAd\
    \ . y ;\n223\nreach . hint = \"ab1-left\" ;\n224\nreach . status = false ;\n225\n\
    reach point pub . publish ( reach ) ;\n226\n}\n239\n227\nelse if ( getIndex (\
    \ furCoordCD , reached location ) < int ( furTotal /2))\n228\n{\n229\nreach .\
    \ point . x = topAd . x ;\n230\nreach . point . y = topAd . y ;\n231\nreach .\
    \ hint = \"ab1-adjust\" ;\n232\nreach . status = false ;\n233\nreach point pub\
    \ . publish ( reach ) ;\n234\n}\n235\n}\n236\nelse\n237\n{\n238\nreach . point\
    \ . x = cpX ;\n239\nreach . point . y = cpY+3.0;\n240\nreach . hint = \"done\"\
    \ ;\n241\nreach . status = false ;\n242\nreach point pub . publish ( reach ) ;\n\
    243\n}\n244\n}\n245\n}\n246\nint main ( int argc ,\nchar ∗∗ argv )\n247\n{\n248\n\
    map init ( ) ;\n249\nros : : i n i t ( argc , argv , \"task_handler\" ) ;\n250\n\
    THClass th ;\n251\nsleep ( 3 ) ;\n252\nsysIsReady = true ;\n253\n254\nros : :\
    \ spin ( ) ;\n255\nreturn\n0;\n256\n}\n257\n//a method to map the furrow coordinates.\n\
    258\n//it collects all calculated coordinates in a list.\n259\nl i s t <pose>\
    \ furrowLocalizer ( pose\nstart ,\npose end ,\nfloat\nd i s t )\n260\n{\n261\n\
    l i s t <pose> createdList ;\n262\npose\ncurrentPose = s t a r t ;\n263\nwhile\
    \ ( currentPose . x >= end . x)\n264\n{\n265\n/*\n266\npush_back -> add element\
    \ at the end, last element.\n267\npush_front -> add element to the front, element\
    \ 0.\n268\n*/\n269\ncreatedList . push back ( currentPose ) ;\n270\ncurrentPose\
    \ . x −= d i s t ;\n271\n}\n272\nreturn\ncreatedList ;\n273\n}\n274\n//a method\
    \ to get particular component in a given list.\n275\npose getComponent ( l i s\
    \ t <pose>\nl i s t ,\nint\ni ){\n276\nl i s t <pose >:: i t e r a t o r\ni t\
    \ =\nl i s t . begin ( ) ;\n277\nfor ( int\ni =0; i< i ;\ni ++){\n278\n++i t ;\n\
    279\n}\n280\nreturn ∗ i t ;\n281\n}\n282\nint getIndex ( l i s t <pose>\nl i s\
    \ t ,\npose\npose )\n283\n{\n284\nint index = −1;\n285\npose temp ;\n286\nfor\
    \ ( int\ni =0; i< l i s t . s i z e ( ) ;\ni++)\n240\n287\n{\n288\ntemp = getComponent\
    \ (\nl i s t , i ) ;\n289\nif (temp . x ==\npose . x && temp . y ==\npose . y)\n\
    290\n{\n291\nindex = i ;\n292\n}\n293\n}\n294\nreturn index ;\n295\n}\n296\nvoid\
    \ map init ( void )\n297\n{\n298\nA. x = 1 0 . 0 ;\n299\nA. y = −13.0;\n300\n\
    B. x = −10.0;\n301\nB. y = −13.0;\n302\nC. x = 1 0 . 0 ;\n303\nC. y = 1 3 . 0\
    \ ;\n304\nD. x = −10.0;\n305\nD. y = 1 3 . 0 ;\n306\nbottomAd . x = B. x − 5 .\
    \ 0 ;\n307\nbottomAd . y = B. y − 5 . 0 ;\n308\ntopAd . x = C. x + 5 . 0 ;\n309\n\
    topAd . y = C. y + 1 . 0 ;\n310\nleftAd . x = D. x − 6 . 0 ;\n311\nleftAd . y\
    \ = D. y + 1 . 0 ;\n312\nfurDist = 0 . 4 ;\n313\nfurTransAB = 4 . 0 ;\n314\nfurTransCD\
    \ = 4 . 0 ;\n315\n// calculate furrow coordinates\n316\nfurCoordAB = furrowLocalizer\
    \ (A,B, furDist ) ;\n317\nfurCoordCD = furrowLocalizer (C,D, furDist ) ;\n318\n\
    furTotal = furCoordCD . s i z e ( ) ;\n319\n//calculating homing coordinates\n\
    320\nC. y = C. y + furTransCD ;\n321\nD. y = D. y + furTransCD ;\n322\nA. y =\
    \ A. y − furTransAB ;\n323\nB. y = B. y − furTransAB ;\n324\nhomeCD = furrowLocalizer\
    \ (C,D, furDist ) ;\n325\nhomeAB = furrowLocalizer (A,B, furDist ) ;\n326\n327\n\
    }\n241\nAppendix J\nC++ Code for Region-based Task Handler Using ROS\n1\n#include\
    \ <ros / ros . h>\n2\n#include <p l o u g h i n g r e v e r s i b l e / task .\
    \ h>\n3\n#include <p l o u g h i n g r e v e r s i b l e /ReachPoint . h>\n4\n\
    #include <p l o u g h i n g r e v e r s i b l e / occupied . h>\n5\n#include <nav\
    \ msgs/Odometry . h>\n6\n#include <string >\n7\n#include <std msgs /Bool . h>\n\
    8\n#include <stdio . h>\n9\n#include <iostream>\n10\n#include <math . h>\n11\n\
    12\n#define hX 14.0000\n13\n#define hY 9.0000\n14\n#define tranX 0.8\n15\n#define\
    \ tranY 3.0\n16\n#define PI 3.14159265\n17\n18\nusing namespace std ;\n19\n20\n\
    struct pose\n21\n{\n22\nfloat x ;\n23\nfloat y ;\n24\n};\n25\n26\n//Method Signitures\n\
    27\nl i s t <pose> furrowLocalizer ( pose\nstart ,\npose end ,\nfloat\nd i s t\
    \ ) ;\n28\npose getComponent ( l i s t <pose>\nl i s t ,\nint\ni ) ;\n29\nint\
    \ getIndex ( l i s t <pose>\nl i s t ,\npose\npose ) ;\n30\n//Variables\n31\n\
    pose alpha ,A,B,C,D,\n32\nnextPose ,\nbeta ,\n33\ngama ,\npsi ,\nrho ,\n34\ncurrentPose\
    \ ;\n35\nl i s t <pose> furCoordAB ,\nfurCoordCD , homeCD, homeAB;\n36\nfloat\
    \ furDist ,\nfurTransAB ,\nfurTransCD ;\n37\ns t r i n g taskCmd=\"\" , pointName=\"\
    \" ;\n38\nint teamSize=0,\n39\nrank=1,\n40\nfurTotal ,\n41\nploughingTurn = 0\
    \ ,\n42\nploughingRound = 0;\n43\nbool taskIsCompleted = false ,\n44\ntargetIsReached\
    \ = false ,\n45\niAmConfident = false ,\n46\npathIsCleared = false ,\n242\n47\n\
    targetIsOccupied = false ;\n48\np l o u g h i n g r e v e r s i b l e : : ReachPoint\
    \ reach ;\n49\np l o u g h i n g r e v e r s i b l e : : occupied\ncheckPoint\
    \ , updatePoint ;\n50\nstd msgs : : Bool imageRes ;\n51\n/*A vector based integer\
    \ for regions with at least 3 memebers.\n52\ninitially the values are set to zero*/\n\
    53\nvector<int> region ( 3 ) ;\n54\n/*A vector based integer for starting furNum\
    \ of each furrow*/\n55\nvector<int> furNum ( 3 ) ;\n56\n/*A vector based pose\
    \ for start point of the each region.\n57\nIt is only on AB side as robots all\
    \ goes to here first.*/\n58\nvector<pose> regPoint ( 3 ) ;\n59\n//An integer to\
    \ count the regions\n60\nint regionCounter = 0;\n61\n//An integer to count number\
    \ of processed tracks\n62\nint numOfProcessedTracks = 0;\n63\nclass TaskHandler\n\
    64\n{\n65\npublic :\n66\nTaskHandler ( ) ;\n67\nprivate :\n68\nros : : NodeHandle\
    \ nh ;\n69\nros : : Subscriber\ntask cmd sub ;\n70\nros : : Subscriber\nreach\
    \ point status sub ;\n71\nros : : Subscriber\nimg sub ;\n72\nros : : Subscriber\n\
    pose sub ;\n73\n74\n75\nros : : Publisher\nreach point pub ;\n76\nros : : ServiceClient\n\
    a s k r e f e r e n c e ;\n77\nros : : ServiceClient\nupdate reference ;\n78\n\
    79\nvoid taskCmdCallback\n80\n( const\np l o u g h i n g r e v e r s i b l e :\
    \ : task : : ConstPtr &msg ) ;\n81\nvoid reachPointStatusCallback\n82\n( const\n\
    p l o u g h i n g r e v e r s i b l e : : ReachPoint : : ConstPtr &status ) ;\n\
    83\nvoid imgCB( const std msgs : : Bool : : ConstPtr &imgStatus ) ;\n84\nvoid\
    \ poseCB( const nav msgs : : Odometry : : ConstPtr &pose ) ;\n85\n};\n86\n//Class\
    \ Constructor\n87\nTaskHandler : : TaskHandler ()\n88\n{\n89\ntask cmd sub = nh\
    \ . subscribe <p l o u g h i n g r e v e r s i b l e : : task>\n90\n(\"task_cmd\"\
    \ ,5 ,& TaskHandler : : taskCmdCallback , this ) ;\n91\n92\nreach point status\
    \ sub = nh . subscribe <p l o u g h i n g r e v e r s i b l e : :\n93\nReachPoint\
    \ >(\"p1/reach_point_status\" ,100 ,& TaskHandler : :\n94\nreachPointStatusCallback\
    \ , this ) ;\n95\n96\nreach point pub = nh . advertise <p l o u g h i n g r e\
    \ v e r s i b l e : : ReachPoint>\n97\n(\"p1/requested_point\" , 1 0) ;\n98\n\
    99\na s k r e f e r e n c e = nh . serviceClient <p l o u g h i n g r e v e r\
    \ s i b l e : : occupied>\n100\n(\"check_coordinate\" ) ;\n101\nupdate reference\
    \ = nh . serviceClient <p l o u g h i n g r e v e r s i b l e : : occupied>\n\
    102\n(\"add_coordinate\" ) ;\n103\n104\nimg sub = nh . subscribe <std msgs : :\
    \ Bool>\n105\n(\"r1_img_response\" ,10 ,& TaskHandler : : imgCB, this ) ;\n106\n\
    243\n107\npose sub = nh . subscribe <nav msgs : : Odometry>\n108\n(\"robot_0/base_pose_ground_truth\"\
    \ ,10 ,& TaskHandler : : poseCB , this ) ;\n109\n}\n110\n111\n//a method to receive\
    \ the staus of reach point.\n112\nvoid TaskHandler : : reachPointStatusCallback\n\
    113\n( const\np l o u g h i n g r e v e r s i b l e : : ReachPoint : : ConstPtr\
    \ &status )\n114\n{\n115\npointName = status −>hint ;\n116\npose newPose ;\n117\n\
    //Step 2-1: go to the first region\n118\nif ( pointName . compare (\"alpha\")\
    \ == 0)\n119\n{\n120\n//go to first coordinate in AB set for regions.\n121\nnewPose\
    \ = regPoint [ regionCounter ] ;\n122\nreach . point . x = newPose . x ;\n123\n\
    //keep your distance from start line until\n124\n//you are certain that no one\
    \ is in the space.\n125\nreach . point . y = newPose . y−tranY ;\n126\nreach .\
    \ hint = \"ab_reg\" ;\n127\nreach . status = false ;\n128\nreach point pub . publish\
    \ ( reach ) ;\n129\niAmConfident = false ;\n130\n}\n131\nif ( iAmConfident )\n\
    132\n{\n133\nif ( status −>hint . compare (\"ab_start\") == 0)\n134\n{\n135\n\
    pose newPose = getComponent ( furCoordCD ,\n136\ngetIndex ( furCoordAB , regPoint\
    \ [ regionCounter ] ) ) ;\n137\n138\nreach . point . x = newPose . x ;\n139\n\
    reach . point . y = newPose . y ;\n140\nreach . hint = \"cd\" ;\n141\nreach .\
    \ status = false ;\n142\nreach point pub . publish ( reach ) ;\n143\nnumOfProcessedTracks++;\n\
    144\n}\n145\nif ( status −>hint . compare (\"cd\") == 0)\n146\n{\n147\n//If number\
    \ of processed tracks is smaller than\n148\n//number of tracks in your region\
    \ then transit your track\n149\nif ( numOfProcessedTracks <= region [ regionCounter\
    \ ] −1)\n150\n{\n151\npose\nreachedPoint ;\n152\nreachedPoint . x = status −>point\
    \ . x ;\n153\nreachedPoint . y = status −>point . y ;\n154\nnewPose = getComponent\
    \ ( furCoordCD ,\n155\ngetIndex ( furCoordCD , reachedPoint ) −1);\n156\n157\n\
    reach . point . x = newPose . x ;\n158\nreach . point . y = newPose . y ;\n159\n\
    reach . hint = \"cd_stage1\" ;\n160\nreach . status = false ;\n161\nreach point\
    \ pub . publish ( reach ) ;\n162\n}\n163\n//If number of processed tracks is bigger\
    \ than\n164\n//available tracks in that region then go home\n165\nelse if ( numOfProcessedTracks\
    \ > region [ regionCounter ] −1)\n166\n{\n244\n167\nif ( rank == 1)\n168\n{\n\
    169\npose newPose ;\n170\nnewPose . x = hX;\n171\nnewPose . y = hY;\n172\nreach\
    \ . point . x = newPose . x ;\n173\nreach . point . y = newPose . y ;\n174\nreach\
    \ . hint = \"home\" ;\n175\nreach . status = false ;\n176\nreach point pub . publish\
    \ ( reach ) ;\n177\n}\n178\nelse if ( rank != 1)\n179\n{\n180\npose\nreachedPoint\
    \ ;\n181\nreachedPoint . x = status −>point . x ;\n182\nreachedPoint . y = status\
    \ −>point . y ;\n183\nnewPose = getComponent (homeCD,\n184\ngetIndex (homeCD,\
    \ reachedPoint ) −1);\n185\n186\nreach . point . x = newPose . x ;\n187\nreach\
    \ . point . y = newPose . y ;\n188\nreach . hint = \"home_cd\" ;\n189\nreach .\
    \ status = false ;\n190\nreach point pub . publish ( reach ) ;\n191\n}\n192\n\
    }\n193\n}\n194\n195\nif ( status −>hint . compare (\"cd_stage1\") == 0)\n196\n\
    {\n197\n//No checking is required as you are sure\n198\n//that next round is still\
    \ available\n199\npose\nreachedPoint ;\n200\nreachedPoint . x = status −>point\
    \ . x ;\n201\nreachedPoint . y = status −>point . y ;\n202\nnewPose = getComponent\
    \ ( furCoordAB ,\n203\ngetIndex ( furCoordCD , reachedPoint ) ) ;\n204\n205\n\
    reach . point . x = newPose . x ;\n206\nreach . point . y = newPose . y ;\n207\n\
    reach . hint = \"ab\" ;\n208\nreach . status = false ;\n209\nreach point pub .\
    \ publish ( reach ) ;\n210\nnumOfProcessedTracks++;\n211\n}\n212\nif ( status\
    \ −>hint . compare (\"ab\") == 0)\n213\n{\n214\n//If number of processed tracks\
    \ is smaller than number\n215\n//of tracks in your region then transit your track\n\
    216\nif ( numOfProcessedTracks <= region [ regionCounter ] −1)\n217\n{\n218\n\
    pose\nreachedPoint ;\n219\nreachedPoint . x = status −>point . x ;\n220\nreachedPoint\
    \ . y = status −>point . y ;\n221\nnewPose = getComponent ( furCoordAB ,\n222\n\
    getIndex ( furCoordAB , reachedPoint ) −1);\n223\n224\nreach . point . x = newPose\
    \ . x ;\n225\nreach . point . y = newPose . y ;\n226\nreach . hint = \"ab_stage1\"\
    \ ;\n245\n227\nreach . status = false ;\n228\nreach point pub . publish ( reach\
    \ ) ;\n229\n}\n230\n//If number of processed tracks is bigger than\n231\n//available\
    \ tracks in that region then go home\n232\nelse if ( numOfProcessedTracks > region\
    \ [ regionCounter ] −1)\n233\n{\n234\nif ( rank == 1)\n235\n{\n236\npose newPose\
    \ ;\n237\nnewPose . x = hX;\n238\nnewPose . y = hY;\n239\nreach . point . x =\
    \ newPose . x ;\n240\nreach . point . y = newPose . y ;\n241\nreach . hint = \"\
    home\" ;\n242\nreach . status = false ;\n243\nreach point pub . publish ( reach\
    \ ) ;\n244\n}\n245\nelse if ( rank != 1)\n246\n{\n247\npose\nreachedPoint ;\n\
    248\nreachedPoint . x = status −>point . x ;\n249\nreachedPoint . y = status −>point\
    \ . y ;\n250\nnewPose = getComponent (homeAB,\n251\ngetIndex (homeAB, reachedPoint\
    \ ) −1);\n252\n253\nreach . point . x = newPose . x ;\n254\nreach . point . y\
    \ = newPose . y ;\n255\nreach . hint = \"home_ab\" ;\n256\nreach . status = false\
    \ ;\n257\nreach point pub . publish ( reach ) ;\n258\n}\n259\n}\n260\n}\n261\n\
    262\nif ( status −>hint . compare (\"ab_stage1\") == 0)\n263\n{\n264\n//No checking\
    \ is required as you are\n265\n//sure that next round is still available\n266\n\
    pose\nreachedPoint ;\n267\nreachedPoint . x = status −>point . x ;\n268\nreachedPoint\
    \ . y = status −>point . y ;\n269\nnewPose = getComponent ( furCoordCD ,\n270\n\
    getIndex ( furCoordAB , reachedPoint ) ) ;\n271\n272\nreach . point . x = newPose\
    \ . x ;\n273\nreach . point . y = newPose . y ;\n274\nreach . hint = \"cd\" ;\n\
    275\nreach . status = false ;\n276\nreach point pub . publish ( reach ) ;\n277\n\
    numOfProcessedTracks++;\n278\n}\n279\n//Going back to home position through cd\
    \ sideline\n280\nif ( status −>hint . compare (\"home_cd\") == 0)\n281\n{\n282\n\
    pose\nreachedPoint ;\n283\nreachedPoint . x = status −>point . x ;\n284\nreachedPoint\
    \ . y = status −>point . y ;\n285\nif ( getIndex (homeCD, reachedPoint)−1 > −1)\n\
    286\n{\n246\n287\nnewPose = getComponent (homeCD,\n288\ngetIndex (homeCD, reachedPoint\
    \ ) −1);\n289\n290\nreach . point . x = newPose . x ;\n291\nreach . point . y\
    \ = newPose . y ;\n292\nreach . hint = \"home_cd\" ;\n293\nreach . status = false\
    \ ;\n294\nreach point pub . publish ( reach ) ;\n295\n}\n296\nif ( getIndex (homeCD,\
    \ reachedPoint)−1 == −1)\n297\n{\n298\nreach . point . x = hX;\n299\nreach . point\
    \ . y = hY;\n300\nreach . hint = \"home\" ;\n301\nreach . status = false ;\n302\n\
    reach point pub . publish ( reach ) ;\n303\n}\n304\n}\n305\n//Going back to home\
    \ position through ab sideline\n306\nif ( status −>hint . compare (\"home_ab\"\
    ) == 0)\n307\n{\n308\npose\nreachedPoint ;\n309\nreachedPoint . x = status −>point\
    \ . x ;\n310\nreachedPoint . y = status −>point . y ;\n311\nif ( getIndex (homeAB,\
    \ reachedPoint)−1 > −1)\n312\n{\n313\nnewPose = getComponent (homeAB,\n314\ngetIndex\
    \ (homeAB, reachedPoint ) −1);\n315\n316\nreach . point . x = newPose . x ;\n\
    317\nreach . point . y = newPose . y ;\n318\nreach . hint = \"home_ab\" ;\n319\n\
    reach . status = false ;\n320\nreach point pub . publish ( reach ) ;\n321\n}\n\
    322\nif ( getIndex (homeAB, reachedPoint)−1 == −1)\n323\n{\n324\nreach . point\
    \ . x = hX;\n325\nreach . point . y = hY;\n326\nreach . hint = \"home\" ;\n327\n\
    reach . status = false ;\n328\nreach point pub . publish ( reach ) ;\n329\n}\n\
    330\n}\n331\n}\n332\n//robot will be confident whenever it finds an unploughed\
    \ furrow\n333\nelse if\n( ! iAmConfident )\n334\n{\n335\n//Step 1: Find your location\
    \ respect to alpha\n336\nfloat regAngle = atan2 ( currentPose . y−alpha . y ,\n\
    337\ncurrentPose . x−alpha . x)∗180/ PI ;\n338\n339\nif ( pointName . compare\
    \ (\"beta\") == 0\n| |\n340\npointName . compare (\"psi\") == 0)\n341\n342\n{\n\
    343\nreach . point . x = alpha . x ;\n344\nreach . point . y = alpha . y ;\n345\n\
    reach . hint = \"alpha\" ;\n346\nreach . status = false ;\n247\n347\nreach point\
    \ pub . publish ( reach ) ;\n348\n}\n349\nelse if ( pointName . compare (\"rho\"\
    ) == 0)\n350\n{\n351\nreach . point . x = gama . x ;\n352\nreach . point . y =\
    \ gama . y ;\n353\nreach . hint = \"gama\" ;\n354\nreach . status = false ;\n\
    355\nreach point pub . publish ( reach ) ;\n356\n}\n357\nelse if ( pointName .\
    \ compare (\"gama\") == 0)\n358\n{\n359\nreach . point . x = beta . x ;\n360\n\
    reach . point . y = beta . y ;\n361\nreach . hint = \"beta\" ;\n362\nreach . status\
    \ = false ;\n363\nreach point pub . publish ( reach ) ;\n364\n}\n365\n366\n367\n\
    if ( pointName . compare (\"ab_reg\") == 0)\n368\n{\n369\n//if the requested point\
    \ is occupied\n370\nif ( targetIsOccupied )\n371\n{\n372\n//update your rank\n\
    373\nrank++;\n374\nregionCounter++;\n375\n//go to the next ploughing target\n\
    376\nnewPose = regPoint [ regionCounter ] ;\n377\nreach . point . x = newPose\
    \ . x ;\n378\nreach . point . y = newPose . y−tranY ;\n379\nreach . hint = \"\
    ab_reg\" ;\n380\nreach . status = true ;\n381\nreach point pub . publish ( reach\
    \ ) ;\n382\n}\n383\n//if the requested point is not occupied\n384\nelse if\n(\
    \ ! targetIsOccupied )\n385\n{\n386\n//start ploughing\n387\npose newPose = getComponent\
    \ ( furCoordAB , getIndex\n388\n( furCoordAB , regPoint [ regionCounter ] ) )\
    \ ;\n389\nreach . point . x = newPose . x ;\n390\nreach . point . y = newPose\
    \ . y ;\n391\nif ( rank == teamSize )\n392\n{\n393\nreach . hint = \"ab_start\"\
    \ ;\n394\n}\n395\nelse if ( rank != teamSize )\n396\n{\n397\nreach . hint = \"\
    ab_conf\" ;\n398\n}\n399\nreach . status = false ;\n400\nreach point pub . publish\
    \ ( reach ) ;\n401\niAmConfident = true ;\n402\n}\n403\n}\n404\n}\n405\n}\n406\n\
    248\n407\nvoid TaskHandler : : imgCB( const std msgs : : Bool : : ConstPtr &imgStatus\
    \ )\n408\n{\n409\ntargetIsOccupied = imgStatus−>data ;\n410\n}\n411\n//a method\
    \ to receive the task command\n412\nvoid TaskHandler : : taskCmdCallback\n413\n\
    ( const\np l o u g h i n g r e v e r s i b l e : : task : : ConstPtr &msg)\n414\n\
    {\n415\n//loading data to appropriate variables\n416\ntaskCmd = msg−>task ;\n\
    417\nalpha . x = msg−>alpha . x ;\n418\nalpha . y = msg−>alpha . y ;\n419\nbeta\
    \ . x = msg−>beta . x ;\n420\nbeta . y = msg−>beta . y ;\n421\ngama . x = msg−>gamma.\
    \ x ;\n422\ngama . y = msg−>gamma. y ;\n423\npsi . x = msg−>psi . x ;\n424\npsi\
    \ . y = msg−>psi . y ;\n425\nrho . x = msg−>rho . x ;\n426\nrho . y = msg−>rho\
    \ . y ;\n427\nA. x = msg−>a . x ;\n428\nA. y = msg−>a . y ;\n429\nB. x = msg−>b\
    \ . x ;\n430\nB. y = msg−>b . y ;\n431\nC. x = msg−>c . x ;\n432\nC. y = msg−>c\
    \ . y ;\n433\nD. x = msg−>d . x ;\n434\nD. y = msg−>d . y ;\n435\nfurDist = msg−>furrow\
    \ distance ;\n436\nteamSize = msg−>team size ;\n437\n// calculate furrow coordinates\n\
    438\nfurCoordAB = furrowLocalizer (A,B, furDist ) ;\n439\nfurCoordCD = furrowLocalizer\
    \ (C,D, furDist ) ;\n440\nfurTotal = furCoordCD . s i z e ( ) ;\n441\n//calculating\
    \ homing coordinates\n442\nC. y = C. y + tranY ;\n443\nD. y = D. y + tranY ;\n\
    444\nA. y = A. y − tranY ;\n445\nB. y = B. y − tranY ;\n446\nhomeCD = furrowLocalizer\
    \ (C,D, furDist ) ;\n447\nhomeAB = furrowLocalizer (A,B, furDist ) ;\n448\n//Region\
    \ Division\n449\n//First resize \"region\" and \"regPoint\" and\n450\n//\"furNum\"\
    \ vector to suit the team size.\n451\nregion . r e s i z e ( teamSize ) ;\n452\n\
    regPoint . r e s i z e ( teamSize ) ;\n453\nfurNum . r e s i z e ( teamSize )\
    \ ;\n454\n//Then allocate number of tracks to each region.\n455\n//Vectors count\
    \ from 0 therefore teamsize -1.\n456\nfor ( int\ni =0; i<=teamSize −1; i++)\n\
    457\n{\n458\nregion [ i ] = f l o o r ( furTotal / teamSize ) ;\n459\nif ( furTotal%teamSize\
    \ > i )\n460\n{\n461\nregion [ i ]++;\n462\n}\n463\nfurNum [ i ] = furNum [ i\
    \ −1]+region [ i ] ;\n464\nregPoint [ i ] = getComponent ( furCoordAB , furNum\
    \ [ i ] −1);\n465\n}\n466\n//Step 1: Find your location respect to alpha\n249\n\
    467\n468\nfloat regAngle = atan2 ( currentPose . y−alpha . y ,\n469\ncurrentPose\
    \ . x−alpha . x)∗180/ PI ;\n470\n471\nif ( regAngle>= −1 && regAngle <= 90.0)\n\
    472\n{\n473\nreach . point . x = alpha . x ;\n474\nreach . point . y = alpha .\
    \ y ;\n475\nreach . hint = \"alpha\" ;\n476\nreach . status = false ;\n477\nreach\
    \ point pub . publish ( reach ) ;\n478\n}\n479\nelse if ( regAngle> 90.0 && regAngle\
    \ <= 179.0)\n480\n{\n481\n//Check if you are above D.y or below D.y\n482\nif (\
    \ currentPose . y >= D. y)\n483\n{\n484\nreach . point . x = psi . x ;\n485\n\
    reach . point . y = psi . y ;\n486\nreach . hint = \"psi\" ;\n487\nreach . status\
    \ = false ;\n488\nreach point pub . publish ( reach ) ;\n489\n}\n490\nif ( currentPose\
    \ . y < D. y)\n491\n{\n492\nreach . point . x = rho . x ;\n493\nreach . point\
    \ . y = rho . y ;\n494\nreach . hint = \"rho\" ;\n495\nreach . status = false\
    \ ;\n496\nreach point pub . publish ( reach ) ;\n497\n}\n498\n499\n}\n500\nelse\
    \ if ( regAngle < −1 && regAngle >= −90.0)\n501\n{\n502\nreach . point . x = beta\
    \ . x ;\n503\nreach . point . y = beta . y ;\n504\nreach . hint = \"beta\" ;\n\
    505\nreach . status = false ;\n506\nreach point pub . publish ( reach ) ;\n507\n\
    }\n508\nelse if ( regAngle < −90.0 && regAngle >= −179.0)\n509\n{\n510\nreach\
    \ . point . x = gama . x ;\n511\nreach . point . y = gama . y ;\n512\nreach .\
    \ hint = \"gama\" ;\n513\nreach . status = false ;\n514\nreach point pub . publish\
    \ ( reach ) ;\n515\n}\n516\n//Step 2: approach the selected location\n517\n518\n\
    }\n519\nvoid TaskHandler : : poseCB( const nav msgs : : Odometry : : ConstPtr\
    \ &pose )\n520\n{\n521\ncurrentPose . x = pose−>pose . pose . p osi t i on . x\
    \ ;\n522\ncurrentPose . y = pose−>pose . pose . p osi t i on . y ;\n523\n}\n524\n\
    //main method\n525\nint main ( int argc ,\nchar∗∗ argv )\n526\n{\n250\n527\nros\
    \ : : i n i t ( argc , argv , \"s1_th\" ) ;\n528\nTaskHandler th ;\n529\nros :\
    \ : spin ( ) ;\n530\nreturn\n0;\n531\n}\n532\n//a method to map the furrow coordinates.\n\
    533\n//it collects all calculated coordinates in a list.\n534\nl i s t <pose>\
    \ furrowLocalizer ( pose\nstart ,\npose end ,\nfloat\nd i s t )\n535\n{\n536\n\
    l i s t <pose> createdList ;\n537\npose\ncurrentPose = s t a r t ;\n538\nwhile\
    \ ( currentPose . x >= end . x)\n539\n{\n540\n/*\n541\npush_back -> add element\
    \ at the end, last element.\n542\npush_front -> add element to the front, element\
    \ 0.\n543\n*/\n544\ncreatedList . push back ( currentPose ) ;\n545\ncurrentPose\
    \ . x −= d i s t ;\n546\n}\n547\nreturn\ncreatedList ;\n548\n}\n549\n//a method\
    \ to get particular component in a given list.\n550\npose getComponent ( l i s\
    \ t <pose>\nl i s t ,\nint\ni ){\n551\nl i s t <pose >:: i t e r a t o r\ni t\
    \ =\nl i s t . begin ( ) ;\n552\nfor ( int\ni =0; i< i ;\ni ++){\n553\n++i t ;\n\
    554\n}\n555\nreturn ∗ i t ;\n556\n}\n557\nint getIndex ( l i s t <pose>\nl i s\
    \ t ,\npose\npose )\n558\n{\n559\nint index = −1;\n560\npose temp ;\n561\nfor\
    \ ( int\ni =0; i< l i s t . s i z e ( ) ;\ni++)\n562\n{\n563\ntemp = getComponent\
    \ (\nl i s t , i ) ;\n564\nif (temp . x ==\npose . x && temp . y ==\npose . y)\n\
    565\n{\n566\nindex = i ;\n567\n}\n568\n}\n569\nreturn index ;\n570\n}\n251\nAppendix\
    \ K\nC++ Code for Reach Point Using ROS\n1\n#include <ros / ros . h>\n2\n#include\
    \ <t f / t f . h>\n3\n#include <sensor msgs /LaserScan . h>\n4\n#include <p l\
    \ o u g h i n g r e v e r s i b l e /ReachPoint . h>\n5\n#include <nav msgs/Odometry\
    \ . h>\n6\n#include <geometry msgs/Twist . h>\n7\n#include <geometry msgs/Quaternion\
    \ . h>\n8\n#include <string >\n9\n#include <pthread . h>\n10\n#include <math .\
    \ h>\n11\n#include <sstream>\n12\n#include <s t d l i b . h>\n/* srand, rand */\n\
    13\n#include <time . h>\n14\n15\n16\n#define PI 3.14159265359\n17\n#define Rad2Deg\
    \ 57.2957795\n18\n#define Deg2Rad 0.0174532925\n19\n#define PITCH 0.3522504892367\n\
    20\n#define DistanceTh\n0.2\n21\n#define DistanceCrt\n1.5\n22\n#define DistanceCrtTwo\n\
    0.5\n23\n#define MaxVel 0.5\n24\n#define AlgorithmEffectDistance\n5.5\n25\n26\n\
    using namespace std ;\n27\n28\nstruct\nf o r c e\n29\n{\n30\nfloat mag ;\n31\n\
    float theta ;\n32\nfloat x ;\n33\nfloat y ;\n34\n};\n35\n36\nstruct pose\n37\n\
    {\n38\nfloat x ;\n39\nfloat y ;\n40\ndouble theta ;\n41\n};\n42\nstruct mapMem\n\
    43\n{\n44\nfloat Rx;\n45\nfloat Ry;\n46\nfloat Ox;\n252\n47\nfloat Oy;\n48\nint\
    \ time ;\n49\nfloat\nl r ;\n50\nfloat\nlr ang ;\n51\nfloat\nl r x ;\n52\nfloat\n\
    l r y ;\n53\n};\n54\nmapMem fmm old ;\n55\nint fjcount = 0;\n56\nfloat fjmean=\
    \ 0 . 0 ;\n57\npose\ncurrent ,\nab [ 1 0 ] ;\n58\n59\nvoid stop ( void ) ;\n60\n\
    void ∗move( void∗ threadID ) ;\n61\ngeometry msgs : : Twist\nvel ;\n62\np l o\
    \ u g h i n g r e v e r s i b l e : : ReachPoint\ntarget , reqPoint ,\nprevPoint\
    \ ;\n63\npose\ncurrentGlobal ,\nrequestedTarget ;\n64\nbool targetIsReached =\
    \ false ,\nheadingIsCorrected = false ;\n65\npthread t moveThHandler ;\n66\ns\
    \ t r i n g\nprocPointHint=\"\" ;\n67\nint robot id = 0;\n68\nfloat dl = 0.5 ,\n\
    df = 3.0 ,\ndr = 1 . 5 ;\n69\nfloat reversCoef = 1 . 0 ;\n70\nros : : Publisher\n\
    vel pub ;\n71\nros : : Publisher\ntarget status pub ;\n72\n73\n74\nclass ReachPoint\n\
    75\n{\n76\npublic :\n77\nReachPoint ( ) ;\n78\nprivate :\n79\nros : : NodeHandle\
    \ nh ;\n80\nros : : Subscriber\ntarget sub ;\n81\nros : : Subscriber\nl a s e\
    \ r s u b ;\n82\nros : : Subscriber\nworld pose sub ;\n83\n84\nvoid laserCallBack\
    \ ( const sensor msgs : :\n85\nLaserScan : : ConstPtr &scan ) ;\n86\n87\nvoid\
    \ worldPoseCallback ( const nav msgs : :\n88\nOdometry : : ConstPtr &world pose\
    \ ) ;\n89\n90\nvoid targetCallback ( const\np l o u g h i n g r e v e r s i b\
    \ l e : :\n91\nReachPoint : : ConstPtr &target ) ;\n92\n};\n93\n94\nReachPoint\
    \ : : ReachPoint ()\n95\n{\n96\nros : : NodeHandle n(\"~\" ) ;\n97\nn . getParam\
    \ (\"robot_id\" , robot id ) ;\n98\nostringstream\nss ;\n99\nss << \"robot_\"\
    \ ;\n100\nss << robot id ;\n101\n102\ns t r i n g\nrobot name = ss . s t r ( )\
    \ ;\n103\ns t r i n g\nlaser pipename = robot name + \"/base_scan\" ;\n104\ns\
    \ t r i n g\npose pipename = robot name + \"/base_pose_ground_truth\" ;\n105\n\
    s t r i n g\ntwist pipename = robot name + \"/cmd_vel\" ;\n106\ns t r i n g\n\
    pointreq pipename = robot name + \"/requested_point\" ;\n253\n107\ns t r i n g\n\
    pointres pointname = robot name + \"/reach_point_status\" ;\n108\n109\ntarget\
    \ sub = nh . subscribe <p l o u g h i n g r e v e r s i b l e : : ReachPoint>\n\
    110\n( pointreq pipename ,5 ,& ReachPoint : : targetCallback , this ) ;\n111\n\
    112\nl a s e r s u b = nh . subscribe <sensor msgs : : LaserScan>\n113\n( laser\
    \ pipename ,5 ,& ReachPoint : : laserCallBack , this ) ;\n114\n115\nworld pose\
    \ sub = nh . subscribe <nav msgs : : Odometry>\n116\n( pose pipename ,5 ,& ReachPoint\
    \ : : worldPoseCallback , this ) ;\n117\n118\nvel pub = nh . advertise <geometry\
    \ msgs : : Twist>\n119\n( twist pipename , 1 ) ;\n120\n121\ntarget status pub\
    \ = nh . advertise <p l o u g h i n g r e v e r s i b l e : : ReachPoint>\n122\n\
    ( pointres pointname , 5 ) ;\n123\n124\nfor ( int\ni =0; i <=9; i++)\n125\n{\n\
    126\nab [ i ] . x = 10 − AlgorithmEffectDistance − i ∗1;\n127\nab [ i ] . y =\
    \ −13;\n128\n}\n129\n130\n131\n}\n132\n//a method to receive laser range finder\
    \ readings.\n133\nvoid ReachPoint : : laserCallBack\n134\n( const sensor msgs\
    \ : : LaserScan : : ConstPtr &scan )\n135\n{\n136\nbool roadIsBlocked = false\
    \ ,\n137\nrightIsBlocked = false ,\n138\nl e f t I s B l o c k e d = false ;\n\
    139\nfloat frontObstacleMax = 4.5 ,\n140\nFOBMaxAngle = 0.0 ,\n141\nleftObstacleMax\
    \ = 4.5 ,\n142\nLOBMaxAngle = 0.0 ,\n143\nrightObstacleMax = 4.5 ,\n144\nROBMaxAngle\
    \ = 0 . 0 ;\n145\n146\npose\ndir ;\n147\n148\nif ( reqPoint . hint . compare (\"\
    done\") == 0)\n149\n{\n150\n//For APF\n151\nfloat beams [ 5 1 2 ] ;\n152\npose\
    \ obj new [ 5 1 2 ] ,\nobj [ 5 1 2 ] ;\n153\nf o r c e\nattraction ,\nrepulsion\
    \ [ 5 1 2 ] , sum ;\n154\nint RotCoef = 1;\n155\nsum . x = 0 . 0 ;\n156\nsum .\
    \ y = 0 . 0 ;\n157\nint beamCounter = 1;\n158\ndir . x = requestedTarget . x −\
    \ currentGlobal . x ;\n159\ndir . y = requestedTarget . y − currentGlobal . y\
    \ ;\n160\ndir . theta = atan2 ( dir . y , dir . x)∗Rad2Deg ;\n161\nfloat distanceToTarget\
    \ = sqrt ( dir . x∗ dir . x + dir . y∗ dir . y ) ;\n162\n163\nfloat R[ 2 ] [ 2\
    \ ] = {{ cos ((90− currentGlobal . theta )∗Deg2Rad ) ,\n164\n−1∗sin ((90− currentGlobal\
    \ . theta )∗Deg2Rad )} ,\n165\n{ sin ((90− currentGlobal . theta )∗Deg2Rad ) ,\n\
    166\ncos ((90− currentGlobal . theta )∗Deg2Rad )}};\n254\n167\n168\nif ( distanceToTarget\
    \ >= 3.0)\n169\n{\n170\nfor ( int\ni =0; i <=511;\ni++)\n171\n{\n172\nif ( scan−>ranges\
    \ [ i ] < 4.5\n)\n173\n{\n174\nbeams [ i ] = scan−>ranges [ i ] ;\n175\n176\n\
    obj [ i ] . x = beams [ i ]∗ cos (( i ∗PITCH)∗Deg2Rad ) ;\n177\nobj [ i ] . y\
    \ = beams [ i ]∗ sin (( i ∗PITCH)∗Deg2Rad ) ;\n178\nbeamCounter++;\n179\n}\n180\n\
    else if ( scan−>ranges [ i ] == 4.5)\n181\n{\n182\nbeams [ i ] = 0 . 0 ;\n183\n\
    obj [ i ] . x = 0 . 0 ;\n184\nobj [ i ] . y = 0 . 0 ;\n185\n}\n186\n}\n187\n188\n\
    //form the orientation matrix\n189\nfor ( int\ni =0; i<= 511;\ni++)\n190\n{\n\
    191\nif ( beams [ i ] > 0.0 && beams [ i ] < 4.5)\n192\n{\n193\n194\nrepulsion\
    \ [ i ] . x = obj [ i ] . x ;\n195\nrepulsion [ i ] . y = obj [ i ] . y ;\n196\n\
    197\n//remember: repulsion force is 180 degrees mirrored\n198\n//of the vector\
    \ describing the object and the robot\n199\nif ( beams [ i ] <= DistanceCrt &&\
    \ beams [ i ] > DistanceCrtTwo )\n200\n{\n201\nrepulsion [ i ] . x = 20∗ obj [\
    \ i ] . x ;\n202\nrepulsion [ i ] . y = 20∗ obj [ i ] . y ;\n203\nRotCoef = 10;\n\
    204\n}\n205\nif ( beams [ i ] <= DistanceCrtTwo )\n206\n{\n207\nrepulsion [ i\
    \ ] . x = 100∗ obj [ i ] . x ;\n208\nrepulsion [ i ] . y = 100∗ obj [ i ] . y\
    \ ;\n209\nRotCoef = 100;\n210\n}\n211\nif ( beams [ i ] > DistanceCrt )\n212\n\
    {\n213\nrepulsion [ i ] . x = obj [ i ] . x ;\n214\nrepulsion [ i ] . y = obj\
    \ [ i ] . y ;\n215\nRotCoef = 1;\n216\n}\n217\nrepulsion [ i ] . mag = 1/ sqrt\
    \ ( repulsion [ i ] . x∗ repulsion [ i ] . x\n218\n+repulsion [ i ] . y∗ repulsion\
    \ [ i ] . y ) ;\n219\n220\nrepulsion [ i ] . theta = atan2 ( repulsion [ i ] .\
    \ y , repulsion [ i ] . x ) ;\n221\n}\n222\nelse if ( beams [ i ] == 0.0)\n223\n\
    {\n224\nrepulsion [ i ] . x = 0 . 0 ;\n225\nrepulsion [ i ] . y = 0 . 0 ;\n226\n\
    repulsion [ i ] . mag = 0 . 0 ;\n255\n227\nrepulsion [ i ] . theta = 0 . 0 ;\n\
    228\n}\n229\n230\nsum . x = sum . x + repulsion [ i ] . x ;\n231\nsum . y = sum\
    \ . y + repulsion [ i ] . y ;\n232\n}\n233\n234\n235\nfloat rx = sum . x∗ cos\
    \ (180∗Deg2Rad) − sum . y∗ sin (180∗Deg2Rad ) ;\n236\nfloat ry = sum . x∗ sin\
    \ (180∗Deg2Rad) + sum . y∗ cos (180∗Deg2Rad ) ;\n237\nsum . x = rx∗R[ 0 ] [ 0\
    \ ] − ry∗R [ 0 ] [ 1 ] ;\n238\nsum . y = −rx∗R[ 1 ] [ 0 ] + ry∗R [ 1 ] [ 1 ] ;\n\
    239\nsum . mag = sqrt (sum . x∗sum . x+sum . y∗sum . y ) ;\n240\nsum . theta =\
    \ Rad2Deg∗atan2 (sum . y , sum . x ) ;\n241\n242\n//attraction force\n243\na t\
    \ t r a c t i o n . mag = sqrt ( dir . x∗ dir . x+dir . y∗ dir . y ) ;\n244\n\
    a t t r a c t i o n . theta = Rad2Deg∗atan2 ( dir . y , dir . x ) ;\n245\na t\
    \ t r a c t i o n . x = dir . x ;\n246\na t t r a c t i o n . y = dir . y ;\n\
    247\n248\n//sum force\n249\nint Krep = 7;\n250\nint Katt = 20;\n251\nsum . x =\
    \ sum . x + Katt∗ a t t r a c t i o n . x ;\n252\nsum . y = sum . y + Katt∗ a\
    \ t t r a c t i o n . y ;\n253\nsum . theta = Rad2Deg∗atan2 (sum . y , sum . x\
    \ ) ;\n254\nsum . mag = sqrt (sum . x∗sum . x+sum . y∗sum . y ) ;\n255\n256\n\
    /*Here is where you assign speed to the motors*/\n257\nif ( abs (sum . theta−currentGlobal\
    \ . theta ) < 180)\n258\n{\n259\nvel . angular . z = RotCoef ∗0.02∗(sum . theta−currentGlobal\
    \ . theta ) ;\n260\n}\n261\n262\nelse if ((sum . theta−currentGlobal . theta >\
    \ 180)\n| |\n263\n(sum . theta−currentGlobal . theta < −180))\n264\n{\n265\nvel\
    \ . angular . z = RotCoef ∗ −0.02∗(sum . theta−currentGlobal . theta ) ;\n266\n\
    }\n267\n268\nvel . l i n e a r . x = sum . mag ;\n269\n//limiting the linear speed\
    \ to 0.75 m/s\n270\nif ( vel . l i n e a r . x >= MaxVel)\n271\n{\n272\nvel .\
    \ l i n e a r . x = MaxVel ;\n273\n}\n274\nif ( vel . l i n e a r . x <= −1∗MaxVel)\n\
    275\n{\n276\nvel . l i n e a r . x = −1∗MaxVel ;\n277\n}\n278\nvel pub . publish\
    \ ( vel ) ;\n279\n280\n}\n281\nelse if ( distanceToTarget < 3.0)\n282\n{\n283\n\
    stop ( ) ;\n284\nreqPoint . status = true ;\n285\nprevPoint . hint = reqPoint\
    \ . hint ;\n286\ntarget status pub . publish ( reqPoint ) ;\n256\n287\nprocPointHint\
    \ = reqPoint . hint ;\n288\n}\n289\n}\n290\n/*check the \"reqPoint.hint\" to assign\
    \ limitation on field of view*/\n291\nelse if ( reqPoint . hint . compare (\"\
    done\") != 0)\n292\n{\n293\ndir . x = requestedTarget . x − currentGlobal . x\
    \ ;\n294\ndir . y = requestedTarget . y − currentGlobal . y ;\n295\n296\nif ((\
    \ reqPoint . hint . compare (\"ab1\") == 0 &&\n297\nsqrt ( dir . x∗ dir . x +\
    \ dir . y∗ dir . y) >= AlgorithmEffectDistance )\n| |\n298\n( reqPoint . hint\
    \ . compare (\"ab1-left\") == 0 &&\n299\nsqrt ( dir . x∗ dir . x + dir . y∗ dir\
    \ . y) >= AlgorithmEffectDistance − 1.5)\n| |\n300\n( reqPoint . hint . compare\
    \ (\"ab1-adjust\") == 0 &&\n301\nsqrt ( dir . x∗ dir . x + dir . y∗ dir . y) >=\
    \ AlgorithmEffectDistance − 1.5)\n| |\n302\n( reqPoint . hint . compare (\"ab-resume\"\
    ) == 0 &&\n303\nsqrt ( dir . x∗ dir . x + dir . y∗ dir . y) >= AlgorithmEffectDistance\
    \ − 1 . 0 ) )\n304\n{\n305\ndir . x = requestedTarget . x − currentGlobal . x\
    \ ;\n306\ndir . y = requestedTarget . y − currentGlobal . y ;\n307\ndir . theta\
    \ = atan2 ( dir . y , dir . x)∗Rad2Deg ;\n308\nfloat distanceToTarget = sqrt (\
    \ dir . x∗ dir . x + dir . y∗ dir . y ) ;\n309\n//For APF\n310\nfloat beams [\
    \ 5 1 2 ] ;\n311\npose\ndir ,\nobj new [ 5 1 2 ] ,\nobj [ 5 1 2 ] ;\n312\nf o\
    \ r c e\nattraction ,\nrepulsion [ 5 1 2 ] , sum ;\n313\nint RotCoef = 1;\n314\n\
    sum . x = 0 . 0 ;\n315\nsum . y = 0 . 0 ;\n316\nint beamCounter = 1;\n317\ndir\
    \ . x = requestedTarget . x − currentGlobal . x ;\n318\ndir . y = requestedTarget\
    \ . y − currentGlobal . y ;\n319\ndir . theta = atan2 ( dir . y , dir . x)∗Rad2Deg\
    \ ;\n320\ndistanceToTarget = sqrt ( dir . x∗ dir . x + dir . y∗ dir . y ) ;\n\
    321\nfloat R[ 2 ] [ 2 ] = {{ cos ((90− currentGlobal . theta )∗Deg2Rad ) ,\n322\n\
    −1∗sin ((90− currentGlobal . theta )∗Deg2Rad )} ,\n323\n{ sin ((90− currentGlobal\
    \ . theta )∗Deg2Rad ) ,\n324\ncos ((90− currentGlobal . theta )∗Deg2Rad )}};\n\
    325\nif ( distanceToTarget >= DistanceTh )\n326\n{\n327\nfor ( int\ni =0; i <=511;\n\
    i++)\n328\n{\n329\nif ( scan−>ranges [ i ] < 4.5\n)\n330\n{\n331\nbeams [ i ]\
    \ = scan−>ranges [ i ] ;\n332\n333\nobj [ i ] . x = beams [ i ]∗ cos (( i ∗PITCH)∗Deg2Rad\
    \ ) ;\n334\nobj [ i ] . y = beams [ i ]∗ sin (( i ∗PITCH)∗Deg2Rad ) ;\n335\nbeamCounter++;\n\
    336\n}\n337\nelse if ( scan−>ranges [ i ] == 4.5)\n338\n{\n339\nbeams [ i ] =\
    \ 0 . 0 ;\n340\nobj [ i ] . x = 0 . 0 ;\n341\nobj [ i ] . y = 0 . 0 ;\n342\n}\n\
    343\n}\n344\n345\n//form the orientation matrix\n346\nfor ( int\ni =0; i<= 511;\n\
    i++)\n257\n347\n{\n348\nif ( beams [ i ] > 0.0 && beams [ i ] < 4.5)\n349\n{\n\
    350\n351\nrepulsion [ i ] . x = obj [ i ] . x ;\n352\nrepulsion [ i ] . y = obj\
    \ [ i ] . y ;\n353\n354\n//remember: repulsion force is 180 degrees\n355\n//mirrored\
    \ of the vector describing the object and the robot\n356\nif ( beams [ i ] <=\
    \ DistanceCrt && beams [ i ] > DistanceCrtTwo )\n357\n{\n358\nrepulsion [ i ]\
    \ . x = 20∗ obj [ i ] . x ;\n359\nrepulsion [ i ] . y = 20∗ obj [ i ] . y ;\n\
    360\nRotCoef = 10;\n361\n}\n362\nif ( beams [ i ] <= DistanceCrtTwo )\n363\n{\n\
    364\nrepulsion [ i ] . x = 100∗ obj [ i ] . x ;\n365\nrepulsion [ i ] . y = 100∗\
    \ obj [ i ] . y ;\n366\nRotCoef = 100;\n367\n}\n368\nif ( beams [ i ] > DistanceCrt\
    \ )\n369\n{\n370\nrepulsion [ i ] . x = obj [ i ] . x ;\n371\nrepulsion [ i ]\
    \ . y = obj [ i ] . y ;\n372\nRotCoef = 1;\n373\n}\n374\nrepulsion [ i ] . mag\
    \ = 1/ sqrt ( repulsion [ i ] . x∗ repulsion [ i ] . x\n375\n+repulsion [ i ]\
    \ . y∗ repulsion [ i ] . y ) ;\n376\n377\nrepulsion [ i ] . theta = atan2 ( repulsion\
    \ [ i ] . y , repulsion [ i ] . x ) ;\n378\n}\n379\nelse if ( beams [ i ] == 0.0)\n\
    380\n{\n381\nrepulsion [ i ] . x = 0 . 0 ;\n382\nrepulsion [ i ] . y = 0 . 0 ;\n\
    383\nrepulsion [ i ] . mag = 0 . 0 ;\n384\nrepulsion [ i ] . theta = 0 . 0 ;\n\
    385\n}\n386\n387\nsum . x = sum . x + repulsion [ i ] . x ;\n388\nsum . y = sum\
    \ . y + repulsion [ i ] . y ;\n389\n390\n}\n391\nfloat rx = sum . x∗ cos (180∗Deg2Rad)\
    \ − sum . y∗ sin (180∗Deg2Rad ) ;\n392\nfloat ry = sum . x∗ sin (180∗Deg2Rad)\
    \ + sum . y∗ cos (180∗Deg2Rad ) ;\n393\nsum . x = rx∗R[ 0 ] [ 0 ] − ry∗R [ 0 ]\
    \ [ 1 ] ;\n394\nsum . y = −rx∗R[ 1 ] [ 0 ] + ry∗R [ 1 ] [ 1 ] ;\n395\n396\n397\n\
    //Applying Repulsion Force From the Field\n398\nif ( currentGlobal . y < −15.0\
    \ && ( −15.0 − currentGlobal . y <= 2.0)\n399\n&& currentGlobal . x <= 11.0\n\
    400\n&& currentGlobal . x >= −11.0)\n401\n{\n402\nsum . x += 10000.00;\n403\n\
    sum . y += −10000.00;\n404\n}\n405\nelse if ( currentGlobal . y < 13.0 && currentGlobal\
    \ . y > −13\n406\n&& currentGlobal . x >= 12.0\n258\n407\n&& ( currentGlobal .\
    \ x − 12 <= 0.75) )\n408\n{\n409\nsum . x += 10000.00;\n410\nsum . y += 10000.00;\n\
    411\n}\n412\nelse if ( currentGlobal . y > 12.0\n413\n&& ( currentGlobal . y −\
    \ 13.0 <= 2.0)\n414\n&& currentGlobal . x <= 11.0 && currentGlobal . x > 0.0)\n\
    415\n{\n416\nsum . x += −10000.0;\n417\nsum . y += 10000.00;\n418\n}\n419\nelse\
    \ if ( currentGlobal . y > 12.0\n420\n&& ( currentGlobal . y − 13 <= 2.0)\n421\n\
    && currentGlobal . x <= 0.0\n422\n&& currentGlobal . x >= −11.0)\n423\n{\n424\n\
    sum . x += 10000.00;\n425\nsum . y += 10000.00;\n426\n}\n427\nelse if ( currentGlobal\
    \ . y < 13.0\n428\n&& currentGlobal . y > −13.0\n429\n&& currentGlobal . x <=\
    \ −12.0\n430\n&& ( −12 − currentGlobal . x <= 0.75) )\n431\n{\n432\nsum . x +=\
    \ −10000.00;\n433\nsum . y += 10000.00;\n434\n}\n435\n436\nsum . mag = sqrt (sum\
    \ . x∗sum . x+sum . y∗sum . y ) ;\n437\nsum . theta = Rad2Deg∗atan2 (sum . y ,\
    \ sum . x ) ;\n438\n//attraction force\n439\na t t r a c t i o n . mag = sqrt\
    \ ( dir . x∗ dir . x+dir . y∗ dir . y ) ;\n440\na t t r a c t i o n . theta =\
    \ Rad2Deg∗atan2 ( dir . y , dir . x ) ;\n441\na t t r a c t i o n . x = dir .\
    \ x ;\n442\na t t r a c t i o n . y = dir . y ;\n443\n//sum force\n444\nint Krep\
    \ = 7;\n445\nint Katt = 20;\n446\nsum . x = sum . x + Katt∗ a t t r a c t i o\
    \ n . x ;\n447\nsum . y = sum . y + Katt∗ a t t r a c t i o n . y ;\n448\nsum\
    \ . theta = Rad2Deg∗atan2 (sum . y , sum . x ) ;\n449\nsum . mag = sqrt (sum .\
    \ x∗sum . x+sum . y∗sum . y ) ;\n450\n/*Here is where you assign speed to the\
    \ motors*/\n451\nif ( abs (sum . theta−currentGlobal . theta ) < 180)\n452\n{\n\
    453\nvel . angular . z = RotCoef ∗0.02∗(sum . theta−currentGlobal . theta ) ;\n\
    454\n}\n455\nelse if ((sum . theta−currentGlobal . theta > 180)\n456\n| |\n(sum\
    \ . theta−currentGlobal . theta < −180))\n457\n{\n458\nvel . angular . z = RotCoef\
    \ ∗ −0.02∗(sum . theta−currentGlobal . theta ) ;\n459\n}\n460\nvel . l i n e a\
    \ r . x = sum . mag ;\n461\n//limiting the linear speed to 0.75 m/s\n462\nif (\
    \ vel . l i n e a r . x >= MaxVel)\n463\n{\n464\nvel . l i n e a r . x = MaxVel\
    \ ;\n465\n}\n466\nif ( vel . l i n e a r . x <= −1∗MaxVel)\n259\n467\n{\n468\n\
    vel . l i n e a r . x = −1∗MaxVel ;\n469\n}\n470\nvel pub . publish ( vel ) ;\n\
    471\n472\n}\n473\nelse if ( distanceToTarget <DistanceTh )\n474\n{\n475\nstop\
    \ ( ) ;\n476\nreqPoint . status = true ;\n477\nprevPoint . hint = reqPoint . hint\
    \ ;\n478\ntarget status pub . publish ( reqPoint ) ;\n479\nprocPointHint = reqPoint\
    \ . hint ;\n480\n}\n481\n}\n482\nelse\n483\n{\n484\nfor ( int\ni =191; i <=319;\n\
    i++)\n485\n{\n486\nif ( scan−>ranges [ i ] <= df )\n487\n{\n488\nroadIsBlocked\
    \ = true ;\n489\nif ( scan−>ranges [ i ] < frontObstacleMax )\n490\n{\n491\nfrontObstacleMax\
    \ = scan−>ranges [ i ] ;\n492\nFOBMaxAngle = i ∗PITCH∗PI /180;\n493\n}\n494\n\
    }\n495\n}\n496\nfor ( int\nj =0; j <=127; j++)\n497\n{\n498\nif ( scan−>ranges\
    \ [ j ] <= dr )\n499\n{\n500\nrightIsBlocked = true ;\n501\nif ( scan−>ranges\
    \ [ j ] < rightObstacleMax )\n502\n{\n503\nrightObstacleMax = scan−>ranges [ j\
    \ ] ;\n504\nROBMaxAngle = j ∗PITCH∗PI /180;\n505\n}\n506\n}\n507\n}\n508\nfor\
    \ ( int k=385; k<=512; k++)\n509\n{\n510\nif ( scan−>ranges [ k ] <= dl )\n511\n\
    {\n512\nl e f t I s B l o c k e d = true ;\n513\nif ( scan−>ranges [ k ] < leftObstacleMax\
    \ )\n514\n{\n515\nleftObstacleMax = scan−>ranges [ k ] ;\n516\nLOBMaxAngle = k∗PITCH∗PI\
    \ /180;\n517\n}\n518\n}\n519\n}\n520\n//}\n521\nif ( reqPoint . hint . compare\
    \ (\"ab1\") != 0\n522\n&& reqPoint . hint . compare (\"ab1-adjust\") != 0\n523\n\
    && reqPoint . hint . compare (\"ab1-left\") != 0\n524\n&& reqPoint . hint . compare\
    \ (\"ab-resume\") != 0)\n525\n{\n526\nrightIsBlocked = false ;\n260\n527\nl e\
    \ f t I s B l o c k e d = false ;\n528\n}\n529\n530\n/*this is a section which\
    \ guides the robot,\n531\nit has been put in here because this function\n532\n\
    is being updated 5 times a second.\n533\nRemeber because is being called very\
    \ often,\n534\nwe are not allowed to put any while loop in here, if we\n535\n\
    do that, laser range finder readings will be missed.\n536\n*/\n537\npose\ndir\
    \ ,\nprevdir ;\n538\ndir . x = requestedTarget . x − currentGlobal . x ;\n539\n\
    dir . y = requestedTarget . y − currentGlobal . y ;\n540\ndir . theta = atan2\
    \ ( dir . y , dir . x)∗Rad2Deg ;\n541\nprevdir = dir ;\n542\n543\nif ( abs ( dir\
    \ . theta−currentGlobal . theta ) >= 10.0\n544\n&& ( reqPoint . hint . compare\
    \ (\"cd\") == 0\n545\n| |\nreqPoint . hint . compare (\"ab\") == 0)\n546\n&& prevPoint\
    \ . hint . compare ( reqPoint . hint . c s t r ( ) )\n!= 0)\n547\n{\n548\n//heading\
    \ correction\n549\nif ( abs ( dir . theta−currentGlobal . theta ) < 180)\n550\n\
    {\n551\nvel . angular . z = 0.04∗( dir . theta−currentGlobal . theta ) ;\n552\n\
    }\n553\nelse if (( dir . theta−currentGlobal . theta > 180)\n554\n| |\n( dir .\
    \ theta−currentGlobal . theta < −180))\n555\n{\n556\nvel . angular . z = −0.04∗(\
    \ dir . theta−currentGlobal . theta ) ;\n557\n}\n558\nvel . l i n e a r . x =\
    \ 0 . 0 ;\n559\nvel pub . publish ( vel ) ;\n560\nheadingIsCorrected = false ;\n\
    561\n}\n562\nelse if ( reqPoint . hint . compare (\"cd\") != 0\n| |\n563\nreqPoint\
    \ . hint . compare (\"ab\") != 0)\n564\n{\n565\nheadingIsCorrected = true ;\n\
    566\n}\n567\nif ( ! targetIsReached && headingIsCorrected )\n568\n{\n569\n//Congestion\
    \ avoidance\n570\nif (( roadIsBlocked\n| |\nrightIsBlocked ) &&\n571\nsqrt ( dir\
    \ . x∗ dir . x + dir . y∗ dir . y) <=\n572\nfrontObstacleMax ∗ sin (FOBMaxAngle)/2)\n\
    573\n{\n574\nroadIsBlocked = false ;\n575\nrightIsBlocked = false ;\n576\n}\n\
    577\n//if lasers didn’t detect anything in the field,\n578\n//approach the target.\n\
    579\nif ( ! roadIsBlocked && ! rightIsBlocked\n580\n&& ! l e f t I s B l o c k\
    \ e d )\n581\n{\n582\n//update the position of the robot respect to target\n583\n\
    dir . x = requestedTarget . x − currentGlobal . x ;\n584\ndir . y = requestedTarget\
    \ . y − currentGlobal . y ;\n585\ndir . theta = atan2 ( dir . y , dir . x)∗Rad2Deg\
    \ ;\n586\n//simulation cannot reach 180 or -180 degrees.\n261\n587\n588\nif (\
    \ abs ( dir . theta−currentGlobal . theta ) < 180)\n589\n{\n590\nvel . angular\
    \ . z = 0.02∗( dir . theta−currentGlobal . theta ) ;\n591\n}\n592\nelse if ((\
    \ dir . theta−currentGlobal . theta > 180)\n593\n| |\n( dir . theta−currentGlobal\
    \ . theta < −180))\n594\n{\n595\nvel . angular . z = −0.02∗( dir . theta−currentGlobal\
    \ . theta ) ;\n596\n}\n597\nvel . l i n e a r . x = sqrt ( dir . x∗ dir . x +\
    \ dir . y∗ dir . y ) ;\n598\n//limiting the linear speed to 0.75 m/s\n599\nif\
    \ ( vel . l i n e a r . x >= 0.75)\n600\n{\n601\nvel . l i n e a r . x = 0 . 7\
    \ 5 ;\n602\n}\n603\nif ( vel . l i n e a r . x <= −0.75)\n604\n{\n605\nvel . l\
    \ i n e a r . x = −0.75;\n606\n}\n607\nvel pub . publish ( vel ) ;\n608\nprevdir\
    \ = dir ;\n609\n}\n610\n//if any obstacle is detected within the\n611\n//field\
    \ of view of the robot\n612\nelse if ( roadIsBlocked\n| |\nrightIsBlocked\n| |\n\
    l e f t I s B l o c k e d )\n613\n{\n614\nif ( reqPoint . hint . compare (\"ab1\"\
    ) == 0\n615\n| |\nreqPoint . hint . compare (\"ab1-adjust\") == 0\n616\n| |\n\
    reqPoint . hint . compare (\"ab1-left\") == 0\n617\n| |\nreqPoint . hint . compare\
    \ (\"ab-resume\") == 0)\n618\n{\n619\nreversCoef = rand () % 20 + 1;\n620\nvel\
    \ . l i n e a r . x = −1∗reversCoef ∗0.02;\n621\nvel . angular . z = 0 . 0 ;\n\
    622\nvel pub . publish ( vel ) ;\n623\nprevdir = dir ;\n624\n}\n625\nelse if (\
    \ reqPoint . hint . compare (\"cd\") == 0\n626\n| |\nreqPoint . hint . compare\
    \ (\"ab\") == 0)\n627\n{\n628\nvel . l i n e a r . x = 0 . 0 ;\n629\nvel . angular\
    \ . z = 0 . 0 ;\n630\nvel pub . publish ( vel ) ;\n631\n}\n632\n}\n633\n}\n634\n\
    635\n//if we have reached in distance of 5 cm or less of the target,\n636\n//target\
    \ is assumed to be reached.\n637\nif ( sqrt ( dir . x∗ dir . x + dir . y∗ dir\
    \ . y) <= 0.20)\n638\n{\n639\ntargetIsReached = true ;\n640\nstop ( ) ;\n641\n\
    reqPoint . status = true ;\n642\nprevPoint . hint = reqPoint . hint ;\n643\ntarget\
    \ status pub . publish ( reqPoint ) ;\n644\nprocPointHint = reqPoint . hint ;\n\
    645\n}\n646\n}\n262\n647\n}\n648\n}\n649\n650\n//a method to receive global position\
    \ of the robot.\n651\nvoid ReachPoint : : worldPoseCallback\n652\n( const nav\
    \ msgs : : Odometry : : ConstPtr &world pose )\n653\n{\n654\ncurrentGlobal . x\
    \ = world pose−>pose . pose . p osi t i on . x ;\n655\ncurrentGlobal . y = world\
    \ pose−>pose . pose . p osi t i on . y ;\n656\n657\ncurrentGlobal . theta = Rad2Deg\
    \ ∗\n658\nt f : : getYaw( world pose−>pose . pose . o r i e n t a t i o n ) ;\n\
    659\n}\n660\n//a method to receive target coordinates.\n661\nvoid ReachPoint :\
    \ : targetCallback\n662\n( const\np l o u g h i n g r e v e r s i b l e : : ReachPoint\
    \ : : ConstPtr &target )\n663\n{\n664\n//keeping record of the requested target\n\
    665\nreqPoint . point . x = target −>point . x ;\n666\nreqPoint . point . y =\
    \ target −>point . y ;\n667\nreqPoint . hint = target −>hint ;\n668\nreqPoint\
    \ . status = target −>status ;\n669\n//loading the target\n670\nrequestedTarget\
    \ . x = target −>point . x ;\n671\nrequestedTarget . y = target −>point . y ;\n\
    672\n673\nif ( reqPoint . hint . compare (\"ab1\") == 0)\n674\n{\n675\ndf = 1\
    \ . 5 ;\n676\ndl = 0 . 5 ;\n677\ndr = 1 . 5 ;\n678\n}\n679\nelse if ( reqPoint\
    \ . hint . compare (\"ab1-adjust\") == 0)\n680\n{\n681\ndf = 3 . 0 ;\n682\ndl\
    \ = 1 . 0 ;\n683\ndr = 3 . 0 ;\n684\n}\n685\nelse if ( reqPoint . hint . compare\
    \ (\"ab\") == 0)\n686\n{\n687\ndf = 0 . 5 ;\n688\ndl = 0 . 0 ;\n689\ndr = 0 .\
    \ 0 ;\n690\n}\n691\nelse if ( reqPoint . hint . compare (\"cd\") == 0 )\n692\n\
    {\n693\ndf = 1 . 0 ;\n694\ndl = 0 . 0 ;\n695\ndr = 0 . 0 ;\n696\n}\n697\nelse\
    \ if ( reqPoint . hint . compare (\"ab1-left\") == 0\n698\n| |\nreqPoint . hint\
    \ . compare (\"done\") == 0)\n699\n{\n700\ndf = 1 . 0 ;\n701\ndl = 0 . 5 ;\n702\n\
    dr = 0 . 7 5 ;\n703\n}\n704\ntargetIsReached = false ;\n705\nheadingIsCorrected\
    \ = false ;\n706\n}\n263\n707\n708\nvoid stop ( void )\n709\n{\n710\nvel . l i\
    \ n e a r . x = 0 . 0 ;\n711\nvel . l i n e a r . y = 0 . 0 ;\n712\nvel . l i\
    \ n e a r . z = 0 . 0 ;\n713\nvel . angular . x = 0 . 0 ;\n714\nvel . angular\
    \ . y = 0 . 0 ;\n715\nvel . angular . z = 0 . 0 ;\n716\nvel pub . publish ( vel\
    \ ) ;\n717\n}\n718\nint main ( int argc ,\nchar∗∗ argv )\n719\n{\n720\nros : :\
    \ i n i t ( argc , argv , \"reach_point\" ) ;\n721\nReachPoint rp ;\n722\nsrand\
    \ ( time (NULL) ) ;\n723\nros : : spin ( ) ;\n724\nreturn\n0;\n725\n}\n264\nGlossary\n\
    A:\n————————\nα\nA unique point outside of the ﬁeld. Point of entrance\nAPF\n\
    Artiﬁcial Potential Field\nD:\n————————\ndf\ndistance between two consecutive\
    \ furrow\ndistpl\nRequired ploughing distance\ndistft\nRequired furrow transitioning\
    \ distance\nDpl\nTotal ploughing distance\nDft\nTotal furrow transitioning distance\n\
    dstage1\nTravel distance in stage 1\ndstage2\nTravel distance in stage 2\ndstage3\n\
    Travel distance in stage 3\ndstage4\nTravel distance in stage 4\ndαl1\nDistance\
    \ between α and the ﬁrst track (spraying)\ndlj−1lj\nDistance between two consecutive\
    \ track locations (spraying)\nE:\n————————\nϵ\nCollision Threshold Distance\n\
    F:\n————————\nFR\nFRONT REGION\nFsum\nSum Force\nFatt\nAttraction Force\nFrep\n\
    Repulsion Force\nG:\n————————\nΓ\nDetecting Range of a robot\nGi\nSet of location\
    \ ids allocated to robot i\nH:\n————————\nH\nHeadland Width\nh1, h2\nHeadland\
    \ width in each side\nK:\n265\n————————\nK\nNumber of ploughing locations\nL:\n\
    ————————\nL\nLength of the ﬁeld\nλ\nRobot’s Length\nlf\nlength of a single furrow\n\
    LR\nLEFT REGION\nM:\n————————\nm\nthe last track number assigned to previous robots\
    \ (spraying)\nN:\n————————\nnopt\nOptimum number of robots in the team (spraying)\n\
    P:\n————————\nPC\nPloughing Cost\nR:\n————————\nRegionn\nnumber of regions in\
    \ the ﬁeld (spraying)\nri\nthe i’th robot\nRR\nRIGHT REGION\nT:\n————————\nτinit\n\
    constant time to perceive task initiation event (spraying)\nτpn\nPloughing delay\
    \ time\ntdelay\nField accessing delay time\ntp\nSingle furrow ploughing time for\
    \ a single furrow\nTp\nTotal ploughing time\nTploughing\nTeam ploughing time\n\
    tsi\nStandby period for robot i (spraying)\ntsprayingi\nrefers to spraying time\
    \ for robot i (spraying)\ntta\nTask allocation period for robot i (spraying)\n\
    U:\n————————\nU(q)\nPotential Function\nUatt(q)\nAttraction Potential Function\n\
    Urep(q)\nRepulsion Potential Function\nV:\n————————\nv\nRobot’s Velocity\n266\n\
    W:\n————————\nW\nWidth of the ﬁeld\nwf\nWidth of a single furrow\n267\n"
  inline_citation: '>'
  journal: ''
  limitations: '>'
  pdf_link: http://shura.shu.ac.uk/24182/1/Janani_2018_PhD_Swarm-basedCooperative.pdf
  publication_year: 2019
  relevance_score1: 0
  relevance_score2: 0
  title: Investigation into Swarm-based Cooperative Behaviour in Execution of Open
    Field Agricultural Tasks
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
