- analysis: '>'
  authors:
  - Nguyen H.H.
  - Shin D.Y.
  - Jung W.S.
  - Kim T.Y.
  - Lee D.H.
  citation_count: '0'
  description: Industrial greenhouse mushroom cultivation is currently promising,
    due to the nutritious and commercial mushroom benefits and its convenience in
    adapting smart agriculture technologies. Traditional Device-Cloud protocol in
    smart agriculture wastes network resources when big data from Internet of Things
    (IoT) devices are directly transmitted to the cloud server without processing,
    delaying network connection and increasing costs. Edge computing has emerged to
    bridge these gaps by shifting partial data storage and computation capability
    from the cloud server to edge devices. However, selecting which tasks can be applied
    in edge computing depends on user-specific demands, suggesting the necessity to
    design a suitable Smart Agriculture Information System (SAIS) architecture for
    single-crop requirements. This study aims to design and implement a cost-saving
    multilayered SAIS architecture customized for smart greenhouse mushroom cultivation
    toward leveraging edge computing. A three-layer SAIS adopting the Device-Edge-Cloud
    protocol, which enables the integration of key environmental parameter data collected
    from the IoT sensor and RGB images collected from the camera, was tested in this
    research. Implementation of this designed SAIS architecture with typical examples
    of mushroom cultivation indicated that low-cost data pre-processing procedures
    including small-data storage, temporal resampling-based data reduction, and lightweight
    artificial intelligence (AI)-based data quality control (for anomalous environmental
    conditions detection) together with real-time AI model deployment (for mushroom
    detection) are compatible with edge computing. Integrating the Edge Layer as the
    center of the traditional protocol can significantly save network resources and
    operational costs by reducing unnecessary data sent from the device to the cloud,
    while keeping sufficient information.
  doi: 10.3390/agriculture14030489
  full_citation: '>'
  full_text: '>

    "This website uses cookies We use cookies to personalise content and ads, to provide
    social media features and to analyse our traffic. We also share information about
    your use of our site with our social media, advertising and analytics partners
    who may combine it with other information that you’ve provided to them or that
    they’ve collected from your use of their services. Consent Selection Necessary
    Preferences Statistics Marketing Show details                 Deny Allow selection
    Allow all   Journals Topics Information Author Services Initiatives About Sign
    In / Sign Up Submit   Search for Articles: Agriculture All Article Types Advanced   Journals
    Agriculture Volume 14 Issue 3 10.3390/agriculture14030489 Submit to this Journal
    Review for this Journal Propose a Special Issue Article Menu Academic Editor Wei
    Lu Subscribe SciFeed Recommended Articles Related Info Link More by Authors Links
    Article Views 768 Table of Contents Abstract Introduction Background and Related
    Work System Architecture Design Implementation Results Discussion and Future Direction
    Conclusions Author Contributions Funding Data Availability Statement Conflicts
    of Interest References share Share announcement Help format_quote Cite question_answer
    Discuss in SciProfiles thumb_up Endorse textsms Comment first_page settings Order
    Article Reprints Open AccessArticle An Integrated IoT Sensor-Camera System toward
    Leveraging Edge Computing for Smart Greenhouse Mushroom Cultivation by Hoang Hai
    Nguyen 1, Dae-Yun Shin 1,2, Woo-Sung Jung 3, Tae-Yeol Kim 2 and Dae-Hyun Lee 4,*
    1 Sejong Rain Co., Ltd., In-House Venture of K-Water, Daejeon 34134, Republic
    of Korea 2 Graduate School of Smart Agriculture, Chungnam National University,
    Daejeon 34134, Republic of Korea 3 K-Water Research Institute, Daejeon 34045,
    Republic of Korea 4 Department of Biosystems Machinery Engineering, Chungnam National
    University, Daejeon 34134, Republic of Korea * Author to whom correspondence should
    be addressed. Agriculture 2024, 14(3), 489; https://doi.org/10.3390/agriculture14030489
    Submission received: 13 January 2024 / Revised: 25 February 2024 / Accepted: 5
    March 2024 / Published: 18 March 2024 (This article belongs to the Special Issue
    Application of Intelligent Greenhouse and Plant Factory Systems in Agricultural
    Production) Download keyboard_arrow_down     Browse Figures Versions Notes Abstract
    Industrial greenhouse mushroom cultivation is currently promising, due to the
    nutritious and commercial mushroom benefits and its convenience in adapting smart
    agriculture technologies. Traditional Device-Cloud protocol in smart agriculture
    wastes network resources when big data from Internet of Things (IoT) devices are
    directly transmitted to the cloud server without processing, delaying network
    connection and increasing costs. Edge computing has emerged to bridge these gaps
    by shifting partial data storage and computation capability from the cloud server
    to edge devices. However, selecting which tasks can be applied in edge computing
    depends on user-specific demands, suggesting the necessity to design a suitable
    Smart Agriculture Information System (SAIS) architecture for single-crop requirements.
    This study aims to design and implement a cost-saving multilayered SAIS architecture
    customized for smart greenhouse mushroom cultivation toward leveraging edge computing.
    A three-layer SAIS adopting the Device-Edge-Cloud protocol, which enables the
    integration of key environmental parameter data collected from the IoT sensor
    and RGB images collected from the camera, was tested in this research. Implementation
    of this designed SAIS architecture with typical examples of mushroom cultivation
    indicated that low-cost data pre-processing procedures including small-data storage,
    temporal resampling-based data reduction, and lightweight artificial intelligence
    (AI)-based data quality control (for anomalous environmental conditions detection)
    together with real-time AI model deployment (for mushroom detection) are compatible
    with edge computing. Integrating the Edge Layer as the center of the traditional
    protocol can significantly save network resources and operational costs by reducing
    unnecessary data sent from the device to the cloud, while keeping sufficient information.
    Keywords: smart agriculture; mushroom; edge computing; farm management information
    system (FMIS); machine vision; Agricultural IoT 1. Introduction Nowadays, edible
    mushrooms are well known as not only a healthy food but also a valuable pharmacy,
    since they can provide rich nutrients such as protein, minerals, and vitamins
    as well as increase the human immune system to prevent many diseases, even cancer
    [1,2]. Therefore, the demand for mushroom products is increasing in the world’s
    food market, especially after the COVID-19 pandemic [3,4]. Although wild mushrooms
    can be harvested in the natural environment, their high sensitivity to seasonal
    variations of weather/climate factors leads to unsustainable production [5,6].
    Industrialized mushroom cultivation in the greenhouse offers an alternative strategy
    to natural cultivation to improve both the quantity and quality of mushroom production
    because the key environmental parameters affecting mushroom growth can be monitored
    and controlled. However, the traditional cultivation method based on manual monitoring,
    controlling, and harvesting involves time-consuming and labor-intensive work which
    can then increase operational costs, demanding timely, automated, cost-effective,
    and eco-friendly solutions for the mushroom industry [7,8]. Along with the Fourth
    Industrial Revolution (Industry 4.0) when innovative technologies such as the
    Internet of Things (IoT), cloud computing, Big Data (BD), and Artificial Intelligence
    (AI) have been commonly employed in industrial automation, a parallel revolution
    in agriculture (Agriculture 4.0) boosts automation in farming activities by applying
    those new technologies to the agriculture sector, so-called smart agriculture/farming
    (or precision agriculture, digital agriculture, and Agricultural IoT). Although
    it can contribute to the reduction in labor costs, deploying smart agriculture
    systems in practice is facing other cost-related problems such as setup costs
    and running costs [9]. On the one hand, from the users’ point of view, especially
    in some developing countries where most people working in agriculture are smallholder
    farmers, they have limited access to modern smart farming infrastructure due to
    the expensive product prices (setup costs). On the other hand, from the perspective
    of service developers/providers, smart farming system construction and applications,
    which are commonly implemented in centralized cloud servers can consume massive
    resources for BD storage, management, analytics, and security, resulting in higher
    overall cloud service costs (running costs). Cutting those unnecessary costs is
    therefore pivotal for many business organizations, especially small and medium
    enterprises (SMEs), to optimize their smart farming systems toward serving smallholder
    clients with cost-saving infrastructures. Besides the cloud service costs, traditional
    smart agriculture systems are often limited by the slow network connection (low
    bandwidth) between Agricultural IoT devices and cloud servers when all the huge
    numbers of data collected from the devices are directly sent to the cloud, which
    then delays the system decisions and hampers real-time applications in smart agriculture
    (high latency) [10,11,12]. This is a challenge for mushroom cultivation when its
    key parameters require strict monitoring within short time intervals [13]. Edge
    computing (including cloudlets, fog, and mobile edge computing) has recently emerged
    as a promising solution to bridge this connection gap, thanks to the rapid advancement
    of information and communication technologies as well as hardware capacity. Specifically,
    an edge computing node can be regarded as a decentralized local server (edge server)
    that allows for storing a small number of data and bringing data computation closer
    to the edge devices [14,15,16]. By coupling the edge computing paradigm with a
    classical Device-Cloud protocol, the original BD is effectively managed in an
    offline process at the edge server before transmission instead of storing and
    processing all the collected raw data at the cloud server [17]. This can free
    up the bandwidth for faster connection and for the cloud server load spent on
    complicated analytics and applications [16,18]. Despite the wide deployment of
    edge computing in smart homes and smart cities, it is not very commonplace in
    smart farming, and thus there is still room for leveraging and improving this
    paradigm to meet the demands of smart agriculture as well as the greenhouse mushroom
    industry. Shifting partial work from cloud to edge offers SMEs an effective and
    cost-saving solution to overcome the issues of excessive bandwidth-cloud utilization
    and high latency [10]. However, determining which features should be conducted
    in the edge server highly depends on the specific functional requirements and
    capacity of each smart farming system [19]. This suggests the necessity to design
    a proper digital Farm Management Information System (FMIS) architecture assisting
    smart agriculture applications for the specific farmer’s requirements (e.g., for
    each different crop) [20,21,22], hereafter the Smart Agriculture Information System
    (SAIS). From the perspective of an SME, Sejong Rain Company in collaboration with
    Chungnam National University aims to design and implement a low-cost SAIS architecture
    customized for smart greenhouse mushroom management in association with a paradigm
    shift to edge computing for business objectives, in this article. This system
    was tested in a pilot site located in Songsan Green City, Republic of Korea. The
    advanced Agricultural IoT sensors developed by Korean companies, a standard network
    flow that is possible for scalability, and edge computing tasks suitable for greenhouse
    mushroom cultivation, together with examples of how to implement them, were introduced
    through the proposed SAIS architecture. Finally, a potential SAIS architecture
    for business purposes in future studies was also suggested, especially for the
    developing country markets that consider smart agriculture development as the
    core industry. 2. Background and Related Work 2.1. Smart Agriculture Information
    System (SAIS) The traditional FMIS, which relied on simple farm recordkeeping
    tasks, has been developed since the 1970s to provide useful information for decision-makers
    to effectively manage farming activities [23]. However, in the era of Agriculture
    4.0 nowadays, the adoption of a traditional FMIS is limited when massive data
    are provided from the IoT sensors and complex tasks are required for modern farm
    management [24,25]. To cope with the rapid increase of agricultural data pools
    and data-driven farming applications, the SAIS, whose cornerstone is the large
    digital FMIS specialized for precision agriculture, can improve the automation
    and efficiency in managing enormous amounts of farming information including data
    collection, data processing, and data-driven decision making [20,25]. Although
    the core of the SAIS is the multi-layered architecture comprising four basic components
    of Smart Product, Network Connection, Data, and Smart Service [22], recent studies
    paid more attention to adapting this core SAIS to the domain-specific uses by
    breaking it into higher-level architectures, ranging from the classical three-
    or four-layer up to the advanced seven- or eight-layer architectures. Among the
    classical architectures, the three-layer one, which corresponds to the two-layer
    without the Network Layer, refers to the Device-Cloud protocol where the raw data
    obtained by sensors will be directly transmitted to the cloud for storage, processing,
    and applications. The four-layer architecture (three-layer without the Network
    Layer) can allow edge computing to involve those cloud tasks. Integrating a separate
    layer of edge computing into SAIS architectures is also gaining attraction and
    possibly becoming a trending paradigm in future studies [17]. Additionally, advanced
    architectures improved on the classical ones for business objectives by proposing
    enterprise architecture by adding new layers such as the Business, User, or Security
    Layers [26]. For more details, the readers are referred to the literature reviews
    of different multi-layered SAISs in previous studies, summarized in Table 1. Table
    1. Literature reviews of multi-layered Smart Agriculture Information Systems.
    2.2. Smart Greenhouse Mushroom Cultivation Aside from the benefits for human health
    and commerce, edible mushrooms are currently becoming the preferred crop for indoor
    cultivation, even in urban farming, because they are easily relocated, do not
    require large space and direct sunlight, and need only a short duration until
    harvesting [35]. However, the major limitation came from the high sensitivity
    of mushrooms to the surrounding environment, since extreme weather conditions
    can immediately damage mushroom health. Therefore, the most important task of
    indoor mushroom cultivation relies on the timely and continuous control of the
    key environmental parameters’ ideal conditions at every mushroom growing stage
    [36]. Previous studies listed a wide range of those key parameters [13], but the
    two most important ones that are worth regarding are air temperature and humidity,
    while several studies further considered light intensity or carbon dioxide (CO2)
    levels. The ideal ranges for these parameters vary depending on different mushroom
    species [7,37], and they can be easily, timely, and automatically observed and
    controlled in the greenhouse using IoT sensors, which have been widely reported
    in the literature as the common approach for indoor mushroom management. Alongside
    the development of computer vision and precision agriculture technologies, high-resolution
    cameras associated with AI-based image processing have been successfully applied
    in the mushroom industry to enhance management accuracy and efficiency [38]. Current
    advances improved by combining the advantages of IoT sensors and camera computer
    vision, which opens a new door for future smart greenhouse mushroom cultivation
    in particular and smart agriculture in general. Literature reviews of smart greenhouse
    mushroom management using IoT sensors, cameras, and integrated IoT sensor-camera
    systems are summarized in Table 2. Table 2. Literature reviews of smart greenhouse
    mushroom management. 3. System Architecture Design Based on the potential of the
    SAIS with edge computing and the increased need for mushroom products, this study
    aims to design and implement a multi-layered SAIS architecture with leveraging
    edge computing for cost-effective smart greenhouse mushroom cultivation. In particular,
    an integrated IoT environmental sensor-camera system and the oyster mushroom were
    selected to test in this study. To highlight the capability of coupling the edge
    computing model to the classical Device-Cloud protocol, a general three-layer
    SAIS architecture (without the Network Layer), which adopted the Edge Layer as
    a bridge for the Device and Cloud (Device-Edge-Cloud protocol), was employed.
    Moreover, we also suggested the integration of a bidirectional (two-way) communication
    mechanism in this system to separate the network flow into two major domains for
    different functional tasks, including the Forward and Backward Domains. In each
    layer, two modules were included to respond to separated functional tasks in the
    Forward and Backward Domains, respectively. The proposed SAIS architecture applied
    to greenhouse mushroom management in this paper is depicted in Figure 1. Specifically,
    according to Figure 1, the Forward Domain enables data transmission from the Device
    Layer (Data Collecting module) through the Edge Layer for quality control and
    aggregation (Data Preprocessing module), and then to the Cloud Layer (Data Storage
    module). In contrast, the Backward Domain allows an inverse direction that AI-based
    solutions developed at the Cloud Layer using stored data (Data Analytics/AI Development
    module) to be deployed at the Edge Layer for real-time applications (Real-time
    AI Deployment module), then to control the ideal conditions of the environmental
    parameters if necessary via controlling actuators/sensors at the Device Layer
    (Device Controlling module). The Forward Domain is responsible for the data management
    and storage tasks while the Backward Domain is responsible for the solutions development
    and decision-making based on the obtained data. In this study, we describe the
    proposed architecture following its network flow and focus especially on the Forward
    Domain, since it is the mainstream in the SAIS. It is important to note that although
    the Network/Communication Layer which encompasses the protocols for network connection
    is also important and was already employed in this paper, we did not focus on
    modifying this layer, so it was not mentioned here as a major layer. A detailed
    description of the proposed SAIS architecture and its implementation for smart
    greenhouse mushroom management at the testbed site is provided below. Figure 1.
    A proposed design of the Smart Agriculture Information System (SAIS) architecture
    for smart greenhouse mushroom cultivation. The blue dashed border and arrows indicate
    the Forward Domain and its procedure, and the red dashed border and arrows indicate
    the Backward Domain and its procedure. 3.1. Forward Domain–Device Layer The Device
    Layer is the first layer in this proposed SAIS architecture, which enables a workspace
    for Agricultural IoT end devices. In this layer, the Data Collecting module is
    particularly responsible for the Forward Domain. Its detailed architecture is
    presented in Figure 2. Figure 2. The architecture of the Forward Domain in the
    Device Layer. Data Collecting: This module aims to collect farming and environmental
    data observed from the IoT sensors system. Since the integrated IoT environmental
    sensor-camera system was employed, this module was separated into two sub-modules
    for better management, consisting of (1) the one-dimensional (1D) Data sub-module
    which stands for point environmental data collected from the IoT sensors, and
    (2) the two-dimensional (2D) Data sub-module, which stands for image data collected
    from the cameras. 1-Dimensional Data (1): This sub-module offers a workspace for
    the point IoT sensors to collect the environmental data time series. Because temperature,
    humidity, and CO2 are generally the key environmental parameters for mushroom
    growth in the literature, they were considered in this system. A three-in-one
    IoT environmental sensor, which measures automatically and simultaneously the
    three key parameters of temperature (T), relative humidity (RH), and CO2 levels
    (CO2) in real-time using only one sensor, was adopted in this study. This low-cost
    combination sensor is a domestic Korean product that was researched and developed
    by the Sejong Rain Company, Republic of Korea, and is currently being tested before
    commercialization. Even though this combination sensor can observe real-time data,
    the maximum 10 min time resolution has been set to be updated in this sub-module.
    For more information or inquiries on this combination IoT sensor, please refer
    to the company homepage (http://sejongrain.com/, accessed on 10 January 2024).
    Its photos and specifications are shown in Figure 3a,b, and Table 3, respectively.
    Two-Dimensional Data (2): Besides the IoT environmental sensor, this system uses
    a surveillance camera system to collect crop image/video (time series of RGB images)
    data, which enhances automation in intuitive recognition of mushroom characteristics
    (e.g., shapes, colors, species, phenological stages, or related diseases) and
    was implemented in this sub-module. Specifically, an industrial high-definition
    (HD 720p) digital camera (model SMT-720PUSBBOX) manufactured by Smtkey Electronic
    Technology Company, Shenzhen Guangdong, China, was employed to provide streaming
    images/video of the oyster mushroom. However, to match the temporal resolution
    of the environmental sensor, the camera system was set to capture image time series
    at 10 min intervals in single red (R), green (G), and blue (B) bands. A photo
    of the camera used is shown in Figure 3c and its specifications are presented
    in Table 4. Figure 3. Photos of the combination IoT environmental sensor: (a)
    displaying temperature and humidity and (b) displaying CO2 level; and (c) photo
    of the surveillance camera used in this study. The Korean word in the IoT combination
    sensor label is the name of the company who develops this device, the Sejong Rain
    Company, Republic of Korea. Table 3. Specifications of the combination IoT environmental
    sensor used. Table 4. Specifications of the surveillance camera used. 3.2. Forward
    Domain–Edge Layer The Edge Layer or edge server is a middle layer in this proposed
    three-layer SAIS, where edge computing is executed, and is the major part of this
    study. It is important to note that edge computing is not a replacement for traditional
    cloud computing, but that it is a complement for cloud computing. Edge computing
    is normally conducted in low-memory and low-power microprocessors and assigned
    for small workloads with lightweight computation, which fits in with real-time
    AI applications. In contrast, cloud computing is compatible with smart solutions
    requiring BD and heavy computation capacity. Therefore, a powerful, low-energy-consumption,
    and cost-effective Raspberry Pi single-board computer was used in this study for
    edge computing in both Forward and Backward Domains. In particular, the Raspberry
    Pi 3 Model B+, which also provides a high-speed processor suitable for HD video
    processing and dual connections via both WiFi (wireless) and Ethernet port (wired),
    was employed in the system. For a more detailed description of its specifications,
    users are referred to the company’s website (https://www.raspberrypi.com/, accessed
    on 10 January 2024). The related tasks are shown in the Data Preprocessing module
    for the Forward Domain, and its architecture is depicted in Figure 4. Figure 4.
    The architecture of the Forward Domain in the Edge Layer. Data Preprocessing:
    It is important to note that not all the raw data should be stored in the cloud.
    Selecting essential data for the cloud can save resources by decreasing cloud
    and bandwidth workloads. Hence, the main mission of this module is to reduce the
    number of raw data observed from the Device Layer while keeping data quality before
    sending them to the Cloud Layer, based on the following sub-modules for preprocessing:
    Small-Data Storage (1): Since a previous study indicated the effective greenhouse
    mushroom monitoring on an hourly basis [13], we also set a one-hour (1 h) interval
    as the standard temporal resolution to be sent to the cloud and for mushroom cultivation
    in this study. To this end, several raw data should be stored in the Edge Layer
    for further temporal data resampling and quality control development. Temporal
    Resampling (2): The temporal resampling applied in this sub-module aims to convert
    the 10 min raw data into hourly data and relies on a simple Average Filtering
    method, whereas the six raw data samples within every 1h interval stored in the
    Small-Data Storage sub-module will be transferred to this sub-module for averaging
    into one data sample. This method can be applied to both 1D and 2D data in this
    SAIS and may help it reduce the number of data together with overcoming the temporal
    gaps (missing data) that occurred at the original 10 min interval. Data Quality
    Control (3): Despite the benefit of temporal resampling in dealing with the gaps
    in raw data time series, the resampled data still probably suffer from temporal
    gaps (when six raw data samples are missing values) or sudden extreme conditions.
    This requires an AI-based data quality control filter that can not only automatically
    and continuously detect such outliers in the data stream, but also has a low computational
    cost when it is applied to the Edge Layer. Even though several lightweight AI
    models are compatible with edge/fog computing, the well-known k-nearest neighbors
    (k-NN) algorithm was used for showcasing in this research. The k-NN is simply
    a non-parametric supervised learning method, which considers k samples of training
    data to solve the classification and regression problems, but it can be regarded
    as an unsupervised learning algorithm when it is applied to anomaly detection
    [50]. The k-NN integrated with a 24 h moving window was applied in this study
    to identify whether real-time data are anomalous or not, based on the lagged 23h
    data samples stored in the Small-Data Storage sub-module. Whenever the ksample
    is detected and masked, it can be continuously used to identify the (k + 1) sample,
    and the (k − 23) sample is then automatically removed from the Small-Data Storage
    sub-module. This AI-based data quality control filter can be applied to both 1D
    and 2D data. For 1D data, besides transmitting them to the Cloud Layer for long-term
    storage, the processed data were also sent to a responsive module of the Backward
    Domain in the Edge Layer to support the system’s real-time decision-making. However,
    in the case of 2D data, to reduce the high computational cost when processing
    image data, the RGB images obtained from the camera were first converted to grayscale
    images and then transformed to 1D format by simply averaging the digital number
    (DN) values within an image scene (scene-averaging) before they can be applied,
    with the data quality control filter. Anomalous DN data samples closer to 0 can
    be identified as temporal gaps (black images), while those with high values (e.g.,
    higher than 80—a typical average grayscale digital number value) can be classified
    as light images, which still provide useful information. The quality-controlled
    image data on an hourly basis were sent only to the Cloud Layer. 3.3. Forward
    Domain–Cloud Layer The Cloud Layer is the final layer in this proposed SAIS, which
    is widely used in various architectures and allows high computational application
    development based on the quality-controlled BD. Hence, the Forward Domain offers
    long-term high-quality data to be stored firstly in the Cloud Layer under the
    Data Storage module management. Data Storage: Because the accuracy of AI models
    significantly depends on the quality and quantity of the training data, this module
    aims to provide a space to store long-term (e.g., one life cycle of mushrooms)
    high-quality data observed from the integrated environmental sensor-camera system
    to develop AI-based solutions which require a high computation cost. These necessary
    datasets stored in this module can be then transmitted to the responsive module
    of the Backward Domain in the Cloud Layer for training AI models with respect
    to specific user requirements. 3.4. Backward Domain–Cloud Layer As highlighted
    in the description above, the mission of the Backward Domain is to develop AI-based
    smart solutions and make decisions based on the collected and stored data in the
    Forward Domain. Therefore, in the Cloud Layer, the Backward Domain tasks are conducted
    in the AI Development module. Figure 5 presents the architecture of the Backward
    Domain in the Cloud Layer. Figure 5. The architecture of the Backward Domain in
    the Cloud Layer. AI Development: This module is designed to account for AI-based
    smart solution development for specific demands, which requires BD for high computational
    cost training and complex analytics. The implementation of this module in the
    Backward Domain of the Cloud Layer follows the two sub-modules: AI Model Training
    (1): This sub-module includes the feature selection task for training AI models
    based on user-specific demands, whereas relevant important features were extracted
    from the BD in the Data Storage module. Furthermore, several well-known AI model
    candidates will be selected for training. Parameter Storage (2): The optimal AI
    model among the candidates was chosen and its optimal parameters were then stored
    in this sub-module for further deployment. Various AI-based smart greenhouse mushroom-cultivation
    solutions can be considered for development. However, to showcase only one example
    of the high-computational-cost AI model application with BD (mostly with image/video
    data) in the Cloud Layer, a well-known, fast, effective, and advanced computer
    vision algorithm version among the series of the “You Only Look Once” (YOLO) framework
    [51], the YOLOv5 model, was used in this study for real-time mushroom detection
    with a surveillance camera. Specifically, the YOLOv5 model, whose cornerstone
    is a simple deep convolutional neural network, was introduced in 2020 to improve
    on its predecessors in object detection. The YOLOv5 model divides images into
    a grid cell and finally predicts the objects with multiple bounding boxes per
    grid cell. Its architecture consists of three main components: the BackBone for
    feature extraction, the Neck for feature fusion, and the Head for feature conversion
    to bounding-box parameters. The BD images stored in the Big-Data Storage module
    can be labeled for training the YOLOv5 model. To reduce the training costs (including
    the training time and number of training-data samples), this study adopted the
    Transfer Learning method to fine-tune the pre-trained YOLOv5 model for mushroom
    detection to be compatible with the current training mushroom images in the Big-Data
    Storage module. The optimal model parameters were stored in the Parameter Storage
    sub-module and then transferred to the Edge Layer for real-time deployment. 3.5.
    Backward Domain–Edge Layer The Backward Domain in the Edge Layer provides the
    workspace for real-time smart agriculture solution deployment, which was assigned
    to the Real-time AI Deployment module, with its architecture provided in Figure
    6. Figure 6. The architecture of the Backward Domain in the Edge Layer. Real-time
    AI Deployment: This module consists of four sub-modules for integrating analytics
    from both environmental sensors and cameras to improve real-time solution/decision
    making, as follows: Short-term Analytics (1): This sub-module receives the analytical
    results from the Forward Domain in the Edge Layer (Data Preprocessing module),
    mainly based on temporary small-data storage of the 1D data from the IoT environmental
    sensor. Long-term Analytics (2): The optimal AI model obtained from the Backward
    Domain based on BD analytics in the Cloud Layer (AI Development module) was deployed
    in this sub-module, mainly for the 2D image data. Integrated Analytics (3): This
    sub-module combines the analytical results from the Short-term and Long-term Analytics
    sub-modules to enhance decision-making. Solutions/Decision Making (4): Relevant
    solutions/decisions will be made in this sub-module, based on the results from
    the Integrated Analytics sub-module. 3.6. Backward Domain–Device Layer The Backward
    Domain in the Device Layer covers the Device Controlling module. Device Controlling:
    This module aims to automatically control sensors/actuators to make farm management
    decisions as soon as possible, based on the analytical solutions provided by the
    Real-time AI Deployment module in the Edge Layer. For example, the image-based
    mushroom detection solution allows users to recognize whether the mushrooms are
    currently in the growing period or have been harvested. In the case of extreme
    conditions observed by the environmental sensor during the mushroom growing period,
    this module enables the modulating of key environmental parameters by controlling
    IoT sensors/actuators such as the heater/cooling fan (for temperature), humidifier/dehumidifier
    (for humidity), or air ventilation (for CO2 level) via connection to a microcontroller.
    4. Implementation Results 4.1. Implementation of Forward Domain–Device Layer Installation
    of the integrated IoT environmental sensor-surveillance camera system for smart
    greenhouse mushroom cultivation is the first implementation step and was carried
    out in a mushroom house located in Songsan Green City, Republic of Korea. This
    system aims to collect the key environmental parameters affecting mushroom growth
    and intuitive mushroom information, which is the responsibility of the Data Collecting
    module belonging to the Forward Domain in the Device Layer. Figure 7 describes
    the installation of the combination IoT environmental sensor for simultaneously
    measuring the real-time 1D data of three key environmental parameters including
    air temperature (T), atmospheric relative humidity (RH), and CO2 level (CO2),
    together with the construction of a data logger containing the Raspberry Pi single-board
    computer. Data collected from the IoT environmental sensor were then transmitted
    to the data logger for further processing, mainly via a wireless connection (Figure
    7a). However, we also set up ethernet cables here to ensure that data transmission
    can be automatically switched to a wired connection when the wireless connection
    collapses, maintaining their stable transmission (Figure 7b). It is important
    to note that although the environmental sensor was set up in the greenhouse environment,
    we constructed the data logger outside the mushroom house for future combination
    with outdoor smart agriculture sensors/actuators such as smart precipitation gauges,
    unmanned aerial vehicles, tractors, and so on (Figure 7c). Figure 7. Installation
    of the combination IoT environmental sensor for the greenhouse mushroom information
    system with connection to data logger via the following: (a) wireless connection
    and (b) wired connection. (c) Construction of data logger outdoors with potential
    combination with outdoor sensors. The Korean words in the label of the data logger
    represent for the system name “Agriculture Environment Data Collection System”
    and the company name “Sejong Rain”. The time series of the raw 1D data (at 10
    min of temporal resolution) for the three key parameters from the installed IoT
    environmental sensor for nearly one month (one life cycle of the mushroom) is
    depicted in Figure 8. In general, no major operational errors occurred when continuous
    data were collected without missing values and the observed data range fell within
    the sensor’s allowable measuring range for each parameter, according to Table
    3. This suggests that the combination IoT environmental sensor used in this study,
    which was developed by the Korean company, is ready and has potential for smart
    mushroom monitoring and further applications in smart agriculture. Figure 8. Time
    series of 1D raw data in 10 min intervals collected from the combination IoT environmental
    sensor for (a) temperature (T), (b) humidity (RH), and (c) CO2 level (CO2). Besides
    the IoT environmental sensor, the simultaneous installation of the surveillance
    camera to capture real-time intuitive 2D data for crop information was also implemented
    in the pilot area, as illustrated in Figure 9. The camera was fixed to collect
    a time series of RGB images covering a partial mushroom farm for preliminary testing.
    We also connected the camera system to the data logger for data transmission.
    Figure 9. Installation of the surveillance camera for the greenhouse-mushroom
    information system. Time series of the raw 2D data at 10 min time intervals were
    obtained from the installed surveillance camera. We showcase several RGB image
    samples of mushrooms at different growth stages in Figure 10. It can be drawn
    from Figure 10 that intuitive mushroom information can be well captured by the
    installed surveillance camera, even with the changes between growth stages. However,
    there are several temporal gaps (image samples with no-value/black images) that
    occurred during the operation which need to be noticed and addressed. All the
    raw data collected in the Device Layer were then sent to the Edge Layer for pre-processing.
    Figure 10. Samples of 2D raw data in 10 min intervals collected from the surveillance
    camera during different mushroom growth stages. The red rectangle highlights the
    gap (no-value data) in the data stream. 4.2. Implementation of Forward Domain–Edge
    Layer The raw 1D and 2D data collected at the Device Layer were then delivered
    to the Forward Domain in the Edge Layer for further preprocessing before being
    transmitted to the Cloud Layer. The Edge Layer is the major layer in this designed
    SAIS, whose main goal is a stepping stone toward saving cloud and bandwidth resources
    as well as selecting essential data for the cloud server. Therefore, the Forward
    Domain in this layer (represented by the Data Preprocessing module) is responsible
    for reducing unnecessary data collected from the Device Layer and conducting quality
    control for high-quality data sent to the Cloud Layer. To this end, several raw
    data samples (small data) should be stored in this layer for a short period and
    the Small-Data Storage sub-module is responsible for providing storage space in
    this task. The first preprocessing task in this module is data reduction. Since
    the mushroom monitoring on an hourly basis is sufficient and was selected as the
    standard temporal resolution to be updated in the cloud, an average filtering
    technique was utilized as the temporal resampling method to convert 10 min data
    into 1h data. Figure 11 illustrates examples of how to conduct this temporal resampling
    method in both 1D and 2D data time series. In particular, every six raw data samples/images
    within a current 1h duration were initially stored. Since no significant differences
    were observed among these raw data, an hourly representative point value/image
    can be generated by simply taking an average of those six data samples/images.
    After an hourly representative data sample/image is given, it will be sent back
    to the Small-Data Storage sub-module for temporal storage and the current raw
    data will be automatically removed from this sub-module for updating the coming
    raw data. It is important to note that, besides the data reduction benefit, this
    method also supports dealing with temporal gap problems, ensuring continuous measurement
    of the data stream. For example, a black image (temporal gap) that occurred in
    the raw 2D data was successfully removed and replaced by a representative image
    (average image of the six raw data in 10 min intervals within every 1h interval)
    while keeping sufficient information, as illustrated in Figure 11b. Figure 11.
    Examples of the temporal resampling based on the average filtering method to resample
    raw data in 10 min intervals into standard data in 1h intervals applied to the
    following: (a) 1D data from the environmental sensor and (b) 2D data from the
    camera. The red dashed rectangle represents the 1h data window. The second preprocessing
    task in the Forward Domain of the Edge Layer is for data quality control, which
    is covered by the Data Quality Controlling sub-module. For the 1D data, since
    the important task of smart greenhouse mushroom cultivation is mainly based on
    modulating the ideal conditions of key environmental parameters, this sub-module
    aims to determine the sudden extreme conditions occurring in the environmental
    data, supporting the system with timely responses to address the problems as well
    as managing high-quality data sent to the cloud server. However, because edge
    computing is compatible with light computing applications that can work well in
    short-term small-data numbers stored in this layer, effective and lightweight
    AI algorithms are preferable for this task. As a result, a widely used lightweight
    AI model, the k-NN algorithm, was selected as the anomaly-detection method in
    this study. More specifically, the k-NN was conducted in a 24h moving window (k
    = 23) for the continuous hourly data samples stored in the Small-Data Storage.
    The real-time outlier detection of the current data sample (the k sample) can
    be performed based on its recent 23 lagged hourly data samples. Whenever the k
    sample is detected and masked, it can be continuously used to identify the (k
    + 1) sample, and the (k − 23) sample is automatically deleted from the Small-Data
    Storage sub-module. Figure 12 presents the results of applying the k-NN algorithm-based
    anomaly detection to the 1D hourly data of three key environmental parameters
    for mushroom cultivation. These successful implementation results of the k-NN
    model-based anomaly detection in the 1D environmental data, as illustrated in
    Figure 12, highlight the suitability and potential application of lightweight
    AI models for edge computing. Figure 12. Results of the AI-based anomaly-detection
    application to the 1D hourly (hr) environmental data for (a) temperature (T),
    (b) humidity (RH), and (c) CO2 level (CO2). As regards the 2D data, one problem
    is that although the temporal resampling method can deal with temporal gaps in
    the raw data, they still possibly occur in the resampled data (when the six original
    images within one hour are all black images). Hence, the anomaly-detection method
    should be applied to the hourly 2D data to detect these gaps. However, to deal
    with the high computational cost when processing numerous crop images, a preprocessing
    procedure series was applied to the 2D data to transform them into 1D data before
    conducting the AI-based anomaly detection. In particular, an RGB image was first
    converted to a grayscale image and subsequently transformed into a digital number
    value by averaging grayscale digital numbers from all pixels within an image scene
    (scene averaging). Figure 13 provides a general example of how to carry out AI-based
    anomaly detection in the 2D data and their results for mushroom images in this
    study. As can be seen from Figure 13, two types of outliers have been identified
    by using the k-NN anomaly-detection method. Anomalous data with digital numbers
    closer to 0 are assigned to the temporal gaps (black images), which do not provide
    any useful information, whereas the outliers with the highest values (e.g., greater
    than 80—a typical average grayscale digital number value) are identified and masked
    as “light image”, which still provide similar crop information to the normal images
    but at a higher brightness. Finally, after the resampled data are quality-controlled,
    they will be sent to the cloud server for storage and to the Short-term Analytics
    sub-module in the Backward Domain of the Edge Layer for supporting real-time decision
    making. Figure 13. An example of the AI-based anomaly-detection application to
    the 2D image data. The color maps on the left side display the heatmap of an original
    image in digital numbers for red, green, blue, and grayscale channels. 4.3. Implementation
    of Forward- and Backward-Domain–Cloud Layer In the Cloud Layer, high-quality BD
    transmitted from the Edge Layer after passing the data quality control procedure
    will be initially stored in the Big-Data Storage Module of the Forward Domain.
    These high-quality BD stored in the Cloud Layer were then sent to the AI Development
    Module for training high-computational-cost AI models based on specific user requirements.
    This study employed a widely used deep learning-based object-detection algorithm,
    the YOLOv5 model, to address the mushroom recognition problem, mainly for the
    2D image data. Moreover, to reduce the computational cost during the training
    process, the transfer learning technique was integrated to fine-tune the pre-trained
    YOLOv5 model for adapting the mushroom images stored in the Cloud Layer. Detailed
    information on training and evaluation of the YOLOv5 model for mushroom detection
    in this study is shown in Table 5. The obtained optimal hyperparameters were subsequently
    stored in the Parameter Storage module and were used for real-time deployment
    of this solution in the Edge Layer. Table 5. Information on the training and evaluation
    of the YOLOv5 model for mushroom detection. 4.4. Implementation of Backward Domain–Edge
    Layer The Backward Domain in the Edge Layer, which was carried out by the Real-time
    AI Development module, aims to provide integrated analytics for decision-making
    by combining the results of short-term and long-term analytics. In particular,
    on the one hand, the Short-term Analytics module in this layer obtained the key
    environmental-parameter anomaly-detection results from the Forward Domain in the
    Edge Layer, which was described in the section above (Implementation of Forward
    Domain–Edge Layer) and is shown in Figure 12. On the other hand, when it comes
    to long-term analytics, this module adapted the developed YOLOv5-based mushroom-recognition
    model for detection, based on the stored optimal model hyperparameters from the
    Backward Domain in the Cloud Layer. Representative examples of the YOLOv5 model
    deployment for mushroom detection in this study are depicted in Figure 14, whereas
    single-object (mushroom) areas are detected in continuous images with the red
    bounding box and confidence level by further applying instance segmentation. According
    to the figure, in general, most of the mushroom areas during the fruiting period
    can be well identified by the system, with a clear discrimination of the non-mushroom
    areas observed. This indicated the successful deployment of a high-computational-cost
    AI model in the Edge Layer, demonstrating its suitability to adopt a developed
    AI model in the Cloud Layer for edge computing. However, there are still several
    mushroom areas in an image that the system cannot detect, suggesting the need
    for retraining the model to improve its performance by the updated high-quality
    BD sent to the Cloud. The results from the long-term analytics can be integrated
    with those from the short-term analytics to support the system’s decision-making.
    For example, if outliers are detected in the streaming environmental data (results
    from the short-term analytics) during the mushroom’s fruiting period (results
    from the long-term analytics), the system can automatically send an alert notification
    to the users or control the sensors/actuators for maintaining the normal status
    of environmental conditions. Figure 14. An example of implementation of the Real-time
    AI Deployment module (deployment of YOLOv5 and transfer learning in mushroom detection).
    5. Discussion and Future Direction The major difference between this proposed
    research and related work mentioned in Table 1 and Table 2 is the combined use
    of the edge-computing paradigm in a smart greenhouse mushroom-cultivation information
    system. In particular, the Edge Layer was not included in the SAIS architecture
    for mushroom cultivation in Table 1 [28], while none of the previous mushroom
    management studies in Table 2 employed the edge computing model in their system.
    Thus, the successful practical application of this study can shed new light on
    leveraging edge-computing paradigm shifts as well as improving smart mushroom
    cultivation systems. In addition, a minor discrepancy that is worth mentioning
    is the introduction of a new low-cost combination IoT environmental sensor made
    by a Korean company. This product combines three single sensors for different
    environmental parameters into one sensor (three-in-one sensor) and also employs
    low-cost Raspberry Pi single-board computers working in the resource-saving edge
    computing paradigm, so it can contribute to the diverse selections for clients
    in low-cost smart agriculture devices and information system markets. Notwithstanding
    the benefits of edge computing in complementing classical cloud computing and
    in improving smart greenhouse mushroom cultivation, this preliminary study may
    suffer from several challenges in the future. First, the implementation costs
    when scaling this framework up to a larger scale for other crops, together with
    integrating outdoor smart agriculture systems, are questionable, since additional
    costs from new IoT devices and their installation might be included in the system.
    This may limit the commercialization of this framework for business objectives.
    Second, the improvement in mushroom production efficiency when the edge computing
    paradigm is included is not fully analyzed, suggesting the implementation of more
    detailed analyses for this problem in further studies. Addressing potential challenges
    is also related to the future outlook of this research. Besides the application
    customized for mushroom cultivation, the successful practical implementation of
    this study suggests a potential to scale up this framework for business objectives
    and other user-specific requirements (e.g., other crops) in future studies. To
    this end, in the future direction, this fundamental SAIS architecture is expected
    to be coupled with the two new layers, including the User and Administration Layers.
    The potential architecture for future the SAIS is illustrated in Figure 15, and
    a detailed description for each added layer is provided below. Figure 15. The
    potential architecture of the future SAIS for business objectives. The blue dashed
    border and arrows indicate the Forward Domain and its procedure, and the red dashed
    border and arrows indicate the Backward Domain and its procedure. User Layer:
    This layer is particularly designed for the users of the SAIS such as farmers
    or clients. From the user’s perspective, the acquisition of quality-controlled
    datasets and the intuitive visualization of these datasets with timely notifications
    if any anomalous events occur from the Cloud Layer, and the capability to control
    the devices manually in an emergency in the Device Layer, are preferable. Thus,
    several respective modules such as Data Extraction, Visualization/Notification,
    or Manual Device Controlling Modules can be considered in this layer. Since the
    users mainly work in the Device and Cloud Layers, the users can only access these
    two layers, and they do not need to access the Edge Layer to adjust any edge computing
    tasks. Administration Layer: This layer is particularly designed for the providers
    or developers (e.g., companies) of the SAIS for business goals. Unlike the users,
    the administrators aim to manage all the data flow from the Device Layer to the
    Cloud Layer, so they can access and collect data from all the layers in this system,
    which can be conducted by the Data Extraction/Management module. Moreover, the
    administrators can meet the specific user requirements by developing suitable
    solutions, and ensure the safety of the system by maintaining the security. Therefore,
    the two respective modules including Application Development and Network Security
    are considered in this layer. Not only are the above additional layers being included,
    but the Device Layer is also planning to be extended with new sensors, in the
    future system. Microcontrollers and several controlling sensors/actuators (e.g.,
    heaters, fans, humidifiers, or air ventilation…) are expected to be utilized,
    which can complement the current indoor system. Furthermore, a parallel SAIS for
    outdoor smart agriculture with relevant IoT devices (e.g., smart rain gauges,
    automated weather sensors, irrigation valves, or unmanned aerial vehicles…) can
    be considered and developed for an integrated indoor–outdoor smart agriculture
    system. 6. Conclusions Traditional Device-Cloud protocol in smart agriculture
    often suffers from the challenges of delayed system responses caused by low bandwidth
    and high latency, together with high cloud-service costs for data computation
    and storage when enormous numbers of data acquired from IoT devices are directly
    transmitted to the cloud server without processing. Novel edge computing offers
    an effective solution to deal with challenges in this traditional protocol by
    shifting partial data storage and computation capability from the cloud server
    to edge devices. Nevertheless, selecting which tasks can be implemented in edge
    computing depends on user-specific demands, suggesting the need to design a specific
    and proper Smart Agriculture Information System (SAIS) architecture that is compatible
    with single-crop requirements. Based on the nutritious and commercial benefits
    of edible mushrooms as well as the necessity of cost reduction from a business
    viewpoint, the major goal of this study is to design and implement a standard
    multilayered SAIS architecture for smart greenhouse mushroom cultivation toward
    leveraging edge computing, which can be scalable for business goals. In this designed
    SAIS, the three-layer architecture, which couples edge computing in the central
    layer to connect the Device and Cloud Layers (Device-Edge-Cloud protocol) and
    enables automation in mushroom management using an integration of the IoT environmental
    sensor (for mushroom key environmental-parameter monitoring) and surveillance
    camera (for intuitive mushroom monitoring) was employed and tested in a testbed
    site in the Republic of Korea. Via this designed SAIS, we aim to introduce the
    advanced combination environmental IoT sensors developed by Korean companies,
    a standard network flow that is possible for scalability and suitable edge computing
    tasks, with typical examples. Moreover, a potential SAIS architecture with additional
    layers for a future direction for business purposes was also suggested. The successfully
    implemented SAIS architecture indicated that our combination IoT environmental
    sensor integrated with a surveillance camera could monitor the real-time key environmental
    parameters affecting mushroom growth and intuitive mushroom information. Typical
    examples of mushroom cultivation based on the collected data revealed that several
    low-cost data pre-processing procedures including small-data storage, temporal
    resampling-based data reduction, and lightweight artificial intelligence (AI)-based
    data quality control for anomaly detection within environmental conditions, together
    with real-time AI model (YOLOv5) deployment for mushroom recognition from crop
    images, are compatible with edge computing. In contrast, high-quality BD storage
    and high-computational-cost AI model development can be implemented in the cloud.
    Moreover, integrating the Edge Layer as the center of the traditional protocol
    can significantly save network resources and operational costs by reducing unnecessary
    data sent from the device to the cloud while keeping sufficient information. Finally,
    the future improvement suggests including additional layers to meet user-specific
    demands for business objectives and the extension of the current system with new
    controlling sensors and a parallel outdoor system, toward an integrated indoor–outdoor
    smart agriculture system. Author Contributions Conceptualization, H.H.N., D.-Y.S.
    and D.-H.L.; methodology, H.H.N. and D.-Y.S.; software, H.H.N.; validation, D.-Y.S.,
    W.-S.J. and T.-Y.K.; formal analysis, T.-Y.K.; investigation, W.-S.J.; resources,
    D.-Y.S.; data curation, H.H.N.; writing—original draft preparation, H.H.N.; writing—review
    and editing, D.-Y.S., W.-S.J. and T.-Y.K.; visualization, H.H.N.; supervision,
    D.-H.L.; project administration, D.-H.L.; funding acquisition, D.-H.L. All authors
    have read and agreed to the published version of the manuscript. Funding This
    research was supported by the “Regional Innovation Strategy” (RIS) through the
    National Research Foundation of Korea (NRF), funded by the Ministry of Education
    (MOE) (2021RIS-004), and the research fund of Chungnam National University (CNU),
    Republic of Korea (2022-0694-01). The APC was also funded by the MOE through the
    NRF RIS project (2021RIS-004) and the CNU research fund (2022-0694-01). Data Availability
    Statement The raw data supporting the conclusions of this article will be made
    available by the authors on request. Conflicts of Interest Authors Hoang Hai Nguyen
    and Dae-Yun Shin were employed by the company Sejong Rain Co., Ltd. The remaining
    authors declare that the research was conducted in the absence of any commercial
    or financial relationships that could be construed as a potential conflict of
    interest. The funders had no role in the design of the study; in the collection,
    analyses, or interpretation of data; in the writing of the manuscript; or in the
    decision to publish the results. References Ba, D.M.; Ssentongo, P.; Beelman,
    R.B.; Muscat, J.; Gao, X.; Richie, J.P. Higher Mushroom Consumption Is Associated
    with Lower Risk of Cancer: A Systematic Review and Meta-Analysis of Observational
    Studies. Adv. Nutr. 2021, 12, 1691–1704. [Google Scholar] [CrossRef] [PubMed]
    Roncero-Ramos, I.; Delgado-Andrade, C. The Beneficial Role of Edible Mushrooms
    in Human Health. Curr. Opin. Food Sci. 2017, 14, 122–128. [Google Scholar] [CrossRef]
    Hamza, A.; Ghanekar, S.; Santhosh Kumar, D. Current Trends in Health-Promoting
    Potential and Biomaterial Applications of Edible Mushrooms for Human Wellness.
    Food Biosci. 2023, 51, 102290. [Google Scholar] [CrossRef] Kour, H.; Kour, D.;
    Kour, S.; Singh, S.; Jawad Hashmi, S.A.; Yadav, A.N.; Kumar, K.; Sharma, Y.P.;
    Ahluwalia, A.S. Bioactive Compounds from Mushrooms: Emerging Bioresources of Food
    and Nutraceuticals. Food Biosci. 2022, 50, 102124. [Google Scholar] [CrossRef]
    Kauserud, H.; Stige, L.C.; Vik, J.O.; Økland, R.H.; Høiland, K.; Stenseth, N.C.
    Mushroom Fruiting and Climate Change. Proc. Natl. Acad. Sci. USA 2008, 105, 3811–3814.
    [Google Scholar] [CrossRef] Procházka, P.; Soukupová, J.; Tomšík, K.; Mullen,
    K.J.; Čábelková, I. Climatic Factors Affecting Wild Mushroom Foraging in Central
    Europe. Forests 2023, 14, 382. [Google Scholar] [CrossRef] Rukhiran, M.; Sutanthavibul,
    C.; Boonsong, S.; Netinant, P. IoT-Based Mushroom Cultivation System with Solar
    Renewable Energy Integration: Assessing the Sustainable Impact of the Yield and
    Quality. Sustainability 2023, 15, 13968. [Google Scholar] [CrossRef] Sujatanagarjuna,
    A.; Kia, S.; Briechle, D.F.; Leiding, B. MushR: A Smart, Automated, and Scalable
    Indoor Harvesting System for Gourmet Mushrooms. Agriculture 2023, 13, 1533. [Google
    Scholar] [CrossRef] Elijah, O.; Rahman, T.A.; Orikumhi, I.; Leow, C.Y.; Hindia,
    M.N. An Overview of Internet of Things (IoT) and Data Analytics in Agriculture:
    Benefits and Challenges. IEEE Internet Things J. 2018, 5, 3758–3773. [Google Scholar]
    [CrossRef] Pan, J.; McElhannon, J. Future Edge Cloud and Edge Computing for Internet
    of Things Applications. IEEE Internet Things J. 2018, 5, 439–449. [Google Scholar]
    [CrossRef] Alharbi, H.A.; Aldossary, M. Energy-Efficient Edge-Fog-Cloud Architecture
    for IoT-Based Smart Agriculture Environment. IEEE Access 2021, 9, 110480–110492.
    [Google Scholar] [CrossRef] Singh, R.; Gill, S.S. Edge AI: A Survey. Internet
    Things Cyber-Phys. Syst. 2023, 3, 71–92. [Google Scholar] [CrossRef] Islam, M.A.;
    Islam, M.A.; Miah, M.S.U.; Bhowmik, A. An Automated Monitoring and Environmental
    Control System for Laboratory-Scale Cultivation of Oyster Mushrooms Using the
    Internet of Agricultural Thing (IoAT). In Proceedings of the 2nd International
    Conference on Computing Advancements, Dhaka, Bangladesh, 10–12 March 2022; pp.
    207–212. [Google Scholar] [CrossRef] Das, R.; Inuwa, M.M. A Review on Fog Computing:
    Issues, Characteristics, Challenges, and Potential Applications. Telemat. Inform.
    Rep. 2023, 10, 100049. [Google Scholar] [CrossRef] Shi, W.; Cao, J.; Zhang, Q.;
    Li, Y.; Xu, L. Edge Computing: Vision and Challenges. IEEE Internet Things J.
    2016, 3, 637–646. [Google Scholar] [CrossRef] Zhang, X.; Cao, Z.; Dong, W. Overview
    of Edge Computing in the Agricultural Internet of Things: Key Technologies, Applications,
    Challenges. IEEE Access 2020, 8, 141748–141761. [Google Scholar] [CrossRef] Lin,
    Y.B.; Chen, W.E.; Chang, T.C.Y. Moving from Cloud to Fog/Edge: The Smart Agriculture
    Experience. IEEE Commun. Mag. 2023, 61, 86–92. [Google Scholar] [CrossRef] da
    Costa Bezerra, S.F.; Filho, A.S.M.; Delicato, F.C.; da Rocha, A.R. Article Processing
    Complex Events in Fog-Based Internet of Things Systems for Smart Agriculture.
    Sensors 2021, 21, 7226. [Google Scholar] [CrossRef] Mansouri, Y.; Babar, M.A.
    A Review of Edge Computing: Features and Resource Virtualization. J. Parallel
    Distrib. Comput. 2021, 150, 155–183. [Google Scholar] [CrossRef] Köksal; Tekinerdogan,
    B. Architecture Design Approach for IoT-Based Farm Management Information Systems.
    Precis. Agric. 2019, 20, 926–958. [Google Scholar] [CrossRef] Murakami, E.; Saraiva,
    A.M.; Ribeiro, L.C.M.; Cugnasca, C.E.; Hirakawa, A.R.; Correa, P.L.P. An Infrastructure
    for the Development of Distributed Service-Oriented Information Systems for Precision
    Agriculture. Comput. Electron. Agric. 2007, 58, 37–48. [Google Scholar] [CrossRef]
    Strobel, G. Farming in the Era of Internet of Things: An Information System Architecture
    for Smart Farming. WI2020 Community Tracks 2020, 208–223. [Google Scholar] [CrossRef]
    Fountas, S.; Carli, G.; Sørensen, C.G.; Tsiropoulos, Z.; Cavalaris, C.; Vatsanidou,
    A.; Liakos, B.; Canavari, M.; Wiebensohn, J.; Tisserye, B. Farm Management Information
    Systems: Current Situation and Future Perspectives. Comput. Electron. Agric. 2015,
    115, 40–50. [Google Scholar] [CrossRef] Sørensen, C.G.; Fountas, S.; Nash, E.;
    Pesonen, L.; Bochtis, D.; Pedersen, S.M.; Basso, B.; Blackmore, S.B. Conceptual
    Model of a Future Farm Management Information System. Comput. Electron. Agric.
    2010, 72, 37–47. [Google Scholar] [CrossRef] Villa-Henriksen, A.; Edwards, G.T.C.;
    Pesonen, L.A.; Green, O.; Sørensen, C.A.G. Internet of Things in Arable Farming:
    Implementation, Applications, Challenges and Potential. Biosyst. Eng. 2020, 191,
    60–84. [Google Scholar] [CrossRef] Winter, R.; Fischer, R. Essential Layers, Artifacts,
    and Dependencies of Enterprise Architecture. In Proceedings of the 2006 10th IEEE
    International Enterprise Distributed Object Computing Conference Workshops (EDOCW’06),
    Hong Kong, China, 16–20 October 2006; pp. 30–38. [Google Scholar] [CrossRef] Li,
    X.H.; Cheng, X.; Yan, K.; Gong, P. A Monitoring System for Vegetable Greenhouses
    Based on a Wireless Sensor Network. Sensors 2010, 10, 8963–8980. [Google Scholar]
    [CrossRef] [PubMed] Moysiadis, V.; Karaiskou, C.; Kokkonis, G.; Moscholios, I.D.;
    Sarigiannidis, P. A System Architecture for Smart Farming on Mushroom Cultivation.
    In Proceedings of the 2022 5th World Symposium on Communication Engineering (WSCE),
    Nagoya, Japan, 16–18 September 2022; pp. 89–94. [Google Scholar] [CrossRef] Ferrández-Pastor,
    F.J.; García-Chamizo, J.M.; Nieto-Hidalgo, M.; Mora-Pascual, J.; Mora-Martínez,
    J. Developing Ubiquitous Sensor Network Platform Using Internet of Things: Application
    in Precision Agriculture. Sensors 2016, 16, 1141. [Google Scholar] [CrossRef]
    [PubMed] Carpio, F.; Jukan, A.; Sanchez, A.I.M.; Amla, N.; Kemper, N. Beyond Production
    Indicators: A Novel Smart Farming Application and System for Animal Welfare. In
    Proceedings of the Fourth International Conference on Animal-Computer Interaction,
    Milton Keynes, UK, 21–23 November 2017; pp. 1–11. [Google Scholar] [CrossRef]
    Verma, S.; Gala, R.; Madhavan, S.; Burkule, S.; Chauhan, S.; Prakash, C. An Internet
    of Things (IoT) Architecture for Smart Agriculture. In Proceedings of the 2018
    Fourth International Conference on Computing Communication Control and Automation,
    Pune, India, 16–18 August 2018; pp. 1–4. [Google Scholar] [CrossRef] Zamora-Izquierdo,
    M.A.; Santa, J.; Martínez, J.A.; Martínez, V.; Skarmeta, A.F. Smart Farming IoT
    Platform Based on Edge and Cloud Computing. Biosyst. Eng. 2019, 177, 4–17. [Google
    Scholar] [CrossRef] Ray, P.P. Internet of Things for Smart Agriculture: Technologies,
    Practices and Future Direction. J. Ambient Intell. Smart Environ. 2017, 9, 395–420.
    [Google Scholar] [CrossRef] Khan, F.A.; Abubakar, A.; Mahmoud, M.; Al-Khasawneh,
    M.A.; Alarood, A.A. Cotton Crop Cultivation Oriented Semantic Framework Based
    on IoT Smart Farming Application. Int. J. Eng. Adv. Technol. 2019, 8, 480–484.
    [Google Scholar] Ramli, M.I.; Ariffin, M.A.M.; Zainol, Z.; Amin, M.N.M.; Hirawan,
    D.; Sumitra, I.D.; Jamil, N. Design of a Smart Portable Farming Kit for Indoor
    Cultivation Using the Raspberry Pi Platform. Pertanika J. Sci. Technol. 2023,
    31, 1731–1754. [Google Scholar] [CrossRef] Chen, L.; Qian, L.; Zhang, X.; Li,
    J.; Zhang, Z.; Chen, X. Research Progress on Indoor Environment of Mushroom Factory.
    Int. J. Agric. Biol. Eng. 2022, 15, 25–32. [Google Scholar] [CrossRef] Suresh,
    M.; Srinivasan, M.; Gowri Shankar, S.; Karthikeyan, D.; Nakhul, V.; Naveen Kumar,
    A.; Sundar, S.; Maniraj, P. Monitoring and Automatic Control of Various Parameters
    for Mushroom Farming. IOP Conf. Ser. Mater. Sci. Eng. 2021, 1055, 012011. [Google
    Scholar] [CrossRef] Yin, H.; Yi, W.; Hu, D. Computer Vision and Machine Learning
    Applied in the Mushroom Industry: A Critical Review. Comput. Electron. Agric.
    2022, 198, 107015. [Google Scholar] [CrossRef] Kassim, M.R.M.; Harun, A.N.; Yusoff,
    I.M.; Mat, I.; Kuen, C.P.; Rahmad, N. Applications of Wireless Sensor Networks
    in Shiitake Mushroom Cultivation. In Proceedings of the 2017 Eleventh International
    Conference on Sensing Technology, Sydney, NSW, Australia, 4–6 December 2017; pp.
    1–6. [Google Scholar] [CrossRef] Mohammed, M.F.; Azmi, A.; Zakaria, Z.; Tajuddin,
    M.F.N.; Isa, Z.M.; Azmi, S.A. IoT Based Monitoring and Environment Control System
    for Indoor Cultivation of Oyster Mushroom. J. Phys. Conf. Ser. 2018, 1019, 012053.
    [Google Scholar] [CrossRef] Dipali, D.; Subramanian, T.; Kumaran, G.S. A Smart
    Oyster Mushroom Cultivation Using Automatic Fuzzy Logic Controller. J. Discret.
    Math. Sci. Cryptogr. 2023, 26, 601–615. [Google Scholar] [CrossRef] Dong, J.;
    Zheng, L. Quality Classification of Enoki Mushroom Caps Based on CNN. In Proceedings
    of the 2019 IEEE 4th International Conference on Image, Vision and Computing,
    Xiamen, China, 5–7 July 2019; pp. 450–454. [Google Scholar] [CrossRef] Lu, C.P.;
    Liaw, J.J. A Novel Image Measurement Algorithm for Common Mushroom Caps Based
    on Convolutional Neural Network. Comput. Electron. Agric. 2020, 171, 105336. [Google
    Scholar] [CrossRef] Wei, B.; Zhang, Y.; Pu, Y.; Sun, Y.; Zhang, S.; Lin, H.; Zeng,
    C.; Zhao, Y.; Wang, K.; Chen, Z. Recursive-YOLOv5 Network for Edible Mushroom
    Detection in Scenes with Vertical Stick Placement. IEEE Access 2022, 10, 40093–40108.
    [Google Scholar] [CrossRef] Moysiadis, V.; Kokkonis, G.; Bibi, S.; Moscholios,
    I.; Maropoulos, N.; Sarigiannidis, P. Monitoring Mushroom Growth with Machine
    Learning. Agriculture 2023, 13, 223. [Google Scholar] [CrossRef] Aguirre, L.;
    Frias, J.M.; Barry-Ryan, C.; Grogan, H. Modelling Browning and Brown Spotting
    of Mushrooms (Agaricus bisporus) Stored in Controlled Environmental Conditions
    Using Image Analysis. J. Food Eng. 2009, 91, 280–286. [Google Scholar] [CrossRef]
    Barauskas, R.; Kriščiūnas, A.; Čalnerytė, D.; Pilipavičius, P.; Fyleris, T.; Daniulaitis,
    V.; Mikalauskis, R. Approach of AI-Based Automatic Climate Control in White Button
    Mushroom Growing Hall. Agriculture 2022, 12, 1921. [Google Scholar] [CrossRef]
    Rahman, H.; Faruq, M.O.; Abdul Hai, T.B.; Rahman, W.; Hossain, M.M.; Hasan, M.;
    Islam, S.; Moinuddin, M.; Islam, M.T.; Azad, M.M. IoT Enabled Mushroom Farm Automation
    with Machine Learning to Classify Toxic Mushrooms in Bangladesh. J. Agric. Food
    Res. 2022, 7, 100267. [Google Scholar] [CrossRef] Chong, J.L.; Chew, K.W.; Peter,
    A.P.; Ting, H.Y.; Show, P.L. Internet of Things (IoT)-Based Environmental Monitoring
    and Control System for Home-Based Mushroom Cultivation. Biosensors 2023, 13, 98.
    [Google Scholar] [CrossRef] [PubMed] Goldstein, M.; Uchida, S. A Comparative Evaluation
    of Unsupervised Anomaly Detection Algorithms for Multivariate Data. PLoS ONE 2016,
    11, e0152173. [Google Scholar] [CrossRef] Redmon, J.; Divvala, S.; Girshick, R.;
    Farhadi, A. You Only Look Once: Unified, Real-Time Object Detection. In Proceedings
    of the IEEE Conference on Computer Vision and Pattern Recognition, Las Vegas,
    NV, USA, 27–30 June 2016; pp. 779–788. [Google Scholar] [CrossRef]           Disclaimer/Publisher’s
    Note: The statements, opinions and data contained in all publications are solely
    those of the individual author(s) and contributor(s) and not of MDPI and/or the
    editor(s). MDPI and/or the editor(s) disclaim responsibility for any injury to
    people or property resulting from any ideas, methods, instructions or products
    referred to in the content.  © 2024 by the authors. Licensee MDPI, Basel, Switzerland.
    This article is an open access article distributed under the terms and conditions
    of the Creative Commons Attribution (CC BY) license (https://creativecommons.org/licenses/by/4.0/).
    Share and Cite MDPI and ACS Style Nguyen, H.H.; Shin, D.-Y.; Jung, W.-S.; Kim,
    T.-Y.; Lee, D.-H. An Integrated IoT Sensor-Camera System toward Leveraging Edge
    Computing for Smart Greenhouse Mushroom Cultivation. Agriculture 2024, 14, 489.
    https://doi.org/10.3390/agriculture14030489 AMA Style Nguyen HH, Shin D-Y, Jung
    W-S, Kim T-Y, Lee D-H. An Integrated IoT Sensor-Camera System toward Leveraging
    Edge Computing for Smart Greenhouse Mushroom Cultivation. Agriculture. 2024; 14(3):489.
    https://doi.org/10.3390/agriculture14030489 Chicago/Turabian Style Nguyen, Hoang
    Hai, Dae-Yun Shin, Woo-Sung Jung, Tae-Yeol Kim, and Dae-Hyun Lee. 2024. \"An Integrated
    IoT Sensor-Camera System toward Leveraging Edge Computing for Smart Greenhouse
    Mushroom Cultivation\" Agriculture 14, no. 3: 489. https://doi.org/10.3390/agriculture14030489
    Note that from the first issue of 2016, this journal uses article numbers instead
    of page numbers. See further details here. Article Metrics Citations No citations
    were found for this article, but you may check on Google Scholar Article Access
    Statistics Article access statistics Article Views 18. Mar 20. Mar 22. Mar 24.
    Mar 26. Mar 28. Mar 30. Mar 1. Apr 3. Apr 5. Apr 7. Apr 9. Apr 11. Apr 0 1000
    250 500 750 For more information on the journal statistics, click here. Multiple
    requests from the same IP address are counted as one view.   Agriculture, EISSN
    2077-0472, Published by MDPI RSS Content Alert Further Information Article Processing
    Charges Pay an Invoice Open Access Policy Contact MDPI Jobs at MDPI Guidelines
    For Authors For Reviewers For Editors For Librarians For Publishers For Societies
    For Conference Organizers MDPI Initiatives Sciforum MDPI Books Preprints.org Scilit
    SciProfiles Encyclopedia JAMS Proceedings Series Follow MDPI LinkedIn Facebook
    Twitter Subscribe to receive issue release notifications and newsletters from
    MDPI journals Select options Subscribe © 1996-2024 MDPI (Basel, Switzerland) unless
    otherwise stated Disclaimer Terms and Conditions Privacy Policy"'
  inline_citation: '>'
  journal: Agriculture (Switzerland)
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: An Integrated IoT Sensor-Camera System toward Leveraging Edge Computing for
    Smart Greenhouse Mushroom Cultivation
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Aburasain R.Y.
  citation_count: '0'
  description: 'Agriculture has played a significant role in the lifespan of human
    beings for their survival and the better economic growth of the country. Due to
    its intensified growth, smart agriculture has been a popular domain recently.
    This aggregates the benefits of any computing technologies, like wireless sensor
    networks (WSN), drones, Internet of Things (IoT), remote sensing, etc. The IoT
    system places sensors on agricultural areas to accumulate critical information
    for the crops and fields to increase the overall rate of productivity. While broadcasting
    the sensed information in the domains to the target, there is a chance of the
    existence of cyber-threats, which intruders design to attain access to the content
    being transferred. Intrusion detection in IoT-based smart farming using deep learning
    (DL) leverages the power of deep neural networks (DNN) to safeguard agricultural
    systems from cyber threats. DL algorithms can autonomously detect unauthorized
    and anomalies activities by analyzing data streams from sensors, IoT devices,
    and farm management systems. With this motivation, this study designs an Enhanced
    Black Widow Optimization with Hybrid Deep Learning Enabled Intrusion Detection
    (EBWO-HDLID) technique in the IoT-based Smart Farming environment. The proposed
    EBWO-HDLID technique captures complex patterns and detects significant intrusions,
    assuring the security and reliability of smart farming. In the presented EBWO-HDLID
    approach, the bald eagle search (BES) algorithm can be used for the feature selection
    process. For the intrusion detection and classification process, the EBWO-HDLID
    technique applies the HDL classification model. Finally, the EBWO algorithm can
    be used for the parameter tuning of the HDL technique. The experimental validation
    process demonstrates the satisfactory performance of the EBWO-HDLID model on two
    benchmark datasets: ToN-IoT, and Edge-IIoTset datasets.'
  doi: 10.1109/ACCESS.2024.3359043
  full_citation: '>'
  full_text: '>

    "IEEE.org IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account
    Personal Sign In Browse My Settings Help Access provided by: University of Nebraska
    - Lincoln Sign Out All Books Conferences Courses Journals & Magazines Standards
    Authors Citations ADVANCED SEARCH Journals & Magazines >IEEE Access >Volume: 12
    Enhanced Black Widow Optimization With Hybrid Deep Learning Enabled Intrusion
    Detection in Internet of Things-Based Smart Farming Publisher: IEEE Cite This
    PDF Rua Y. Aburasain All Authors 312 Full Text Views Open Access Comment(s) Under
    a Creative Commons License Abstract Document Sections I. Introduction II. Related
    Works III. The Proposed Model IV. Performance Validation V. Conclusion Authors
    Figures References Keywords Metrics Abstract: Agriculture has played a significant
    role in the lifespan of human beings for their survival and the better economic
    growth of the country. Due to its intensified growth, smart agriculture has been
    a popular domain recently. This aggregates the benefits of any computing technologies,
    like wireless sensor networks (WSN), drones, Internet of Things (IoT), remote
    sensing, etc. The IoT system places sensors on agricultural areas to accumulate
    critical information for the crops and fields to increase the overall rate of
    productivity. While broadcasting the sensed information in the domains to the
    target, there is a chance of the existence of cyber-threats, which intruders design
    to attain access to the content being transferred. Intrusion detection in IoT-based
    smart farming using deep learning (DL) leverages the power of deep neural networks
    (DNN) to safeguard agricultural systems from cyber threats. DL algorithms can
    autonomously detect unauthorized and anomalies activities by analyzing data streams
    from sensors, IoT devices, and farm management systems. With this motivation,
    this study designs an Enhanced Black Widow Optimization with Hybrid Deep Learning
    Enabled Intrusion Detection (EBWO-HDLID) technique in the IoT-based Smart Farming
    environment. The proposed EBWO-HDLID technique captures complex patterns and detects
    significant intrusions, assuring the security and reliability of smart farming.
    In the presented EBWO-HDLID approach, the bald eagle search (BES) algorithm can
    be used for the feature selection process. For the intrusion detection and classification
    process, the EBWO-HDLID technique applies the HDL classification model. Finally,
    the EBWO algorithm can be used for the parameter tuning of the HDL technique.
    The experimental validation process demonstrates the satisfactory performance
    of the EBWO-HDLID model on two benchmark datasets: ToN-IoT, and Edge-IIoTset datasets.
    This article designs an Enhanced Black Widow Optimization with Hybrid Deep Learning
    Enabled Intrusion Detection technique in the Internet of Things based Smart Farming
    en...View more Published in: IEEE Access ( Volume: 12) Page(s): 16621 - 16631
    Date of Publication: 26 January 2024 Electronic ISSN: 2169-3536 DOI: 10.1109/ACCESS.2024.3359043
    Publisher: IEEE Funding Agency: SECTION I. Introduction Agriculture and farming
    are considered two of the major and essential industries that help people significantly
    and improve a country’s GDP. Enhanced farming and agriculture management needs
    technical help and innovations [1]. A collection of strategies called “smart agriculture”
    is employed to improve the value and productivity of farming goods at a lesser
    price and with less human participation. Smart farming is completely based upon
    IoT skills, because of the nonstop surveillance of several components in the agrarian
    segment, with several abilities comprising water table and the enhancement of
    soil and plant possessions [2]. As incorporating skills in smart farming provides
    certain paybacks to agrarians, this incorporation comes along with various complications
    and troubles. Between those contests, the major frightening one is interruptions
    purposefully presented in fixed skills to advance admittance to the gathered information
    [3]. Major safety tasks are because of the weakness of the systems combined in
    smart farming and because of their limited control. For the efficient elimination
    of tasks like reserve waste and food deficiency, techniques such as deep learning
    (DL), Internet of Things (IoT), artificial intelligence (AI), and so on were utilized
    [4]. Electricity management, Labour cost reduction, and water and the agriculturalists
    can retain a list of their harvests are major compensations of IoT-based smart
    farming [5]. The strategies involved in the domains gather essential information
    about the cultivated lands and transfer them to the waiters for scarcity. While
    the transmission of the information to the target, there is a greater chance of
    several safety threats that need rapid solutions. The most frequent threat in
    smart farming is the DDoS threat which creates false traffic on the network [6].
    This threat increases by negotiating numerous devices into the network to create
    false traffic to devastate the network. A thoughtful safety problem for intrusion
    detection systems is to confront spiteful software differences that cause network
    safety violations and severe errors [7]. Cyber-attacks are further complex and
    disputable in strange malware threat classification because of the growth of progressive
    elusion approaches to take serious data and avoid IDS from recognition [8]. Moreover,
    there are cybersecurity attacks in internetworks communication. Consequently,
    new methods and results are vital for threat avoidance and appropriate intrusion
    detection approaches. ML and DL methods have just been established and used for
    intrusion detection and classification of unusual conduct in networks and their
    deterrence [9]. DL contains several networks like Convolutional Neural Network
    (CNN), Deep Belief Network (DBN), Recurrent Neural Networks (RNN), and Restricted
    Boltzmann Machines (RBMs) each of them has various abilities and possessions.
    These networks can perform the learning method in supervised, unsupervised, or
    semi-supervised behaviors [9]. Also, they aid from the categorized layers meant
    to discover appropriate important features from the fresh input information rather
    than utilizing physical features. This study designs an Enhanced Black Widow Optimization
    with a Hybrid Deep learning-enabled intrusion Detection (EBWO-HDLID) technique
    in the IoT-based Smart Farming environment. The proposed EBWO-HDLID technique
    captures complex patterns and detects significant intrusions, assuring the security
    and reliability of smart farming. In the presented EBWO-HDLID approach, the bald
    eagle search (BES) algorithm can be used for the feature selection process. For
    the intrusion detection and classification process, the EBWO-HDLID technique applies
    the HDL classification model. Finally, the EBWO algorithm has been employed for
    the parameter tuning of the HDL technique. The simulation analysis of the EBWO-HDLID
    model occurs on two benchmark datasets: ToN-IoT and Edge-IIoTset databases. The
    key contributions of the study are listed as follows. An intelligent EBWO-HDLID
    approach comprising BES-based feature subset selection, HDL-based classification,
    and EBWO-based hyperparameter tuning has been developed for intrusion detection
    in the smart farming environment. To the best of our knowledge, the EBWO-HDLID
    approach never existed in the literature. The design of the BES algorithm helps
    to choose relevant features and reduce the dimensionality of the dataset. Present
    HDL model comprising BiGRU-CNN for the detection and classification of the intrusions.
    Hyperparameter optimization of the HDL model using the EBWO algorithm using cross-validation
    helps to boost the predictive outcome of the proposed model for unseen data. SECTION
    II. Related Works The author in [10], a new and efficient DL-related architecture,
    including three levels. This method contains an attached CNN technique by using
    a BiGRU approach for identifying organized invaders. A consideration tool is comprised
    inside the BiGRU approach. Similarly, the precision is enhanced by a nature-inspired
    meta-heuristic maximization model known as the Wild Horse Optimization (WHO) technique.
    The authors at [11] proposed an IDS-based DL method for finding IoT-DDoS Botnet
    threats. The traffic information integrated includes a mixture of common and threatening
    traffic information. An extremely expandable Deep Neural Network (DNN) is projected
    to IoT networks which is proficient in headstrong recognition of the IoT botnet
    threats. In [12], an ID hyper-parameter control system (HyConSys) which systematizes
    the IDS employing Proximal Policy Optimization (PPO) is projected. ID-HyConSys
    consists of a DNN features separator that separates effective features. A k-means
    gathers the removed information, and then the PPO mediator mechanizes the IDS
    via control & study. The author in [13] presents a DL-related anticipatory artificial
    neural network method that allows accurate estimation for k-barrier computation
    for efficient intrusion detection and modification. The sensor sensing, sensing
    transmission region of interest, etc., devices are the four latent features that
    were employed to acquire and evaluate the anticipatory ANN method. The different
    characteristics are removed through the Monte Carlo model. In [14], a deep multilayer
    identification method for intrusion recognition is projected relating two stages
    of recognition reality and kind of intrusion, in addition to an oversampling method
    for guaranteeing a good feature of the identification outcomes. Widespread trials
    are prepared for various situations of the primary phase and the secondary phase
    besides two various approaches for the oversampling methods. The authors at [15]
    proposed a convincing IDS known as DDoSNet. The intellect method of PSO has been
    presented for the feature. In [16], a DL and Computer vision-based, cost-efficient,
    robust cross-camera, scalable, and circulated recognition system for animal intrusion
    recognition is planned. A sample of the plan is built utilizing Raspberry Pi systems
    linked to a computer by Raspberry Pi systems which works on image recognition.
    The MobileNetv2-SSD method was employed to identify the existence of animals,
    ResNet50 method and trained Triplet Loss were utilized for animal detection. The
    authors at [17] projected an approach using improvements in DL method techniques.
    This research contains an auto-animal classification by utilizing an alert unit,
    CNN, and an animal disgusting circuit plan. Deep CNN is employed to eliminate
    these features from the mixed-up images. Cross-CNN methods were used. Lastly,
    CNN characteristics were delivered to the upper classification DL method. SECTION
    III. The Proposed Model In this study, we have designed and developed an automated
    intrusion detection approach named EBWO-HDLID technique in the IoT-based Smart
    Farming environment. The proposed EBWO-HDLID technique captures complex patterns
    and detects significant intrusions, assuring the security and reliability of smart
    farming. In the presented EBWO-HDLID approach, three processes are involved namely
    BES-based feature subset selection, HDL-based intrusion detection, and EBWO-based
    hyperparameter tuning. Fig. 1 denotes the entire procedure of EBWO-HDLID methodology.
    FIGURE 1. Overall procedure of EBWO-HDLID algorithm. Show All A. Design of Bes
    Algorithm for Feature Selection The BES algorithm can be used for electing an
    optimal set of features. Alsattar et al proposed BES a novel metaheuristic algorithm.
    The bald eagles are widespread in North America, with excellent observation ability
    and keen vision during flight [18]. In the case of salmon prey, they first choose
    the search region according to the density of populations and salmon individuals,
    and later explore the water surface within that search range. Lastly, the vultures
    slowly lower their flight height and quickly plunge to catch the prey. Each stage
    of the BES algorithm can be mathematically modeled as follows: Selecting a search
    space: In this stage, the vultures will randomly choose a search range and find
    the optimum search space by evaluating the prey amount. In this stage, the updating
    position of vultures can be defined by multiplying prior data from the random
    search, and it is mathematically modeled as follows: L i,new = L best +p∗q( L
    mean − L i ) (1) View Source In Eq. (1), the random number q ranges between zero
    and one; the parameter p refers to the control position variation in (1.5, 2);
    the average distribution of vultures position after the earlier search is L mean
    ; the optimum location to search for vultures is L best ; L i corresponds to the
    i th vultures. Searching the space for prey (exploration stage): In the selected
    search range, the vultures pursue prey in a spiral shape, which speeds up the
    searching method to attain the optimum dive catch location. The mathematical modeling
    of spiral flight that implements polar coordinates for updating the position.
    θ(i) d(i) d X (i) x(i) =s∗pi∗q =θ(i)+t∗q =d(i)∗sin(θ(i)) ,d y (i)=d(i)∗cos(θ(i))
    = d X (i) max(| d X |) ,y(i)= d y (i) max(| d y |) (2) (3) (4) (5) View Source
    where the spiral formulas polar angle and diameter are, θ(i) and d(i) correspondingly;
    the spiral trajectory’s control parameters are s and t , the variation range is
    (5, 10), and (0.5,2), correspondingly; the coordinates position of bald eagles
    are x(i) and y(i) , and the values are (−1,1) . The location of the vulture can
    be updated by: L i,new = L i +x(i)∗( L i − L mean )+y(i)∗( L i − L i+1 ) (6) View
    Source In Eq. (6), the next updated position of i th bald eagles is L i+1 [19].
    Swooping to capture the prey (utilization stage): In the previous phase, a bald
    eagle quickly flies toward the prey from a particular location while other vultures
    in the population travel towards the fittest location and simultaneously attack
    the target, and the movement can be defined by the polar equation as follows:
    θ(i) d X (i) x 1 (i) =s∗pi∗q,d(i)=θ(i) =d(i)∗sinh(θ(i)), d y (i)=d(i)∗cosh(θ(i))
    = d x (i) max(|dx|) , y 1 (i)= d y (i) max(|dy|) (7) (8) (9) View Source The updating
    equation of vulture location in the dive is: L i,new =q∗ L best + x 1 (i)∗( L
    i − c 1 ∗ L mean ) + y 1 (i)∗( L i − c 2 ∗ L best ) (10) View Source In Eq. (10),
    the intensity of the vulture’s movement near the optimum and central locations,
    are c 1 and c 2 correspondingly, ranges from one to two. The FF considers the
    number of attributes selected and the classification accuracy. It reduces the
    set size of attributes selected and increases the classifier performance. Thus,
    as shown in Eq. (11), the subsequent FF is used for evaluating each solution,
    Fitness=α∗ErrorRate+(1−α)∗ #SF #All_F (11) View Source where α controls the significance
    of classifier quality and subset length, the value of α is 0.9. The classifier
    error rate using the attributes selected can be represented as ErrorRate and it
    is evaluated as several incorrect classified to the number of classifications
    made, ranging from zero to one. ( ErrorRate is the complement of classifier performance),
    the total amount of features in the original dataset is #All_F and the amount
    of selected attributes is #SF . B. Intrusion Detection Using HDL Model At this
    stage, the HDL model incorporating BiGRU-CNN is applied for the detection of intrusions.
    Through their multiplicative gates, the GRU and LSTM models are capable of resolving
    the problems of gradient disappearing [20]. However, the GRU network is more effective
    at updating the internal weight and achieving convergence during training. A standard
    cell or unit of the GRU network structure is made up of two gates namely the reset
    and update gates. The reset gate (first port) filters irrelevant data on the hidden
    layer (HL); the lesser its value, the higher the quantity of data that can be
    disregarded. In contrast, the update gate (second port) decides the quantity of
    data that is transmitted to the resultant layer; the greater its value, the further
    data in the prior state can be employed. The architecture of the GRU-NN cell is
    governed by Eqs. (12)–(15), where the activation sigmoid function is ρ , the update
    gate is z t , the reset gate is r t , the weighted for every input is w , and
    the existing HL is h t , the candidate HL of an existing hidden node is h ~ ,
    the HL of prior time instant is h t−1 , the weights for HL of the prior time instant
    is u and the existing input of the ANN is x t , z t r t h ~ t h t =σ( w zx x t
    + u zh h t−1 ) =σ( w rx x t + u rh h t−1 ) =tan( w hx x t + r t ⊙ u hh h t−1 )
    =(1− z t )⊙ h ~ t + z t ⊙h t−1 (12) (13) (14) (15) View Source It is interesting
    to access the present and past data for the sequential modeling task. However,
    the typical GRU-NN chronologically processes the temporal sequence and, thus,
    is incapable of attaining present context data. On the other hand, the Bi-GRU
    (bi-directional GRU) can perform these operations, meanwhile, it includes two
    typical GRUs that procedure the input series in 2 different directions (anti-chronological
    and chronological) and are then combined into a single parameter. This allows
    us to explore present and past datasets. Consecutively, it provides more effective
    prediction outcomes results. Eqs. (16)–(20), represents a two-intermediate layer
    Bi-GRU-NN. Where the concurrent output of the 1 st and 2 nd backward layers of
    the network t are ← h 1 t and← h 2 t . the GRU-NN processing is f , the activation
    function is g , and the resultant vector of the forward layer of the 1 st and
    2 nd layers of the network at t time instant is h ⃗  and h ⃗  , correspondingly;
    the weighted matrix and bias are w and b , correspondingly. h 1 t → h 1 t ← h
    2 t ← h 2 t ← y t =f( w x h 1 → x t + w h 1 → h 1 → h 1 t+1 ← − − + b h 1 → )
    =f( w x h 1 ← x t + w h 1 ← h 1 ← h 1 t+1 ← − − + b h 1 ← ) =f( w h 1 → h 2 →
    h 1 t ← + w h → 2 h → 2 h 2 t−1 − → − + b h → 2 ) =f( w h 2 ← h 2 ← h 1 t ← +
    w h 2 ← h 2 ← h 2 t+1 ← − − + b h 2 ← ) =g( w h 2 y ← − − h 2 t ← + w h 2 y ←
    − − h 2 t ← + b y ) (16) (17) (18) (19) (20) View Source Different from recurrent
    networks of GRU and BiGRU architectures, CNN is a kind of feedforward network
    that cannot created by cyclic connection. CNN has a good generalizability map
    and a more complex nonlinear relationship compared to classification models. In
    addition to classifying, the CNN network is extensively applied for resource extraction
    by the filter, kernel, or matrix that slides within the input to produce a resource
    map and carry out the convolution function, where dissimilar kernels create dissimilar
    resource maps and all these are combined, thereby generating the output of convolutional
    layer. The architecture of CNN is encompassed by a convolutional layer, a pooling
    layer, and an FC layer. Where the activation function is f i the input of the
    i th convolutional layer is x i , the output of thei th convolutional layer is
    y i , offset vector, and the weights of the ith-convolution layer are the b i
    and w i variables correspondingly, and the output of the i th max -pooling layer
    is y ′ , y i y ′ = f i ( x i w i + b i ) =max( y i , j ) (21) (22) View Source
    C. Hyperparameter Tuning Using EBWO Algorithm Lastly, the EBWO algorithm can be
    employed for the optimal selection of the hyperparameter related to the HDL model.
    The black widow spider (BWS) moves inside the spider web in a spiral and linear
    pattern [21]. These behaviors are mathematically modeled by the subsequent expression:
    x i → (t+1) x i → (t+1) = x ⃗  ∗ (t)−m x ⃗  r1 (t) = x ∗ → (t)−cos(2πβ) x i →
    (t) (23) (24) View Source where the randomly selected location r 1 is x r1 − →
    (t) , and the present location of an individual is x i → (t) . The individual
    position after the upgrade is x i (t − → − +1) and the current optimal individual
    position is x ∗ → (t) . m refers to a random floating-point number within [0.4,
    0.9]. r 1 is an arbitrary value that ranges between the maximum population size
    and 1. An arbitrary number is indirectly or directly created through the rand
    function (create arbitrary integers within [0 1]). β is a random number within
    [−1,1]. The random numbers define the way BWS moves. If the arbitrary number created
    by the rand function is lower than or corresponding to 0.3, then the movement
    mode chooses Eq. (23). Sex pheromone played a major role during the mating process
    of BWS. The sex pheromones rate value of the BWS is described as follows: pheromone(i)=
    fitnes s max −fitness() fitnes s max −fitnes s min (25) View Source In Eq. (25),
    The sex pheromones vector has normalization fitness within zero and one. The worst
    and best fitness values from the existing population are fitnes s max and fitnes
    s min , the fitness values of the i th individuals is fitness(i) . x i → (t)=
    x ∗ → (t)+ 1 2 [ x r1 − → (t)− (−1) σ x r2 − → (t)] (26) View Source In Eq. (26),
    the position of female BWS with lesser sex pheromone levels is x ⃗  i (t). r 1
    ≠ r 2 , the random values in 1 to the higher population size are r 1 and r 2 .σ
    is a random binary integer within [0 1]. To initialize the population, the BWO
    technique directly uses the rand function. We introduced a Gauss chaotic mapping
    to enhance the diversity of the algorithm and initialized the population. It allows
    the model to quickly discover the position of superior performances, thus enhancing
    the convergence accuracy and accelerating the convergence rate of the model and
    it is described as follows: z n+1 1 z n mod(1) = ⎧ ⎩ ⎨ 0, z n =0 1 z n mod(1)
    , z n ≠0 = 1 z n −[ 1 z n ] (27) (28) View Source where the residual function
    can be represented by mod and [] indicates rounding and z 1 , z 2 ,…, andz n are
    the chaotic sequences produced by the Gauss mapping. Fig. 2 depicts the steps
    involved in BWO. The EBWO methodology develops an FF to obtain the higher solution
    of classification. It defines a positive integer to describe the superior outcome
    of the candidate outcome. As shown in Eq. (29), the decline of the classifier
    errors is assumed as FF. fitness( x i ) =ClassifierErrorRate( x i ) = No.ofmisclassifiedsamples
    TotalNo.ofsamples ∗100 (29) View Source FIGURE 2. Steps involved in BWO. Show
    All SECTION IV. Performance Validation In this section, the simulation validation
    of the EBWO-HDLID approach can be tested using the ToN-IoT database [22] and Edge-IIoTset
    [23] database. The ToN-IoT dataset has 119957 samples under 9 classes as demonstrated
    in Table 1. In addition, the proposed model has chosen 29 features from the ToN-IoT
    database. Similarly, the Edge-IIoTset database has 81737 samples under 8 classes
    as defined in Table 2. In addition, the proposed model has chosen 39 features
    from the Edge-IIoTset dataset. TABLE 1 Details on ToN-IoT Dataset TABLE 2 Details
    on Edge-IIoTset Dataset Fig. 3 shows the classifier analysis of the EBWO-HDLID
    method on the ToN-IoT database. Figs. 3a-3b reveals the confusion matrices given
    by the EBWO-HDLID approach at 70:30 of the TR Phase/TS Phase. The simulation value
    states that the EBWO-HDLID algorithm has accurately recognized and classified
    nine classes. Furthermore, Fig. 3c illustrates the PR performance of the EBWO-HDLID
    system. The outcome illustrates that the EBWO-HDLID model attained enhanced PR
    values with each 9 class. But, Fig. 3d shows the ROC analysis of the EBWO-HDLID
    system. This outcome described that EBWO-HDLID methodology leads to efficient
    and greater ROC values on each 9 class. FIGURE 3. ToN-IoT database (a-b) Confusion
    matrices, (c) PR curve, and (d) ROC. Show All The IDS results of the EBWO-HDLID
    system on the ToN-IoTdatabase are given in Table 3 and Fig. 4. The simulated values
    highlighted that the EBWO-HDLID model appropriately categorized nine types of
    attacks. Similarly, based on 70% of the TR Phase, the EBWO-HDLID method accomplishes
    average acc u y , pre c n , rec a l , F score , and AU C score values of 98.79%,
    87.90%, 78.72%, 79.34%, and 88.89% individually. Besides, with 30% of the TS phase,
    the EBWO-HDLID methodology attains model average acc u y , pre c n , rec a l ,
    F score , and AU C score values of 98.81%, 90.84%, 78.95%, 79.49%, and 89.01%
    respectively. TABLE 3 IDS Outcome of EBWO-HDLID Approach on ToN-IoT Database FIGURE
    4. Average of EBWO-HDLID approach on ToN-IoT database. Show All To calculate the
    analysis of the EBWO-HDLID technique on the ToN-IoTdatabase, TR and TS acc u y
    curves are determined, as exhibited in Fig. 5. The TR and TS acc u y curves show
    the performance of the EBWO-HDLID methodology over various epochs. The figure
    offers meaningful details about the learning tasks and generalization potentiality
    of the EBWO-HDLID model. With an improvement in epoch count, it is noticed that
    the TR and TS acc u y curves attain enriched. It is observed that the EBWO-HDLID
    system accomplishes improved testing accuracy which can be the ability to recognize
    the patterns in the TR and TS data. FIGURE 5. Accu y curve of EBWO-HDLID system
    on ToN-IoT database. Show All Fig. 6 illustrates the overall TR and TS loss values
    of the EBWO-HDLID method on the ToN-IoTdatabase over epochs. The TR loss denotes
    the model loss acquired diminished over epochs. Generally, the loss values decreased
    as the model modified the weight to reduce the predicted error on the TR and TS
    data. The loss curves exhibit the extent to which the model fits the training
    data. It is evidenced that the TR and TS loss is gradually diminishing and defined
    that the EBWO-HDLID technique effectively learns the patterns exhibited in the
    TR and TS data. It is also considered that the EBWO-HDLID algorithm changes the
    parameters to minimize the variation among the predicted and original training
    labels. FIGURE 6. Loss curve of EBWO-HDLID method on ToN-IoT database. Show All
    In detailed comparison analysis of the EBWO-HDLID methodology with recent approaches
    with the ToN-IoT database is stated in Table 4 and Fig. 7 [24]. The simulated
    values specify that the GRU and IDS-EESAEE systems show poorer performance. Simultaneously,
    the LSTM method has acquired slightly increased outcomes. While the RF algorithm
    has managed to report considerable performance, the EBWO-HDLID technique extents
    improved performance with higher acc u y , pre c n , rec a l , and F 1 score values
    of 98.81%, 90.84%, 78.95%, and 79.49% correspondingly. TABLE 4 Comparative Outcome
    of EBWO-HDLID Method with Other Algorithms on the ToN-IoT Database FIGURE 7. Comparative
    outcome of EBWO-HDLID approach on the ToN-IoT database. Show All Fig. 8 shows
    the classifier analysis of the EBWO-HDLID method under the Edge-IIoTset database.
    Figs. 8a-8b exhibits the confusion matrices simulated by the EBWO-HDLID technique
    at 70:30 of the TR Phase/TS Phase. The outcome value states that the EBWO-HDLID
    technique has accurately recognized and classified eight class labels. Additionally,
    Fig. 8c illustrates the PR performance of the EBWO-HDLID methodology. The simulation
    value illustrates that the EBWO-HDLID model has achieved improved PR performance
    on each 8 class. Besides, Fig. 8d represents the ROC analysis of the EBWO-HDLID
    technique. This simulation result described that EBWO-HDLID methodology leads
    to effectual and greater ROC values on each 8 class. FIGURE 8. Edge-IIoTset database
    (a-b) Confusion matrices, (c) PR curve, and (d) ROC. Show All The IDS results
    of the EBWO-HDLID technique with the Edge-IIoTset dataset are mentioned in Table
    5 and Fig. 9. The simulated values considered that the EBWO-HDLID methodology
    properly considered eight types of attacks. According to 70% of the TR Phase,
    the EBWO-HDLID approach achieves average acc u y , pre c n , rec a l , F score
    , and AU C score values of 98.27%, 84.49%, 80.60%, 82.45%, and 89.48% individually.
    Also, based on 30% of the TS phase, the EBWO-HDLID system gets average acc u y
    , pre c n , rec a l , F score , and AU C score values of 98.35%, 84.85%, 80.95%,
    82.79%, and 89.69% correspondingly. TABLE 5 IDS Outcome of EBWO-HDLID Approach
    on Edge-IIoTset Database FIGURE 9. Average of EBWO-HDLID system on Edge-IIoTset
    database. Show All To determine the analysis of the EBWO-HDLID technique on the
    Edge-IIoTsetdatabase, TR and TS acc u y curves are defined, as shown in Fig. 10.
    The TR and TS acc u y curves exhibit the performance of the EBWO-HDLID system
    over numerous epochs. The figure gives meaningful details about the learning tasks
    and generalization capabilities of the EBWO-HDLID technique. With a rise in epoch
    count, it is observed that the TR and TS acc u y curves get improved. It is observed
    that the EBWO-HDLID methodology accomplishes enriched testing accuracy that can
    have the potential to recognize the patterns in the TR and TS data. FIGURE 10.
    Accu y curve of EBWO-HDLID system on Edge-IIoTset database. Show All Fig. 11 shows
    the overall TR and TS loss values of the EBWO-HDLID technique on the Edge-IIoTsetdatabase
    over epochs. The TR loss represents the model loss decreased over epochs. Primarily,
    the loss values become reduced as the model adjusts the weight to reduce the predicted
    error on the TR and TS data. The loss curves reveal the level where the model
    fits the training data. It is verified that the TR and TS loss is progressively
    lessening and described that the EBWO-HDLID approach successfully learns the patterns
    exhibited in the TR and TS data. It is also measured that the EBWO-HDLID model
    varies the parameters to reduce the difference between the original and predicted
    training label. FIGURE 11. Loss curve of EBWO-HDLID system on Edge-IIoTset database.
    Show All An overall comparison outcome of the EBWO-HDLID methodology with other
    approaches with the Edge-IIoTsetdataset is stated in Table 6 and Fig. 12. The
    simulated values determine that the RF system has shown lower performance. Concurrently,
    LSTM and GRU methodologies have moderately increased outcomes. While the IDS-EESAEE
    system has managed to account for noticeable performance, the EBWO-HDLID model
    attains excellent performance with higher acc u y , pre c n , rec a l , and F
    1 score values of 98.35%, 84.85%, 80.95%, and 82.79% respectively. TABLE 6 Comparative
    Outcome of EBWO-HDLID System with Other Methods on the Edge-IIoTset Database FIGURE
    12. Comparative outcome of EBWO-HDLID method on Edge-IIoTset database. Show All
    SECTION V. Conclusion In this study, we have developed and designed an automated
    ID approach named EBWO-HDLID technique in the IoT-based Smart Farming environment.
    The major intention. The proposed EBWO-HDLID technique captures complex patterns
    and detects significant intrusions, assuring the security and reliability of smart
    farming. In the presented EBWO-HDLID approach, three processes are involved namely
    BES-based feature subset selection, HDL-based intrusion detection, and EBWO-based
    hyperparameter tuning. For the intrusion detection and classification process,
    the EBWO-HDLID technique applies the HDL classification model. Finally, the EBWO
    algorithm has been used for the parameter tuning of the HDL methodology. The simulation
    validation process demonstrates the best solution of the EBWO-HDLID system on
    two benchmark datasets: ToN-IoT, and Edge-IIoTset databases. Therefore, the EBWO-HDLID
    methodology has been applied for automated ID and accomplished security from the
    smart farming environment. ACKNOWLEDGMENT The author extends her appreciation
    to the Deputyship for Research & Innovation, Ministry of Education in Saudi Arabia
    for funding this research work through project number ISP-2024. Authors Figures
    References Keywords Metrics More Like This Anomaly detection in Internet of Things
    using feature selection and classification based on Logistic Regression and Artificial
    Neural Network on N-BaIoT dataset 2021 5th International Conference on Internet
    of Things and Applications (IoT) Published: 2021 Artificial Neural Networks-Based
    Intrusion Detection System for Internet of Things Fog Nodes IEEE Access Published:
    2020 Show More IEEE Personal Account CHANGE USERNAME/PASSWORD Purchase Details
    PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS Profile Information COMMUNICATIONS PREFERENCES
    PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help? US & CANADA: +1 800 678
    4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow About IEEE Xplore | Contact
    Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics
    Reporting | Sitemap | IEEE Privacy Policy A not-for-profit organization, IEEE
    is the world''s largest technical professional organization dedicated to advancing
    technology for the benefit of humanity. © Copyright 2024 IEEE - All rights reserved."'
  inline_citation: '>'
  journal: IEEE Access
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: Enhanced Black Widow Optimization With Hybrid Deep Learning Enabled Intrusion
    Detection in Internet of Things-Based Smart Farming
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - André G.
  - Bachelet B.
  - Battistoni P.
  - Belhassena A.
  - Bimonte S.
  - Cariou C.
  - Chabot F.
  - Chalhoub G.
  - Couvent A.
  - Garani G.
  - Laneurit J.
  - Moussa R.
  - Oikonomou K.
  - Sammour I.
  - Sebillo M.
  - Souza M.V.
  - Tricot N.
  - Wrembel R.
  citation_count: '0'
  description: 'The usage of IoT and robots is more and more present in smart farming,
    and in particular in agro-ecology since robots are able to provide smart practices
    and avoid repetitive human tasks. However, these new technologies rise several
    research issues, which are strongly inter-related, about Farm Management Information
    System, such as robots’ programming, sensor data capture, management and processing
    at different layers of the IoT ecosystem. In particular, scheduling the tasks
    of different autonomous agricultural robots needs for a complex architecture that
    support at the same time real-time monitoring of robots and analysis of their
    historical data (Belhassena et al., Towards an architecture for agricultural autonomous
    robots’ scheduling. In: 2021 IEEE 25th international enterprise distributed object
    computing workshop (EDOCW), 2021. IEEE Computer Society, Los Alamitos, pp 194–203,
    2021, https://doi.org/10.1109/EDOCW52865.2021.00049). Many studies investigated
    these issues, but to the best of our knowledge none has contributed with a fully-featured
    architecture design of monitoring and scheduling of autonomous agricultural robots.
    This work extends our previous work, where we propose a new architecture for autonomous
    agriculture robots scheduling, called LambdAgrIoT. LambdAgrIoT is designed to
    support big data and different types of workload (real-time, near real-time, analytic,
    and CRUD). We present the main features of each layer, and the implementation
    details. We also put to the test our LambdAgrIoT architecture using simulated
    data, and providing a real experience in a field. Results from real experiments
    show the feasibility of our new proposal.'
  doi: 10.1007/s10586-022-03592-5
  full_citation: '>'
  full_text: '>

    "Your privacy, your choice We use essential cookies to make sure the site can
    function. We also use optional cookies for advertising, personalisation of content,
    usage analysis, and social media. By accepting optional cookies, you consent to
    the processing of your personal data - including transfers to third parties. Some
    third parties are outside of the European Economic Area, with varying standards
    of data protection. See our privacy policy for more information on the use of
    your personal data. Manage preferences for further information and to change your
    choices. Accept all cookies Skip to main content Log in Find a journal Publish
    with us Track your research Search Cart Home Cluster Computing Article LambdAgrIoT:
    a new architecture for agricultural autonomous robots’ scheduling: from design
    to experiments Published: 14 October 2022 Volume 26, pages 2993–3015, (2023) Cite
    this article Download PDF Access provided by University of Nebraska-Lincoln Cluster
    Computing Aims and scope Submit manuscript Geraldine André, Bruno Bachelet, Pietro
    Battistoni, Amina Belhassena, Sandro Bimonte, Christophe Cariou, Frederic Chabot,
    Gerard Chalhoub, Adrian Couvent, Georgia Garani, Jean Laneurit, Rim Moussa, Konstantinos
    Oikonomou, Ibrahim Sammour, Monica Sebillo, Mateus Vilela Souza, Nicolas Tricot
    & Robert Wrembel  362 Accesses 1 Citation Explore all metrics This article has
    been updated Abstract The usage of IoT and robots is more and more present in
    smart farming, and in particular in agro-ecology since robots are able to provide
    smart practices and avoid repetitive human tasks. However, these new technologies
    rise several research issues, which are strongly inter-related, about Farm Management
    Information System, such as robots’ programming, sensor data capture, management
    and processing at different layers of the IoT ecosystem. In particular, scheduling
    the tasks of different autonomous agricultural robots needs for a complex architecture
    that support at the same time real-time monitoring of robots and analysis of their
    historical data (Belhassena et al., Towards an architecture for agricultural autonomous
    robots’ scheduling. In: 2021 IEEE 25th international enterprise distributed object
    computing workshop (EDOCW), 2021. IEEE Computer Society, Los Alamitos, pp 194–203,
    2021, https://doi.org/10.1109/EDOCW52865.2021.00049). Many studies investigated
    these issues, but to the best of our knowledge none has contributed with a fully-featured
    architecture design of monitoring and scheduling of autonomous agricultural robots.
    This work extends our previous work, where we propose a new architecture for autonomous
    agriculture robots scheduling, called LambdAgrIoT. LambdAgrIoT is designed to
    support big data and different types of workload (real-time, near real-time, analytic,
    and CRUD). We present the main features of each layer, and the implementation
    details. We also put to the test our LambdAgrIoT architecture using simulated
    data, and providing a real experience in a field. Results from real experiments
    show the feasibility of our new proposal. Similar content being viewed by others
    AI-Based Modeling: Techniques, Applications and Research Issues Towards Automation,
    Intelligent and Smart Systems Article Open access 10 February 2022 Data Science
    and Analytics: An Overview from Data-Driven Smart Computing, Decision-Making and
    Applications Perspective Article 12 July 2021 Automation of a Business Process
    Using Robotic Process Automation (RPA): A Case Study Chapter © 2017 1 Introduction
    The world population growth is increasing the demand for sustainable healthy farming
    production. To satisfy such a need, agro-ecology aims at developing new cultural
    practices leading to an environment friendly farming production [34]. Agro-ecology
    requires a global approach, where different types of data must be combined, integrated,
    and further analyzed at different spatial and temporal scales. It also combines
    innovation coming from precision agriculture, which analyzes data at detailed
    granularities, to more complex and global agronomic, social, economic, and environmental
    data [16]. In order to support agriculture stakeholders in all their activities,
    such as basic management of stocks, as well as sophisticated assistance in complex
    technical operations on fields (e.g. plowing, weeding, fertilizing, etc.), traditional
    Farm Management Information Systems (FMIS) have been proposed, which represented
    the first example of integrated systems specifically conceived to support the
    planning, implementation and monitoring of multi-objective forest management activities.
    FMIS include multiple design artefacts, business processes, and customization
    of software technologies suitable to farming information systems [23]. Research
    carried out along this direction has resulted in the smart farming, which represents
    a step towards the adoption and the implementation of new advances in information
    technology (e.g., Internet of Things, Big Data frameworks, Computer Vision, Artificial
    Intelligence) to monitor and optimize agricultural business processes, and overcome
    the current challenges of sustainable and healthy food production to define new
    agro-ecology practices. In particular, the implementation of affordable sensor
    technologies (e.g. Odometry, LiDAR) in farms has prompted traditional FMIS to
    consider new characteristics of collected data, both data at rest and data in
    motion, and be able to extract information from them. As an example, sensed data
    once analyzed can be useful to improve field activities, such as precise irrigation
    and soil fertilization, as well as tasks scheduling and robots’ tracking [36].
    To support the aforementioned agro-ecology transition, robots have an essential
    role to play in the smart farming domain. They are able to perform repetitive
    and accurate farming operations over a long time period with a low impact on the
    environment (light, possibility to operate in fleet). With special equipment,
    combined with data acquisition and data processing technologies, robots are able
    to autonomously perform efficiently targeted tasks in the fields, e.g., within
    inter-cropping systems, while optimizing the use of resources and maintaining
    a high level of productivity. In this paper, we consider scenarios where robots
    do not cooperate with farm workers in the field, and we generalize the applicability
    of our proposal to most of agricultural tasks of robots. Many research works address
    smart farming. However, to the best of our knowledge none has contributed with
    a fully-featured architecture design, which investigates the multiple layers and
    the different edges of the IoT ecosystem towards smart monitoring and scheduling
    of autonomous agricultural robots, with scalable data processing. This lack has
    been put in evidence by some recent survey papers that focus on robots and IoT
    for Agriculture 4.0 ([1, 47, 54]). In particular, even though some client–server
    architectures have been proposed [22], they do not fully exploit all the insights
    extracted from the analysis of IoT data and new communication and computation
    architectures (e.g., edge–fog–cloud). Moreover, existing works do not address
    real-life scenarios, but experimental farms configurations. Therefore, in this
    work we present: A detailed analysis of requirements for real-life scheduling
    autonomous agricultural robots systems, cf. Sect. 2. These requirements have been
    defined based on our several years experience in the context of smart farming,
    and cooperation with farms’ managers. The skeleton of an architecture for scheduling
    autonomous agricultural robots, called LambdAgrIoT, which is based on the Lambda
    architecture, cf. Sect. 3. It is designed to support big data, and different types
    of workload (real-time, near real-time, analytic, and CRUD). This paper extends
    our previous work [7] in several ways: It presents an exhaustive set of real-time
    queries provided by the Speed layer, and corresponding performance time-computation
    tests. It shows the implementation of the Batch layer for the analysis of historical
    data by means of a Trajectory Data Warehouse (TDW). OLAP queries’ performance
    time-computation tests are also presented. It presents experiment results that
    show the performance of the online scheduling algorithm based on mixed integer
    linear program (MILP). It presents a Wi-Fi multihop solution to control and supervise
    the robots. A real experience is presented to prove the feasibility of our proposals
    in a real scenario. The paper is structured as follows. Section 2 presents requirements
    for the designed system. Section 3 discusses the main contribution of this paper,
    i.e., the architecture of the system. Section 4 reports some experiments with
    simulated data and a real experience showing the feasibility of our proposal.
    Section 5 outlines related approaches. Finally, Sect. 6 summarizes and concludes
    the paper. The contribution presented in this work has been achieved within the
    French ANR I-SITE CAP 20-25 SuperRob project. 2 Requirements’ specification In
    this section, we present the requirements specification for an agricultural autonomous
    robots scheduling system (Table 1). The following described issues have been elucidated
    thanks to our several years research experience in the context of robotics and
    information systems for smart farming. Moreover, we collect users requirements
    from farmers that work on our experimental farm in Montoldre (France). This farm,
    which has been deployed from more than 20 years, is an experimental platform used
    by INRAE to test agronomy and Information Technology research works. In the next
    we present requirements associated to data management and analysis (Sect. 2.1)
    and then network ones (Sect. 2.2). Table 1 Requirements Full size table 2.1 Data
    management and analysis requirements An agricultural robot is an unmanned ground
    vehicle with sensors and actuators able to safely and autonomously perform one
    or several tasks on a farm field. Such a robot is composed of a locomotion part
    connected to a navigation system, and an agricultural part with either mounted,
    semi-mounted, or towed implements. An agricultural robot can be designed to perform
    a specific task (e.g. weeding, harvesting) or it can be used as a tool carrier
    offering various equipment combinations (e.g. tillage, seeding, fertilizing).
    The scheduling of autonomous agricultural robots is a logistic application to
    find out the best allocation of robots for their agricultural tasks on fields.
    This allocation is made according to: (1) the compatibility of a robot and its
    equipment with an agricultural task to be done, (2) the temporal availability
    of a robot and its associated equipment, and (3) the compatibility of meteorological
    conditions with an agricultural task. When these conditions are satisfied, the
    output of the scheduling algorithm is a set of reference (i.e. predefined) trajectories
    that must be followed by robots. Usually, the design of a reference trajectory
    is based on simulation models [14]. Other empirical approaches can also be used,
    and are based on analyzing past trajectories of robots. However, some problems
    can arise during the execution of an agricultural task (e.g., a physical object
    blocking robot’s movement, heavy rainfall or snowfall). Consequently, the robot’s
    planned trajectory has to be updated. Thus, an online re-scheduling computation
    service must be executed to find out (whenever possible) the best alternative
    trajectory. The following events may trigger a re-scheduling of planned tasks:
    Robot fault since robots operate in rural environments, frequently under hard
    weather conditions and on topologically difficult grounds (e.g., ground elevation,
    rocky grounds), they may experience technical problems. Delay alert robots are
    programmed to follow a scheduled trajectory, but they are also allowed to automatically
    re-adjust their trajectories in order to avoid obstacles (e.g. animals, tree branches,
    rocks) [49]; any trajectory re-adjustment results in delays (see Fig. 1). Meteorological
    alert weather conditions (like heavy rains, thunderstorms, high winds) can impact
    badly a scheduled trajectory. For instance, the spraying task cannot be performed
    during strong wind, and in such a situation a robot must stop its work. Fig. 1
    A delay event example Full size image The aforementioned events may require the
    re-scheduling of tasks, namely: spatio-temporal issues and contextual issues.
    Spatio-temporal issues refer to the lack of respect of the spatio-temporal constraints
    associated with predefined trajectories for one or several robots. These issues
    occur due to robot(s)’ deficiency (i.e. Robot fault event) or an event external
    to a robot but associated with a particular spatial or temporal point (i.e. Delay
    alert event). Contextual issues refer to problems caused by a phenomenon that
    cannot be associated with a particular spatio-temporal point, but that is valid
    for a set of plots and/or technical operations (i.e. Meteorological alert event).
    A smart farm information system involves the following stake-holders. Farmers
    they have to monitor in real-time the trajectories of robots on their plots. They
    must also be alerted in real-time when problems occur. Scheduling experts they
    are users with logistic skills who set-up scheduling algorithms, to provide the
    most efficient reference trajectories for all plots, robots, and activities. The
    system must provide them details on all executed scheduling tasks in the past
    and allow them to explore and analyze these data. They typically react in time
    windows of different lengths (e.g., 1 h for re-scheduling operations, a few days
    for the reconfiguration of the scheduling algorithms). Mechatronics engineers
    they off-line analyze the behaviour of robots, to update and adjust robots settings.
    The deployment of IoT technologies in farms generates big data [21, 39]. For this
    reason, agricultural autonomous robots scheduling systems must be able to handle
    data characterized by the well-known three V’s: Velocity sensors and network devices
    produce continuous data during the whole day of a robot work. For instance, each
    robot emits 200 odometry records per second that are used to analyze its mechanical
    behaviour by robots experts. Also, the monitoring of robot faults is performed
    in real-time. Volume since a lot of data are generated with high frequency, huge
    volumes of data are produced, which have to be stored and analyzed. Variety data
    types fall into different formats, including structured (e.g. robot trajectories),
    semi-structured (e.g. GeoJSON produced by meteorological sensors), and unstructured
    (e.g. photos and videos taken by robots, upon a request from a farmer, in order
    to take appropriate corrective trajectory actions). Consequently, suitable software
    applications are needed for analysing historical data, processing data in real-time,
    and handling different data formats. The scheduling of the fleet of robots must
    support the following types of queries: Analytical queries, which explore historical
    data. Typical queries include OLAP queries, and Machine Learning algorithms, in
    order to improve the scheduling algorithm. Logistic experts could be interested
    in the duration (e.g., min, max, average) of trajectories across task types, robots,
    weather conditions, and farms. These queries involve data related to the different
    farms, and they are usually computed offline. Continuous queries, which run over
    streams of data. Continuous queries are automatically triggered with a fixed frequency.
    These queries involve data of a single farm. An example of a continuous query
    is: “Calculate every minute, the accumulated delay for each robot, over the last
    10 minutes”. Create, Read, Update, Delete (CRUD) queries, which run over dictionary
    data (e.g., reference trajectories). These queries may use data of different farms
    to check the availability of robots. An example of a CRUD query is: “Update the
    reference trajectory as consequence of a re-scheduling operation”. Finally, these
    queries feature different time computation constraints ranging from hard real-time
    ( e.g., hard real-time time computation for robot fault queries) to offline (e.g.
    OLAP queries). 2.2 Network requirements Commonly, robots and wireless sensors
    do not have the ability to be connected to the Internet. Indeed, depending on
    the location of the farm, cellular networks might not have sufficient coverage
    to support data transmission. Therefore, they cannot be connected directly to
    the cloud, which is necessary to store and compute Big Data. Therefore, we propose
    and implement an intermediary effective communication network layer Access network
    between field robots, sensors and the cloud. Moreover, the Access network must
    support dynamic configurations, since robots are mobile, and by consequence their
    dynamic location makes it difficult to communicate to the network. The Access
    network should offer enough bandwidth and high reliability for uninterrupted supervision
    and control of the robots. Moreover, the robots should be able to transmit critical
    real-time data to the farmer (such as video and images necessary for the remote
    control guidance of robots in case of unexpected or faulty behavior of robots).
    This requires low latency links especially for real-time commands sent by the
    farmer to the robots. Based on the network requirements shown in Table 1, the
    network solution should be well designed, i.e., a good coverage and sufficient
    number of access points to guarantee these network requirements. A deployed control
    station, managed by the farmer, plays the role of a gateway for the Access network
    in order to offer Internet connection to the robots. This control station is reachable
    through the network, and is connected to the cloud by means of classical protocols
    such as ADSL, fiber optics, or any other type of high speed connection. Therefore,
    the system must be deployed over a three-layer network architecture: Edge–Fog–Cloud.
    Robots represent the Edge layer, the control station of the farmer represents
    the Fog layer, and servers on the Cloud represent the third layer. In the next
    section, we describe the architecture implementing the aforementioned requirements.
    The transition from the requirements to the architecture has not been formalized,
    but we applied a practical approach based on our several years of experience on
    this topic. Indeed, a formal transition needs theoretical software engineering
    methods using a data-centric vision. A preliminary work in this direction is [8].
    3 LambdAgrIoT architecture It has been proved that the Lambda architecture [33]
    allows to efficiently process streaming data and static (warehouse-like) data,
    e.g., [26, 38]. For this reason, we draw upon this architecture, to meet the requirements
    described in Sect. 2. In this paper, we propose a new architecture, called LambdAgrIoT,
    as shown in Figs. 2, 9, and 10. Fig. 2 Components of the LambdAgrIoT architecture
    Full size image LambdAgrIoT is composed of the following five layers (see Fig.
    2). Data producers layer represents data sources deployed in the field, i.e.,
    robots and meteorological stations. They produce data that are sent to the Message
    queuing layer. Message queuing layer is in charge of managing data (messages)
    that are exchanged by different layers. Robots also receive data from this layer.
    Speed analysis layer provides tools for analyses of data in a real time. The layer
    is deployed in each farm. Serving layer supports scheduling robots and their tasks.
    Batch analysis layer centralizes all data from all farms and it supports the management
    and the analysis of historical data. Notice that this layer is in a very early
    stage of development and is part of the closest future work. These layers are
    deployed over the edge–fog–cloud network communication layers (see Figs. 9, 10).
    In the following, we detail the main features of each layer. 3.1 Data producers
    layer As we mentioned earlier, the two data producers are weather stations and
    robots. The station delivers multiple weather data measurements, such as temperature,
    humidity, dew point, wind speed and direction, wind chill, barometric pressure,
    rainfall, rain rate, UV and solar radiation data, using radio frequency and LAN
    converter. These data are published in specific topics at the Message queuing
    layer. Weather data are consumed by both the Speed layer using a stream pattern
    and the Batch layer. Robots run on Robot Operating System (ROS), which is an open
    source platform for robot software development. It provides a set of functionalities
    for hardware abstraction, low-level device control, and messaging. It comes with
    a set of external libraries, such as rospy and roscpp. The odometry and GPS data
    acquisition module is implemented in Python. These data are acquired 200 times/s,
    and then, sent via a socket to the Message queuing layer. Therefore, the Python
    code represents a data producer for the distributed streaming platform deployed
    at the Message queuing layer. The socket is also always listening for new reference
    trajectories, turning into a data consumer, in the case of a re-scheduling operation.
    Actually, we have installed one Davis Vantage Pro 2 wireless weather station in
    our farm. We have used our two Adap2e autonomous robots developed by INRAE [18].
    The usage of two robots corresponds to a realistic scenario, since fleets of huge
    number of robots is not yet a matter of fact in the French agriculture context.
    3.2 Message queuing layer Our system requires: (1) a scalable and fault-tolerant
    message delivering in real-time, and (2) the Publish/Subscribe and the stream
    interaction patterns. Therefore, we use Apache Kafka. Our choice is also motivated
    by the recent performance analysis of Kafka [19, 25], demonstrating high data
    ingestion rates. In our architecture, data producers (i.e. robots and the weather
    station) publish messages to specific kafka topics (a.k.a. channel). A kafka topic
    is a logical grouping for messages for all the consumers subscribing to that topic.
    The following kafka topics are created: Weather topic it stores data from the
    weather station. This topic is consumed by the Speed analysis layer for real-time
    analysis and by the Batch layer for storing historical data. Odometry low-frequency
    topic and GPS low-frequency topic they include data sent by a robot every second.
    These data are used by the Speed layer for real-time analysis. Odometry low-frequency
    topic represents mechatronics data of the robot. GPS low-frequency topic represents
    the real-time trajectory of the robot by the triplet <GPS-coordinates, timestamp,
    idrobot, speed>. Odometry high-frequency topic and GPS high-frequency topic they
    include data sent by robots every millisecond. They are exclusively used by the
    Batch layer. Odometry and GPS data are collected at high resolution for the following
    reasons. First, robotics engineers use real data to run their mechanical fault
    algorithms, which use odometry and GPS data at this high resolution. Second, some
    numerical values, such as traveled distance, battery energy level, are computed
    using raw data. The more data are delivered by robots, the more precise results
    are produced by these computations. Moreover, the Batch layer is in charge of
    calculating aggregation of several trajectories data. Therefore, reducing the
    error in the computation of traveled distance, battery energy level, and others,
    is mandatory when several trajectories are used. Third, the algorithm used to
    define the reference trajectory is defined using a 10 cm distance between two
    consecutive points. Therefore, in order to compare the real trajectory to the
    referenced one, a high resolution is needed since sometimes robots can reach speed
    of 45 km/h. Fourth, it is important to note that during a normal work of a robot
    (e.g., no incidents, no faults, no obstacles on a road), odometry data do not
    change at m/s scale, but when a fault arrives they can suddenly change and such
    a change has to be detected immediately to produce an immediate reaction of the
    system. Scheduled trajectory topic it includes reference trajectories re-scheduled
    by the algorithm at the Serving layer. Alerts and actions topic it includes alerts
    computed by the Speed layer and the corrective actions (automatically determined
    by the system or by the farmer). Therefore, data producers for Alerts and Actions
    are deployed in the Speed layer. Consumers are Batch layer and the robots, which
    retrieve from corresponding sub-topics actions they must perform. To conclude,
    this layer allows to handle in a uniform way all data coming from the sources
    and forwards them to other layers keeping transparent their variety (Requirement
    R–D3 Table 1). 3.3 Speed layer Three modules compose the Speed layer, namely:
    the Stream Analysis Module, DD-ST Module, and RT Monitoring Dashboard Module.
    The Stream Analysis module consumes data streams produced by data producers (robots,
    weather station), and published in specific kafka topics. The analysis of data
    streams allows: (1) tracking work progress in real time (calculate delays if any)
    and (2) signaling alerts and recommending corrective actions. This module requires
    scalable in-memory computations. For this purpose, we use Apache Spark and Apache
    Spark Streaming [52, 53]. In order to handle spatial data and spatial operators,
    we use Apache Sedona. In our architecture Sedona, Spark, and Spark Streaming process
    data coming from Kafka. The choice of using Spark Streaming, deployed on a stand-alone
    machine, results from the need to have an architecture that does not depend on
    the network communication. Indeed, if we supposed to have an access network such
    as 5G, then the Speed layer could be implemented directly in the cloud with the
    Batch layer. Therefore, the Speed layer and so Spark Streaming would process data
    from more farms, which could required to have a distributed architecture. We chose
    Spark since it comes with Sedona, which allows to query also spatial data. This
    functionality is mandatory for our analytical applications. We have defined four
    alerts: Delay, Spatial gap, Collision, and Meteo. Delay alert computes the delay
    of the robot in respect of the planned one, and informs the farmer. It calculates
    the difference time between the real time data sent by the robot and its reference
    trajectory. The reference trajectory is the historical data that is stored in
    PostGIS in the DD-ST module described in the next of this section. The message
    “Delayed” is sent to the farmer if the robot is more than 5 min late. Also, when
    the robot is 5 min faster than the planned time, a message (“Too Fast”) is sent
    to the farmer. The implementation of this query is shown in Fig. 3. Fig. 3 Delay
    alert query implementation Full size image Spatial gap alert calculates the spatial
    distance between the robot location and the reference trajectory points and inform
    the farmer if the robot is far or near to its reference trajectory. In particular,
    we have used a 1 min window query to calculate this alert. Then, if for all points
    received in the last minute there is a spatial deviation less than 1 m, the farmer
    receives the message “No Gap”, which mean that the robot is near to its reference
    trajectory. Otherwise, if there is a spatial deviation more than 1 m of all the
    robot points in the 1 min window, the farmer will receive the message “Strong
    Gap” which means that the robot is far from its reference trajectory. Finally,
    if only some points in the window have a gap of more than 1 m, the farmer will
    receive the message “Average Gap”, which means that the robot can catch-up to
    be near to its reference trajectory. This alert uses the window concept provided
    by Spark to create temporal buffers and compute data over these data. Collision
    alert computes in real time if any collision among robots can appear. This alert
    calculates for each data sent by the robots a spatio-temporal buffer of 5 m and
    5 s. When an intersection is present, then a message “Collision” with the robots’
    names is sent to the farmer. Note that the collision depends also on the speed
    of the robots, but in our case study, static temporal and spatial parameters can
    be effectively used. Meteo alert permits to monitor if the weather conditions
    are suitable for the agricultural activities. For each activity, the Meteo alert
    uses different weather parameters. For example, for spreading, the alert send
    the “Stop spreading” message to the farmer if average speed of the wind is superior
    to 18 km/h, or rainfall is superior to 5 mm, or air humidity is between 40 and
    45. Since rainfall needs to be measured as a cumulative value, a 3 h window is
    used in the implementation. It is worth to note that some alerts’ (such as Spatial
    gap and Delay) computation could be implemented directly inside the robots. However,
    we choose to handle them at the Speed layer to have a minimal maintenance of robots’
    software, and to enable correlation analysis with other events. To conclude, this
    module allows to support requirements about data R–D1 (Velocity) and R–D5 (Trajectory),
    and query R–Q2 (Continuous) as described in Table 1. The support for requirements
    computation are shown in Sect. 4. Description and Dictionary data, and Scheduled
    Trajectories (DD-ST) is a transactional spatial database that aims to store data
    used by the system. It is deployed on top of PostgreSQL relational database, implementing
    the PostGIS spatial extension. The database stores among others: reference trajectories,
    geometries of farms’ plots, and multiple robot data. These data are also used
    by the Speed analysis layer to resolve continuous queries and compute alerts (cf.
    Sect. 2). Since the communication network between the farm and the cloud is not
    reliable (typically an ADSL connection), it is not appropriate to query the cloud
    database to meet low-latency requirements. Therefore, we install a local replica
    of the cloud database in the farm. The database is made available as a database
    as a service. An excerpt of the database conceptual model, using the UML profile
    presented in [9] is shown in Fig. 4. The pivot element of the model is the reference
    trajectory (TrajectoryREF). It is associated with exactly one Plot and one Configuration.
    Configuration models a mapping of one robot to at most one equipment and one particular
    agricultural task (Activity) at a time. A robot has several attributes that do
    not change in time (e.g., name, dimensions), and two attributes that are updated
    by the scheduling algorithm, namely Available and PowerAvailable. They represent:
    (1) the next time range where the robot is free for use, and (2) the remaining
    battery power, respectively. Activity includes attributes that define meteorological
    conditions that must be satisfied to do an activity. These attributes values are
    used to define alerts on real-time meteorological data. Fig. 4 Excerpt of the
    UML model of the DD-ST module Full size image A trajectory is a sequence of spatial
    points (i.e. coordinates) with a timestamp attribute and other attributes (Point-TimeRF).
    Let us note that a trajectory is split into three sub-trajectories: (1) inside
    a plot (TrajectoryPlotREF), (2) from the warehouse to a plot (and vice versa)
    (TrajectoryWarehouseToPlotREF), and (3) from a plot to another plot (TrajectoryPlotToPlotREF).
    To conclude, this module allows to support requirements about data R–D4 (Spatio-temporal)
    and R–D5 (Trajectory), and query R–Q3 (CRUD) as described in Table 1. RT Monitoring
    Dashboard Module is used to analyze and visualize data computed in the Stream
    analysis module. The real-time data visualization application was designed to
    provide a quick and simple way to notify the farmers about alerts and to provide
    a visual analysis tool for the actual trajectories of robots. To allow multi-user
    interaction and to be multi-platform, the software was developed as a web application.
    It is executed partially on the client-side (by any web browser), and partially
    on the server-side by the Apache web server. The user does not need to install
    any native application on his device, but needs only access the web page served
    by the local web server installed on the edge device in the farm. Through PHP
    scripts, the web server can directly consume Kafka data streams produced by Spark
    analysis. Furthermore, the same PHP script, employing Server-Sent Events (SSE)
    technologies, can forward Kafka streaming data to any connected browser in real-time.
    The SSE allows the browser to get a notification for each new data available without
    multiple HTTP requests. In this way, the web page is automatically updated whenever
    the data change. In particular, the RT Monitoring Dashboard was deployed with
    an Apache2 web server employing PHP language for server-side processes and JavaScript,
    HTML, and CSS for client-side front-end. An Apache Kafka consumer was deployed
    employing the open-source library PHP-rdkafka released under the MIT license.
    The Kafka consumer subscribes to a specific topic, and whenever a new event is
    received at the server-side, it is forwarded to the connected clients using SSEs
    technology. Client-side, the JavaScript code catches the server event and displays
    its data manipulating the DOM document. Finally, the leaflet library was employed
    to visualize data on the map. The leaflet is a very popular open-source JavaScript
    library for mobile-friendly interactive maps. The web interface allows farmers
    to visualize at glance all information about the execution of the scheduled tasks.
    It is composed on three main panels (cf., Fig. 5): (1) Interactive and dynamic
    Gantt, which is responsible for the visualization of the advancement of each robot
    in its task; (2) Dynamic graphical charts, which visualize the numerical data
    (weather, odometry, and speed); (3) Interactive and dynamic map, which visualizes
    the real-time trajectories of robots and their reference trajectories. Yellow
    color is used for the reference trajectory, and red color for the real-time trajectory,
    then, using color blending, the real-time trajectory will be marked orange when
    the robot is in the right trajectory. Fig. 5 RT Monitoring Dashboard Module example
    in the current deployment (Color figure online) Full size image As suggested in
    [31], our geo-visualization system uses multiple coordinates views, which consists
    in providing different synchronized visual representations of the same data. When
    the farmer clicks on a particular line of the Gantt diagram, the map is centered
    and zoomed in the plot where the robot is working. The Gantt diagram linked to
    graph visualizations has been quite investigated in literature, but to the best
    of our knowledge no work proposes to synchronize them with maps. This coordination
    is inspired from the visual analytics mantra [13], “Overview first, zoom and filter,
    then details on-demand”. It allows the farmer to have a global vision of the scheduled
    tasks using the Gantt diagram (Overview first), where the temporal dimension is
    shown for different robots, but spatial and numerical details of the real-time
    trajectories are not shown. Then, using the Gantt diagram, the farmer can zoom
    on the trajectory of a particular robot (filter) and see information about its
    work (details on-demand) using the map. This module is implemented using PHP and
    installed on a Apache2 web-server. A video showing the functioning of the web
    interface is shown at this https://youtu.be/e52gNgseQFg. 3.4 Batch layer Data
    Warehouse (DW) and OLAP systems are main tools for Business Intelligence. They
    allow the analysis of huge volumes of data stored according to the multidimensional
    model. Warehoused data are organized in facts (i.e. analysis subjects) and dimensions
    (i.e. analysis axes). Dimensions are composed of hierarchies that allow analyzing
    data at different thematic, spatial and temporal granularities. Facts are described
    by numerical attributes called measures, which are aggregated along hierarchies
    with common SQL aggregation functions such as Min, Max, Sum, etc. OLAP systems
    allow exploring and aggregating measures via OLAP operators. More common OLAP
    operators are: Roll-Up and Drill-Down, which allow climbing and aggregating measures
    over dimensions levels, and Slice and Dice, which allow selecting a subset of
    the warehoused data. Usually, DWs are implemented using classical Relational DBMS
    using the star-schema approach, which denormalizes dimensional data to improve
    queries performance. In this work, we propose the usage of a DW to analyze the
    trajectories of robots with alerts and actions. Therefore, we implement a TDW,
    whose relational structure is shown in Fig. 6. The integration of trajectories
    data in DW has been investigated in several works (as detailed in Sect. 5) that
    propose three main different solutions: (i) storing point and timestamp data into
    spatial and temporal dimensions, (ii) use complex measures representing the trajectory
    as a single unique object, (iii) translate the point representation of the trajectory
    into a grid one. We opt for the solution (i) because the solution (ii) is not
    supported yet by commercial OLAP server, and solution (iii) implies a spatial
    granularity precision, which is not tolerated by robotics experts. Of course solution
    (i) presents also some drawbacks essentially associated to the huge size of the
    fact table, since for each point of the trajectory a fact table tuple is created.
    The DW that we have deployed contains the following dimensions (Fig. 6): Spatial
    dimension is composed of the point of the trajectory, the trajectory inside a
    plot, the corresponding farm and city. It is noted that since robots can move
    also outside plots (for example in roads), we use the term Plot/OutPlot. Point
    and Plot/OutPlot have spatial point and multi-polygon representation, respectively.
    Crop dimension is used to represent the crop present in the plot and it classifies
    crops into two coarse levels. Alert dimension is the list of the possible alerts.
    Action dimension represents the different actions applied by robots and/or farmers.
    Activity dimension identifies the particular agricultural task executed by the
    robots. Robot dimension is the list of the robots, classified according to their
    size. Equipment dimension represents the set of equipment, also classified by
    their size. Campaign dimension is a temporal dimension that represents the agricultural
    year. Scheduling dimension is used to group together trajectories belonging to
    the same scheduling. Temporal dimension represents the time of the trajectory
    point, and groups it by the starting hour. The fact table contains some numerical
    values that are associated to each point of the trajectory. In particular, the
    odometry values such as the speed and also the temporal delay in respect of the
    corresponding point of the reference trajectory are stored in the fact table.
    Fig. 6 Logical schema of the Trajectory Data Warehouse for analysis of historical
    robots trajectories data Full size image Using this DW, it is possible to answer
    to queries providing an insight into historic trajectories to visualize the mechanical
    behaviour of the robots, but it is also possible to analyze the scheduling tasks
    by retrieving the different computed alerts. These data are computed according
    to all other dimensions (analysis parameters). Examples of queries are: What alerts
    have been computed for all robots for the harvest task in this plot? What is the
    average delay of the spreading robot used in this farm? What is the max speed
    per robot in this plot? Finally, this layer allows for handling Volume and trajectory
    data (Requirements R–D2 and R–D5) and exploring them by means of OLAP queries
    (Requirements R–Q1) (see Table 1). We have implemented our DW using PostGIS. In
    this version of the system, the implementation of the Batch layer is based on
    a non-distributed DBMS. We are aware of the limitations of such an architecture,
    mainly scalability, but for the time being, the number of robots deployed at the
    same time at the farm is up to three and therefore, the proposed DBMS architecture
    is sufficient to handle the amount of data generated by these robots. Moreover,
    the choice of this kind of the relational logical design is motivated by the possibility
    to transparently change the physical implementation to adopt the distributed version
    of PostgreSQL (Postgres-XL) or Apache Hive, in order to handle huge volumes of
    trajectory data. We are working on the finalization of the OLAP system. This implementation
    is compatible with OLAP technologies we currently use in other projects. In particular,
    for the OLAP Server we plan to use Mondrian, and for the OLAP client—Saiku. However,
    we are working on the extension of our cartographic tool for the geovisualization
    of OLAP queries (Map4OLAP) [11] in order to take into account also temporal data
    for the visualization of spatial dimensional data. In other words, we are working
    on the parser of OLAP queries results of Map4OLAP, to build geometrical representations
    using spatial and temporal dimension members. This is to allow to build choropleth
    maps with trajectories data. 3.5 Serving layer The Scheduling service of robots’
    tasks is composed of two parts, namely, (1) the logistical decisions and (2) the
    trajectory design. The former, called extra-plot scheduling, is mainly the assignment
    of robots to perform necessary tasks on plots. The latter, called intra-plot scheduling,
    is mainly the movement of robots inside a plot to perform tasks. Intra-plot scheduling
    can be done beforehand, which means that for each pair robot-equipment, called
    configuration, and for each plot, the trajectory inside the plot can be designed
    in advance. Then, when using a configuration for a plot, the extra-plot scheduling
    can determine, from intra-plot scheduling, time and energy spent to perform the
    task. The extra-plot scheduling goal is to satisfy a set of demands that are emitted
    by the human operators. A demand i is a request for a task \\(t_{i}\\) to carry
    out in a time window \\([l_{i};u_{i}]\\), with a preferred starting date \\(o_{i}\\),
    and a priority \\(p_{i}\\) to indicate the importance of the demand. The scheduling
    is mainly to decide when and with which robot(s) to fulfill each demand. The quality
    of a solution is measured by a prize \\(P_{i}\\) for each demand i that depends
    on the date \\(w_{i}\\) its task is scheduled to start and its priority: the closer
    \\(w_{i}\\) is to the preferred starting date \\(o_{i}\\), the closer is the prize
    \\(P_{i}\\) to the priority \\(p_{i}\\). The scheduling problem aims at finding
    a solution that maximizes the sum of all the prizes \\(P_{i}\\). As described
    in the previous sections, new demands possibly come on the fly. Thus, we focus
    here on online scheduling: only a subset of demands is known at any time, and
    the algorithm adapts in real-time the schedule with the evolution of the demands.
    Our algorithm provides only the next reference trajectory of each robot, which
    should satisfy only some of the demands. A reference trajectory is here a circuit
    starting at the warehouse where the robot is first set up with an equipment and
    refilled, then sent successively to many plots to achieve the same task, and ultimately,
    returns to the warehouse where its next trajectory is computed. Finding the next
    reference trajectory is modeled as a MILP, an optimization problem that can be
    solved by linear program solvers like CPLEX with C++. As input, this program needs,
    for each robot and equipment, the date it will be available, and as output, it
    provides the next reference trajectory of each robot (cf. Fig. 7). Fig. 7 Finding
    next reference trajectories with online scheduling Full size image At the first
    iteration (i.e., a call) of the algorithm, a trajectory is assigned to each robot.
    At the next iterations, a trajectory is assigned only to the next available robot
    in the warehouse. As the algorithm works online, it could lead to a blocking situation,
    e.g. decisions of iteration k could make impossible to satisfy some demand at
    iteration \\(k+j\\). To prevent this, a “simulation” of the next decisions of
    the online algorithm is run: based on the estimated availability date of each
    robot, the online algorithm is run for iteration \\(k+1, k+2,\\ldots\\) until
    all the demands known at iteration k are satisfied. If a blocking situation is
    found, the priorities of the demands are adjusted and a new simulation is run,
    until finding a non blocking solution (cf. Fig. 7). This algorithm can be used
    to deal with unpredictable events. Indeed, meteorological alerts, robots’ failures,
    or plants’ disease detection, can be seen by the online algorithm as robots that
    go back to the warehouse (some tasks are stopped) and new demands that arise (uncompleted
    tasks become new demands, and some events can produce new demands). It is also
    necessary to decide which robots to interrupt in their mission to make them available
    to adapt to these events. One approach (cf. Fig. 8) would be to select, among
    many recall scenarios, the one providing the best solution with the online algorithm
    from Fig. 7. Fig. 8 Management of unpredictable events with online scheduling
    Full size image Solving the whole scheduling problem at once is difficult since
    it requires long computation time, using for instance linear programming (as we
    begin to do). In this work, to reduce computation time, we choose an iterative
    approach that solves each time a MILP, and we are developing constraints for our
    model to prevent most of the iteration blocking situations. 3.6 Network architecture
    As mentioned in Sect. 2, motivated by our real experience-based ascertainment
    that most of French farms are not deployed with recent network communication protocols
    such as 5G, fibre-optic, etc., we use a Wi-Fi network to ensure a wireless connection
    between the robots and the farmer. This allows the farmer to have a permanent,
    low budget, and operator independent communication network to control and supervise
    the robots. Figures 9 and 10 show the three-layer network architecture: Edge–Fog–Cloud.
    Robots represent the Edge layer, the farmer control station represents the Fog
    layer, and the cloud servers represent the Cloud layer. In our case, the Fog plays
    a crucial role. It offers Internet connection to the robots, offloads processing
    from the robots, and most importantly, allows real-time interaction between the
    farmer and the robots. The proximity and the quality of the Wi-Fi network must
    allow real-time interaction that guarantees the application requirements (i.e.,
    low delay, high data rate, low data loss). Fig. 9 The LambdAgrIoT network architecture
    Full size image Fig. 10 LambdAgrIoT network and modules mapping Full size image
    High speed Wi-Fi standards including IEEE 802.11ac (Wi-Fi 5) [35] and IEEE 802.11ax
    (Wi-Fi 6) [27] come with a vast improvement in features and capabilities compared
    to legacy 802.11 standards. The problem of overcoming spectrum limitation while
    delivering high data rate requirements can be achieved using multiple antennas.
    The multiple-input multiple-output (MIMO) technique has proven to be the next
    major advance in radio technology. It plays a vital role in enhancing the capacity
    and the reliability of wireless communication systems, as it offers the possibility
    to profit from spatial multiplexing and beamforming. In spatial multiplexing,
    different symbols are transmitted through different antennas, so that the data
    rate is improved reaching up to 9.6 Gbps. Beamforming on the other hand reduces
    multipath fading and channel interference by concentrating the signal radiation
    only toward the anticipated direction. Beamforming techniques extend Wi-Fi coverage
    and allow utilizing higher Modulation and Coding Scheme (MCS) values at farther
    distances, which leads to achieving higher data rates. Multi-User MIMO (MU-MIMO),
    as well as OFDMA (used in Wi-Fi 6), allow to serve multiple robots at once reducing
    the amount of time a robot/router has to wait in order to receive the next data
    frame. The range extension and capacity enhancement achieved by using the MIMO
    technology is not only limited to increasing the data rate and reducing interference,
    it also complements the deployment technique by reducing the number of required
    Wi-Fi routers and overcoming the physical limitations on their placement caused
    by obstacles inside the field. As depicted in Fig. 9, Wi-Fi routers placement
    is important in order to enlarge the coverage area, and minimize non-coverage
    areas. In certain scenarios, i.e.: deployment in large fields, multihop networks
    are used by either introducing static robots or using the mobile robots themselves,
    it extends the coverage of the network and improves connectivity. Moreover, using
    the robots as intermediate nodes eliminates the need for cable deployment reducing
    the cost and the complexity of the deployment. In this architecture, we can distinguish
    two types of networks: Access network and Collect network (Figs. 9, 10). The Access
    network ensures quality communication links between the robots (Edge layer) and
    the farmer (Fog layer). This is done through the Wi-Fi network. The Collect network
    offers a communication link between the farmer and the cloud servers for further
    analysis and storage. This is done through any type of broadband connection (e.g.
    ADSL, Fiber, Cable). The performance on both networks will have a direct impact
    on the size and type of data that can be exchanged at any time between the robots
    and other entities (like farmers and cloud servers). 4 Experiments In this section
    we report the results of a preliminary experimental evaluation of the architecture,
    conducted to show the feasibility of our proposal. Firstly, we put to the test
    each layer using simulated data (Sect. 4.1 for the Speed layer, Sect. 4.2 for
    the Batch layer and Sect. 4.3 for the Serving layer), then we describe a real
    experience in the field. 4.1 Speed layer In the next of this section, we report
    some tests showing the performance of the Speed layer w.r.t. the Volume of data
    computed and real-time features as defined in the Table 1. In particular, we measure
    the computation time for two alerts: Delay and Collision w.r.t. the number of
    robots (i.e. the number of different data ingested and computed by the Stream
    Analysis module). We simulate data for 10, 20 and 50 robots, which is at the limit
    of a realistic scenario for the Speed layer since we recall that in our architecture
    one Speed layer is deployed for each farm, which means that the 50 robots scenario
    means that one farmer has 50 robots at the same time on her/his farm. From a pure
    technical point of view, the test data used do not represent a real Big Data set.
    However, the experimental setting composed of 50 simulated and 2 real robots reflect
    a real setting used in farms. Indeed, the usage of robots in agriculture is real
    in the primordial era. In real life, really few farms have robots, and when they
    deploy them, maximum one to three robots are shared by different farmers. Therefore,
    the usage of larger data volumes is an interesting issue, for future experimentation,
    as described in Sect. 6. For this test, we have deployed the Speed layer using
    Spark Streaming (version 2.3.3) running on Java 1.8 installed on one machine (a
    PC laptop), running on Windows (version 10) as the operating system. The machine
    has 32 GB RAM and a quad-core 64-bit i5 processor. Results for the Delay and Collision
    alerts are shown in Figs. 11 and 12. Results show that execution time for Collision
    alert takes less than 1.5 s for 50 robots, which confirms the scalability of our
    approach w.r.t. the number of robots, since 1.5 s processing time can be tolerated
    by the farmer for this kind of alert. Delay alert computation time are a little
    bit higher, since this query must use reference trajectory data that is stored
    in the DBMS PostGIS of the DD-ST module. However, also in this case, the performance
    is under 2.5 s that is reasonable for this kind of alert that does not need hard
    real time computation. Fig. 11 Alert Delay time performance Full size image Fig.
    12 Alert Collision time performance Full size image 4.2 Batch layer In this section,
    we present some tests to show the scalability of the TDW. In particular, we measure
    the computation time of a set of representative OLAP queries over our case study.
    The DW of the Batch layer has been deployed using a machine running Windows 10
    64-bit as the operating system, 4GB of RAM and an AMD FX 4100 @3.6 GHz 64-bit
    Quad core processor. The DW has been implemented using PostGIS. In order to test
    the feasibility of our implementation, we have defined a set of representative
    queries for our case study as shown in Table 2. These queries have been implemented
    in SQL. For example the implementation of the query: “What are the points and
    their alerts for each plot, each year that have an alert and alerts different
    from NoAlert(AlertID = 8)?” is shown in Fig. 13. We have defined six queries according
    to how trajectory is used. Queries q1, q2 and q3, consider each trajectory as
    one unique complex object and calculate an aggregation of the numerical measure
    (i.e. delay) over all its points. Moreover, queries q2 and q3 apply a spatial
    and temporal predicate to select the trajectories that must be computed, respectively.
    Query q4 outputs points inside the trajectories. Finally, q5 computes the numerical
    values using different trajectories. In order to test the time performance of
    our logical schema of Fig. 6, we have fed the DW with trajectories composed of
    6442 points per trajectory, achieving a fact table with 1.062.120 tuples. These
    data have been simulated, introducing some spatial deviations from the corresponding
    reference one. Fig. 13 Example of OLAP query implementation Full size image Table
    2 OLAP queries Full size table From the results shown by Fig. 14, we can conclude
    that all kinds of queries have feasible time and so the implementation is coherent
    for OLAP analysis and then coherent with offline computation requirement (R–Q1
    and R–C2) described in Sect. 2 (Table 1). Fig. 14 Execution time of OLAP queries
    of Table 2 Full size image 4.3 Serving layer In the next, we present the performance
    of the Serving layer, and in particular of solving the MILP (cf. Fig. 7) that
    is the part requiring most of the computation time of online scheduling. The experiment
    has been achieved on an Intel Core i5-8400 CPU @ 2.80 GHz with 6 cores, on Ubuntu
    20.04.2 LTS 64-bit operating system, and using CPLEX version 12.10 for linear
    programming solving. The tested problem instances are adapted from well-known
    instances of the Vehicle Routing Problem with Time Window (VRPTW) introduced in
    [46]. The time windows and the distances from the VRPTW instances are kept to
    define the demands and the travel times of our instances. The preference time
    of each demand is set inside its time window and is twice farther from the end
    than from the start. Each demand’s priority was generated randomly between 1 and
    100. Instances are designed with three robots of the same kind and six tools from
    three different compatible equipment kinds, i.e. two tools of each kind. This
    makes three different possible configurations. The demands are divided into three
    groups, each one can be satisfied by at least two configurations. The battery
    capacity is 100 J, enough for a robot to satisfy the farthest demand. The instances
    are designed to spend most of the energy in performing the tasks and not in traveling.
    Table 3 shows the effective execution time (in seconds, third column) to solve
    the first iteration MILP of 17 instances generated with 20 demands and 20 plots,
    and the proportion (second column) of demands satisfied by each found solution
    (as we test the first iteration of the online algorithm, the solution consists
    in the first scheduled routes of the robots). For 12 instances, an optimal solution
    was found within 600 s, and for the others, the solving has been stopped when
    reaching this time limit, getting feasible solutions with a maximum gap (i.e.
    relative distance to the best found yet upper bound of the objective) of 99.38%
    in the worst case (last column). This shows that the MILP resolution that is at
    the center of the online algorithm is suited for real-time response. Therefore,
    the Serving layer supports analytical and real-time requirements as described
    in Sect. 2. Table 3 MILP solving performance Full size table 4.4 A real scenario
    In this section, we present a real experience to put to the test the Data producer,
    Queuing and Speed layer. Both robots used to perform this experiment run under
    ROS. These two robots are equipped with the following equipment: one GPS, one
    IMU, one Wi-Fi transceiver 2.4 GHz (Bullet M2), and sensors for the odometry.
    To insist on the flexibility of this architecture, the chosen robots are different.
    One robot is a mobile manipulator (Campero robot) and one is a mobile platform
    (Adap2e robot) (Fig. 15). Built by the Robotnik company, Campero, a mobile manipulator
    piloted by skid-steering, can be used as a support for research on mobile manipulation.
    this robot weighs 150 kg for a payload of 30 kg. The dimensions of this robot
    are 1 m long and 0.8 m wide. It is equipped with a Universal Robot UR10 arm allowing
    10 kg to be loaded at the end of the arm. This prototype makes it possible to
    test the servo-control of on-board tools against a plant structure. Designed entirely
    by the Romea team as part of the Adap2E project, 1 this robot has four independent
    driving and steering wheels. It weighs 500 kg for a footprint of \\(2.3\\times
    0.7\\times 1\\) m and is designed to go in different types of plots with a payload
    of 150 kg. Designed to be versatile, it is able to associate with its twin, in
    the process of being finalized, and to embed different types of sensors to adapt
    to varied conditions, as well as to its multiple missions. Fig. 15 Robots used
    for the real experiment: Campero (left) and Adap2e (right) Full size image The
    experiment area is shown in Fig. 16. Figure 16 shows the area where Adap2e robot
    evolved during GPS trajectory following and the stand-by point for Campero robot.
    Its size is \\(40\\,{\\text {m}}x18\\,{\\text {m}}\\). The PC laptop with the
    message queuing layer and the Speed layer (RT Monitoring Dashboard) is located
    in our office near the field. This laptop is running Ubuntu 20.04.3 LTS (Focal
    Fossa) as the operating system, 8 GB of RAM and an Intel core i7-6700 @4.0 GHz
    64-bit Quad core processor. For this experiment, the mobile manipulator (Campero)
    follows the GPS reference trajectory that we have manually predefined (the yellow
    trajectory shown in Fig. 16). During this time, the mobile platform (Adap2e) is
    on standby. The two robots transmit their speeds, GPS positions, and some internal
    alerts to the Message Queuing layer at a 10 Hz rate (i.e. 10 data/s). We chose
    to send more data than what shown in the previous section (1 data/s) to put to
    the test in a real life condition the Speed layer and the Wi-Fi connection. For
    this experiment, weather data was simulated. The tested alert is the collision
    alert among robots described in the previous section. The standby robot is closed
    to the trajectory followed by the second one. Thus, the distance between the robots
    will vary over time and when it is less than 5 m over a period of more than 5
    s, then the collision alarm will warn the user via the web interface. The network
    communication is configured in this way (Fig. 16): robots send data via Wi-Fi
    and radio to Ubiquity bullets. Then, data are forwarded to the PC laptop through
    Ethernet. Figure 17 shows a picture of the robots during the work. The picture
    has been taken using a drone. Figure 17 shows also the corresponding visualization
    using our web interface. A video excerpt of the experience can be found here:
    https://www.youtube.com/watch?v=hSt35G82rv4. Fig. 16 Experimental area configuration
    Full size image Fig. 17 A picture of the experimentation Full size image The results
    of the experience are the following ones: Data producer layer ROS has not found
    any difficulties or problems in collecting and sending data. Message Queuing layer
    Kafka has ingested and sent all data of the robots without no data loss. Speed
    layer: the collision alerts have been well computed and shown on the web interface.
    Network it has supported the data communication without difficulties or problems.
    The experience validates the requirements described in the Sect. 2 about the important
    computation and communication provided by the software tools used by the architecture.
    Moreover, it is important note the independence of the architecture from the robot
    type and the ROS middleware, which allows for easy implementation. Four other
    particularly interesting points could be observed from the robots’ applications
    development: This architecture allows for real-time or near real-time monitoring.
    The robot can share information with other robots or other computers easily without
    dependency on its low level. The robot can share information with other robots,
    other computers, or DWs easily without dependency on its low level. The system
    is able to support multiple robots for monitoring. 5 Related work The usage of
    IoT data in smart farming, and recently for agro-ecology, has been investigated
    in several works. Reference [48] provides a survey of existing works using IoT
    for crop management. Authors put in evidence the importance of IoT for precision
    farming and predictive actions. In the same way, References [36] and [5] provide
    surveys of works using IoT for smart farming. A particular focus on the usage
    of robots in agriculture is provided in [24] and [28] that show the potentialities
    of autonomous robots in agriculture. Other existing works cover mainly different
    scopes (as surveyed in [29]): (1) capturing, storing, and analyzing data for a
    specific purpose [32, 37, 51], (2) agricultural machinery management [6, 12, 20],
    and (3) scheduling robots. Capturing, storing, and processing data. Collected
    data must be managed appropriately in order to extract insights, and support farmers.
    In [51], authors stress that early forecasting of farms’ products is important
    for market planning and for growers and exporters to plan labour, bins, as well
    as storage and purchase of packing materials. Forecasts are basically based on
    continuous check of the production. In [32], the authors describe the deployment
    of sensors in chicken coops in order to ensure a healthy environment via monitoring
    ambient air quality. Reference [37] focuses on the use of IoT technologies in
    Food supply chain farm to fork, starting with production phase (smart farming,
    livestock management), transportation and distribution phases, and finally retail
    phase (loyalty cards, smart trolleys). A particular focus on TDW for mobility
    data is presented in what follows. In the last years some works study TDW (see
    [3, 41] for a survey). Reference [41] groups existing works in two main groups:
    cell and segment approaches. Cell approaches map the trajectory in a regular cells
    grid. For each cell, a aggregation of all numerical values is stored in the TDW.
    Segment approaches store start and end points of the trajectory and some numerical
    descriptive values, such as duration, distance, etc. These works are not suitable
    for our case study, where a detailed representation of the robots trajectories
    is needed. In other terms, these work provide an aggregated/approximated representation
    of the trajectory. Therefore, some works propose to store all the point of the
    trajectory in the TDW. However, these works do not report performance queries
    time and use ad hoc OLAP queries. To conclude, although Spatial DW [10], and TDW
    has been studied in several work, its usage in the context of autonomous agricultural
    robots analysis is still an open issue. Agricultural machinery management. As
    highlighted in the literature review [12], many research works address agricultural
    machinery management tasks such as capacity planning, tasks’ times planning, scheduling,
    route planning, and performance evaluation. Robots’ routes planning is complex,
    and is usually based on implementing and assessing simulations. In [6], the authors
    create and model simulated robots’ trajectories on ROS Gazebo simulation tool.
    This allows them to test robots’ trajectories using first real Digital Elevation
    Model (DEM) for 3-D representation of the terrain, and second the effectiveness
    of obstacles’ encounters detection by robots’ LiDAR sensors. In [20], authors
    present also a simulation tool for minimizing the worked distance of agricultural
    vehicles using their real time geographical position. However, this optimization
    tool is not designed for a fleet of vehicles. In [45], the authors propose a rescheduling
    algorithm for a fleet of vehicles. This algorithm uses real time data issued from
    the vehicles (speed and GPS) to define the new reference trajectory. Scheduling
    is by nature a difficult optimization problem [40]. Scheduling a fleet of robots
    in an agricultural system adds more complexity, as the scheduling must take into
    account new constraints, and outputs new schedule in real-time. The VRPTW is also
    proved to be a hard optimization problem [15]. Thus, one common approach is to
    use metaheuristics instead of exact optimization methods, like [30] that uses
    a hybrid genetic algorithm for a harvest scheduling problem. In addition, to find
    a solution robust enough to resist to hazards, such as delay or robot failure
    that will inevitably occur, high computing would be necessary to find solutions
    for a set of scenarios [2]. Online scheduling usually needs to be more reactive
    and less predictive [42] than offline scheduling, because less time is available
    to test many scenarios. The optimization techniques and the problem formulations
    can thus be different. Notably, related to our optimization problem, we can notice
    the DS-VRPTW (Dynamic and Stochastic VRPTW, i.e., VRPTW with stochastic customer
    demands) solved by online methods like the GSA (Global Stochastic Assessment)
    algorithm that is based on a stochastic programming heuristic [44]. A survey of
    works on scheduling of agricultural vehicles is presented in [12]. They classify
    scheduling tasks according to used decision methods, such as simulation or analytical
    optimization. They also highlight the online capabilities of these scheduling
    methods, based on data collected in real time by sensors installed in the field
    and on robots [47]. In all research directions, the adoption of new information
    technologies is very important since it provides better support to stake-holders.
    In [36], the authors survey literature and evaluate the adoption of new IT technologies,
    such as big data, computer vision, artificial intelligence, blockchain and fuzzy
    logic in the smart agriculture field. In [50], the authors survey literature on
    big data applications in Smart Farming which turn farm management and farm processes
    into highly data driven and data enabled applications. The data chain includes
    data capture, data storage, data transfer, data transformation, data analytics,
    and data marketing. Few related works use big data architecture for monitoring
    farming tasks. In [17], the authors propose a big data architecture for processing
    weather data and aerial images of crop farms. The architecture implements the
    Speed layer (e.g. Kafka, Samsa, and Druid technologies) and the Batch layer (e.g.
    Hadoop, Spark technologies), in order to set up a smart data enabled irrigation
    system. In [43], authors have adopted Lambda architecture, which guarantees the
    scalable and fault-tolerant of the real-time data processing. They develop a cloud-based
    Smart farming management system, applied to the Wallonia region of Belgium. Our
    work aims to not only manage the massive data coming from IoT devices, but also
    control and schedule tasks through distributed systems using smart robots. Recently,
    References [29] and [1] survey related work concerning multi-agent based allocation
    and robots collaboration. Reference [1] proposes a general multi-agent cloud framework,
    but no implementation has been provided. The lack of successfully proved data
    and network architectures in this scheduling context has been also identified
    in the survey work of [47], and [54]. A review of technologies supporting the
    Internet of Vehicles (loosely related to our work) has been published recently
    [4]. 6 Conclusion and future work Nowadays autonomous agricultural robots are
    more and more frequently used. They offer an important solution for the agro-ecology
    transition, as they have low impact on the environment (light, possibility to
    operate in fleet), and they are able to perform repetitive and accurate farming
    operations over a long time period. These autonomous vehicles produce huge volumes
    of data, which combined with other smart farming IoT devices, play a crucial role
    for agriculture stake-holders to analyze the agricultural practices. In this context,
    a challenging research and technological issues include: (1) managing massive
    data that come from autonomous robots in a form of streaming data and (2) robots’
    scheduling in real-time, based on the analysis of the streaming data. To this
    end, in this paper, we proposed a multi-layer Lambda Architecture—LambdAgrIoT.
    It was designed to fulfill the requirements of big data management, query execution,
    real-time reactivity and network monitoring. The main components of LambdAgrIoT
    include: (1) data producers, which are mainly the robots and the weather stations;
    (2) the message queuing layer, based on Apache Kafka, for managing messages exchange
    between the different components of the architecture; (3) the Speed layer, based
    on Apache Spark, Apache Spark Streaming, and Apache Sedona, which manages, stores
    and shows all real time data generated by data producers; (4) the Batch layer
    with all its underlying dimensions, which manages the big data related to robots
    operations, based on the Data Warehouse and OLAP technologies; (5) the Serving
    layer, which manages the decision making and the trajectory design of robots,
    based on optimization problem solving. The whole architecture was evaluated experimentally
    in a real, although small, setting. The results turned out to be promising, as
    they showed the applicability of LambdAgrIoT to managing real farm robots. Moreover,
    LambdAgrIoT offered an acceptable processing delay and execution time of its main
    components. The main limitation of the experimental evaluation is the fact that
    LambdAgrIoT produced simulated trajectories and that it was tested in a controlled
    environment with a relatively low usage of the wireless network. For this reason,
    an extended experimental evaluation including a larger setting is currently under
    development, including extensive experiments of the Speed Layer using massive
    streaming data. Moreover, the on-going work focuses also on: The OLAP Server implementation
    in the Batch layer and the extension of Map4OLAP for cartographic visualization
    of trajectory data. Benchmarking other logical models than the one presented in
    Sect. 3.4, using an high number of data and varying the resolution of each trajectory
    (i.e. the number of elements composing each trajectory). Benchmarking the physical
    implementation of the OLAP implementation using Postgres XL and Hive, which are
    relational-based distributed DBMSs. In the nearest future, it is envisaged to
    extend the scheduling algorithm to provide as an output real trajectories (and
    not simulated ones), using a new top-k robots trajectories algorithm. The main
    idea is to find in the TDW the ’best’ trajectory. Furthermore, with multiple robots
    connected to the same access network, guaranteeing performance with the presence
    of interference in the Wi-Fi network is not an easy task. Therefore, we will work
    on a cross-layer network design that allows the application to be aware of the
    quality and capacity of the communication links, in order to adapt its requirements
    accordingly. Data availability The datasets generated during and/or analysed during
    the current study are not publicly available due to confidential reasons. Change
    history 13 November 2022The original online version of this article was revised:
    The author biographies and photos were mismatched, the biographies and photos
    have been corrected now. Notes https://adap2e.inrae.fr/. References Afrin, M.,
    Jin, J., Rahman, A., et al.: Resource allocation and service provisioning in multi-agent
    cloud robotics: a comprehensive survey. IEEE Commun. Surv. Tutor. (2021). https://doi.org/10.1109/COMST.2021.3061435
    Article   Google Scholar   Aissi, H., Bazgan, C., Vanderpooten, D.: Min–max and
    min–max regret versions of combinatorial optimization problems: a survey. Eur.
    J. Oper. Res. 197(2), 427–438 (2009) Article   MathSciNet   MATH   Google Scholar   Alsahfi,
    T., Almotairi, M., Elmasri, R.: A survey on trajectory data warehouse. Spat. Inf.
    Res. 28(1), 53–66 (2020) Article   Google Scholar   Arooj, A., Farooq, M.S., Akram,
    A., et al.: Big data processing and analysis in Internet of vehicles: architecture,
    taxonomy, and open research challenges. Arch. Comput. Methods Eng. 29, 793–829
    (2021) Article   Google Scholar   Ayaz, M., Ammad-Uddin, M., Sharif, Z., et al.:
    Internet-of-Things (IoT)-based smart agriculture: toward making the fields talk.
    IEEE Access 7(1), 129551–129583 (2019) Article   Google Scholar   Bechtsis, D.,
    Moisiadis, V., Tsolakis, N., et al.: Scheduling and control of unmanned ground
    vehicles for precision farming: a real-time navigation tool. In: International
    Conference on Information and Communication Technologies in Agriculture, Food
    and Environment (HAICTA), 2017, pp. 180–187 (2017) Belhassena, A., Battistoni,
    P., Souza, M., et al.: Towards an architecture for agricultural autonomous robots’
    scheduling. In: 2021 IEEE 25th International Enterprise Distributed Object Computing
    Workshop (EDOCW), 2021, pp 194–203. IEEE Computer Society, Los Alamitos (2021).
    https://doi.org/10.1109/EDOCW52865.2021.00049 Belhassena, A., Bimonte, S., Battistoni,
    P., et al.: On modeling data for IoT agroecology applications by means of a UML
    profile. In: International Conference on Management of Digital EcoSystems (MEDES),
    2021 (2021) Belhassena, A., Bimonte, S., Battistoni, P., et al.: On modeling data
    for IoT agroecology applications by means of a UML profile. In: Chbeir, R., Manolopoulos,
    Y., Bellatreche, L., et al. (eds) MEDES ’21: Proceedings of the 13th International
    Conference on Management of Digital EcoSystems, Virtual Event, Tunisia, 1–3 November
    2021, pp 120–128. ACM (2021). https://doi.org/10.1145/3444757.3485109 Bimonte,
    S.: Current approaches, challenges, and perspectives on spatial OLAP for agri-environmental
    analysis. Int. J. Agric. Environ. Inf. Syst. 7(4), 32–49 (2016). https://doi.org/10.4018/IJAEIS.2016100103
    Article   Google Scholar   Bimonte, S., Edoh-Alove, É., Coulibaly, F.A.: Map4OLAP:
    a web-based tool for interactive map visualization of OLAP queries. In: Chen,
    Y., Ludwig, H., Tu, Y., et al. (eds) 2021 IEEE International Conference on Big
    Data (Big Data), Orlando, FL, USA, 15–18 December 2021, pp 3747–3750. IEEE (2021).
    https://doi.org/10.1109/BigData52589.2021.9671574 Bochtis, D.D., Sørensen, C.G.,
    Busato, P.: Advances in agricultural machinery management: a review. Biosyst.
    Eng. 126, 69–81 (2014) Article   Google Scholar   Card, S.K., Mackinlay, J.D.,
    Shneiderman, B.: Readings in Information Visualization—Using Vision to Think.
    Academic, London (1999) Google Scholar   Cariou, C., Gobor, Z., Seiferth, B.,
    et al.: Mobile robot trajectory planning under kinematic and dynamic constraints
    for partial and full field coverage. J. Field Robot. 34(7), 1297–1312 (2017) Article   Google
    Scholar   Cordeau, J.F., Desaulniers, G., Desrousiers, J., et al.: VRP with time
    windows. In: The Vehicle Routing Problem. SIAM Monographs on Discrete Mathematics
    and Applications, pp. 157–193. SIAM, Philadelphia (2002) Dalgaard, T., Hutchings,
    N., Porter, J.: Agroecology, scaling and interdisciplinarity. Agric. Ecosyst.
    Environ. 100(1), 39–51 (2003) Article   Google Scholar   Debauche, O., El Moulat,
    M., Mahmoudi, S., et al.: Irrigation pivot-center connected at low cost for the
    reduction of crop water requirements. In: International Conference on Advanced
    Communication Technologies and Networking (CommNet), 2018, pp 1–9. IEEE (2018)
    Deremetz, M., Couvent, A., Lenain, R., et al.: A generic control framework for
    mobile robots edge following. In: Proceedings of International Conference on Informatics
    in Control, Automation and Robotics, 2019, pp 104–113 (2019) Dobbelaere, P., Esmaili,
    K.S.: Kafka versus RabbitMQ: a comparative study of two industry reference publish/subscribe
    implementations: industry paper. In: ACM International Conference on Distributed
    and Event-based Systems (DEBS), 2017, pp. 227–238 (2017) Edwards, G.T., Hinge,
    J., Skou-Nielsen, N., et al.: Route planning evaluation of a prototype optimised
    infield route planner for neutral material flow agricultural operations. Biosyst.
    Eng. 153, 149–157 (2017) Article   Google Scholar   Emani, C.K., Cullot, N., Nicolle,
    C.: Understandable big data: a survey. Comput. Sci. Rev. 17, 70–81 (2015) Article   MathSciNet   Google
    Scholar   Emmi, L., Gonzalez-de Soto, M., Pajares, G., et al.: New trends in robotics
    for agriculture: integration and assessment of a real fleet of robots. Sci. World
    J. (2014). https://doi.org/10.1155/2014/404059 Article   Google Scholar   Fountas,
    S., Carli, G., Sørensen, C.G., et al.: Farm management information systems: current
    situation and future perspectives. Comput. Electron. Agric. 115, 40–50 (2015)
    Article   Google Scholar   Gonzalez-de Santos, P., Fernández, R., Sepúlveda, D.,
    et al.: Field robots for intelligent farms—inhering features from industry. Agronomy
    10(11), 1638 (2020) Article   Google Scholar   Hesse, G., Matthies, C., Uflacker,
    M.: How fast can we insert? An empirical performance evaluation of Apache Kafka.
    In: IEEE International Conference on Parallel and Distributed Systems (ICPADS),
    2020, pp 641–648 (2020) Iftikhar, N., Lachowicz, B.P., Madarasz, A., et al.: Real-time
    visualization of sensor data in smart manufacturing using Lambda architecture.
    In: International Conference on Data Science, Technology and Applications (DATA),
    2020, pp. 215–222 (2020) Khorov, E., Kiryanov, A., Lyakhov, A., et al.: A tutorial
    on IEEE 802.11ax high efficiency WLANs. IEEE Commun. Surv. Tutor. (2019). https://doi.org/10.1109/COMST.2018.2871099
    Article   Google Scholar   Krishnan, A., Swarna, S., Balasubramanya, S.H.: Robotics,
    IoT, and AI in the automation of agricultural industry: a review. In: Proceedings
    of B-HTC, 2020, pp. 1–6 (2020) Lujak, M., Sklar, E., Semet, F.: Agriculture fleet
    vehicle routing: a decentralised and dynamic problem. AI Commun. 34(1), 55–71
    (2021) Article   MathSciNet   Google Scholar   Luo, X., Zhang, L.: The optimal
    scheduling model for agricultural machinery resources with time-window constraints.
    Int. J. Simul. Model. 15(4), 721–731 (2016) Article   Google Scholar   MacEachren,
    A.M., Gahegan, M., Pike, W., et al.: Geovisualization for knowledge construction
    and decision support. IEEE Comput. Graph. Appl. 24(1), 13–17 (2004) Article   Google
    Scholar   Mahale, R.B., Sonavane, S.: Smart poultry farm monitoring using IoT
    and wireless sensor networks. Int. J. Adv. Res. Comput. Sci. (2016). https://doi.org/10.26483/ijarcs.v7i3.2665
    Article   Google Scholar   Marz, N., Warren, J.: Big Data: Principles and Best
    Practices of Scalable Realtime Data Systems. Manning, New York (2015) Google Scholar   Maurel,
    V.B., Huyghe, C.: Putting agricultural equipment and digital technologies at the
    cutting edge of agroecology. Ol. Corps Gras Lipides 24(3), 1–7 (2017) Google Scholar   Narayan,
    S., Jayawardena, C., Wang, J., et al.: Performance test of IEEE 802.11ac wireless
    device. In: International Conference on Computer Communication and Informatics,
    2015 (2015). https://doi.org/10.1109/ICCCI.2015.7218076 Navarro, E., Costa, N.,
    Pereira, A.: A systematic review of IoT solutions for smart farming. Sensors 20(15),
    4231 (2020) Article   Google Scholar   Nukala, R., Panduru, K., Shields, A., et
    al.: Internet of Things: a review from ‘farm to fork’. In: Irish Signals and Systems
    Conference (ISSC), 2016, pp. 1–6 (2016) Pandya, A., Odunsi, O., Liu, C., et al.:
    Adaptive and efficient streaming time series forecasting with Lambda architecture
    and Spark. In: IEEE International Conference on Big Data, 2020, pp. 5182–5190.
    IEEE (2020) Percivall, G.: Realizing the geospatial potential of mobile, IoT and
    big data. In: Liao, L. (ed.) International Conference on Computing for Geospatial
    Research and Application, 2012, p. 8. ACM (2012) Pinedo, M., Zacharias, C., Zhu,
    N.: Scheduling in the service industries: an overview. J. Syst. Sci. Syst. Eng.
    24(1), 1–48 (2015) Article   Google Scholar   Ribeiro de Almeida, D., de Souza,
    B.C., Gomes de Andrade, F., et al.: A survey on big data for trajectory analytics.
    ISPRS Int. J. Geo-Inf. 9(2), 88 (2020) Article   Google Scholar   Rossit, D.A.,
    Tohmé, F., Frutos, M.: Industry 4.0: smart scheduling. Int. J. Prod. Res. 57(12),
    3802–3813 (2019) Article   Google Scholar   Roukh, A., Fote, F.N., Mahmoudi, S.A.,
    et al.: Big data processing architecture for smart farming. Procedia Comput. Sci.
    177, 78–85 (2020) Article   Google Scholar   Saint-Guillain, M., Deville, Y.,
    Solnon, C.: A multistage stochastic programming approach to the dynamic and stochastic
    VRPTW. In: Michel, L. (ed.) International Conference on AI and OR Techniques in
    Constraint Programming for Combinatorial Optimization Problems, 2015, pp. 357–374
    (2015) Seyyedhasani, H., Dvorak, J.S.: Dynamic rerouting of a fleet of vehicles
    in agricultural operations through a dynamic multiple depot vehicle routing problem
    representation. Biosyst. Eng. 171, 63–77 (2018) Article   Google Scholar   Solomon,
    M.M.: Algorithms for the vehicle routing and scheduling problems with time window
    constraints. Oper. Res. 35(2), 254–265 (1987) Article   MathSciNet   MATH   Google
    Scholar   Villa-Henriksen, A., Edwards, G.T., Pesonen, L.A., et al.: Internet
    of Things in arable farming: implementation, applications, challenges and potential.
    Biosyst. Eng. 191, 60–84 (2020). https://doi.org/10.1016/j.biosystemseng.2019.12.013
    Article   Google Scholar   Vitali, G., Francia, M., Golfarelli, M., et al.: Crop
    management with the IoT: an interdisciplinary survey. Agronomy 11(1) (2021). https://www.mdpi.com/2073-4395/11/1/181
    Wellington, C., Courville, A., Stentz, A.T.: A generative model of terrain for
    autonomous navigation in vegetation. Int. J. Robot. Res. 25(12), 1287–1304 (2006)
    Article   Google Scholar   Wolfert, S., Ge, L., Verdouw, C., et al.: Big data
    in smart farming—a review. Agric. Syst. 153, 69–80 (2017) Article   Google Scholar   Wulfsohn,
    D., Zamora, F.A., Téllez, C.P., et al.: Multilevel systematic sampling to estimate
    total fruit number for yield forecasts. Precis. Agric. 13(2), 256–275 (2012) Article   Google
    Scholar   Zaharia, M., Chowdhury, M., Das, T., et al.: Resilient distributed datasets:
    a fault-tolerant abstraction for in-memory cluster computing. In: USENIX Symposium
    on Networked Systems Design and Implementation, 2012, pp. 15–28 (2012) Zaharia,
    M., Xin, R.S., Wendell, P., et al.: Apache Spark: a unified engine for big data
    processing. Commun. ACM 59(11), 56–65 (2016) Article   Google Scholar   Zhai,
    Z., Martínez, J.F., Beltran, V., et al.: Decision support systems for agriculture
    4.0: survey and challenges. Comput. Electron. Agric. (2020). https://doi.org/10.1016/j.compag.2020.105256
    Article   Google Scholar   Download references Funding This work is supported
    by the French National Research Agency Project ANR-19-LCV2-0011 Tiara, and French
    Government IDEX-ISITE Initiative 16-IDEX-0001 (CAP 20-25). Author information
    Authors and Affiliations INRAE, TSCF, University Clermont Auvergne, Clermont-Ferrand,
    France Geraldine André, Amina Belhassena, Sandro Bimonte, Christophe Cariou, Frederic
    Chabot, Adrian Couvent, Jean Laneurit & Nicolas Tricot University of Salerno,
    Fisciano, Italy Pietro Battistoni & Monica Sebillo University of Clermont Auvergne,
    Clermont-Ferrand, France Bruno Bachelet, Gerard Chalhoub, Ibrahim Sammour & Mateus
    Vilela Souza University of Carthage, Carthage, Tunisia Rim Moussa Poznan University
    of Technology, Poznan, Poland Robert Wrembel University of Thessaly, Thessaly,
    Greece Georgia Garani & Konstantinos Oikonomou Contributions All authors contributed
    to the study conception and design. Material preparation, data collection and
    analysis were performed by all authors. All authors write the manuscript. All
    authors read and approved the final manuscript. Corresponding author Correspondence
    to Geraldine André. Ethics declarations Conflict of interest The authors have
    no relevant financial or non-financial interests to disclose. Additional information
    Publisher''s Note Springer Nature remains neutral with regard to jurisdictional
    claims in published maps and institutional affiliations. This paper extends our
    previous EAIoT 2021 paper [7]. Rights and permissions Springer Nature or its licensor
    (e.g. a society or other partner) holds exclusive rights to this article under
    a publishing agreement with the author(s) or other rightsholder(s); author self-archiving
    of the accepted manuscript version of this article is solely governed by the terms
    of such publishing agreement and applicable law. Reprints and permissions About
    this article Cite this article André, G., Bachelet, B., Battistoni, P. et al.
    LambdAgrIoT: a new architecture for agricultural autonomous robots’ scheduling:
    from design to experiments. Cluster Comput 26, 2993–3015 (2023). https://doi.org/10.1007/s10586-022-03592-5
    Download citation Received 25 December 2021 Revised 25 March 2022 Accepted 31
    March 2022 Published 14 October 2022 Issue Date October 2023 DOI https://doi.org/10.1007/s10586-022-03592-5
    Share this article Anyone you share the following link with will be able to read
    this content: Get shareable link Provided by the Springer Nature SharedIt content-sharing
    initiative Keywords Internet of Things Big data Smart farming Agriculture robots
    scheduling Use our pre-submission checklist Avoid common mistakes on your manuscript.
    Sections Figures References Abstract Introduction Requirements’ specification
    LambdAgrIoT architecture Experiments Related work Conclusion and future work Data
    availability Change history Notes References Funding Author information Ethics
    declarations Additional information Rights and permissions About this article
    Advertisement Discover content Journals A-Z Books A-Z Publish with us Publish
    your research Open access publishing Products and services Our products Librarians
    Societies Partners and advertisers Our imprints Springer Nature Portfolio BMC
    Palgrave Macmillan Apress Your privacy choices/Manage cookies Your US state privacy
    rights Accessibility statement Terms and conditions Privacy policy Help and support
    129.93.161.219 Big Ten Academic Alliance (BTAA) (3000133814) - University of Nebraska-Lincoln
    (3000134173) © 2024 Springer Nature"'
  inline_citation: '>'
  journal: Cluster Computing
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: 'LambdAgrIoT: a new architecture for agricultural autonomous robots’ scheduling:
    from design to experiments'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Jaliyagoda N.
  - Lokuge S.
  - Gunathilake P.M.P.C.
  - Amaratunga K.S.P.
  - Weerakkody W.A.P.
  - Bandaranayake P.C.G.
  - Bandaranayake A.U.
  citation_count: '3'
  description: Internet of things (IoT) applications in smart agricultural systems
    vary from monitoring climate conditions, automating irrigation systems, greenhouse
    automation, crop monitoring and management, and crop prediction, up to end-to-end
    autonomous farm management systems. One of the main challenges to the advancement
    of IoT systems for the agricultural domain is the lack of training data under
    operational environmental conditions. Most of the current designs are based on
    simulations and artificially generated data. Therefore, the essential first step
    is studying and understanding the finely tuned and highly sensitive mechanism
    plants have developed to sense, respond, and adapt to changes in their environment,
    and their behavior under field and controlled systems. Therefore, this study was
    designed to achieve two specific objectives; to develop low-cost IoT components
    from basic building blocks, and to study the performance of the developed systems,
    and generate real-time experimental data, with and without plants. Low-cost IoT
    devices developed locally were used to convert existing basic polytunnels to semi-controlled
    and monitoring-only polytunnels. Their performances were analyzed and compared
    with each other based on several matrices while maintaining the planted tomato
    variety and agronomic practices similar. The developed system performed as expected
    suggesting the possibility of commercial applications and research purposes.
  doi: 10.1371/journal.pone.0278440
  full_citation: '>'
  full_text: '>

    "Advertisement plos.org create account sign in PUBLISH ABOUT BROWSE advanced search
    38 Save 4 Citation 2,186 View 0 Share OPEN ACCESS PEER-REVIEWED RESEARCH ARTICLE
    Internet of things (IoT) for smart agriculture: Assembling and assessment of a
    low-cost IoT system for polytunnels Nuwan Jaliyagoda, Sandali Lokuge, P. M. P.
    C. Gunathilake, K. S. P. Amaratunga, W. A. P. Weerakkody, Pradeepa C. G. Bandaranayake
    , Asitha U. Bandaranayake Published: May 25, 2023 https://doi.org/10.1371/journal.pone.0278440
    Article Authors Metrics Comments Media Coverage Peer Review Correction Abstract
    Introduction Materials and methods Results Discussion Conclusions Supporting information
    Acknowledgments References Reader Comments Figures Accessible Data See the data
    This article includes the Accessible Data icon, an experimental feature to encourage
    data sharing and reuse. Find out how research articles qualify for this feature.
    Correction 14 Dec 2023: Jaliyagoda N, Lokuge S, Gunathilake PMPC, Amaratunga KSP,
    Weerakkody WAP, et al. (2023) Correction: Internet of Things (IoT) for Smart Agriculture:
    Assembling and assessment of a low-cost IoT system for polytunnels. PLOS ONE 18(12):
    e0296110. https://doi.org/10.1371/journal.pone.0296110 View correction Abstract
    Internet of things (IoT) applications in smart agricultural systems vary from
    monitoring climate conditions, automating irrigation systems, greenhouse automation,
    crop monitoring and management, and crop prediction, up to end-to-end autonomous
    farm management systems. One of the main challenges to the advancement of IoT
    systems for the agricultural domain is the lack of training data under operational
    environmental conditions. Most of the current designs are based on simulations
    and artificially generated data. Therefore, the essential first step is studying
    and understanding the finely tuned and highly sensitive mechanism plants have
    developed to sense, respond, and adapt to changes in their environment, and their
    behavior under field and controlled systems. Therefore, this study was designed
    to achieve two specific objectives; to develop low-cost IoT components from basic
    building blocks, and to study the performance of the developed systems, and generate
    real-time experimental data, with and without plants. Low-cost IoT devices developed
    locally were used to convert existing basic polytunnels to semi-controlled and
    monitoring-only polytunnels. Their performances were analyzed and compared with
    each other based on several matrices while maintaining the planted tomato variety
    and agronomic practices similar. The developed system performed as expected suggesting
    the possibility of commercial applications and research purposes. Figures        Citation:
    Jaliyagoda N, Lokuge S, Gunathilake PMPC, Amaratunga KSP, Weerakkody WAP, Bandaranayake
    PCG, et al. (2023) Internet of things (IoT) for smart agriculture: Assembling
    and assessment of a low-cost IoT system for polytunnels. PLoS ONE 18(5): e0278440.
    https://doi.org/10.1371/journal.pone.0278440 Editor: Sathishkumar V E, Jeonbuk
    National University, REPUBLIC OF KOREA Received: November 15, 2022; Accepted:
    May 8, 2023; Published: May 25, 2023 Copyright: © 2023 Jaliyagoda et al. This
    is an open access article distributed under the terms of the Creative Commons
    Attribution License, which permits unrestricted use, distribution, and reproduction
    in any medium, provided the original author and source are credited. Data Availability:
    The data used for this research will be available from the Institutional Data
    Repository, http://agbc-fe.pdn.ac.lk/datasets/greenhouses/v1/ and from code repository,
    https://github.com/cepdnaclk/Smart-Agriculture-a-low-cost-IoT-system-for-polytunnels.
    Funding: The Early Career Fellowship of the Organization for Women in Science
    for Developing World (OWSD, Early Career Fellowship https://owsd.net/) funded
    this project – the award agreement 4500406736 was awarded to Pradeepa C.G. Bandaranayake.
    The principal investigator acknowledges the immense support and flexibility of
    the OWSD Early Career Fellowship program and the OWSD staff based at the offices
    of The World Academy of Sciences (TWAS), in Trieste, Italy. Competing interests:
    The authors have declared that no competing interests exist. Introduction The
    Internet of Things, IoT [1] is a network of devices embedded with electronics,
    sensors, actuators, software, and connectivity, allowing these devices to connect,
    gather, and exchange data, take actions based on these data, and learn from those
    data towards future improvements. Like in many other domains, IoT technology has
    brought about the next revolution in Agriculture [2, 3]. IoT in smart or precision
    agricultural systems already plays a critical role in monitoring crop growth,
    selection of fertilizer, early detection of diseases, irrigation decision support
    systems, etc., especially in developed countries and high-end markets [4–6]. The
    continuous increase in the global population results in an increased need for
    food while reducing the arable land and water required for farming. Therefore,
    to realize the sustainable development goals of agriculture, it is paramount that
    the benefits of smart agriculture become commonplace, mainly in view of the efficient
    use of resources while increasing production [7]. Generally, the agricultural
    IoT can be divided into five main layers: the physical or perception layer, the
    network layer, the middleware layer, the service layer, and the application layer
    [8, 9]. Together these layers are mainly responsible for data acquisition, data
    transmission, data storage data analysis, data presentation, and related applications.
    Of them, the physical layer is the bottom layer of the system, which is mainly
    responsible for data collection. It consists of many sensor nodes, actuators,
    and one or more sink nodes, which act as data collection points. Each sensor node
    may consist of several sensors to sense variables such as humidity, light, and
    temperature with a microcontroller and wired/wireless communication module to
    facilitate data transmission [10]. These end devices could be powered by batteries
    or renewable energy sources, which significantly impact the sensor network’s lifetime.
    The sensor nodes and actuators transmit data or receive commands, respectively,
    mainly through wireless communication technology, which operates in the network
    layer. On the one hand, the network layer receives the data collected by the sensor
    layer and uses the local network, and maybe even the Internet, to transmit the
    data to upper layers for storage and further processing [11]. On the other hand,
    the control commands for the sensors and actuators generated by the user applications
    are also passed through the network layer. The wireless technologies that are
    used can range from common Wi-Fi, 4G/5G, and Bluetooth, to very specific technologies
    such as 6LowPAN, LoRa, and NB-IoT (Narrowband IoT). IoT’s middleware and service
    layers emerged much later than the other three layers, which are necessary components
    of any IoT solution. The middleware layer is generally a software system that
    acts as an interface between IoT devices and applications [12]. The middleware
    layer aims to hide the hardware diversity and complexities from IoT applications
    and services, significantly increasing the development and usability of IoT applications
    in every domain. The middleware layer mainly aggregates and processes the data
    generated by the IoT devices hiding their heterogeneity, while providing a variety
    of context-based services to above to facilitate any type of application [13].
    The service layer, on the other hand, is designed to provide services that are
    common to all IoT applications, including anomaly detection, data storage, diagnostics,
    intelligent decision-making, predictions, early warnings, etc. The service layer
    may utilize many technologies such as cloud computing, fog & edge computing, SDN/NFV,
    artificial intelligence, machine learning, and big data analytics to build a common
    platform that the applications can utilize [9]. The application layer is the upper
    layer of the system, which utilizes the services provided by the lower layers
    and a variety of IoT-specific messaging protocols, such as MQTT, XMPP, and CoAP,
    in order to perform a variety of domain-specific activities. Typically, an app
    or web-based remote monitoring platform will allow the users to log in to the
    system, obtain various types of environmental data, carry out configuration changes,
    or even directly control end devices such as fans, humidifiers, sprinklers, etc.
    Such platforms can easily provide many different visual data representations,
    including data trends over time and across different locations, even within a
    greenhouse. The users should be able to obtain two types of data: raw data, and
    preprocessed data. Users can choose the data source according to their own needs
    for subsequent data analysis and mining work. With all these commonplace technologies
    it is becoming possible to develop a deep and wide network of farming applications,
    to take sustainable farming to the next level, not only by automatically learning
    and benefiting from each other, but also by maximizing productivity, quality,
    and profitability [9] Large-scale multinational companies have already produced
    such machinery and devices, and have built controlled environmental facilities
    on a variety of scales, mainly in developed countries. Most of these systems are
    quite expensive systems given that they are developed with state-of-the-art and
    top-of-the-line equipment, and the latest technology. Most of the time each of
    these parts is custom-built by different companies, while the integration is done
    by the solution provider. While such solutions could be affordable for high-end
    customers even in developing countries, these are still prohibitively expensive
    for researchers and farmers in those countries. In essence, most of the farmers
    in the world are nowhere near reaping the benefits of the latest innovations in
    this domain. More worryingly, these farmers are increasingly displaced by large-scale
    farming practices using the latest technology [14, 15]. In addition to not being
    able to afford the existing IoT solutions, the adaptation of similar, yet low-cost,
    IoT solutions in the agricultural domain is progressing slowly due to a lack of
    experimental data under operational environmental conditions. Most of the current
    designs are based on simulations and artificially generated data [16–18]. While
    there are applications of IoT technologies in field conditions there is a significant
    lack of experiments and resulting data that combines the effects of such environmental
    data with relevant agronomic data. Data and analysis from such isolated experiments
    make it unusable for farmers and end-users. Therefore, the current need is not
    only to develop low-cost low-power IoT solutions that are affordable to every
    farmer but also to make a comprehensive data set available so that they can make
    informed decisions. In essence, agricultural production in controlled environments
    is increasingly feasible and new technologies in lighting, ventilation, robotics
    and irrigation are just a few of the innovations that enable the production of
    high-value specialty crops outside of a traditional field setting. Though such
    fully controlled systems are not affordable for developing countries, semi-controlled
    systems are feasible options. While several studies are done on changing one or
    two factors at a time, for example, Chlorophyll Fluorescence [19, 20], light and
    temperature range [21], light [22], and several others, no studies are reported
    on comprehensive analysis in dynamic IoT settings. Considering the reasons detailed
    above, specifically on the non-affordability of smart agriculture solutions to
    researchers and farmers, and the lack of experimental data on field conditions
    to make informed decisions, this study was designed to achieve two specific objectives;
    1) to develop low-cost IoT components from basic building blocks, and 2) to study
    the performance of the developed systems and generate real-time experimental data,
    with and without plants. Materials and methods According to the current rules
    and regulations in the country, no specific permission or approvals were required
    from any organization to conduct this research. System architecture Monitoring.
    Monitoring plays a significant role in greenhouse climate control and such information
    is needed to take control decisions. We need to consider two things in monitoring
    environmental status. First, we need to decide from where the readings will be
    taken. For example, to measure atmosphere temperature, we can place the sensors
    anywhere in the 3D space of the greenhouse. Further, we need to consider how many
    sensors are to be set up, and where they should be located. The design factors
    are also important for cost optimization, to measure the environmental changes
    of the entire greenhouse using a minimum number of sensors. Monitoring frequency
    is another important decision to be considered when taking sensor measurements.
    We don’t want to miss the sudden climate changes happening inside the greenhouse
    by using a low frequency. If we go with a higher frequency, need to handle a lot
    of data, need large storage facilities to keep the data, and a lot of time needed
    to be spent on data handling and pre-processing. Controlling. The main objective
    of control is to provide optimum environmental conditions for plant growth. The
    controlling actions can be taken from the received sensor readings and the time.
    In this research, we controlled the environmental temperature inside one greenhouse
    and compared the changes in environmental parameters with an uncontrolled greenhouse.
    Communication. Controlling and Monitoring are the primary requirements of the
    system, but the communication between monitoring devices and controlling devices
    plays a major role. Either wired or wireless communication could be used for the
    purpose. By considering the cost, performance, and manageability, it was decided
    to use Wi-Fi as the primary communication medium between sensor/controller nodes
    and the cloud application during this research. MQTT [23], a lightweight and publisher-subscriber-based
    protocol is used to communicate between nodes and web services, because of its
    low network bandwidth use and small code footprint. System design The greenhouse
    monitoring and controlling system were designed in a modular way, in order to
    be easily customizable with different shaped and sized greenhouses. The system
    will contain 3 major components, 1) Sensor Nodes which collect environmental readings
    through various sensors 2) a Controller Unit that controls the environmental conditions,
    3) a Web Server that stores collected data and let users see and manage the collected
    data and configure control conditions. Sensor node design. The sensor node was
    designed with a microcontroller and electronic circuit, having the capability
    to connect several types of sensors that can collect the readings of the environmental
    conditions. In agriculture, crop yield mainly depends on temperature, relative
    humidity, and light intensity [24]. Therefore, those 3 parameters were selected
    for the initial stage of the monitoring. However, with the hardware availability,
    this sensor node can accommodate a maximum of any 8 digital sensors and any 4
    analog sensors. 2 x DHT11 Temperature and Humidity sensor 1 x DHT22 Temperature
    and Humidity sensor 1 x BH1750 Light Intensity Sensor DHT11 and DHT22 are commonly
    available and widely used temperature and humidity sensors [25, 26] with low cost,
    but relatively good accuracy and measuring range. BH1750 is a light intensity
    sensor that can measure the light intensity of the environment in lux. The physical
    properties of each sensor are available in Table 1. Download: PPT PowerPoint slide
    PNG larger image TIFF original image Table 1. The specifications of the sensors
    used in the control system. https://doi.org/10.1371/journal.pone.0278440.t001
    The light sensor was in the main sensor unit, while the temperature/humidity sensors
    were separated from the main unit and placed at 3 different heights. The heights
    of those external sensors can be changed, to monitor the temperature and the humidity
    of the different heights. In the current study, we placed the external sensors
    at 10%, 35%, and 55% heights, and the light sensor at 65% from the ground to an
    average height of the greenhouse, as shown in Fig 1 (The heights were 0.4m, 1.2m,
    2.0m, and 2.4m in numbers for this study) Download: PPT PowerPoint slide PNG larger
    image TIFF original image Fig 1. The arrangement of the sensors in a sensor unit.
    https://doi.org/10.1371/journal.pone.0278440.g001 Heights of the temperature and
    humidity sensors were selected to fairly distribute the reading points within
    the greenhouse, with the estimated canopy height of the plants used for the experiments.
    The sensor nodes were located in each greenhouse as shown in Fig 2, in such a
    way that all sensors together give fair and distributed 3-dimensional coverage
    of temperature and humidity across the greenhouse, and 2-dimensional coverage
    of the light intensity received to the greenhouse. However, this arrangement subject
    to change based on the size, shape, and design of the greenhouse/polytunnel. Download:
    PPT PowerPoint slide PNG larger image TIFF original image Fig 2. Suggested arrangement
    of the sensor nodes inside a rectangular-shaped greenhouse. https://doi.org/10.1371/journal.pone.0278440.g002
    Apart from the main functional requirements, an RGB status indicator was included
    at the bottom of the sensor’s main control unit to indicate the state of the sensor
    node as well as the error conditions. Different colors and blink counts were used
    to indicate different statuses. For example, two blinks of red color indicate
    an error with Sensor20, and one blink of blue color indicates the sensor readings
    were successfully sent to the web server Controller node design. The controlling
    system was designed to control the environmental conditions inside the greenhouse.
    The controller designed for this study can control a blower motor, misting system,
    irrigation system, and side curtains of the greenhouse. However, it is possible
    to extend up to 8 controller devices with the current design. The blower motor
    is a 3-phase 1.5HP AC motor and a contactor switch is used to control the blower
    system. The side curtains are controlled by two 3-phase AC motors, where two contactor
    switches with an interlock unit is used to control and rotate the motors in both
    directions. The misters are managed using a solenoid valve and it is controlled
    by an AC relay switch. There is a water pump, controlled by another contactor
    switch. To optically isolate the controllers with the microcontroller, SSR (Solid
    State Relay) switches with optocouplers were used. The input signal for the SSR
    switches is either 0 (Logic LOW) or 3.3V (Logic HIGH). To ensure the safety of
    the controller, RCCB (Residual Current Circuit Breaker) is used and the micro
    circuit breakers are used for every electronic device. The complete panel design
    of the controller unit can be found in the Supporting Information. The enclosure
    box was a metal one with IP65 enclosure protection standards, to protect the internal
    components from dust as well as humidity and water particles. Since this enclosure
    is metallic, the WiFi connectivity which is used to communicate with the web server
    can be interfered with. As a solution, the microcontroller unit was taken out
    from the main controller box and placed into a small plastic enclosure with the
    same IP65 standards. Wiring and power distribution. Although the communication
    between sensors was done wirelessly, the power for the sensor nodes and controller
    node needed to be supplied by a wired media. Since there are three-phase devices
    in the control system, the controller unit was powered by the 3-phase 230V AC
    line. Sensor units were designed to work at 3.3V. However, the sensors were located
    far away from the power distribution board, so it was decided to transmit the
    power as 12V DC through the power line and finally convert the voltage into the
    3.3V DC within the sensor unit. With this approach, it is possible to transmit
    the DC voltage for a long distance, and the voltage drop through the transmission
    lines will not affect the functionality of the sensor units, as shown in Fig 3.
    Download: PPT PowerPoint slide PNG larger image TIFF original image Fig 3. Power
    distribution plan of the system. https://doi.org/10.1371/journal.pone.0278440.g003
    Communication. For communication, Wi-Fi was used, and a Wi-Fi access point was
    set up in a place nearby the greenhouses, in such a way that every device will
    get fair Wi-Fi signal coverage. Since both greenhouses were located nearby, and
    all nodes were within the WiFi router’s coverage, no Wi-Fi repeater devices were
    required. However, if the greenhouses are spread in over a wide geographical area,
    it is recommended to set up a WiFi mesh network, with a WiFi Gateway and a set
    of WiFi Repeaters [27]. System functionality The system was designed in such a
    way that the sensor nodes will take sensor readings by a defined frequency and
    publish them to a specified MQTT topic. A cloud-based web server was developed
    as an IoT edge server, to look up this published sensor data, pre-process it,
    and store it in a database for future analytical purposes. Meanwhile, it also
    checks the incoming sensor readings, executes control logic, and generates control
    actions such as turning on the blower, turning off the misting system, etc, and
    publishes those control actions to the MQTT broker (Fig 4). Download: PPT PowerPoint
    slide PNG larger image TIFF original image Fig 4. The overall system architecture
    of the system. https://doi.org/10.1371/journal.pone.0278440.g004 The controller
    node is usually subscribed to the controller actions and once the IoT Edge Server
    publishes a control action, the controller node will receive the action commands.
    Then it will change the output state of the relevant control according to the
    input. The actuators in the greenhouse will act according to the control commands
    received. Apart from the IoT Edge server, another web server was developed as
    an IoT dashboard, which can be accessible to the users and see the current state
    of the system, the previous states as plots, and configure the control logic.
    This web dashboard also provides a data API, which can be used as a Data Connector
    to download the sensor readings and use them for statistical computation analysis.
    Fig 5 shows several views of the IoT dashboard we implemented with this system.
    It is capable of handling more than one greenhouse, after defining them with the
    name and dimensions. Then, it is possible to create and assign the sensor nodes
    to each greenhouse by defining the location of the sensor node through the web
    interface. Also, it is possible to select a date and see the variations of the
    sensor readings using the data visualization tool provided in the web dashboard.
    Download: PPT PowerPoint slide PNG larger image TIFF original image Fig 5. A few
    views of the IoT Dashboard: (a) Home screen (b) Current status view (c) Greenhouse
    sensor arrangement (d) Sensor data visualizer. https://doi.org/10.1371/journal.pone.0278440.g005
    Cost estimations A main goal of this research is to introduce a cost-effective
    controlling and monitoring system for greenhouses. The use of low-cost sensors
    and controllers makes it more accessible for small-scale farmers to implement
    greenhouse automation, improving their production capabilities and increasing
    their profitability. Such systems are also useful for the scientists in resource
    poor countries to conduct climate change research and adaptation work. Clear cost
    comparisons are difficult, since it is subjective to changes based on market prices,
    regional differences, tax, and import/export policies, etc. Further, the cost
    of a commercial greenhouse monitoring (and controlling) system varies depending
    on the features, type of technology, complexity, and target market. Usually, the
    price ranges from a few thousands to a tens of thousands of dollars. Advanced
    control systems with IoT features such as real-time remote monitoring, and remote
    control are significantly more expensive. As the main approach of this study,
    we explored the possibility of reducing the cost using the modularity of the design,
    going for low-cost and low-power sensors with redundant units, and integrating
    IoT with cloud computing. The followings are the estimated cost per module/unit
    as of the day the publication is submitted. It is mandatory to have a control
    unit per polytunnel. About the sensor nodes, one is the minimal requirement per
    polytunnel, but it is recommended to use at least 3 sensor nodes because taking
    multiple readings helps to reduce the impact of random variation and gives a more
    reliable estimate of the true value. Controller Unit: $115 − $125 Sensor Node:
    $35 − $40 Apart from the hardware cost, there is a cost for the operation, for
    both hardware and the software. The hardware cost ideally depends on the selection
    of the controllers, not on the controlling system. For a controller node used
    during this study, the average power consumption is around 2 to 5 watts, and for
    a sensor node, it will be less than 1 watt. As for the information, the Blower
    Fan used during this research contained a 3-Phase 1.11 kW motor, and the misting
    system had a water pump of single phase 0.37kW, used when the water pressure is
    not enough. The software and network cost are for the cloud resources used by
    the system, and for the internet data consumption which is estimated at around
    $1 to $3 per month, considering the cloud resources and data traffic usage. However,
    these values may vary with the Internet and Cloud Service Providers selected.
    Test bed setup and experimental data collection The monitoring system described
    above was installed in two plastic-covered tunnel greenhouses (poly-tunnels) to
    compare the system performances, under control and without control. The polytunnels
    are in Peradeniya, Sri Lanka, and the design and location details can be found
    in Table 2, and the structural design in Fig 6. The blower fan was oriented to
    the south of the polytunnel with the controlling system (Fig 7). The tomato hybrid
    variety, “Sylviana”, was planted in polybags in 5 rows. Download: PPT PowerPoint
    slide PNG larger image TIFF original image Fig 6. Cross Sections of the Polytunnels
    used during the research (a) Polytunnel with the control system; (b) Polytunnel
    without the control system. https://doi.org/10.1371/journal.pone.0278440.g006
    Download: PPT PowerPoint slide PNG larger image TIFF original image Fig 7. View
    of the two polytunnels: (a) Polytunnel with the control system; (b) Polytunnel
    without the control system. https://doi.org/10.1371/journal.pone.0278440.g007
    Download: PPT PowerPoint slide PNG larger image TIFF original image Table 2. Comparison
    of the polytunnels used for the experiment. https://doi.org/10.1371/journal.pone.0278440.t002
    The temperature, humidity, and light readings of the sensors were recorded at
    the two polytunnels from 16th October 2020 to 5th May 2021 as several trials.
    It consists of known days with the crop and without the crop to see whether the
    system performs irrespective of plants. The temperatures 30°C, and 32°C were the
    set points for the blower fan, where the blower fan starts at the temperature
    > 32°C and turns off at the temperature < 30°C. In the same way, the set points
    used for the misting system were 33°C and 34°C. The temperature value was the
    average of all 24 temperature sensors (8 sensors x 3 levels) in each polytunnel.
    Results For the experimental data analysis, we used the sensor data collected
    from the following 2 trials. Trial A: 16/10/2020 to 12/01/2021 (89 days) with
    tomato variety, “Sylviana” Trial B: 01/04/2021 to 01/05/2021 (31 days) without
    plants The plots of the meteorological parameter variation were created from the
    data collected from all the sensors in the two polytunnel systems. The sensor
    data were collected every 30 seconds and averaged for the minute in the data processing
    step. We removed the outliers using a z-score and calculated the simple moving
    averages (SMA) to smooth out the environmental data variations by filtering out
    the “noise” that occurred due to the malfunctioning of the sensors and sudden
    environmental changes. For three representative dates during Trial A, the plots
    of temperature, humidity, and light intensity variations of the sensor units located
    in the different places of the polytunnel with a controlling system are shown
    in Fig 8. The temperature changes measured by the sensor unit numbers 10010, 10012,
    10008, and 10009 indicate high variation compared with the other sensor sites.
    However, all the sensors in the eight locations had similar patterns of temperature
    fluctuations during the daytime. The results showed that the nighttime temperature
    at the eight locations was below 25°C. Alongside the temperature inconsistencies,
    relative humidity distribution in the daytime showed variability among the different
    sensor locations within the greenhouse. At 15:00–18:00, most of the polytunnel
    areas experienced a lower favorable temperature while higher temperature variations
    occurred between 12:00 and 14:00 (Fig 8). The relative humidity distribution in
    the polytunnel at nighttime showed that a large area of the polytunnel was around
    95%. Further, there was a variation in the light intensity levels within the polytunnel
    due to the surroundings and orientation of the polytunnel. Download: PPT PowerPoint
    slide PNG larger image TIFF original image Fig 8. Variations of meteorological
    parameters among the eight sensor nodes in the polytunnel with the controlling
    system for three representative dates. (a1) Temperature; (a2) Relative humidity;
    (a3) Light (RH) on 19 October 2020. (b1) Temperature; (b2) Relative humidity;
    (b3) Light (RH) on 17 November 2020. (c1) Temperature; (c2) Relative Humidity;
    (c3) Light (RH) on 15 December 2020. https://doi.org/10.1371/journal.pone.0278440.g008
    A representation of temperature and relative humidity variation during the different
    growth stages is provided in Figs 9 and 10 respectively. During the 50% flowering
    stage and ripening fruits stage, the temperature in level 2 and level 3 during
    the daytime indicate similar variation while level 1 fluctuated with lower temperature
    values compared to the other two levels (Fig 9b and 9d). There is a subtle difference
    in the temperature variations of the three levels during the vegetative stage
    and fruit set stage. However, the relative humidity distributions in the three
    levels show a significant difference. Download: PPT PowerPoint slide PNG larger
    image TIFF original image Fig 9. Temperature variations in the three levels during
    different tomato growth stages. (a) Vegetative stage. (b) 50% Flowering stage.
    (c) Fruits set the stage. (d) Ripen fruit stage. Level 1, Level 2, and Level 3
    are 0.4, 1.2, and 2.0 m in height from the floor level respectively. https://doi.org/10.1371/journal.pone.0278440.g009
    Download: PPT PowerPoint slide PNG larger image TIFF original image Fig 10. Relative
    humidity variations in the three levels during different tomato growth stages.
    (a) Vegetative stage. (b) 50% Flowering. (c) Fruits set the stage. (d) Ripen fruit
    stage. Level 1, Level 2, and Level 3 are 0.4, 1.2, and 2.0 m in height from the
    floor level respectively. https://doi.org/10.1371/journal.pone.0278440.g010 The
    polytunnel under control had a lower daytime average temperature variation than
    the polytunnel without control (Fig 11a). Further, during most days in the trial
    period, the controlled system maintained the daytime average temperature below/around
    the set point of 30°C. The average temperature of the control system in the daytime
    varied between 30°C and 25°C on most days of the trial. Download: PPT PowerPoint
    slide PNG larger image TIFF original image Fig 11. Daytime average variations
    of temperature and relative humidity in the two greenhouses throughout the selected
    trial period. (a) Temperature (b) Relative Humidity. https://doi.org/10.1371/journal.pone.0278440.g011
    These results indicate that the implemented system was able to control the temperature
    within the polytunnel. On sunny days, the blower and misters worked longer time
    periods to control the temperature within the polytunnel (Table 3). Similarly,
    the frequencies of the blower and mister activations depended on the outside environmental
    conditions. Since the controlling system was implemented to maintain the temperature
    using the misting system, the daytime average humidity level in the polytunnel
    under control was higher than in the polytunnel without a controlling system (Fig
    11b). Download: PPT PowerPoint slide PNG larger image TIFF original image Table
    3. Maximum time duration (hours) taken to control the temperature in the polytunnel
    by blower fan and misters. https://doi.org/10.1371/journal.pone.0278440.t003 Temperature
    and humidity variation within the polytunnel was compared with and without the
    tomato plants in Fig 12. The comparison was carried out considering three representative
    days (sunny, rainy, and cloudy) Since there is a limitation of resources for all
    four possible experiment setups simultaneously, the experiments with and without
    plants were done in two different time periods in the available two polytunnels.
    Download: PPT PowerPoint slide PNG larger image TIFF original image Fig 12. Average
    values of temperature and relative humidity with and without plants. (a1) Temperature;
    (a2) Relative Humidity on a typical sunny day. (b1) Temperature; (b2) Relative
    Humidity on a typical rainy day. (c1) Temperature; (c2) Relative Humidity on a
    typical cloudy day. D, N, and 24hr are daytime, nighttime, and 24 hours, respectively;
    Avg denotes average. L1, L2, and L3 are the sensor levels. https://doi.org/10.1371/journal.pone.0278440.g012
    Therefore, the side-by-side comparison with exact days with matching weather conditions
    is not possible, However, we observed that the average daytime, nighttime, and
    24-h temperature in the polytunnels with plants were lower than that of the polytunnel
    without plants (Fig 12a). The temperature difference in the nighttime is lower
    compared to the daytime. In the controlled polytunnel, it can be observed that
    the average internal temperatures will be significantly higher in the without-plant
    situations compared to the with the plant during the daytime. Moreover, the blower
    and misters functioned for a longer time to control the temperature in the polytunnel
    without the plants (Table 3). The blower fan worked from around 09:00 to 15:00
    when the plants were established. But when the control system was tested without
    plants, the blower started around 08:00 and worked until around 17:00 (Table 3).
    Further, we performed a statistical comparison among the three systems: the polytunnel
    with the controlling system, the polytunnel without the controlling system, and
    the outside environment (Table 4). The ANOVA test [28] was conducted based on
    the temperature, humidity, and light data of three selected sunny days assuming
    the systems are independent. Download: PPT PowerPoint slide PNG larger image TIFF
    original image Table 4. Environmental conditions of three selective sunny days
    in different greenhouse conditions. https://doi.org/10.1371/journal.pone.0278440.t004
    Average temperature values from 06:00 to 10:00 in the three systems show significant
    differences while the average humidity in the polytunnel without a control system
    is considerably lower than the other two systems. From 10.00 to 14.00, the polytunnel
    systems maintained a lower average temperature compared to the outside. From 14.00
    to 18.00, the average temperature of the controlling polytunnel was considerably
    lower than the outside and the other polytunnel. During the same time, the polytunnel
    without a controlling system indicated a lower average humidity. The average light
    intensity values in the two polytunnel systems and the outside were considerably
    different. It may be due to the difference in the polytunnel structures and the
    variations of the environmental conditions on the selected sunny days. Another
    ANOVA test was conducted on the polytunnels considering the systems with plants
    and without plants (Table 5). According to the results, the average temperature
    in the polytunnels was higher when the plants were not established. Also, can
    observe that even for the control system, it is difficult to keep the temperature
    on the polytunnels below the setpoints without the plant’s condition. Download:
    PPT PowerPoint slide PNG larger image TIFF original image Table 5. Environmental
    conditions of five selective sunny days in different greenhouse conditions with/without
    plants. https://doi.org/10.1371/journal.pone.0278440.t005 All the data used for
    the above analysis are available from the following data repository as raw data:
    http://agbc-fe.pdn.ac.lk/datasets/greenhouses/v1/. Discussion In this experiment,
    we monitored the variation of the temperature and the humidity of the polytunnels
    with an 8x3 sensor array; where the sensors in 3 different levels, 8 different
    locations which properly cover the entire volume in the polytunnel, and the light
    intensity received to the plants with 8 sensors for two polytunnels, with the
    conditions of with and without plants. Of the two polytunnels used for the experiments,
    one was with a controlling system, which controls the internal atmosphere conditions
    by trying to keep the internal temperature below a given setpoint by air exhausting
    using a blower motor and evaporative cooling using a misting system. In the other
    polytunnel, no environmental control was done, and just let the natural ventilation
    to maintain the environmental conditions. However, one major issue with comparing
    the environmental variation results between the two polytunnels is the structural
    difference. Both are arch-framed polytunnels, but the polytunnel without the controlling
    system has a continuous top vent, while the other polytunnel is without a top
    vent arrangement. The top vent reduces internal temperature by about 3.6°C in
    the same design without a vent under similar environmental conditions. Nevertheless,
    the control system was able to control the temperature as exacted in the polytunnel
    without a top vent in which the actual temperature is about 3.6°C higher than
    the one with no control system. As such, the actual temperature reduction is higher
    than the difference that we observed. For the statistical analysis, the averages
    were taken from the sensor readings, assuming that the different kinds of weather
    conditions like sunny days and rainy days will not be caused bias in the readings.
    For some special comparisons, the days were manually classified into sunny, rainy,
    and cloudy days using the weather data of the location where the polytunnels were
    located. According to the sensor results, it can be seen that the controlling
    system was able to control the inside temperature under given conditions most
    of the time. Another important observation was that the plants inside the polytunnels
    have a bigger contribution to temperature control. During the experiment done
    without the plants, even the controlling system was unable to keep the internal
    atmosphere temperature below the setpoints. The main approach of this research
    is to introduce low-cost greenhouse monitoring and controlling system. Therefore,
    the selected sensors were not expensive industrial-grade sensors, so the lifetime
    and reliability are not guaranteed 100%. However, the redundancy of the sensors
    (in this experiment, there were 24 sensors per polytunnel) helped to get better,
    distributed, and fair readings of the environmental conditions compared to one
    or two expensive sensors, which are taking the measurement of a point or a small
    region. The control system used industrial-grade components to interface with
    the actuators, but the control logic was handled in the specially designed microcontroller
    unit and an enclosure, which are significantly low cost compared to a PLC-based
    system. However, the additional electronic circuits and isolation techniques helped
    to get a similar performance to a PLC control system. As such, the developed system
    is also suitable to simulate climate changes in tropical conditions and monitor
    changes in real-time. The system is suitable to assess the performance of crops
    in response to set temperatures in terms of gene expression, physiology, anatomy,
    biochemistry, and quality and quantity of yield. The set parameters can be changed
    depending on the crop and the objectives of the trails conducted. For example,
    in the trial reported here and trials repeated with the same tomato variety under
    the same conditions, the crop growth, and yield were not quite different in the
    two tunnels (data not shown). However, in another experiment, an ornamental foliage
    plant behaved differently in two tunnels under the same environmental conditions
    described here (data not shown). The set points are to be identified for each
    crop to achieve optimum growth and yield parameters. Further improvements are
    possible with the integration of a nutrient management system, a light management
    system, and an image-capturing system. Conclusions Internet of Things (IoT) technology
    has revolutionized Agriculture, as in many other fields, leading up to smart or
    precision agricultural systems. To realize the sustainable development goals of
    agriculture, it is vital that the advantages of smart agriculture become available
    and affordable to all, with the necessary knowledge and guidance. Therefore, this
    study was designed to develop low-cost IoT components from basic building blocks,
    study the performance of the developed systems, and generate real-time experimental
    data, with and without plants. Low-cost IoT devices developed locally converted
    existing traditional polytunnels to semi-controlled and monitoring-only polytunnels.
    Their performances were analyzed and compared with each other based on several
    matrices while maintaining the planted tomato variety and agronomic practices
    similar. The developed system performed as expected suggesting the possibility
    of commercial applications and further research work. The next stage of this research
    will be observing the results from an Agronomical perspective and coming up with
    a better model to identify the best environmental conditions which can maximize
    the yield of the plants. This will be done using different plant varieties, which
    require different types of environmental conditions, not only to identify the
    best varieties to be grown under a controlled environment, but also the optimal
    conditions to maximize the yield. It will be essential to repeat these experiments
    in areas with vastly different climates, such as dry, wet, humid, hot, cold, etc.,
    to train the models and have a sufficient amount of data to help the potential
    users with specific guidance. From the IoT perspective, this system will be enhanced
    by the addition of an automated camera system with an image analysis module to
    map the growth of the plants and identify potential early detection of deceases.
    Additions of a nutrient management system and a light management system would
    also allow us to optimize the controlled environment and yield further. With the
    generation of adequate amounts of data, it would make it possible to replace the
    current rule-based control logic with machine learning algorithms to precisely
    control the environment. To be specific, while a fan and a mister are used to
    reduce the temperature, they also contribute to increase the relative humidity,
    respectively. Thus, a properly developed machine learning system will be able
    to identify how to control the environment more precisely and efficiently. With
    the integration of data from image analysis, nutrient management, and light management,
    such a machine learning system could be enhanced even further to identify the
    most efficient use of resources for a maximum yield. We expect that such a system
    would go a long way to achieving sustainable development goals, ensuring food
    security, and supporting rural development. Supporting information PCB design
    of the sensor node. Showing 1/2: pone.0278440.s001.tif 1 / 2 Download .style0
    {fill: #566471;} .style1 {fill: #A2CD3C;} .style2 {fill: #C54C59;} .style3 {fill:
    #5BC4BD;} figshare S1 Fig. PCB design of the sensor node. ESP32 was used as the
    microcontroller of the sensor node, since it is a low-cost, low-power SoC (System
    on Chip), with a dual-core Tensilica Xtensa LX6 microprocessor that works at 160MHz.
    It is specially designed for wireless IoT sensor applications with necessary modules
    for GPIO as well as in-built WiFi and Bluetooth functionalities. https://doi.org/10.1371/journal.pone.0278440.s001
    (TIF) S2 Fig. Controller node design. High level panel design of the controller,
    which handles the signal given by ESP32 microcontroller (SoC). There are 8 digital
    outputs for controlling the devices connected to the controller panel. BLEn, MEn,
    CAEn, and CBEn are the main output signals and D0-D3 are auxiliary output control
    signals from the microcontroller. There are 2 optically isolated inputs in the
    controller unit, to obtain the limit signals from the curtain controller. One
    input to get the curtain to reach its down-limit signal and one input to get the
    curtain reached to its up-limit signal. (However, the curtain controller isn’t
    used as a control parameter in this study) Four status indicators were used to
    indicate the status of the controller node, a power indicator, a WiFi connectivity
    indicator, a control signal indicator, and an error condition indicator. https://doi.org/10.1371/journal.pone.0278440.s002
    (TIF) Acknowledgments Special thanks to all the staff in the Agricultural Biotechnology
    Center, University of Peradeniya, Sri Lanka, including I.N.S. Dewapriya, P.B.G.
    Pathirana, R.M.M. Wijerathne, M.G.N.M. Nishshanka, K.M.D.D. Ranaraja, M.M. Kodagoda,
    E.M.U.L Ekanayake for their immersive support given during crop trials, and maintenance
    works of the system. References 1. Atzori L, Iera A, Morabito G. The Internet
    of Things: A survey. Computer Networks. 2010 Oct;54(15):2787–805. View Article
    Google Scholar 2. Rajeswari, S., Scholar, R., Suthendran, K., & Rajakumar, K.
    (2017). A Smart Agricultural Model by Integrating IoT, Mobile and Cloud-based
    Big Data Analytics. 3. Tzounis A., Katsoulas N., Bartzanas T., & Kittas C. (2017).
    Internet of Things in agriculture, recent advances and future challenges. Biosystems
    Engineering, 164, 31–48. View Article Google Scholar 4. Urlagunta N, Budati S,
    Sanjana K, Rammohan A. Automated bot to optimize the use of resources in agriculture
    by introducing internet of things. In: IOP Conference Series: Materials Science
    and Engineering. Institute of Physics Publishing; 2017. 5. Shekhar S., & Gokhale
    A. (2017). Dynamic Resource Management Across Cloud-Edge Resources for Performance-Sensitive
    Applications. 17th IEEE/ACM International Symposium on Cluster, Cloud and Grid
    Computing (CCGRID). 6. Hemlata Channe, Sukhesh Kothari, & Dipali Kadam. (2015).
    Multidisciplinary Model for Smart Agriculture using Internet-of-Things (IoT),
    Sensors, Cloud-Computing, Mobile-Computing & Big-Data Analysis. Computer Technology
    & Application, 6(4), 374–382. View Article Google Scholar 7. “The future of food
    and agriculture: Alternative pathways to 2050,” [Online]. http://www.fao.org/3/CA1553EN/ca1553en.pdf.
    Accessed on: Nov 12, 2022. 8. Shi X. J., An X. S., Zhao Q. X., Liu H. M., Xia
    L. M., Sun X., et al. “State-of-the-art internet of things in protected agriculture,”
    Sensors, vol. 19, no. 8, Article No. 1833, Apr. 2019. pmid:30999637 View Article
    PubMed/NCBI Google Scholar 9. Friha Othmane, Mohamed Amine Ferrag Lei Shu, Maglaras
    Leandros and Wang Xiaochan, \"Internet of Things for the Future of Smart Agriculture:
    A Comprehensive Survey of Emerging Technologies,\" IEEE/CAA J. Autom. Sinica,
    vol. 8, no. 4, pp. 718–752, Apr. 2021. View Article Google Scholar 10. T. Ahonen,
    R. Virrankoski, & M. Elmusrati. (2008). Greenhouse Monitoring with Wireless Sensor
    Network. IEEE/ASME International Conference on Mechtronic and Embedded Systems
    and Applications, 403–408. 11. Bello Oladayo, Zeadally Sherali, and Badra Mohamad.
    \"Network layer inter-operation of Device-to-Device communication technologies
    in Internet of Things (IoT).\" Ad Hoc Networks 57 (2017): 52–62. View Article
    Google Scholar 12. Ngu A. H., Gutierrez M., Metsis V., Nepal S., and Sheng Q.
    Z., “IoT middleware: A survey on issues and enabling technologies,” IEEE Int.
    Things J., vol.4, no.1, pp.1–20, Feb. 2017. View Article Google Scholar 13. Symeonaki
    E., Arvanitis K., and Piromalis D., “A context-aware middleware cloud approach
    for integrating precision farming facilities into the IoT toward agriculture 4.0,”
    Appl. Sci., vol.10, no.3, Article No. 813, Jan. 2020. View Article Google Scholar
    14. S. Heble, A. Kumar, K. V. V. D. Prasad, S. Samirana, P. Rajalakshmi and U.
    B. Desai, \"A low power IoT network for smart agriculture,\" 2018 IEEE 4th World
    Forum on Internet of Things (WF-IoT), 2018, pp. 609–614, 10.1109/WF-IoT.2018.8355152.
    15. N. Dlodlo and J. Kalezhi, \"The internet of things in agriculture for sustainable
    rural development,\" 2015 International Conference on Emerging Trends in Networks
    and Computer Communications (ETNCC), 2015, pp. 13–18, 10.1109/ETNCC.2015.7184801.
    16. Choab N., Allouhi A., El Maakoul A., Kousksou T., Saadeddine S., & Jamil A.
    (2019). Review on greenhouse microclimate and application: Design parameters,
    thermal modeling and simulation, climate controlling technologies. Solar Energy,
    191, 109–137. View Article Google Scholar 17. Ma D., Carpenter N., Maki H., Rehman
    T. U., Tuinstra M. R., & Jin J. (2019). Greenhouse environment modeling and simulation
    for microclimate control. Computers and electronics in agriculture, 162, 134–142.
    View Article Google Scholar 18. Khujamatov, K. E., Toshtemirov, T. K., Lazarev,
    A. P., & Raximjonov, Q. T. (2021, November). IoT and 5G technology in agriculture.
    In 2021 International Conference on Information Science and Communications Technologies
    (ICISCT) (pp. 1–6). IEEE. 19. Liew O. W., Chong P. C. J., Li B., & Asundi A. K.
    (2008). Signature optical cues: emerging technologies for monitoring plant health.
    Sensors, 8(5), 3205–3239. pmid:27879874 View Article PubMed/NCBI Google Scholar
    20. Saglam Aykut, Chaerle Laury, Straeten Dominique Van Der, & Valcke Roland.
    (2020). Promising Monitoring Techniques for Plant Science: Thermal and Chlorophyll
    Fluorescence Imaging. Photosynthesis, Productivity, and Environmental Stress,
    1, 241–266. 21. Neugart, S., Krumbein, A., & Zrenner, R. (2016). Influence of
    light and temperature on gene expression leading to accumulation of specific flavonol
    glycosides and hydroxycinnamic acid derivatives in kale (Brassica oleracea var.
    sabellica). Frontiers in Plant Science, 7(MAR2016). https://doi.org/10.3389/fpls.2016.00326
    22. Cruz J. A., Savage L. J., Zegarac R., Hall C. C., Satoh-Cruz M., Davis G.
    A., et al. (2016). Dynamic environmental photosynthetic imaging reveals emergent
    phenotypes. Cell Systems, 2(6), 365–377. pmid:27336966 View Article PubMed/NCBI
    Google Scholar 23. Hunkeler, U., Truong, H. L., & Stanford-Clark, A. (2008). MQTT-S-A
    Publish/Subscribe Protocol For Wireless Sensor Networks. 24. Ferrante A, Mariani
    L. Agronomic management for enhancing plant tolerance to abiotic stresses: High
    and low values of temperature, light intensity, and relative humidity. Vol. 4,
    Horticulturae. MDPI Multidisciplinary Digital Publishing Institute; 2018. https://doi.org/10.3390/horticulturae4030021
    25. Danita, M., Mathew, B., Shereen, N., Sharon, N., & Paul, J. J. (2019). IoT
    Based Automated Greenhouse Monitoring System. Proceedings of the 2nd International
    Conference on Intelligent Computing and Control Systems, ICICCS 2018, Iciccs,
    1933–1937. https://doi.org/10.1109/ICCONS.2018.8662911 26. Mishra, D., Abbas,
    A., Pande, T., Pandey, A. K., Agrawal, K. K., & Yadav, R. S. (2019, June 15).
    Smart agriculture system using IoT. ACM International Conference Proceeding Series.
    https://doi.org/10.1145/3339311.3339350 27. Muhendra R, Rinaldi A, Budiman M,
    Khairurrijal. Development of WiFi Mesh Infrastructure for Internet of Things Applications.
    In: Procedia Engineering. Elsevier Ltd; 2017. p. 332–7. 28. Cuevas A., Febrero
    M., & Fraiman R. (2004). An anova test for functional data. Computational Statistics
    and Data Analysis, 47(1), 111–122. View Article Google Scholar Download PDF   Print
    Share Related PLOS Articles has CORRECTION Correction: Internet of Things (IoT)
    for Smart Agriculture: Assembling and assessment of a low-cost IoT system for
    polytunnels View Page PDF ADVERTISEMENT Subject Areas ? Humidity   Control systems   Crops   Agriculture   Tomatoes   Actuators   Agricultural
    workers   Cloud computing   Publications PLOS Biology PLOS Climate PLOS Complex
    Systems PLOS Computational Biology PLOS Digital Health PLOS Genetics PLOS Global
    Public Health   PLOS Medicine PLOS Mental Health PLOS Neglected Tropical Diseases
    PLOS ONE PLOS Pathogens PLOS Sustainability and Transformation PLOS Water Home
    Blogs Collections Give feedback LOCKSS Privacy Policy Terms of Use Advertise Media
    Inquiries Contact PLOS is a nonprofit 501(c)(3) corporation, #C2354500, based
    in San Francisco, California, US Cookie Preference Center Our website uses different
    types of cookies. Optional cookies will only be set with your consent and you
    may withdraw this consent at any time. Below you can learn more about the types
    of cookies PLOS uses and register your cookie preferences. Accept All Cookies
    Customize Your Cookie Preference + Strictly Necessary Always On + Functional Off
    + Performance and Analytics Off + Marketing Off Save Selected Preferences and
    Close For more information about the cookies and other technologies used by us,
    please read our Cookie Policy."'
  inline_citation: '>'
  journal: PLoS ONE
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: 'Internet of things (IoT) for smart agriculture: Assembling and assessment
    of a low-cost IoT system for polytunnels'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Holtorf L.
  - Titov I.
  - Daschner F.
  - Gerken M.
  citation_count: '4'
  description: In precision agriculture, information technology is used to improve
    farm management practices. Thereby, productivity can be increased and challenges
    with overfertilization and water consumption can be addressed. This requires low-power
    and wireless underground sensor nodes for monitoring the physical, chemical and
    biological soil parameters at the position of the plant roots. Three ESP32-based
    nodes with these capabilities have been designed to measure soil moisture and
    temperature. A system has been developed to collect the measurement data from
    the sensor nodes with a drone and forward the data to a ground station, using
    the LoRa transmission standard. In the investigations of the deployed system,
    an increase in the communication range between the sensor node and the ground
    station, from 300 m to 1000 m by using a drone, was demonstrated. Further, the
    decrease in the signal strength with the increasing sensor node depth and flight
    height of the drone was characterized. The maximum readout distance of 550 m between
    the sensor node and drone was determined. From this, it was estimated that the
    system enables the readout of the sensor nodes distributed over an area of 470
    hectares. Additionally, analysis showed that the antenna orientation at the sensor
    node and the drone influenced the signal strength distribution around the node
    due to the antenna radiation pattern. The reproducibility of the LoRa signal strength
    measurements was demonstrated to support the validity of the results presented.
    It is concluded that the system design is suitable for collecting the data of
    distributed sensor nodes in agriculture.
  doi: 10.3390/agriengineering5010022
  full_citation: '>'
  full_text: '>

    "This website uses cookies We use cookies to personalise content and ads, to provide
    social media features and to analyse our traffic. We also share information about
    your use of our site with our social media, advertising and analytics partners
    who may combine it with other information that you’ve provided to them or that
    they’ve collected from your use of their services. Consent Selection Necessary
    Preferences Statistics Marketing Show details                 Deny Allow selection
    Allow all   Journals Topics Information Author Services Initiatives About Sign
    In / Sign Up Submit   Search for Articles: AgriEngineering All Article Types Advanced   Journals
    AgriEngineering Volume 5 Issue 1 10.3390/agriengineering5010022 Submit to this
    Journal Review for this Journal Propose a Special Issue Article Menu Academic
    Editors Muhammad Sultan Yuguang Zhou Redmond R. Shamshiri Show more... Subscribe
    SciFeed Recommended Articles Related Info Link More by Authors Links Article Views
    2985 Citations 4 Table of Contents Abstract Introduction Materials and Methods
    Results Discussion Conclusions Author Contributions Funding Data Availability
    Statement Acknowledgments Conflicts of Interest References Altmetric share Share
    announcement Help format_quote Cite question_answer Discuss in SciProfiles thumb_up
    Endorse textsms Comment first_page settings Order Article Reprints Open AccessArticle
    UAV-Based Wireless Data Collection from Underground Sensor Nodes for Precision
    Agriculture by Lucas Holtorf 1, Igor Titov 1, Frank Daschner 2 and Martina Gerken
    1,* 1 Integrated Systems and Photonics, Faculty of Engineering, Kiel University,
    24118 Kiel, Germany 2 Microwave Engineering, Faculty of Engineering, Kiel University,
    24118 Kiel, Germany * Author to whom correspondence should be addressed. AgriEngineering
    2023, 5(1), 338-354; https://doi.org/10.3390/agriengineering5010022 Submission
    received: 27 December 2022 / Revised: 7 February 2023 / Accepted: 8 February 2023
    / Published: 9 February 2023 (This article belongs to the Topic Emerging Agricultural
    Engineering Sciences, Technologies, and Applications) Download keyboard_arrow_down     Browse
    Figures Review Reports Versions Notes Abstract In precision agriculture, information
    technology is used to improve farm management practices. Thereby, productivity
    can be increased and challenges with overfertilization and water consumption can
    be addressed. This requires low-power and wireless underground sensor nodes for
    monitoring the physical, chemical and biological soil parameters at the position
    of the plant roots. Three ESP32-based nodes with these capabilities have been
    designed to measure soil moisture and temperature. A system has been developed
    to collect the measurement data from the sensor nodes with a drone and forward
    the data to a ground station, using the LoRa transmission standard. In the investigations
    of the deployed system, an increase in the communication range between the sensor
    node and the ground station, from 300 m to 1000 m by using a drone, was demonstrated.
    Further, the decrease in the signal strength with the increasing sensor node depth
    and flight height of the drone was characterized. The maximum readout distance
    of 550 m between the sensor node and drone was determined. From this, it was estimated
    that the system enables the readout of the sensor nodes distributed over an area
    of 470 hectares. Additionally, analysis showed that the antenna orientation at
    the sensor node and the drone influenced the signal strength distribution around
    the node due to the antenna radiation pattern. The reproducibility of the LoRa
    signal strength measurements was demonstrated to support the validity of the results
    presented. It is concluded that the system design is suitable for collecting the
    data of distributed sensor nodes in agriculture. Keywords: precision agriculture;
    unmanned aerial vehicle (UAV); drone; LoRa; Internet of Things (IoT); Internet
    of Underground Things (IoUT) 1. Introduction The world’s growing population and
    limited natural resources increase the demand for precision agriculture. The goal
    is to improve farm management by using information technology in order to increase
    crop quality and profitability [1]. Additionally, the problems that arise with
    today’s high yield agriculture can also be addressed. Overfertilization results
    in health hazards, pollution, reduced product quality and a loss of soil fertility
    [2]. The extensive, uncontrolled irrigation of cropland leads to the deterioration
    of water sources, salt build-up on fields and soil erosion [3]. The development
    of precise and cost effective sensing solutions is recognized as one of the key
    challenges for increasing the adoption of precision agriculture [1]. Monitoring
    soil parameters, such as moisture, temperature, pH, nitrate or nitrite, is crucial
    for efficient plant growth and root development [4]. This allows for the precise
    control of the nutrient content to enhance productivity [5]. Weather, management
    practices, different soil types and local topology can cause significant variations
    in the parameters of interest, even within a single agricultural field and over
    short timespans [6]. Traditional practices, such as in-situ measurements conducted
    by an appropriate operator or offsite laboratory analysis of soil samples, are
    not suitable for the spatial and temporal measurement densities required. Thus,
    the use of distributed, independently operating sensor nodes with in-situ measurement
    capabilities is desired [7]. As the manual operation of wired sensor nodes deployed
    on large agricultural fields is both impractical and expensive, low-power and
    long-range data transmission standards, such as Long Range (LoRa), have been established
    for the transmission of sensor data [8,9]. The sensor nodes should not obstruct
    the normal work in the field, which introduces the need for wireless underground
    sensor nodes. Burying sensor nodes in the soil helps to protect them from extreme
    weather conditions and farm equipment [7]. A drawback is that the achievable communication
    distance is significantly reduced, because the soil introduces variable high path
    losses [10]. Researchers at the University of Applied Sciences in Osnabrück have
    proposed a system for data readout from a sensor buried 60 cm in the ground at
    a receiving station 350 m away using LoRa communication [8]. Typically, the distances
    in agriculture are significantly larger than 350 m. Thus, a drone can be a solution
    for the data collection of sensor nodes distributed in large areas without the
    need to install additional infrastructure. The deployment of unmanned aerial vehicles
    (UAVs) in the context of precision agriculture is becoming a valuable tool for
    farmers and researchers. Barbedo provides a comprehensive review on the use of
    UAVs for monitoring and assessing plant stresses [11]. Barnetson et al. measured
    plant pasture biomass and quality with a UAV [12]. Bukowiecki et al. used an UAV
    with an integrated camera for the estimation of the green area index (GAI) of
    winter wheat to calibrate the Sentinel-2 data for crop monitoring and yield prediction
    [13]. Fan et al. discuss plant classification based on drone data [14]. Quino
    et al. introduced drones in combination with RFID tags for taking a plant inventory
    [15]. The numerical fluid dynamics simulation by Marturano et al. investigates
    the air flow around a drone, which is relevant for the placement of sensors on
    drones [16]. The potential of combing drones with LoRa communication for data
    collection has recently been proposed in the literature. Behjati et al. demonstrated
    a system that used drones with an attached LoRaWAN® gateway to collect the data
    from water quality sensors and livestock monitoring equipment on a farm [17].
    The authors investigated the packet loss performance of the LoRa connection, taking
    into account the different spreading factors and drone speeds. Additionally, they
    optimized the flight path to maximize the flight range of the fixed-wing vertical
    takeoff drone. The forwarding of the sensor data from the gateway to a server
    was conducted using LTE. Park et al. demonstrated a system for collecting environmental
    sensor data on a tree farm via LoRa using a drone with an attached LoRaWAN® gateway
    [18]. They successfully applied a proposed client-server communication scheme,
    but encountered some issues with the gateway in low temperature conditions and
    limitations of the flight time of the drone due to the additional weight. Other
    groups have worked on different subproblems of the approach to collect sensor
    data with drones. Caruso et al. derived an analytical model for data acquisition
    with a drone and LoRa from a large regular grid of sensor nodes, as would be found
    in agriculture [19]. The model allowed for the determination of the optimal spacing
    of the sensor nodes, the time a sensor needs to be in range of a sensor node and
    the required velocity of the drone to optimize the probability of successful data
    collection. Furthermore, Zhang et al. improved the UAV data collection efficiency
    of distributed sensor nodes [20]. They developed an algorithm to organize sensor
    nodes that are close to each other into clusters, with a cluster head that transmits
    the sensor data of the whole cluster to the drone. A genetic algorithm was then
    used to minimize the flight path of the UAV between the clusters. Additionally,
    an adaptive scheme for changing the transmission data rate based on the received
    signal strength and the signal to noise ratio was reported. Pan et al. proposed
    a dynamic UAV speed control scheme in order to adapt to different sensor device
    densities [20,21]. Based on an analytical model of the connection situation, the
    number of successful sensor node connections per second was maximized. Zorbas
    and O’Flynn worked on the problem of LoRa transmission packet collision when many
    sensor nodes are located in a specific area. Their protocol allowed for the data
    collection of 80 nodes in a 1500 m × 1500 m area without packet collisions [22].
    In this paper, a system was investigated to collect the data from buried sensor
    nodes and forward that data to a ground station by using the LoRa transmission
    standard and a UAV. When operating such a system, a challenge is that it has to
    be designed in such a way that the data collection is secured while the minimizing
    battery consumption of the sensor nodes and taking into account the limited flight
    time of the drone. The necessary optimization of the readout scheme requires knowledge
    about the different influences on the LoRa transmission quality when the underground
    sensor node communicates with an aboveground UAV. To the best of the authors’
    knowledge, there have not been many published experimental demonstrations on this
    topic. A similar setup using the NB-IoT standard has been analyzed in simulations
    by Castellanos et al. The authors demonstrated that an UAV could collect the data
    within 50 s from 2000 sensors buried in a grid with 10 m spacing under a 20 hectare
    potato field. Additionally, the impact of soil moisture on the number of successfully
    served sensor nodes due to changing damping has been shown [23]. Experimental
    work has recently been published by two other groups. Cariou et al. buried a sensor
    node at a depth of 15 cm and demonstrated the data collection capability of their
    system for flight heights of 20 m to 60 m and distances up to 150 m [24]. Hossain
    et al. developed a similar system and conducted measurements of the received signal
    strength of the LoRa packages close to the point where the node was buried [25].
    A detailed comparison between the system architectures and methods used and the
    approach described here is given in Section 4. The general setup (see Figure 1a)
    consists of a sensor node buried in a field that transmits a series of measurements
    upon the request of the repeater drone, using the LoRa transmission standard.
    The repeater drone receives the data and forwards it immediately to the user ground
    station. Low power sensor nodes were implemented and a protocol for their energy
    efficient operation was developed. In several experiments, different aspects of
    the system described were analyzed: Figure 1. (a) Schematic of the investigated
    communication setup. (b) Picture of a sensor node deployed in a maize field before
    closing the hole with soil. (c) Picture of the drone with attached component housing.
    (d) Characterization of different antennas in the range around the 868 MHz LoRa
    frequency with the scattering parameter S. Dependency of received LoRa signal
    strength on flight height of the drone and on the burial depth of the sensor node.
    Demonstration of the range extension capability. Determination of the maximum
    distance between the sensor node and drone with the setup. Investigation of the
    effect of the antenna placement inside the sensor node on the received LoRa signal
    strength. Investigation of the repeatability of the signal strength over distance
    measurements. This paper is organized as follows. Section 2 presents the materials
    and methods. Section 3 contains the experimental results. The system design and
    the results are compared side-by-side with those of the relevant literature in
    Section 4 (discussion). Finally, the conclusions are presented in Section 5. Some
    of these results have recently been published as a conference contribution [26].
    2. Materials and Methods 2.1. Materials Three test sensor nodes, based on the
    ESP32 boards with a LoRa communication chip operating at 868 MHz, were used (WiFi
    LoRa 32 V2, Heltec Automation Technology, Chengdu, Sichuan, China). Figure 1d
    shows the characterization of the different antennas for the LoRa communication.
    The incorporated antenna from Heltec (Antenna “B”) showed an unsatisfactory performance
    at the desired communication frequency of 868 MHz. For the further experiments,
    we used the antennas marked as “A” and “C”, due to their superior performance
    around 868 MHz and small antenna size. The spreading factor (SF) was set to 10
    to balance between the required power and time required for data transmission
    and the achievable range. The bandwidth (BW) was set to 125 kHz and the maximum
    available output power of 20 dBm was used. Those parameters where chosen which
    favored longer communication ranges over data rates and transmission power consumption.
    A sensor node operates as follows to minimize power consumption. The ESP32 stays
    in deep sleep mode and wakes up at regular intervals for 5 s to obtain the data
    from the connected sensors and to listen for data requests from the drone. When
    it receives a request, it transmits the data stored since the last request and
    then goes back to sleep. The Heltec board has a rather high deep sleep current,
    of approximately 1 mA [27]. Therefore, the overall power consumption is determined
    by the deep sleep power, by the power required while waiting for a request from
    the drone and by the ratio between the time spent in deep sleep mode vs. time
    spent waiting for a request. It was decided to favor the transmission range over
    transmission power consumption because it was assumed that the amount of data
    collected and the frequency of drone readouts would be low. In the experiments,
    a wakeup interval of 5 s was chosen to acquire more data about the transmission
    quality. This interval would need to be increased when operating the system for
    longer timespans. Each sensor node is powered by a 3.6 V lithium thionyl chloride
    (Li/SOCL2) battery (SL-2780, Tadiran Batteries, Kiryat Ekron, Israel), due to
    the high energy capacity of 19 Ah and long lifetime (up to 10 years). In the experiments,
    a capacitive moisture and temperature sensor (Adafruit STEMMA Soil Sensor, Adafruit
    Industries LLC, New York, NY, USA) was connected. An IP68 enclosure protects the
    components from the ingress of water and dust. The drone used to investigate the
    LoRa repeater function was the DJI Phantom 3 Advanced (DJI Technology, Shenzhen,
    China) (Figure 1c). DJI states a maximum flight time of approximately 23 min [28],
    but in the experiments, flight times of only approximately 15 min were achieved.
    A Heltec WiFi LoRa 32 V2 board with antenna “A” was attached to provide LoRa connectivity.
    It was powered by a 1100 mAh LiPo battery pack. The position of the drone was
    tracked by the onboard inertial measurement unit (IMU) and an additional NEO-6M
    GPS module connected to the Heltec board. In order to acquire the data over LoRa
    and record it, a ground station consisting of a readout laptop and connected Arduino
    Uno with a Dragino LoRa Shield (SX1276 Shield-868, Dragino Technology, Shenzhen,
    China), was used. This module is also based on Semtech’s SX1276 LoRa transceiver
    chip. The received LoRa packages were loaded onto the laptop over a USB serial
    interface and saved to a CSV file with a Python script. The post-collection analysis
    of the data was also conducted in Python. The SX1276 chip provides information
    about the received signal strength indication (RSSI). This value can be used to
    evaluate the signal attenuation and was the main parameter used for interpreting
    the following experiments. Therefore, the RSSI of both LoRa communication paths
    (sensor to drone and drone to ground station) was acquired. The RSSI of the transmission
    between the sensor node and the drone was transmitted to the ground station, together
    with the GPS data from the NEO-6M module and the sensor data. 2.2. Methods In
    order to analyze the different aspects of the usage of a drone as a repeater for
    LoRa communication, a series of experiments were conducted on the Experimental
    Farm Hohenschulen of Kiel University. 2.2.1. Investigation of Flight Height and
    Burial Depth Dependency In the first series of experiments, the LoRa signal attenuation
    of the communication between the sensor node and drone was investigated, with
    the drone hovering at an increasing flight level H directly above the sensor node
    (Figure 2). There were two measurement series with sensor node depth D of 30 cm
    and 60 cm. The RSSI was recorded every 5 m until a 40 m height level was reached.
    Figure 2. Schematic of the experimental setup used for investigating the dependency
    of the received signal strength at the drone on flight height H and burial depth
    D. 2.2.2. Demonstration of the Range Extension Capability In a subsequent experiment,
    the communication range extension capability of the described system was investigated.
    Hence, the communication range L was compared for two different situations: direct
    sensor node to ground station communication (S1) and intermediate signal repetition
    at the drone (S2) (Figure 3). Figure 3. Schematic of the experimental setup used
    for demonstrating the extended range of the data collection system design. S1
    shows the direct sensor node to ground station communication path and S2 the path
    with intermediate signal repetition at the drone. Firstly, the system was configured
    so that the sensor node, buried at a depth of 30 cm, communicated directly with
    the ground station, bypassing the drone. The distance between the sensor node
    and ground station was increased while measuring the RSSI and the GPS position.
    Secondly, the experiment was conducted by using the drone as a repeater. The drone
    hovered 30 m above the sensor node and then, again, recorded the RSSI and GPS
    position every 50 m while the ground station was moved away. 2.2.3. Investigation
    of the Communication Range between Sensor Node and Drone When applying the described
    system in a real-world scenario, a drone would not hover above each sensor node
    but would conduct the data collection from a certain distance. In order to maximize
    the area in which the sensor nodes can be deployed and read out, the range R for
    the communication between a sensor node and the drone has to be determined (Figure
    4). For this purpose, a sensor node was buried at a depth of 30 cm and the communication
    was started with the drone hovering above the sensor node. The drone was then
    flown away at a constant height of 30 m while recording both its GPS position
    and the RSSI of the packages received at the drone from the sensor node. Figure
    4. Schematic of the experimental setup used for the determination of the communication
    range between sensor node and drone. 2.2.4. Investigation of the Antenna Radiation
    Pattern Commercially available antennas for LoRa communication are usually helical
    antennas. The radiation pattern has a toroidal shape and is symmetric around the
    z-axis of the antenna (Figure 5b). When using compact enclosures for the sensor
    nodes, the antennas must be oriented horizontally (Figure 5a). Consequently, the
    radiation pattern above the ground is not symmetric around the point where the
    drone is buried. Figure 5. (a) Schematic of the antenna orientation (z axis) underground
    in the hardware enclosure. (b) Antenna radiation (c) Schematic of the antenna
    orientations investigated. How this affects the RSSI of the data packages sent
    from the node to the drone was investigated. To achieve this, the sensor node
    was buried in a depth of 30 cm, with the antenna z-axis oriented in a known direction
    in the ground plane. Then, the drone was flown at a constant height of 30 m and
    with varying positions around the point at which the sensor node was buried. During
    flight, the sensor data was continuously read out and the GPS coordinates of the
    drone were acquired each time a package from the sensor node arrived. This enabled
    the correlation of the RSSI with the position of the drone. The antenna on the
    drone was oriented with the helix z-axis pointing downwards (Figure 5c) and, therefore,
    its radiation pattern is symmetric, minimizing distortions caused by the drone
    orientation. 2.2.5. Investigation of Reproducibility The interpretation of the
    described experiments requires the reproducibility of the measurement data. In
    order to verify this, a sensor node was buried at a depth of 30 cm and three flights
    were carried out with the same path, directly passing above the sensor node at
    a constant height of 25 m (Figure 6). Each flight was started directly above the
    sensor node and then the drone was flown away to a defined distance (flight phase
    P1). Afterwards, it was steered back along the same path, passing over the sensor
    node, and then flown away again from the sensor node to a turning point (P2).
    From that point, the drone was flown back to the sensor node (P3). During flight,
    the data packages were continuously read out from the sensor node. Additionally,
    the chosen trajectory allows the analysis of how the RSSI changes when flying
    over the sensor node during data collection. Figure 6. Schematic of the experimental
    setup and the different flight phases. 3. Results 3.1. Investigation of Flight
    Height and Burial Depth Dependency The RSSI for a sensor node depth D of 30 cm
    was −63 dBm at a drone height of 5 m and −77 dBm at a height of 40 m, as shown
    in Figure 7. For a sensor node depth D of 60 cm the values were −64 dBm and −81
    dBm, respectively, at drone heights of 5 m and 40 m. During the experiments, a
    loss of LoRa packages was observed at an RSSI of approximately −120 dBm. From
    this data, a repeater flight level of 130 m was estimated as possible for a sensor
    node buried at 60 cm depth. In a second set of experiments, it was found that
    the attenuation for flying the drone at a constant height to different distances
    L was in a similar range, with ~0.3 dB/m. This experiment was conducted on 23
    November 2020. Figure 7. Comparison of the relationship between flight level and
    RSSI for the two sensor node depths of 30 cm and 60 cm. 3.2. Demonstration of
    the Range Extension Capability Figure 8a shows a satellite image of the paths
    away from the sensor node for both parts of the experiment. The positions at which
    the last packages with sensor data were received are marked. The graph depicting
    the RSSI over distance (Figure 8b) shows that the LoRa packages were received
    up to L = 316 m (blue) for the case without using a drone. When using the drone
    to receive and transmit the data, the last package was received at a distance
    of L = 1000 m (orange). Thus, the communication range is enhanced by at least
    three times with the drone as a repeater. The height profile of the path between
    the sensor node and ground station (Figure 8c) particularly shows the advantage
    of the system. It can be seen that, for direct communication between node and
    ground station, the signal is lost after crossing the top of a hill, as the line
    of sight (LoS) is lost. By using the drone, a LoS can be ensured even in landscape
    with hills and other obstacles that might obstruct the signal. This experiment
    was conducted on 6 August 2021. Figure 8. (a) Satellite view of the travelled
    path away from the sensor node (Map data: Google, Landsat/Copernicus) (b) Comparison
    of the RSSI of the packages received by the ground station with and without a
    drone as repeater. Sensor node depth is 30 cm. Drone is hovered 30 m above the
    sensor node as a repeater. (c) Height profile of the traveled path (Map data:
    Google, Landsat/Copernicus). 3.3. Investigation of the Communication Range between
    Sensor Node and Drone The RSSI measurement results of the experiment can be seen
    in Figure 9a. The RSSI decreases with the increasing distance until the last data
    package is received at a distance of R = 550 m. Consequently, the drone can be
    used as a data collector for sensor nodes within a Rmax = 550 m range. Figure
    9. (a) Reduction in the RSSI with the increasing distance between the sensor node
    and drone. The sensor node depth was 30 cm. The drone had a constant flight height
    of 30 m. (b) Schematic of the assumed flight configuration for calculating the
    maximum covered area Amax = 470 ha. From this data, it is possible to estimate
    the maximum area Amax on which the deployed sensor nodes can be read (Figure 9b).
    Assuming an average flying velocity of 18 km/h and a flight time of 15 min, a
    maximum flight distance of the drone Smax = 4500 m can be calculated. This allows
    for the determination of the length L, considering the given flightpath with minimal
    overlap (Figure 9b): 𝐿= 1 2 ( 𝑆 𝑚𝑎𝑥 −4 𝑅 𝑚𝑎𝑥 )=1150 m. (1) Following this, the
    maximum area 𝐴 𝑚𝑎𝑥 =4 𝑅 𝑚𝑎𝑥 𝐿+(4+𝜋) 𝑅 2 𝑚𝑎𝑥 =4.69  km 2 (2) is calculated. Thus,
    utilizing a drone for sensor readout enables an area of approximately 470 hectares
    to be scanned within only 15 min. The data can be transmitted online to the user
    within a certain range (in this setup approximately 1 km) or by storage and the
    subsequent transmission of the data packages upon return to the base. This experiment
    was conducted on the 31 May 2022. 3.4. Investigation of the Antenna Radiation
    Pattern The results of this experiment are visualized as point clouds (Figure
    10). Each colored dot corresponds to the position of the drone when it received
    a package with the given RSSI. Figure 10a shows the point cloud for the vertical
    antenna orientation. The RSSI of the packages is higher at the perpendicular point
    to the antenna orientation than the inline point. This supports the hypothesis
    that the antenna orientation of the sensor node influences the RSSI of the transmitted
    packages. This fact can be important when optimizing flight paths for data collection,
    as the RSSI of data transmission not only depends on the distance between the
    sensor node and drone, but also on the sensor node orientation. Figure 10. (a)
    Visualization of the experimental results for vertical antenna orientation on
    the drone as a point cloud. Each point corresponds to the position relative to
    the sensor node that a package was received and is colored to show the RSSI value
    of the transmission. Additionally, a line is placed along the orientation of the
    antenna of the sensor node. Sensor node depth was 30 cm. Drone had a constant
    flight height of 30 m. (b) Experimental results for horizontal antenna orientation
    on the drone. In addition, the antenna orientation on the drone was changed from
    a vertical to a horizontal orientation (Figure 10b). This creates an additional
    dependency of the RSSI on the yaw angle of the drone, as the symmetry of the radiation
    pattern of the drone’s antenna is lost. Therefore, the RSSI is less predictable;
    therefore, for practical applications, a vertical orientation of the antenna is
    to be preferred over a horizontal orientation. This experiment was conducted on
    7 July 2022. 3.5. Investigation of Reproducibility Firstly, the change in the
    RSSI over the pathway of a single flight was evaluated (see schematic in Figure
    6). When flying away in phase P1, the RSSI decreased with distance D from the
    sensor node and increased again when turning around to fly phase P2 (Figure 11).
    After passing over the sensor node, the RSSI decreased, then in P3, it increased
    again until arriving back over the sensor node. The main observation is that the
    RSSI is lower when flying away from the sensor node than when flying towards it.
    It is believed that the reason for this is probably due to the radiation pattern
    of the antenna. For this experiment, the antenna was mounted with the z-axis facing
    downwards; thus, the radiation pattern (Figure 5b) is symmetric around the yaw
    axis of the drone, but not around the pitch axis. When flying towards the sensor
    node, the node lies closer to the xy-plane of the antenna radiation pattern, where
    the maximum energy of the incoming signal is received by the drone’s antenna.
    When flying away, the signal from the sensor node comes from an angle, where less
    energy of the incoming signal is converted from electromagnetic waves to an electric
    signal by the antenna, therefore the RSSI is lower. Figure 11. RSSI over distance
    D diagram of the third overflight to explain the behavior. Secondly, the change
    in the RSSI over distance was compared between the three flights. During P1, the
    RSSI values differ, at a maximum of 10 dB for similar distances from the sensor
    node, and the qualitative development of the RSSI is comparable (Figure 12a).
    The same is true for the second flight phase (Figure 12b), where the maximum difference
    is also 10 dBm, but for most distances the difference is smaller, at approximately
    5 dB. For the third flight phase, the differences are mostly 4 dB, and when close
    to the sensor node, the difference goes up to approximately 10 dB (Figure 12c).
    Figure 12. RSSI over distance diagram of the three flights, divided into the different
    flight phases for better clarity. The arrows show the direction of time evolution.
    Sensor node depth is 30 cm. Drone has a constant flight height of 25 m. (a) Phase
    1. (b) Phase 2. (c) Phase 3. The differences can be caused by errors in the reproduction
    of the desired flight path. These errors are most significant close to the sensor
    node because, here, small deviations in the flight path can lead to comparatively
    high deviations in the RSSI value. Additionally, the GPS positioning is also only
    accurate to a few meters, particularly the NEO6M GPS module as it only uses between
    six and eight satellites. The RSSI also depends on the pitch angle of the drone,
    as described before. The pitch angle also determines the speed of the drone. Therefore,
    speed differences between the flights can cause differences in the RSSI measurements.
    The large RSSI differences at the turning points of the drone are likely to be
    explained by this, because the speed and orientation changes at these points are
    difficult to reproduce between different flights. This experiment was conducted
    on the 29 August 2022. 4. Discussion In this section, the system setup, methods
    and results are compared to the work of Cariou et al. [24] and Hossain et al.
    [25], because they share the same approach of collecting data from underground
    sensor nodes by using an UAV and the LoRa transmission technology. The system
    setup of Cariou et al. consisted of a sensor node that was designed to be buried
    in the ground for several months. It awakened regularly from the sleep mode to
    transmit data from a soil moisture sensor, on request, to a collector node attached
    to a drone via LoRa. This transmission used an SF of 7, a BW of 125 kHz and a
    transmission power (TxP) of 14 dBm. The collector node saved the data frames on
    an SD card and transmitted them over ZigBee to a network gateway when in close
    proximity. The setup of Hossain et al. used a sensor node consisting of a Raspberry
    Pi for control, an RFM95 for LoRa connectivity and a soil moisture sensor. The
    sensor node was powered from above ground by a 12 V car battery and was not optimized
    for low power operation. Data packages were sent continuously to a LoRaWAN gateway
    attached to the drone, configured with SF 7, BW 125 kHz and a TxP of 20 dBm. The
    gateway also stored the data until the drone landed. The SF, BW, and TxP for the
    LoRa transmissions of both groups were configured for higher data rates and lower
    transmission ranges between sensor node and drone. SF 10, BW 125 kHz, and TxP
    20 dBm were used, which has to be considered when comparing the RSSI values and
    achieved transmission ranges. Another difference was the way the data from the
    drone was further processed after being received. Both Cariou et al. and Hossain
    et al. used an approach in which the data was collected and was only accessible
    to the user at the end of the flight. The data packages were transmitted online
    to the user with LoRa. This allowed for the diagnoses of problems during flight
    and access the data without delay. However, this also reduced the data rate further
    as the drone LoRa module could not collect new data packages from other nodes
    while retransmitting old packages to the ground station. Another approach was
    the direct upload of the data to the cloud via a 4G internet connection, as demonstrated
    in [17,29]. This obviously requires the local availability of a 4G connection.
    In their experiments, Cariou et al. first measured the RSSI in a range of distances
    (0 to 150 m) from the UAV to the buried sensor node (15 cm deep) and for heights
    of 20/40/60 m. Their results are comparable to the results in Section 3.1 and
    Section 3.3, which considered a 30 m flight height and 30 cm node depth. Their
    data showed that for high enough lateral distances, the RSSI is higher for higher
    flight heights. Secondly, they conducted an overflight experiment over the buried
    sensor node at different UAV speeds to show that the system was able to collect
    100 packages from the node, independent of the speed. Their results showed RSSI
    measurements that are comparable to the results in Section 3.5, but the authors
    did not further investigate or explain this behavior. The authors further optimized
    the path for the data collection of 25 buried sensor nodes. Hossain et al. measured
    the RSSI with a receiver gateway attached to a wooden pole with increasing height
    (0.3 to 2 m) and increasing lateral distance (0 to 5 m) relative to the sensor
    node (30 cm node depth), both for cross- and co-polarization between the sensor
    node and gateway antenna. The results were also compared with numerical simulations.
    Furthermore, the authors measured the packet loss for distances between the node
    and drone of up to 82 m, again comparing cross- and co-polarization. Additionally,
    they conducted trajectory flights at four heights, from 0.91 m to 3.66 m around
    the sensor node, covering a rectangle spanning −24 to 24 m and −27.4 m to 24 m.
    During flight, they again measured the RSSI for cross- and co-polarization. This
    experiment, although methodically similar to Section 2.2.4, considered a smaller
    lateral range scale and smaller flight heights. From the results, the authors
    concluded that the RSSI was largely independent of the polarization. The RSSI
    measurements are mostly complementary to the work of Cariou et al. [24] and the
    work described here as they focused on a scale closer to the buried sensor node.
    Overall, this work shows similarities to both these other works when the methods
    and the results are considered. A common point of interest is the RSSI distribution
    around the sensor node, as described before, but different length scales were
    investigated. Furthermore, an attempt was made to estimate the maximum coverable
    area for the system setup. A particular new emphasis of this work is the impact
    of the orientation of the antenna at the sensor node and at the drone. Additionally,
    experiments on using a LoRa link from drone to ground station are presented. Comparing
    the chosen system setups and methods, it can be observed that there are different
    assumptions about the sensor node density and the overall amount of data that
    needs to be collected. Cariou et al. and Hossain et al. considered smaller length
    scales in their experiments and configured the LoRa communication more for higher
    data rates than for communication distances. This is suitable for higher sensor
    node densities or if large amounts of data need to be transmitted at each connection.
    The system described here was designed more towards covering a greater area with
    lower sensor node density and lower amounts of data for each transmission. 5.
    Conclusions In conclusion, a setup for communication with an underground network
    of LoRa sensor nodes has been demonstrated using a drone to collect the data.
    A much larger area can be covered than previously, without the need for the installation
    of additional ground-based hardware. The maximum communication ranges between
    an underground sensor node and drone and the dependency of the received signal
    strength on the flight height and burial depth for the setup was experimentally
    determined. The evaluation of the antenna orientation of the sensor node and the
    overflight experiment hinted at other possibilities for drone flight path optimization.
    In addition, the reproducibility of the RSSI measurements for different distances
    between the sensor node and drone was also demonstrated. The long-term goal is
    a fully autonomous data collecting system for several sensor nodes based on a
    drone. The sensor nodes were operated in the soil and demonstrated successful
    connection for up to 49 days. Currently, sensors for physical and chemical soil
    parameters are integrated into the sensor nodes for the relevant data collection.
    For this purpose, a microfluidic unit for the extraction of soil water has been
    developed [30], as well as a compact sensor chip based on organic optoelectronic
    devices for nitrite and nitrate determination [31]. To enable the data collection
    for a larger number of sensor nodes, a more sophisticated communication protocol
    must be implemented to avoid package collisions. Additionally, adapting the spreading
    factor and the bandwidth according to the respective distances and sensor node
    densities is important to maximize the area coverage and collection performance
    of the system. This can be further improved by optimizing the drone path between
    sensor nodes. Regarding the system setup, it is still to be determined whether
    LoRa is the optimal way to transmit the data from the drone to the ground station.
    Possibly, a transmission directly over LTE to a cloud is advantageous to point-to-point
    LoRa, particularly for situations where high data rates are required. Another
    important aspect is the optimization of the sensor node antenna to the ground-to-air
    transmission situation. Author Contributions Conceptualization, L.H., I.T., F.D.
    and M.G.; methodology, L.H., I.T., F.D. and M.G.; software, L.H.; validation,
    L.H. and I.T.; formal analysis, L.H., I.T. and M.G.; investigation, L.H. and I.T.;
    resources, M.G.; data curation, L.H. and I.T.; writing—original draft preparation,
    L.H., I.T. and M.G.; writing—review and editing, L.H., I.T., F.D. and M.G.; visualization,
    L.H., I.T. and F.D.; supervision, I.T. and M.G.; project administration, M.G.;
    funding acquisition, M.G. All authors have read and agreed to the published version
    of the manuscript. Funding This project received funding from the European Regional
    Development Fund (EFRE) by the European Union (OPTOCHIP, LPW-E/1.2.2/1303). Data
    Availability Statement Data underlying the results presented in this paper are
    not publicly available at this time but may be obtained from the authors upon
    reasonable request. Acknowledgments The authors thank the Institute of Crop Science
    and Plant Breeding for providing the drone and for farm access at the Experimental
    Farm Hohenschulen. Conflicts of Interest The authors declare no conflict of interest.
    References Robert, P.C. Precision agriculture: A challenge for crop nutrition
    management. Plant Soil 2002, 247, 143–149. [Google Scholar] [CrossRef] Shiva,
    V. The Violence of the Green Revolution: Third World Agriculture, Ecology and
    Politics; Zed Books: London, UK, 1991; ISBN 9780862329655. [Google Scholar] Hillel,
    D.; Braimoh, A.K.; Vlek, P.L.G. Soil Degradation Under Irrigation; Springer: Dordrecht,
    The Netherlands, 2008. [Google Scholar] Bardhan, K.; York, L.M.; Hasanuzzaman,
    M.; Parekh, V.; Jena, S.; Pandya, M.N. Can smart nutrient applications optimize
    the plant’s hidden half to improve drought resistance? Physiol. Plant. 2021, 172,
    1007–1015. [Google Scholar] [CrossRef] Forde, B.; Lorenzo, H. The nutritional
    control of root development. Plant Soil 2002, 232, 51–68. [Google Scholar] [CrossRef]
    Gebbers, R.; Adamchuk, V.I. Precision agriculture and food security. Science 2010,
    327, 828–831. [Google Scholar] [CrossRef] [PubMed] Vuran, M.C.; Salam, A.; Wong,
    R.; Irmak, S. Internet of underground things: Sensing and communications on the
    field for precision agriculture. In Proceedings of the 2018 IEEE 4th World Forum
    on Internet of Things (WF-IoT), Singapore, 5–8 February 2018. [Google Scholar]
    [CrossRef] Grunwald, A.; Schaarschmidt, M.; Westerkamp, C. LoRaWAN in a rural
    context: Use cases and opportunities for agricultural businesses. In Proceedings
    of the Mobile Communication-Technologies and Applications; 24. ITG-Symposium,
    Osnabrueck, Germany, 15–16 May 2019; pp. 1–6. [Google Scholar] Salam, A.; Vuran,
    M.C.; Irmak, S. Di-Sense: In situ real-time permittivity estimation and soil moisture
    sensing using wireless underground communications. Comput. Netw. 2019, 151, 31–41.
    [Google Scholar] [CrossRef] Wohwe Sambo, D.; Forster, A.; Yenke, B.O.; Sarr, I.;
    Gueye, B.; Dayang, P. Wireless Underground Sensor Networks Path Loss Model for
    Precision Agriculture (WUSN-PLM). IEEE Sens. J. 2020, 20, 5298–5313. [Google Scholar]
    [CrossRef] Barbedo, J. A Review on the Use of Unmanned Aerial Vehicles and Imaging
    Sensors for Monitoring and Assessing Plant Stresses. Drones 2019, 3, 40. [Google
    Scholar] [CrossRef] Barnetson, J.; Phinn, S.; Scarth, P. Estimating Plant Pasture
    Biomass and Quality from UAV Imaging across Queensland’s Rangelands. AgriEngineering
    2020, 2, 523–543. [Google Scholar] [CrossRef] Bukowiecki, J.; Rose, T.; Kage,
    H. Sentinel-2 Data for Precision Agriculture?-A UAV-Based Assessment. Sensors
    2021, 21, 2861. [Google Scholar] [CrossRef] Fan, D.; Su, X.; Weng, B.; Wang, T.;
    Yang, F. Research Progress on Remote Sensing Classification Methods for Farmland
    Vegetation. AgriEngineering 2021, 3, 971–989. [Google Scholar] [CrossRef] Quino,
    J.; Maja, J.M.; Robbins, J.; Fernandez, R.T.; Owen, J.S.; Chappell, M. RFID and
    Drones: The Next Generation of Plant Inventory. AgriEngineering 2021, 3, 168–181.
    [Google Scholar] [CrossRef] Marturano, F.; Martellucci, L.; Chierici, A.; Malizia,
    A.; Di Giovanni, D.; d’Errico, F.; Gaudio, P.; Ciparisse, J.-F. Numerical Fluid
    Dynamics Simulation for Drones’ Chemical Detection. Drones 2021, 5, 69. [Google
    Scholar] [CrossRef] Behjati, M.; Mohd Noh, A.B.; Alobaidy, H.A.H.; Zulkifley,
    M.A.; Nordin, R.; Abdullah, N.F. LoRa Communications as an Enabler for Internet
    of Drones towards Large-Scale Livestock Monitoring in Rural Farms. Sensors 2021,
    21, 5044. [Google Scholar] [CrossRef] Park, S.; Yun, S.; Kim, H.; Kwon, R.; Ganser,
    J.; Anthony, S. Forestry Monitoring System Using LoRa and Drone. In Proceedings
    of the 8th International Conference on Web Intelligence, Mining and Semantics,
    Novi Sad, Serbia, 25–27 June 2018. [Google Scholar] [CrossRef] Caruso, A.; Chessa,
    S.; Escolar, S.; Barba, J.; Lopez, J.C. Collection of Data With Drones in Precision
    Agriculture: Analytical Model and LoRa Case Study. IEEE Internet Things J. 2021,
    8, 16692–16704. [Google Scholar] [CrossRef] Zhang, Z.; Zhou, C.; Sheng, L.; Cao,
    S. Optimization Schemes for UAV Data Collection with LoRa 2.4 GHz Technology in
    Remote Areas without Infrastructure. Drones 2022, 6, 173. [Google Scholar] [CrossRef]
    Pan, Q.; Wen, X.; Lu, Z.; Li, L.; Jing, W. Dynamic Speed Control of Unmanned Aerial
    Vehicles for Data Collection under Internet of Things. Sensors 2018, 18, 3951.
    [Google Scholar] [CrossRef] [PubMed] Zorbas, D.; O’Flynn, B. Collision-Free Sensor
    Data Collection using LoRaWAN and Drones. In Proceedings of the 2018 Global Information
    Infrastructure and Networking Symposium (GIIS), Thessaloniki, Greece, 23–25 October
    2018; IEEE: Piscataway, NJ, USA, 2018. [Google Scholar] Castellanos, G.; Deruyck,
    M.; Martens, L.; Joseph, W. System Assessment of WUSN Using NB-IoT UAV-Aided Networks
    in Potato Crops. IEEE Access 2020, 8, 56823–56836. [Google Scholar] [CrossRef]
    Cariou, C.; Moiroux-Arvis, L.; Pinet, F.; Chanet, J.-P. Data Collection from Buried
    Sensor Nodes by Means of an Unmanned Aerial Vehicle. Sensors 2022, 22, 5926. [Google
    Scholar] [CrossRef] Hossain, F.F.; Messenger, R.; Captain, G.L.; Ekin, S.; Jacob,
    J.D.; Taghvaeian, S.; O’Hara, J.F. Soil Moisture Monitoring Through UAS-Assisted
    Internet of Things LoRaWAN Wireless Underground Sensors. IEEE Access 2022, 10,
    102107–102118. [Google Scholar] [CrossRef] Titov, I.; Holtorf, L.; Daschner, F.;
    Gerken, M. Drone as LoRa® Repeater for Readout of Low-power Sensor Nodes in Precision
    Agriculture. In Proceedings of the EASS 2022; 11th GMM-Symposium, Erfurt, Germany,
    5–6 July 2022; pp. 1–3. [Google Scholar] Heltec Automation Technology Co., Ltd.
    WiFi LoRa 32 (V2): LoRa Node Development Kit. Available online: https://resource.heltec.cn/download/Manual%20Old/WiFi%20Lora32Manual.pdf
    (accessed on 15 January 2023). DJI Technology Co., Ltd. Phantom 3 Advanced: User
    Manual V1.8. Available online: https://dl.djicdn.com/downloads/phantom_3/en/Phantom_3_Advanced_User_Manual_en_v1.8_160719.pdf
    (accessed on 15 January 2023). Almalki, F.A.; Soufiene, B.O.; Alsamhi, S.H.; Sakli,
    H. A Low-Cost Platform for Environmental Smart Farming Monitoring System Based
    on IoT and UAVs. Sustainability 2021, 13, 5908. [Google Scholar] [CrossRef] Böckmann,
    S.; Titov, I.; Gerken, M. Extraction of Soil Solution into a Microfluidic Chip.
    AgriEngineering 2021, 3, 783–796. [Google Scholar] [CrossRef] Titov, I.; Köpke,
    M.; Gerken, M. Monolithic Integrated OLED–OPD Unit for Point-of-Need Nitrate Sensing.
    In Optical Sensors and Sensing Congress 2022 (AIS, LACSEA, Sensors, ES), Proceedings
    of the Optical Sensors and Sensing Congress 2022 (AIS, LACSEA, Sensors, ES), Vancouver,
    BC, Canada, 11 July 2022; Optica Publishing Group, Ed.; Optica Publishing Group:
    Washington, DC, USA, 2022. [Google Scholar] Disclaimer/Publisher’s Note: The statements,
    opinions and data contained in all publications are solely those of the individual
    author(s) and contributor(s) and not of MDPI and/or the editor(s). MDPI and/or
    the editor(s) disclaim responsibility for any injury to people or property resulting
    from any ideas, methods, instructions or products referred to in the content.  ©
    2023 by the authors. Licensee MDPI, Basel, Switzerland. This article is an open
    access article distributed under the terms and conditions of the Creative Commons
    Attribution (CC BY) license (https://creativecommons.org/licenses/by/4.0/). Share
    and Cite MDPI and ACS Style Holtorf, L.; Titov, I.; Daschner, F.; Gerken, M. UAV-Based
    Wireless Data Collection from Underground Sensor Nodes for Precision Agriculture.
    AgriEngineering 2023, 5, 338-354. https://doi.org/10.3390/agriengineering5010022
    AMA Style Holtorf L, Titov I, Daschner F, Gerken M. UAV-Based Wireless Data Collection
    from Underground Sensor Nodes for Precision Agriculture. AgriEngineering. 2023;
    5(1):338-354. https://doi.org/10.3390/agriengineering5010022 Chicago/Turabian
    Style Holtorf, Lucas, Igor Titov, Frank Daschner, and Martina Gerken. 2023. \"UAV-Based
    Wireless Data Collection from Underground Sensor Nodes for Precision Agriculture\"
    AgriEngineering 5, no. 1: 338-354. https://doi.org/10.3390/agriengineering5010022
    Article Metrics Citations Crossref   3 Scopus   4 Web of Science   3 Google Scholar   [click
    to view] Article Access Statistics Article access statistics Article Views 14.
    Jan 24. Jan 3. Feb 13. Feb 23. Feb 4. Mar 14. Mar 24. Mar 3. Apr 0k 1k 2k 3k 4k
    For more information on the journal statistics, click here. Multiple requests
    from the same IP address are counted as one view.   AgriEngineering, EISSN 2624-7402,
    Published by MDPI RSS Content Alert Further Information Article Processing Charges
    Pay an Invoice Open Access Policy Contact MDPI Jobs at MDPI Guidelines For Authors
    For Reviewers For Editors For Librarians For Publishers For Societies For Conference
    Organizers MDPI Initiatives Sciforum MDPI Books Preprints.org Scilit SciProfiles
    Encyclopedia JAMS Proceedings Series Follow MDPI LinkedIn Facebook Twitter Subscribe
    to receive issue release notifications and newsletters from MDPI journals Select
    options Subscribe © 1996-2024 MDPI (Basel, Switzerland) unless otherwise stated
    Disclaimer Terms and Conditions Privacy Policy"'
  inline_citation: '>'
  journal: AgriEngineering
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: UAV-Based Wireless Data Collection from Underground Sensor Nodes for Precision
    Agriculture
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Ma C.
  - Lu J.
  citation_count: '0'
  description: Firstly, the interference characteristics of photodetector for optical
    communication are analyzed. The interference characteristics of photodetector
    are analyzed and simulated by means of bit interference and clock extraction interference.
    According to the design index of the Angle measuring system required by the satellite-borne
    laser communication terminal, the code disk, the indicator grating and the extraction
    method of photoelectric signal of the photoelectric Angle encoder are designed
    and selected respectively. An experimental system is set up in the laboratory
    and the photoelectric detector interference is tested experimentally. The results
    show that the effect of jamming the photodetector is related to the frequency
    and power of the interference source.
  doi: 10.1109/ICIPCA59209.2023.10257914
  full_citation: '>'
  full_text: '>

    "IEEE.org IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account
    Personal Sign In Browse My Settings Help Access provided by: University of Nebraska
    - Lincoln Sign Out All Books Conferences Courses Journals & Magazines Standards
    Authors Citations ADVANCED SEARCH Conferences >2023 IEEE International Confe...
    Research on Remote Farm Management System Based on Computer Internet of Things
    Data Set Information Photoelectric Communication Publisher: IEEE Cite This PDF
    Chuantao Ma; Jing Lu All Authors 25 Full Text Views Abstract Document Sections
    I. Introduction II. Internet of Things Data Encryption Technology Based on Optical
    Communication Technology III. Application Status of Optical Communication Technology
    in the Perception Layer of the Internet of Things IV. Study on Interference Characteristics
    of Photodetector for Optical Communication V. System Inspection Show Full Outline
    Authors Figures References Keywords Metrics Abstract: Firstly, the interference
    characteristics of photodetector for optical communication are analyzed. The interference
    characteristics of photodetector are analyzed and simulated by means of bit interference
    and clock extraction interference. According to the design index of the Angle
    measuring system required by the satellite-borne laser communication terminal,
    the code disk, the indicator grating and the extraction method of photoelectric
    signal of the photoelectric Angle encoder are designed and selected respectively.
    An experimental system is set up in the laboratory and the photoelectric detector
    interference is tested experimentally. The results show that the effect of jamming
    the photodetector is related to the frequency and power of the interference source.
    Published in: 2023 IEEE International Conference on Image Processing and Computer
    Applications (ICIPCA) Date of Conference: 11-13 August 2023 Date Added to IEEE
    Xplore: 27 September 2023 ISBN Information: DOI: 10.1109/ICIPCA59209.2023.10257914
    Publisher: IEEE Conference Location: Changchun, China SECTION I. Introduction
    At present, the Internet of Things is widely accepted in the world as a network
    that connects any object to the Internet according to certain protocols through
    information sensing devices such as radio frequency identification, infrared sensors,
    global positioning system and laser scanner, and carries out information exchange
    and communication so as to realize intelligent identification, positioning, tracking,
    monitoring and management. The goal of the future Internet of Things is to build
    a large-scale, multi-source and multi-source heterogeneous network structure composed
    of sensor network, communication network and Internet to realize the interconnection
    and information interaction of all things, people and nature in any time and space
    [1]. Optical communication technology mainly refers to wired communication technology
    and wireless communication technology, which has a high degree of creativity,
    penetration and drive. If it is used as a means of full coverage of access, and
    then combined with the Internet of Things, it will produce great application value
    and advantages in traditional fields such as industry, agriculture, military,
    environment, medical treatment and new fields such as household, health care and
    transportation. At present, the optical communication technology has developed
    quite mature in China, and people are continuously researching and developing
    the Internet of Things terminal with mobile access function. The application of
    optical communication technology to the Internet of Things can not only realize
    the remote measurement, control, maintenance, management and operation of the
    Internet of things, but also make use of convenient and cheap terminal equipment
    communication mode. It extends the tentacles of communication to every corner
    of the world, thus promoting the extensive application and deepening of optical
    communication technology in the Internet of Things. In the future, the development
    of mobile communication network will promote the development and application of
    the Internet of Things as the main purpose [2]. At present, various mobile communication
    operators have been actively integrated into the whole industrial chain of the
    Internet of Things, integrating it with the mobile network. Its role and value
    through the short-range communication technology, wireless communication network,
    mobile terminal equipment integration and get the maximum play. In the satellite-borne
    optical fiber communication system, fiber Bragg grating is regarded as a new type
    of fiber Bragg grating. The electronic subdivision of fiber Bragg grating with
    high precision, high efficiency and high precision is realized by using two modes
    of gap phase difference and phase difference in the coarse and fine regions. Through
    the refinement of the circuit diagram, the device has a resolution of 24 bits.
    The field test proves that the Angle measurement accuracy of the device is better
    than 1.0 inches. In this paper, the anti - jamming performance of the receiver
    used in aerospace optical fiber communication is studied. SECTION II. Internet
    of Things Data Encryption Technology Based on Optical Communication Technology
    A. Setting the Transport Protocol In optical fiber communication technology, the
    design of transmission network is the key. Optical communication technology is
    a means of communication using light as a communication medium. Light is an electromagnetic
    wave with a higher and shorter length than radio waves. Therefore, optical band
    transmission bandwidth, communication capacity is large, and can resist EMI. In
    the optical communication-based transport network architecture, the transport
    protocol consists of two main components, namely, the control element and the
    transport device [3]. This paper focuses on the design of equipment protocol,
    and some modifications to it. The field matching domain of the new protocol is
    added, which includes Ethernet, MPLS, and TCP/UDP. The mandatory protocol version
    of the matching domain is updated to the optional mode instead of the mandatory
    protocol form, thus improving the flexibility of data transmission. In the process,
    by matching the items in the process with a counter one by one, when the items
    in the process are successfully updated, the corresponding counter will be updated,
    thus improving the diversification of the transmission protocol, and thus ensuring
    the effective transmission of data. B. Data Encryption Settings In this network,
    the data is encrypted according to the above requirements for the data transfer
    protocol. This section leverages AES cryptography to implement password processing.
    The entire process is shown in Figure 1. Fig. 1. Flow chart of AES encryption
    algorithm Show All SECTION III. Application Status of Optical Communication Technology
    in the Perception Layer of the Internet of Things A. Application of Optical Fiber
    Sensing Technology in the Perception Layer of the Internet of Things Because sensors
    can detect information from the outside world in real time, wireless sensor networks
    are used in Internet of Things systems related to environmental monitoring. With
    the development of optical fiber and optical fiber communication technology, optical
    fiber sensing technology is a new type of sensing technology which uses optical
    fiber as the carrier and optical fiber as the medium to transmit external signals
    [4]. It is a branch of photon and guided wave photonics technology which carries
    information. The method works as follows: The light emitted by the light source
    enters a kind of modulator for detection through a fiber, and is affected by the
    physical quantity to be detected, changes its characteristic parameters, and turns
    it into the signal light to be detected [5]. Then it enters a fiber, transmits
    it to a fiber, and performs photoelectric transformation and demodulation on it
    to obtain the physical quantity to be detected. For example, based on the polarization
    property of the fiber, The Faraday rotation Angle of the detected object can be
    detected directly, thus realizing the direct detection of the detected object.
    If both the transmission and sensing components of the fiber are made of fiber,
    a functional fiber can be obtained, and the fiber of the fiber can be used as
    a fiber like fiber to construct a distributed sensing system. B. Application of
    Wireless Optical Communication Technology in the Perception Layer of the Internet
    of Things At every level of the Internet of Things, the application of wireless
    communication technology is inseparable, and the continuous development and improvement
    of short-range wireless communication technology provides a reliable technical
    guarantee for the information communication of the Internet of Things in the perception
    layer. The perception network is the hub of connecting matter and information
    in the Internet of Things, and will be the “terminal” of the Internet of things
    [6]. At present, only the wireless communication network can assist the popularization
    of the perception network. Traditional WSNs is defined as “a wireless sensor network
    composed of sensors, data processing, communication and other units with independent
    intellectual property rights”. WSN has a variety of different structures, one
    of which is the hierarchical WSN structure, as shown in Figure 2. The communication
    mode between WSN nodes is a short-range wireless communication, and its transmission
    distance can reach 100 m. The multi-hop mode is used between nodes to transmit
    perceived data to the cluster head through short-range wireless communication.
    The cluster head then sends the aggregated information through the wired IP. In
    recent years, WSN has been continuously combined with wireless communication technology.
    This paper puts forward a new idea, that is, wireless network is used as the channel,
    WSN is connected to IP network, and a layer is set between WSN and network layer,
    which is composed of a pair of mode WSN gateway (dual-mode Sink). The WSN gateway
    not only plays the role of the upper layer of the wireless sensor network (cluster
    head), but also has the wireless access terminal of the cellular network, thus
    realizing the integration of the mobile communication network and the wireless
    communication network [7]. WSN transmits the WSN information to the network through
    the gateway node and the cellular network, thus forming an omnipresent ubiquitous
    network, as shown in Figure 3. Fig. 2. WSN structure Show All Fig. 3. WSNS combined
    with wireless communication networks Show All SECTION IV. Study on Interference
    Characteristics of Photodetector for Optical Communication The significance of
    active interference lies in that it has strong correlation to the interfered signals
    and consumes less [8]. It needs to have multiple correlations with the original
    signal in time, space and feature. Synchronous optical communication is the most
    common mode in current optical communication. bit interference is the most basic
    and simplest type, and is particularly suitable for switching (OOK) and DPPM (DPPM)
    modulation. The basic principle of this method is to increase the value of baseband
    signal at the instant “0”, so that the value is above the threshold set by the
    decision circuit, so that the bit “0” of the original signal is determined to
    be bit “1”. Bit interference is a method suitable for threshold determination
    circuit of the system. In IM/DD communication, the frequency of the interfered
    signal emitted by the interfered laser must be multiplied by the interfered signal.
    In the pulse process, the energy accumulation of the interfered signal is greater
    than the decision threshold, which is the interference effect [9]. In order to
    achieve the effect of bit interference, two parameters of the detector must be
    determined, one is the output power of the detector, the other is the threshold
    of the detector. To take an example of a monophonic interference, we define it
    as a cosine signal h(t)= α h cos( λ h t+ σ 0 )V (1) View Source The signal is
    g(t)=αcos λ c t (2) View Source For simplicity, λ c = ω j , σ 0 =0=0 can be set,
    then the synthesized signal received by the receiving end is: y Z (t)={ ( α h
    +α)cos λ c t+n(t)1 α h cos( λ h t)+n(t)0 (3) View Source The output envelope is
    u(t)={ (α+ α h +n(t) ) 2 + n 2 (t) − − − − − − − − − − − − − − − − − − − √ ( α
    h +n(t) ) 2 + n 2 (t) − − − − − − − − − − − − − − − − √ (4) View Source The output
    envelope is a random process subject to a generalized Rayleigh distribution. Then
    the bit error rate of the system V e = 1 2 ( V e1 + V e0 )= 1 2 [1−U( α+ α h δ
    n , b δ n )+U( α h δ n , b δ n )] (5) View Source Where: b is the judgment threshold
    of the system; δ n is the mean square error of noise; V e1 is the error probability
    when “1'''' occurs; V e0 is the error probability when “0'''' occurs; U(α,β) is
    a function of MarcumU, which is defined by U(α,β)= ∫ β ∞ t I 0 (αt)exp(− t 2 +
    α 2 2 )dt (6) View Source Where, I 0 is the first kind of zero-order modified
    Bessel function. After the normalized threshold, the system bit error rate is
    rewritten as: V e = 1 2 [1−U( r g + r h , b 0 )+U( r 1 , b 0 )]= 1 2 [1−U( r s
    (1+ JSR − − − − √ ), b 0 )+U( r s JSR − − − − √ , b 0 )] (7) View Source JSR=
    α 2 h α 2 is the signal to noise ratio of the receiver input segment [10]. When
    the detector takes the normalized optimal threshold b 0 = α δ n = 1 2r ,U function,
    it can be approximated by the error function, namely: U(α,β)≈1− 1 2 erfc( α−β
    2 – √ ) (8) View Source At this time, bit error rate can be expressed as: V e
    = 1 2 ⎛ ⎝ ⎜ 1+ 1 2 erfc( r g 1+2 JSR √ 2 2 √ ) − 1 2 erfc( r g 2 JSR √ −1 2 2
    √ ) ⎞ ⎠ ⎟ = 1 4 ⎛ ⎝ ⎜ erfc( r g 1+2 JSR √ 2 2 √ )+ 1 2 erfc( r g 1−2 JSR √ 2 2
    √ ) ⎞ ⎠ ⎟ (9) View Source FIG. 4 shows the schematic diagram of bit interference.
    The original signal is “10100”. After bit interference, it was misjudged as “11101”.
    Fig. 4. Schematic diagram of bit interference Show All SECTION V. System Inspection
    The data transmission network is composed of six switches simulated by Mininet,
    and the top switch is set as the experimental network controller [11]. This structure
    is used to simulate the data transmission network of the Internet of Things. Start
    a controller on a physical computer with a network emulator. The simulation of
    6 switches and 5 PCS is realized by using Mininet simulation platform. Receive
    instructions from the network control program after the Mininet software has started.
    Three cryptographic transmission networks are tested, and three cryptographic
    transmission networks are tested (Table I). Table I. Packet loss rate of encrypted
    transmission network As can be seen from the test results in Table I, among the
    three cryptosystems proposed, packet loss probability in the transmission network
    is the smallest, and it is the most efficient cryptosystem in the transmission
    network [12]. It can be seen from the results of this experiment that the scheme
    proposed in this paper is quite good in data encryption performance and can well
    compensate for the high packet loss rate caused by the schemes proposed in literature
    5 and 6. Fig. 5. Experimental results of transmission network delay Show All As
    can be seen from the delay figure 5, the design method described in this paper
    has lower delay value, less fluctuation and more stability. The algorithm proposed
    in literature 5 and 6 has a very high delay value and a very high time delay peak,
    which indicates that the data transmission rate of the algorithm is very unstable
    and has great fluctuation. By extending the delay graph, it can be seen that the
    proposed method has good transmission performance. Through the packet loss rate
    test and the transmission network delay test, it can be seen that the proposed
    scheme has better data encryption performance, and the proposed scheme is more
    effective in practical application. SECTION VI. Conclusion The research and development
    of optical communication technology in the Internet of Things has important theoretical
    and practical value, which can effectively improve its efficiency in practical
    application and has important theoretical and practical significance. In the application
    layer, perception layer and network layer of the Internet of Things, optical communication
    technology is widely used, and can be applied in the water visible light communication
    technology to the ground and seabed information communication. A new data encryption
    technology for the Internet of Things is proposed, which is expected to enhance
    the information security of the Internet of Things and open up a new way for the
    development of the Internet of Things in the future. ACKNOWLEDGEMENTS This work
    was supported by the 2022 Tai''an City Science and Technology Innovation Development
    Project (Project No. 2022GX056) Authors Figures References Keywords Metrics More
    Like This Physical Layer Security Enhancement for Internet of Things in the Presence
    of Co-Channel Interference and Multiple Eavesdroppers IEEE Internet of Things
    Journal Published: 2019 Design and Performance Evaluation of Successive Interference
    Cancellation-Based Pure Aloha for Internet-of-Things Networks IEEE Internet of
    Things Journal Published: 2019 Show More IEEE Personal Account CHANGE USERNAME/PASSWORD
    Purchase Details PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS Profile Information
    COMMUNICATIONS PREFERENCES PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help?
    US & CANADA: +1 800 678 4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow
    About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination
    Policy | IEEE Ethics Reporting | Sitemap | IEEE Privacy Policy A not-for-profit
    organization, IEEE is the world''s largest technical professional organization
    dedicated to advancing technology for the benefit of humanity. © Copyright 2024
    IEEE - All rights reserved."'
  inline_citation: '>'
  journal: 2023 IEEE International Conference on Image Processing and Computer Applications,
    ICIPCA 2023
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: Research on Remote Farm Management System Based on Computer Internet of Things
    Data Set Information Photoelectric Communication
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors: []
  citation_count: '0'
  description: 'The proceedings contain 30 papers. The special focus in this conference
    is on Internet of Things and Connected Technologies. The topics include: M-Lens
    an IOT-Based Deep Learning Device; analysis of Electromagnetic Pollution in Buildings
    and Its Impact Specially on Human Health; ioT-Based Smart Notice Board & Class
    Schedule Notification System with Real-Time Classroom Environment Monitoring Facility
    for Educational Institutions; affordable Smart Kit for Coconut Farm Management
    Using IoT; machine Learning Based Model to Find Out Firewall Decisions Towards
    Improving Cyber Defence; two Fold Extended Residual Network Based Super Resolution
    for Potato Plant Leaf Disease Detection; Analyzing the Tweets of the Patients
    During the COVID-19 Pandemic Using Machine Learning Techniques; load Profile Oriented
    Balanced Cluster Assignment in 5G IoT Based Sensor Network; KnowSOntoWSR: Web
    Service Recommendation System Using Semantically Driven QoS Ontology-Based Knowledge-Centred
    Paradigm; assisted Living Robots: Discussion and Design of a Robot for Elder Care;
    secure Encryption Using Bit Shuffling; Predictability of Spells of Maximum Precipitation
    in the UP East Region with Antarctic Sea Ice Concentration Forcing; IoT-Based
    Real-Time Water Quality Monitoring System Using a RC Boat; tamil Language Automatic
    Speech Recognition Based on Integrated Feature Extraction and Hybrid Deep Learning
    Model; A Comprehensive Review of Conversational AI-Based Chatbots: Types, Applications,
    and Future Trends; blockchain Based Tourism Recommender; quantum-defended Digital
    Signature on Lattice for IoT-enabled Systems; Securing Digital Ownership Using
    Non-Fungible Tokens(NFTs), an Application of BlockChain Technology; battery Optimization
    of Electric Vehicles Using Battery Management System; Electronic Voting Machine
    as a Service on the Cloud—Azure for EVM (A4EVM); localization Technologies; ioT-Based
    Storage Management System.'
  doi: null
  full_citation: '>'
  full_text: '>'
  inline_citation: '>'
  journal: Lecture Notes in Networks and Systems
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: 7th International Conference on Internet of Things and Connected Technologies,
    ICIoTCT 2022
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Nigade A.S.
  - Shelke M.
  - Gavhane S.
  - Mashale S.
  - Ratnaparkhi B.
  citation_count: '0'
  description: Cattle Monitoring is core part of health detection issues. The sensor
    system, which is based on an accelerometer, provides activity profiles that are
    used in commercial farms to identify behaviors such as the time spent on rumination.
    Obtaining this information is crucial for improving farm management decisions.
    The main aim of the project is to design a system capable of monitoring and analyzing
    the health of animals and wirelessly storing the data. When cattle become ill,
    they often have a high fever or ruminate less. This system will help to monitor
    and analyse health related issues of cattle as well as reduce the work of farmers.
    With the help of machine learning model development, the system classifies behavioral
    status, such as rumination, using data generated by the accelerometer module.
  doi: 10.1109/I2CT57861.2023.10126158
  full_citation: '>'
  full_text: '>

    "IEEE.org IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account
    Personal Sign In Browse My Settings Help Access provided by: University of Nebraska
    - Lincoln Sign Out All Books Conferences Courses Journals & Magazines Standards
    Authors Citations ADVANCED SEARCH Conferences >2023 IEEE 8th International C...
    Review Paper on IOT based Cattle Health Monitoring System Publisher: IEEE Cite
    This PDF Akshay Suresh Nigade; Madhuri Shelke; Swapnil Gavhane; Shweta Mashale;
    Bhakti Ratnaparkhi All Authors 1 Cites in Paper 116 Full Text Views Abstract Document
    Sections I. Introduction II. Literature Review III. Comparative Study IV. Proposed
    System V. Conclusion Authors References Citations Keywords Metrics Abstract: Cattle
    Monitoring is core part of health detection issues. The sensor system, which is
    based on an accelerometer, provides activity profiles that are used in commercial
    farms to identify behaviors such as the time spent on rumination. Obtaining this
    information is crucial for improving farm management decisions. The main aim of
    the project is to design a system capable of monitoring and analyzing the health
    of animals and wirelessly storing the data. When cattle become ill, they often
    have a high fever or ruminate less. This system will help to monitor and analyse
    health related issues of cattle as well as reduce the work of farmers. With the
    help of machine learning model development, the system classifies behavioral status,
    such as rumination, using data generated by the accelerometer module. Published
    in: 2023 IEEE 8th International Conference for Convergence in Technology (I2CT)
    Date of Conference: 07-09 April 2023 Date Added to IEEE Xplore: 23 May 2023 ISBN
    Information: DOI: 10.1109/I2CT57861.2023.10126158 Publisher: IEEE Conference Location:
    Lonavla, India SECTION I. Introduction Cattle farming automation is considered
    vital for staying competitive in the market. Therefore, there is a need for a
    comprehensive monitoring system that can collect and analyze both static and dynamic
    data related to rumination, disease, and other important aspects of cattle farming.
    According to the prior art it is observed that the present cattle monitoring devices
    only focus on digital record keeping, heat detection or temperature of the cattle.
    To address these limitations, we propose a sensor-based system that combines multiple
    features such as health monitoring, behavioral classification, and others in a
    single, easyto-use package. Our proposed system is a sensor-based module that
    uses a collarbased accelerometer to monitor and analyze the health of animals
    and wirelessly store the data. The proposed system will improve the health of
    the animals and increase production by monitoring the behavior of cattle using
    sensors. SECTION II. Literature Review Nowadays, cattle farming is a profitable
    sector in the growth of our nation. However, the well-being of animals is essential
    for cattle farms. In cattle farming, farmers are facing many issues related to
    cattle health and cattle monitoring. Common diseases that affect cattle include
    bovine respiratory disease, mastitis, and lameness. These diseases can have a
    significant impact on the health and productivity of the herd. Daily monitoring
    of animal health conditions is challenging, especially on large farms where farmers
    do not have the time to observe every animal and detect early symptoms of disease.
    Currently, farmers rely on traditional methods such as visual inspections, temperature
    measurements, and manual data collection to monitor the health of their cattle.
    These methods are time-consuming, labor-intensive and often provide limited information.
    To address these limitations, IoT-enabled wearable sensors are becoming increasingly
    popular in cattle health monitoring. These sensors can provide real-time monitoring
    of vital signs such as body temperature, activity levels, and patterns of rumination.
    This allows for early detection of disease, improved management decisions, and
    ultimately better care for the animals. To keep farmers informed about the status
    of each cow, IoT-enabled wearable sensors can help. The proposed system combines
    multiple features, including health monitoring and behavioral classification,
    into a single, easy-to-use package. This allows farmers to monitor the health
    and behavior of their cattle in real-time, and make more informed decisions about
    their care and management A. Cow behaviour pattern recognition using a three-dimensional
    accelerometer and support vector machines [2] In this paper, the author carried
    out a study on monitoring the behavior of cattle using a three-dimensional accelerometer
    and support vector machines (SVMs). The previous systems monitor only one or two
    behaviors at a time, but in this project, the authors aim to monitor a total of
    nine behaviors of a cattle, including lying, ruminating, feeding, and standing.
    Accelerometers make it easy to identify different behavioral patterns in dairy
    cows, and the authors found that SVMs were useful in classifying the measured
    behavioral patterns. 1) Techniues Used The proposed model developed, collects
    data from an accelerometer, and then the data is preprocessed, and scaled. The
    dataset is divided into training and testing sets, with 70% of the data used for
    training and 30% for testing. The authors used a special kernel function to convert
    the measured input into a higher-dimensional feature space, which is used to classify
    the data with the help of a hyperplane. 2) Result and Discussion The results of
    the study indicate that the proposed approach has an accuracy of 80 percent for
    all classified behavior types. The study was conducted on a dataset of 100 dairy
    cows from a farm located in the Netherlands and was collected over a period of
    two months. The authors also compared their results with other existing systems
    and found that the proposed system outperforms them. They also suggested that
    to improve the results, the quality of acceleration data needs to be considered
    in future work. B. Classification of ingestive-related cow behaviours using RumiWatch
    halter and neck-mounted accelerometers [3] In this article, authors developed
    a study on the design and classification of feeding and rumination in dairy cattle.
    They used a decision tree (DT) algorithm and compared it with a support vector
    machine (SVM) algorithm and RumiWatch noseband sensor approach to evaluate the
    effect of decreasing accuracy of algorithms. They used RumiWatch noseband holster
    as a gauge for automated ruminant health monitoring. The data set used contains
    observations of feeding and rumination behaviors, and the results show that the
    SVM algorithm achieved 93% accuracy in classifying these behaviors. The authors
    also discussed the limitations of the RumiWatch noseband sensor such as its battery
    life and memory capacity. 1) Techniues Used Proposed approach using accelerometer
    technology to study the effects on feeding and rumination behaviour can gather
    significant information about the health of dairy cows. Proposed approach uses
    the RumiWatch noseband holster as a gauge for automated ruminant health monitoring.
    The data set used contains DT and SVM algorithm attributes to compare the sensors
    with visual perception. 2) Result and Discussion In this paper, they have used
    the SVM algorithm which achieved 93% accuracy in classifying feeding and rumination
    behaviors. And, they have discussed the limitations of the RumiWatch noseband
    sensor such as its battery life and memory capacity. They also mentioned the given
    technique and some algorithms and their implementations, and additional methods
    used to monitor behaviours. C. Classification of behaviour in housed dairy cows
    using an accelerometer-based activity monitoring system [4] In this paper, authors
    developed research on design and real time classification that can be automatically
    monitored and classified. In this study, the authors used an accelerometer-based
    activity monitoring system for the classification of behaviour in housed dairy
    cows. In recent studies pedometers and accelerometers are used to categorize behavioural
    activity in dairy cows, such approach does not include biologically significant
    behaviours such as eating, lying down, or standing, as well as it is often not
    possible to accurately distinguish the transition events between standing and
    laying. 1) Techniues Used In this study, the authors used 3-axis accelerometer
    data from sensors mounted on dairy cows to classify significant behaviours such
    as standing, lying, eating and rumination. They developed a simple DT algorithm
    which accurately uses the 3-axis accelerometer data from mounted sensors on dairy
    farms. Accelerometer data ,SVM,and a tree algorithm that classifies different
    cow behaviours . SVM and HMM have high computational cost, implementation of such
    algorithms in biotelemetry devices are impractical. 2) Result and Discussion Important
    activities of behaviour can be classified by using the DT algorithm which is applied
    to collected data from tri-axial accelerometer . To automatically detect health
    of cow the algorithm can be behavioural monitoring system part. In this paper,
    they proposed an accelerometer using the SVM algorithm with the amount of collected
    data that allowed for an effective collar. Authors said that it is monitored between
    milking time, there are no observations recorded. D. A Comparison of Autoencoder
    and Statistical Features for Cattle Behavior Classification [5] The precision
    management of cattle development of behaviour models used. Monitoring animals
    and tailoring management which are included in precision management practice to
    separate accordingly. In this paper, For cattle behaviour classification to learn
    unsupervised feature representation using stacked autoencoder. 1) Techniues Used
    In this proposed model,For cattle behaviour classification they investigated the
    effectiveness of autoencoder features, and compared them which are used by behaviour
    classifiers.Autoencoder features performs good, at a similar level. 2) Result
    and Discussion Structured data successfully represented by stacked autoencoders
    including speech, lang and DN are not used to model the images, motion. Therefore,To
    learn feature representation using stacked autoencoders for cattle behaviour classification.
    The main reason for using autoencoders is to remove the need for manual feature
    design and instead produce a common representation of the data. The result said
    that the autoencoders are capable of creating the comparable results. E. Behavior
    classification of cows fitted with motion collars: Decomposing multi-class classification
    into a set of binary problems [6] Precision management system to efficiently monitor
    the animals. The main goal of precision strategies is make sure that resources
    which are are allocated efficiently. Analytical models are key components of these
    sensor-based systems which automatically convert sensor data into different behavioural
    categories. In this paper, the authors proposed a new method for multi-class behaviour
    modelling based on the one-vs-all framework. The main objective of taking this
    framework is to train binary classifier for every behaviour separately. 1) Techniues
    Used In this paper, Based on the ‘one vsall’ framework a new approach to behaviour
    classification was formulated. Five classes of behaviour walk, rest,grazing ,rumination
    are classified. Each of the five behaviours using training and validation binary
    time series classifiers were tailored to each model including 9 window sizes,
    5 classifiers and 84 candidate input features. 2) Result and Discussion The proposed
    model classifies the grazing, resting, ruminating behaviour with high classification
    accuracy F-score (0.98,0.87,0.85), and walking (lower accuracy 0.73). The model
    gives a five behaviour Separately, this creates diversity in the behaviour model.
    SECTION III. Comparative Study It is important to note that the results of this
    study are based on a specific dataset and specific behaviors that were being classified.
    The performance of the SVM algorithm may vary when applied to different datasets
    or when classifying different behaviors. Additionally, while the SVM algorithm
    performed well in this study, it may not be the best option for all situations
    and it is important to evaluate and compare the performance of different algorithms
    in specific contexts. SECTION IV. Proposed System In this article, we have proposed
    a system for monitoring and classifying the behaviors of cattle using an accelerometer-based
    activity monitoring system. The proposed system utilizes the support vector machine
    (SVM) algorithm for the analysis of the different behaviors of the cattle. SVM
    is a suitable algorithm for the analysis of the different behaviors of the cattle
    as it provides a clear margin of separation and performs well with datasets that
    have many features. The proposed system is designed to classify 3 behaviors of
    cattle, namely lying, ruminating, and feeding. The data for this classification
    will be collected using a three-dimensional accelerometer sensor, such as the
    MPU6050 sensor. The collected data will be pre-processed, scaled, and divided
    into training and testing sets. The SVM algorithm will be trained on the training
    data and tested on the testing data. To improve the accuracy of the proposed system,
    we will also implement techniques such as feature selection, data augmentation,
    and ensemble learning. Feature selection techniques will be used to select the
    most important features from the collected data, while data augmentation techniques
    will be used to increase the size of the dataset. Ensemble learning techniques
    will be used to combine multiple classifiers to improve the overall performance
    of the proposed system. In addition to this, we will also consider the quality
    of the acceleration data and the limitations of the sensors such as battery life
    and memory capacity. With these considerations, we expect the proposed system
    to achieve an accuracy of at least 90% in classifying the behaviors of cattle.
    SECTION V. Conclusion The key point of these study is to develop an efficient
    and accurate machine learning model for the classification of cow behavior using
    accelerometer data. The results of the study have shown that the Support Vector
    Machine (SVM) algorithm is the most suitable for this task, achieving an accuracy
    of 90% when applied to data from a MPU6050 sensor. This proposed system can assist
    farmers in monitoring the health of their cattle, leading to increased milk yields
    and improved efficiency in the farming industry. The system also allows for the
    storage of rumination data on the cloud, and the application of machine learning
    models to analyze the data and identify any potential health issues in a timely
    manner. Overall, the proposed system has the potential to significantly improve
    the precision management of cattle and assist farmers in achieving sustainable
    success in the industry. TABLE I: Published articles Comparison table on cattle
    behaviour classification Authors References Citations Keywords Metrics More Like
    This Prediction of Loan Pricing on the basis of Area Location using K-Nearest
    Neighbour and Support Vector Machine Learning Algorithms 2023 International Conference
    on Sustainable Communication Networks and Application (ICSCNA) Published: 2023
    A Novel Framework of Network Packet Loss Detection Using Random Forest Algorithm
    over Support Vector Machine Learning Algorithms to Improve Accuracy 2022 International
    Conference on Knowledge Engineering and Communication Systems (ICKES) Published:
    2022 Show More IEEE Personal Account CHANGE USERNAME/PASSWORD Purchase Details
    PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS Profile Information COMMUNICATIONS PREFERENCES
    PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help? US & CANADA: +1 800 678
    4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow About IEEE Xplore | Contact
    Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics
    Reporting | Sitemap | IEEE Privacy Policy A not-for-profit organization, IEEE
    is the world''s largest technical professional organization dedicated to advancing
    technology for the benefit of humanity. © Copyright 2024 IEEE - All rights reserved."'
  inline_citation: '>'
  journal: 2023 IEEE 8th International Conference for Convergence in Technology, I2CT
    2023
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: Review Paper on IOT based Cattle Health Monitoring System
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Akansah E.
  - Senoo E.E.K.
  - Mendonça I.
  - Aritsugi M.
  citation_count: '2'
  description: With the advancements in the fields of Artificial Intelligence (AI)
    and Internet of Things (IoT) technologies, Smart Agriculture Systems (SAS) have
    seen considerable research into innovations such as early disease detection, irrigation
    control techniques and farm management systems. There have also been significant
    proprietary interests from organizations, that develop solutions with high-end
    hardware and software systems, which require a capital investment to deploy a
    holistic solution. In this research, we propose a low-cost, comprehensive system
    for monitoring and reporting key metrics such as ambient and soil conditions necessary
    for proper crop growth. In order to test the feasibility and efficacy of our system,
    we designed and deployed weather-proof IoT-based wireless sensor nodes, with a
    command-and-control edge computing module and a pump control module on a family-owned
    smallholder rice paddy fields in Japan. We explain our methodology, experiences
    and challenges, which may help explain some of the hindrances to the wide-scale
    adoption of SAS.
  doi: 10.1145/3567445.3569165
  full_citation: '>'
  full_text: '>

    "This website uses cookies We occasionally run membership recruitment campaigns
    on social media channels and use cookies to track post-clicks. We also share information
    about your use of our site with our social media, advertising and analytics partners
    who may combine it with other information that you’ve provided to them or that
    they’ve collected from your use of their services. Use the check boxes below to
    choose the types of cookies you consent to have stored on your device. Use necessary
    cookies only Allow selected cookies Allow all cookies Necessary Preferences Statistics
    Marketing Show details       skip to main content University of Nebraska Lincoln
    Browse About Sign in Register Journals Magazines Proceedings Books SIGs Conferences
    People Search ACM Digital Library Advanced Search Conference Proceedings Upcoming
    Events Authors Affiliations Award Winners HomeConferencesIOTProceedingsIoT ''22Smart
    agricultural monitoring system: a practical design approach POSTER SHARE ON Smart
    agricultural monitoring system: a practical design approach Authors: Ebenezer
    Akansah , Elisha Elikem Kofi Senoo , Israel Mendonça , + 1 Authors Info & Claims
    IoT ''22: Proceedings of the 12th International Conference on the Internet of
    ThingsNovember 2022Pages 139–142https://doi.org/10.1145/3567445.3569165 Published:05
    January 2023Publication History 3 citation 171 Downloads View all FormatsPDF IoT
    ''22: Proceedings of the 12th International Conference on the Internet of Things
    Smart agricultural monitoring system: a practical design approach Pages 139–142
    Previous Next ABSTRACT References Cited By Index Terms Recommendations Comments
    ABSTRACT With the advancements in the fields of Artificial Intelligence (AI) and
    Internet of Things (IoT) technologies, Smart Agriculture Systems (SAS) have seen
    considerable research into innovations such as early disease detection, irrigation
    control techniques and farm management systems. There have also been significant
    proprietary interests from organizations, that develop solutions with high-end
    hardware and software systems, which require a capital investment to deploy a
    holistic solution. In this research, we propose a low-cost, comprehensive system
    for monitoring and reporting key metrics such as ambient and soil conditions necessary
    for proper crop growth. In order to test the feasibility and efficacy of our system,
    we designed and deployed weather-proof IoT-based wireless sensor nodes, with a
    command-and-control edge computing module and a pump control module on a family-owned
    smallholder rice paddy fields in Japan. We explain our methodology, experiences
    and challenges, which may help explain some of the hindrances to the wide-scale
    adoption of SAS. References Muhammad Ayaz, Mohammad Ammad-Uddin, Zubair Sharif,
    Ali Mansour, and El Hadi M. Aggoune. 2019. Internet-of-Things (IoT)-based smart
    agriculture: Toward making the fields talk. IEEE Access 7(2019), 129551–129583.
    https://doi.org/10.1109/ACCESS.2019.2932609 Olakunle Elijah, Tharek Abdul Rahman,
    Igbafe Orikumhi, Chee Yen Leow, and Mhd Nour Hindia. 2018. An Overview of Internet
    of Things (IoT) and Data Analytics in Agriculture: Benefits and Challenges. IEEE
    Internet of Things Journal 5 (10 2018), 3758–3773. Issue 5. https://doi.org/10.1109/JIOT.2018.2844296
    Muhammad Shoaib Farooq, Shamyla Riaz, Adnan Abid, Tariq Umer, and Yousaf Bin Zikria.
    2020. Role of iot technology in agriculture: A systematic literature review. Electronics
    (Switzerland) 9 (2020). Issue 2. https://doi.org/10.3390/electronics9020319 Show
    All References Cited By View all Mendonca Dos Santos I, Chong Vun Yiing A and
    Aritsugi M. Not Seeing is a Flower: Experiences and Lessons Learned from Making
    IoT Platforms for Small-Scale Farms in Japan. Proceedings of the 13th International
    Conference on the Internet of Things. (146-149). https://doi.org/10.1145/3627050.3630724
    Senoo E, Akansah E, Mendonça I and Aritsugi M. (2023). Monitoring and Control
    Framework for IoT, Implemented for Smart Agriculture. Sensors. 10.3390/s23052714.
    23:5. (2714). https://www.mdpi.com/1424-8220/23/5/2714 Senoo E, Akansah E, Mendonca
    I and Aritsugi M. (2022). Implementing SOLID principles for IoT Arduino sensor
    code 2022 10th International Japan-Africa Conference on Electronics, Communications,
    and Computations (JAC-ECC). 10.1109/JAC-ECC56395.2022.10043950. 978-1-6654-6463-5.
    (21-26). https://ieeexplore.ieee.org/document/10043950/ Index Terms Smart agricultural
    monitoring system: a practical design approach Applied computing Computers in
    other domains Agriculture Computer systems organization Embedded and cyber-physical
    systems Embedded systems Sensor networks Hardware Communication hardware, interfaces
    and storage Sensor applications and deployments Recommendations An IoT proposal
    for monitoring vineyards called SEnviro for agriculture IOT ''18: Proceedings
    of the 8th International Conference on the Internet of Things During the last
    decade, a massive deployment of sensing devices using the Internet protocol to
    transfer data, called the Internet of Things, has penetrated considerably in all
    areas; the field of agriculture is not an exception. This fact has led to a ...
    Read More Internet of things for smart agriculture: Technologies, practices and
    future direction The advent of Internet of Things (IoT) has shown a new direction
    of innovative research in agricultural domain. Being at nascent stage, IoT needs
    to be widely experimented so as to get widely applied in various agricultural
    applications. In this paper, I ... Read More FAO’s AVHRR-based Agricultural Stress
    Index System ASIS for global drought monitoring Agricultural production is highly
    dependent on climate variability in many parts of the world. In particular, drought
    may severely reduce crop yields, potentially affecting food availability at local,
    regional, and global scales. The Food and ... Read More Comments 8 References
    View Table Of Contents Footer Categories Journals Magazines Books Proceedings
    SIGs Conferences Collections People About About ACM Digital Library ACM Digital
    Library Board Subscription Information Author Guidelines Using ACM Digital Library
    All Holdings within the ACM Digital Library ACM Computing Classification System
    Digital Library Accessibility Join Join ACM Join SIGs Subscribe to Publications
    Institutions and Libraries Connect Contact Facebook Twitter Linkedin Feedback
    Bug Report The ACM Digital Library is published by the Association for Computing
    Machinery. Copyright © 2024 ACM, Inc. Terms of Usage Privacy Policy Code of Ethics"'
  inline_citation: '>'
  journal: ACM International Conference Proceeding Series
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: 'Smart agricultural monitoring system: a practical design approach'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Rajakumar G.
  - Jenifer G.G.
  - Kumar T.A.
  - Samuel T.S.A.
  citation_count: '2'
  description: In the past, chicken meat was very negatively viewed by people. Now,
    however, very highly nutritious chicken meat is consumed by people from all over
    the world. Environmental parameters such as temperature, humidity, and nutrition
    are very important in chicken growth, so society should grow and monitor this
    grass at good conditions. The automatic monitoring system is created to overcome
    several issues that may arise on the chicken farm. The low-cost GSM technology
    is also used to monitor the system and communicate real-time information back
    to the researcher. Changes in the environment affect the egg production and feed
    consumption of the bird. Thus, the PEST system's major function is to supervise
    and manage the environmental conditions such as heat, humidity, oxygen, methane,
    and water that exist on the poultry farm. If any changes have occurred in the
    poultry farms' environmental condition, the system sends the relevant information
    to a mobile device like phones through telephone lines, which reduces the human
    effort and time required. The interactive device has been created using the Arduino
    Uno microcontroller and various sensors, such as temperature, humidity, gas, and
    water level sensors. As this system, the design takes on a very efficient way
    to farm poultry that will result in an increase in production and profit. It is
    high time to start thinking about solar technologies that can generate electricity.
    Although this technology is made for the household, this has been successfully
    used in commercial farms for the energy saving of batteries and the opportunity
    to sell the power back to the grid.
  doi: 10.1002/9781119821878.ch10
  full_citation: '>'
  full_text: '>

    "UNCL: University Of Nebraska - Linc Acquisitions Accounting Search within Login
    / Register Hybrid Intelligent Approaches for Smart Energy: Practical Applications
    Chapter 10 Design of an Energy Efficient IoT System for Poultry Farm Management
    G. Rajakumar,  G. Gnana Jenifer,  T. Ananth Kumar,  T. S. Arun Samuel Book Editor(s):A.
    John,  Senthil Kumar Mohan,  Sanjeevikumar Padmanaban,  Yasir Hamid First published:
    28 September 2022 https://doi.org/10.1002/9781119821878.ch10 PDF TOOLS SHARE Summary
    In the past, chicken meat was very negatively viewed by people. Now, however,
    very highly nutritious chicken meat is consumed by people from all over the world.
    Environmental parameters such as temperature, humidity, and nutrition are very
    important in chicken growth, so society should grow and monitor this grass at
    good conditions. The automatic monitoring system is created to overcome several
    issues that may arise on the chicken farm. The low-cost GSM technology is also
    used to monitor the system and communicate real-time information back to the researcher.
    Changes in the environment affect the egg production and feed consumption of the
    bird. Thus, the PEST system''s major function is to supervise and manage the environmental
    conditions such as heat, humidity, oxygen, methane, and water that exist on the
    poultry farm. If any changes have occurred in the poultry farms’ environmental
    condition, the system sends the relevant information to a mobile device like phones
    through telephone lines, which reduces the human effort and time required. The
    interactive device has been created using the Arduino Uno microcontroller and
    various sensors, such as temperature, humidity, gas, and water level sensors.
    As this system, the design takes on a very efficient way to farm poultry that
    will result in an increase in production and profit. It is high time to start
    thinking about solar technologies that can generate electricity. Although this
    technology is made for the household, this has been successfully used in commercial
    farms for the energy saving of batteries and the opportunity to sell the power
    back to the grid. References Hybrid Intelligent Approaches for Smart Energy: Practical
    Applications References Related Information Recommended Radio Access Network Architecture
    Fabio Longoni,  Atte Länsisalmi,  Antti Toskala WCDMA for UMTS: HSPA Evolution
    and LTE, [1] Mobility Management LTE, LTE‐Advanced and WiMAX: Towards IMT‐Advanced
    Networks, [1] General Packet Radio Service (GPRS) Christian Bettstetter,  Christian
    Hartmann Wiley Encyclopedia of Telecommunications, [1] GSM System Mobile Radio
    Networks: Networking and Protocols, [1] UMTS Network Infrastructure Antonella
    Napolitano,  Andrea Calvi,  Ermanno Berruto UMTS: Mobile Communications for the
    Future, [1] Additional links ABOUT WILEY ONLINE LIBRARY Privacy Policy Terms of
    Use About Cookies Manage Cookies Accessibility Wiley Research DE&I Statement and
    Publishing Policies Developing World Access HELP & SUPPORT Contact Us Training
    and Support DMCA & Reporting Piracy OPPORTUNITIES Subscription Agents Advertisers
    & Corporate Partners CONNECT WITH WILEY The Wiley Network Wiley Press Room Copyright
    © 1999-2024 John Wiley & Sons, Inc or related companies. All rights reserved,
    including rights for text and data mining and training of artificial technologies
    or similar technologies."'
  inline_citation: '>'
  journal: 'Hybrid Intelligent Approaches for Smart Energy: Practical Applications'
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: Design of an energy efficient IoT system for poultry farm management
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Rajakumar G.
  - Narayanan K.L.
  - Krishnan R.S.
  - Robinson Y.H.
  - Subramanian M.
  - Asirvatham M.
  citation_count: '1'
  description: In the past, chicken meat was very negatively viewed by people. Now,
    however, very high nutritious chicken meat is consumed by people from all over
    the world. Environmental parameters such as temperature, humidity, and nutrition
    are very important in chicken growth. So, society should grow and monitor this
    grass or this grass at good conditions. The automatic monitoring system is created
    to overcome several issues that may arise on the chicken farm. Changes in the
    environment affect the egg production and feed consumption of the bird. Thus,
    the PEST system's major function is to supervise and manage the environmental
    conditions such as heat, humidity, oxygen, methane, and water that exist on the
    poultry farm. If any changes have occurred in the poultry farms’ environmental
    condition, the system sends the relevant information to a mobile device like phones
    through telephone lines which reduces the human effort and time required. The
    interactive device has been created using the Arduino Uno microcontroller and
    various sensors, such as temperature, humidity, gas and water level sensors. As
    this system, the design takes on a very efficient way to farm poultry that will
    result in an increase in production and profit. It is high time to start thinking
    about solar technologies that can generate electricity. Although this technology
    is made for household, this has been successfully used in commercial farms for
    the energy saving of batteries and the opportunity to sell the power back to the
    grid.
  doi: 10.1007/978-981-19-2281-7_31
  full_citation: '>'
  full_text: '>

    "Your privacy, your choice We use essential cookies to make sure the site can
    function. We also use optional cookies for advertising, personalisation of content,
    usage analysis, and social media. By accepting optional cookies, you consent to
    the processing of your personal data - including transfers to third parties. Some
    third parties are outside of the European Economic Area, with varying standards
    of data protection. See our privacy policy for more information on the use of
    your personal data. Manage preferences for further information and to change your
    choices. Accept all cookies Skip to main content Advertisement Log in Find a journal
    Publish with us Track your research Search Cart Home Distributed Computing and
    Optimization Techniques Conference paper Design of an Efficient IoT System for
    Poultry Farm Management Conference paper First Online: 12 September 2022 pp 325–335
    Cite this conference paper Access provided by University of Nebraska-Lincoln Download
    book PDF Download book EPUB Distributed Computing and Optimization Techniques
    G. Rajakumar, K. Lakshmi Narayanan, R. Santhana Krishnan, Y. Harold Robinson,
    M. Subramanian & M. Asirvatham  Part of the book series: Lecture Notes in Electrical
    Engineering ((LNEE,volume 903)) 490 Accesses 1 Citations Abstract In the past,
    chicken meat was very negatively viewed by people. Now, however, very high nutritious
    chicken meat is consumed by people from all over the world. Environmental parameters
    such as temperature, humidity, and nutrition are very important in chicken growth.
    So, society should grow and monitor this grass or this grass at good conditions.
    The automatic monitoring system is created to overcome several issues that may
    arise on the chicken farm. Changes in the environment affect the egg production
    and feed consumption of the bird. Thus, the PEST system''s major function is to
    supervise and manage the environmental conditions such as heat, humidity, oxygen,
    methane, and water that exist on the poultry farm. If any changes have occurred
    in the poultry farms’ environmental condition, the system sends the relevant information
    to a mobile device like phones through telephone lines which reduces the human
    effort and time required. The interactive device has been created using the Arduino
    Uno microcontroller and various sensors, such as temperature, humidity, gas and
    water level sensors. As this system, the design takes on a very efficient way
    to farm poultry that will result in an increase in production and profit. It is
    high time to start thinking about solar technologies that can generate electricity.
    Although this technology is made for household, this has been successfully used
    in commercial farms for the energy saving of batteries and the opportunity to
    sell the power back to the grid. Keywords Arduino Global system for mobile Microcontroller
    Poultry farm Sensor Access provided by University of Nebraska-Lincoln. Download
    conference paper PDF Similar content being viewed by others Self-powered IoT-Based
    Design for Multi-purpose Smart Poultry Farm Chapter © 2021 Implementation of Smart
    Poultry Farm Using Internet of Things Chapter © 2023 An Intelligent Hydroponic
    Farm Monitoring System Using IoT Chapter © 2022 Keywords Arduino Global system
    for mobile Microcontroller Poultry farm Sensor 1 Introduction The word “poultry”
    is a word that refers to all domesticated birds; such as chicken, duck, emu, geese,
    ostrich, pigeon etc. The poultry industry is one of the fastest growing sectors
    of the livestock industry and contributes a significant growth in 2017 of food
    supplements. Changing food habits, globalization, industrialization, rising income,
    urbanization had created a favorable atmosphere for development of poultry sector.India
    is the third largest producer of eggs and ranks fifth in the world in respect
    of poultry meat production. Rearing and breeding of hens is called poultry farming
    [1]. In Poultry Farm environmental parameters like temperature, humidity and gas
    should be monitored and controlled. The environmental condition should be maintained
    at the threshold value [2]. These Environmental parameters will affect the growth
    of the chicken and they are harmful for chickens in digestive, respiratory and
    behavioral change [3]. The smart chicken farm monitoring involves many stages
    such as management [4], feeding, planting, quality assurance, environment control,
    and performance. Chicken meat demand grows continuously due to its price competitiveness,
    high availability and good taste. Various dishes use chicken meat as its component.
    In order to supply the chicken meat demand, poultry industry must increase their
    productivity. Bad environment quality of poultry house will reduce the bird food
    consumption; increase its stress and death rate. To meet the chicken meat demand
    in market, environmental parameters of the chicken farm need to be monitored and
    maintained in order to produce healthy and wealthy chicken. There is a high demand
    for agricultural products for food and for food processing industries. These include
    cassava farming, maize farming and poultry farming. In this research solutions
    are given for smart chicken farm monitoring which makes the chicken to grow healthier
    and wealthier. It maintains the farm record systematically and gives information
    in time. This model will also show the realistic execution of the apparatus which
    could be placed in the poultry farm for production and profit. Hence, a model
    has to be designed which will supervise and organize the environmental parameters
    such as temperature, humidity, gas level and water level in the poultry farm which
    will increase the growth of the chicken. Thereby, the layout of the project was
    presented and on which the work will be focused. This system reduces the human
    spares in the poultry farm which in turn reduces the cost of poultry management
    and labor cost. It also monitors the environmental parameters in the chicken farm
    and transmits the data in real time to increase chicken growth and productivity.
    To design an Arduino based elegant structure for chicken farm monitoring in which
    environmental parameters such as temperature, humidity, gas and water level are
    measured and controlled in real time and the measured parameters are transmitted
    via wireless technology. 2 Related Works In this segment, addressing the construction
    of the chicken farm and the investigation of other monitoring aspects. In creating
    the hybrid model for the management of mobile and wireless sensor networks of
    poultry farm, there is a system architecture implemented by Imtem et al. [5].
    The farm was built so that it could work while on the go. Overall, it''s important
    to think about humidity, temperature, light, and what is going on with our population
    density to understand how environmental factors can affect the system. Since the
    chicken are growing in the building, that reduces the dust and ammonia there.
    To prevent low growth rate, a humidity of 40% or lower must be preserved, and
    the temperature is at room temperature of 27 ℃ or below. Tadesse et al. [6] has
    suggested a few issues to consider, such as the effectiveness growth, the humidity
    should be regulated. The sum of heat, humidity, and ammonia, which are the three
    basic factors that birds are subjected to. If there are high levels of humidity
    and dust, then ammonia can be produced in the building. Once you''ve hit 30° or
    more, the humidity should be between 50 and 70%. Lu et al. [7] have clarified
    this monitoring method to be achieved with a heterogeneous wireless network of
    ultra-low power wireless sensor nodes. One way to appreciate the freshness of
    chicken is to use a technology that can sustain the temperature of them during
    the day. The R&D department comes up with a less-expensive version of it. Changed
    habits, grow exhausted and appears to grow older is a downside that makes our
    day-to-day lives more difficult. It also demonstrates that the node which is added
    to a chicken health monitoring system for detecting infected chicken with the
    highly pathogenic avian influenza (HPAI) viruses using clinical data at the early
    stage. Dong and Zhang [8] validated an online monitoring system to be used in
    a poultry farm based on ZigBee using a CC2430 controller integrated with different
    sensors such as temperature (TGS4161) and humidity (PWM4232), (SHT75). Besides,
    the internet of plants allows managers to track the temperature and light intensity
    of a farm from distant locations through web architecture. Ayaz et al. [9] has
    developed a technique to improve a chicken farm''s efficiency by being able to
    use a technology of wireless sensor networks. As part of a wireless sensor network
    and a fitness one, the chicken quality is considerably improved, which means these
    improvements are good for the health. This new device is based on a wireless sensor
    that can detect infected chickens. There are almost certain to boost overall demand,
    efficiency, and economy. The sensing techniques of wireless sensor networks and
    mobile networks are used to control and track poultry''s environmental parameters.
    Siwakorn Jindarat and Pongpisitt Wuttidittachotti [10] built a device and a smartphone
    that can help poultry farms management. This device tracks the surrounding parameters
    critical for the poultry''s welfare, such as humidity, temperature, and climate
    quality. Once in place, Poultry farms can be regulated by this device from anywhere,
    at any time. Wathes et al. [11] broke down four main pieces of knowledge for livestock
    farming. 1. Through monitoring, we can keep track of the poultry farm at a reasonable
    interval and provide information back to the Arduino controller. 2. A hypothesis,
    which is rather compact and which, through statistical analysis, can measure the
    dynamic responses of each process output to variation of the inputs with the option
    of estimating, in real time, the offset of error. 3. Each process performance
    objective value and trajectory need to be defined. 4. The actuator was created
    to communicate with the model based predictive controller. Liu et al. [12] have
    identified a fire alarm system in which a real time monitoring system detects
    the presence of smoke in the air due to a fire, and captures the images by a camera
    installed inside the room on the off chance that a fire happens. It will have
    to a device that collects information from some of its peripherals, then manually
    conveys it by telephone after which it would cancel that telephone call after
    it talks with another telephone. The feature of the system that is most apparent
    is the ability to send a fire, smoke, or gas alarm, when there is a detected.
    If a mobile phone came with a smartphone text messaging application installed,
    that application would be able to regularly alert the customer during the program
    and make them recognize when they been smoking in a public place. If a smartphone
    text messaging application came with a smartphone application installed, that
    application would be able to regularly notify the consumer on the program and
    make them recognize when they been smoking in a public place. For those purposes,
    it is safer for this device to be able to work without any false alarms reported
    to the firefighter. 3 Methodology The proposed system is formulated with the following
    modules; Monitoring module, Control module and Alert module. Monitoring module
    comprises of various sensors such as Temperature sensor (LM35), Humidity sensor
    (HR202), Gas sensor (MQ 7), Water level sensor, LDR sensor. Control module has
    Arduino UNO microcontroller; this microcontroller will monitor all the sensors
    based the input values given to them. GSM modem is used as a alert module, the
    GSM will send a message to the person who is in-charge to the poultry farm based
    upon the environmental parameters [13]. 3.1 Monitoring and Control Module The
    poultry farm is monitored with various sensors such as Temperature sensor (LM35),
    Humidity sensor (HR202), Gas sensor (MQ 7), Water level sensor, LDR sensor along
    with Arduino UNO. Sensor analog input is given to the Arduino UNO pins \\({A}_{0}\\)
    to \\({A}_{6}\\). A threshold value is set for all the sensor observation for
    controlling the environmental parameters. The microcontroller will send a message
    to GSM module if the value received from the sensor is above the threshold level,
    cooling fan, exhaust fan, water sprinkler and motor pump will be switched ON automatically
    depending on the inputs received from the sensors. 3.2 Monitoring Temperature
    The poultry farm temperature should be monitored so that the growth of the chicken
    will not be affected. Temperature sensor used in the proposed system is LM35.
    LM 35 measures the temperature more accurately compared to other sensor modules.
    The measuring temperature range is about “−55 to 150 ℃’’and consumes low power.
    The poultry farm should be monitored at room temperature of 28 ℃. Three conditions
    are explained to maintain temperature in poultry farm: 1. If the temperature is
    between 29 to 31 ℃, the cooling fan will be ON. Then the GSM modem will send a
    message “Cooling Fan is ON” to the person who is in-charge. 2. If temperature
    is above 31 ℃, the Water Sprinkler will start to spray the water, so that the
    farm will be cool. Then the GSM modem will send a message “Water Sprinkler ON”
    to the person who is in-charge. 3. If the temperature below 28 ℃, the GSM modem
    will send a message “Temperature is Low” to the person who is in-charge [14, 15].
    If the temperature is above the room temperature chickens will consume more feed
    to sustain the body temperature. On controlling the temperature, chicken will
    consume more feed and better growth is achieved. 3.3 Monitoring Humidity In poultry
    farm, the environmental parameter humidity is monitored. Humidity also affects
    the growth of the chicken. Humidity sensor used in the proposed system is HR202.
    This sensor detects the ambient humidity of the poultry farm. The operating voltage
    of this sensor is 5 V. The unit of Humidity is Relative Humidity (RH). The poultry
    farm should be monitored and controlled at 40 RH. If the humidity is above the
    threshold value (40 RH), the Exhaust fan will be ON. The GSM module will send
    a message “Fan ON” to the person who is in-charge. If the humidity is below the
    threshold value (40 RH), the Exhaust fan will be OFF. The GSM module will send
    a message “Fan OFF” to the person who is in-charge. 3.4 Monitoring Air Pollutants
    Another Environmental parameter in poultry farm which affects the growth of chicken
    is emission of harmful gases. The Ammonia will release excessively when a small
    amount of water falls in the fecal matter which release the excess amount of heat
    concentration. Ammonia concentration should not be over 25 ppm. In the proposed
    system, the gas content is monitored using gas sensor MQ 7. MQ 7 is highly sensitive
    to ammonia gas. This sensor detects the ammonia gas concentration anywhere from
    20 to 2000 ppm. The current consumption is about 150 mA. When the concentration
    of ammonia exceeds above 25 ppm, gas sensor will detect and the Exhaust fan will
    be switched ON automatically and a message “Exhaust Fan ON” will be sent to a
    mobile via GSM modem. Ammonia fumes can be reduced by increasing ventilation and
    replacing litter. As the gas concentration affects the growth of chicken, it has
    to be monitored and controlled. This is necessary to monitor and control the ammonia
    gas because the gas concentration affects the growth of the chicken and leads
    to increase in mortality rate. 3.5 Artificial Lightning One more important parameter
    has to be monitored in the poultry farm is artificial lightning. Chickens are
    often kept often in 6 h of darkness provided each night. During light, they consume
    more food. If the intensity goes below 7 lx, lights will be switched ON automatically
    and a message “Lights ON” will be sent to a mobile [15]. 3.6 Monitoring Water
    Level To monitor the water level, Magnetic float sensor is used. It is an Electromagnetic
    On/Off switch two metal contact. If magnet comes close to the contact, current
    passes into the circuit and the switch closes, motor is switched On. If magnet
    moves away from the contact, contact demagnetize and the switch opens and hence
    the motor is switched Off. In this, the float sensor is fixed in a tank at a certain
    level. If the water level goes below the threshold value, the magnet comes into
    contact, the current passes through it and the motor is switched On. The water
    is pumped into the tank. A message “Motor Pump On” will be sent to a mobile. This
    will reduce the human effort. 4 Results and Discussions 4.1 Hardware Module The
    hardware module consists of Arduino UNO Board, Temperature sensor, Humidity sensor,
    LDR sensor, Gas sensor, Floating switch, GSM modem, Cooling fan, Exhaust fan,
    Motor pump, White light, 4-channel relay and Power supply. Hardware setup is shown
    in Fig. 1. Fig. 1 Hardware module Full size image The hardware setup will be placed
    in the poultry house for achieving better growth of chicken. The poultry house
    will be automatically monitored and controlled which reduces the mortality rate
    and increases the production. The external 12 v power supply is specified to the
    Arduino microcontroller but it requires only 5 v power supply. 4.2 Monitoring
    Temperature Arduino microcontroller is programmed for three cases to monitor the
    temperature in the poultry farm for the better growth of chicken. In first case,
    if the temperature is between 29 to 31 ℃, the message “Temperature high Fan ON”
    will be sent to a mobile via GSM modem, which is depicted in Fig. 2. If the temperature
    is above 31 ℃, the water sprinkler will spray the water in the poultry farm to
    monitor the temperature and a message “Water spray on” will be sent to mobile.
    If the temperature is below 28 ℃, this will not affect the growth of the chicken
    and a message “Temperature low Fan off” will be sent to a mobile via GSM modem,
    which is depicted in Fig. 3. Fig. 2 a Temperatures between 29 to 31 ℃, and b Temperatures
    above 31 ℃ Full size image Fig. 3 a Temperatures below 28 ℃ and b Exhaust fan
    is switched ON Full size image The sensor will be operated on 5 v. The output
    of LM 35 sensor is given to the A0 pin of the Arduino board. The Arduino board
    is used to convey the output. 4.3 Monitoring Gas Content To test the gas content,
    the MQ7 gas sensor is used. Increase in ammonia content will damage the respiratory
    track of the chicken and decrease in feed intake. Increase in ammonia also leads
    to mortality of the chicken. Ammonia is released in hot environment. The Ammonia
    will release excessively when a small amount of water falls in the fecal matter
    which release the excess amount of heat concentration. Ammonia concentration should
    not be over 25 pp. If ammonia gas exceeds above 25 ppm, the exhaust fan will be
    switched on and a message “Exhaust fan on” will be sent to a mobile. Ammonia gas
    content; the MQ7 gas sensor is used to sense the presence of ammonia gases. It
    will be operated on only 5 v. The output of gas sensor is given to the A2 pin
    of the Arduino board. The Arduino board is used to convey the output. 4.4 Monitoring
    Humidity HR202 humidity sensor is used in the proposed system which detects the
    ambient humidity in the poultry farm. The sensor will be operated on only 5 v.
    The output of humidity sensor is given the A1 pin of the Arduino board. The Arduino
    board is used to convey the output. In the poultry farm humidity is monitored
    and controlled at 40 RH. If the humidity is above 40 RH, the Exhaust fan will
    be ON and a message “Exhaust fan on” will be sent to a mobile. 4.5 Artificial
    Lighting Chickens are often kept often in 6 h of darkness provided each night.
    During light, they consume more food. Light intensity should be kept below 10
    lx to inhibit bird activity and increase feed efficiency. For artificial lighting,
    LDR sensor and white light is used in this system. If the intensity goes below
    7 lx, lights will be switched on and a message “Lights on” will be sent to a mobile.
    LDR sensor operates only at 5 v. The output of LDR sensor is given to the A4 pin
    of the Arduino board. The Arduino board is used to convey the output. 4.6 Monitoring
    Water Level Water level in the water tank is monitored with a magnetic floating
    switch. The float sensor is fixed in a tank at a certain level. If the water level
    goes below the threshold value, the motor is switched on and the water is pumped
    into the tank and a message “Water Pump Motor On” will be sent to a mobile. This
    water level monitoring will reduce the human effort. Float sensor operates only
    at 5 v. The output of float sensor is given to the A5 pin of the Arduino board.
    The Arduino board is used to convey the output. 4.7 Comparative Analysis The Comparison
    of temperature, LDR count, power consumption, and humidity for different designs
    are given in Table 1. In proposed design, temperature, LDR count, power consumption,
    and humidity performances are improved than the conventional related works. When
    compared to the conventional designs, the proposed design worked effectively.
    Table 1 Comparison of temperature, LDR count, power consumption, and humidity
    for different designs Full size table 5 Conclusion The manager of the poultry
    farm can obtain information on time and handle the poultry farm effectively. Here
    is a thorough account on how temperatures, humidity, gas content, water level,
    and artificial lightning of an industrial poultry farm is monitored and controlled
    automatically and the circuit is planned accordingly. The Global System for Mobile
    (GSM) communications modem is used to send a message to the mobile phone based
    on the environmental parameters such as temperature, humidity, gas content, water
    level, artificial lightning in the poultry, and it is monitored so that the better
    growth of the chicken is achieved and the mortality rate is reduced. The efficient
    management of the poultry, as a result, would contribute to good production and
    income. The statistical parameters are checked in the model, and the predicted
    value is within the predicted value range. References Asfaw YT, Ameni G, Medhin
    G, Gumi B, Wieland B (2021) Poultry health services in Ethiopia: availability
    of diagnostic, clinical and vaccination Services. Poultry Sci 100:10102 Article   Google
    Scholar   Ananth Kumar T, John A, Ramesh Kumar C (2020) IoT technology and applications
    in Internet of Things, pp 43–62 Google Scholar   Rajakumar G, Kumar TA, Samuel
    TA, Kumaran EM (2018) IoT based milk monitoring system for detection of milk adulteration.
    Int J Pure Appl Math 118(9):21–32 Google Scholar   Zeng Z, Zeng F, Han X, Elkhouchlaa
    H, Yu Q, Lü E (2021) Real-time monitoring of environmental parameters in a commercial
    gestating sow house using a ZigBee-based wireless sensor network. Appl Sci 11(3):972
    Article   Google Scholar   Imtem N, Sirisamphanwong C, Ketjoy N (2021) Development
    and performance testing of the automated building energy management system with
    IoT (ABEMS-IoT) case study: big-scale automobile factory. In: IT convergence and
    security. Springer, Singapore, pp 97–107 Google Scholar   Tadesse T, Nichols MA,
    Hewett EW, Fisher KJ (2001) Relative humidity around the fruit influences the
    mineral composition and incidence of blossom-end rot in weet pepper fruit. J Hortic
    Sci Biotechnol 76(1):9–16 Article   Google Scholar   Lu J, Okada H, Itoh T, Maeda
    R, Harada T (2013) Towards the world smallest wireless sensor nodes with low power
    consumption for ‘Green’sensor networks. In: Sensors. IEEE, pp 1–4 Google Scholar   Dong
    F, Zhang N (2009) Wireless sensor networks applied on environmental monitoring
    in fowl farm. In: International conference on computer and computing technologies
    in agriculture. Springer, Heidelberg, pp 479–486 Google Scholar   Ayaz M, Ammad-Uddin
    M, Sharif Z, Mansour A, Aggoune EHM (2019) Internet-of-Things (IoT)-based smart
    agriculture: toward making the fields talk. IEEE Access 7:129551–129583 Article   Google
    Scholar   Jindarat S, Wuttidittachotti P (2013) Smart farm monitoring using raspberry
    pi and Arduino. In: International conference on computer, communication, and control
    technology. https://doi.org/10.1109/I4CT.2015.7219582 Wathes CM, Kristensen HH,
    Aerts JM, Berckmans D (2008) Is precision livestock farming an engineer’s daydream
    or nightmare, an animal’s friend or foe, and a farmer’s panacea or pitfall? Comput
    Electron Agric 64(1):2–10 Article   Google Scholar   Liu W, Wang X, Song Y, Cao
    R, Wang L, Yan Z, Shan G (2020) Self-powered forest fire alarm system based on
    impedance matching effect between triboelectric nanogenerator and thermosensitive
    sensor. Nano Energy 73:104843 Article   Google Scholar   Behr CJ, Kumar A, Hancke
    GP (2016) A smart helmet for air quality and hazardous event detection for the
    mining industry. In: 2016 IEEE International Conference on Industrial Technology
    (ICIT). IEEE, pp 2026–2031 Google Scholar   Jiang JA, Tseng CL, Lu FM, Yang EC,
    Wu ZS, Chen CP, Liao CS (2008) A GSM-based remote wireless automatic monitoring
    system for field information: a case study for ecological monitoring of the oriental
    fruit fly, Bactrocera dorsalis (Hendel). Comput Electron Agric 62(2):243–259 Article   Google
    Scholar   Varghese VT, Sasidhar K, Rekha P (2015) A status quo of WSN systems
    for agriculture. In: 2015 international conference on advances in computing, communications
    and informatics (ICACCI). IEEE, pp 1775–1781 Google Scholar   Download references
    Author information Authors and Affiliations Department of ECE, Francis Xavier
    Engineering College, Tirunelveli, India G. Rajakumar & K. Lakshmi Narayanan Department
    of ECE, SCAD College of Engineering and Technology, Tirunelveli, India R. Santhana
    Krishnan, M. Subramanian & M. Asirvatham School of Information Technology and
    Engineering, Vellore Institute of Technology, Vellore, India Y. Harold Robinson
    Corresponding author Correspondence to G. Rajakumar . Editor information Editors
    and Affiliations Electrical Engineering, Indian Institute of Technology Patna,
    Patna, Bihar, India Sudhan Majhi Telecommunication Engineering, University of
    Jaén, Jaén, Spain Rocío Pérez de Prado Electronics and Communication, SJB Institute
    of Technology, Bengaluru, Karnataka, India Chandrappa Dasanapura Nanjundaiah Rights
    and permissions Reprints and permissions Copyright information © 2022 The Author(s),
    under exclusive license to Springer Nature Singapore Pte Ltd. About this paper
    Cite this paper Rajakumar, G., Narayanan, K.L., Krishnan, R.S., Robinson, Y.H.,
    Subramanian, M., Asirvatham, M. (2022). Design of an Efficient IoT System for
    Poultry Farm Management. In: Majhi, S., Prado, R.P.d., Dasanapura Nanjundaiah,
    C. (eds) Distributed Computing and Optimization Techniques. Lecture Notes in Electrical
    Engineering, vol 903. Springer, Singapore. https://doi.org/10.1007/978-981-19-2281-7_31
    Download citation .RIS.ENW.BIB DOI https://doi.org/10.1007/978-981-19-2281-7_31
    Published 12 September 2022 Publisher Name Springer, Singapore Print ISBN 978-981-19-2280-0
    Online ISBN 978-981-19-2281-7 eBook Packages Computer Science Computer Science
    (R0) Share this paper Anyone you share the following link with will be able to
    read this content: Get shareable link Provided by the Springer Nature SharedIt
    content-sharing initiative Publish with us Policies and ethics Sections Figures
    References Abstract Introduction Related Works Methodology Results and Discussions
    Conclusion References Author information Editor information Rights and permissions
    Copyright information About this paper Publish with us Discover content Journals
    A-Z Books A-Z Publish with us Publish your research Open access publishing Products
    and services Our products Librarians Societies Partners and advertisers Our imprints
    Springer Nature Portfolio BMC Palgrave Macmillan Apress Your privacy choices/Manage
    cookies Your US state privacy rights Accessibility statement Terms and conditions
    Privacy policy Help and support 129.93.161.219 Big Ten Academic Alliance (BTAA)
    (3000133814) - University of Nebraska-Lincoln (3000134173) © 2024 Springer Nature"'
  inline_citation: '>'
  journal: Lecture Notes in Electrical Engineering
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: Design of an Efficient IoT System for Poultry Farm Management
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Mladenova T.
  - Valova I.
  - Valov N.
  citation_count: '1'
  description: The rapid development of technologies makes the automation and digitalization
    of farming a topic of high scientific interest. Solutions based on sensors, communication
    networks and actuators are offered and applied. The IoT and ICT play a key role
    in the remote monitoring and management of farms and pastures. This article discusses
    a system consisting of hardware and software parts that aim to monitor and manage
    a smart farm. The hardware part of the proposed system is briefly overviewed and
    a detailed explanation of the software is given. The structure of the database
    is considered in detail.
  doi: 10.1109/EEAE53789.2022.9831393
  full_citation: '>'
  full_text: '>

    "IEEE.org IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account
    Personal Sign In Browse My Settings Help Access provided by: University of Nebraska
    - Lincoln Sign Out All Books Conferences Courses Journals & Magazines Standards
    Authors Citations ADVANCED SEARCH Conferences >2022 8th International Confer...
    Design of a smart system for monitoring and management of pastures and meadows:
    The Relational Database Approach Publisher: IEEE Cite This PDF Tsvetelina Mladenova;
    Irena Valova; Nikolay Valov All Authors 1 Cites in Paper 80 Full Text Views Abstract
    Document Sections I. Introduction II. Conceptual model of the software system
    III. Software Requirements and Description IV. Database model design V. Database
    Structure for Data from Pastures and Meadows Show Full Outline Authors Figures
    References Citations Keywords Metrics Abstract: The rapid development of technologies
    makes the automation and digitalization of farming a topic of high scientific
    interest. Solutions based on sensors, communication networks and actuators are
    offered and applied. The IoT and ICT play a key role in the remote monitoring
    and management of farms and pastures. This article discusses a system consisting
    of hardware and software parts that aim to monitor and manage a smart farm. The
    hardware part of the proposed system is briefly overviewed and a detailed explanation
    of the software is given. The structure of the database is considered in detail.
    Published in: 2022 8th International Conference on Energy Efficiency and Agricultural
    Engineering (EE&AE) Date of Conference: 30 June 2022 - 02 July 2022 Date Added
    to IEEE Xplore: 21 July 2022 ISBN Information: DOI: 10.1109/EEAE53789.2022.9831393
    Publisher: IEEE Conference Location: Ruse, Bulgaria SECTION I. Introduction The
    extremely fast and efficient development of information and communication technologies
    and hardware devices in recent years allows the rise of advanced technological
    solutions in all areas, even in the field of agriculture. Solutions based on sensors,
    communication networks, and actuators in this sector are increasingly being offered.
    Evidence that Internet of Things (IoT) and Information and Computation Technologies
    (ICT) play a special role are the proposed solutions for remote monitoring of
    soil, plants, animals, and the environment, data collection and analysis to predict
    their status. This is a huge area of research that has been of great interest
    lately. Pastures are the natural environment for cows, which provides them with
    conditions for normal behavior [1]. There is enough free space for lying in stretched
    positions and for walking, thus reducing the chances of various diseases characteristic
    of animals kept indoors and in tight spaces [2]. The aim is to increase milk production
    and pastures may be insufficient to meet the nutritional needs of animals and
    make them starve and suffer. Indoors, the amount of food that animals receive
    can be regulated, while the use of natural pastures is not possible. In order
    to take advantage of animal husbandry in larger open and natural areas, the benefits
    of ICT and IoT in animal husbandry are increasingly being used. In [3] a thorough
    review of the IoT in animal husbandry and agriculture has been made and the first
    articles on this topic are in Scopus from 2010. The greatest research interest
    is in Asia, specifically in China [4], [5], Pakistan [6], and Ireland [7], [8].
    Аs it is written in [9] the use of sensors to monitor the condition of pastures
    is becoming a research interest after 2015. Most of the known publications according
    to [3] describe mainly IoT projects and conceptual models. Prototypes or completed
    and implemented projects are not considered and described. It is also not clear
    whether the measured data is stored, how and where. Are these data subsequently
    used for any analysis or to find relationships between the individual elements
    and measurements. Precision technologies are expanding with the capabilities of
    automation and big data. The main goal of precision animal husbandry is to generate
    accurate data using sensors, digital technologies and integrated databases to
    process them to create value for the farmer, the environment and animals [10].
    In general, many studies have been described on the quality of soil, pastures
    and meadows, as well as on the analysis of vegetation (grassland), but none of
    these studies describes how the measured data are stored. Studies of algorithms
    for predicting soil conditions with ready-made data sets are described. This article
    describes part of a cow breeding system that aims to monitor the condition of
    the soil, grassland and air where animals are raised and grazed. We offer a model
    for data storage in order to use them for analysis, research and forecasting /
    predicting the condition of pastures. SECTION II. Conceptual model of the software
    system From a hardware point of view, the entire system for smart livestock contains
    measuring stations that are attached to the necks of animals, measuring stations
    in the cowsheds and measuring stations located at different points on the pastures
    used by the cows (Fig. 1). This database is a part of the overall database, which
    will include data about the status of the animals on the farm and the conditions
    in their cowsheds. The data will be used by a web-based information system to
    support small and medium-sized farm owners in mountainous areas. Each measuring
    station is equipped with the following components: Soil sensor, measuring multiple
    indicators; Arduino microcontroller; Battery and photovoltaic; Air sensor – BME280;
    Module for RS485 communication. Fig. 1. Pasture Measuring Station Show All The
    measuring station which collects data from the air and soil is designed to run
    autonomously and is powered by a 12V battery with a 12Ah capacity. It can send
    data for more than ten days in the absence of sunlight. An 18W photovoltaic is
    used for recharging the battery and powering the sensors and controlled in the
    daylight part of the day. A 5V stabilized power supply is designed for the microcontroller,
    the communication modules, and the sensors. The sensor that analyzes the soil
    is powered directly from the battery and transmits the data via RS485. The communication
    module between the ESP32 microcontroller and the sensor converts the signal from
    RS485 to TTL Rx and Tx levels. Besides the soil parameters, the controller also
    measures air temperature, relative humidity, and atmospheric pressure via the
    BME280 sensor and the software emulation of the l2C interface. The existing WiFi
    interface of the controller can connect to AccessPoint nearby. For data transmission
    over long distances (more than 10km), a long range (LoRa) controller is used.
    The system can be further developed and improved such as adding a sensor for collecting
    rain information and solar radiation. SECTION III. Software Requirements and Description
    The functions of the software part of the system (Fig. 2) are as follows: Software
    module in every measuring station – it is responsible for collecting measurement
    through the sensors and sending the data to the server when it is requested; Software
    module for central management – it is executed on the server and is responsible
    for: Sending requests to the measuring stations; Receiving data from the measuring
    stations; Processing of the received sensor data and data normalization to a form,
    suitable for relational databases. The data sent from the measuring stations,
    the response, is in the form of an ordered hexadecimal string of bytes. The order
    of the response is important as it encodes different measurements from the sensor,
    e.g. the first two bytes can be the humidity measurement, the second two – salinity,
    etc. The hexadecimal response has to be processed in a way that only the needed
    bytes are stored in the database and the stored information should be meaningful
    – the data should be human-readable; Forming the SQL query that will insert the
    response; Constant control of the received data from the measuring stations to
    detect and respond to problems; Training machine learning models for further and
    more complex data analysis for prediction and classification. The usage of machine
    learning requires optimization regarding the reading of the data from the relational
    database; Forming and sending alerts and notifications when a change in the system
    is detected – out of order measuring stations, battery problems, bad condition
    of the pasture, etc.; Handling the business logic of the management module and
    the module for the user interface. User management module and user interface module
    – these two modules are responsible for: Organizing the access to different parts
    of the system; Visualizing the data in an appropriate tabular and graphical manner;
    Providing an interface for adding the measuring stations, temporary pausing a
    station, removing a station, reactivation of a station; Providing an interface
    for reconfiguration of a measuring station – e.g. changing the measurement interval.
    Fig. 2. System Description Show All SECTION IV. Database model design The possible
    methods for the storage of data are two – the standard and popular relational
    databases or the modern NoSQL databases. In the reviewed publications, the most
    commonly used method is the relational one in addition to the training of a machine
    learning model with some popular datasets containing images and measurements regarding
    the condition of the pastures. Given that the software system that is planned
    to be developed will have to collect, process, store and analyze the data and
    based on that will make predictions about the condition of the pasture, send alerts
    and notifications and visualize the state of the individual modules, the selected
    database method is the relational one. In order to select the data model, some
    factors should be taken into consideration, such as the specifics of the relational
    database, the specifics of the domain, the functions that will be implemented,
    the volume of the data, the sources of the data, etc. SECTION V. Database Structure
    for Data from Pastures and Meadows The data collected from pastures and meadows
    are characterized by a low rate of change which means that the sensors measuring
    and sending the data can do this in a longer time interval – ten to fifteen minutes.
    The structure of the data is known in advance and has the following measurements:
    Air temperature; Air humidity; Atmospheric pressure; Soil temperature; Soil humidity;
    pH of the soil; Electrical conductivity of the soil; Nitrogen content in the soil;
    Phosphorus content in the soil; Potassium content in the soil; Nitrogen content
    in the soil; Battery condition; Timestamp. Let us take into consideration the
    volume of the data coming from just one measuring station – the station sends
    data four times every hour. Therefore, for one station there will be approximately
    ninety-six rows of data per day or 34560 rows per year. The number of the measuring
    stations will depend on the size of the pasture which in result could increase
    or decrease the number of stored data. In any case, the number of insert operations
    will exceed the number of reading operations. There is quite extensive research
    [11], [12], [13] on the topic of query optimization and the best approach for
    the proposed system is to not store any indexes or primary keys for the tables,
    containing the measurements from the stations. Every insert with any index will
    result in re-indexing of the whole table which in turn will increase the time
    needed to store the data and ultimately will decrease the effectiveness of the
    system. However, the presence of a primary key or any other index will be beneficial
    for the operation select and more precise selection of a small number of rows.
    It should be noted that the select operation on the tables regarding the measurements
    will not be done on a small number of rows, e.g. two or three rows of data. When
    selecting measurement data, the selection will include big portions of the measurements
    as the data will be primarily needed for the training of the machine learning
    models. Furthermore, the selection of the data will be based on the criteria time
    and not on any index or primary key. The operations update and delete are not
    applicable in the tables storing the measurement data and optimizations in this
    area won’t be taken into consideration. The addition of new measuring stations
    will be done via the interface and will include a predefined list of possible
    station types – a station for soil measurement, a station for weather measurement,
    a station for battery measurement, etc. Therefore, the structure of the table
    will be known in advance and the tables for every new measuring station will be
    created dynamically. Every table will have the structure corresponding to the
    data coming from the station and that in result will mean there won’t be any null
    or empty cells. Fig. 3 Conceptual Data Model Show All Based on the functionalities
    described in this paper and the optimizations and factors regarding relational
    databases, we propose that every measuring station have its own table in the database
    opposing to one table, containing all of the measurements from all stations. The
    data will be distributed evenly across the tables and the operations insert and
    select will be performed in the most effective manner. Every measuring station
    will have an identifier that will be used in the name of the table. The data about
    the state of every station – battery life, etc. will be stored in one general
    table for all stations as this type of data will be sent in a much longer interval
    – once or twice a day. The data will be used for the management of the stations.
    Some tables containing information about the users of the system and information
    about the usage of the system are needed as well. The structure of these systems
    is straightforward. A table for the alerts and one for the notifications are also
    needed as these functionalities are important for the system. In order to store
    the data from a camera or a drone, the same type of database will be used. Even
    more, the database storing the sensor measurements and the database storing the
    images will be one. The principle is the same – every drone or camera will save
    its data in a separate table. The structure of every table, containing image data
    will be as follows: Timestamp of the image; Feature vector of the image; Identifier
    of the image (not an index or primary key); The identifier of the image will be
    a short string used to construct an URL to the physical copy of the image on the
    server. This index will eliminate the need for storing the whole URL, which in
    most cases will be longer than the identifier. It should be noted that even though
    the identifier will be unique it won’t be marked as such in order to prevent the
    creation of any indexes in the database. Its structure will ensure uniqueness
    – it will contain the identificatory of the table and the timestamp. The images
    from the cameras will be always from the same position and the ones coming from
    drones will also include some additional information about the location of the
    image. This additional information will also be stored in the database as it will
    be needed for the accurate analysis of the data. The storage of the whole image
    is unnecessary and is not needed for the training of the machine learning model.
    The training and the subsequent usage of the machine learning models will need
    only a fraction of the data – some of the most notable features of the image in
    the form of a feature vector constructed from the color characteristics of the
    image or some other method for feature extraction from an image. As seen in Fig.
    1 every measurement station consists of sensors and a camera. The identifier of
    the station and the identifier of the camera, both used for the naming of the
    tables, are stored in an additional table which makes the relation between the
    two physical objects in order to analyze the data more accurate. With the relation
    between the camera and the sensors for the soil and the air, a more precise and
    clearer picture of the condition of the pasture and the meadow can be made. The
    conceptual database model is shown in Fig. 3. It should be noted that the model
    shown in Figure 3 is simplified and some of the tables regarding the user roles,
    log history, etc. are omitted in order to focus on the tables, containing the
    data from the stations. The tables’ names ms_n contain the data from the measuring
    stations and the table cs_n – from the camera stations. The table denoted stations
    contain the identifier of the station (ms_01, ms_02, etc.), the type of the station
    – measuring station or camera station, the coordinates of the station, and the
    current status of the station – 0 means deactivated and 1 – activated. The table
    stations_alerts contain the alerts and notifications generated from or to the
    station. Table station_condition stores additional data about conditions that
    have arisen, e.g. faulty battery, long period of an unresponsive station, missing
    data from responses, etc. SECTION VI. Conclusions and Future Work In conclusion,
    the future of farming is integrating more systems that allow remote control and
    monitoring. The farm of the future is the smart farm in which the farmers are
    able to have real-time information about the state of the farm and the animals
    in it, as well as make predictions about the future. The proposed system is developed
    with the idea of remote location and autonomy. The hardware aspect of the system
    contains elements that are self-sufficient and optimized for energy consumption
    and data transfer. The software allows versatile management of the measuring stations
    and real-time alerts and notifications. This article overview the structure of
    the database used in the system. The tables contaning the data from the sensors
    are considered in detail and an explanation about the structure is given. Further
    development of the system is considered and some of the future additions are:
    Sensors measuring the solar radiation; Sensors for rain measurement; Experiments
    that will determine the most suitable machine learning algorithms for forecasting
    and classification; Extension of the current system with the addition of measuring
    stations for animals and not only for pastures and meadows. ACKNOWLEDGMENT The
    research leading to these results has received funding from the Ministry of education
    and science under the National science program INTELLIGENT ANIMAL HUSBANDRY, grant
    agreement n°Д01-62/18.03.2021. Authors Figures References Citations Keywords Metrics
    More Like This A Test Automation of a Full Software Stack on Virtual Hardware-Based
    Simulator 2009 Fourth International Conference on Computer Sciences and Convergence
    Information Technology Published: 2009 Hardware and software architecture for
    Plexil-based, simulation supported, robot automation 2016 IEEE Colombian Conference
    on Robotics and Automation (CCRA) Published: 2016 Show More IEEE Personal Account
    CHANGE USERNAME/PASSWORD Purchase Details PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS
    Profile Information COMMUNICATIONS PREFERENCES PROFESSION AND EDUCATION TECHNICAL
    INTERESTS Need Help? US & CANADA: +1 800 678 4333 WORLDWIDE: +1 732 981 0060 CONTACT
    & SUPPORT Follow About IEEE Xplore | Contact Us | Help | Accessibility | Terms
    of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | IEEE Privacy
    Policy A not-for-profit organization, IEEE is the world''s largest technical professional
    organization dedicated to advancing technology for the benefit of humanity. ©
    Copyright 2024 IEEE - All rights reserved."'
  inline_citation: '>'
  journal: 2022 8th International Conference on Energy Efficiency and Agricultural
    Engineering, EE and AE 2022 - Proceedings
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: 'Design of a smart system for monitoring and management of pastures and meadows:
    The Relational Database Approach'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Dansana D.
  - Sahoo S.
  - Mishra B.K.
  citation_count: '1'
  description: Farmers need agrarian data and relevant information to settle on proficient
    choices and to fulfill enlightening necessities. In the agribusiness area through
    the improvement of information the board framework, requests of farmers can be
    replied to with the assistance of mixed media which is effectively open. The utilization
    of Information and Communication Technology (ICT) has demonstrated for extending
    the chances to advance farming on a few angles and areas in agricultural nations.
    Innovation has crossed obstacles by utilizing remote innovation, organizing, versatile,
    and so on to conquer the utilization of energy, force, and cost devouring types
    of gear which was useful in the horticultural turn of events. The improvement
    of ICT in different areas has driven considerable premium in rising speculations
    by private areas towards the development of ICT in Agricultural exploration. It
    is fundamental for increment the profitability of rural and cultivating processes
    to improve yields and cost-adequacy with new innovation, for example, the Internet
    of Things (IoT). Specifically, IoT can make rural and cultivating industry measures
    more proficient by decreasing human intercession through robotization. IoT is
    a blend of overall information, web-related things or things, and is a fundamental
    segment of things to come web. IoT centers around the robotization of cycles by
    diminishing human connection. During the time spent robotization, IoT gathers
    information utilizing sensors and cycles the information utilizing regulators
    and finishing the mechanization measures by utilizing actuators. Recent concerns,
    for example, cell phones, insightful administration of Wireless Sensor Networks,
    middleware stages, incorporated Farm Management Information Systems across the
    inventory network, or self-ruling vehicles and advanced mechanics stand apart
    due to their capability to lead arable cultivating to shrewd illustration cultivating.
    During the execution, various difficulties are experienced, and here interoperability
    is a key significant obstacle all through all the layers in the design of an Internet
    of Things framework, which can be tended to by shared guidelines and conventions.
    Difficulties, for example, reasonableness, gadget power
  doi: 10.1007/978-981-16-6210-2_15
  full_citation: '>'
  full_text: '>

    "Your privacy, your choice We use essential cookies to make sure the site can
    function. We also use optional cookies for advertising, personalisation of content,
    usage analysis, and social media. By accepting optional cookies, you consent to
    the processing of your personal data - including transfers to third parties. Some
    third parties are outside of the European Economic Area, with varying standards
    of data protection. See our privacy policy for more information on the use of
    your personal data. Manage preferences for further information and to change your
    choices. Accept all cookies Skip to main content Advertisement Log in Find a journal
    Publish with us Track your research Search Cart Home Internet of Things and Analytics
    for Agriculture, Volume 3 Chapter Efficiency and Reliability of IoT in Smart Agriculture
    Chapter First Online: 11 November 2021 pp 301–327 Cite this chapter Access provided
    by University of Nebraska-Lincoln Download book PDF Download book EPUB Internet
    of Things and Analytics for Agriculture, Volume 3 Debabrata Dansana, Subhashree
    Sahoo & Brojo Kishore Mishra  Part of the book series: Studies in Big Data ((SBD,volume
    99)) 791 Accesses 1 Citations Abstract Farmers need agrarian data and relevant
    information to settle on proficient choices and to fulfill enlightening necessities.
    In the agribusiness area through the improvement of information the board framework,
    requests of farmers can be replied to with the assistance of mixed media which
    is effectively open. The utilization of Information and Communication Technology
    (ICT) has demonstrated for extending the chances to advance farming on a few angles
    and areas in agricultural nations. Innovation has crossed obstacles by utilizing
    remote innovation, organizing, versatile, and so on to conquer the utilization
    of energy, force, and cost devouring types of gear which was useful in the horticultural
    turn of events. The improvement of ICT in different areas has driven considerable
    premium in rising speculations by private areas towards the development of ICT
    in Agricultural exploration. It is fundamental for increment the profitability
    of rural and cultivating processes to improve yields and cost-adequacy with new
    innovation, for example, the Internet of Things (IoT). Specifically, IoT can make
    rural and cultivating industry measures more proficient by decreasing human intercession
    through robotization. IoT is a blend of overall information, web-related things
    or things, and is a fundamental segment of things to come web. IoT centers around
    the robotization of cycles by diminishing human connection. During the time spent
    robotization, IoT gathers information utilizing sensors and cycles the information
    utilizing regulators and finishing the mechanization measures by utilizing actuators.
    Recent concerns, for example, cell phones, insightful administration of Wireless
    Sensor Networks, middleware stages, incorporated Farm Management Information Systems
    across the inventory network, or self-ruling vehicles and advanced mechanics stand
    apart due to their capability to lead arable cultivating to shrewd illustration
    cultivating. During the execution, various difficulties are experienced, and here
    interoperability is a key significant obstacle all through all the layers in the
    design of an Internet of Things framework, which can be tended to by shared guidelines
    and conventions. Difficulties, for example, reasonableness, gadget power utilization,
    network dormancy, Big Data investigation, information protection, and security,
    among others, have been recognized by the articles looked into and are talked
    about in detail. Various answers for all distinguished difficulties are introduced
    tending to advancements, for example, AI, middleware stages, or intelligent information
    the executives. Access provided by University of Nebraska-Lincoln. Download chapter
    PDF Similar content being viewed by others IoT-Enabled Agricultural System Applications,
    Challenges and Security Issues Chapter © 2020 Development of IoT for Smart Agriculture
    a Review Chapter © 2019 A Review of IoT Techniques and Devices: Smart Agriculture
    Perspective Chapter © 2020 Keywords IoT Agriculture Information and communication
    technology (ICT) IoT agricultural network topology IOT agricultural network platform
    1 Introduction Cultivating and farming are vital for the achievement of society
    overall. Without cultivating, everybody would be compelled to chase and accumulate
    food, and it isn’t workable for the total populace to make due off such an eating
    style. Mechanical cultivating methods and hereditarily adjusted harvests permit
    ranchers to create a lot more noteworthy measure of food than previously, in any
    event, when utilizing a similar measure of land, which keeps food on tables. Mechanical
    cultivating additionally utilizes numerous individuals, including hourly specialists,
    part timers, and logical analysts who try to improve cultivating procedures. Family
    cultivating is significant on a lot more limited size. Family cultivating gives
    neighborhood nourishments to the local area when there is overabundance delivered,
    and it accommodates a large part of the family’s food admission in any case. This
    permits the family to set aside cash and diminishes reliance on modern cultivating.
    Little family cultivates additionally keep the land fit as a fiddle through normal
    plowing and care, improving the general wellbeing of the nearby biological system
    [16]. Agribusiness somehow related to fundamental food crops. As of now, agribusiness
    far in excess of developing, dairy, natural item improvement, poultry, beekeeping,
    mushroom, etc. Today, planning, publicizing, and scattering of harvests and tamed
    creatures things, etc. along these lines, agriculture could be suggested as the
    creation, dealing with, progression, and allocation of agrarian things. Agriculture
    expects an essential part of the entire presence of a given economy. Cultivation
    is the establishment of the financial plan of a given country. Notwithstanding
    giving food and crude material, horticulture additionally gives business freedoms
    to a huge level of the populace. Below are some listed points which will demonstrate
    the importance of agriculture [17]. Origination of employment Addition to national
    credit Stockpile of Food and Grain Implication to the International business Paternity
    of Raw material Marketable Surplus Overseas exchange resources Significance in
    Transport Food security Economic development Source of saving Employment Opportunities
    In the context of food supply, it is important as Farming is the world’s driving
    wellspring of food things. All the food substances that are fundamental Agriculture
    produces vegetables, proteins, and oils. The sugars furnish all living creatures
    with energy. These are delivered as grains that fill in ranches, for example,
    rice, wheat, and potatoes. It’s useful to assemble our body with proteins. They
    are circulated by farming as grams and other leguminous merchandise. Such items
    incorporate beans, heartbeats, for example, dark gram, Bengal gram, green gram,
    and so forth. Other protein sources, for example, meat, fish, and dairy are additionally
    reliant on cultivating. Protein from veggie lover sources is modest and sound
    without the danger of illness. Individuals, in this way, depending on protein
    from agribusiness for their everyday needs. It is fundamental for supply energy,
    body construction, and warmth with fats and oils. These can be acquired by developing
    sunflower, groundnut, mustard, sesame, and so on from horticulture. Natural products:
    natural products have natural and unblemished food content since they don’t have
    to cook. Kids, the older, and debilitated individuals make them absorbable. Grapefruits
    are additionally used to make wine [19]. While discussing the roles of agriculture
    in medicine it Papain compound is acquired from the product of papaya. This papain
    is utilized as a catalyst that is natural. It is utilized as a substitute for
    acid reflux for one of the stomach related catalysts. Particularly valuable for
    the older and debilitated. This papain is acquired by the development of papaya
    for an enormous scope. Like a medication, most alkaloids are utilized. Opium alkaloids,
    for example, morphine calm serious agony, hack, and loss of developments too.
    These are acquired in ranches through the development of opium poppy plants. Moreover,
    cultivating gets alkaloids, for example, hyoscine, ephedrine, physostigmine. These
    are some significant standards of medication. Models incorporate cardiovascular
    breakdown heart glycosides, for example, digital is Senna is a glycoside utilized
    in obstruction treatment. Steroidal glycosides for the creation of steroid drugs
    in the heart [20]. As per agrarian bio variety Agricultural biodiversity is a
    wide term that incorporates all segments of natural variety identified with food
    and agribusiness, and all parts of natural variety that make up rural environments,
    otherwise called agro-ecosystems: the assortment and variety of animals, plants,
    and miniature creatures at the hereditary, species and biological system levels
    expected to support key habitats. Agricultural biodiversity is the consequence
    of hereditary asset connections, the climate, and farmers the executive’s frameworks
    and practices. This is the result of the century’s long improvement of both common
    determination and human inventiveness. Plant hereditary capital is including crops,
    wild plants gathered and kept up for food, ranch trees, fields, and types of rangeland,
    Microbial, and contagious hereditary assets. Animal hereditary assets, including
    tamed animals, food chased wild animals, wild and cultivated fish, and other oceanic
    organic entities. These are the principal creation units in farming, including
    developed and trained species, overseen wild plants and animals, just as developed
    and tamed species, wild family members. Biodiversity parts that help environment
    benefits that depend on farming. These incorporate various species that add to
    supplement cycling, nuisance and illness the executives, fertilization, contamination
    and dregs guideline, hydrological cycle protection, disintegration control, and
    environment guideline and carbon sequestration at different scales. Human exercises
    and the board rehearse structure and save agrarian biodiversity, and countless
    individuals rely upon farming biodiversity for feasible livelihoods. Such measurements
    incorporate customary and neighborhood consciousness of rural biodiversity, participatory
    cycles, and social variables, just as the travel industry related to farming landscapes.
    Agriculture depends on biodiversity. It has encouraged the improvement of cultivating
    frameworks since the principal advancement of horticulture approximately 10,000
    years back. Biodiversity is the root and variety inside all plant and tamed creature
    species. It is likewise the base of significant environment administrations for
    keeping up farming and the prosperity of individuals. The biodiversity of the
    present harvests and animals is the consequence of millennia of human mediation.
    Biodiversity and agribusiness are emphatically interrelated, as while biodiversity
    is vital for horticulture, farming can likewise add to biodiversity protection
    and maintainable use. Truly, both empowering and improving economical farming
    through biodiversity. Keeping up this biodiversity is fundamental for the economic
    creation of food and other farming items and their advantages to humankind, including
    food security, nourishment, and jobs [21, 22]. 1.1 Contribution to GDP Over the
    years Sector 1980 1990 2000 2003 Agriculture 38.1 31.1 24.7 22.2 Industry 25.9
    29.3 26.4 26.8 Service 36 39.7 48.8 51.0 Cultivating expects a central part in
    the economy of non-present day nations and gives the fundamental wellspring of
    food, pay, and work to their typical masses. As shown by FAO (2000), it has been
    set up that the segment of the agrarian people in the hard and fast individuals
    is 67% that cultivating records for 39.4% of the Gross domestic product and that
    43% of all tolls include plant items. It has gotten dynamically obvious over a
    few years that the beginning of the two monetary investigators and policymakers
    regarding the piece of cultivating in financial headway has gone through a critical
    turn of events. Around one-fourth of the World’s terrestrial surface is presently
    being worked on in the field of changing of land and managing in the 30 years
    after 1950 than in the previous 150 years. In various regions—including Europe,
    North America, Australia, and actually Brazil, China and India-humankind have
    furthermore gotten skillful at growing yields by using inputs like agricultural
    instruments such as pesticides and regular composts. Other terms, various less
    lucky countries with low repo rates and creating peoples, agriculture continues
    wandering into minor and fragile landscapes [20, 21]. 1.2 Importance of Agriculture
    on Economy Contribution to domestic revenue Origination of Food Supply Pre-imperative
    for the crude material Provision of excess Shift of labor Creation of Framework
    Reduce of disparity Relief from deficiency of capital Based on fair ideas Create
    viable interest Helpful in Eliminating Financial downturn Source of Unfamiliar
    Trade for the Country Contribution to Capital Development Employment Openings
    for Country Individuals Improving Rustic Government assistance Extension of Market
    for Mechanical Yield In the farming field, there are numerous applications, conventions,
    and models. IoT agribusiness research patterns incorporate organization stage,
    network design, applications, security, and difficulties among others. Besides,
    in numerous nations and associations over the globe diverse IoT strategies and
    rules have been executed in the agribusiness field. Anyway, in IoT farming climate
    a sensible measure of work done and a requirement for intensive investigation
    on IoT in agribusiness setting to comprehend the momentum research status. Figure
    1 depicts the different trends in agricultural fields incorporation to IOT. Fig.
    1 Agriculture trends using IOT Full size image 2 Significant Parts of IOT-Based
    Cultivating There are 4 major components involves in IOT-based Smart farming which
    is listed below. Physical structure Data acquisition Data analytics Data Preprocessing
    The actual design is the main factor for exacting farming to stay away from any
    undesirable occurring. The entire framework is planned in such a manner that controls
    the sensors, actuators, and gadgets. A sensor plays out numerous assignments like
    soil detecting, temperature detecting, climate detecting, light-detecting, and
    dampness detecting. Additionally, gadgets perform many control capacities like,
    hub disclosure, gadget ID and naming administrations, and so forth Every one of
    these capacities is performed by any gadget or sensor which is controlled through
    a microcontroller. This controlling activity is performed by any far off gadget
    or a PC that is associated with the Internet. Information Acquisition is additionally
    partitioned into two sub-segments specifically: IoT information obtaining and
    standard information procurement. IoT information procurement segment comprises
    seven conventions that are Message Queuing Telemetry Transport (MQTT), Websocket,
    Advanced Message Queuing Protocol (AMQP), Node, Constrained Application Protocol
    (CoAP), Data Distribution Service (DDS), and HyperText Transfer Protocol (HTTP).
    Contingent upon the necessities and conditions more conventions can be utilized
    for the execution of shrewd cultivating. Though, in the standard information obtaining
    ZigBee, WIFI, Long Range Wide Area Network (LoraWan), SigFox, and ISOBUS conventions
    have been utilized. Information handling comprises numerous highlights that are
    picture or video preparing, information stacking, choice emotionally supportive
    network, and information mining. As per the framework necessities, any element
    might be added that may work in corresponding to offer different types of assistance.
    Information examination comprises of two principles includes that are observing
    and controlling. Checking includes three fundamental application in shrewd horticulture
    that are Live Stock Monitoring, Field Monitoring, and Greenhouse Monitoring. IoT
    empowers ranchers to screen animals by means of various sensors that are utilized
    to screen distinctive animal illnesses like temperature, pulse, and processing,
    and so on. While field observing applications expect to report various states
    of the field like soil extravagance, temperature, dampness, gas, pressure (pneumatic
    stress and water pressing factor), and harvest sickness checking. A keen nursery
    configuration disposes of the manual mediation and measures diverse environment
    boundaries by clever IoT gadgets and sensors as indicated by plants’ prerequisites.
    Data acquisition basically alludes to the way toward getting, investigating, fathoming,
    and reviewing data through the most amazing aspect of many existing solid strategies.
    Here, information is procured from solid sources by building up a model coordinating
    ranchers, horticulture organizations, Ministry of farming, Agricultural Universities,
    and establishments alongside Rest API administrations [3, 5]. Here Fig. 2 represents
    the different kinds of data Acquisition techniques in the agriculture field, how
    data is transferred from various parts to the research center the price inflation,
    and all. Fig. 2 Data acquisition using IOT Full size image 3 IOT Agricultural
    Network Architecture The IoT agricultural organization is the primary factor of
    IoT in agribusiness field. IoT Agricultural organization design proposes a blueprint
    for the detail of an IoT horticultural organization’s actual components just as
    their working standards, and procedures. A large portion of the IoT applications
    normally follows the four layer engineering, i.e., Network Layer, Application
    layer, Physical and Mac Layer, and Transport Layer because of the fame and interoperability
    of IP. Figure 3 depicted below gives an overview of the different network platforms
    and its protocol in IOT agriculture network. Fig. 3 IOT agriculture network Full
    size image 3.1 Application Layer Because of the energy imperatives and tough calculation
    required by the IoT gadgets, there are numerous lightweight conventions on application
    layer, for example, CoAP, MQTT, AMQP, and HTTP. These conventions can be expanded
    or diminished by the framework prerequisite. CoAP convention runs on UDP and chips
    away at the rule of solicitation or reaction engineering. AMQP convention runs
    over the TCP convention by following distribute/buy in design non concurrently
    and use TSL/SSL for security confirmation. MQTT is a data transmission effective
    convention that utilizes little battery power and is intended for accepting and
    sending sensor information. HTTP is a notable web informing convention which dependent
    on the solicitation/reaction engineering [1, 2]. 3.2 Transport Layer This layer
    is likewise called host to have transport layer and is straightforwardly moved
    from IP to IoT space. The primary errand of organization layer is to gather and
    typify the horticultural data which is acquired through sensor layer. There are
    two conventions that are transmission control convention (TCP) and client datagram
    convention (UDP). TCP is an association situated convention that guarantees the
    dependability of conveyed information. TCP information transmission speed is low
    in contrast with UDP. UDP is an association less convention which doesn’t guarantee
    dependability of information. Its information transmission speed is high when
    contrasted with TCP. Both of these conventions are utilized in various applications
    in light of the fact that their decisions rely on the necessities of use. 3.3
    Network Layer This layer is a basic innovation for accuracy cultivating and capable
    to communicate agrarian data at application layer. IP is the significant decision
    with the current two forms that are IPv4 and IPv6. IPv4 appeared because of expanding
    the enormous number of addressable gadgets. While creation of IPv6 was normal
    which step by step build up on all systems administration gadgets. Directing convention
    for Low Power and Lossy Networks (RPL) is considered as the fundamental convention
    while applying steering on 6LoWPAN. RPL comprise of distance vector steering convention
    which utilizes Destination Oriented Directed Acyclic Graphs (DODAG) to determine
    courses. To help various progressions of traffic RPL change itself as per network
    speed and recognize directing measurements, for example, status of the battery
    utilized in gadget, connect quality, and higher computational expense trade [1,
    4]. 3.4 Adaption Layer Adaption Layer (AL) point is to guarantee the interoperability
    and execute fracture, pressure, and reassembly system. In spite of the fact that
    AL accomplished numerous advances yet at the same time, there is an intricacy
    for IPv6 supporting since its immediate use on IoT gadgets isn’t viewed as sensible.
    Normally conflicts were seen with imperatives which are related to IoT gadgets.
    That is the reason, 6LoWPAN put forth a major attempt to diminish the constraints
    of IPv6 and make it appropriate for IoT gadgets. Sensors and gadgets use IPv6
    and 6LoWPAN to send information over IEEE 802.15.4 convention in IoT agrarian
    organizations [11]. 3.5 Physical and Mac Layer This is the base most layer in
    farming organization architecture which is mindful to detect and impel diverse
    rural parameters. Inside physical and MAC layer IEEE 802.15.4 is quite possibly
    the most well known standard which was intended for minimal effort, low utilization,
    and low intricacy. This standard was embraced by numerous conventions like Wireless
    HART, ZigBee, and ISA100. IEEE802.15.4 for the most part works in ISM band of
    2.4 GHz. Besides, it likewise works 915 MHz (in United Nations of American) 868
    MHz (in European nations) and supports up to 250 kbps information rates. Anyway
    writing shows some critical impediments of later methodologies, which are with
    respect to portability and organization development [10]. 4 IOT Agricultural Network
    Platform This network model refers to both big data analytics model and cloud
    model which is described briefly below. How the concept of big data and cloud
    models have their impact on the agricultural field. Figure 4 represents the overall
    model of how big data models, sensors, and certain communication protocols have
    their impact in this agriculture field. Fig. 4 Agricultural network platform Full
    size image The proposed network platform consists of six components. Farmer experience
    Big data analysis Sensing and monitoring Warehousing services Protocol Physical
    Implementation The farmer experience layer is intended to assist the ranchers
    with observing harvest efficiency in various manners, for example, for successful
    development of yields ranchers are aware by recognizing the suitability of fruitful
    determination. Environment conditions, crop development conditions, soil quality,
    or steers wellbeing checking causes the ranchers to follow the condition of their
    business and alleviate the lower creation hazards [5, 8]. 4.1 Predictive Analysis
    This observation makes the entire climate more astute by the blend of savvy cultivating
    market knowledge and IoT innovation. The significant errand of prescient examination
    is to break down, investigate and measure the rural data for advanced mindfulness.
    Prescient investigation is made to check the probabilistic possibility of yield
    profitability up to the following season. Here various distinguishing gadgets
    are applied to check the Crop illness, climate conditions, and gauge the benefit/misfortune
    based on yield profitability. Prescient examination encourages the homestead to
    comprehend the ideal time for planting and reaping and different ranch the executive’s
    strategies [9, 12]. 4.2 Multicultural Analysis Expounds the various types of agribusiness.
    In this examination huge information investigation limit the danger of harvest
    obliteration as per logical ways. To improve the development pace of water included
    Botanic Aquaculture layer is furnished with huge information. Other multicultural
    procedures like Citriculture, Horticulture, and Floriculture profit direct advantages
    when enabled with huge information investigation. It is useful for dynamic identified
    with harvest or plants occasional development, and nuisance control. Vermiculture
    is utilized for the development of worms. Arboriculture is essentially utilized
    for the development of woody plants. Olericulture is an application that is utilized
    for the forecast and measure the development pace of various vegetables. 4.3 Physical
    Implementation Various sensors, various sorts of actuators, and microcontrollers
    are executed actually to monitor diverse farming applications. Numerous other
    organization supplies likewise executed at actual layer like switches, switches,
    and passages are incorporated. At this layer, while ecological conditions are
    detected and afterward incite as indicated by predefined directions. The microcontroller
    plays the director’s job and performs organizing related activities and some other
    usefulness which are finished by sensors and actuators. An IoT-based utilitarian
    casing work appears in Fig. 6. The useful system shows that how agriculturists
    and ranchers can get to different data sets with the help of a help layer from
    the application layer. The business layer contains all essential activities which
    are significant for any IoT ranch. Information securing layer furnishes association
    with meeting layer through IoT conventions like MQTT, AMQP and COAP and so forth
    [15, 17]. 4.4 Sensing and Monitoring Detecting and checking examination is made
    by applying diverse detecting and observing gadgets. Sensors sense information
    and store the harvest infection data. Information that is handled through numerous
    assets is accomplished by detecting layers. The statistical examination has been
    made on information gotten from sensors to activate the disease. Breeders get
    fundamental data, for example, temperature, dampness of soil, and stickiness through
    web and message administration. From recent picture and video analysis on information
    cause the rancher to get convenient and exact data [15, 16]. 4.5 Communication
    Protocol Correspondence conventions gather and epitomize rural information. To
    measure and communicate information by using these conventions has been considered
    as the operational hub of IoT in farming. These conventions comprise web-related
    innovations like WIFI, LoraWan, and Code Division Multiple Access (CDMA) advances.
    ZigBee is considered as the primary empowering influence for correspondence over
    significant distances when outsider specialist organizations, for example, Long-Term
    Evolution (LTE), CDMA, or Global System for Mobile (GSM) are not accessible [18].
    4.6 Storage Services Ranchers store crop-related information to improve assessment
    in future and use set aside information in various seasons for more noteworthy
    benefit. 5 IOT Agricultural Network Platform Based on Cloud Cloud gives a lot
    of capacity through enormous virtualized workers which are associated together
    to perform vital activities. A cloud based IoT plan for accuracy cultivating has
    been introduced in the chart. In which IoT procedures are applied to examine and
    oversee information from ranches through sensors and gadgets to create data for
    dynamic. Stage has been proposed based on four layers which are Cloud Storage,
    Gateway, Fog Computing, and equipment modules. Distributed storage layer centralized
    the all-agrarian related information, for example, climate related, soil, preparation,
    crop, and rural advertising in the cloud and gives on-interest assets through
    organized framework [16, 17]. Analytics assets and web administrations are additionally
    introduced on cloud or web which is available by cloud administrations. The vast
    majority of the gadgets or sensors are not planned in such a manner that can associate
    with web with the end goal of information sharing. To determine this information
    sharing issue neighborhood passages are planned which go about as extension between
    all equipment gadgets and sensors for availability, security, and controllability.
    Execution of doors in nursery or field improves the capacity of computerization
    and control the ongoing nursery observing framework. Equipment modules and cloud
    administrations are conveyed though assets are coordinated through mist figuring.
    Mist registering decreases the computational heap of cloud and guarantees ongoing
    preparation. Essential reason for haze registering in this proposed network stage
    is to use the on-interest versatility of distributed computing assets by exploiting
    both cloud and edge figuring. In equipment modules, different actuators, sensors,
    microcontrollers, and focal preparing units have been executed to screen and detect
    different agrarian factors. Equipment modules are conveyed worldwide or nearby
    organizations and used to make administrations or cycles. For the usage of keen
    cultivating quick reaction time and capacity to trade data is important. Both
    of these prerequisites (quick reaction time and ability to trade data) are satisfied
    by two conventions that are Representational State Transfer (REST) and Message
    Queuing Telemetry Transport (MQTT). Rather than utilizing enormous server farm
    conveyed framework is more powerful for savvy cultivating in light of the fact
    that it separates huge calculation into simple and more modest errands like: Crop,
    Temperature, supplements, energy, environment, dampness of soil and so forth [15,
    16, 18]. Figure 5 represents the impact of cloud computing how the data has been
    store and from which sources it comes from in the agriculture field is represented
    clearly. Fig. 5 IOT agricultural network platform based on cloud Full size image
    Fig. 6 IOT-based Ubiquitous agricultural solution Full size image 5.1 IoT Agricultural
    Network Topology and Protocols IoT horticultural organization geography shows
    the game plan of various components of an IoT Agricultural organization and addresses
    an ideal situation for keen farming. The below figure describes how a heterogeneous
    registering matrix gathers important sensor information by utilizing numerous
    detecting gadgets such as moisture sensor, stickiness sensor, temperature sensor,
    gas sensor, PH sensor, bright sensor, etc., and structures an IoT rural organization
    geography. This pervasive Agricultural arrangement changes the capacity limit
    of various electronic gadgets like smartphones, Laptops, and horticultural terminals
    into mixture processing grids. The sensed information is then breaking down and
    put away, and put away information from different sensors and gadgets gets valuable
    for accumulation. Based on collection and examination agriculturists/ranchers
    can screen the diverse yield factors on the whole over the field from anyplace.
    In addition, geography comprises a legitimate organizational arrangement for the
    real-time agrarian recordings. For instance, uphold the spilling of nuisances
    by means of an interconnected organization with a web convention (IP), GSM, WiMAX,
    and access administration network door [5, 6, 8]. Figure 6 represents the role
    of task manager, scheduler how the data suppliers are working in the agriculture
    field, and from where the data has been utilized how the users are going to access
    it is represented. Figure 7 represents the role of user, farmer and how the data
    is captured through sensors, how it supplies to any network is depicted clearly
    as the overview represents the overall model of remote monitoring in the crop
    field. Low power WSN innovation is a topology where low power remote sensor network
    has been intended to screen and control the different cultivating factors. In
    this framework, ZigBee is being utilized for information transmission which comprises
    numerous end gadgets and switches to proliferate the data on bigger distances.
    End gadgets that are dissipated in the field comprise various sorts of sensors
    like temperature, gas, dampness, soil, Motion indicator, PH, UV, PIR sensors,
    and a microcontroller. End gadgets are straightforwardly associated with the switch
    and regulator, where regulator speaks with base station by utilizing sequential
    port to examine the got data. As per programming checking point of view, each
    end gadget is appropriately instated and connected sensors are enacted in a proper
    manner. When the sensors are actuated then every gadget follows the switch to
    interface similarly as indicated by which they have been planned. After affirmation
    end gadget may associate with the WSN by utilizing indistinguishable keys. Information
    that is gathered through sensors is shipped off the base station which takes examination
    on got information. At the point when the sensors joined with end gadgets are
    being perused then information is communicated through ZigBee to the Controller
    or switch. Significant preferred position of this net geography is its bi-directional
    correspondence by utilizing ZigBee [13, 14]. Fig. 7 Farm remote monitoring in
    agriculture Full size image 5.2 IOT Protocols for Agriculture There are numerous
    IoT correspondence protocols that are generally utilized in horticulture with
    the end goal of keen cultivating. By utilizing these conventions ranchers can
    impart in a more helpful manner and settle on more effective choices for shrewd
    cultivating to upgrade and screen the development of harvests. Most regular remote
    conventions which are being utilized named: IEEE 802.11 WIFI, 2G/3G/4G-Mobile
    Communications Standards, LoraWan, WiMax, Low-Rate Wireless Personal Area Networks,
    Bluetooth, RFID, and ZigBee. IEEE 802.11 is an aggregation of correspondence principles
    Wireless Local Area Network that is 802.11a, 802.11b, 802.11g, 802.11n, and 802.11ac.
    Every one of these principles works in various data transmissions that are 5 GHz,
    2.2 GHz, 2.4/5 GHz, 60 GHz, and 5 GHz. Information move scope of these norms is
    from 1 Mb/s to 7 Gb/s. Its correspondence range is from 20 to 100 m. LoraWan is
    a long reach correspondence convention that is created by an open and non-benefit
    affiliation specifically Lora TM Alliance. The fundamental motivation behind this
    LoraWan convention is to guarantee interoperability between various administrators.
    Information move scope of Worldwide Interoperability for microwave access is from
    1.5 Mb/s to 1 Gb/s. Yet, presently a day with the headway of innovation information
    move rate has been changed. WiMax gives broadband multi access availability that
    incorporates fixed, versatile, traveling, and portable correspondence through
    wired or remote networks. Both WiFi and WiMax advancements have been sent to the
    Ministry of Food and Agriculture, Ghana (MOFA) which empowers client to associate
    either WiMax organizations or building Wifi [5, 15, 18]. Low-Rate Wireless Personal
    Area Networks sort out the detail of significant level correspondence guidelines
    like ZigBee. Information move pace of LR-WPAN comprises of 40 Kb/s-250 Kb/s. The
    significant property of this standard is that it gives low speed and minimal effort
    correspondence administrations. LR-WPAN is generally utilized for indoor horticulture
    like home nurseries or in little ranches. RFID chips away at the head by appointing
    an interesting number independently to each protest to record data. RFID comprises
    of perusers, hosts, and labels where labels get and send radio waves because of
    which it is otherwise called responder. RFI labels comprise dynamic labels and
    detached labels which are accessible in various sizes and shapes. Detached tag
    is more beneficial in contrast with dynamic tag since it is modest than dynamic
    labels. Labels have remarkable ID numbers and natural data, for example, dampness
    level, temperature condition, and moistness, and so forth these labels are inserted
    and appended in numerous items to distinguish that object. ZigBee is on the highest
    point of IEEE 802 principles made by ZigBee Alliance. It is a bunch of determinations
    for gadget-to-gadget networks having low force information rates. With the headway
    of innovation and expanding the interest of throughput, there is a need for quicker
    and low force utilization innovation. These prerequisites are satisfied by more
    settled advances which gives quicker information move. In agribusiness climate,
    IoT sensors sense the information and move it towards far off workers. In the
    wake of detecting, gathered information is analyzed for choices making. MQTT is
    an informing convention in IoT that is mainly designed for distant associations.
    It’s a transfer speed proficient convention and uses little battery power. MQTT
    is utilized for nonstop examination and sends a keen framework for agribusiness
    area. An easy online IoT arrangement has been introduced by utilizing MQTT for
    checking, following, and dissecting rural information and gather information from
    field mood and improve ecological conditions. By utilizing MQTT a minimal effort
    water system framework has been proposed for accepting and sending sensor data
    [18]. 5.3 Agricultural Application Domain IoT agriculture framework has a major
    role in all aspects which are listed here, Precision farming, livestock monitoring,
    and greenhouse monitoring. Several IoT agribusiness applications are being utilized
    to make more proficient assets for horticulture efficiency. Primary areas of IoT
    agribusiness applications are accuracy cultivating, animal checking, nursery observing,
    and horticultural robots. The accompanying subsection comprises different sorts
    of horticultural applications. 5.4 Precision Farming Precision cultivating assists
    the breeder with improving, mechanize and advance all possible headings to upgrade
    the rural efficiency and make editing framework savvy. Diverse IoT sensors are
    sent to gauge soil quality, climate conditions, dampness level, and adequately
    plan to advance gathering procedures to support the harvest creation a connection
    examination between rural climate data and yield measurable investigation has
    been created to gather crop information. In an IoT-based stage has been produced
    for exactness agribusiness and environmental observing. IoT-based climate gauges
    help to streamline profitability and take expectant investigation to keep the
    harvest from any losses. There are different kinds of sensors are there which
    will predict the bug or any kind of pest symptoms and behavior in seconds before
    they harm crop. Farmers use IoT-based irrigation system answers to oversee and
    investigate crop water systems a prerequisite during a far off rural checking
    stage has been introduced on observed information. An in-depth design comprised
    of digital frameworks and programming characterized set works has been introduced
    for precision cultivating. This smart farming depends on various observing and
    controlling applications, for example, environment conditions checking, soil designs
    checking, vermin and yield illness observing, water system, decide the ideal opportunity
    to plant and reap, and chasing [4, 5, 15]. 5.5 Climate Conditions Monitoring Where
    it requires performing any outdoor activities or anything important it is always
    worth monitoring the weather beforehand so that further activity can be planned
    accordingly similarly in farming also monitoring of weather is an essential and
    most important part. For monitoring any weather conditions there are many gadgets
    available nowadays. Weather stations are the most well known contraptions inside
    the field of horticulture that are utilized to find out any distinctive environmental
    conditions. Climate stations are liable for noticing consolidated temperature,
    tenacity, wind heading, and pneumatic pressure, etc. Situated across the field,
    environment stations assemble the natural data and send it to the cloud. Accumulated
    data is used for environmental assessment to design climate conditions, and give
    new pieces of information to take anticipated that actions should improve cultivating
    benefit. US Food and Agribusiness Association (FAO) has been described an environment
    related system called Climate Smart Agriculture (CSA) which helps the customer
    with changing the cultivation structure by perceiving climate conditions. A distant
    sensor network has been sent by using IoT development to recognize any environment
    changes by joining the sensors and gadgets [17, 18]. 5.6 Soil Monitoring Monitoring
    of soil has become an important practice in agriculture field that will be beneficial
    both for farmers and industry. In soil checking, there are numerous natural issues
    which influences crop creation. By chance that it experiences a few issues are
    recognized information precisely, the cultivating patterns and cycles can be seen
    without any problem. Soil designs that are being checked comprise of Soil Mugginess,
    dampness, treatment, and temperature. Soil moistness and dampness sensors are
    sent to analyze the dampness content in the dirt. A satisfactory measure of preparation
    in the field likewise expands crop yield. Soil checking test reports increment
    crop profitability and prescribes best treatment answers for the rancher. Additionally,
    the recognizable proof of debased soil by utilizing IoT advancements shields the
    field from over-treatment and yield misfortune. Nuisance and Yield Infection Observing
    Main drivers of income and creation misfortunes are crop illnesses. Because of
    the blessing of IoT horticultural framework has been changed into the computerized
    framework which assists the rancher with shaping educated choices. Forecast of
    harvest sicknesses at beginning phases assists the ranchers with creating more
    income by saving yield from bother assaults. Here IOT protects the crops from
    any unwanted issues in various ways by identifying diseases at earlier stage and
    from unnecessary animal attacks [12]. 5.7 Pest and Crop Disease Monitoring Yield
    assaulting is the major concern as it involves withdrawal of land into various
    untamed life frequents. Detecting the location of crop diseases or infection at
    beginning phases is very hard to find out in a crop field. While, programmed identification
    of illnesses is extremely valuable, exact, and less expensive for ranchers when
    contrasted with manual perception by specialists. Image processing procedure is
    an essential part of the previous identification of infection. Disease detection
    while sensing information by means of detecting gadgets is changed organization
    through distant worker at that point put away into a data set which is shown through
    a User Interface. After analyzing the data for these we can easily identify the
    possible disease (bacterial, parasitic, viral, and so forth) examination [5, 7].
    Figure 8 represents the role of different sensors, how it detects the disease
    in the agriculture field overall it is a disease and pest detection scenario in
    the crop field. Fig. 8 Disease detection scenario using IOT Full size image 5.8
    Irrigation Monitoring System IoT seems to be a boon in every possible field in
    agriculture it improves the current scenario in a more innovative manner. A rancher
    can enhance water framework in his field in different manners while observing
    the current state of climate and soil types. IoT innovation analyzes water system
    framework in four different ways like climate determining information, control,
    and screen entire field from anyplace, Ethernet association and WIFI. This advanced
    framework works with the ranchers by introducing various sensors, decreasing rancher’s
    system cost, and breaking point water assets. In a smart irrigation system, the
    executive’s framework has been introduced by utilizing coordinating with other
    innovations which sense distinctive soil and climate boundaries. An IoT-based
    irrigation framework has been planned during which utilizes HTTP and MQTT conventions
    to illuminate the client. Water quality is observed by sensor hubs which are enabled
    with remote correspondence. IoT innovation measures both physical, and synthetic
    requirements of pH, broken down, temperature, conductivity and oxygen. Accumulated
    information about water the executive’s framework is seen on web by utilizing
    distributed computing administrations. As of late different IoT irrigation system
    stages have been created to manage the water utilization inside the field [17,
    20]. Figure 9 represents the overall scenario of livestock management, precision
    farming how it involves sensors and devices to improvise the system further is
    represented below. Fig. 9 Role of IOT in agriculture Full size image 5.9 Agricultural
    Drones Robots are portrayed as Automated Flying Vehicles or Unmanned Aerial Vehicles
    (UAVs) utilized in agribusiness. These devices are controlled remotely by a regulator
    or self-administering redid. Cultivating cycles that are performed by meanders
    aimlessly are crop assessment, sprinkling, and screening, planting, and investigating
    reports, assessment of nitrogen in wheat, and assessment of soil conditions. Robots
    empower the farmers through coordination with Geographic Information Systems (GIS)
    arranging and collect development imaging. Robots are for the most part sent in
    tremendous farms where issues related to miniature life forms are difficult to
    manage and require standard noticing. These robots are responsible for detecting
    any micro organism’s growth which is otherwise very hard to identify. Close by
    cultivating pesticides and excrements are essential for crop yield. Cultivating
    robots are accomplishing this work capably by virtue of their high speed and ampleness
    in the sprinkling action. In like manner, they moreover shipped off screen forest
    areas, creatures, and aqua-farming. An affiliation Accuracy Falcon is using drones
    for significant data gathering through sensors for examining arranging, and imaging
    of rustic land. They act in-flight checking, farmers enter the data in regards
    to which field to contemplate and pick a ground goal. To meet the targets set
    by the farm, Agrarian robots are consolidated with GPS devices cameras, and sensors
    to monitor crop successes, like planting, crop showering, screening, and assessment
    of soil, and more. We can use robots for various purposes like yield prosperity
    imaging, plant checking, and the proportion of nitrogen in wheat, plant height,
    leakage arranging, and weed pressure, and many more [20, 21]. 5.10 Green House
    Monitoring In a controlled and monitored environment, green house plants are raised.
    The benefits of this glasshouse are that a breeder can raise a plant anytime and
    anywhere while adhering to certain environmental factors else there is no specific
    rules attached to it. But there are certain facts that need to be remembered that
    greenhouse is intense while cultivating here it requires high precision which
    makes it different from traditional crops production. For monitoring of greenhouse
    and the climate and factors underneath several studies has been done in the field
    of WSN. Ongoing investigations show that how IoT can be executed in the farming
    industry to limit the man forms of collecting data and gives an immediate connection
    of the field from farmers to clients. A large portion of the examinations has
    zeroed in just on remote monitoring and neighborhood. Moreover, with the end goal
    of high accuracy, there have been great deals of studies that incorporate data
    to move through the remote infrastructure with information through the web. By
    applying all around assessed crop models, evaluation of the yield status assists
    the farmers with settling on better choices. Information can be gotten by sensors
    and identifiers and afterward moved to the main server for preparing. In actual
    execution, the significant segments are the sensors and network for exact data
    transmission. Cultivators set up the diverse observing gadgets and sensors as
    per the particular necessities and track or record the necessary data. Agriculturists
    settle on better choices by dissecting the data and accomplish explicit objectives
    by acquiring ideal information. There are numerous IoT-based farming applications,
    for example, irrigation systems, plant checking, and environment observing, and
    so on [1, 5, 7]. 5.11 Livestock Monitoring Perfect climate or conditions that
    ingest an unreasonable measure of environmental conditions leave an adverse consequence
    on daily performance of animals which is a huge concern for some researchers.
    Yearly farmers lose a lot of benefits because of animals’ sickness. But IOT-based
    Livestock Management has the answers for this problem for improving living conditions,
    improving the cultivating standards, animals’ conditions, and dairy items. Somewhat
    like yield checking sensors, distinctive domesticated animals observing sensors
    likewise are appended to the animals to monitor their execution. Domesticated
    animals observing variables changes on the various factors of animals viable like
    milk, bug assault, stickiness, and water quality. By labeling RFID to singular
    animal permit ranchers to follow their area, consequently keeping animals from
    robbery. Connected sensors and wearable’s are inside the animals permits the rancher
    to monitor generally speaking animals’ exercises and information is gushed to
    the cloud straightforwardly that assists the ranchers with recognizing the issues
    that have been underlying. Cowlar and SCR by All flex are utilizing shrewd agribusiness
    sensors to analyze animals’ wellbeing, action, temperature, nourishment and gather
    data on every individual likewise as about the crowd. Inside the field of domesticated
    animals, a few investigations have been figured out. Remote Sensors have been
    utilized which are generally favorable for breeder. Here distinctive IoT detecting
    gadgets have been conveyed to keep an eye on the climate conditions through meteorological
    perception posts and sense different conditions inside the field by any remaining
    information sources which have been executed in the entire field or farm. Detected
    information is put away on the cloud, which client can use for dynamic purposes
    and uses remotely when he wants. Recognition of any disease its associated symptoms
    and avoidance is the primary function for animal wellbeing observing. Typical
    blood warmth of dogs is 38.3 °C–39.2 °C and cow’s is 38.5 °C–39.5 °C. At the point
    when the internal heat level is expanded or diminished from the ordinary internal
    heat level then it shows that creature is influenced by any sicknesses. Warmth
    or Body heat stress diminishes the cow’s milk profitability with same dietary
    information, because of which ranchers face the profitability issues. In summer
    season dampness content turns out to be low in weather on account of which anxiety
    in animals expanded, as a result of this animal might die too. Proper gesture
    analysis can be made for the animals in support with the IOT automation which
    helps to find out the abnormality soon. Animal’s motion conduct is surveyed into
    various gatherings, for example, in cows; this conduct comprises of two classes
    that are voyaging and fixed. Voyaging conduct comprises of creature’s strolling,
    running, and brushing while fixed conduct is creature’s sitting, dozing, and standing.
    Rumination screen detects the processed food by animals and it is recognized by
    mounting a screen inside the animal’s (cows) nose. In this manner, ranchers can
    get precise signs about animal’s wellbeing. Estimation of pulse is an aberrant
    strategy that impacts because of the unsettling of cow. Typical pulse rate of
    cow ranges between 43 to 84 bpm through calf’s ordinary pulse is 100 to 140 bpm
    [16]. By utilizing IoT gadgets and sensors beat rates are regularly checked continually.
    GPS framework is utilized to get the detail of ranch and sends the checked boundaries
    to local observing station by utilizing remote sensor network. To stop these creatures
    from burglary, wild assaults or climate conditions a repulsing framework has been
    given by utilizing remote advancements like Zigbee, WIFI, and LoWPAN. 5.12 Security
    Issues IoT agricultural ideal models are not yet solid however kept on making
    up because of which as of now it’s hard to get every single imaginable danger
    and weaknesses in IoT farming field. In any case, when specialists discover the
    security answer for tackle the evident security dangers by then they ought to
    can relieve the secret issues. To achieve a security arrangement, security checks
    ought to be sent with changing environments. Assuming a structure during which
    security instrument contains various frameworks which can recognize and forestall
    IoT agrarian framework from assaults. Presently consider, that an assailant produces
    a substitution kind of assault on farming applications gadgets and organizations
    to take agricultural data honesty. In such conditions, existing security procedures
    ought to identify this new assault by utilizing dynamic calculation. Security
    framework is intended to relieve the assault while diagnosing framework gathers
    action information from rural applications, organizations, hubs and dissects recognized
    farming information. Response framework is intended to help the agrarian substances
    endure a wide range of assaults. Entire framework has been planned by following
    unique calculations. To keep from present, plausible, and covered up assaults
    this procedure has solid coordinated effort. Upon interruption, location framework
    gives an activity order and store in response framework where they can post their
    queries that have received after experience with security framework to keep from
    additional assaults. Activity order get reaction from recognizable proof assistance,
    response framework eliminates the framework disappointment dangers and afterward
    pass out its involvement in other two frameworks that are security and diagnosing
    frameworks [2, 3, 5]. Figure 10 represents the IOT security model in the agriculture
    field for any data breaches. As everything, whatever improvement can be done but
    the security of our data is foremost important for us so that it can’t be misplaced
    or modified by any intruder. Here we have tried to give an overview of security
    model for smart farming. Fig. 10 Intelligent IOT security model for smart farming
    Full size image 6 Conclusion Over the world, different data analysts and analyzers
    are exploring different types of solutions to increase the productivity of agriculture
    in a method that enhances existing methods by using IOT. Here a small yet detailed
    and comprehensive detailed analysis is presented on the progressive for IOT in
    agricultural domain. Here we have tried to focus on the different types of agricultural
    networks its associated architecture, existing platform that plays a great role
    in this field. This text provides an in-depth summary of the existed methodology
    in comparison with the recent development and the future of this methodology using
    Agricultural sensors, protocols, and all the available technologies. We have tried
    to give insight knowledge on various challenges and security threats involves
    in IOT farming. Finally, it is expected that this survey results into a really
    helpful piece of knowledge for researchers, professionals, agriculturists, and
    policy manufacturers who are collaborating and dealing in IoT field and agricultural
    technologies. References Journal Article Villa-Henriksen, A., et al.: Internet
    of Things in arable farming: implementation, applications, challenges and potential.
    Biosyst. Eng. 191, 60–84 (2020) Google Scholar   Mohanraj, I., Ashokumar, K.,
    Naren, J.: Field monitoring and automation using IOT in agriculture domain. Proc.
    Comput. Sci. 93, 931–939 (2016) Google Scholar   Lee, I., Lee, K.: The internet
    of things (IoT): applications, investments, and challenges for enterprises. Bus.
    Horiz. 58(4), 431–440 (2015) Article   Google Scholar   Chen, S., Xu, H., Liu,
    D., Hu, B., Wang, H.: A vision of IoT: applications, challenges, and opportunities
    with china perspective. IEEE Internet Things J. 1(4), 349–359 (2014) Article   Google
    Scholar   Ray, P.P.: Internet of things for smart agriculture: technologies, practices
    and future direction. J. Ambient Intell. Smart Environ. 9(4), 395–420 (2017) Article   Google
    Scholar   Agrawal, H., Dhall, R., Iyer, K.S.S., Chetlapalli, V.: An improved energy
    efficient systemfor IoT enabled precision agriculture. J. Ambient Intell. Humanized
    Comput. 1–1 (2019) Google Scholar   Arjun, K.M.: Indian agriculture-status, importance
    and role in Indian economy. Int. J. Agric. Food Sci. Technol. 4(4), 343–346 (2013)
    Google Scholar   Alston, J.M., Pardey, P.G.: Agriculture in the global economy.
    J. Econ. Perspect. 28(1), 121–146 (2014) Article   Google Scholar   Elijah, O.,
    Rahman, T.A., Orikumhi, I., Leow, C.Y., Hindia, M.N.: An overview of internet
    of things (IoT) and data analytics in agriculture: benefits and challenges. IEEE
    Internet Things J. 5(5), 3758–3773 (2018) Article   Google Scholar   Ojha, T.,
    Misra, S., Raghuwanshi, N.S.: Wireless sensor networks for agriculture: the state-of-the-art
    in practice and future challenges. Comput. Electron. Agric. 118, 66–84 (2015)
    Article   Google Scholar   Conference Paper Kamyod, C.: End-to-end reliability
    analysis of an IoT based smart agriculture. In: 2018 International Conference
    on Digital Arts, Media and Technology (ICDAMT). IEEE (2018) Google Scholar   Farooq,
    M.S., et al.: A survey on the role of IoT in agriculture for the implementation
    of smart farming. IEEE Access 7, 156237–156271 (2019) Google Scholar   Vinothini,
    S.: A survey on the role of IOT in agriculture for the implementation of smart
    Google Scholar   Gubbi, J., Buyya, R., Marusic, S., Palaniswami, M.: Internet
    of things (IoT): a vision, architectural elements, and future directions. Futur.
    Gener. Comput. Syst. 29(7), 1645–1660 (2013) Article   Google Scholar   Stočes,
    M., Vaněk, J., Masner, J., Pavlík, J.: Internet of things (IoT) in agriculture-selected
    aspects. Agris on-line papers in economics and informatics, 8(665-2016-45107),
    83–88 (2016) Google Scholar   Kamienski, C., Soininen, J.P., Taumberger, M., Dantas,
    R., Toscano, A., Salmon Cinotti, T., Torre Neto, A.: Smart water management platform:
    Iot-based precision irrigation for agriculture. Sensors 19(2), 276 (2019) Article   Google
    Scholar   Zhang, X., Zhang, J., Li, L., Zhang, Y., Yang, G.: Monitoring citrus
    soil moisture and nutrients using an iot based system. Sensors 17(3), 447 (2017)
    Article   Google Scholar   Book Chapter Elijah, O., et al.: An overview of internet
    of things (IoT) and data analytics in agriculture: benefits and challenges. IEEE
    Internet Things J. 5.5, 3758–3773 (2018) Google Scholar   Website https://www.economicsdiscussion.net/economic-development/role-of-agriculture-in-the-economic-development-of-a-country/4652
    https://www.economicsdiscussion.net/articles/importance-of-agriculture-in-indian-economy/2088
    https://agriculturegoods.com/why-is-agricultureimportant/#:~:text=Agriculture%20plays%20a%20critical%20role,large%20percentage%20of%20the%20population
    https://www.reference.com/business-finance/farming-important-a438d272bb91ae9c
    Download references Author information Authors and Affiliations KISS University,
    Bhubaneswar, Odisha, India Debabrata Dansana GIET University, Gunupur, Odisha,
    India Subhashree Sahoo & Brojo Kishore Mishra Editor information Editors and Affiliations
    School of Computer Engineering, KIIT University, Bhubaneswar, India Prasant Kumar
    Pattnaik Department of Computer Science and Engineering, GIET University, Gunupur,
    India Raghvendra Kumar Department of Computer Science and Engineering, Global
    Institute of Management and Technology, Nadia, West Bengal, India Souvik Pal Rights
    and permissions Reprints and permissions Copyright information © 2022 The Author(s),
    under exclusive license to Springer Nature Singapore Pte Ltd. About this chapter
    Cite this chapter Dansana, D., Sahoo, S., Mishra, B.K. (2022). Efficiency and
    Reliability of IoT in Smart Agriculture. In: Pattnaik, P.K., Kumar, R., Pal, S.
    (eds) Internet of Things and Analytics for Agriculture, Volume 3. Studies in Big
    Data, vol 99. Springer, Singapore. https://doi.org/10.1007/978-981-16-6210-2_15
    Download citation .RIS.ENW.BIB DOI https://doi.org/10.1007/978-981-16-6210-2_15
    Published 11 November 2021 Publisher Name Springer, Singapore Print ISBN 978-981-16-6209-6
    Online ISBN 978-981-16-6210-2 eBook Packages Engineering Engineering (R0) Share
    this chapter Anyone you share the following link with will be able to read this
    content: Get shareable link Provided by the Springer Nature SharedIt content-sharing
    initiative Publish with us Policies and ethics Sections Figures References Abstract
    Introduction Significant Parts of IOT-Based Cultivating IOT Agricultural Network
    Architecture IOT Agricultural Network Platform IOT Agricultural Network Platform
    Based on Cloud Conclusion References Author information Editor information Rights
    and permissions Copyright information About this chapter Publish with us Discover
    content Journals A-Z Books A-Z Publish with us Publish your research Open access
    publishing Products and services Our products Librarians Societies Partners and
    advertisers Our imprints Springer Nature Portfolio BMC Palgrave Macmillan Apress
    Your privacy choices/Manage cookies Your US state privacy rights Accessibility
    statement Terms and conditions Privacy policy Help and support 129.93.161.219
    Big Ten Academic Alliance (BTAA) (3000133814) - University of Nebraska-Lincoln
    (3000134173) © 2024 Springer Nature"'
  inline_citation: '>'
  journal: Studies in Big Data
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: Efficiency and Reliability of IoT in Smart Agriculture
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Wu Y.C.
  - Chen C.H.
  - Kao S.E.
  - Chen J.J.
  citation_count: '1'
  description: The torrential rains brought by typhoons in Taiwan during the summer
    often cause huge losses to aquaculture, while cold snap in winter cause the sudden
    death of the milkfish. Simultaneously, the lack of manpower is also one of the
    potential problems. Based on the above factors, this paper uses wireless transmission
    technology with various sensors to transmit the data to the server. It can increase
    the productive capacity and effectively reduce the mortality rate and manpower
    costs. Since the pH sensor cannot be placed in the water for a long time to measure,
    it takes manpower and time to take the instrument to the fish farm for detection.
    Therefore, a robotic arm was developed to complete a series of automatic measurement
    and maintenance actions. In this way, this design can improve the problem of contamination
    of the pH sensor and avoid the measurement error. This intelligent system can
    work twenty-four hours a day and effectively reduce the loss of personnel, material,
    and data errors.
  doi: 10.1109/ISPACS51563.2021.9651086
  full_citation: '>'
  full_text: '>

    "IEEE.org IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account
    Personal Sign In Browse My Settings Help Access provided by: University of Nebraska
    - Lincoln Sign Out All Books Conferences Courses Journals & Magazines Standards
    Authors Citations ADVANCED SEARCH Conferences >2021 International Symposium ...
    Fish Farm Management System Based on IoT Publisher: IEEE Cite This PDF Yi-Chen
    Wu; Chiung-Hsing Chen; Shao-En Kao; Jwu-Jenq Chen All Authors 149 Full Text Views
    Abstract Document Sections I. Introduction II. Motivation III. System Design IV.
    Paper Accomplishment V. Conclusion Authors Figures References Keywords Metrics
    Abstract: The torrential rains brought by typhoons in Taiwan during the summer
    often cause huge losses to aquaculture, while cold snap in winter cause the sudden
    death of the milkfish. Simultaneously, the lack of manpower is also one of the
    potential problems. Based on the above factors, this paper uses wireless transmission
    technology with various sensors to transmit the data to the server. It can increase
    the productive capacity and effectively reduce the mortality rate and manpower
    costs. Since the pH sensor cannot be placed in the water for a long time to measure,
    it takes manpower and time to take the instrument to the fish farm for detection.
    Therefore, a robotic arm was developed to complete a series of automatic measurement
    and maintenance actions. In this way, this design can improve the problem of contamination
    of the pH sensor and avoid the measurement error. This intelligent system can
    work twenty-four hours a day and effectively reduce the loss of personnel, material,
    and data errors. Published in: 2021 International Symposium on Intelligent Signal
    Processing and Communication Systems (ISPACS) Date of Conference: 16-19 November
    2021 Date Added to IEEE Xplore: 28 December 2021 ISBN Information: DOI: 10.1109/ISPACS51563.2021.9651086
    Publisher: IEEE Conference Location: Hualien City, Taiwan SECTION I. Introduction
    Cooperate with research to visit the fish farms in the Qigu District of Tainan
    City. According to the local fishermen''s understanding. In the general, tradition
    staffs are responsible for inspecting and responding the status of the fish farms.
    The water quality is measured by the experience. Therefore, there will be no standard
    basis to manage the fish farms. In addition, the environment and conditions in
    which cultivate different types of fish and shrimps will have different requirements.
    Therefore, solving the measurement problem must be a fundamental solution. As
    the mentioned in the abstract, the pH sensor cannot stay in the water. It must
    be immersed in the protective liquid to ensure the accuracy and prolong its life.
    Our solution is to use a self-made robotic arm equipped with a pH sensor to measure.
    Submit the water quality data to the set database for comparison and determine
    whether the water quality meets the living conditions of the fish. However, due
    to cost considerations, it is impossible to assign one set of equipment to each
    fish farm. Therefore, the solution adopted is to place a submersible motor in
    each fish farm and extracting the water. Then, sequentially measure and maintain
    the pH sensor of each fish farm through a set of robotic arms SECTION II. Motivation
    The general fishermen use manual measurement and recording, while the traditional
    fishermen use their experiences to observe the fish population. It will increase
    the loss of manpower and material resources. The paper replaces recording of measurement
    data and maintenance with robotic arm. The measurement equipment can work 24 hours
    a day. Its high reliability and stability are a big advantage. The cleaning function
    prevents the sensor from being affected by excessive consumption of the reaction
    solution or environmental factors in the fish farm. The main detection is pH,
    dissolved oxygen and temperature. The problem that sensor cannot be measured in
    water for a long time is solved by using robotic arm as an alternative solution.
    According to environmental changes, the system will upload data by time setting.
    Fishermen can monitor the water quality of the fish farms at any time through
    mobile devices. When the water quality is abnormal, the server will send a message
    to the mobile device to remind the fishermen to avoid the loss of fingerling.
    SECTION III. System Design Fig. 1 is a typical fish farm in Taiwan. This system
    design simulates the fish farms. The system architecture is shown in Fig. 2. Each
    fish farm will use the submersible motor in order to pump water to the measuring
    tank under the robotic arm, and then use the pH sensor mounted on the robotic
    arm to measure. After the measurement, the robotic arm will automatically clean
    the sensor head. This is to prevent the accuracy of the sensor from being interfered
    with the previous use. Each fish farm is equipped with temperature sensor, dissolved
    oxygen sensor, and water overflow sensor. Each sensor will be combined with the
    wireless transmission module via a single-chip to send back control signals and
    values to the embedded system to the server. It is convenient to capture the data
    with mobile devices and web pages, so that fishermen can easily view the status
    of each fish farm. Fig. 1. Fish farm in Taiwan Show All Fig. 2. System architecture
    Show All SECTION IV. Paper Accomplishment A. Robotic arm subsystem The robotic
    arm is shown in Fig. 3. When the set time is up, a series of actions will start.
    The motor will drive the rod connected with the pH sensor to make it leave the
    protective liquid, and then the rod will drive the pH sensor down to the testing
    liquid. After the set time is elapsed, the pH sensor leaves the liquid and rises
    to a fixed-point to clean. In this way, the robotic arm completes a series of
    measurement and maintenance actions. Fig. 3. Intelligent measurement arm and its
    flow chart Show All B. IoT The flow chart of IoT is shown in Fig. 4. After receiving
    the signal in each fish farm, the system will transmit the data of temperature
    and dissolved oxygen and starts the motor to measure pH. After a series of measurements,
    the system will judge whether all the fish farms are finished testing. Finally,
    the data will combine and send back to the server via the myRIO[8] for real-time
    monitoring on mobile devices. For example, when a water shortage is sensed, the
    motor is activated to replenish water, etc. Fig. 4. The flow chart of system Show
    All C. Temperature sensor subsystem In order to reduce the mortality rate of the
    fingerling, the growing environment has requirements for the water temperature.
    According to the convenience, Pt100 is chosen. Since the platinum wires don’t
    have an insulating outer layer, platinum wires must not touch each other when
    they are wrapped. And pay attention to the degree of insulation between adjacent
    windings. At the same time, it is necessary to avoid the expansion and deformation
    of the platinum by the temperature change. D. Dissolved oxygen(DO) sensor subsystem
    Oxygen is the basic element required for biological survival. Therefore, water
    quality management in aquaculture, dissolved oxygen is regarded as the main indicator
    to judge the water quality. Generally speaking, the higher the concentration,
    the better the water quality. E. Water overflow sensor subsystem In this subsystem,
    when the water level is higher than the high water level during typhoon season,
    the subsystem will notify the manager of the condition of the fish farms and remind
    of going to the fish farms and covering the fish farms to avoid loss of fish.
    When there is no rain for a long time, water decreases due to evaporation. This
    is not conducive to the survival of the fish. Therefore, an automatic pump motor
    is also required to pump the underground reserve tank to replenish the water level
    to the normal level. F. pH sensor subsystem The pH value, also known as the hydrogen
    ion concentration index, is a scale of the concentration of hydrogen ions in a
    solution. The large amount of the excrement in the fish farms will the produce
    amino acids which will increase the acidity of the water and cause the fish to
    become sick. SECTION V. Conclusion The measurement values are changing all the
    time, so the most important aspects are the real-time data transmission, the design
    of the robotic arm, the selection of materials and installation tests. Improving
    the wireless transmission rate and the durability of the equipment are also the
    direction to be considered in the future. ACKNOWLEDGMENT Thanks to Office of Marine
    Science and Technology, National Kaohsiung University of Science and Technology
    for assisting in the implementation of this paper and matching the needs and promotion
    of the industry on the spot. Project code:107M11-2 Authors Figures References
    Keywords Metrics More Like This Adaptive Taylor-Sail Fish Optimization based deep
    Learning for Detection of Black Hole and Sybil Attack in Wireless Sensor Network
    2023 International Conference on Sustainable Computing and Data Communication
    Systems (ICSCDS) Published: 2023 Malicious traffic analysis in wireless sensor
    networks using advanced signal processing techniques 2013 IEEE 14th International
    Symposium on \"A World of Wireless, Mobile and Multimedia Networks\" (WoWMoM)
    Published: 2013 Show More IEEE Personal Account CHANGE USERNAME/PASSWORD Purchase
    Details PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS Profile Information COMMUNICATIONS
    PREFERENCES PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help? US & CANADA:
    +1 800 678 4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow About IEEE
    Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination
    Policy | IEEE Ethics Reporting | Sitemap | IEEE Privacy Policy A not-for-profit
    organization, IEEE is the world''s largest technical professional organization
    dedicated to advancing technology for the benefit of humanity. © Copyright 2024
    IEEE - All rights reserved."'
  inline_citation: '>'
  journal: 'ISPACS 2021 - International Symposium on Intelligent Signal Processing
    and Communication Systems: 5G Dream to Reality, Proceeding'
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: Fish Farm Management System Based on IoT
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Belhassena A.
  - Battistoni P.
  - Souza M.V.
  - Laneurit J.
  - Moussa R.
  - Bimonte S.
  - Wrembel R.
  - Abouqateb M.
  - Cariou C.
  - Chalhoub G.
  - Andre G.
  - Sebillo M.
  - Bachelet B.
  citation_count: '1'
  description: Smart farming and IoT technologies open up a new research agenda, which
    relates to different inter-related scopes within a Farm Management Information
    System, such as robots' programming, tasks' scheduling, sensor data capture, management
    and processing at different layers of the IoT ecosystem. Many research works address
    these topics, but to the best of our knowledge none has contributed with a fully-featured
    architecture design of monitoring and scheduling of autonomous agricultural robots.
    In this paper, we propose the skeleton of architecture for such kind of IoT systems,
    called LambdAgrIoT. It is designed to support big data and different types of
    workload (real-time, near real-time, analytic, and transactional). We present
    the main features of each layer, and the implementation details and its deployment
    of the Data Source and Speed layers in a real environment. The paper also discusses
    the open issues related to the other layers and the deployment of the overall
    architecture at large scale.
  doi: 10.1109/EDOCW52865.2021.00049
  full_citation: '>'
  full_text: '>

    "IEEE.org IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account
    Personal Sign In Browse My Settings Help Access provided by: University of Nebraska
    - Lincoln Sign Out All Books Conferences Courses Journals & Magazines Standards
    Authors Citations ADVANCED SEARCH Conferences >2021 IEEE 25th International ...
    Towards an Architecture for Agricultural Autonomous Robots’ Scheduling Publisher:
    IEEE Cite This PDF Amina Belhassena; Pietro Battistoni; Mateus Vilela Souza; Jean
    Laneurit; Rim Moussa; Sandro Bimonte; Robert Wrembel; Mouad Abouqateb; All Authors
    2 Cites in Papers 110 Full Text Views Abstract Document Sections I. Introduction
    II. Requirements’ Specification III. LambdAgrIoT Architecture IV. Related work
    V. Conclusion and future work Authors Figures References Citations Keywords Metrics
    Abstract: Smart farming and IoT technologies open up a new research agenda, which
    relates to different inter-related scopes within a Farm Management Information
    System, such as robots’ programming, tasks’ scheduling, sensor data capture, management
    and processing at different layers of the IoT ecosystem. Many research works address
    these topics, but to the best of our knowledge none has contributed with a fully-featured
    architecture design of monitoring and scheduling of autonomous agricultural robots.
    In this paper, we propose the skeleton of architecture for such kind of IoT systems,
    called LambdAgrIoT. It is designed to support big data and different types of
    workload (real-time, near real-time, analytic, and transactional). We present
    the main features of each layer, and the implementation details and its deployment
    of the Data Source and Speed layers in a real environment. The paper also discusses
    the open issues related to the other layers and the deployment of the overall
    architecture at large scale. Published in: 2021 IEEE 25th International Enterprise
    Distributed Object Computing Workshop (EDOCW) Date of Conference: 25-29 October
    2021 Date Added to IEEE Xplore: 01 December 2021 ISBN Information: ISSN Information:
    DOI: 10.1109/EDOCW52865.2021.00049 Publisher: IEEE Conference Location: Gold Coast,
    Australia SECTION I. Introduction The world population growth is increasing the
    demand for sustainable healthy farming production. For that purpose agroecology
    aims at developing new cultural practices leading to an environment friendly farming
    production [1]. In order to support agriculture’s stake-holders in all their activities,
    such as basic management of stocks, as well as sophisticated assistance in complex
    technical operations on fields (e.g. plowing, weeding, fertilizing …), classic
    Farm Management Information Systems (FMIS) development includes multiple design
    artefacts, business processes, and customization of software technologies suitable
    to farming information system [2]. Smart farming is a move towards the adoption
    and the implementation of new advances in information technology (e.g. Internet
    of Things, Big Data frameworks, computer vision, artificial intelligence) to monitor
    and to optimise agricultural business processes, and to overcome the current challenges
    of sustainable and healthy food production to define new agro-ecology practices.
    The deployment of affordable sensor technology (e.g. odometry, LiDAR, etc.) in
    farms, challenge traditional FMIS. Thus, FMIS must take into account new collected
    data features, both data at rest and data in motion; and be able to extract insights.
    Sensed data must be analysed in order to improve field activities, such as precise
    irrigation and soil fertilization, as well as tasks scheduling and robots’ tracking
    [3]. To support the agro-ecology transition, robots have an essential role to
    play as they have low impact on the environment (light, possibility to operate
    in fleet), and they are able to perform repetitive and accurate farming operations
    over a long time period. With special equipment and combined with data acquisition
    and data processing technologies, robots are able to autonomously perform efficiently
    targeted tasks in the fields, e.g., within inter-cropping systems, while optimizing
    the use of resources and maintaining a high level of productivity. In this paper,
    we consider scenarios where robots do not cooperate with farm workers in the field,
    and we generalize our proposal to be applicable to most of agricultural tasks
    of robots. Many research works address smart farming, but to the best of our knowledge
    none has contributed with a fully-featured architecture design, which investigates
    the multiple layers and the different edges of the IoT ecosystem towards smart
    monitoring and scheduling of autonomous agricultural robots, with scalable data
    processing. This lack has been put in evidence by some recent survey papers that
    focus on robots and IoT for Agriculture 4.0 ([4], [5], [6]). In particular, even
    though some client-server architectures have been proposed [7], they do not fully
    exploit all the insights extracted from the analysis of IoT data and new communication
    and computation architectures (e.g., edge-fog-cloud). Moreover, existing works
    do not address real-life scenarios, but experimental farms configurations. Our
    contribution is twofold: First, we present a detailed analysis of requirements
    for real-life scheduling autonomous agricultural robots systems, cf. Section II.
    These requirements have been defined based on our several years experience in
    the context of smart farming, and with discussion, with farms’ managers. Second,
    we propose the skeleton of an architecture for scheduling autonomous agricultural
    robots, called LambdAgrIoT, which is based on the Lambda architecture, cf. Section
    III. It is designed to support big data, and different types of workload (real-time,
    near real-time, analytic, and transactional). We present the main features of
    each layer, the implementation details as well as its deployment of the Data source
    and Speed layers, in a real environment. The paper also discusses the open issues
    related to the other layers and the deployment of the overall architecture at
    large scale. SECTION II. Requirements’ Specification In this section, we present
    the requirements specification for an agricultural autonomous robots scheduling
    system. The following described issues have been elucidated thanks to our several
    years research experience in the context of robotics and information systems for
    smart farming. Moreover, we collect users requirements from farmers that work
    on our experimental farm in Montoldre (France). This farm, which has been deployed
    from more than 20 years, is an experimental platform used by INRAE to test agronomy
    and Information Technology research works. An agricultural robot is an unmanned
    ground vehicle with sensors and actuators able to safely and autonomously perform
    one or several tasks on a farm field. Such a robot is composed of a locomotion
    part connected to a navigation system, and an agricultural part with either mounted,
    semi-mounted, or towed implements. An agricultural robot can be designed to perform
    a specific task (e.g. weeding, harvesting, etc.) or it can be used as a tool carrier
    offering various equipment combinations (e.g. tillage, seeding, fertilizing).
    The scheduling of autonomous agricultural robots is a logistic application to
    find out the best allocation of robots for their agricultural tasks on fields.
    This allocation is made according to: (1) the compatibility of a robot and its
    equipment with an agricultural task to be done, (2) the temporal availability
    of a robot and its associated equipment, and (3) the compatibility of meteorological
    conditions with an agricultural task. When these conditions are satisfied, the
    output of the scheduling algorithm is a set of reference (i.e. predefined) trajectories
    that must be followed by robots. Usually, the design of a reference trajectory
    is based on simulation models [8]. Other empirical approaches can also be used,
    and are based on analyzing past trajectories of robots. However, some problems
    can arise during the execution of an agricultural task (e.g., a physical object
    blocking robot’s movement, heavy rainfall or snowfall). Consequently, the robot’s
    planned trajectory has to be updated. Thus, an online re-scheduling computation
    service must be executed to find out (whenever possible) the best alternative
    trajectory. The following events may trigger a re-scheduling of planned tasks:
    Robot fault: since robots operate in rural environments, frequently under hard
    weather conditions and on topologically difficult grounds (e.g., ground elevation,
    rocky grounds), they may experience technical problems. Delay alert: robots are
    programmed to follow a scheduled trajectory, but they are also allowed to automatically
    re-adjust their trajectories in order to avoid obstacles (e.g. animals, tree branches,
    rocks) [9]; any trajectory re-adjustment results in delays (see Figure 1). Meteorological
    alert: weather conditions (like heavy rains, thunderstorms, high winds) can impact
    badly a scheduled trajectory. For instance, the spraying task cannot be performed
    during strong wind, and in such a situation a robot must stop its work. Fig. 1:
    A delay event example Show All The aforementioned events may require the re-scheduling
    of tasks, namely: spatio-temporal issues and contextual issues. Spatio-temporal
    issues refer to the lack of respect of the spatio-temporal constraints associated
    with predefined trajectories for one or several robots. These issues occur due
    to robot(s)’ deficiency (i.e., Robot fault event) or an event external to a robot
    but associated with a particular spatial or temporal point (i.e., Delay alert
    event). Contextual issues refer to problems caused by a phenomenon that cannot
    be associated with a particular spatio-temporal point, but that is valid for a
    set of plots and/or technical operations (i.e., Meteorological alert). A smart
    farm information system involves the following stake-holders. Farmers: they have
    to monitor in real-time the trajectories of robots on their plots. They must also
    be alerted in real-time when problems occur. Scheduling experts: they are users
    with logistic skills who set-up scheduling algorithms, to provide the most efficient
    reference trajectories for all plots, robots, and activities. The system must
    provide them details on all executed scheduling tasks in the past and allow them
    to explore and analyze these data. They typically react in time windows of different
    lengths (e.g., 1 hour for re-scheduling operations, a few days for the reconfiguration
    of the scheduling algorithms). Mechatronics engineers: they off-line analyze the
    behaviour of robots, to update and adjust robots settings. The deployment of IoT
    technologies in farms generates big data [10], [11]. For this reason, agricultural
    autonomous robots scheduling systems must be able to handle data characterized
    by the well-known three V’s, namely, Velocity -sensors and network devices produce
    continuous data during the whole day of a robot work. For instance, each robot
    emits 200 odometry records per second that are used to analyze its mechanical
    behaviour by robots experts. Also, the monitoring of robot faults is performed
    in real-time. Volume -since a lot of data are generated with high frequency, huge
    volumes of data are produced, which have to be stored and analyzed. Variety -data
    types fall into different formats, including structured (e.g. robot trajectories),
    semi-structured (e.g. GeoJSON produced by meteorological sensors), and un-structured
    (e.g. photos and videos taken by robots, upon a request from a farmer, in order
    to take appropriate corrective trajectory actions). Consequently, suitable software
    applications are needed for analysing historical data, processing data in real-time,
    and handling different data formats. The scheduling of the fleet of robots must
    support the following types of queries: Analytical queries explore historical
    data. Typical queries include OLAP queries, and Machine Learning algorithms, in
    order to improve the scheduling algorithm. Logistic experts could be interested
    in the duration (e.g., min, max, average) of trajectories across task types, robots,
    weather conditions, and farms. These queries involve data related to the different
    farms, and they are usually computed offline. Continuous queries run over streams
    of data. Continuous queries are automatically triggered with a fixed frequency.
    These queries involve data of a single farm. An example of a continuous query
    is: \"Calculate every minute, the accumulated delay for each robot, over the last
    10 minutes\". Create, Read, Update, Delete (CRUD) queries run over dictionary
    data (e.g., reference trajectories). These queries may use data of different farms
    to check the availability of robots. An example of a CRUD query is: \"Update the
    reference trajectory as consequence of a re-scheduling operation\". Finally, these
    queries feature different time computation constraints ranging from hard real-time
    ( e.g., hard real-time time computation for robot fault queries) to offline (e.g.
    OLAP queries). In our system design, we take advantage of all the economic benefits
    and flexibility of the cloud technologies. On-premises, we propose and implement
    an intermediary effective communication network layer Access network between field
    robots and the cloud. Commonly, robots and wireless sensors do not have the ability
    to be connected to the Internet. Indeed, depending on the location of the farm,
    cellular networks might not have sufficient coverage to support data transmission.
    Therefore, they cannot be connected directly to the cloud. Moreover, the Access
    network must support dynamic configurations, since robots are mobile, and by consequence
    their dynamic location makes it difficult to communicate to the network. One of
    the candidate technologies to be used for the Access network is Wi-Fi. Wi-Fi is
    an operator independent technology that allows the farmer to establish communication
    links with the robots without the presence of cellular networks. The Access network
    must also offer enough bandwidth and high reliability to be able to transmit critical
    real-time data from the robots to the farmer (such as video and images necessary
    for the remote control guidance of robots in case of unexpected or faulty behavior
    of robots). Communications should also offer low latency links especially for
    the real-time commands sent by the farmer to the robots. Therefore, the Wi-Fi
    network should be well designed, i.e. with a good coverage and sufficient number
    of access points, in a way to guarantee these requirements in terms of network
    performance. A deployed control station, managed by the farmer, plays the role
    of a gateway for the Access network in order to offer Internet connection to the
    robots. This control station is reachable through the Wi-Fi network, and is connected
    to the cloud by means of classical protocols such as ADSL, fiber optics, or any
    other type of high speed connection. Therefore, the system must be deployed over
    a three-layer network architecture: Edge-Fog-Cloud. Robots represent the Edge
    layer, the control station of the farmer represents the Fog layer, and servers
    on the Cloud represent the third layer. In the next section, we describe the architecture
    implementing the aforementioned requirements. The transition from the requirements
    to the architecture has not been formalized, but we applied a practical approach
    based on our several years of experience on this topic. Indeed, a formal transition
    needs theoretical software engineering methods using a data-centric vision. A
    preliminary work in this direction is [12]. SECTION III. LambdAgrIoT Architecture
    It has been proved that the Lambda architecture [13] allows to efficiently process
    streaming data and static (warehouse-like) data, e.g., [14], [15]. For this reason,
    we draw upon this architecture, to meet the requirements described in Section
    II. In this paper, we propose a skeleton of a new architecture, called LambdAgrIoT,
    as shown in Figures 2, 7, and 8. LambdAgrIoT is composed of the following five
    layers (see Figure 2). Data producers layer represents data sources deployed in
    the field, i.e., robots and meteorological stations. They produce data that are
    sent to the Message queuing layer. Message queuing layer is in charge of managing
    data (messages) that are exchanged by different layers. Robots also receive data
    from this layer. Speed analysis layer provides tools for analyses of data in a
    real time. The layer is deployed in each farm. Serving layer supports scheduling
    robots and their tasks. Batch analysis layer centralizes all data from all farms
    and it supports the management and the analysis of historical data. Notice that
    this layer is in a very early stage of development and is part of the closest
    future work. These layers are deployed over the edge-fog-cloud network communication
    layers (see Figures 7 and 8). These layers have been deployed in our Montoldre
    experimental farm (a part from the Batch layer that we are finalizing). This real
    deployment confirms the feasibility of our approach, and at the same time we are
    conscious that more advanced experiments should be conducted at large scale, as
    described in Section V. In the following, we detail the main features of each
    layer, and we report the configuration details of machines used for their deployment,
    and the results of some performed tests. A. Data producers layer As we mentioned
    earlier, the two data producers are weather stations and robots. The station delivers
    multiple weather data measurements, such as temperature, humidity, dew point,
    wind speed and direction, wind chill, barometric pressure, rainfall, rain rate,
    UV and solar radiation data, using radio frequency and LAN converter. These data
    are published in a specific topic at the Message queuing layer. Weather data are
    consumed by both the Speed analysis layer using a stream pattern and the Batch
    layer Robots run on Robot Operating System (ROS), which is an open source platform
    for robot software development. It provides a set of functionalities for hardware
    abstraction, low-level device control, and messaging. It comes with a set of external
    libraries, such as rospy and roscpp. The odometry and GPS data acquisition module
    is implemented in Python. These data are acquired 200 times per second, and then
    sent via a socket to the Message queuing layer. Therefore, the Python code represents
    a data producer for the distributed streaming platform deployed at the Message
    queuing layer. The socket is also always listening for new reference trajectories,
    turning into a data consumer, in the case of a re-scheduling operation. Deployment:
    Actually, we have installed one Davis Vantage Pro 2 wireless weather station in
    our farm. We have used our two Adap2e autonomous robots developed by INRAE [16].
    The usage of two robots corresponds to a realistic scenario, since fleets of huge
    number of robots is not yet a matter of fact in the French agriculture context.
    B. Message queuing layer Our system requires (1) a scalable and fault-tolerant
    message delivering in real-time, as well as (2) the Publish/Subscribe and the
    stream interaction patterns. Therefore, we use Apache Kafka. Our choice is also
    motivated by the recent performance analysis of Kafka [17], [18], demonstrating
    high data ingestion rates. In our architecture, data producers (i.e. robots and
    the weather station) publish messages to specific kafka topics (a.k.a. channel).
    A kafka topic is a logical grouping for messages for all the consumers subscribing
    to that topic. The following kafka topics are created: Weather topic: it stores
    data from the weather station. This topic is consumed by the Speed analysis layer
    for real-time analysis and by the Batch layer for storing historical data. Odometry
    low-frequency topic and GPS low-frequency topic: they include data sent by a robot
    every second. These data are used by the Speed layer for real-time analysis. Odometry
    low-frequency topic represents mechatronic data of the robot. GPS low-frequency
    topic represents the real-time trajectory of the robot by the triplet <GPS-coordinates,
    timestamp, idrobot, speed>. Odometry high-frequency topic and GPS high-frequency
    topic: they include data sent by robots every millisecond. They are exclusively
    used by the Batch layer. Scheduled trajectory topic: it includes reference trajectories
    re-scheduled by the algorithm at the Serving layer. Alerts and actions topic:
    it includes alerts computed by the Speed layer and the corrective actions (automatically
    determined by the system or by the farmer). Therefore, data producers for Alerts
    and Actions are deployed in the Speed layer. Consumers are Batch layer and the
    robots, which retrieve from corresponding sub-topics actions they must perform.
    C. Speed layer Three modules compose the Speed layer, namely: the Stream Analysis
    Module, DD-ST Module, and RT Monitoring Dashboard Module. The Stream Analysis
    module consumes data streams produced by data producers (robots, weather station),
    and published in specific kafka topics. The analysis of data streams allows: (1)
    tracking work progress in real time (calculate delays if any) and (2) signaling
    alerts and recommending corrective actions. This module requires scalable in-memory
    computations. For that purpose, we use Apache Spark and Apache Spark Streaming
    [19], [20]. In order to handle spatial data and spatial operators we use Apache
    Sedona. In our architecture Sedona, Spark, and Spark Streaming process data coming
    from Kafka. Currently, we are working on the implementation of alerts generation
    (i.e., robot fault alerts and delay alerts), and corrective actions (i.e., schedule
    update and trajectory update). It’s worth to note that alerts management may be
    implemented at robots, but we choose to handle them at the Speed layer for multiple
    reasons such as, minimal maintenance of robots’ software, and to enable correlation
    analysis with other events. Description and Dictionary data, and Scheduled Trajectories
    (DD-ST) is a transactional spatial database that aims to store data used by the
    system. It is deployed on top of PostgreSQL relational database, implementing
    the PostGIS spatial extension. The database stores among others: reference trajectories,
    geometries of farms’ plots, and multiple robot data. These data are also used
    by the Speed analysis layer to resolve continuous queries and compute alerts (cf.
    Section II). Since the communication network between the farm and the cloud is
    not reliable (typically an ADSL connection), it is not appropriate to query the
    cloud database to meet low-latency requirements. Therefore, we install a local
    replica of the cloud database in the farm. The database is made available as a
    database as a service. Fig. 2: Components of the LambdAgrIoT architecture Show
    All An excerpt of the database conceptual model, in UML is shown in Figure 3.
    The pivot element of the model is the reference trajectory (TrajectoryREF). It
    is associated with exactly one Plot and one Configuration. Configuration models
    a mapping of one robot to at most one equipment and one particular agricultural
    task (Activity) at a time. A robot has several attributes that do not change in
    time (e.g., name, dimensions), and two attributes that are updated by the scheduling
    algorithm, namely Available and PowerAvailable. They represent: (1) the next time
    range where the robot is free for use, and (2) the remaining battery power, respectively.
    Activity includes attributes that define meteorological conditions that must be
    satisfied to do an activity. These attributes values are used to define alerts
    on real-time meteorological data. A trajectory is a sequence of spatial points
    (i.e. coordinates) with a timestamp attribute and other attributes (Point-TimeRF).
    Let us note that a trajectory is split into three sub-trajectories: (1) inside
    a plot (TrajectoryPlotREF), (2) from the warehouse to a plot (and vice versa)
    (TrajectoryWarehouseToPlotREF), and (3) from a plot to another plot (TrajectoryPlotToPlotREF).
    RT Monitoring Dashboard Module is used to analyze and visualize data computed
    in the Stream analysis module. The real-time data visualization application was
    designed to provide a quick and simple way to notify the farmers about alerts
    and to provide a visual analysis tool for the actual trajectories of robots. To
    allow multi-user interaction and to be multi-platform, the software was developed
    as a web application. It is executed partially on the client-side (by any web
    browser), and partially on the server-side by the Apache web server. The user
    does not need to install any native application on his device but needs only access
    the web page served by the local web server installed on the edge device in the
    farm. Through PHP scripts, the web server can directly consume Kafka data streams
    produced by Spark analysis. Furthermore, the same PHP script, employing Server-Sent
    Events (SSE) technologies, can forward Kafka streaming data to any connected browser
    in real-time. The SSE allows the browser to get a notification for each new data
    available without multiple HTTP requests. In this way, the web page is automatically
    updated whenever the data change. The web interface allows farmers to visualize
    at glance all information about the execution of the scheduled tasks. It is composed
    on three main panels (cf., Figure 4): (1) Interactive and dynamic Gantt, which
    is responsible for the visualization of the advancement of each robot in its task;
    (2) Dynamic graphical charts, which visualize the numerical data (weather, odometry,
    and speed); (3) Interactive and dynamic map, which visualizes the real-time trajectories
    of robots and their reference trajectories. Yellow color is used for the reference
    trajectory, and red - for the real-time trajectory, then, using color blending,
    the real-time trajectory will be marked orange when the robot is in the right
    trajectory. As suggested in [21], our geo-visualization system uses multiple coordinates
    views, which consists in providing different synchronized visual representations
    of the same data. When the farmer clicks on a particular line of the Gantt diagram,
    the map is centered and zoomed in the plot where the robot is working. The Gantt
    diagram linked to graph visualizations has been quite investigated in literature,
    but to the best of our knowledge no work proposes to synchronize them with maps.
    This coordination is inspired from the visual analytics mantra [22], \"Overview
    first, zoom and filter, then details on-demand\". It allows the farmer to have
    a global vision of the scheduled tasks using the Gantt diagram (Overview first),
    where the temporal dimension is shown for different robots, but spatial and numerical
    details of the real-time trajectories are not shown. Then, using the Gantt diagram,
    the farmer can zoom on the trajectory of a particular robot (filter) and see information
    about its work (details on-demand) using the map. Fig. 3: Excerpt of the UML model
    of the DD-ST module Show All Deployment: For this layer we use Spark Streaming
    (version 2.3.3) running on java 1.8 installed on a one machine, running on Windows
    (version 10) as the operating system. The machine has 32GB RAM, quad core 64-bit
    i5 processor. To test the system, we have implemented a continuous query that
    generates an alert that could be visualized in the web interface. The query computes
    the average speed of a robot, based on its odometry data delivered within a window
    of the last 30 seconds. The aggregation is computed by Spark in a incremental
    way (using micro-batches). Each time a new data arrives, a micro-batch updates
    the aggregation computation. Each micro-batch takes 0,3 seconds that confirms
    the real-time feasibility of our approach. A video showing the functioning of
    the web interface is shown at this URL https://youtu.be/e52gNgseQFg. D. Serving
    layer The Scheduling service of robots’ tasks is composed of two parts, namely,
    (1) the logistical decisions and (2) the trajectory design. The former, called
    extra-plot scheduling, is mainly the assignment of robots to perform necessary
    tasks on plots. The latter, called intra-plot scheduling, is mainly the movement
    of robots inside a plot to perform tasks. Intra-plot scheduling can be done beforehand,
    which means that for each pair robot-equipment, called configuration, and for
    each plot, the trajectory inside the plot can be designed in advance. Then, when
    using a configuration for a plot, the extra-plot scheduling can determine, from
    intra-plot scheduling, time and energy spent to perform the task. The extra-plot
    scheduling goal is to satisfy a set of demands that are emitted by the human operators.
    A demand i is a request for a task ti to carry out in a time window [li;ui], with
    a preferred starting date oi, and a priority pi to indicate the importance of
    the demand. The scheduling is mainly to decide when and with which robot(s) to
    fulfill each demand. The quality of a solution is measured by a prize Pi for each
    demand i that depends on the date wi its task is scheduled to start and its priority:
    the closer wi is to the preferred starting date oi, the closer is the prize Pi
    to the priority pi. The scheduling problem aims at finding a solution that maximizes
    the sum of all the prizes Pi. As described in the previous sections, new demands
    possibly come on the fly. Thus, we focus here on online scheduling: only a subset
    of demands is known at any time, and the algorithm adapts in real-time the schedule
    with the evolution of the demands. Our algorithm provides only the next reference
    trajectory of each robot, which should satisfy only some of the demands. Fig.
    4: RT Monitoring Dashboard Module example in the current deployment Show All A
    reference trajectory is here a circuit starting at the warehouse where the robot
    is first set up with an equipment and refilled, then sent successively to many
    plots to achieve the same task, and ultimately, returns to the warehouse where
    its next trajectory is computed. Finding the next reference trajectory is modeled
    as a mixed integer linear program (MILP), an optimization problem that can be
    solved by linear program solvers like CPLEX with C++. As input, this program needs,
    for each robot and equipment, the date it will be available, and as output, it
    provides the next reference trajectory of each robot (cf. Figure 5). Fig. 5: Finding
    next reference trajectories with online scheduling Show All At the first iteration
    (i.e., a call) of the algorithm, a trajectory is assigned to each robot. At the
    next iterations, a trajectory is assigned only to the next available robot in
    the warehouse. As the algorithm works online, it could lead to a blocking situation,
    e.g. decisions of iteration k could make impossible to satisfy some demand at
    iteration k + j. To prevent this, a \"simulation\" of the next decisions of the
    online algorithm is run: based on the estimated availability date of each robot,
    the online algorithm is run for iteration k + 1, k + 2… until all the demands
    known at iteration k are satisfied. If a blocking situation is found, the priorities
    of the demands are adjusted and a new simulation is run, until finding a non blocking
    solution (cf. Figure 5). This algorithm can also deal with unpredictable events.
    Indeed, meteorological alerts, robots’ failures, or plants’ disease detection,
    can be seen by the online algorithm as robots that go back to the warehouse (some
    tasks are stopped) and new demands that arise (uncompleted tasks become new demands,
    and some events can produce new demands). It is also necessary to decide which
    robots to interrupt in their mission to make them available to adapt to these
    events. One approach (cf. Figure 6) is to select, among many recall scenarios,
    the one providing the best solution with the online algorithm from Figure 5. Fig.
    6: Management of unpredictable events with online scheduling Show All Solving
    the whole scheduling problem at once is difficult since it requires long computation
    time, using either linear programming (as we begin to do) or Petri net for instance.
    To reduce computation time, in this work we choose an iterative approach, and
    we have added constraints to our model to prevent most of the iteration blocking
    situations. Deployment: Our online scheduling algorithm has been deployed on a
    computer with Intel Core i5-8400 CPU @ 2.80GHz × 6, 15 GB RAM, Ubuntu 20.04.2
    LTS 64-bit operating system, and using CPLEX version 12.10.0.0 for linear programming
    solving. We tested realistic scenarios of a farm with 6 plots, 3 to 6 equipments,
    3 to 6 robots, and 3 to 8 configurations. Execution times of the algorithm for
    these scenarios are under one second, which provides us a good initial perspective
    about the solution construction by the online scheduling. However, more experiments
    must be done to test the algorithm using larger input data (number of robots,
    plots, etc.). E. Network Architecture As mentioned in Section II motivated by
    our real experience-based ascertainment that most of French farms are not deployed
    with recent network communication protocols such as 5G, fibre-optic, etc, we use
    a Wi-Fi network to ensure a wireless connection between the robots and the farmer.
    This allows the farmer to have a permanent, low budget,and operator independent
    communication network to control and supervise the robots. Figure 7 and Figure
    8 show the three-layer network architecture: Edge-Fog-Cloud. Robots represent
    the Edge layer, the farmer control station represents the Fog layer, and the cloud
    servers represent the Cloud layer. In our case, the Fog plays a crucial role.
    It offers Internet connection to the robots, offloads processing from the robots,
    and most importantly, allows real-time interaction between the farmer and the
    robots. The proximity and the quality of the Wi-Fi network must allow real-time
    interaction that guarantees the application requirements (i.e., low delay, high
    data rate, low data loss). In this architecture, we can distinguish two types
    of networks: Access network and Collect network (Figures 7 and 8). The Access
    network ensures quality communication links between the robots (Edge layer) and
    the farmer (Fog layer). This is done through the Wi-Fi network. The Collect network
    offers a communication link between the farmer and the cloud servers for further
    analysis and storage. This is done through any type of broadband connection (e.g.
    ADSL, Fiber, Cable). The performance on both networks will have a direct impact
    on the size and type of data that can be exchanged at any time between the robots
    and other entities (like farmers and cloud servers). As depicted in Figure 7,
    Wi-fi routers placement is important in order to enlarge the coverage area, and
    minimize non-coverage areas. SECTION IV. Related work Research papers cover mainly
    different scopes (as surveyed in [23]): (1) capturing, storing, and analyzing
    data for a specific purpose [24], [25], [26], (2) agricultural machinery management
    [27], [28], [29] , and (3) scheduling robots. Fig. 7: The LambdAgrIoT network
    architecture Show All Fig. 8: LambAgrIoT network and modules mapping Show All
    Capturing, storing, and processing data. Collected data must be managed appropriately
    in order to extract insights, and support farmers. In [24], authors stress that
    early forecasting of farms’ products is important for market planning and for
    growers and exporters to plan labour, bins, as well as storage and purchase of
    packing materials. Forecasts are basically based on continuous check of the production.
    In [25], the authors describe the deployment of sensors in chicken coops in order
    to ensure a healthy environment via monitoring ambient air quality. The paper
    work [26] focuses on the use of IoT technologies in Food supply chain farm to
    fork, starting with production phase (smart farming, livestock management), transportation
    and distribution phases, and finally retail phase (loyalty cards, smart trolleys).
    Agricultural machinery management. As highlighted in the literature review [28],
    many research works address agricultural machinery management tasks such as capacity
    planning, tasks’ times planning, scheduling, route planning, and performance evaluation.
    Robots’ routes planning is complex, and is usually based on implementing and assessing
    simulations. In [27] , the authors create and model simulated robots’ trajectories
    on ROS Gazebo simulation tool. This allows them to test robots’ trajectories using
    first real Digital Elevation Model (DEM) for 3-D representation of the terrain,
    and second the effectiveness of obstacles’ encounters detection by robots’ LiDAR
    sensors. In [29], authors present also a simulation tool for minimizing the worked
    distance of agricultural vehicles using their real time geographical position.
    However, this optimization tool is not designed for a fleet of vehicles. In [30],
    the authors propose a rescheduling algorithm for a fleet of vehicles. This algorithm
    uses real time data issued from the vehicles (speed and GPS) to define the new
    reference trajectory. Scheduling is by nature a difficult optimization problem
    [31]. Scheduling a fleet of robots in an agricultural system adds more complexity,
    as the scheduling must take into account new constraints, and outputs new schedule
    in real-time. The vehicle routing problem with time windows (VRPTW), is also proved
    to be a hard optimization problem [32]. Thus, one common approach is to use metaheuristics
    instead of exact optimization methods, like [33] that uses a hybrid genetic algorithm
    for a harvest scheduling problem. In addition, to find a solution robust enough
    to resist to hazards, such as delay or robot failure that will inevitably occur,
    high computing would be necessary to find solutions for a set of scenarios [34].
    Online scheduling usually needs to be more reactive and less predictive [35] than
    offline scheduling, because less time is available to test many scenarios. The
    optimization techniques and the problem formulations can thus be different. Notably,
    related to our optimization problem, we can notice the DS-VRPTW (Dynamic and Stochastic
    VRPTW, i.e., VRPTW with stochastic customer demands) solved by online methods
    like the GSA (Global Stochastic Assessment) algorithm that is based on a stochastic
    programming heuristic [36]. A survey of works on scheduling of agricultural vehicles
    is presented in [28]. They classify scheduling tasks according to used decision
    methods, such as simulation or analytical optimization. They also highlight the
    online capabilities of these scheduling methods, based on data collected in real
    time by sensors installed in the field and on robots [5]. In all research directions,
    the adoption of new information technologies is very important since it provides
    better support to stake-holders. In [3], the authors survey literature and evaluate
    the adoption of new IT technologies, such as big data, computer vision, artificial
    intelligence, blockchain and fuzzy logic in the smart agriculture field. In [37],
    the authors survey literature on big data applications in Smart Farming which
    turn farm management and farm processes into highly data driven and data enabled
    applications. The data chain includes data capture, data storage, data transfer,
    data transformation, data analytics, and data marketing. Few related works use
    big data architecture for monitoring farming tasks. In [38], the authors propose
    a big data architecture for processing weather data and aerial images of crop
    farms. The architecture implements a speed layer (e.g. Kafka, Samsa, and Druid
    technologies) and a batch layer (e.g. Hadoop, Spark technologies), in order to
    set up a smart data enabled irrigation system. In [39], authors have adopted Lambda
    architecture, which guarantees the scalable and fault-tolerant of the real-time
    data processing. They develop a cloud-based Smart farming management system, applied
    to the Wallonia region of Belgium. Our work aims to not only manage the massive
    data coming from IoT devices, but also control and schedule tasks through distributed
    systems using smart robots. Recently, [23] and [6] survey related work concerning
    multi-agent based allocation and robots collaboration. [6] proposes a general
    multi-agent cloud framework, but not implementation has been provided. The lack
    of successfully proved data and network architectures in this scheduling context
    has been also identified in the survey work of [5], and [4]. A review of technologies
    supporting the Internet of Vehicles (loosely related to our work) has been published
    recently [40]. SECTION V. Conclusion and future work Nowadays autonomous agricultural
    robots are more and more frequently used. They offer an important solution for
    the agro-ecology transition, as they have low impact on the environment (light,
    possibility to operate in fleet), and they are able to perform repetitive and
    accurate farming operations over a long time period. These autonomous vehicles
    produce huge volumes of data, which combined with other smart farming IoT devices,
    play a crucial role for agriculture stake-holders to analyze the agricultural
    practices. In this paper, we detail requirements for real-life scheduling autonomous
    agricultural robot systems and propose a skeleton of Big Data IoT architecture,
    based on the Lambda architecture, to fulfill these requirements. Our current work
    is directed to move our skeleton architecture towards a full-featured and effective
    one, and it consists in: finalizing the implementation of the batch layer, and
    in particular the definition of the multidimensional model of the spatial data
    warehouse, and connecting all the layers. As future work about data management
    issues, we plan to: (1) extend the scheduling algorithm to provide as an output
    real trajectories (and not simulated ones), using a new top-k robots trajectories
    algorithm; (2) provide more complete experiments to evaluate our proposal in other
    real case studies. Moreover, with multiple robots connected to the same Access
    network, guaranteeing performance with the presence of interference in the Wi-Fi
    network is not an easy task. Therefore, we will work on a cross-layer network
    design that allows the application to be aware of the quality and capacity of
    the communication links, in order to adapt its requirements accordingly. ACKNOWLEDGEMENTS
    This work is supported by the French National Research Agency project ANR-19-LCV2-0011
    Tiara, and French government IDEX-ISITE initiative 16-IDEX-0001 (CAP 20-25). Authors
    Figures References Citations Keywords Metrics More Like This Timed C: An Extension
    to the C Programming Language for Real-Time Systems 2018 IEEE Real-Time and Embedded
    Technology and Applications Symposium (RTAS) Published: 2018 Programming Paradigms
    for Real-Time Systems 2014 IEEE 17th International Symposium on Object/Component/Service-Oriented
    Real-Time Distributed Computing Published: 2014 Show More IEEE Personal Account
    CHANGE USERNAME/PASSWORD Purchase Details PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS
    Profile Information COMMUNICATIONS PREFERENCES PROFESSION AND EDUCATION TECHNICAL
    INTERESTS Need Help? US & CANADA: +1 800 678 4333 WORLDWIDE: +1 732 981 0060 CONTACT
    & SUPPORT Follow About IEEE Xplore | Contact Us | Help | Accessibility | Terms
    of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | IEEE Privacy
    Policy A not-for-profit organization, IEEE is the world''s largest technical professional
    organization dedicated to advancing technology for the benefit of humanity. ©
    Copyright 2024 IEEE - All rights reserved."'
  inline_citation: '>'
  journal: Proceedings - IEEE International Enterprise Distributed Object Computing
    Workshop, EDOCW
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: Towards an Architecture for Agricultural Autonomous Robots' Scheduling
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Guntaka M.L.
  - Saraswat D.
  - Langenhoven P.
  citation_count: '0'
  description: There is a growing demand for farm management systems that can track
    plant growth, allow automatic control and aid in real-time decision making to
    make indoor farms more viable. IoT is being applied to meet these needs and numerous
    researchers have created prototypes for specific purposes with sensors, algorithms,
    and automations. There is, however, a critical need for comprehensive large-scale
    experiments to test the aspects of such systems' availability, scalability, reliability,
    especially the low-cost ones. The purpose of this paper is to develop a low-cost
    IoT ecosystem using off-the-shelf components in an indoor farm setting to move
    from a prototype to a real-world testbed for experiments and address some of the
    challenges identified. This testbed realized collection and monitoring of nutrient
    solution, light intensity, environmental variables, images, and corresponding
    actuation of LED, irrigation, camera modules using commercially available sensors,
    components and Raspberry Pis, Arduino microcontrollers for computing. It featured
    a cloud-based dashboard for remote monitoring and control. The developed testbed
    is used to successfully investigate the effects of nutrition, lighting, and density
    on growth of microgreens guided by a statistical design and can motivate, serve
    as a reference to interested growers. This study complements and expands the previous
    works on building low-cost IoT farm systems. While the experience with the testbed
    indicates its importance in conducting research in a practical setting, it also
    points to some major lessons from the field which are described in detail in the
    paper.
  doi: 10.13031/aim.202100617
  full_citation: '>'
  full_text: '>

    "Publications Included Search Help About Contact Us Join   If you are not an ASABE
    member or if your employer has not arranged for access to the full-text, Click
    here for options. IoT based low-cost testbed for precision indoor farming Published
    by the American Society of Agricultural and Biological Engineers, St. Joseph,
    Michigan www.asabe.org Citation:  2021 ASABE Annual International Virtual Meeting  2100617.(doi:10.13031/aim.202100617)
    Authors:   Madhu Lekha Guntaka, Dharmendra Saraswat, Petrus Langenhoven Keywords:   Automation,
    edge computing, hydroponics, indoor farming, internet of things, microgreens.
    Abstract. There is a growing demand for farm management systems that can track
    plant growth, allow automatic control and aid in real-time decision making to
    make indoor farms more viable. IoT is being applied to meet these needs and numerous
    researchers have created prototypes for specific purposes with sensors, algorithms,
    and automations. There is, however, a critical need for comprehensive large-scale
    experiments to test the aspects of such systems'' availability, scalability, reliability,
    especially the low-cost ones. The purpose of this paper is to develop a low-cost
    IoT ecosystem using off-the-shelf components in an indoor farm setting to move
    from a prototype to a real-world testbed for experiments and address some of the
    challenges identified. This testbed realized collection and monitoring of nutrient
    solution, light intensity, environmental variables, images, and corresponding
    actuation of LED, irrigation, camera modules using commercially available sensors,
    components and Raspberry Pis, Arduino microcontrollers for computing. It featured
    a cloud-based dashboard for remote monitoring and control. The developed testbed
    is used to successfully investigate the effects of nutrition, lighting, and density
    on growth of microgreens guided by a statistical design and can motivate, serve
    as a reference to interested growers. This study complements and expands the previous
    works on building low-cost IoT farm systems. While the experience with the testbed
    indicates its importance in conducting research in a practical setting, it also
    points to some major lessons from the field which are described in detail in the
    paper. (Download PDF)    (Export to EndNotes) Share Facebook X Email LinkedIn
    WeChat     Library Home Search Obtaining Full-Text E-mail Alert ASABE Home Authors,
    please use the Guide for Authors when creating your articles.  Public Access Information   =
    Public Access (PA)   = PA Limited Time   = Open Access   = Contact Us For Purchase  American
    Society of Agricultural and Biological Engineers 2950 Niles Road, St. Joseph,
    MI 49085 Phone: +12694290300 Fax: +12694293852 Copyright © 2024 American Society
    of Agricultural and Biological Engineers"'
  inline_citation: '>'
  journal: American Society of Agricultural and Biological Engineers Annual International
    Meeting, ASABE 2021
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: IoT based low-cost testbed for precision indoor farming
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Tekinerdogan B.
  - Verdouw C.
  citation_count: '50'
  description: A digital twin is a digital replica of a physical entity to which it
    is remotely connected. A digital twin can provide a rich representation of the
    corresponding physical entity and enables sophisticated control for various purposes.
    Although the concept of the digital twin is largely known, designing digital twins
    based systems has not yet been fully explored. In practice, digital twins can
    be applied in different ways leading to different architectural designs. To guide
    the architecture design process, we provide a pattern-oriented approach for architecting
    digital twinbased Internet of Things (IoT) systems. To this end, we propose a
    catalog of digital twin architecture design patterns that can be reused in the
    broad context of systems engineering. The patterns are described using the well-known
    documentation template and support the various phases in the systems engineering
    life cycle process. For illustrating the application of digital twin patterns,
    we adopt a case study in the agriculture and food domain.
  doi: 10.3390/s20185103
  full_citation: '>'
  full_text: '>

    "This website uses cookies We use cookies to personalise content and ads, to provide
    social media features and to analyse our traffic. We also share information about
    your use of our site with our social media, advertising and analytics partners
    who may combine it with other information that you’ve provided to them or that
    they’ve collected from your use of their services. Consent Selection Necessary
    Preferences Statistics Marketing Show details                 Deny Allow selection
    Allow all    Journals Topics Information Author Services Initiatives About Sign
    In / Sign Up Submit   Search for Articles: Sensors All Article Types Advanced   Journals
    Sensors Volume 20 Issue 18 10.3390/s20185103 Submit to this Journal Review for
    this Journal Propose a Special Issue Article Menu Subscribe SciFeed Recommended
    Articles Related Info Links More by Authors Links Article Views 9013 Citations
    49 Table of Contents Abstract Introduction Background and Key Concepts Research
    Methodology Domain Analysis of Digital Twins Architecture Design Patterns for
    Digital Twins Case Study Research Conclusions Author Contributions Funding Conflicts
    of Interest References Altmetric share Share announcement Help format_quote Cite
    question_answer Discuss in SciProfiles thumb_up Endorse textsms Comment first_page
    settings Order Article Reprints Open AccessArticle Systems Architecture Design
    Pattern Catalog for Developing Digital Twins by Bedir Tekinerdogan 1,* and Cor
    Verdouw 1,2 1 Information Technology Group, Wageningen University and Research,
    P.O. Box 35, 6700 AA Wageningen, The Netherlands 2 Mprise, P.O. Box 598, 3900
    AN Veenendaal, The Netherlands * Author to whom correspondence should be addressed.
    Sensors 2020, 20(18), 5103; https://doi.org/10.3390/s20185103 Submission received:
    16 July 2020 / Revised: 29 August 2020 / Accepted: 4 September 2020 / Published:
    7 September 2020 (This article belongs to the Special Issue IoT for Smart Food
    and Farming) Download keyboard_arrow_down     Browse Figures Review Reports Versions
    Notes Abstract A digital twin is a digital replica of a physical entity to which
    it is remotely connected. A digital twin can provide a rich representation of
    the corresponding physical entity and enables sophisticated control for various
    purposes. Although the concept of the digital twin is largely known, designing
    digital twins based systems has not yet been fully explored. In practice, digital
    twins can be applied in different ways leading to different architectural designs.
    To guide the architecture design process, we provide a pattern-oriented approach
    for architecting digital twin-based systems. To this end, we propose a catalog
    of digital twin architecture design patterns that can be reused in the broad context
    of systems engineering. The patterns support the various phases in the systems
    engineering life cycle process, and are described using a well-defined pattern
    documentation template. For illustrating the application of digital twin patterns,
    we adopt a multi-case study approach in the agriculture and food domain. Keywords:
    digital twins; system engineering; system architecture design; smart agriculture;
    internet of things; farm management systems; remote sensing and control; virtualization
    1. Introduction A digital twin refers to a digital replica of potential or actual
    entities (i.e., physical twin) [1,2]. It provides rich representations of the
    corresponding physical entity and enables sophisticated control for various purposes.
    A key characteristic of a digital twin is that it is connected to a physical entity
    which is typically established by the use of real-time data using sensors. Digital
    twins are made possible through the integration of various technologies such as
    Internet of Things [3,4,5], artificial intelligence, machine learning, and data
    science, which enable living digital simulation models to be created that reflect
    the changes of the physical counterparts. Hereby, a digital twin continuously
    learns and updates itself using data from sensors or external entities. The key
    motivations for adopting digital twins are to be able to design, test, manufacture,
    and use the virtual version of the systems [1]. In the industrial sector, for
    example, digital twins can be used to optimize the operation and maintenance of
    physical assets and manufacturing processes. Overall, digital twins can be applied
    to a broad range of application domains, including manufacturing, aerospace, smart
    farming, healthcare, and the automotive industry. Although the concept of digital
    twins has received increased interest, designing digital twins has not yet been
    fully explored. The design of digital twin-based systems involves consideration
    of a physical entity, a virtual entity, and the connection among these. Because
    the concept consists of a view of both virtual and physical elements, we can consider
    this as a systems engineering approach that adopts a holistic perspective for
    developing a system to meet multidisciplinary stakeholder goals. An important
    asset in systems engineering is the system architecture that defines the gross
    level, systemic structure of the system. The system architecture defines the gross-level,
    systemic structure, behavior, and views of a system, and is typically documented
    using a formal description and representation of a system, organized in a manner
    that supports reasoning about the structures and behaviors of the system. The
    system architecture consists of system components and the sub-systems that work
    together to implement the overall system. In a digital twin-based system, the
    system architecture includes the two key components of the digital twin and the
    physical twin. Depending on the context and overall purpose, in practice, digital
    twins can be applied in different ways, thus leading to various architectural
    designs. Designing an architecture from scratch is not easy and requires a thorough
    background of both the application domain and the architecture design and documentation
    principles. To leverage design expertise and support reuse, the software and systems
    engineering community have introduced design patterns that can be applied at different
    levels in the system development lifecycle, including the architecture design,
    detailed design, and the code. A design pattern is a documented best practice
    and generic solution to recurring problems. Currently, designers of digital twin-based
    systems appear to rely on informal design practices to describe the architectures
    of the configurations of digital twin components that make up the overall system.
    To guide the architecture design process and leverage reuse, we provide a pattern-oriented
    approach for architecting digital twin-based systems. To this end, we propose
    a set of digital twin architecture design patterns that can be reused to design
    the architecture of a system that meets the corresponding digital twin requirements.
    The patterns are described using the well-known pattern templates of context–problem–solution.
    For illustrating the application of the digital twin patterns, we adopt a case
    study in the agriculture and food domain derived from the European IoF2020 project.
    The remainder of this paper is organized as follows. In Section 2 we provide the
    background of digital twins and architecture design. Section 3 presents the research
    methodology for discovering and modeling the digital twin pattern catalog. Section
    4 presents the domain analysis process for digital twins that is used as a basis
    for describing the patterns. Section 5 presents the digital twin pattern catalog.
    Section 6 presents the discussion, and finally, Section 7 concludes the paper.
    2. Background and Key Concepts Developing architecture design patterns requires
    an understanding of several independent but related domains, including systems
    engineering, architecture design, and architecture design patterns. We provide
    the background on these in the following sub-sections. 2.1. Systems Engineering
    Systems engineering is a broadly adopted concept that includes the conception,
    design, development, production, and operation of physical systems. According
    to International Organization for Standardization and the International Electrotechnical
    Commission (ISO/IEC 42010) [6], the notion of a “system” is defined as a set of
    components that accomplishes a specific function or set of functions. The notion
    of systems engineering is defined as “an interdisciplinary approach to translating
    users’ needs into the definition of a system, its architecture and design through
    an iterative process that results in an effective operational system. Systems
    engineering applies over the entire life cycle, from concept development to final
    disposal” [7,8]. In general systems are not standalone and interact with its environment,
    which may include other systems, users, and the natural environment. A further
    characteristic of a system is that it is usually composed of a variety of system
    elements including hardware, software, firmware, people, information, techniques,
    facilities, services, and other support elements [7,8]. The person or role who
    supports this transdisciplinary approach and applies the systems engineering process
    is defined as a systems engineer. In particular, the systems engineer elicits
    and translates customer needs into specifications that can be realized by the
    system development team. As such, a systems engineer aims to ensure the elements
    of the system fit together to accomplish the objectives of the whole, and ultimately
    satisfy the needs of the customers and other stakeholders who will acquire and
    use the system. A system is developed for or impact different stakeholders. A
    stakeholder is defined as an individual, team, or organization with interests
    in, or concerns relative to, a system. A concern is defined as a matter of interest
    in the system that could be functional or related to quality issues. Architectural
    drivers define the concerns of the stakeholders that shape the architecture. To
    ensure the development of successful systems that meet the stakeholder concerns,
    systems engineering is performed based on a systematic life cycle process beginning
    early in conceptual design and continuing throughout the life cycle of the system
    through its manufacture, deployment, use, and disposal. A systems engineering
    (SE) process defines the primary activities that must be performed to implement
    systems engineering. Figure 1 shows the generic ISO/IEC Systems Lifecycle [7]
    including the key stages of the systems engineering process. The concept stage
    identifies and explores the stakeholders’ needs and the enabling technologies
    to provide a high-level, preliminary concept for the system. The development stage
    elaborates on the selected concept, and defines and realizes a system of interest
    (SOI). The resulting SOI should meet the stakeholder requirements and can be produced,
    utilized, supported, and retired. The conceptual representation of the systems
    architecture is developed in the concept stage and is further elaborated and designed
    in the development stage. The system is produced or manufactured during the production
    stage. During this stage, product modifications may still be required to resolve
    production problems, reduce production costs, or enhance product or system capabilities.
    The utilization stage is the stage in which the system is operated in its intended
    environment to deliver its intended services. The support stage is the stage in
    which the system provides services that enable continued operation. The retirement
    stage is the stage in which the system and its related services are removed from
    operation. Figure 1. ISO/IEC 15288 System Lifecycle with the key lifecycle stages
    [9]. 2.2. Architecture Design Every software-intensive system has a software architecture,
    whether it is complex or simple. The architecture design is one the earliest and
    likewise the most relevant artefact that impacts the subsequent artefacts in the
    systems engineering lifecycle process. Designing the architecture requires a thorough
    insight in the various quality concerns and their trade-offs [1,9,10]. A systems
    architecture describes the components of a system, interactions among components,
    and the interaction of a system as a whole with its environment. A systems architecture
    is an abstract representation that identifies the higher-level structure of a
    system and is important for supporting communication among stakeholders, guiding
    design decisions, supporting the subsequent development process, and analysis
    of an overall system. The ISO/IEC 42010 Recommended Practice for Architectural
    Description of Software-Intensive Systems [6] defines architecture as the fundamental
    organization of a system embodied in its components, and their relationships to
    each other and to the environment, and the principles guiding its design and evolution.
    In recent decades, the architecture design discipline has seen the rapid development
    of applied approaches in architecture modeling, architecture design methods, and
    software architecture evaluation. With these methods and techniques, the system/software
    architect makes a wide range of design decisions that lead to the selection of
    a particular design alternative. In this paper we focus on the design of architectures,
    and herewith architecture design patterns for digital twins, which we elaborate
    on in the next sub-section. 2.3. Architecture Design Patterns Solving a problem
    usually does not require the development of a new solution, and the provided solution
    is often not completely distinct from earlier proven solutions. An expert recalls
    earlier similar problems and subsequently tries to reuse the proven solution.
    This combination of recurring problems and generic solution templates for a given
    context is common to many different domains including systems architecture design.
    Patterns help to build on the collective experience of experts in that domain
    and capture existing well-proven experience. As such, they help to promote good
    design practice. Design patterns play an important role in the engineering design
    process and can be applied at different levels in the lifecycle including architecture
    design, detailed design, and the code. The idea of architectural patterns and
    recording design knowledge in a reusable and canonical form can be traced to Christopher
    Alexander [11] who proposed the adoption of patterns in the context of the architecture
    of buildings. In his book The Timeless Way of Building he identifies a catalog
    of patterns that can be applied for designing buildings, neighborhoods, and even
    whole cities. The underlying paradigm of Alexander is to design so-called living
    places that do not only fulfil functional requirements but also address important
    quality factors that imbue buildings with comfort and beauty. The notion of patterns
    was subsequently applied to software engineering, as initiated by Gamma et al.
    with their seminal book Design Patterns—Elements of Reusable Object-Oriented Software
    [12]. The patterns in this book leaned heavily on Alexander’s style to describe
    patterns but were focused on object-oriented software development. Architectural
    patterns are similar to software design patterns but have a broader scope. An
    architectural pattern is a general, reusable solution to a commonly occurring
    problem in software architecture within a given context [13]. The relationship
    among the above topics of systems engineering, architectural design, and architectural
    design patterns is shown in Figure 2. The figure shows that the development of
    digital twin-based systems is, in essence, a systems engineering activity. Like
    any system, a digital twin-based system has an architecture that is designed using
    architectural patterns. In our study we present a catalog of system architecture
    digital twin patterns. These patterns are used in and related to the lifecycle
    stages that we presented in Figure 1. Figure 2. Metamodel for system architecture
    digital twin patterns. 3. Research Methodology We adopted a systematic research
    methodology to derive the architecture design patterns for digital twins. The
    key steps are shown in the workflow in Figure 3. Figure 3. Adopted research methodology.
    In the first step we provide a thorough analysis of the digital twin literature
    to derive the key concepts, and the common and variant properties and scenarios.
    The concept of digital twins is relatively new and as such designing systems based
    on digital twins is not yet mature. Because digital twins build on the notion
    of control systems, the domain analysis process also focused on the control systems
    domain as it is observed, for example, in production control systems. The result
    of the domain analysis process is a domain model that defines the relationships
    among the key concepts. The domain analysis process is followed by the design
    and analysis of multiple case studies in which digital twins were applied. In
    this analysis we identify where digital twins have been applied or aimed to be
    applied. In fact, this step aims to discover patterns rather than inventing these
    from scratch. The case study was carried out as part of the European IoF2020 project
    in close interaction with the involved business partners [14]. The project included
    19 IoT use cases that were organized in five coherent trials that aim to address
    the most relevant challenges for the concerned sub-sector [15]. The use case architectures
    were modelled based on an architecture framework of IoT-based food and farm systems
    [16]. Most of these case studies address the implementation of digital twins but
    implicitly and in different ways. We selected three cases for illustrating each
    of the digital twin patterns. The detailed descriptions are shown in Table 1.
    Table 1. Overview of the adopted use cases. Using the above three case studies,
    expert knowledge was distilled from the proven solutions which were compared to
    the domain model and analyzed, and then explicitly documented in a reusable format.
    An additional input to the pattern identification and documentation process is
    the literature on existing software and systems design patterns. Some of the identified
    digital twin patterns build on or resemble existing design patterns. The remainder
    of the paper introduces the results following the research steps as described
    above. 4. Domain Analysis of Digital Twins Domain analysis can be defined as the
    process of identifying, capturing, and organizing domain knowledge about the problem
    domain with the purpose of making it reusable when creating new systems. The term
    domain is defined as an area of knowledge or activity characterized by a set of
    concepts and terminology understood by practitioners in that area. Conventional
    domain analysis methods consist generally of the activities Domain Scoping and
    Domain Modeling. 4.1. Domain Scoping Domain Scoping identifies the domains of
    interest, the stakeholders, and their goals, and defines the scope of the domain.
    An important activity hereby is the identification of the primary studies from
    which the concepts are derived. There are now an increasing number of publications
    on digital twins. We have selected the studies that explicitly discuss the design
    of digital twins and that were pioneering. The selected list of primary studies
    that we used to analyze the concept of digital twins and, in particular, the design
    of digital twins are as follows: [1,14,17,18,19,20,21,22]. 4.2. Key Concepts In
    our domain analysis process, we focused on definitions, concepts, and design of
    digital twins. A digital twin is basically a digital replica of a real-life object
    to which it is remotely connected [1,23]. The domain scoping is followed by the
    domain modeling process which is the activity for representing the domain or the
    domain model. Typically a domain model is formed through a commonality and variability
    analysis to concepts in the domain. The concept of digital twins has increasingly
    become an area of interest to support the development and analysis of smart systems.
    Various studies in the literature define a digital twin. However, it is also worthwhile
    to indicate what a digital twin is not, that is, the misconceptions about the
    term, which have also been discussed in the literature. The various views and
    misconceptions about the digital twin concept is shown in Figure 4. In common
    with all of these views is that they distinguish a digital object from a physical
    object, while indicating there is a relationship between these. There seems to
    be an agreement on the notion of digital object and physical object, but the semantics
    for the relationship are different. The relationship between the digital object
    and physical object may or may not be automatic [1]. In addition, in the list
    of definitions presented later, only the case in which a digital object is automatically
    related to the physical object is relevant to the notion of digital twins. Ideas
    beyond these automated and synchronized states of both objects are considered
    to be misconceptions in the strict sense. In the first view of Figure 4, digital
    model, digital object, and physical object are loosely connected and the synchronization
    or data flow between these occurs through manual intervention. There is no automated
    translation or interpretation between both objects. In the second view, the digital
    generator, a digital model is used to automatically generate or enhance a physical
    object. Thus, generation techniques as defined in the model-driven development
    could be used. In this alternative, the dataflow from physical object to digital
    object is missing or is based on manual intervention only. In the case of the
    digital shadow, mechanisms are provided (e.g., sensors) to provide an automatic
    data flow to the digital object. This could be needed for analysis or simulation
    purposes. In the last alternative, digital twin, the digital object and physical
    object are causally connected and synchronized. Figure 4. Identified relationships
    between digital object and physical object. An analysis of the literature leads
    to useful insights into the notion of digital twins. Jones et al. [22] provided
    a common list of these concepts based on a systematic literature review. Based
    on these terms a conceptual model was provided. The key terms that we use in this
    paper are shown in Table 2. In addition, authors have identified several open
    research issues related to digital twins. An aspect that is not explicitly considered,
    however, is the notion of reuse-based design of digital twins. Table 2. Selected
    and used key concepts related to digital twins (adapted from [22]). The application
    of digital twins is in essence a control system activity to enhance the intelligence
    of the system and the overall decision-making process herein. As such, the notions
    of control and smart systems appear to be essential. A model for a control system
    is shown in Figure 5 (based on [1,24,25]). In the figure, the rectangles represent
    control entities, while the arrows represent control flows. Figure 5. Conceptual
    model for a control system as derived from the literature. The capabilities of
    smart systems can be grouped into four areas: monitoring, control, optimization,
    and autonomy [25,26]. Each capability builds on the preceding one: control requires
    monitoring, optimization requires control and monitoring, and autonomy requires
    all three. Monitoring implies the observation of a system’s condition, operation,
    and external environment through sensors and external data sources. Control implies
    the regulation of systems through remote commands or algorithms that are built
    into the device or exist in the cloud. The data collected from the monitoring
    activity together with the control capability allows the optimization of the system.
    Optimization can be implemented using dedicated algorithms and analytics that
    can adopt the monitoring data optionally with the historical data. The goal of
    optimization is typically to improve the quality of the system including its effectiveness
    and efficiency. The highest level of smart behavior is autonomy, which combines
    monitoring, control, and optimization to learn about the environment, self-diagnose
    the own goals and needs, and adapt to the changing preferences. An autonomous
    system may be interfaced with other systems but controls its own actions. Based
    on the higher-level model of the digital twin Figure 4 and the control model of
    Figure 5, we now provide the digital twin model as shown in Figure 6. In essence,
    a digital twin is thus considered a control system, but the control is now carried
    out in the digital object space. The model itself will be used to illustrate the
    digital twin patterns in the following sections. Figure 6. A conceptual model
    for control-based digital twin as derived from the literature. 5. Architecture
    Design Patterns for Digital Twins The conceptual model of Figure 6 itself is not
    sufficient to provide the system architecture of a digital twin-based system.
    The model by itself is generic and can be used to support the understanding of
    various systems. However, no detail is provided about the type of digital twin
    or the required design. Earlier, we indicated that different types of smart systems
    could be distinguished including monitoring system, control system, and autonomous
    system. In alignment with and related to this observation we provide different
    design patterns that are useful for designing a digital twin-based system. A design
    pattern is understandable and reusable if it is well-documented. In general, the
    documentation for a design pattern includes the context in which the pattern is
    used, the recurring problem description within the context that the pattern seeks
    to resolve, and the suggested solution template. Unfortunately, there is no single,
    standard format for documenting design patterns, but rather a variety of different
    formats have been proposed. Inspired by the documentation templates as used in
    [10,12], in this paper we adopt the documentation template as shown in Table 3.
    In alignment with the conventional pattern documentation approaches, the catalog
    of architecture design patterns does not specify a specific system architecture.
    Rather design patterns function as templates that need to be instantiated for
    the particular context of the system. A systems architecture might use one or
    more of these patterns. Table 3. Documentation template for patterns. In the following
    subsections we use this documentation template to describe the identified digital
    twin patterns, which can be applied in the different stages of the systems engineering
    lifecycle. Thus, we cover a complete lifecycle, which also means that patterns
    are addressed that do not include two-way synchronization (Figure 4), i.e., a
    Digital Model, Digital Generator, Digital Shadow, and Digital Proxy pattern. The
    “real” digital twin patterns that we identified include a Digital Monitor, Digital
    Control, and Digital Autonomy. For each of these patterns we also present the
    possible variations leading to a comprehensive pattern catalog. 5.1. Digital Model
    Pattern The first pattern we discuss is the Digital Model pattern as shown in
    Figure 7. This pattern is related to the concept and development stage of the
    systems engineering lifecycle. In essence it does not yet result in a truly digital
    twin-based system due to the manual creation and the lack of continuous synchronization.
    However, it is regarded as the initial step towards a digital twin-based system.
    Based on a predefined digital model (design), a physical object is developed.
    Figure 7. Digital Model pattern. 5.2. Digital Generator Pattern The Digital Generator
    pattern (Figure 8) is similar to the Digital Model pattern in that it defines
    the production of a physical object based on a digital model blueprint. The difference
    is that the production is now automated and human intervention is thus not needed.
    The implementation of this pattern requires therefore also the implementation
    of the generation process that takes as an input the digital blueprint and provides
    as an output a physical object or part of the physical object. The automated production
    of the physical object could be based on techniques as defined in model-driven
    development. Figure 8. Digital Generator pattern. 5.3. Digital Shadow Pattern
    The Digital Shadow pattern (Figure 9) provides a digital twin based on the physical
    object. Hence, it assumes already the existence of a physical object. Multiple
    different digital twins can be generated for one or more physical objects, based
    on the defined system requirements. The implementation of this pattern requires
    that the physical object is equipped with the necessary sensors to derive the
    information that needs to be modeled by the digital twin. In principle, the development
    of a digital twin based on a physical object could be also a manual process, which
    would be considered a kind of manual reverse engineering process. Figure 9. Digital
    Shadow pattern. 5.4. Digital Matching Pattern The previous three patterns focused
    on the creation of a physical object based on a digital twin (Digital Model, Digital
    Generator), or vice versa (Digital Shadow). The creation is either manual or automatic.
    In the Digital Matching pattern we assume an existing digital model that is used
    to find physical objects that match the properties of the digital model. The addressed
    problem is thus not creation, but search (physical object) and match (with digital
    twin). Typical applications of this pattern are, for example, classification and
    object recognition applications using machine learning or deep learning approaches.
    The pattern is shown in Figure 10. This pattern is related to the utilization
    and support stages of the systems engineering lifecycle. The matching process
    is assumed to be automatic. Therefore, this pattern requires the implementation
    of search, classification, and object recognition algorithms. Figure 10. Digital
    Matching pattern. 5.5. Digital Proxy Pattern The Digital Proxy pattern (Figure
    11) is also a pattern that is applied in the utilization and support stages. The
    pattern provides a digital twin that is used as a proxy for the physical object.
    This means that all the communication directed to the physical object is captured
    by the digital twin, which acts and responds in the name of the physical object.
    Hence, the digital twin can provide pre-processing and post-processing of the
    required services. Multiple different digital twins can be developed based on
    the different needs for communication, pre-processing and post-processing. Figure
    11. Digital Proxy Pattern. Introducing such a digital twin as a placeholder can
    serve many purposes, including enhanced efficiency, easier access and protection
    from unauthorized access. To provide the proper behavior, the digital twin that
    acts as a proxy can include, that is, reflect the state of, the physical object
    or be stateless and rely on the retrieval of the state of the actual physical
    object. 5.6. Digital Restoration Pattern The Digital Restoration pattern (Figure
    12) is applied when the physical object needs to restore its earlier state. This
    could be needed due to failures, loss, corruption, or to align with the state
    of other physical objects and the environment state. The state of the physical
    object is reflected on the digital twin at defined times. In the case in which
    restoration is needed, the process is reversed and the state of the digital twin
    is used to restore the state of the physical object. The pattern is applied in
    the utilization and support stages. Figure 12. Digital Restoration pattern. 5.7.
    Digital Monitor Pattern The Digital Monitor pattern (Figure 13) is used to provide
    a digital twin that monitors a physical object. One digital twin can in essence
    monitor multiple physical objects, and a physical object can also be monitored
    by multiple twins. Hence, the relationship between digital twin and physical object
    is many-to-many. Figure 13. Digital Monitor pattern. 5.8. Digital Control Pattern
    The Digital Control pattern (Figure 14) builds on the earlier pattern that monitors
    the physical object. However, it adds an additional level of intelligence and
    complexity which is that of control. Based on defined control parameters and a
    comparison mechanism, the proper action is decided which is then performed on
    the physical object. This pattern thus follows the behavior of a smart feedback
    control system. Its implementation requires the development of sensors, definition
    of control parameters, implementation of the comparison algorithms and the decision
    module, and finally the actuator mechanism. The control parameters are typically
    externally defined by the client. The decision making for the proper action can
    be guided by the accompanying data analytics. Figure 14. Digital Control Pattern.
    5.9. Digital Autonomy Pattern The Autonomous Autonomy pattern (Figure 15) builds
    even further on the Digital Control pattern and does not require manual, human
    intervention. The control parameters are now defined by the digital twin itself
    and based on the changing conditions, if needed, these are adjusted. As a result,
    the digital twin does not just follow earlier defined control actions but is also
    able to learn from the dynamically changing situation, and thus adapt its control
    actions. Figure 15. Digital Autonomy pattern. 5.10. Pattern Selection Approach
    In the previous section we presented the pattern catalog including nine different
    design patterns for digital twins. Once these patterns have been explicitly described,
    each of these can be selected based on a recurring problem, and applied to derive
    a design based on the pattern. The applicability of these patterns is defined
    by the systems engineering stage for which it is mentioned, and of course the
    identified problem that requires a solution. Figure 16 shows the systems engineering
    life cycle stages and the potential digital twin patterns that can be applied
    at these stages. Note that the patterns Digital Model, Digital Shadow, and Digital
    Generator can be applied in the earlier stages of the lifecycle. The remaining
    patterns are applied in the later stages. The Digital Proxy pattern can also be
    applied in the retirement stage to behave as a representative of the physical
    object, even if this has been disposed of. Figure 16. Identified patterns in the
    systems engineering life cycle stages. 6. Case Study Research To illustrate the
    application of the digital twin patterns we adopted a multiple case study approach.
    As stated before, the case study was carried out as part of the European IoF2020
    project in close interaction with the involved business partners (www.iof2020.eu).
    The primary objective of the case studies is to evaluate the applicability of
    the identified digital twin patterns. To evaluate the above research questions,
    the case study research protocol as defined by Runeson and Höst [27] was applied.
    Based on this, the indicated five steps were followed: (1) case study design;
    (2) preparation for data collection; (3) execution of data collection on the studied
    case; (4) analysis of collected data; (5) reporting. The case study research was
    applied to three selected case studies. Each of these studies were prospective
    cases, that is, they included the system that was planned to be developed. The
    detailed descriptions of these case studies were provided in Table 1. Table 4
    shows the case study design elements. The goal for the case study was to evaluate
    both the effectiveness and the practicality of the approach. The research questions
    were defined accordingly as shown in the table. For the adopted background and
    sources in the case study research, official design documents were used and unstructured
    interviews were conducted with project managers and system architects. A qualitative
    data analysis approach was used in which document analysis approaches were used.
    Table 4. Case study design. Table 5 shows the result of the overall case study
    research with the identified patterns for each of the three case studies. A number
    of interesting observations can be derived from the table. Table 5. Overview of
    the use cases and the identified digital twin patterns. The Digital Model pattern
    can only be applied for non-living things, in this case the greenhouses. The application
    of the Digital Generator pattern is different for different case studies. For
    example, a cow as a physical object is different from a greenhouse. In the case
    of a greenhouse, the Digital Generator can make sense, whereas for a cow this
    is not possible. The generation often involves the generation of the computational
    modules. For a physical generation, this would imply techniques such as 3D printing
    of physical objects. The Digital Shadow pattern is broadly applicable since it
    assumes a capturing of the state of a physical object. Hereby, the nature of the
    physical object is less decisive. However, this will impact the implementation
    of the pattern because different types of sensors might be needed for different
    types of physical object (field, cow, greenhouse). The Digital Restoration pattern
    was planned to be used for the greenhouse case study, to undo/redo facilities
    to restore/update the state of greenhouses (temperature sensor, light sensor,
    humidity sensor, and actuators). Again, this pattern can be typically applied
    for non-living things. The Digital Monitor and Digital Control patterns appeared
    to be applied in each of the three case studies, although what was monitored and
    how (sensors) and what was adapted (actuators) was clearly different per case
    study. None of the case studies used the Digital Autonomy pattern. This is indeed
    the most difficult pattern, and requires sophisticated knowledge and implementation.
    We foresee that this pattern can be used in the near future. 7. Conclusions The
    notion of digital twins can be considered as a new phase in IoT-based systems
    that will have an increasing and lasting impact on many application domains. It
    enables remote control of operations based on (near) real-time digital information
    instead of having to rely on direct observation and manual tasks on-site. Despite
    its pervasiveness and increased popularity, there appears to be a lack of understanding
    and consensus on both the basic concepts and, in particular, the design and modeling
    abstractions. Developing digital twin-based systems requires a systems engineering
    approach due to its multidisciplinary nature. One of the essential concepts in
    systems design is the notion of design patterns, which has been largely applied
    in software engineering and, more recently, also in the broader systems engineering
    context. Based on our study, this article is the first that proposes a design
    patterns catalog that can be used to leverage the development of high quality
    digital twin-based systems. The design patterns catalog is based on a conceptual
    model of control systems and includes a total of nine different design patterns
    that address different problems and that can be applied to different systems engineering
    life cycle stages. The case studies show the application of these patterns in
    the agriculture and food domain. The usage of digital twin patterns was explicitly
    identified in cases that were not yet framed as digital twins. The identified
    patterns focus on the usage stage of the life cycle. The application of patterns
    in the concept, realization, and retirement stages was still in an early stage
    of development. We analyzed and checked the digital twin patterns for retrospective
    case studies that showed the applicability of these patterns. In addition to the
    food and farm domain, the proposed pattern catalog can be used for various systems
    engineering applications. In our future work we will focus on the implementation
    of the presented digital twins, and also consider multiple different case studies
    from multiple different systems engineering domains. The exploration of other
    domains will help to discover additional digital twin patterns and thus extend
    the pattern catalog. Author Contributions B.T.: Conceptualization, Methodology,
    Writing-Review and Editing. C.V.: Conceptualization, Methodology, Writing-Review
    and Editing. All authors have read and agreed to the published version of the
    manuscript. Funding This research was supported by the European Union’s Horizon
    2020 research and innovation program under grant agreement no. 731884. Conflicts
    of Interest The authors declare no conflict of interest. References Grieves, M.;
    Vickers, J. Digital twin: Mitigating unpredictable, undesirable emergent behavior
    in complex systems. In Transdisciplinary Perspectives on Complex Systems: New
    Findings and Approaches; Kahlen, F.-J., Flumerfelt, S., Alves, A., Eds.; Springer:
    Berlin/Heidelberg, Germany, 2016; pp. 85–113. [Google Scholar] Fuller, A.; Fan,
    Z.; Day, C.; Barlow, C. Digital Twin: Enabling Technologies, Challenges and Open
    Research. arXiv 2020, arXiv:1911.012762020. [Google Scholar] [CrossRef] Atzori,
    L.; Iera, A.; Morabito, G. The Internet of Things: A survey. Comput. Netw. 2010,
    54, 2787–2805. [Google Scholar] [CrossRef] Tekinerdogan, B.; Köksal, Ö. Pattern-Based
    Integration of Internet of Things Systems. In Proceedings of the Internet of Things—ICIOT
    2018, Seattle, WA, USA, 25–30 June 2018; Georgakopoulos, D., Zhang, L.J., Eds.;
    Volume 10972. [Google Scholar] Verdouw, C.; Wolfert, S.; Tekinerdogan, B. Internet
    of Things in agriculture. CAB Rev. 2016, 11, 1–12. [Google Scholar] [CrossRef]
    ISO/IEC 42010:2011 Recommended Practice for Architectural Description of Software-Intensive
    Systems (ISO/IEC 42010). 2011. Available online: https://www.iso.org/standard/50508.html
    (accessed on 2 September 2020). Cloutier, R.J. (Ed.) The Guide to the Systems
    Engineering Body of Knowledge (SEBoK); v. 2.2; The Trustees of the Stevens Institute
    of Technology: Hoboken, NJ, USA, 2016; Available online: www.sebokwiki.org (accessed
    on 2 September 2020). Walden, D.D.; Roedler, G.J.; Forsberg, K.J.; Hamelin, R.D.;
    Shortell, T.M. (Eds.) INCOSE Systems Engineering Handbook: A Guide for System
    Life Cycle Processes and Activities, 4th ed.; John Wiley & Sons, Inc.: Hoboken,
    NJ, USA, 2015. [Google Scholar] ISO/IEC/IEEE 15288:2015. Systems and Software
    Engineering—System Life Cycle Processes. 2015. Available online: https://www.iso.org/standard/63711.html#:~:text=ISO%2FIEC%2FIEEE%2015288%3A2015%20establishes%20a%20common%20framework,terminology%20from%20an%20engineering%20viewpoint.&text=Organizations%20and%20projects%20can%20use%20these%20processes%20when%20acquiring%20and%20supplying%20systems
    (accessed on 2 September 2020). Sözer, H.; Tekinerdogan, B.; Akşit, M. Optimizing
    decomposition of software architecture for local recovery. Softw. Qual. J. 2013,
    21, 203–240. [Google Scholar] [CrossRef] Alexander, C. The Timeless Way of Building;
    Oxford University Press: Oxford, UK, 1979. [Google Scholar] Gamma, E.; Helm, R.;
    Johnson, R.; Vlissides, J. Design Patterns: Elements of Reusable Object-Oriented
    Software; Addison-Wesley Professional: Boston, MA, USA, 1995. [Google Scholar]
    Bushmann, F.; Meunier, R.; Rohnert, H. Pattern-Oriented Software Architecture:
    A System of Patterns; John Wiley & Sons: Hoboken, NJ, USA, 1996; Volume 1, p.
    476. [Google Scholar] Verdouw, C.N.; Kruize, J.W. Digital twins in farm management:
    Illustrations from the FIWARE accelerators SmartAgriFood and Fractals. In Proceedings
    of the 7th Asian-Australasian Conference on Precision Agriculture Digital, Hamilton,
    New Zealand, 16–18 October 2017. [Google Scholar] Verdouw, C.N.; Beulens, A.J.M.;
    Reijers, H.A.; van der Vorst, J.G. A Control Model for Object Virtualization in
    Supply Chain Management. Comput. Ind. 2015, 68, 116–131. [Google Scholar] [CrossRef]
    [Green Version] Verdouw, C.; Sundmaeker, H.; Tekinerdogan, B.; Conzon, D.; Montanaro,
    T. Architecture framework of IoT-based food and farm systems: A multiple case
    study. Comput. Electron. Agric. 2019, 165, 104939. [Google Scholar] [CrossRef]
    Alam, K.M.; Saddik, A.E. C2PS: A Digital Twin Architecture Reference Model for
    the Cloud-Based Cyber-Physical Systems. IEEE Access 2017, 5, 2050–2062. [Google
    Scholar] [CrossRef] Alves, R.G.; Souza, G.; Maia, R.F.; Tran, A.L.H.; Kamienski,
    C.; Soininen, J.-P.; Aquino, P.T., Jr.; Lima, F. A digital twin for smart farming.
    In Proceedings of the IEEE Global Humanitarian Technology Conference, Seattle,
    WA, USA, 17–21 October 2019. [Google Scholar] Canedo, A. Industrial iot lifecycle
    via digital twins. In Proceedings of the 11th IEEE/ACM/IFIP International Conference
    on Hardware/Software Codesign and System Synthesis (CODES 2016), Pittsburgh, PA,
    USA, 1–7 October 2016. [Google Scholar] Glaessgen, E.; Stargel, D. The Digital
    Twin Paradigm for Future NASA and U.S. Air Force Vehicles. In Proceedings of the
    53rd AIAA/ASME/ASCE/AHS/ASC Structures, Structural Dynamics and Materials Conference,
    Honolulu, HI, USA, 23–26 April 2012. [Google Scholar] Schleich, B.; Anwer, N.;
    Mathieu, L.; Wartzack, S. Shaping the digital twin for design and production engineering.
    CIRP Ann. 2017, 66, 141–144. [Google Scholar] [CrossRef] [Green Version] Jones,
    D.; Snider, C.; Nassehi, A.; Yon, J.; Hicks, B. Characterising the Digital Twin:
    A systematic literature review. CIRP J. Manuf. Sci. Technol. 2020, 29, 36–52.
    [Google Scholar] [CrossRef] Boschert, S.; Rosen, R. Digital Twin—The Simulation
    Aspect, In Mechatronic Futures: Challenges and Solutions for Mechatronic Systems
    and Their Designers; Hehenberger, P., Bradley, D., Eds.; Springer International
    Publishing: Cham, Switzerland, 2016; pp. 59–74. [Google Scholar] Kritzinger, W.;
    Karner, M.; Traar, G.; Henjes, J.; Sihn, W. Digital Twin in manufacturing: A categorical
    literature review and classification. IFAC Pap. 2018, 51, 1016–1022. [Google Scholar]
    [CrossRef] Tekinerdogan, B. Engineering Connected Intelligence: A Socio-Technical
    Perspective; Wageningen University & Research: Wageningen, The Netherlands, 2017.
    [Google Scholar] [CrossRef] Porter, M.E.; Heppelmann, J.E. How Smart, Connected
    Products are Transforming Competition, Harvard Business Review; Harvard Business
    School Publishing: Boston, MA, USA, 2014. [Google Scholar] Runeson, P.; Höst,
    M. Guidelines for conducting and reporting case study research in software 844
    engineering. Empir. Softw. Eng. 2008, 14, 131. [Google Scholar] [CrossRef] [Green
    Version]     © 2020 by the authors. Licensee MDPI, Basel, Switzerland. This article
    is an open access article distributed under the terms and conditions of the Creative
    Commons Attribution (CC BY) license (http://creativecommons.org/licenses/by/4.0/).
    Share and Cite MDPI and ACS Style Tekinerdogan, B.; Verdouw, C. Systems Architecture
    Design Pattern Catalog for Developing Digital Twins. Sensors 2020, 20, 5103. https://doi.org/10.3390/s20185103
    AMA Style Tekinerdogan B, Verdouw C. Systems Architecture Design Pattern Catalog
    for Developing Digital Twins. Sensors. 2020; 20(18):5103. https://doi.org/10.3390/s20185103
    Chicago/Turabian Style Tekinerdogan, Bedir, and Cor Verdouw. 2020. \"Systems Architecture
    Design Pattern Catalog for Developing Digital Twins\" Sensors 20, no. 18: 5103.
    https://doi.org/10.3390/s20185103 Note that from the first issue of 2016, this
    journal uses article numbers instead of page numbers. See further details here.
    Article Metrics Citations Crossref   46 Scopus   49 Web of Science   33 ads   9
    PubMed   6 PMC   6 Google Scholar   [click to view] Article Access Statistics
    Article access statistics Article Views 14. Jan 24. Jan 3. Feb 13. Feb 23. Feb
    4. Mar 14. Mar 24. Mar 3. Apr 0k 10k 2.5k 5k 7.5k For more information on the
    journal statistics, click here. Multiple requests from the same IP address are
    counted as one view.   Sensors, EISSN 1424-8220, Published by MDPI RSS Content
    Alert Further Information Article Processing Charges Pay an Invoice Open Access
    Policy Contact MDPI Jobs at MDPI Guidelines For Authors For Reviewers For Editors
    For Librarians For Publishers For Societies For Conference Organizers MDPI Initiatives
    Sciforum MDPI Books Preprints.org Scilit SciProfiles Encyclopedia JAMS Proceedings
    Series Follow MDPI LinkedIn Facebook Twitter Subscribe to receive issue release
    notifications and newsletters from MDPI journals Select options Subscribe © 1996-2024
    MDPI (Basel, Switzerland) unless otherwise stated Disclaimer Terms and Conditions
    Privacy Policy"'
  inline_citation: '>'
  journal: Sensors (Switzerland)
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: Systems architecture design pattern catalog for developing digital twins
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Visconti P.
  - de Fazio R.
  - Velázquez R.
  - Del-Valle-soto C.
  - Giannoccaro N.I.
  citation_count: '54'
  description: The huge spreading of Internet of things (IoT)-oriented modern technologies
    is revolutionizing all fields of human activities, leading several benefits and
    allowing to strongly optimize classic productive processes. The agriculture field
    is also affected by these technological advances, resulting in better water and
    fertilizers’ usage and so huge improvements of both quality and yield of the crops.
    In this manuscript, the development of an IoT-based smart traceability and farm
    management system is described, which calibrates the irrigations and fertigation
    operations as a function of crop typology, growth phase, soil and environment
    parameters and weather information; a suitable software architecture was developed
    to support the system decision-making process, also based on data collected on-field
    by a properly designed solar-powered wireless sensor network (WSN). The WSN nodes
    were realized by using the ESP8266 NodeMCU module exploiting its microcontroller
    functionalities and Wi-Fi connectivity. Thanks to a properly sized solar power
    supply system and an optimized scheduling scheme, a long node autonomy was guaranteed,
    as experimentally verified by its power consumption measures, thus reducing WSN
    maintenance. In addition, a literature analysis on the most used wireless technologies
    for agri-food products’ traceability is reported, together with the design and
    testing of a Bluetooth low energy (BLE) low-cost sensor tag to be applied into
    the containers of agri-food products, just collected from the fields or already
    processed, to monitor the main parameters indicative of any failure or spoiling
    over time along the supply chain. A mobile application was developed for monitoring
    the tracking information and storing conditions of the agri-food products. Test
    results in real-operative scenarios demonstrate the proper operation of the BLE
    smart tag prototype and tracking system.
  doi: 10.3390/s20133632
  full_citation: '>'
  full_text: '>

    "This website uses cookies We use cookies to personalise content and ads, to provide
    social media features and to analyse our traffic. We also share information about
    your use of our site with our social media, advertising and analytics partners
    who may combine it with other information that you’ve provided to them or that
    they’ve collected from your use of their services. Consent Selection Necessary
    Preferences Statistics Marketing Show details                 Deny Allow selection
    Allow all     Journals Topics Information Author Services Initiatives About Sign
    In / Sign Up Submit   Search for Articles: Sensors All Article Types Advanced   Journals
    Sensors Volume 20 Issue 13 10.3390/s20133632 Submit to this Journal Review for
    this Journal Propose a Special Issue Article Menu Subscribe SciFeed Recommended
    Articles Related Info Links More by Authors Links Article Views 8374 Citations
    54 Table of Contents Abstract Introduction Scientific Works and Commercial Devices
    for Precision Farming and Advanced Tracking Systems Materials and Methods Results
    Discussion Conclusions Author Contributions Funding Conflicts of Interest References
    Altmetric share Share announcement Help format_quote Cite question_answer Discuss
    in SciProfiles thumb_up Endorse textsms Comment first_page settings Order Article
    Reprints Open AccessArticle Development of Sensors-Based Agri-Food Traceability
    System Remotely Managed by a Software Platform for Optimized Farm Management by
    Paolo Visconti 1,*, Roberto de Fazio 1, Ramiro Velázquez 2, Carolina Del-Valle-Soto
    3 and Nicola Ivan Giannoccaro 1 1 Department of Innovation Engineering, University
    of Salento, 73100 Lecce, Italy 2 Facultad de Ingeniería, Universidad Panamericana,
    Aguascalientes 20290, Mexico 3 Facultad de Ingeniería, Universidad Panamericana,
    Álvaro del Portillo 49, Zapopan Jalisco 45010, Mexico * Author to whom correspondence
    should be addressed. Sensors 2020, 20(13), 3632; https://doi.org/10.3390/s20133632
    Submission received: 11 May 2020 / Revised: 19 June 2020 / Accepted: 23 June 2020
    / Published: 28 June 2020 (This article belongs to the Special Issue IoT for Smart
    Food and Farming) Download keyboard_arrow_down     Browse Figures Versions Notes
    Abstract The huge spreading of Internet of things (IoT)-oriented modern technologies
    is revolutionizing all fields of human activities, leading several benefits and
    allowing to strongly optimize classic productive processes. The agriculture field
    is also affected by these technological advances, resulting in better water and
    fertilizers’ usage and so huge improvements of both quality and yield of the crops.
    In this manuscript, the development of an IoT-based smart traceability and farm
    management system is described, which calibrates the irrigations and fertigation
    operations as a function of crop typology, growth phase, soil and environment
    parameters and weather information; a suitable software architecture was developed
    to support the system decision-making process, also based on data collected on-field
    by a properly designed solar-powered wireless sensor network (WSN). The WSN nodes
    were realized by using the ESP8266 NodeMCU module exploiting its microcontroller
    functionalities and Wi-Fi connectivity. Thanks to a properly sized solar power
    supply system and an optimized scheduling scheme, a long node autonomy was guaranteed,
    as experimentally verified by its power consumption measures, thus reducing WSN
    maintenance. In addition, a literature analysis on the most used wireless technologies
    for agri-food products’ traceability is reported, together with the design and
    testing of a Bluetooth low energy (BLE) low-cost sensor tag to be applied into
    the containers of agri-food products, just collected from the fields or already
    processed, to monitor the main parameters indicative of any failure or spoiling
    over time along the supply chain. A mobile application was developed for monitoring
    the tracking information and storing conditions of the agri-food products. Test
    results in real-operative scenarios demonstrate the proper operation of the BLE
    smart tag prototype and tracking system. Keywords: precision agriculture; IoT
    devices; on-cloud software platform; decision support systems; solar energy harvesting;
    node power consumption; BLE sensor tag Graphical Abstract 1. Introduction Agriculture,
    by some decades, is undergoing to rapid evolution in methodologies and techniques,
    for improving the productivity and the environmental sustainability; nowadays,
    the development of new technologies allows to implement an intensive resources
    exploitation (e.g., soil, water, fertilizers, etc.), with the aim to produce high-quality
    fruits and vegetable products in sufficient quantities to satisfy food requirements
    while maintaining competitive costs. In particular, intensive agriculture allows
    to satisfy the primary needs of the population in constant growth, but, on the
    other hand, it has caused serious ecological and environmental damages such as
    deforestation, desertification, the unregulated use, namely the abuse of pesticides
    and fertilizers and consequently the ground-water pollution. Therefore, the aim
    is to achieve sustainable agriculture from the ecological and environmental point
    of view and obviously also in terms of economic compatibility. A key factor to
    obtain this result is the correct and optimized use of the various input resources
    such as fertilizers, water and plant protection products, into the agricultural
    production processes. Thanks to the development of Internet of things (IoT)-based
    technologies, nowadays a huge number of low cost and power consumption modules
    and sensors are available to be employed in the farmlands, in order to detect
    and collect precise climate and soil data as well as information referred to growth
    or diseases of the cultivated crops and send by Wi-Fi connectivity all the collected
    data to a cloud software platform for the optimized management of the farm. The
    designed system represents a multi-platform complete solution, by employing a
    smart fertigation system assisted by an on-field custom wireless sensor network
    (WSN), for supporting the farmer and manager along the whole supply chain from
    the field to the product distribution, as well as for providing added value services
    to the customers. In fact, the developed system helps the dealers and traders
    to check the transportation and storage conditions of the food products, as well
    as their provenience, employing a low-power Bluetooth low energy (BLE) smart tag
    placed inside the food container; therefore, the availability of a single multi–functional
    software platform allows the user (both the farmer and costumer) to check all
    events and treatments performed overtime on the products, from the sowing to the
    consumer table. To exploit the multitude of the offered services from the developed
    system, an integrated on-cloud software platform allows us to manage the crops
    production and market of the agri-food products and more. The benefits of the
    developed farm optimal management system, integrated with an automated fertigation
    facility, can cover several cultivation typologies, such as arboreal cultures,
    horticulture and any type of greenhouses. A low-cost and energetically autonomous
    fertigation system has been developed to properly dose and mix the determined
    amount and typology of fertilizer into the water to irrigate. Several fertigation
    systems, installed in different cultivated lands also far from each other, can
    refer to the same cloud platform and, thus, to the same agronomic database containing
    the data derived from the mathematical models for the different considered crops.
    In fact, the agronomic models allow to determine the optimum cultivation parameters,
    such as typologies and amount of fertilizers, frequency and time duration of irrigations;
    all these operations are calibrated based on crop typologies, weather condition
    and on the physical and chemical quantities, related to soil and air, acquired
    directly on-field. The decision-making algorithm is also supported by a tree-structured
    WSN installed on the land, so allowing to obtain updated and real-time data related
    to the crop conditions. According to the aforementioned functionalities, the proposed
    system allows us to obtain savings in terms of water resources, fertilizers placed
    in the ground and energetic consumption, with respect to classic methods, and
    a complete traceability relative to the cultivated products. The software platform
    receives non-stop the WSN data, through the central management unit, from coordinator
    nodes and the weather forecasts from reliable meteorological websites, respectively
    and then it utilizes them in the mathematical agronomic models to support the
    farmers or agronomists in the decision-making processes related to the treatments
    necessary for the optimal growth or any diseases of cultivated crops. In particular,
    a low-cost and robust WSN has been realized by using commercial development modules
    and sensors; besides, through a compact solar harvesting section, and minimizing
    node power consumption by means of a suitable firmware implementation, long energy
    autonomy of each sensor node has been obtained. The decision support system (DSS)
    implemented in the software platform uses always updated databases on fertilizers
    and plants’ protection products, including all technical specifications and mode
    of use that allow the correct selection of the most appropriate product for each
    specific application or treatment, also concerning the anti-resistance strategies,
    thus becoming an effective tool for adapting cultural techniques to the climate
    changes and specific geographical location. In addition, the developed software
    platform allows the traceability of the agri-food products ensuring the storage
    of information on the treatments undergone by the products during the cultivation
    phases, so allowing then the data viewing remotely on the smartphone/tablet of
    potential consumers interested in purchasing the products. In addition—by using
    a multi-platform application—the farmer or the agronomist can identify, by reading
    a specific quick response (QR)-code, a portion of the cultivated land and view
    or update the related information on cultivated crops in this specific area or
    finally can acquire data about the performing of a specific treatment on the cultivated
    crops. Furthermore, a tracking and tracing system was designed, based on BLE sensor
    tag applied to the plastic or wooden container, where the fresh or already processed
    agricultural products are stored. The low-power consumption BLE tag is equipped
    with several sensors for monitoring the parameters useful to determine the freshness
    status and the storing conditions of different types of food products (i.e., temperature,
    humidity, total volatile organic compounds (TVOCs)-level, ammonia (NH3) and carbon
    dioxide (CO2)-concentrations). The variety of detected parameters makes the realized
    device extremely versatile for monitoring different food typologies (vegetables,
    meat, fish, etc.), as demonstrated in the literature analysis in Section 2.3,
    a unique feature not found in other competitor systems reported in the literature
    as well as available on the market. Additionally, the developed BLE smart tag
    is reusable for a long time on the same container or, if the container is damaged,
    it can be easily removed and applied on another container, as following detailed
    in Section 3.3. In addition, the iBeacon technology is exploited to support the
    tracking system in the monitoring of the agri-food stored products on the whole
    supply chain (SC), so providing a value-added service to the consumers. Alternating
    iBeacon phase with low duty-cycle acquisition and transmission phases, the developed
    BLE device acts like a reprogrammable tag capable to monitor the freshness indexes
    of the stored food typology. A prototype of the BLE smart tag was tested to verify
    its correct operation and evaluate the energy autonomy, which turned out to be
    about 5.6 months. A mobile application was developed to remotely monitor the tracking
    and storing parameters acquired by the BLE tags placed inside the containers with
    the agri-food products. Both the BLE tag and tracking system were tested in different
    real operative scenarios, by using oranges and frozen codfish fillets placed inside
    plastic and polyethylene containers, demonstrating their correct operation. Consequently,
    the developed software platform for the optimized farm management allows implementing
    an innovative business model inspired by the principles of the products’ traceability,
    to guarantee consumers on their quality, as well as of the organically grown food
    and fair trade forms of agri-food products. In fact, the on-cloud software application
    specifically developed for the development of new business models provides new
    forms of fair trade of the food products and other implemented services for increasing
    the potential market of farm agricultural production. The manuscript is organized
    as follows: in the sub-paragraph 1.1, a non-exhaustive literature analysis about
    innovative DSSs applied to agriculture field is reported; these software tools,
    based on data provided from several sources, help the farm manager to take correct
    decisions on cultural processes as well as to prevent or minimize effects of pests
    and diseases or winter frosts. The following paragraph includes an overview of
    new remotely controlled devices and IoT-based technical solutions developed for
    crop monitoring and precision farming. After, a literature analysis on the applications
    of tracking and tracing systems for agri-food products’ identification at the
    harvest time and subsequent their traceability is reported, so providing a quality
    certification to the consumers and an economic advantage to the farmer. Furthermore,
    in this subsection, the most suitable parameters for monitoring the freshness
    status of rapidly perishable food products (e.g., meat, fish, vegetables, etc.)
    are identified and discussed. In Section 3, a description of the automated fertigation
    facility integrated with the WSN located on the farmland is provided with technical
    details on its functionalities and related to the different mechanical, hydraulic
    and electrical systems. In addition, the architecture of the developed BLE sensor
    tag for the traceability system of agri-food products is described, applied to
    the most commonly used containers, made in plastic, wood or polystyrene, for foods’
    transport or storage. In Section 4, the analysis of power consumption related
    to the sensor node during the different operating phases is reported in order
    to estimate the lifetime of the used lithium polymer (LiPo) battery recharged
    by the solar energy harvesting system; in Section 4.1, the operation of the developed
    tracking system based on BLE sensor tag is also reported. Finally, in Section
    5 the architecture of the software platform, both for managing the fertigation
    system by the agronomist or system manager and for the food products’ tracking
    is described; besides, the functionalities of the developed mobile application
    both for the farmer and customer users are discussed. 2. Scientific Works and
    Commercial Devices for Precision Farming and Advanced Tracking Systems In this
    section, an overview on recent scientific works related to DSS-based algorithms
    and IoT solutions applied to precision farming has been reported, together with
    a state of the art on advanced tracking and tracing systems for monitoring agri-food
    products. 2.1. A Literature Analysis on Sensors-Based Decision Support Systems
    (DSS) Applied to Precision Farming In the last decades, also agriculture is benefiting
    from the technological advances in electronics, computers technology and communication
    fields [1,2]. In this context, great relevance is ascribable to the DSSs, a wide
    range of software tools that based on several input data related to soil and environmental
    parameters, acquired by sensor nodes distributed on the cultivated land, to weather
    forecasts, to crops’ growth status or pathogens presence, then help the farmer
    to make decisions relative to farm activities or issues to be addressed [3]. In
    [4], the authors described a real-time DSS, for minimizing disease effects for
    the tomatoes cultivated in a greenhouse, structured in three stages: the supervision
    one detects and diagnoses any failure of sensors involved in culture monitoring,
    the control stage monitors the climate parameters inside the greenhouse and the
    management one, based on pests and diseases data acquired on field, optimizes
    these parameters to limit the spread of pathogens harmful to crops. Furthermore,
    the DSS integrates a real-time rule-based tool, implemented by G2-Gensym Corporation
    software and supported by a supervisory control and data acquisition (SCADA) control
    system; this last has as inputs the actuated variables (windows status, irrigation
    valves, heating), as outputs the controlled variables (interior temperature and
    humidity, soil water content, nutrients, etc.), whereas the disturbances are the
    uncontrolled variables, such as weather conditions, diseases and pest presence.
    Moreover, a fuzzy-logic controller allows optimizing the system dynamic behavior
    by modifying the set-point variables of the climate control unit. An innovative
    framework for a cloud-based decision support automation system (DSAS) in order
    to assist the orchards’ cultural practices was presented in [5], able to acquire
    data from different sources, to make specific decisions and control devices installed
    on the field. It has a modular software architecture, featured by decision modules
    arranged in a hierarchical structure, handling the diversity of data by using
    a data model to specify the format, data types and enabled operations of input
    data set. Given the heterogeneity of possible cultural operations on the orchard,
    the cloud-based DSAS has an extendible and adaptive architecture, for adding a
    new decision module when required. In particular, the software follows the open/close
    principle, namely, it is open for any extensions, but close for modifications.
    The software-managed control was structured in three layers: (1) the decision
    layer defines the actions at a high level, (2) the service plane schedules the
    actions for each device, (3) the device layer performs the defined schedules (Figure
    1). Figure 1. (a) Decision support system (DSS) software structure reported in
    [5] and (b) its three-layer architecture with decision, service and device planes,
    respectively. An IoT-based system for smart agriculture that employs a tree-type
    decision algorithm was described in [6], using as main elements the IoT devices
    for acquiring information directly on the field, the gateway and the service platform.
    The sensor nodes employed the Arduino board for detecting parameters from connected
    sensors and controlling actuators; acquired data are fused to produce a more consistent
    and accurate database and, employing Kalman filter, the noise derived from data
    fusion operation was minimized. A Raspberry Pi board was used as a gateway for
    connecting WSN nodes to the cloud service. The algorithm employed in the decision-making
    process is the tree-type one (“if-then rules”) based on decision rules and input
    data both stored in a my-structured query language (MySQL) database. E. Han et
    al. proposed a DSS tool, named climate-agriculture-modelling and decision tool
    (CAMDT) able to combine the seasonal climate forecasts (SCFs) with the crops model,
    for readily obtaining information related to cultural processes adjustment and
    water management, thus ensuring improvements of crops yield based on the climatic
    forecasts during the cultivation period [7]. In particular, the CAMDT was supported
    by DSSAT (decision support system for agro-technology transfer)-CSM (cropping
    system model)–Rice model for obtaining tailored information for crops decisions,
    both in terms of direct outcomes (such as yield and water stress) and translated
    outcomes (such as the risk of water stress and gross margin). C.C. Baseca et al.
    developed a real-time smart decision system to determine the variable rate irrigation
    parameters and variable rate fertigation rules for optimizing the crops yield
    [8]; it collects crops data (soil and leaf sensors), weather forecasts, machinery
    data (pivot irrigation, controller units and actuators, pumps status, etc.), that
    are sent to a middleware. After a preprocessing phase, these data are processed
    by means of a decision-making system obtained by combining the learning prediction
    rules with the Drools rules management system for producing relevant results and
    thus allowing to improve both farm sustainability and competitiveness. Torres
    et al. developed a three-layer data fusion algorithm, called Hydra, for improving
    the accuracy of employed sensors to determine some critical events more accurately,
    and thus for making appropriate decisions related to the smart water management
    [9]; the Hydra algorithm employs, at the lower level, some filtering methods (extreme
    Studentized method—ESD and weighted outlier–Robust Kalman filter—WRKF) for identifying
    and removing the outliners, thus enhancing the algorithm reliability. In [10],
    the authors presented a robust approach to simulate, by employing cultural simulation
    models for a specific location and year, the crops yield potential (Yp) and to
    estimate the yield gap (Yg), difference between Yp and average actual farm yield
    (Ya). The authors aim to provide guidelines for estimating yield gaps and for
    simulating the climate change impact and land-use change from local to global
    spatial scale. The state of the art on big data applications in smart farming
    is presented by authors in [11], explaining how new technologies and devices,
    namely IoT-oriented solutions and cloud computing, are influencing the entire
    food supply chain, so providing predictive insights in the agricultural processes,
    driving real-time operational decisions and also redesigning the farm economic
    processes towards new business models. In [12], the current state of agricultural
    systems science is shown, focusing on capabilities and limitations of agronomic
    models that need to be improved; common limitations are scarcity of data for developing,
    evaluating and applying farming system models and inadequate knowledge systems
    able to communicate model results to society. New open data initiatives show promising
    results to tackle the data problem, but there must also be a cultural change among
    agricultural researchers; the conclusion is that multiple platforms and different
    models are needed for farming models’ applications for different purposes. About
    DSS tools, most of the existing ones are focused on relatively narrow issues,
    for instance, the application of a specific fungicide, when to apply the next
    irrigation or how much fertilizer to apply to a particular crop that will be grown
    on a specific type of soil [12]. One of the problems related to DSS validation
    is the change of climate conditions at the field scale that can be considered
    in the DSS only with the implementation of predictive models capable of assessing
    the response of agricultural systems to the changing of the environmental conditions.
    To overcome these limits, the authors in [11] investigated, by means of a DSS
    agro-technology transfer-cropping system model (DSSAT-CSM), (i) the spatial variability
    of soybean yields across the farming field with different soils and inputs, (ii)
    how spatial variability in soil properties translates into measured and predicted
    yields variability and (iii) how scaling soil properties affects model accuracy
    in predicting soybean yields for different weather conditions [13]. An example
    of DSS, named AGRODSS, was recently presented in [14]; implemented as a cloud-based
    service, it enables various software products for agriculture to facilitate decisions
    support to users, allowing, as other existing DSSs, to improve business value
    through savings, avoiding risks, better planning and taking better advantage of
    available resources. AgroDSS is based on data mining approaches able to extract
    useful information from large volumes of data by using advanced algorithms to
    identify trends, distributions and to find patterns that can be hard to see with
    naked eyes. The newly acquired knowledge can better help understand the data,
    see how data changes in time, and help to predict the future impact of different
    actions and farming processes. In [15] the authors described an intelligent logistic
    tracking and tracing system, able to ensure traced horticultural food security
    and quality, so determining fair prices. The traceability framework consists of
    four following phases, namely identification, modeling, processing and traceability
    data presentation, so helping decision-makers in the issue of food security, obtaining
    an efficient product distribution and increased customers’ satisfaction. Finally,
    the developed logistical approach employs fuzzy set theory, artificial neural
    networks, sensors technology and genetic algorithms. 2.2. Advanced IoT-Oriented
    Technical Solutions for Monitoring and Precision Agriculture In this paragraph,
    an overview, regarding the precision farming applications, techniques, and employed
    Io-T oriented devices, is reported in order to exploit the available resources
    in the best and most efficient way and also to satisfy the needs of cultivated
    crops with the ultimate goal of optimizing their quantity and quality. WSNs development
    and their growing popularity are due not only to the usefulness for individual
    users, but also to the role that they can play in supporting the entire community;
    an interesting example is the forecast service on significant atmospheric events.
    In this context, the sEmPliCE project (Eledia civil protection expositor), developed
    by the ELEDIA research center in Trento (Italy), aims to make easily accessible
    the numerous data related to environmental monitoring acquired by heterogeneous
    technologies present on Trento’s provincial territory. Through an intuitive software
    platform accessible by smartphones and tablets, the interested citizens can obtain
    information updated in real time and consult the data history, receiving alert
    notifications in case of a forecast of natural disasters. In the next future,
    a fundamental role will be represented by artificial vision systems able to manage
    the actions performed by actuator robots on the cultivated products; concerning
    this topic, the research has already yielded significant results [16]. Below are
    shown some examples of robots employed to perform different tasks depending on
    the specific application and crop typology. In Figure 2a, the so-called Vitirover
    autonomous mower-robot is used to eliminate herbicides being able to mow the grass
    up to a few centimeters from the foot of vine plants; energy autonomy is guaranteed
    by photovoltaic cells placed on its roof (for further detail http://www.vitirover.com/)
    [17]. The robot works on the basis of the global positioning system (GPS) coordinates,
    provided by the manufacturer, related to cultivated land limits, being able also
    to avoid any holes or pits; it is controlled by Please verify. or smartphone app
    and through it, the farmer can manage the robot by positioning it in the ground
    or vineyard. In addition, the drones are employed in the agricultural sector for
    monitoring the crops’ growth or pests’ spread; in Figure 2b, the so-named Falcon
    8 drone is shown while it is flying over an agricultural land. The drone, provided
    with eight propellers, is capable of making video footage and, by using some infrared
    (IR) sensors, to detect the chlorophyll amount inside the vineyards, a fundamental
    parameter for agronomists and winemakers. Figure 2. Image of solar-powered Vitirover
    robot in action on the ground (a); Falcon 8 drone employed to monitor, by means
    of the infrared (IR) sensors, the chlorophyll amount inside the vineyards (b).
    In the GRAPE (acronym of ground robot for vineyard monitoring and protection)
    project [18], an autonomous ground robot equipped with a robotic arm was realized
    to monitor plants health in the vineyards and, by navigating along the rows of
    vines, to dispense pheromones against pests. Many research works are focused on
    the possibility to use the emerging digital technologies to improve and aid the
    agricultural sector management [19]. In addition, the significant potential of
    big data analysis applied to smart and precision farming is highlighted in [20];
    the authors show that the availability of hardware and software techniques and
    methods for big data analysis, as well as the increasing on-field usage of big
    data sources, shall encourage more academic research, public sector initiatives
    and business ventures in the agricultural sector. From the hardware point of view,
    the most used technology to detect different interest quantities of agricultural
    land is that of WSNs that can be employed to carry out several monitoring operations;
    for instance, they are used for environmental condition monitoring or for providing
    information about soil nutrients, allowing to predict crop health and product
    quality over time. A classification related to different study cases to thoroughly
    explore the existing solutions proposed in the literature, according to their
    design and implementation parameters is presented in [21]. Specifically, different
    farming applications that can be implemented by using WSNs are presented in [21]
    related to irrigation management systems, farming monitoring systems, pest and
    disease control and prediction, controlled use of fertilizers, vineyards’ production
    monitoring, groundwater quality monitoring, cattle movement monitoring, gases
    monitoring into a greenhouse, asset tracking, remote control and diagnosis. In
    addition, the authors classified the possible architectures in various categories,
    highlighting the potential agricultural applications suitable for each one. WSN
    nodes are based on programmable microcontrollers and designed as modular structures
    open both from the hardware and software point of view [22,23]. The sensors used
    for detecting different environmental and soil parameters have to be carefully
    chosen; concerning soil water content measure, numerous techniques are currently
    in use and the suitability of each one depends on cost, accuracy, durability and
    response time [24]. A widely used measurement technique is based on the dependence
    of the dielectric constant with the soil water content that significantly affects
    the propagation of the electromagnetic waves inside the medium; in fact, the dielectric
    constant of dry soil is much less than a wet one. Two approaches are commonly
    used to measure the dielectric constant of soil, namely the time domain approach
    and frequency domain one; advantages of the first are the low cost, need of low-frequency
    circuits, no employment hazardous radiations and a fast response time. Instead,
    the frequency domain approach has higher sensitivity to insulation and is more
    sensitive to air gaps. A low-cost solar-powered monitoring station equipped with
    an analysis probe based on the frequency domain method was developed in [25] for
    measuring temperature and humidity of both air and high silica content clay soil
    at different depths. A proper WSN design represents a fundamental point for monitoring
    different parameters in an agricultural land; a significant issue that has to
    be taken into account regards the power consumption of each sensor node, for ensuring
    long node autonomy. In this regard, energy harvesting techniques represent a real
    opportunity, thus obtaining a technical solution nearly with no maintenance [26,27,28,29].
    Air pollution monitoring is another field where WSNs are employed; the meteorological
    conditions, such as wind speed and atmospheric turbulence, affect air quality
    as reported in [30] where a WSN was designed, with an effective energy-saving
    system for each sensor node, for air and environment pollution detection. In this
    context, in [31] the authors propose a low-cost WSN for air monitoring applications;
    the sensor node is based on commercial gas sensors and a low power ZigBee (zonal
    intercommunication global-standard bee) module, which shares the acquired information
    with the cloud by means of a gateway. The experimental results demonstrate the
    proper operation of the node, having obtained a 93.03% discrimination rate and
    R2 coefficient values, in the gas quantitative detection, around 0.99. An overview
    of WSN applications is presented in [32] focusing on five application areas, namely
    healthcare, agriculture, environmental, industry and military. Moreover, the technical
    features of both hardware and software sections for WSN design are given in detail
    depending on the application [32]. A WSN-based smart system was developed in [33]
    for monitoring the availability level and rapid changes of water content in the
    soil, with the aim of guaranteeing early flood prediction, water savings in the
    farmland irrigation as well as waste reduction and optimal use of water resources
    where its availability is poor [34,35]. All aforementioned WSN solutions can be
    applied in the precision agriculture field, namely a management strategy that
    employs information technology to improve crops’ quality and production [35,36].
    Wireless sensor technologies and Information Technology (IT)-based management
    tools can lead to a highly effective green agriculture, including, just as an
    example, the proper supply of adequate nutrients to crops and appropriate use
    of pesticides for the optimized control of weeds, pests and diseases. The recent
    WSN applications in precision agriculture are analyzed in [37], where the various
    wireless communication protocols are classified and compared; besides, this work
    reports a study on the taxonomy of energy-efficient and harvesting techniques
    for WSNs used in agricultural monitoring systems and a comparison between previous
    research works on agriculture-field WSNs. In addition, the deep learning, a recent
    modern technique for image elaboration and data processing, was introduced in
    agriculture domain; specifically, in [38] a survey on 40 research works employing
    deep learning techniques in various agricultural and food production areas was
    carried out; in this context, the authors analyzed particular agricultural issues,
    namely the used frameworks and models, the sources, nature and preprocessing of
    the collected data and the overall performance achieved according to the metrics
    employed in each under-analysis research work. The optimization of energy consumption
    is crucial in WSN applications for agriculture since usually the nodes are distributed
    in remote areas where the maintenance for changing or recharging the batteries
    is difficult. Del Valle-Soto et al. developed a WSN energy model to estimate the
    energy consumption of each node during the different operations (data acquisition
    and transmission), when the routing protocol is running [39]. The model validation
    is performed by employing TI CC2530-based boards, which run a multiparent hierarchical
    (MPH) routing protocol. The experimental results indicate that the proposed protocol
    shows a lower energy consumption respect to ad-hoc on-demand distance vector (AODV),
    ZigBee tree routing (ZTR) and dynamic source routing (DSR), whereas the MPH protocol
    has a slightly greater energy consumption compared to the energy-aware protocols
    such as power-efficient gathering in sensor information systems (PEGASIS) and
    low energy adaptive clustering hierarchy (LEACH) (2% and 3%, respectively). A
    crops’ monitoring system based on wireless sensor network is reported in [40].
    The authors present their developed system composed of seven parts: the data processing
    unit (model ATmega128, manufactured by Microchip Technology, Chandler, AZ, USA)
    which processes all the information and manipulates the peripherals, the CC1101
    Radio Frequency (RF) module (manufactured by Texas Instrument, Dallas, TX, USA)
    for transmitting data collected by sensors related to environmental and soil parameters,
    a control unit to regulate the activation/deactivation of each employed sensor
    node (for obtaining energy saving), a data storage unit composed of AT45DB041D
    serial-interface flash memory (manufactured by Adesto Technologies, Santa Clara,
    CA, USA), a power supply unit (DC source or solar battery), an analog interface
    used to adjust voltage values provided by the employed sensors as required by
    the analog to digital converter (ADC) and finally a digital interface for digital
    sensors. In their system, the authors employed also an image sensor node made
    up of a system-on-a-chip (SoC) THLK2405 images processing module and a CMOS model
    OV7640 images array sensor (manufactured by OmniVision, Santa Clara, CA, USA)
    capable of operating at up to 30 frames per second (fps) [20]. In the proposed
    system, the WSN is fully integrated with an innovative fertigation unit and a
    farm management software platform implementing a DSS-algorithm supported by agronomic
    database; also, the software platform allows the user, by means of a mobile application,
    to control all the system functionalities and to view the stored data concerning
    the carried out treatments and irrigations, as described in Section 5. 2.3. Potentialities
    of Tracking and Tracing Software Systems and Analysis on the Most Suitable Parameters
    for Monitoring the Freshness of Rapidly Perishable Agricultural and Food Products
    As known the supply chain (SC) of agriculture products involves several processing
    and management steps before the products could reach the final users; each step
    has much data associated with it, often unknown to the end customer. However,
    these data could be crucial both for companies, in order to create logistic strategies
    and marketing techniques, but also for the end costumers to ensure food security
    and quality. For these reasons, exploiting the IoT advances, different smart tracing
    and tracking systems have been developed. The agri-food industry is one of the
    most promising candidates which could benefit from all the features introduced
    by these technologies. Specifically, intelligent packaging (IP), radio frequency
    identification (RFID), WSNs, analytics and cloud platforms have been pervasively
    applied to tracing and tracking systems, allowing to improve the tracing capabilities
    along the whole SC, while ensuring the availability and accuracy of products data.
    Furthermore, the system scalability is allowed by employing analytical methods
    and big data techniques, making the work of operators easier and more efficient
    [41]. Relatively to the food chain, almost a third of produced food for human
    consumption worldwide—approximately 1.3 billion tons every year—is wasted. In
    industrialized countries, more than 40% of losses happen at the retail and consumer
    levels. Food is sometimes thrown away ‘just in case’ when it is still fine to
    be consumed. Different solutions have been developed to monitor the quality of
    the packaged food and stored before being consumed, ranging from color changing
    labels as a function of food container temperature to RFID tags that link up with
    smartphones to give detailed information on the food status and sensors that indicate
    how ripe fruit is [42]. Poor chill chain management within the food supply chain
    and some uncertainty about how long ago food packs were opened after purchase
    are crucial aspects that can determine the failure of stored food products; different
    companies have developed smart tags that help retailers and the restaurant industry
    for addressing this issue. In the field of tracking and tracing of food products,
    an interesting commercial application is the TT Sensor PlusTM, which combines
    a low-power temperature sensor and data logging functionality in an adhesive label
    [43] (Figure 3a); it can be applied to the container for monitoring the product
    temperature, making the latter available to the user through near-field communication
    (NFC) by using a mobile application (Figure 3b). In addition, the evolution of
    this product, called TT Sensor PlusTM 2, is equipped with two light emitting diodes
    (LEDs) for indicating the label status (active/inactive) or alert conditions [44].
    The device is fed by a 3 V lithium battery, so guaranteeing a long autonomy (more
    than 3 years after the activation). Such devices are suitable for several applications,
    as monitoring of pharmaceutical and medical products (Figure 3c), food and beverage,
    chemicals and polymer-based goods and in general other products sensitive to the
    storing temperature. Figure 3. (a) Structure of the TT Sensor PlusTM smart label
    (b) to monitor the temperature of food products made available through NFC by
    using the mobile app; (c) TT Sensor PlusTM 2 label applied to a bottle of wine
    (left) or a pack of drugs [43,44]. In [45], the authors proposed a multilayer
    and technological framework to support the company activities in the development
    of a traceability system based on Industry 4.0 principles. At first, the proposed
    framework, given the adopted business model, identifies and models the process
    influencing the product. In addition, the identification of each productive process
    step and entity which stores the products information along the SC is required.
    These operations are enabled by the IoT technologies [46,47]. Specifically, the
    information related to the production environment, to the product transformation
    or to the transport conditions are acquired and monitored by sensors placed along
    the whole SC. Moreover, an IT application is employed for collecting these data
    and making them accessible by the company as well as the end-users, to guarantee
    the benefits above described. Qi et al. illustrated a WSN-based integrated cold
    chain shelf life decision support (C2SLDS) system, designed for perishable food
    products cold-chain management [48]. The developed architecture relies on a WSN
    for acquiring and transmitting, in a distributed manner, the products’ parameters,
    while a time–temperature indicator (TTI) monitors and records the time–temperature
    history of the products along the whole SC. The system consists of a 3-layer architecture,
    named WTTI (WSN-based TTI), AGS (advanced RISC machine (ARM)-based gateway system)
    and LDSS (least shelf life first out (LSFO) decision support system), respectively.
    The WTTI is a reduced-function device, able to acquire temperature and wirelessly
    transmit shelf life information to a ZigBee coordinator. The AGS consists of a
    Zigbee coordinator node and an ARM-based smart device that gathers the temperature
    data from the coordinator node. The LDSS decisions are driven by the application
    server, the data warehouse server, the model base, the knowledge base, the routers
    and the firewalls. Based on this information, a software application calculates
    the shelf life of the products by means of the TTI, once known the shelf life
    prediction model and the parameters in the knowledge base. The afore reported
    works propose devices able to monitor, each, only one physical or chemical quantity,
    so indicating the freshness of the specific stored product; instead, the designed
    BLE smart tag is able to simultaneously detect several physical and chemical quantities,
    so covering a wide range of applications, for monitoring the storage conditions
    of different food typologies. In [49], the author proposed a traceability system
    applicable to the agri-food products supply chain. This system employs RFID technology
    for enabling the data acquisition, the traceability during the different productive
    steps (production, warehousing, distribution) as well as the sale links of agri-food
    products. In addition, the system employs several blockchain technologies to ensure
    the authenticity and reliability of the shared information. Another approach to
    traceability of vegetables based on RFID technology was described in [50]; specifically,
    a unified modeling language (UML) is defined to support the product traceability
    and, thus, creating a method for modeling the products information (harvesting
    place, performed treatments, places of storage, etc.) and quality. Such traceability
    code was formatted according to the European article number (EAN) and uniform
    code council (UCC) standards. This UML modeling is used to perform real time tracking
    of the product, thus allowing it to easily improve its quality as well as reducing
    the waste. Ampatzidis et al. proposed two solutions to bind the bins employed
    to harvest the fruits with the corresponding pairs of trees, thus establishing
    the harvesting yield of an orchard [51]. The first method relies on passive RFID
    tags, operating in the ultra-high frequency (UHF) band (866 MHz for Europe), placed
    on the bins (Figure 4) and a long-range RFID radar-reader (manufactured by Trolley
    Scan CompanyTM, Johannesburg, South Africa) and a differential GPS (DGPS) receiver
    (model AgGPS® 106, manufactured by Trible Geospatial, Vimercate, Italy), located
    at the back of the collecting tractor, 1.50 m above the ground; in the second
    one, only the RFID tags are used, which are placed onto each pair of trees as
    well as bins. Figure 4. Representation of bins collection by the tractor equipped
    with a radio frequency identification (RFID) reader and differential GPS (DGPS)
    receiver. In addition to the implementation of a traceability system, the low-cost
    BLE tag, designed and tested in this research work as reported in the following
    sections, allows the detection of several freshness indexes for monitoring storage
    and transport conditions, making them available to the user by a proper mobile
    application. In [52] two examples of the integration between RFID technology and
    WSNs to trace any step of the SC of the wine production from the vineyard to the
    final consumer are proposed. This allowed demonstrating how the constantly growing
    need to know more about the food we eat can be satisfied, successfully monitoring
    and storing for traceability purposes, all the valuable information of the whole
    SC. In [53] a similar approach is generalized to demonstrate its applicability
    to different types of food industries. It has been shown how the integration between
    WSNs and passive RFID technology could enable traceability improvements for the
    final customer as well as for the company, maintaining a constant information
    line along the production and distribution chain, taking care of some critical
    parameters like events in development, production parameters (for example temperature,
    humidity, etc.), limited storage life, storage and transport conditions,, etc.
    All these improvements guarantee a medium-term return of investment for the company
    as well as a value-adding for the customer. On the other side, an approach to
    enhance RFID technology, with the aim to use it for traceability and parameter
    monitoring, is to integrate sensing capability directly on the tag. The design
    and actual use of chemical or biologic sensors as well as indicator labels in
    smart and active packaging, in order to monitor the degree of freshness or correct
    conservation of food, is a growing field of study, thus obtaining at the same
    time a real-time food-status monitoring, a reduction of food waste, an extension
    of shelf life and improvement of overall food quality [54]. For example, in [55]
    the possibility to exploit some new chemical interactive materials (CIM) to realize
    battery-less RFID sensor tags, capable to detect different gas species or humidity,
    is explored. Specifically, considering applications to prevent food-wasting, the
    use of the doped poly(styrene-sulfonate) (PSS) as CIM to detect ethanol should
    be evaluated because it is one of the indicators of food perishing. Other chemical
    and physical parameters can be monitored, and consequently different types of
    sensors can be used, to determine if food is going to decay. More in detail, in
    [56] a review of the most widespread chemical and biologic sensors for detecting
    food quality is presented. Different sensors work properly by monitoring different
    indicators for specific types of food, in order to control freshness markers or
    detect the presence of allergens, pathogens, adulterants and toxicants. For example,
    in fish products, one of the main freshness indicators is the hypoxanthine, which
    is produced by the metabolic degradation of adenosine triphosphate (ATP), whereas
    an indicator of the stored grain spoilage is the emission of CO2 as result of
    insects’ infestations. The stored cereals are also often threatened by mildews
    and fungi, which can be discovered by specific biosensors for mycotoxin detection;
    instead, concerning fruits and vegetables, volatile organic compounds (VOC) accumulate
    when they are closed into containers or packages. The temperature and humidity
    can also be useful for monitoring food spoilage, not to mention that temperature
    is a key–value when it is needed to maintain the cold chain. In this regard, some
    of the authors have already presented in [57] a UHF RFID sensor tag suitable for
    cold chain applications. Specifically, the device is a semi-passive tag that includes
    an antenna matched with the EM4325 RFID chip impedance, a micro-controller unit
    (MCU), LEDs and general purpose input output (GPIO) ports, to provide both tracking
    and temperature monitoring of fresh and frozen fish. The device was thought of
    like a reusable board attached to the storage box. The tracked data are collected
    by the system each time the electronic product code (EPC) is read, but if a temperature
    threshold value is overcome for a specific time interval, a LED on the board is
    also lighted up providing a visual alert for the human operator. Another example
    of RFID technology applied to food tracking and monitoring industries is proposed
    in [58], where a printed NFC sensor tag was realized, capable to detect the trimethylamine
    (TMA), another indicator of the fish and meat spoilage. The authors performed
    a practical test by successfully measuring the sensor response to the aging of
    a codfish filet, monitoring the changes in the sensor response from 2 days before
    to 3 days after the expiring date. A similar proof of concept has been provided
    in [59], where a smart RFID tag for monitoring the meat decay is described. As
    the first step, the authors combined different sensors to map the ammonia values
    when temperature and humidity conditions of the pork meat sample varied. This
    procedure allowed to discover 4 levels of ammonia concentration for accurately
    indicating the freshness of under-test food; then the prototype board, integrating
    the UHF RFID tag, MCU and the ammonia sensor has been developed. Chemical and
    physical indicators are not the only ones that can give information about the
    good conservation of food [60]. Food color is also a good quality marker, especially
    for food industries where the product appearance is as important as its taste.
    An interesting example of sensor tag integrating a spectral fingerprint sensor
    capable to detect not only red–green–blue (RGB) frequencies, but also infrared
    and ultra violet (UV) light is shown in [61]. The authors realized an FR4 printed
    circuit board (PCB) with all components of the sensor tag such as the UHF dipole
    antenna, RFID chip, RGB sensor, IR sensor, UV sensor and the MCU. Its possible
    application is in the food industry for the detection of the different food colors,
    indicating variations in food quality, for example, the darker part of a fruit
    that is going to perish. In [62], the authors presented different tools and devices
    (namely sensors, indicators, barcodes and RFID devices) used in the foodstuffs’
    intelligent packaging and explained their role and features for maintaining the
    quality of different food items in terms of both low microbial growth and gas
    concentration and for providing convenience and easiness to users. The review
    study also discussed other packaging technical solutions in the supply chain management
    of food products to control theft and counterfeiting conducts and to improve the
    company position on the market in terms of branding and marketing. As known, sensor
    tags require an anti-collision protocol to avoid collisions with other tags present
    in the same area, as happens, for instance, in a warehouse containing numerous
    tagged products; for this reason, in [63] the authors propose a new anti-collision
    protocol based on fuzzy frame slotted aloha (FFSA) architecture and a novel dynamic
    frame slotted aloha (DFSA) policy. The reported results obtained by performed
    simulations demonstrate a reduction of the reading time in conditions of a high
    density of sensor tags. Most of the devices above described are disposable, ending
    their life once the tagged product is delivered to the food shop or wholesaler;
    instead, the realized BLE tag is reusable for a large number of times by picking
    up the empty containers to be reused by the agricultural producer, as described
    in detail in Section 3.3, thus allowing to amortize the tag cost over a long time.
    3. Materials and Methods 3.1. Design, Functionalities and Operating Modes of Automated
    Fertigation Facility Integrated with the WSN In this paragraph, the functionalities
    and operating modes of designed solar-powered farm management facility are described,
    useful for farmers to monitor and control their productions, to command or simply
    control the cultivation processes performed on crops, such as fertigation cycles
    or disinfestation by pathogens and able to allow the farmer or consumer to trace
    the cultivated products in all the phases following the harvest. The fertigation
    section represents only a component of the whole multi–functional system, fully
    integrated with the farm management software platform that implements a DSS algorithm
    for controlling all growth phases of the cultivated products from planting to
    harvest. The great benefit of the proposed farm facility is also the integration
    with a custom traceability system, for monitoring the storing and transportation
    conditions of the food products starting from their collection. In Figure 5a,
    the solar-powered wooden cottage with the automated fertigation system inside
    is shown; the hydraulic mechanical section includes up to 5 containers with inside
    different powdered fertilizers, each provided of dosing mechanism, based on a
    properly sized cochlea, for precisely calibrating the amount of fertilizer to
    be added to the aqueous solution (Figure 5b). In this way, the desired amount
    of fertilizer is added to the water in the tank; after, a mechanical mixer actuated
    by an electric motor is used for mixing the fertilizing solution. Following, this
    last is pumped by an electric pump towards the different land sections that require
    the fertigation process. The composition of fertilizing solution is determined
    based on agronomic model specific for the considered crop; this model has as inputs
    the weather forecasts and especially soil and environmental data detected directly
    on-field by means of the designed WSN. In fact, each WSN node constantly monitors
    soil and crops’ parameters related to a specific section of the cultivated land
    and wirelessly transmits the detected data, through its coordinator node, towards
    the cloud software platform (as shown in the real implementation of Figure 6).
    This last elaborates received data for determining the correct nutritional and
    water requirements of the plants belonging to the considered section, as a function
    of crop typology and growth phase according to the dynamic agronomic database
    included in the cloud platform. The mathematical forecasting models, included
    into the developed software system, can forecast, depending on the set treatments
    and crops growth status, some advance in time or delay relative to the crops’
    harvests; the user farmer can activate this functionality according to the purchase
    orders, received on the farm web portal by consumers and therefore based on the
    scheduling of deliveries of the agri-food products to be made. Figure 5. (a) Inside
    the realized wooden cottage with mechanical and electronic sections of the automated
    fertigation facility, highlighting the (A) mixing tank and (B) solenoid valves
    for selecting the land sectors to be irrigated; (b) 3D image of the solar-powered
    wooden cottage with the fertigation system inside, indicated by arrows the (A)
    solar panels positioned on the roof and (B) batteries for solar energy storage.
    Figure 6. Distribution of the WSN sensor and coordinator nodes on the land cultivated
    with vineyards in the south of Italy (specifically north of Lecce city), divided
    into two sectors with area of one hectare each. As shown in Figure 7, the main
    section of the developed remotely controlled farming facility was the “hardware
    control unit” which includes both mechanical and hydraulic sections controlled
    by the electronic unit, thereby allowing to obtain optimized fertigation cycles
    in each section of the cultivated land, according to the crops’ needs defined
    by sensors data of the specific WSN cluster on the basis of agronomic models and
    weather forecasts. The “hardware control unit” was fully powered by a photovoltaic
    plant consisting of three poly-crystalline 200-W solar panels placed on the wooden
    cottage roof, a charge regulator (model Giaride 20A solar charge controller, manufactured
    by Giaride, Inc., Hochdorf, Switzerland), the DC/AC converter (model EDECOA 3000
    W, manufactured by EDECOA, Inc., Shenzhen, China) and accumulation battery (model
    LAGM-160, manufactured by Leoch, Inc., Shenzhen, China) for storing the produced
    energy; in addition, a control and protection panel was properly sized for protecting
    the implant against voltage overloads and short-circuits. The designed “control
    unit” collects information from weather service and on-field WSN related to the
    environmental and soil parameters and compares them with proper thresholds derived
    from the agronomic models, thereby defining the fertilizing solution composition
    for each cultivated crop typology. Hence, this unit properly drives the actuators,
    belonging to mechanical and hydraulic sections, for obtaining the estimated fertilizing
    solution and distributing it to desired sections. Another section of the developed
    farming facility is the cloud software platform containing the general agronomic
    database, related to the cultivated crops and derived from the agronomic models
    that determines the threshold values used by the fertigator during its operation.
    Figure 7. Functional scheme of developed fertigation system with the different
    hardware and software sections and related data-flow between them; the collected
    data on the land are processed by the control unit and then shared with the remote
    general agronomic database in order to be combined with the agronomic and sustainability
    models as well as weather conditions or forecast. The fertigation system operations
    are determined, also, depending on the data directly gathered on-field by means
    of the developed WSN; this last is constituted by several sensor nodes, with different
    functions, located in different points of the cultivated field or greenhouse,
    for detecting environmental and soil parameters as well as data on crops growth.
    Each sensor node is fed through a photovoltaic system constituted by a small amorphous
    silicon solar panel, the LTC3105 DC–DC voltage regulator (manufactured by Linear
    Technology, Norwood, MA, USA) to recharge super-capacitor or lithium battery properly
    dimensioned for getting long energy autonomy. The WSN is arranged according to
    a tree structure, including nodes equipped with sensors for acquiring soil and
    environmental data and coordinator nodes (or middleware nodes) that collect the
    data from sensor nodes and transmit them towards the central unit of the fertigation
    system. Referring to the agricultural land shown in Figure 6 employed for the
    cultivation of a vineyard with a total area of just over two hectares, the realized
    WSN was tested by placing a sensor node every 500 m2 (i.e., 20 nodes distributed
    for each one-hectare sector, as depicted in Figure 6), all connected, through
    the coordinator nodes, to a single control unit, that manages the fertigation
    processes. In this way, two neighboring nodes were spaced up to a maximum value
    of 25–30 m; such distance was chosen on the basis of some communication tests
    performed also on similar cultivated fields with plants or crops having a maximum
    height of 70–80 cm and thin stem, in order to guarantee a low packet loss percentage
    (<2%). However, the number of sensor nodes has to be chosen according to farmer
    needs, (e.g., if more crop typologies are placed inside the same sector), taking
    into account that the NodeMCU board ensures a communication range up to 70–80
    m in open-field condition or up to 45–50 m in presence of small plants (as above
    specified). On the other hand, the realized WSN was tested inside an orchard (in
    particular cherry trees with 3 m average height), at the beginning keeping the
    same distance between the nodes (30 m), so obtaining a consequent increase of
    the packet loss percentage (≈20%) mainly due to the path loss caused by the obstacles;
    in this scenario, the distance between the nodes has to be reduced up to 20 m,
    for reducing the packets loss percentage to a reasonable value (<2%). As mentioned
    above, in Figure 6 the distribution of sensor and coordinator nodes in a vineyard
    in the south of Italy (specifically north of the Lecce city) is shown, to detect
    soil and air parameters and carry out the communication tests. The land is divided
    into two one-hectare sectors with twenty nodes for each one. Five sensor nodes
    (of the overall 20 nodes for each hectare) are configured to act also as coordinator
    nodes (or middleware nodes), gathering the data packets provided by the nearby
    sensor nodes and periodically retransmitting the data, arranged into a multidimensional
    matrix, to another coordinator node closer to the central unit placed on the underside
    of the land, until reaching the latter as following detailed. However, to optimize
    the WSN topology and reduce its cost, the number of coordinator nodes can be reduced;
    consequently, longer distance between them and the central unit has to be covered.
    In this case, a coordinator node equipped with an external antenna is required;
    thus, as an alternative to the NodeMCU board, a WEMOS D1 mini board (manufactured
    by Shenzhen RobotLinking Technology Co., Shenzhen, China) equipped with a +5 dBi
    antenna was tested in these conditions allowing a higher communication range.
    Regarding the WSN implementation as shown in Figure 6 for its on-field testing,
    since the average distance between the different nodes is less than 45–50 m (namely
    about 30 m) without the presence of large obstacles, both sensor and coordinator
    nodes were realized by employing the ESP8266 NodeMCU board. In addition, the central
    unit implements a mechanism for detecting malfunctions or connection problems
    of each sensor node; in fact, if for five consecutive observation intervals (namely
    after two and half hours), a given sensor node doesn’t transmit the sensors data,
    an alert message is sent to the cloud platform, which warns the operator to check
    the node conditions. All the functionalities of the developed IoT-oriented farm
    management facility are governed by a suitable software platform, enabling the
    farmer or agronomist automatic management of the fertigation of controlled crops,
    the remote actuation and monitoring of the specific agricultural treatments, but
    also the purchase of agri-food products by the consumers, as discussed in Section
    5. 3.2. Sensor Node Architecture and Related Operating Modalities Communication
    networks have evolved towards the IoT sector; currently, the most widely used
    technologies are SigFox, LoRa, BLE, Zigbee and Wi-Fi. Depending on the application,
    one must consider their performance metrics to choose one technology over another.
    For example, if technology maturity is the metric, Lora can be considered in a
    low state, Zigbee in a medium state and Wi-Fi in a very high state. Instead, if
    the availability is the metric, then Lora and Zigbee exhibit a low level while
    Wi-Fi a high level [64]. Specifically, in WSNs applications in precision agriculture,
    Wi-Fi technology is an excellent option, even more so if the Wi-Fi connection
    is established by employing the low-cost ESP8266 module that has an integrated
    chip with Wi-Fi connection and supports the transmission control protocol (TCP)/IP
    protocol. The main objective is to provide any ESP8266-based node with access
    to the Wi-Fi network and act as an acquisition, processing and Wi-Fi communication
    board. In addition, in order to offset the energy expenditure of Wi-Fi technology,
    this module has a low-consumption architecture that allows itself to work in 3
    different modes: active mode, sleep mode and deep sleep mode, as detailed and
    implemented in the following sections. The designed WSN is constituted by sensor
    nodes, equipped with several sensors for acquiring soil and environmental parameters,
    wirelessly connected to the corresponding coordinator node that collects data
    from cluster nodes and sends them to the control unit of the farm management system,
    to be immediately shared on the cloud software platform. Both node typologies
    are based on the ESP8266 NodeMCU electronic board that includes ESP8266 Wi-Fi
    chip; several commercial sensors were connected to acquire soil and environmental
    parameters. The NodeMCU was chosen since it combines, into a single device, microcontroller
    functionalities for data acquisition and processing, as well as a Wi-Fi transceiver
    for the communication between the WSN nodes; also, it includes a power management
    unit (PMU) supporting different sleep modalities, which have allowed us to minimize
    the node power consumption. Specifically, a DHT22 digital sensor (manufactured
    by Aosong Electronics, Guangzhou, China, Figure 8c) was used to detect environmental
    temperature and humidity, a SHT11-based digital probe (manufactured by Sensirion,
    Stäfa, Switzerland, Figure 8d) equipped with a transpiring metallic casing to
    acquire the soil temperature and moisture and finally the SEN0193 capacitive sensor
    (manufactured by DFRobot, Inc., Shanghai, China, Figure 8e) for soil water content;
    also, the SEN0193 moisture sensor is covered with an anti-corrosive layer, allowing
    long periods in contact with the ground without any damage. The transfer function
    of the SEN0193 analog sensor was experimentally determined and then implemented
    in the microcontroller firmware to obtain, from the analog sensor response, the
    soil water content. Figure 8. View of ESP8266 NodeMCU module with highlighted
    the main components included (a) AMS1117-3.3 voltage regulator replaced with the
    MCP1825S-3302E one; (b) schematic of MCP1825S-3302E voltage regulator used for
    reducing node power consumption; (c) DHT22 temperature and humidity digital sensor;
    (d) SEN0193 capacitive moisture sensor (DFRobot); (e) SHT11-based soil temperature
    and moisture digital probe (Sensirion); (f) 1.5-W amorphous silicon solar panel;
    (g) LTC3105 energy harvester breakout (by Crispytronics). The sensor node autonomy
    is guaranteed by a storage device (a 100-mAh lithium battery or 90-F super-capacitor)
    fed by a small flexible photovoltaic panel, able to ensure up to 9 days of energy
    autonomy (without any availability of solar energy, surely an extreme unrealistic
    eventuality). Particularly, the used amorphous-silicon waterproof solar panel
    (manufactured by Dongguan City Xinliangguang New Energy Technology Co., Guangdong,
    China, Figure 8f) is featured by a 1.5-W maximum deliverable power, 2.0-V open-circuit
    voltage, 1200-mA short-circuit current and about 10% conversion efficiency. A
    DC-DC regulation circuit (breakout board designed by Crispytronics, San Diego,
    CA, USA) based on the LTC3105 step-up converter (manufactured by Linear Technology,
    Norwood, MA, USA) was used to interface the solar panel with the storage device
    (Figure 8g); this last has represented either by a 90-F super-capacitor (model
    Vishay HVC 90 F/5.6 V, manufactured by Malvern, PA, USA) or a rechargeable 100-mAh
    LiPo battery (model Go Wireless® 100-mAh LFT401430, Beaverton, OR, USA). In order
    to reduce the sensor node power consumption, some structural modifications were
    performed on the ESP8266 NodeMCU board (manufactured by Espressif Systems, Shanghai,
    China); particularly, the main one concerns the replacement of the proprietary
    ESP8266 NodeMCU voltage regulator (model AMS1117-3.3, manufactured by Advanced
    Monolithic Systems, Livermore, CA, USA) with the MCP1825S-3302E model (manufactured
    by Microchip Technology, Chandler, AZ, USA, see Figure 8a) featured by a lower
    quiescent current (typical value IQ = 120 µA) and dropout voltage (typical value
    ΔV = 210 mV for ILOAD = 500 mA), respect to the same quantities of the initial
    one (IQ = 5mA and ΔV = 1.1 V for ILOAD = 800 mA). Thereby a significant saving
    in sensor node power consumption was obtained during the deep sleep mode in which
    the voltage regulator current consumption is the main contribution. Moreover,
    because the most energetically expensive phase is the transmission one between
    sensor nodes, to extend node autonomy, WSN operation was properly optimized according
    to the flowchart of Figure 9, that describes the operating modalities of both
    sensor and coordinator nodes. Each sensor node acquires the soil and environmental
    parameters from sensors and sends them to the relative coordinator node; at the
    transmission end, the sensor node enters in deep sleep mode for 30 min (time interval
    settable by user) for reducing its power consumption. If the connection with the
    coordinator node fails, the sensor node retries this operation every 1 min until
    the connection is obtained. During the connection phase, sensor nodes belonging
    to a given sector send acquired data to the corresponding coordinator node; every
    30 min this last arranges collected data into a single packet and transmits it
    to the electronic control unit to be sent, via an Internet connection, to the
    cloud software platform, and then returns in the receiving mode. Figure 9. Flowchart
    related to operations performed by a generic sensor node and the corresponding
    coordinator node. The proposed farming facility is constituted by low-cost solutions,
    but reliable at the same time, in all its sections compared to other competitor
    systems. The cost of the fertigator and WSN nodes is a function of the land size;
    for instance, supposing a two-hectare field, the cost of the fertigator is about
    2900–3200 €, including mechanical, electronic and hydraulic sections. For the
    WSN, the cost of each sensor node is about 35 €, significantly lower compared
    to similar solutions present on the market. Considering a two-hectare field (as
    described in Figure 6), divided into two sectors of about one hectare each and
    placing a node every 500 m2 (extendable up to 2000 m2, but with rougher monitoring),
    40 nodes (reducible up to 10) are required for covering the whole land; therefore,
    the cost of the WSN is about 1400 € (350 € for the solution with fewer nodes in
    any case sufficient to ensure a proper communication). 3.3. Description of Developed
    BLE Sensor Tag for Monitoring the Product Conditions and Supporting Traceability
    A BLE sensor tag was developed for monitoring the correct storage conditions of
    the agri-food products during the storing or transportation, in order to assess
    its freshness and integrity, but also to support the product traceability. The
    parameters selected for verifying the good storage conditions are the concentration
    of total volatile organic compounds (TVOCs), NH3 (ammonia) and CO2, the environmental
    temperature and humidity [60]. The TVOCs concentration summarizes contributions
    from some common gaseous species produced during the deterioration of food, such
    as CH₃CH₂OH (ethanol), C2H4 (ethylene), CS2 (carbon disulfide), etc. [54,56].
    Also, the NH3 represents a good indicator of protein decomposition, thus its concentration
    can be used to determine meat freshness [65]. Instead, the CO2 monitoring can
    be used to control the quality of stored cereal and detect their spoilage. In
    particular, CO2 concentrations between 600 and 1.500 ppm indicate the onset of
    mold growth due to excessive moisture inside the stored material or moisture infiltration
    into the structure; instead, concentrations higher than 1500 ppm indicate a serious
    mold growth affecting the whole material or an infestation of insects inside the
    stored food [66]. The developed BLE smart tag, offering a multiparameter detection,
    is featured by great versatility, so allowing its application to different food
    typologies (e.g., vegetables, fruits, meat, fish, etc.), unlike other devices
    reported in the literature or present on the market which are tailored for a specific
    product typology. The designed sensor tag uses the HM-10 BLE module (manufactured
    by Jinan Huamao Technology co, Jinan City, China) based on CC2541 Integrated Circuit
    (IC) (manufactured by Texas Instrument, Dallas, TX, USA), a system-on-chip (SoC)
    combining a 2.4 GHz BLE transceiver, compliant to Bluetooth v4.0 protocol stack,
    with an 8051 MCU, featured by 128 KB flash memory, 8 KB RAM and several supporting
    features and peripherals (i.e., 12-bit ADC, 23 General-Purpose I/O Pins, Watchdog
    Timer). The wide range of peripherals and the integrated BLE transceiver, implementing
    the v4.1 BLE stack, along with the advanced PMU are the main reasons that justify
    the choice of CC2541 IC for the implementation of the BLE smart tag. It has three
    distinct low-power modalities (i.e., PMi, i = 1,2,3) with increasingly lower current
    consumption, making it ideal for portable devices, wearable applications and consumer
    electronics. The CC2541 was programmed using CC debugger and programmer, employing
    IAR Workbench for 8051 MCU. The HM-10 module was set as iBeacon for supporting
    the product traceability in the whole supply chain; during the sleep period of
    the BLE tag, an advertising time interval of 546.25 ms was set for the iBeacon
    modality and the broadcasted packet universally unique identifier (UUID), major,
    minor, Tx power) was used to identify the food container where the BLE sensor
    tag was applied. Obviously, this tracking system aims to trace the agglomerations
    of food products with medium-large dimensions (pallets, bins, boxes, etc.) and
    not for consumer-level tracking. The BLE tag can be reused a large number of times,
    once the container is collected empty from the food shop or wholesaler by the
    farm. In addition, the tag is applied to the inner surface by two screws, thus
    it can be easily removed and applied to another container, in case of damage of
    the latter. For the intended use, since the BLE smart tag can be reused several
    times, the economic impact related to the purchase of the device is greatly reduced.
    Further details about the operation of the developed tracking system are reported
    in the following Section 5. The sensor tag is equipped with a CCS811 digital gas
    sensor (manufactured by AMS, Premstetten, Austria), an ultra-low-power metal oxide
    (MOX) gas sensor able to detect the TVOCs and equivalent CO2 (eCO2) concentrations
    for air quality monitoring applications. The measurements are obtained by means
    of intelligent algorithms able to process raw data related to current and voltage
    values provided by the MOX sensor and acquired by an integrated ADC, to then be
    made available to a host MCU using the I2C interface. Furthermore, the sensor
    has 3 low-power modes optimized for extending the autonomy in portable applications.
    The wide detection range (0 ÷ 1187 ppb for TVOC and 400 ÷ 8192 ppm for CO2), the
    high sensitivity, and the low power consumption make the CCS811 sensor ideal for
    the considered application, given also its high robustness to the external agents
    (high humidity and temperature, as well as presence of dust). The CCS811-based
    breakout board (manufactured by Adafruit Ind., New York, NY, USA, Figure 10a)
    was employed, modified to reduce the power consumption with the removal of the
    built-in 3.3 V voltage regulator (model MIC5225-3.3, manufactured by Microchip
    Technology, Chandler, AZ, USA), since the sensor was fed directly by the 3.3 V
    voltage regulator (model XC6206-3.3 with a lower quiescent current of only 25
    µA in idle mode, manufactured by Torex Semiconductor, Tokyo, Japan) included in
    the power supply section of the BLE tag (Figure 11). Figure 10. (a) CCS811 breakout
    board for detecting total volatile organic compounds (TVOCs) and eCO2 concentration;
    (b) BPM280 breakout board used for monitoring environmental temperature and humidity;
    (c) MiCS-5914 breakout board for detecting the ammonia concentration. Figure 11.
    Schematic representation of the connections between the different components constituting
    the BLE smart tag. In addition, the sensor tag includes a BMP280 digital temperature
    and humidity sensor (manufactured by Bosch Sensortec, Reutlingen, Germany), featured
    by 300–1100 hPa pressure range and −40–+85 °C temperature range; it is based on
    a piezo-resistive pressure sensor combined with an integrated mixed-signal conditioning
    and acquisition section, then providing the conversion results through a digital
    interface (serial peripheral interface—SPI or inter-integrated circuit—I2C) (Figure
    10b). The small dimension and the high number of the functionalities of BMP280
    sensor allowed us to significantly reduce the overall size of the realized BLE
    tag, maintaining at the same time very low its power consumption. Three different
    operating modalities are available, to optimize the power consumption in low-power
    applications. To detect the ammonia concentration, a Micro-Electro-Mechanical
    System (MEMS) MOX gas sensor (model MiCS-5914, manufactured by Sensortech, Inc.,
    Oxnard, CA, USA) was employed, featured by a 1–500 ppm detection range, a sensing
    resistance in the air between 10 KΩ and 1500 KΩ and sensitivity factor (Rair/R1
    ppm) between 1.5 and 15. A MiCS-5914-based breakout board (manufactured by Feng
    Tai Co., Hong Kong, China), equipped with an acquisition and transmission section
    based on the STM32 MCU (manufactured by ST Microelectronics Co., Geneva, Switzerland),
    was interfaced with the HM10 board by I2C serial communication (Figure 10c). The
    built-in 93 Ω pull-down resistor in series to the internal heater of the MOX sensor
    was substituted with a 47 Ω resistor, to power supply the board with 3.3 V and
    still ensuring the right value (2.2 V) of the heater voltage; furthermore, a high-side
    channel-P metal-oxide-semiconductor field-effect transistor (PMOSFET) switch was
    added to turn off the sensor, to reduce the power consumption when the sensor
    tag is in the idle mode. The three sensors were interfaced through the I2C bus
    with the CC2541 TWI (two-wire interface) module corresponding to the pins 15 (serial
    data—SDA) and 20 (serial clock—SCL) of the HM-10 board, placing two 4.7 KΩ pull-up
    resistors on the two lines. In addition, the CCS811 sensor was kept in sleep condition
    when no measurement was required, thus reducing the current absorbed by the sensor
    (i.e., only 19 µA with a 1.8 V power supply); the sensor was woken up by putting
    down the nWAKE line (low active) through a GPIO (i.e., PIO11 pin) of the HM-10
    board and then setting the third measurement modality (called Mode 3) in the MEAS_MODE
    register; after, 10 min have to be expected before the measurement. Similarly,
    also the ammonia sensor (MiCS-5914) was turned on 10 min before the reading, so
    allowing the sensor to reach the optimal operative temperature. Such time interval
    was determined through different experimental tests carried out on the two gas
    sensors (for TVOC and CO2 and NH3, respectively), by comparing the obtained measures
    with those provided by two commercial gas detectors, namely a TVOC and CO2 combined
    detector (model ZN-202S, manufactured by Air Ae Steward, Inc., Shenzhen, China)
    and another for Ammonia (model WASO-XM, manufactured Hunan Gri Instrument Co.,
    Hunan, China). The power supply section is based on the XC6206-3.3 step-down voltage
    regulator for adapting the voltage provided by the 2500 mAh Lipo battery (model
    LIPO785060 manufactured by Pkcell battery Co., Shenzhen, China) to 3.3 V required
    by all the devices included in the BLE tag (Figure 11). The power consumption
    analysis of the BLE tag prototype is reported in the Section 4.2, as well as the
    description of the proposed tracking and tracing system based on the BLE smart
    tags and the mobile application is detailed in the Section 5.1. The cost of the
    developed BLE smart tag is low, about 25–30 € including all sections, despite
    its superior functionalities compared to other competitor devices present on the
    market, which usually monitor only a single quantity (e.g., temperature or a single
    gas species). However, this cost is easily depreciable, given that the device
    is reusable for a long time, as previously described. 4. Results 4.1. Functional
    Testing and Power Consumption Analysis of Designed WSN Node The developed WSN
    was tested in order to determine the effective power consumption of each node
    typology and thus establish the energy autonomy of the employed power supplying
    device. Specifically, the power consumption of a sensor node for different operating
    modes and scenarios are below reported. As described above, the original ESP8266
    NodeMCU voltage regulator (model AMS1117-3.3) was replaced with a more efficient
    one (model MCP1825S-3302E) in terms of quiescent current and dropout voltage to
    reduce the node power consumption. Power consumption is an essential factor in
    the performance and life of WSN. To analyze network operation, we take into account
    that each node sends its name, an ID message that identifies the number of data
    packets sent by each node, the Wi-Fi signal strength in the transmission and the
    sending time. This work emphasizes energy consumption due to the impact of Wi-Fi
    and BLE technologies. While interesting, other performance metrics, as the communication
    statistics, are not considered in this analysis, but are expected to be proposed
    in future work. Some of these parameters are related to the number of packets,
    where all the messages could be sorted by node and number of sent messages in
    order to obtain the lost messages in the network. With this arrangement, the messages
    that were not labeled as consecutive numbers are searched to verify that there
    was no jump. In addition, the nodes have timers that control the losses or delays
    and sliding windows for the flow control in the sending of data. In addition,
    since the network keeps all the nodes synchronized, it is enough to subtract the
    reception time and the emission time to remove the latency in the reception of
    messages. It is interesting to note that the nodes continue to send the message
    numbers without interruption, demonstrating a high network capacity against failures.
    The experimental setup for power consumptions analysis is depicted in Figure 12;
    the sensor node was fed with 3.7 V, provided by a power supply generator (model
    E3631A, manufactured by Agilent Technologies, Santa Clara, CA, USA), directly
    applied to the voltage regulator input, voltage value chosen to reproduce the
    real use of the node fed by the LiPo battery or 90 F super-capacitor. A digital
    oscilloscope (model DSO5072P, manufactured by Hantek, Shandong, China) was used
    to acquire the voltage drop waveforms across a 4 Ω sensing resistor in series
    with node power supply line, for determining absorbed current values during the
    different operating phases (inset of Figure 12). In order to accurately measure
    the very low absorbed current during deep sleep modality, also a digital multimeter
    (model GDM8351, manufactured by Gwinstek, Taipei, Taiwan, with 1 µV resolution)
    was placed in parallel to the 4 Ω sensing resistor. In addition, from the acquired
    signals, the time duration of each node operating phase is determined to calculate
    the related energy consumption. Figure 12. Experimental setup to determine sensor
    node power consumption in the different functioning modes, namely coordinator
    node searching-data acquiring and transmission–deep sleep mode. In Figure 13a,
    the oscilloscope traces related to the 4 Ω sensing resistor terminals (yellow
    and light blue lines) and to their difference (purple) are reported, thus being
    able to easily distinguish each node functioning mode, namely the wake up (green
    box), unsuccessful data transmission to an unavailable coordinator node (yellow
    box) and subsequent return to the deep sleep modality (NodeMcu switching off,
    red box). As above described, the sensor node tries to establish a connection
    with the coordinator node for a time duration of 20 s (as depicted in the flowchart
    of Figure 9), otherwise, it returns in deep sleep mode to reduce its power consumption
    (Figure 13a). The absorbed current values from the sensor node, during all the
    operating phases, are then determined. Figure 13. (a) Oscilloscope traces acquired
    during unsuccessful connection attempt of the sensor node with coordinator node;
    after 20 s, the node returns in deep sleep mode to reduce the power consumption;
    (b) oscilloscope traces acquired during a successful connection of the sensor
    node with coordinator node; only 5.6 s were required to complete the data detection
    and transmission phases. In Figure 13b, the same signals of Figure 13a are reported
    when a connection was established between the sensor node and the corresponding
    coordinator. At first, the sensor node wakes up from deep sleep mode, switches
    on the connected sensors to acquire interest data and then establishes a connection
    with the coordinator node; in this phase, the data are acquired by sensors and
    sent to the coordinator node (red box). Finally, the ESP8266 NodeMCU switches
    off the connected sensors (green box) and returns in deep sleep mode (yellow box)
    for 30 min, as described in Figure 9. Similarly, the current values and time duration
    of different operative phases were determined; the time interval needed to complete
    the acquisition and transmission phases is equal to 8.7 s (Figure 13b), while
    a 5.6-s-long time is required for the only data transmission. The time interval
    required to establish the connection varies over the different operating cycles
    according to the availability of coordinator node; however, a 3.1 s mean value
    was determined based on the several carried out experimental tests. Given the
    above-reported data relative to both time durations and current values during
    the different sensor node operating phases, its energy consumptions can be calculated.
    Because a 4 Ω sensing resistor was used, the voltage drop across it and the corresponding
    absorbed current associated with each operative phase, are following reported
    in Table 1. Table 1. Absorbed current and time duration values, extracted by the
    oscilloscope traces, related to the different node operating phases. If the sensor
    node is fed by 3.7 V power supply voltage (provided by the 100 mAh LiPo battery
    or 90 F super-capacitor) applied to the ESP8266 NodeMCU voltage regulator input
    pin, the energy consumption estimate of the whole sensor node operating cycle
    is given by the following relation: 𝐸𝑠𝑡𝑖𝑚𝑎𝑡𝑒𝑑 𝐸𝑛𝑒𝑟𝑔𝑦 𝐶𝑜𝑛𝑠𝑢𝑚𝑝𝑡𝑖𝑜𝑛=1800 s×0.067
    mA×3.7V+3.1 s×20.156 mA× 3.7 V+5.6 s×35.125 mA×3.7 V=1.405 J=390.333 μWh, (1)
    Given the current values of each source node operative phase, the voltage drops
    on the 90 F feeding super-capacitor (charged to 5 V by placing on the LTC3105-based
    conditioning board the jumper for enabling the 5 V output voltage) were calculated
    as following reported: Deep-sleep mode: 𝑄 1 =0.067 mA×1800 s=0.1206 C→Δ 𝑉 1 =
    𝑄 1 𝐶 = 0.1206 C 90 F =1.340 mV, (2) Coordinator node searching mode: 𝑄 2 =20.156
    mA×3.1 s=0.0625 C→Δ 𝑉 2 = 𝑄 2 𝐶 = 0.0625 C 90 F =0.694 mV, (3) Acquisition and
    data transmission mode: 𝑄 3 =35.125 mA×5.6 s=0.1967 C→Δ 𝑉 3 = 𝑄 3 𝐶 = 0.1967 C
    90 F =2.185 mV, (4) Therefore, the overall voltage drop for a single sensor node
    operating cycle is given by: Δ𝑉=Δ 𝑉 1 +Δ 𝑉 2 +Δ 𝑉 3 =1.340 mV+0.694 mV+2.185 mV=4.219
    mV, (5) Considering that the sensor node carries out 48 cycles for each day and
    that its minimum supply voltage allowed is 3.2 V, then its energy autonomy is
    determined by the following relation: 𝐴𝑢𝑡𝑜𝑛𝑜𝑚𝑦 [gg]= 5 V− 𝑉 𝑖𝑛,min 48×Δ𝑉 = (5−3.2)
    V 48×4.219× 10 −3 V =8.88 gg, (6) Therefore, a sensor node energy autonomy of
    almost 9 days was obtained, in the condition in which the energy contribution
    from the solar panel for recharging the 90 F super-capacitor storage device is
    totally absent due to the bad weather conditions (unrealistic eventuality). Afterwards,
    the sensor node was power supplied by a 100 mAh single cell LiPo battery, recharged
    by the solar energy harvesting system (by placing the jumper correspondent to
    the 4.1 V output voltage on LTC3105-based conditioning board); through the same
    experimental setup of Figure 12, the voltage drop across the 4 Ω sensing resistor
    during the different sensor node operating modalities was acquired by the digital
    multimeter. Similarly, the absorbed current values and the respective time durations
    were determined (Figure 14) and thus the charge amount required by the sensor
    node during the different operating phases calculated, as following reported:
    Figure 14. Oscilloscope traces related to the voltage drop on the 4 Ω sensing
    resistor (yellow and light blue) during a successful connection of the sensor
    node with the coordinator node. The time duration to complete the acquisition
    and transmission phase is equal to 8.2 s. Deep-sleep mode: 𝐼 1 = Δ 𝑉 1 𝑅 𝑠𝑒𝑛𝑠
    = 0.273 mV 4 𝛺 =0.068 mA→ 𝑄 1 = 𝐼 1 × 𝑡 1 =0.068 mA×1800 s= 0.122 C (0.034 mAh),
    (7) Coordinator node searching mode: 𝐼 2 = Δ 𝑉 2 𝑅 𝑠𝑒𝑛𝑠 = 83.928 mV 4 𝛺 =20.982
    mA→ 𝑄 2 = 𝐼 2 × 𝑡 2 =20.982 mA×3.1 s= 0.065 C (0.018 mAh), (8) Acquisition and
    data transmission mode: 𝐼 3 = Δ 𝑉 3 𝑅 𝑠𝑒𝑛𝑠 = 149.012 mV 4 𝛺 =37.253 mA→ 𝑄 3 =
    𝐼 3 × 𝑡 3 =37.253 mA×5.6 s= 0.208 C (0.058 mAh), (9) As can be noted, the current
    and charge values obtained are very similar to those previously reported. Therefore,
    the electric charge needed to complete a single operating cycle is given by: 𝑄
    𝑇𝑂𝑇 = 𝑄 1 + 𝑄 2 + 𝑄 3 =0.034 mAh+0.018 mAh+0.058 mAh=0.110 mAh, (10) Given that
    the system performs 48 operating cycles per day and assuming a 30% LiPo battery
    discharge margin, the sensor node autonomy could be expressed by the following
    relation: 𝐴𝑢𝑡𝑜𝑛𝑜𝑚𝑦 [gg]= 0.7×𝐵𝑎𝑡𝑡𝑒𝑟𝑦 𝐶𝑎𝑝𝑎𝑐𝑖𝑡𝑦 [mAh] 48× 𝑄 𝑇𝑂𝑇  [𝑚𝐴ℎ] = 0.7×100
    𝑚𝐴ℎ 48×0.11 mAh =13.26 gg, (11) A 70% discharge margin was supposed because within
    that limit the LiPo battery can ensure the right supply voltage for the sensor
    node (minimum value = 3.2 V), below that state of charge then the battery voltage
    goes down suddenly. Therefore, a sensor node energy autonomy greater than 13 days
    was obtained with the developed system, in conditions of absence or limited availability
    of solar energy to recharge the used storage device. The different discharge profile
    of LiPo batteries respect to super-capacitors allows a greater sensor node energy
    autonomy, thus the LiPo batteries must be considered more appropriate for the
    considered application. 4.2. Operation Modalities and Power Characterization of
    Developed BLE Smart Tag The prototype of the BLE smart tag was realized by placing
    the sensing breakout boards on a prototyping board and realizing the connections
    on its back (Figure 15); to simplify the wiring, the HM-10 module was soldered
    on an adapting board in order to expose all its pins, making easy the connection
    with the programmer. In addition, the voltage regulation section, based on the
    XC6206-3.3 IC, was placed on the back of the prototyping board, as well as the
    LiPo battery on the bottom of the plastic box, under the electronic boards; for
    sake of clarity, the LiPo battery is shown in Figure 15, besides to the board.
    All the mentioned components were positioned inside a plastic box, with a perforated
    cover to allow the right detection of parameters inside the container where the
    BLE sensor tag is installed. Figure 15. The prototype of the developed BLE smart
    tag placed inside a plastic box with a perforated cover. The operation modality
    of the developed BLE smart tag is described in the flowchart reported in Figure
    16; at first, the setting of different interfaces and registers of the CC2541
    IC (microcontroller on board to the HM-10 control module) has to be defined, to
    allow connection with the employed sensors. Afterward, for a time interval equals
    to the wake_up period (default value 24 h), the HM-10 module is set in the iBeacon
    modality, broadcasting an advertising packet every 546.25 ms (time interval between
    the advertising packets, as detailed in Figure 18a) by exploiting the halSleep()
    and osal_set_event() methods of the BLE v1.4.1 stack; when the module doesn’t
    transmit any advertising packets, the HM-10 module brings itself in PM3 low power
    modality, so allowing a great reduction of the power consumption. Once the sleep
    timer overflows the wake_up time interval (default value 24 h), the HM-10 module
    is switched to the active mode, thus waking up the CCS811 sensor and switching
    on, by the CMOS switch, the MiCS-5914 sensor for 10 min allowing them to reach
    their operative temperature; as previously described, such time interval was experimentally
    determined, as the minimum value required by the two sensors for reaching their
    operative temperature. After this time interval, also the BMP280 temperature and
    moisture sensor is woken up and then all the data are acquired from the sensors
    and elaborated for extracting the aforementioned parameters (i.e., gas concentrations,
    temperature and humidity, Figure 16). Afterward, each parameter is compared with
    specific thresholds, chosen as a function of the stored agri-food product typology,
    since each food typology is featured by a storage temperature and specific gas
    types that indicate the food spoilage, as reported in the literature [59,67,68]
    (Figure 16); besides, such threshold values depend on the shape and size of the
    food container, on the positioning into the container of the tag respect to the
    product level, as well as on the presence of ventilation, namely if the food package
    is sealed or open. The threshold values can be set or modified by reprogramming
    the BLE smart tag, every time that the agri-food product stored in the container
    is changed. Figure 16. Flowchart related to the operation modality of developed
    Bluetooth low energy (BLE) smart tag placed inside the container where the agri-food
    products are stored. If abnormal parameter values are detected, the wake_up period
    is halved compared to the previous one, up to a minimum value of 6 h; afterward,
    only if no monitored parameter is beyond the preset limits, the wake_up period
    is reset to 24 h (Figure 16). Following, the BLE tag enables the deep sleep mode
    for the BMP280 and CCS811 sensors and turns off the MiCS-5914 sensor and then
    it establishes the connection with the Bluetooth gateway, towards which transmits
    the acquired data along with a warning byte, which indicates if a certain parameter
    has assumed an abnormal value (alarm condition). Specifically, 5 bits of the warning
    byte are associated with the 5 parameters acquired by the BLE tag, arranged as
    depicted in Figure 17 (each bit set to “1” logic in case of an alarm condition).
    Finally, the operating cycle above described starts again with the BLE smart tag
    set in the iBeacon modality, with the same setting previously reported, for the
    time interval (24 h or 12 h or 6 h), as determined in the previous cycle. Figure
    17. Structure of the warning byte transmitted from the BLE tag to signal an alarm
    condition related to the acquired parameters. During both iBeacon modality and
    data transmission phase of the BLE smart tag, the transmitted power was set to
    0 dBm by using hciStatus_t HCI_EXT_SetTxPowerCmd() method, in order to comply
    with the detection range requirements described in the following Section 5.1.
    Afterward, the BLE smart tag was tested for determining its overall power consumption,
    thus establishing the energy autonomy. A GDM8351-model digital multimeter was
    placed in series to the power supply line of the BLE tag, for acquiring the current
    values with a 100 ms sampling rate to determine the power consumption for each
    operative phase. In Table 2, the measured current values are summarized, along
    with the time duration of each phase determined by placing a 10-Ω sensing resistor
    in series to the power supply line and monitoring, with a DSO5072P-model digital
    oscilloscope, the voltage drop on the sensing resistor. The measures were carried
    out by considering a 24 h wake_up period and the time durations reported in Table
    2 refer to a single operative cycle of the BLE tag (set of phases outlined in
    the flowchart of Figure 16). In addition, in Figure 18a the oscilloscope traces
    related to the 10-Ω sensing resistor terminals (yellow and green lines) and their
    difference (purple) are reported, during the iBeacon modality of BLE smart tag;
    as it can be noted from Figure 18b, a 130 mV peak value for the 10-Ω drop voltage
    was measured during the packet transmission (time duration of 5 ms), corresponding
    to a 13 mA absorbed current. As can be noted in Figure 18a, the time interval
    between the iBeacon packet transmissions, represented by the current absorption
    peaks, is equal to about 545 ms, time interval previously set during the setting
    phase of the CC2541 module (Figure 16). Thanks to the firmware strategies implemented
    in the flowchart of Figure 16 for the power consumption minimization of the different
    modules, a very long lifetime (more than 5 months) of the employed LiPo battery
    was obtained, as reported below. Figure 18. (a) Oscilloscope traces acquired during
    the iBeacon modality of the BLE smart tag; every 546.25 ms an advertising packet
    is transmitted, indicated by a peak of the voltage drop on the sensing resistor;
    (b) the peak voltage drop is equal to 130 mV, corresponding to an absorbed current
    value of 13 mA. Table 2. Current absorbed by the BLE smart tag during the different
    operative phases along with the relative time durations referred to a single operative
    cycle. Once measured the current values for each BLE tag operative phase, then
    the overall charge required to carry out an operating cycle was calculated as
    follows: iBeacon phase: 𝑄 1 =0.237 mA×24 h=5.688 mAh, (12) Heating phase of the
    gas sensors: 𝑄 2 =28.287 mA× 600 3600  h=4.714 mAh, (13) Acquisition and transmission
    phase: 𝑄 3 =8.675 mA× 1.426 3600  h=0.003 mAh, (14) The overall charge required
    for a single operative cycle of the BLE tag is given by the following formula:
    𝑄 𝑇𝑂𝑇 = 𝑄 1 + 𝑄 2 + 𝑄 3 =5.688 mAh+4.714 mAh+0.003 mAh=10.405 mAh, (15) Following,
    assuming a 30% LiPo battery (with a 2500 mAh capacity) discharge margin, the energy
    autonomy of the BLE smart tag was determined: 𝐴𝑢𝑡𝑜𝑛𝑜𝑚𝑦 [gg]= 0.7×𝐵𝑎𝑡𝑡𝑒𝑟𝑦 𝐶𝑎𝑝𝑎𝑐𝑖𝑡𝑦
    [mAh] 𝑄 𝑇𝑂𝑇  [mAh] = 0.7×2500 mAh 10.405 mAh =168.20 gg, (16) Therefore, an energy
    autonomy greater than 168 days (i.e., 5.6 months) was obtained for the developed
    BLE sensor tag, fully satisfactory for the considered application. 5. Discussion
    As discussed above, the smart making-decisions section of developed IoT-based
    farm facility is the software platform, enabling the control and management of
    all its functionalities and offering to the customers some value-added services
    related to the traceability of agricultural products; specifically, the platform
    includes the so-named Campaign Registry application, able to monitor and establish,
    in an optimized way, the fertigation treatments for each monitored land area on
    the basis of the following inputs and agronomic models: WSN data related to environmental,
    soil and crops parameters; User inputs, namely data entered, through the dedicated
    “Farm App” installed on the smartphone/tablet, by the farmer or agronomist; Data
    obtained by reliable weather stations; Purchase orders, namely information able
    to influence the growth or production of a specific crop if the market requires
    greater or lower production levels. The cloud database is managed by professional
    users (as informatics or agronomists) in order to constantly update the set of
    information (temperatures, soil data, fertilizer types, fertigation periods, weather
    conditions, crops growth status), taking into account any change in the state
    of the land over time, for optimizing the quality and yield of cultivated products
    and, at the same time, preserving the soil wellbeing with consequent advantages
    for the ecosystems. Furthermore, the agronomist can update the data into the on-cloud
    database on the basis of the on-field observations related to the crop phenological
    development. In addition, he can also check the fertigation system correct operation
    by sending a “status query” through the smartphone app to the remote management
    platform as well as he can identify a land portion with his smartphone by reading
    the QRcode, placed near each portion of the cultivated land, in order to view
    or update the related information contained in the “Campaign Register” application
    of the software platform and finally he can request the execution of a specific
    treatment of fertigation or against pests, on the considered land portion bypassing
    the remote automated management. The developed software platform automatically
    stores detailed information concerning the treatments performed on followed cultivations
    during the whole growth period, allowing the customers to verify, through a suitable
    user interface, the treatments carried out on the considered agricultural products,
    and thus their quality, but also to place a purchase order. Through the developed
    platform, the consumers can monitor the whole supply chain of the agri-food products,
    obtaining information concerning the freshness and genuineness of the agricultural
    product, so enabling additional revenues to the farmer. In addition, the data
    and parameters of the general agronomic database can be monitored and updated
    by the farmer or agronomist, as well as they can manage the execution of specific
    treatments through the developed platform. The customers can access only to the
    information concerning performed treatments and to product traceability [69].
    The data derived from the agronomic models, crucial for the fertigation system
    operation, are stored both in the on-cloud database and in the local one, data
    concerning the nutritional needs of each considered crop typology as function
    the seasonal period, growth phase and specific environmental/geographical/meteorological
    conditions. In fact, the possible system operation modes are two, namely: Bottom-Up
    modality: the master is a stand-alone component (PC of the solar-powered fertigation
    system) where the main operating activities are performed, stored and synchronized
    with the on-cloud platform (remote server). In this way, the service is guaranteed
    even if the Internet connection is absent or not always guaranteed. Top-Down modality:
    the master is the on-cloud architecture that manages and commands the needed operations
    to be performed by the solar fertigation system; moreover the farmer can remotely
    set the fertigation cycles and land sections, where to carry out the farming treatments.
    The fertigation system has two user levels, namely: Level 1—System Management:
    the authorized user can access to each software section and application as a master
    user, can create a lower-level user (farmer/customer), visualize and remotely
    control each installed fertigation system and manage all their operations. Further,
    he can update the general agronomic database by adding further crops to be cultivated
    or modifying the parameters and calculation algorithms; Level 2—Farmer or Customer:
    he is associated with a single fertigation system, can set the crops in the different
    areas of the land (only the farmer), control automatically or manually the irrigation
    or fertigation cycles (only the farmer), view the history of crops parameters
    and certification reports of the carried out treatments. The developed application
    comprises a traceability system of cultivated crops, named Customer Free Campaign
    Register, an open-source tool, connected to the general agronomic database, by
    which the customer can verify the farming processes and quality standards, even
    before arranging the purchase order, so providing an added value for the farmer.
    The software platform allows enabled users to remotely interact with the farm
    management system, for example, to check the historical register of the different
    carried out agricultural processes or to update the agronomic database based on
    observations directly on cultivated land related to crop growth. In order to highlight
    the functionalities and utility of developed smartphone application for the farmers
    or customers, following some screenshots are shown and described. In Figure 19a,
    the “view section” is shown from which the farmer (user M1) can check the irrigated
    sectors (green color); clicking on “Status” button, the enabled user can control
    soil and crops parameters detected by the WSN whereas with the M-button he can
    manually command a specific process for the considered land sector bypassing what
    established by the DSS on the basis of the agronomic models. In Figure 19b, the
    “Data history section” for sector 1 is shown with the chronology of the WSN data
    and performed treatments; to such section, both the farmer and customer users
    can access from their account. Figure 19. Screenshots of the realized application:
    “view section” where the farmer (user M1) has a complete overview of the cultivated
    crops (a) and “Data history section” through which the farmer or customer monitor
    crops’ parameters and the performed treatments for growth optimization (b). Finally,
    to verify the correct functioning of the developed IoT-oriented farm management
    facility constituted by the sensor nodes installed in the cultivated ground and
    by the cloud software platform, different measurement campaigns were carried out
    actually on cultivated lands and the obtained results have certified the correct
    functioning of the hardware and software sections. 5.1. Proposed Tracking and
    Tracing System for Monitoring the Storage Conditions of Agri-Food Products and
    Real Tests of the Designed BLE Smart Tag As previously described, the proposed
    farm management and control system includes a traceability system of the agri-food
    products along the whole SC able to monitor and share the main indicators for
    determining the storing and transport conditions. This system is based on the
    BLE smart tags, with the structure described in the Section 3.3, placed into the
    containers where the agri-food products are stored. Once the products arrive at
    a storage warehouse, the UUID of newly arrived containers are detected by the
    Bluetooth gateway (called “Incoming Bluetooth Gateway”, in Figure 20) located
    near the warehouse unloading area; when a new UUID is found, the incoming gateway
    updates, through a Wi-Fi gateway, the new container location in the relative record,
    associated with the detected UUID, in the cloud database (i.e., an Azure SQL database).
    Figure 20. Schematic representation of the proposed tracking and tracing system
    based on the BLE smart tags. A commercial Bluetooth gateway (model BTP104-SS,
    manufactured by Jinou, Chongqing, China) was employed for carrying out detection
    and communication tests of the BLE smart tags with the on-cloud platform (as represented
    in the scenario of Figure 20); by setting the transmitted power level of each
    BLE tag to 0 dBm, a detection range of 12 m was obtained, particularly, in the
    condition in which the tagged containers are stacked for their transportation,
    reaching instead up to 21 m detection distance in the open field condition. Therefore,
    a gateway can be located at the warehouse entrance for detecting the incoming
    containers, whereas inside the warehouse the gateways have to be regularly distributed
    (at a distance of 12 m from each other) for receiving the data transmitted by
    the tags (Figure 20). After the detection of a new container, the Bluetooth gateway
    sends to the remote database a packet containing its identifier (i.e., the UUID)
    along with a code related to the new storage warehouse (Figure 20). The UUID is
    the key for all the operations carried out in the database, namely to insert,
    select, update, delete and call an item. Afterward, the food products are stored
    in the warehouse and the BLE smart tags, placed into the containers, periodically
    send the acquired parameters, suitably arranged in data packets, to the Bluetooth
    gateways located inside the warehouse. Specifically, a 27 bytes packet is transmitted
    by each BLE tag, with the first 16 bytes represent its UUID, 6 bytes are related
    to the TVOC, CO2 and NH3 concentrations and 2 bytes each for the environmental
    temperature and humidity (as depicted in Figure 20). Finally, the warning byte
    is added to the packet to signal anomalies of the monitored parameters, as described
    in the Section 4.2. The data related to a given container, then, are stored into
    a record of the on cloud database, related to the BLE tag UUID; when a container
    leaves the warehouse towards another one, it passes nearby another gateway, called
    “outcoming Bluetooth gateway”, which updates the database reporting its exit.
    The afore-described mechanism continues until the containers are delivered to
    the food shop or wholesaler, where also the empty tagged containers are picked
    up by the farmer to be following reused; the data stored in the database related
    to a given UUID are removed after the expiration date of the food product. The
    user can assess the tracking and storage information of the agri-food products
    employing a mobile application designed by using the Android Studio 3.6.1 development
    environment. After the login, the user (indicated with R, Figure 21a) is directed
    into the main page of the application, where the container UUID can be entered
    typing the alphanumeric characters in the appropriate field and by pushing the
    “Track” button, the user is directed to the page related to the desired container
    (Figure 21a). Afterward, by pushing the “Par. History” button (Figure 21b), the
    user can verify the history of each monitored parameter pressing the button related
    to the desired quantity (i.e., T, H for humidity, VOC, NH3 and CO2); a visual
    indicator is added above each button to signal abnormal values of the corresponding
    parameter. In addition, the temporal trend of the selected parameter is shown
    (e.g., the temperature in Figure 21b) along with its mean and peak values. Figure
    21. Application screenshots of the tracking and traceability system based on BLE
    tags. (a) logged user (R) inserts the container universally unique identifier
    (UUID); (b) “Par. History” section with shown the history of acquired parameters;
    (c) “Tracking Info” section where the customer checks the tracking information
    related to the entered UUID. By pushing the “Tracking Info” button, the user can
    monitor the tracking information of the considered container (Figure 21c); in
    fact, this page contains a table where are detailed all the movements of the container,
    updated over time by means of the tracking system above described. Several tests
    were performed for validating the operation of the BLE tags and related tracking
    system; the BLE smart tag was placed inside a plastic box (with 50 cm × 40 cm
    × 40-cm dimension) covered by a perforated lid (30 holes with 0.6-cm diameter),
    containing 5 kg of oranges, leaving the box into a refrigerator set to a 5 °C
    target temperature for 20 days. On the 20th day, the plastic container was taken
    out of the freezer and left at room temperature (about 20–25 °C) for further 10
    days. The tag was fixed by means of screws on the inner surface of the plastic
    container, 10 cm above the product level since, from preliminary tests, this position
    can ensure a good detection capability to the device, and, at the same time, avoid
    some false alarms due to local gas accumulation. However, the container dimension,
    shape and ventilation affect the response of the BLE smart tag, since these factors
    determine the gas concentration and distribution inside the container; therefore,
    a preliminary characterization of the BLE tag, before to be used for the specific
    container, is required to determine the threshold values for each gas species.
    For the case under consideration, the threshold values were determined based on
    visual and olfactory observations and set to 581 ppb for TVOC, 176 ppm for NH3
    and 1647 for CO2. If the concentration of a gas species exceeds the aforementioned
    threshold or the temperature and humidity values are outside the set intervals
    (0–10 °C and 30–70% for oranges, respectively), an alarm bit is set in the warning
    byte and sent to the software platform along with the acquired information. Besides
    the temporal trends, the mobile application shows the user the warning on the
    monitored quantities, as a visual indicator which turns red (from green) in case
    of alarms. For instance, in Figure 21b, the data related to the container with
    oranges are reported; once the container is removed from the refrigerator, the
    indicator related to the temperature (marked with T) changes from green to red.
    The temporal trends of the monitored parameters are shown in Figure 22; as it
    can be noted, the measurements are temporally closer from the 20th day, since
    the detected temperature is higher than the upper threshold (set to 10 °C) and
    thus the wake_up period is progressively reduced up to 6 h, as detailed in the
    Section 4.2 (Figure 22a). After removing the box from the refrigerator, TVOC values
    increased significantly due to the fastening spoiling process into the stored
    oranges [70,71]. In addition, the measurements showed an increase of CO2 and NH3
    values throughout the measuring range, slow in the refrigerator and faster outside,
    reaching peak values of 3022 ppm and 287 ppm, respectively (corresponding to 5439.6
    mg/m3 and 199.6 mg/m3). Following, a reduction of CO2 and NH3 values in the last
    days of the observation interval was observed, as already reported in the literature
    [70] (Figure 22b). Figure 22. Temporal trends of the parameters detected by the
    BLE tag applied to the plastic box with 5 kg of oranges inside, during 30-day-long
    period. (a) Temperature and humidity; (b) TVOC, NH3 and CO2. A similar test was
    carried out on 500 g of frozen codfish fillet placed inside a polystyrene box
    with 40 cm × 40 cm × 20 cm dimension, covered by a plastic wrap and leaving the
    container to 0 °C for 20 days; then the box is removed from the freezer and left
    uncovered to room temperature for other 10 days. The BLE tag was attached to the
    internal surface of the polystyrene box, 10 cm above the fish level, in order
    to monitor the storing conditions and the gas levels emitted by the codfish fillets;
    the related temporal trends, over the whole observation interval, are reported
    in Figure 23. Similarly, the BLE tag characterization for the container with fish
    inside was performed, to determine the threshold values, so obtaining 389 ppb
    and 256 ppm values for TVOC and NH3, respectively; besides, the temperature and
    humidity ranges were set to 0–10 °C and 20–70%. Thus, if a detected value isn’t
    included in the corresponding set range, an alarm message is sent to the software
    platform and reported on the mobile application by means of the visual indicator
    (turned red) related to the abnormal parameter (Figure 21b). In the first phase,
    the NH3 concentration increases slowly although in the refrigerator, since the
    enzymatic and bacteria growth decomposes the fish proteins even at a temperature
    of a few degrees [72], so producing nitrogen volatile compounds that indicate
    the spoiling of the fish. This trend has accelerated after the defrosting (from
    the 20th day) reaching a peak value of 274 ppm (i.e., 190.5 mg/m3) after about
    4 days, then the NH3 concentration reduced indicating an advanced decomposition
    of fish proteins, as already reported in [73] (Figure 23b). A CO2 concentration
    near to the lower limit of the MiCS-5914 sensor (i.e., 400 ppm) was detected before
    the box left the freezer, values ascribable to the environmental concentration
    inside the box; in fact, once the box was extracted from the freezer and removed
    the plastic wrap, the CO2 concentration is increased slightly around the value
    of 500 ppm, due to the indoor environment. TVOC concentration, initially, grew
    slowly (up to 170 ppb) until the box was in the freezer, increasing then quickly
    when the box was extracted, reaching a maximum value of 626 ppb at the end of
    the observation interval (10 days after the defrosting). Figure 23. Temporal trends
    of the parameters detected by the BLE tag applied to the box with inside 500 g
    of codfish fillets during 30-day-long period. (a) Temperature and humidity; (b)
    TVOC, NH3 and CO2. 5.2. On-Field Testing of the Developed WSN-Based Farm Management
    Facility in Real Scenarios Afterward, different measurement campaigns were carried
    out on-field for testing the operation of all the fertigator sections, but also
    the proper integration of the software platform, implementing the agronomic database,
    with the developed WSN and the weather forecast; in this way, the benefits in
    terms of water savings and proper fertilizer usage were evaluated. At first, the
    system was tested on a land of 1200 m2 cultivated with tomatoes, arranged in rows
    equipped with a drip irrigation system and divided into three sectors. In this
    case, a fertigation unit equipped with a 5000 L mixing tank and 3 hp pump (model
    HF-8B, manufactured by Pedrollo Spa, San Bonifacio, Italy) was employed. A WSN
    constituted by 6 sensor nodes, two for each sector, was installed with one of
    them acting as coordinator node. The considered land is featured by slightly clay
    soil (i.e., a high TAW—total available water value), whereas the tomato plants
    are in the development phase (20 days from the planting); specifically, the reported
    tests were carried out on 22 July 2019, during a week characterized by high environmental
    temperatures and humidity. In these conditions, the agronomic database scheduled
    a unique irrigation per day, lasting an hour and a half, corresponding to 1800
    L water amount for each sector; in addition, the agronomic database established
    a fertigation process with 7.5 kg of N–P–K soluble fertilizer (with 9–30–22 ratios)
    dissolved into the water amount of a normal irrigation. As previously cited, the
    developed system schedules irrigation and fertigation processes according to the
    crops need and WSN data, reducing the occurrence of under- or over-watering conditions,
    thus minimizing any plants stress. In Figure 24a, the temporal trend of soil humidity
    in the sector 2 is shown; the irrigation was scheduled for 6:00 P.M. (post meridiem),
    if the soil water content (average value of the data provided by the two sensors)
    was lower than the set threshold (40%, Figure 24a). However, from 2:00 P.M. to
    5:00 P.M. a heavy rainfall occurred, thus the soil humidity exceeded the 40% value,
    and the scheduled irrigation was canceled, so obtaining water-saving and avoiding
    tomatoes-plants stress due to overwatering. In fact, in Figure 24a the simulated
    humidity values, if the irrigation had not been canceled, are reported, calculated
    taking into account the soil composition (i.e., soil hydraulic conductivity K
    equals to 7.0× 10 −9  ms −1 ), and the amount of precipitated water using the
    Darcy’s law [74]. For the same day, in Figure 24b, the temporal trends of soil
    and environmental temperature are shown; such parameters along with the status
    of the fertigation system are shown to the farmer through the mobile application,
    as above described (Figure 19a). Figure 24. (a) Soil humidity temporal trends
    acquired on land cultivated with tomatoes (on 22/07/2019, Lecce, Italy); (b) soil
    and environmental temperature trends acquired by SHT11 and DHT22 sensors on the
    same day. In addition, the developed farm management facility was tested inside
    a 1700-m2 greenhouse where lettuce plants were cultivated; the greenhouse was
    equipped with suspended sprinkler irrigation implant and a centralized dehumidifier
    to control the environmental temperature and humidity for optimizing the growth
    conditions as well as reducing rotting and the spread of diseases and pests. Specifically,
    the greenhouse was divided into three sectors each equipped with three sensor
    nodes, one of which configured also as coordinator node; a fertigation unit with
    a 500-L mixing chamber and a 3-hp pump (model HF-8B) was installed to irrigate
    three sectors consecutively. The tests were carried out on 9 September 2019; the
    soil inside the greenhouse is mainly sandy (i.e., with a low TAW—total available
    water value) and the lettuce plants are next to harvesting phase; therefore, the
    agronomic database scheduled, for each day, an irrigation in the morning (at 7:00
    A.M., Ante Meridiem) and a fertigation process in the evening (at 7:00 P.M.) for
    a time duration of 30 min (corresponding to 1600 L), if the average soil humidity
    was lower than 40%. The fertigation consisted of dissolving 1.7 kg soluble N–P–K
    fertilizer, with 15–5–20 ratios, into the water amount of a normal irrigation.
    In Figure 25, the temporal trend of soil humidity (blue line) is shown and the
    effects of the irrigation/fertigation steps are evident. In addition, the detected
    air temperature and humidity values (red and green lines, respectively) are used
    to control the dehumidifier implant, so that the greenhouse environmental parameters
    can be kept inside the set ranges (i.e., 15–25 °C and 50–60%, respectively for
    temperature and humidity, Figure 25). Figure 25. Soil and air humidity and air
    temperature temporal trends acquired by the wireless sensor network (WSN) nodes
    installed in a greenhouse, equipped with a centralized dehumidifier implant controlled
    by the data collected on-field (on 09/09/2019, Lecce, Italy). 6. Conclusions Thanks
    to the recent availability of advanced hardware and software solutions that allow
    farmers to control in real time the growth, the harvest and subsequent transformation
    of cultivated crops, the agricultural companies can increase yields, nutritional
    quality and safety, from the health point of view, of the cultivated products,
    reduce production costs and negative impacts on the health and environment, in
    line with the modern principles of economic, environmental and social sustainability.
    A management and traceability system, that employs modern technologies, was developed
    able to support the activities of farms in their productions as well as users
    of the cloud platform in controlling the cultivation processes directly on-field
    and to trace the products harvested from the land along the entire production
    chain. A fertigation system was developed, to manage the frequency and typology
    of the irrigation processes, controlled by an on-cloud software platform implementing
    a decision-making algorithm based on the information provided by the weather service
    and a WSN installed on the field. Specifically, the decisions on timing and fertilizer
    amount are based on a complete state-of-the-art agronomic database, which represents
    the smart section of the fertigation system, reproducing, for a given crop typology,
    the needs in terms of water and fertilizers as a function of the season, growth
    phase, soil typology, along with the soil and environmental parameters. The information
    in the agronomic database was determined by collecting and synthesizing the results
    of previous scientific works and well-known agronomic models (such as the nutrient
    balance-NB one) and made available to the software platform by means of an on-cloud
    MySQL database. The integration of the fertigation system with a custom agronomic
    database represents the main innovation of proposed work. The designed WSN node
    is energetically autonomous thanks to a solar harvesting system properly sized;
    also, the sensor node firmware architecture was discussed, as well as the operating
    modalities for managing data acquisition from sensors and the communication towards
    the WSN coordinator node. In particular, the power consumption of the WSN nodes
    was minimized exploiting the built-in low-power modalities of the NodeMCU board
    and properly configuring the timing of the acquisition and communication phases,
    along with the status of the connected sensors. Experimental tests were performed
    for estimating the node power consumption in the different operative phases, obtaining
    a long lifetime of the used LiPo battery (more than 13 days without any availability
    of solar energy, an unrealistic extreme case). In this way, an automated and traced
    management of the treatments performed on a particular land section is obtained,
    reducing water and fertilizer waste, as well as minimizing the stress-induced
    on the plants, thus enhancing the crop yield. A suitable mobile app allows users
    to fully control all the functionalities of the fertigation system, but also to
    verify all the treatments performed on a given land section. In addition, the
    developed fertigation system enables the implementation of specific management
    strategies, aimed at anticipating or delaying the product collection, actuated
    by properly tuning the irrigation/fertigation timing, on the basis of the customers’
    requests; this scientific innovativeness allows the farmer to achieve economic
    benefits as well as a reduction of the agri-food waste. A tracking and tracing
    system, based on BLE smart tags, was designed capable to monitor the movements
    of the agri-food products from the cultivation field to the consumers and their
    storage conditions. To reduce the power consumption of developed BLE tag, commercial
    microcontroller and sensor breakout boards were modified, resulting in a long-time
    reusable device, a novelty compared to competitor systems reported in the scientific
    literature as well as on the market. The chemical/physical quantities detected
    by the BLE smart tag were chosen in order to provide reliable markers of the freshness
    status of different product typologies (vegetables, meat, fish, etc.), making
    it a versatile instrument adaptable to different scenarios. Respect to existing
    scientific works where only one physical or chemical quantity is monitored to
    detect the spoiling of the specific stored product, instead, the designed BLE
    tag is able to simultaneously detect several quantities, so covering a wide range
    of applications. In addition, the threshold values involved in the HM-10 firmware
    have to be set as a function of the food typology, amount of the stored product,
    as well as the typology and size of the used container; in this way, the designed
    BLE tag can be easily adapted, after a prior characterization, to every container
    typology. Furthermore, by optimizing the HM-10 firmware, both in iBeacon and acquisition
    modalities and implementing proper operating strategies, a reduced power consumption
    of the BLE tag was ensured. The prototype of the BLE smart tag, based on the CC2541
    IC and low-cost sensors, was tested to validate its operation and determine the
    energy autonomy (up to 5.6 months), value to our knowledge not achieved by other
    devices present in literature, considering also that our BLE tag allows detecting
    different chemical/physical quantities, as already highlighted before. The user
    can remotely access the tracking and storing information by means of a properly
    developed mobile application synchronized with the on-cloud traceability database.
    Several tests were carried out to verify the tag functionalities; specifically,
    we have reported the results related to the BLE tag applied to a closed plastic
    or polystyrene box with inside oranges or codfish fillets, respectively and monitoring
    the interest parameters for 30 days (20 days in the refrigerator and 10 days outside)
    by employing the developed mobile application. Author Contributions Conceptualization,
    P.V. and N.I.G.; methodology, P.V. and R.d.F.; software, R.d.F.; validation, P.V.
    and R.V.; formal analysis, R.d.F. and C.D.-V.-S.; investigation, P.V. and R.d.F.;
    data curation, R.d.F. and C.D.-V.-S.; writing—original draft preparation, P.V.
    and R.d.F.; writing—review and editing, P.V., R.V. and R.d.F.; supervision, R.V.
    and N.I.G. All authors have read and agreed to the published version of the manuscript.
    Funding This research received no external funding. Conflicts of Interest The
    authors declare no conflict of interest. References Arulnathan, V.; Heidari, M.D.;
    Doyon, M.; Li, E.; Pelletier, N. Farm-level decision support tools: A review of
    methodological choices and their consistency with principles of sustainability
    assessment. J. Clean. Prod. 2020, 256, 120410. [Google Scholar] [CrossRef] Landaluce,
    H.; Arjona, L.; Perallos, A.; Falcone, F.; Angulo, I.; Muralter, F. A Review of
    IoT Sensing Applications and Challenges Using RFID and Wireless Sensor Networks.
    Sensors 2020, 20, 2495. [Google Scholar] [CrossRef] [PubMed] Zhai, Z.; Martínez,
    J.F.; Beltran, V.; Martínez, N.L. Decision support systems for agriculture 4.0:
    Survey and challenges. Comput. Electron. Agric. 2020, 170, 105256. [Google Scholar]
    [CrossRef] Cañadas, J.; Sánchez-Molina, J.A.; Rodríguez, F.; del Águila, I.M.
    Improving automatic climate control with decision support techniques to minimize
    disease effects in greenhouse tomatoes. Inf. Process. Agric. 2017, 4, 50–63. [Google
    Scholar] [CrossRef] Tan, L. Cloud-based Decision Support and Automation for Precision
    Agriculture in Orchards. IFAC PapersOnLine 2016, 49, 330–335. [Google Scholar]
    [CrossRef] Uva Dharini, P.; Monisha, S.; Narrmadha, K.; Saranya, K. IOT Based
    Decision Support System for Agriculture Yield Enhancements. Int. J. Recent Technol.
    Eng. 2018, 7, 362–367. [Google Scholar] Han, E.; Ines, A.V.M.; Baethgen, W.E.
    Climate-Agriculture-Modeling and Decision Tool (CAMDT): A software framework for
    climate risk management in agriculture. Environ. Model. Softw. 2017, 95, 102–114.
    [Google Scholar] [CrossRef] Cambra Baseca, C.; Sendra, S.; Lloret, J.; Tomas,
    J. A Smart Decision System for Digital Farming. Agronomy 2019, 9, 216. [Google
    Scholar] [CrossRef] [Green Version] Torres, A.B.B.; da Rocha, A.R.; Coelho da
    Silva, T.L.; de Souza, J.N.; Gondim, R.S. Multilevel data fusion for the internet
    of things in smart agriculture. Comput. Electron. Agric. 2020, 171, 1–16. [Google
    Scholar] [CrossRef] Grassini, P.; van Bussel, L.G.J.; Van Wart, J.; Wolf, J.;
    Claessens, L.; Yang, H.; Boogaard, H.L.; de Groot, H.L.E.; van Ittersum, M.K.;
    Cassman, K.G. How good is good enough? Data requirements for reliable crop yield
    simulations and yield-gap analysis. Field Crops Res. 2015, 177, 49–63. [Google
    Scholar] [CrossRef] [Green Version] Wolfert, S.; Ge, L.; Verdouw, C.; Bogaardt,
    M.-J. Big Data in Smart Farming—A review. Agric. Syst. 2017, 153, 69–80. [Google
    Scholar] [CrossRef] Jones, J.W.; Antle, J.M.; Basso, B.; Boote, K.J.; Conant,
    R.T.; Foster, I.; Godfray, H.C.J.; Herrero, M.; Howitt, R.E.; Janssen, S.; et
    al. Toward a new generation of agricultural system data, models, and knowledge
    products: State of agricultural systems science. Agric. Syst. 2017, 155, 269–288.
    [Google Scholar] [CrossRef] [PubMed] Fry, J.; Guber, A.K.; Ladoni, M.; Munoz,
    J.D.; Kravchenko, A.N. The effect of up-scaling soil properties and model parameters
    on predictive accuracy of DSSAT crop simulation model under variable weather conditions.
    Geoderma 2017, 287, 105–115. [Google Scholar] [CrossRef] [Green Version] Rupnik,
    R.; Kukar, M.; Vračar, P.; Košir, D.; Pevec, D.; Bosnić, Z. AgroDSS: A decision
    support system for agriculture and farming. Comput. Electron. Agric. 2019, 161,
    260–271. [Google Scholar] [CrossRef] Yusianto, R.; Marimin, M.; Suprihatin; Hardjomidjojo,
    H. Intelligent Spatial Logistics DSS for tracking and tracing in horticultural
    food security. In Proceedings of the 2019 International Seminar on Application
    for Technology of Information and Communication (iSemantic), Semarang, Indonesia,
    21–22 September 2019; pp. 1–5. [Google Scholar] Pallottino, F.; Menesatti, P.;
    Figorilli, S.; Antonucci, F.; Tomasone, R.; Colantoni, A.; Costa, C. Machine Vision
    Retrofit System for Mechanical Weed Control in Precision Agriculture Applications.
    Sustainability 2018, 10, 2209. [Google Scholar] [CrossRef] [Green Version] Keresztes,
    B.; Germain, C.; Costa, J.-P.D.; Grenier, G.; David-Beaulieu, X.; de la Fouchardière,
    A. Vineyard Vigilant & INNovative Ecological Rover (VVINNER): An autonomous robot
    for automated scoring of vineyards. In Proceedings of the International Conference
    of Agricultural Engineering, Zurich, Switzerland, 6–10 July 2014; ISHS: Zurich,
    Switzerland, 2014; pp. 1–8. [Google Scholar] Roure, F.; Moreno, G.; Soler, M.;
    Faconti, D.; Serrano, D.; Astolfi, P.; Bardaro, G.; Gabrielli, A.; Bascetta, L.;
    Matteucci, M. GRAPE: Ground Robot for vineyArd Monitoring and ProtEction. In Proceedings
    of the ROBOT 2017: Third Iberian Robotics Conference, Seville, Spain, 22–24 November
    2017; Ollero, A., Sanfeliu, A., Montano, L., Lau, N., Cardeira, C., Eds.; Springer
    International Publishing: Cham, Switzerland, 2018; pp. 249–260. [Google Scholar]
    Xiaolin, F.; Hong, G.; Jianzhong, L. Reliability-Aware Power Adjustment in Air-Soil
    Wireless Sensor Networks. Ad Hoc Sens. Wirel. Netw. 2013, 18, 203–223. [Google
    Scholar] Kamilaris, A.; Kartakoullis, A.; Prenafeta-Boldú, F.X. A review on the
    practice of big data analysis in agriculture. Comput. Electron. Agric. 2017, 143,
    23–37. [Google Scholar] [CrossRef] Ojha, T.; Misra, S.; Raghuwanshi, N.S. Wireless
    sensor networks for agriculture: The state-of-the-art in practice and future challenges.
    Comput. Electron. Agric. 2015, 118, 66–84. [Google Scholar] [CrossRef] Visconti,
    P.; Lay-Ekuakille, A.; Primiceri, P.; Ciccarese, G.; de Fazio, R. Hardware Design
    and Software Development for a White LED-Based Experimental Spectrophotometer
    Managed by a PIC-Based Control System. IEEE Sens. J. 2017, 17, 2507–2515. [Google
    Scholar] [CrossRef] Primiceri, P.; Visconti, P.; Melpignano, A.; Colleoni, G.;
    Vilei, A. Hardware and software solution developed in arm MBED environment for
    driving and controlling DC brushless motors based on ST X-Nucleo development boards.
    Int. J. Smart Sens. Intell. Syst. 2016, 9, 1534–1562. [Google Scholar] [CrossRef]
    [Green Version] Abdullahi, S.I.; Habaebi, M.H.; Malik, N.A. Capacitive Electrode
    Sensor Implanted on a Printed Circuit Board Designed for Continuous Water Level
    Measurement. Bull. Electr. Eng. Inform. 2019, 8, 450–459. [Google Scholar] [CrossRef]
    Ramadan, K.M.; Oates, M.J.; Molina-Martinez, J.M.; Ruiz-Canales, A. Design and
    implementation of a low cost photovoltaic soil moisture monitoring station for
    irrigation scheduling with different frequency domain analysis probe structures.
    Comput. Electron. Agric. 2018, 148, 148–159. [Google Scholar] [CrossRef] Bhuvaneswari,
    P.T.V.; Balakumar, R.; Vaidehi, V.; Balamuralidhar, P. Solar Energy Harvesting
    for Wireless Sensor Networks. In Proceedings of the 2009 First International Conference
    on Computational Intelligence, Communication Systems and Networks, Indore, India,
    23–25 July 2009; pp. 57–61. [Google Scholar] Shaikh, F.K.; Zeadally, S. Energy
    harvesting in wireless sensor networks: A comprehensive review. Renew. Sustain.
    Energy Rev. 2016, 55, 1041–1054. [Google Scholar] [CrossRef] Visconti, P.; Costantini,
    P.; Orlando, C.; Lay-Ekuakille, A.; Cavalera, G. Software solution implemented
    on hardware system to manage and drive multiple bi-axial solar trackers by PC
    in photovoltaic solar plants. Measurement 2015, 76, 80–92. [Google Scholar] [CrossRef]
    Visconti, P.; Cavalera, G. Intelligent system for monitoring and control of photovoltaic
    plants and for optimization of solar energy production. In Proceedings of the
    2015 IEEE 15th International Conference on Environment and Electrical Engineering
    (EEEIC), Rome, Italy, 10–13 June 2015; pp. 1933–1938. [Google Scholar] Abdulsalam,
    H.M.; Ali, B.A.; AlYatama, A.; AlRoumi, E.S. Deploying a LEACH Data Aggregation
    Technique for Air Quality Monitoring in Wireless Sensor Network. Proc. Comput.
    Sci. 2014, 34, 499–504. [Google Scholar] [CrossRef] [Green Version] Arroyo, P.;
    Herrero, J.L.; Suárez, J.I.; Lozano, J. Wireless Sensor Network Combined with
    Cloud Computing for Air Quality Monitoring. Sensors 2019, 19, 691. [Google Scholar]
    [CrossRef] [Green Version] Ammari, H.M.; Gomes, N.; Jacques, M.; Maxim, B.R.;
    Yoon, D.H. A Survey of Sensor Network Applications and Architectural Components.
    Ad Hoc Sens. Wirel. Netw. 2015, 25, 1–44. [Google Scholar] Visconti, P.; Primiceri,
    P.; Orlando, C. Solar Powered Wireless Monitoring System of Environmental Conditions
    for Early Flood Prediction or Optimized Irrigation in Agriculture. ARPN J. Eng.
    Appl. Sci. 2016, 11, 4623–4632. [Google Scholar] Visconti, P.; Primiceri, P.;
    Ferri, R.; Pucciarelli, M.; Venere, E. An Overview on State-of-Art Energy Harvesting
    Techniques and Choice Criteria: A WSN Node for Goods Transport and Storage Powered
    by a Smart Solar- Based EH System. Int. J. Renew. Energy Res. 2017, 7, 1281–1295.
    [Google Scholar] Estrada-López, J.J.; Castillo-Atoche, A.A.; Vázquez-Castillo,
    J.; Sánchez-Sinencio, E. Smart Soil Parameters Estimation System Using an Autonomous
    Wireless Sensor Network with Dynamic Power Management Strategy. IEEE Sens. J.
    2018, 18, 8913–8923. [Google Scholar] [CrossRef] Khan, R.; Ali, I.; Zakarya, M.;
    Ahmad, M.; Imran, M.; Shoaib, M. Technology-Assisted Decision Support System for
    Efficient Water Utilization: A Real-Time Testbed for Irrigation Using Wireless
    Sensor Networks. IEEE Access 2018, 6, 25686–25697. [Google Scholar] [CrossRef]
    Jawad, H.M.; Nordin, R.; Gharghan, S.K.; Jawad, A.M.; Ismail, M. Energy-Efficient
    Wireless Sensor Networks for Precision Agriculture: A Review. Sensors 2017, 17,
    1781. [Google Scholar] [CrossRef] [PubMed] [Green Version] Kamilaris, A.; Prenafeta-Boldú,
    F.X. Deep learning in agriculture: A survey. Comput. Electron. Agric. 2018, 147,
    70–90. [Google Scholar] [CrossRef] [Green Version] Del-Valle-Soto, C.; Mex-Perera,
    C.; Nolazco-Flores, J.A.; Velázquez, R.; Rossa-Sierra, A. Wireless Sensor Network
    Energy Model and Its Use in the Optimization of Routing Protocols. Energies 2020,
    13, 728. [Google Scholar] [CrossRef] [Green Version] Liqiang, Z.; Shouyi, Y.;
    Leibo, L.; Zhen, Z.; Shaojun, W. A Crop Monitoring System Based on Wireless Sensor
    Network. Proc. Environ. Sci. 2011, 11, 558–565. [Google Scholar] [CrossRef] [Green
    Version] Kumar, V.; Srivastava, A. The Role of RFID in Agro-Food Sector. ARTOA
    J. 2018, 14, 121–125. [Google Scholar] [CrossRef] [Green Version] Kuswandi, B.
    Freshness Sensors for Food Packaging. In Reference Module in Food Science; Elsevier:
    Amsterdam, The Netherlands, 2017; pp. 1–11. ISBN 978-0-08-100596-5. [Google Scholar]
    Avery Dennison Corporation TT Sensor PlusTM Datasheet. Available online: https://media.digikey.com/pdf/Data%20Sheets/Avery%20Dennison%20PDFs/RF100419%20Datasheet.pdf
    (accessed on 4 May 2020). Avery Dennison Corporation TT Sensor PlusTM 2 Datasheet.
    Available online: https://label.averydennison.com/content/dam/averydennison/lpm-responsive/asia-pacific/en-sa/documents/products/select-solutions/select-solutions-portfolio/po/po-select-solutions-tt-sensor-plus-sapssa-2019-1.pdf
    (accessed on 4 May 2020). Corallo, A.; Latino, M.E.; Menegoli, M. From Industry
    4.0 to Agriculture 4.0: A Framework to Manage Product Data in Agri-Food Supply
    Chain for Voluntary Traceability. Int. J. Biol. Life Agric. Sci. 2018, 12, 146–150.
    [Google Scholar] [CrossRef] Visconti, P.; de Fazio, R.; Costantini, P.; Miccoli,
    S.; Cafagna, D. Arduino-Based Solution for In-Car- Abandoned Infants’ Controlling
    Remotely Managed by Smartphone Application. J. Commun. Softw. Syst. 2019, 15,
    89–100. [Google Scholar] [CrossRef] [Green Version] Gaetani, F.; Primiceri, P.;
    Zappatore, G.A.; Visconti, P. Hardware design and software development of a motion
    control and driving system for transradial prosthesis based on a wireless myoelectric
    armband. IET Sci. Meas. Technol. 2019, 13, 354–362. [Google Scholar] [CrossRef]
    Qi, L.; Xu, M.; Fu, Z.; Mira, T.; Zhang, X. C2SLDS: A WSN-based perishable food
    shelf-life prediction and LSFO strategy decision support system in cold chain
    logistics. Food Control 2014, 38, 19–29. [Google Scholar] [CrossRef] [Green Version]
    Tian, F. An agri-food supply chain traceability system for China based on RFID
    blockchain technology. In Proceedings of the 2016 13th International Conference
    on Service Systems and Service Management (ICSSSM), Kunming, China, 24–26 June
    2016; pp. 1–6. [Google Scholar] Hu, J.; Zhang, X.; Moga, L.M.; Neculita, M. Modeling
    and implementation of the vegetable supply chain traceability system. Food Control
    2013, 30, 341–353. [Google Scholar] [CrossRef] Ampatzidis, Y.G.; Vougioukas, S.G.;
    Bochtis, D.D.; Tsatsarelis, C.A. A yield mapping system for hand-harvested fruits
    based on RFID and GPS location technologies: Field testing. Precis. Agric. 2009,
    10, 63–72. [Google Scholar] [CrossRef] Catarinucci, L.; Cuiñas, I.; Expósito,
    I.; Colella, R.; Fernández, J.A.G.; Tarricone, L. RFID and WSNs for traceability
    of agricultural goods from Farm to Fork: Electromagnetic and deployment aspects
    on wine test-cases. In Proceedings of the SoftCOM 2011, 19th International Conference
    on Software, Telecommunications and Computer Networks, Split, Croatia, 15–17 September
    2011; pp. 1–4. [Google Scholar] Cuiñas, I.; Newman, R.; Trebar, M.; Catarinucci,
    L.; Melcon, A.A. Rfid-based traceability along the food-production chain [Wireless
    Corner]. IEEE Antennas Propag. Mag. 2014, 56, 196–207. [Google Scholar] [CrossRef]
    Müller, P.; Schmid, M. Intelligent Packaging in the Food Sector: A Brief Overview.
    Foods 2019, 8, 16. [Google Scholar] [CrossRef] [PubMed] [Green Version] Manzari,
    S.; Marrocco, G.; Catini, A.; Di Natale, C. Experimental analysis of selectivity
    and dynamic ranges of passive UHF-RFID chemical sensors. In Proceedings of the
    2014 44th European Microwave Conference, Rome, Italy, 6–9 October 2014; pp. 263–266.
    [Google Scholar] Mustafa, F.; Andreescu, S. Chemical and Biological Sensors for
    Food-Quality Monitoring and Smart Packaging. Foods 2018, 7, 168. [Google Scholar]
    [CrossRef] [PubMed] [Green Version] Colella, R.; Chiffi, B.; Rusković, N.; Catarinucci,
    L. RFID Sensing System Based on UHF Platform-Tolerant Antenna for Harsh Industrial
    Environments. In Proceedings of the 2019 4th International Conference on Smart
    and Sustainable Technologies (SpliTech), Split, Croatia, 18–21 June 2019; pp.
    1–4. [Google Scholar] Smits, E.; Schram, J.; Nagelkerke, M.; Kusters, R.; van
    Heck, G.; van Acht, V.; Koetse, M.; van den Brand, J.; Gerlinck, G. 4.5.2 Development
    of printed RFID sensor tags for smart food packaging. In Proceedings of the IMCS
    2012, Nuremberg, Germany, 20–23 May 2012; pp. 403–406. [Google Scholar] Eom, K.-H.;
    Hyun, K.-H.; Lin, S.; Kim, J.-W. The Meat Freshness Monitoring System Using the
    Smart RFID Tag. Int. J. Distrib. Sens. Netw. 2014, 10, 1–9. [Google Scholar] [CrossRef]
    [Green Version] Szulczyński, B.; Gębicki, J. Currently Commercially Available
    Chemical Sensors Employed for Detection of Volatile Organic Compounds in Outdoor
    and Indoor Air. Environments 2017, 4, 21. [Google Scholar] [CrossRef] [Green Version]
    Escobedo-Araque, P.; Martínez-Olmos, A.; Carvajal, M.Á.; Palma, A.J.; Fernández-Salmerón,
    J. Passive UHF RFID tag for spectral fingerprint measurement. In Proceedings of
    the 2015 IEEE 15th Mediterranean Microwave Symposium (MMS), Lecce, Italy, 30 November–2
    December 2015; pp. 1–4. [Google Scholar] Sohail, M.; Sun, D.-W.; Zhu, Z. Recent
    developments in intelligent packaging for enhancing food quality and safety. Crit.
    Rev. Food Sci. Nutr. 2018, 58, 2650–2662. [Google Scholar] [CrossRef] Arjona,
    L.; Landaluce, H.; Perallos, A.; Onieva, E. Dynamic Frame Update Policy for UHF
    RFID Sensor Tag Collisions. Sensors 2020, 20, 2696. [Google Scholar] [CrossRef]
    Van der Wee, M.; Vannieuwenborg, F.; Verbrugge, S. Multi-objective technology
    selection for IoT solutions: A methodological approach. In The Future of the Internet;
    Nomos Verlagsgesellschaft mbH & Co. KG: Baden-Baden, Germany, 2019; pp. 209–220.
    ISBN 978-3-8487-6080-0. [Google Scholar] Shin, H.Y.; Ku, K.J.; Park, S.K.; Song,
    K.B. Use of Freshness Indicator for Determination of Freshness and Quality Change
    of Beef and Pork during Storage. Korean J. Food Sci. Technol. 2006, 38, 325–330.
    [Google Scholar] [CrossRef] Maier, D.E.; Channaiah, L.H.; Martinez-Kawas, A.;
    Lawrence, J.; Chaves, E.V.; Coradi, P.C.; Fromme, G.A. Monitoring carbon dioxide
    concentration for early detection of spoilage in stored grain. In Proceedings
    of the 10th International Working Conference on Stored Product Protection, Estoril,
    Portugal, 27 June–2 July 2010; pp. 1174–1181. [Google Scholar] Taiti, C.; Costa,
    C.; Menesatti, P.; Caparrotta, S.; Bazihizina, N.; Azzarello, E.; Petrucci, W.A.;
    Masi, E.; Giordani, E. Use of volatile organic compounds and physicochemical parameters
    for monitoring the post-harvest ripening of imported tropical fruits. Eur. Food
    Res. Technol. 2015, 241, 91–102. [Google Scholar] [CrossRef] Mendez, M.L.R. Electronic
    Noses and Tongues in Food Science; Academic Press: New York, NY, USA, 2016; ISBN
    978-0-12-800402-9. [Google Scholar] Visconti, P.; Orlando, C.; Primiceri, P. Solar
    powered WSN for monitoring environment and soil parameters by specific app for
    mobile devices usable for early flood prediction or water savings. In Proceedings
    of the 2016 IEEE 16th International Conference on Environment and Electrical Engineering
    (EEEIC), Florence, Italy, 7–10 June 2016; pp. 1–6. [Google Scholar] Burg, S.P.;
    Burg, E.A. Role of Ethylene in Fruit Ripening. Plant Physiol. 1962, 37, 179–189.
    [Google Scholar] [CrossRef] [PubMed] Pinheiro, C.L.; Taranto, O.P.; Tomaz, E.
    Study of volatile organic compounds (VOCs) emitted by orange bagasse drying process.
    Process Saf. Environ. Prot. 2018, 114, 16–24. [Google Scholar] [CrossRef] Geiges,
    O. Microbial processes in frozen food. Adv. Space Res. 1996, 18, 109–118. [Google
    Scholar] [CrossRef] Altissimi, S.; Mercuri, M.L.; Framboas, M.; Tommasino, M.;
    Pelli, S.; Benedetti, F.; Bella, S.D.; Haouet, N. Indicators of protein spoilage
    in fresh and defrosted crustaceans and cephalopods stored in domestic condition.
    Ital. J. Food Saf. 2017, 6, 217–221. [Google Scholar] [CrossRef] [PubMed] Tarantino,
    A.; Romero, E.; Cui, Y.J. Advanced Experimental Unsaturated Soil Mechanics: Proceedings
    of the International Symposium on Advanced Experimental Unsaturated Soil Mechanics,
    Trento, Italy, 27–29 June 2005, 1st ed.; Taylor & Francis: Trento, Italy, 2005;
    ISBN 978-0-415-38337-0. [Google Scholar]  © 2020 by the authors. Licensee MDPI,
    Basel, Switzerland. This article is an open access article distributed under the
    terms and conditions of the Creative Commons Attribution (CC BY) license (http://creativecommons.org/licenses/by/4.0/).
    Share and Cite MDPI and ACS Style Visconti, P.; de Fazio, R.; Velázquez, R.; Del-Valle-Soto,
    C.; Giannoccaro, N.I. Development of Sensors-Based Agri-Food Traceability System
    Remotely Managed by a Software Platform for Optimized Farm Management. Sensors
    2020, 20, 3632. https://doi.org/10.3390/s20133632 AMA Style Visconti P, de Fazio
    R, Velázquez R, Del-Valle-Soto C, Giannoccaro NI. Development of Sensors-Based
    Agri-Food Traceability System Remotely Managed by a Software Platform for Optimized
    Farm Management. Sensors. 2020; 20(13):3632. https://doi.org/10.3390/s20133632
    Chicago/Turabian Style Visconti, Paolo, Roberto de Fazio, Ramiro Velázquez, Carolina
    Del-Valle-Soto, and Nicola Ivan Giannoccaro. 2020. \"Development of Sensors-Based
    Agri-Food Traceability System Remotely Managed by a Software Platform for Optimized
    Farm Management\" Sensors 20, no. 13: 3632. https://doi.org/10.3390/s20133632
    Note that from the first issue of 2016, this journal uses article numbers instead
    of page numbers. See further details here. Article Metrics Citations Crossref   45
    Scopus   54 Web of Science   38 ads   8 PubMed   5 PMC   5 Google Scholar   [click
    to view] Article Access Statistics Article access statistics Article Views 14.
    Jan 24. Jan 3. Feb 13. Feb 23. Feb 4. Mar 14. Mar 24. Mar 3. Apr 0k 10k 2.5k 5k
    7.5k For more information on the journal statistics, click here. Multiple requests
    from the same IP address are counted as one view.   Sensors, EISSN 1424-8220,
    Published by MDPI RSS Content Alert Further Information Article Processing Charges
    Pay an Invoice Open Access Policy Contact MDPI Jobs at MDPI Guidelines For Authors
    For Reviewers For Editors For Librarians For Publishers For Societies For Conference
    Organizers MDPI Initiatives Sciforum MDPI Books Preprints.org Scilit SciProfiles
    Encyclopedia JAMS Proceedings Series Follow MDPI LinkedIn Facebook Twitter Subscribe
    to receive issue release notifications and newsletters from MDPI journals Select
    options Subscribe © 1996-2024 MDPI (Basel, Switzerland) unless otherwise stated
    Disclaimer Terms and Conditions Privacy Policy"'
  inline_citation: '>'
  journal: Sensors (Switzerland)
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: Development of sensors-based agri-food traceability system remotely managed
    by a software platform for optimized farm management
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Visconti P.
  - Giannoccaro N.I.
  - de Fazio R.
  - Strazzella S.
  - Cafagna D.
  citation_count: '20'
  description: This work describes the design of innovative IoT-oriented farm management
    system that employs low-cost WSN for detecting soil, environmental and crops parameters
    that properly processed, in combination with weather forecasts, are used to determine
    future farming activities based on agronomic models implemented in the software
    platform. Goals of carried out research activity are to guarantee production both
    qualitatively and quantitatively of cultivated crops, to increase company income
    and reduce environmental impacts; achieving these objectives is a prerequisite
    for implementing of sustainable agriculture. Connection between traditional cropping
    systems and innovative technologies is achieved through the utilization of low-cost
    wireless electronic modules for acquiring data from connected sensors. The fertigation
    system operation is supported by solar-powered low-cost WSN capable of constantly
    monitoring soil and environmental parameters; thanks to sensor nodes properly
    positioned in cultivated land or greenhouse, interest parameters of both air and
    soil are detected and transmitted to on-cloud database, to allow monitoring and
    remote control from enabled users (farmer or agronomist). For this aim, an application
    specifically realized and tested during the different fertigation system’s functional
    tests, allows users to visualize and eventually remotely intervene by using a
    smart-phone or tablet.
  doi: 10.11591/eei.v9i3.2177
  full_citation: '>'
  full_text: '>

    "USER Username Password Remember me CITATION ANALYSIS Dimensions Google Scholar
    Scholar Metrics Scinapse Scopus QUICK LINKS Editorial Boards Reviewers Abstracting
    and Indexing Guide of Authors Online Papers Submission Peer Review Process Publication
    Fee Publication Ethics Visitor Statistics DOI Deposit Report Contact Us HOW TO
    SUBMIT   JOURNAL CONTENT Search Search Scope      All Authors Title Abstract Index
    terms Full Text      Browse By Issue By Author By Title INFORMATION For Readers
    For Authors For Librarians ARTICLE TOOLS How to cite item HOME ABOUT LOGIN REGISTER
    SEARCH CURRENT ARCHIVES ANNOUNCEMENTS Home > Vol 9, No 3 > Visconti IoT-oriented
    software platform applied to sensors-based farming facility with smartphone farmer
    app P. Visconti, N. I. Giannoccaro, R. de Fazio, S. Strazzella, D. Cafagna  Abstract  This
    work describes the design of innovative IoT-oriented farm management system that
    employs low-cost WSN for detecting soil, environmental and crops parameters that
    properly processed, in combination with weather forecasts, are used to determine
    future farming activities based on agronomic models implemented in the software
    platform. Goals of carried out research activity are to guarantee production both
    qualitatively and quantitatively of cultivated crops, to increase company income
    and reduce environmental impacts; achieving these objectives is a prerequisite
    for implementing of sustainable agriculture. Connection between traditional cropping
    systems and innovative technologies is achieved through the utilization of low-cost
    wireless electronic modules for acquiring data from connected sensors. The fertigation
    system operation is supported by solar-powered low-cost WSN capable of constantly
    monitoring soil and environmental parameters; thanks to sensor nodes properly
    positioned in cultivated land or greenhouse, interest parameters of both air and
    soil are detected and transmitted to on-cloud database, to allow monitoring and
    remote control from enabled users (farmer or agronomist). For this aim, an application
    specifically realized and tested during the different fertigation system’s functional
    tests, allows users to visualize and eventually remotely intervene by using a
    smart-phone or tablet.  Keywords  Cloud software platform; Data processing; IoT
    devices; Precise Farming; Solar-powered sensor node; Wireless sensor network  Full
    Text: PDF   DOI: https://doi.org/10.11591/eei.v9i3.2177 Refbacks There are currently
    no refbacks.     Bulletin of EEI Stats Bulletin of Electrical Engineering and
    Informatics (BEEI) ISSN: 2089-3191, e-ISSN: 2302-9285 This journal is published
    by the Institute of Advanced Engineering and Science (IAES) in collaboration with
    Intelektual Pustaka Media Utama (IPMU)."'
  inline_citation: '>'
  journal: Bulletin of Electrical Engineering and Informatics
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: IoT-oriented software platform applied to sensors-based farming facility
    with smartphone farmer app
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Tapado B.M.
  - Palaoag T.D.
  citation_count: '0'
  description: Widespread use of Information and Communication Technology in the cyber-physical
    farm management cycle paved way to today’s spectacle termed as “smart farming”.
    Such idea was shaped by the use of emerging technologies such as Internet of Things,
    Cloud Computing, satellite technology and Geographic Information System (GIS)
    which leads to introduction of robots and artificial intelligence to farming.
    The use of these smart farming tools enabled the agricultural producers to collect
    huge data about their farms-soil, water usage, fertilizer, climatic condition
    and crop yields. Capturing, storing, organizing and analyzing these gigantic data
    needs modern techniques such as database management system (DBMS) and data analytics.
    Employing smart farming technique such as DBMS as part of farming practice brought
    significant contribution to agricultural productivity especially for abaca fiber
    production which is the lifeblood of every Catandunganon. Designing an information
    base have brought significant impact on planning, farming and propagating more
    abaca fibers which compeled the local abaca stakeholders and authorities in Catanduanes
    to join hands in scheming comprehensive and technology-enabled government programs
    to assist the abaca farmers thus vibrancy of abaca industry is sustained in the
    locale.
  doi: 10.5373/JARDCS/V12SP1/20201071
  full_citation: '>'
  full_text: '>

    "JARDCS HOME ABOUT US FOR CONTRIBUTORS ARCHIVES ONLINE SUBMISSION ARTICLE TRACKING
    CONTACT ARCHIVES Catanduanes Abaca Fiber Production Information Base Design: A
    Groundwork for GIS-Based Application Belen M. Tapado and Thelma D. Palaoag Abstract
    widespread use of Information and Communication Technology in the cyber-physical
    farm management cycle paved way to today’s spectacle termed as “smart farming”.
    Such idea was shaped by the use of emerging technologies such as Internet of Things,
    Cloud Computing, satellite technology and Geographic Information System (GIS)
    which leads to introduction of robots and artificial intelligence to farming.
    The use of these smart farming tools enabled the agricultural producers to collect
    huge data about their farms- soil, water usage, fertilizer, climatic condition
    and crop yields. Capturing, storing, organizing and analyzing these gigantic data
    needs modern techniques such as database management system (DBMS) and data analytics.
    Employing smart farming technique such as DBMS as part of farming practice brought
    significant contribution to agricultural productivity especially for abaca fiber
    production which is the lifeblood of every Catandunganon. Designing an information
    base have brought significant impact on planning, farming and propagating more
    abaca fibers which compeled the local abaca stakeholders and authorities in Catanduanes
    to join hands in scheming comprehensive and technology-enabled government programs
    to assist the abaca farmers thus vibrancy of abaca industry is sustained in the
    locale. Volume 12 | 01-Special Issue Pages: 260-267 DOI: 10.5373/JARDCS/V12SP1/20201071  Download
    PDF Back to Archives Login  JARDCS Journal of Advanced Research in Dynamical and
    Control Systems presents peer-reviewed survey and original research articles.
    Quick Links Scope of JARDCS For Contributors Online Submission Article Tracking
    Contact Publication Ethics & Malpractice Statement Archives Current Issue All
    Archives Special Issues Accepted Articles Scopus SJR © JARDCS 2024 All right reserved."'
  inline_citation: '>'
  journal: Journal of Advanced Research in Dynamical and Control Systems
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: 'Catanduanes abaca fiber production information base design: A groundwork
    for GIS-based application'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - 'Köksal '
  - Tekinerdogan B.
  citation_count: '116'
  description: Smart farming adopts advanced technology and the corresponding principles
    to increase the amount of production and economic returns, often also with the
    goal to reduce the impact on the environment. One of the key elements of smart
    farming is the farm management information systems (FMISs) that supports the automation
    of data acquisition and processing, monitoring, planning, decision making, documenting,
    and managing the farm operations. An increased number of FMISs now adopt internet
    of things (IoT) technology to further optimize the targeted business goals. Obviously
    IoT systems in agriculture typically have different functional and quality requirements
    such as choice of communication protocols, the data processing capacity, the security
    level, safety level, and time performance. For developing an IoT-based FMIS, it
    is important to design the proper architecture that meets the corresponding requirements.
    To guide the architect in designing the IoT based farm management information
    system that meets the business objectives a systematic approach is provided. To
    this end a design-driven research approach is adopted in which feature-driven
    domain analysis is used to model the various smart farming requirements. Further,
    based on a FMIS and IoT reference architectures the steps and the modeling approaches
    for designing IoT-based FMIS architectures are described. The approach is illustrated
    using two case studies on smart farming in Turkey, one for smart wheat production
    in Konya, and the other for smart green houses in Antalya.
  doi: 10.1007/s11119-018-09624-8
  full_citation: '>'
  full_text: '>

    "Your privacy, your choice We use essential cookies to make sure the site can
    function. We also use optional cookies for advertising, personalisation of content,
    usage analysis, and social media. By accepting optional cookies, you consent to
    the processing of your personal data - including transfers to third parties. Some
    third parties are outside of the European Economic Area, with varying standards
    of data protection. See our privacy policy for more information on the use of
    your personal data. Manage preferences for further information and to change your
    choices. Accept all cookies Skip to main content Advertisement Log in Find a journal
    Publish with us Track your research Search Cart Home Precision Agriculture Article
    Architecture design approach for IoT-based farm management information systems
    Open access Published: 11 December 2018 Volume 20, pages 926–958, (2019) Cite
    this article Download PDF You have full access to this open access article Precision
    Agriculture Aims and scope Submit manuscript Ö. Köksal & B. Tekinerdogan   28k
    Accesses 110 Citations 6 Altmetric Explore all metrics Abstract Smart farming
    adopts advanced technology and the corresponding principles to increase the amount
    of production and economic returns, often also with the goal to reduce the impact
    on the environment. One of the key elements of smart farming is the farm management
    information systems (FMISs) that supports the automation of data acquisition and
    processing, monitoring, planning, decision making, documenting, and managing the
    farm operations. An increased number of FMISs now adopt internet of things (IoT)
    technology to further optimize the targeted business goals. Obviously IoT systems
    in agriculture typically have different functional and quality requirements such
    as choice of communication protocols, the data processing capacity, the security
    level, safety level, and time performance. For developing an IoT-based FMIS, it
    is important to design the proper architecture that meets the corresponding requirements.
    To guide the architect in designing the IoT based farm management information
    system that meets the business objectives a systematic approach is provided. To
    this end a design-driven research approach is adopted in which feature-driven
    domain analysis is used to model the various smart farming requirements. Further,
    based on a FMIS and IoT reference architectures the steps and the modeling approaches
    for designing IoT-based FMIS architectures are described. The approach is illustrated
    using two case studies on smart farming in Turkey, one for smart wheat production
    in Konya, and the other for smart green houses in Antalya. Similar content being
    viewed by others RETRACTED ARTICLE: A Review and State of Art of Internet of Things
    (IoT) Article 14 July 2021 The internet of things: a survey Article 26 April 2014
    Internet of Things (IoT), Applications and Challenges: A Comprehensive Review
    Article 28 May 2020 Introduction Smart farming represents the application of modern
    information and communication technologies (ICT) into agriculture to increase
    the amount of production and economic returns, often also with the goal to reduce
    the impact on the environment (Rains and Thomas 2009). Similar terms are used
    for the same purpose such as precision agriculture, site-specific farming, site-specific
    crop management, prescription farming, and satellite farming (Adamchuk et al.
    2004; Zhang et al. 2002). Smart farming builds on advanced technology such as
    cloud computing, remote sensing, data-driven farming, big data analytics and internet
    of things (IoT). Several important benefits of smart farming have been provided
    in the literature including optimizing production efficiency, optimizing quality
    of the crop, minimizing environmental impact, minimizing risk, conservation of
    resources, reducing cost, increasing profit, and better management decisions (Sørensen
    et al. 2010, 2011; Rains and Thomas 2009; Zhang et al. 2002). One of the key elements
    of the smart farming is the farm management information system (FMIS). Although
    initially FMISs started as simple record keeping systems, modern FMISs are sophisticated
    systems with advanced modules supporting a comprehensive set of farming operations
    (Fountas et al. 2015). With the introduction of IoT, FMIS and smart farming in
    general have gained a new momentum. The IoT helps in smart and automated information
    gathering and merging. It helps as well as in monitoring sensor data coming from
    different machines, animals, plants, other farms and greenhouses and other systems
    such as unmanned air and land vehicles. In this way, the decision making and planning
    in the agricultural domain can be further supported which can lead to even more
    effective and efficient farming. With the help of the IoT, farming practices such
    as yield monitoring, cultivar selection, pest management, irrigation, etc. can
    be applied more precisely. Crop yield can be monitored and precise crop maps which
    show high and low production areas can be obtained readily (Rains and Thomas 2009).
    For developing an IoT-based FMIS it is important to design the proper IoT architecture
    which represents the overall gross level structure of the system. IoT based farm
    management information systems typically have different functional requirements
    such as the type of crop, the type of sensors, communication protocols, and the
    data processing capacity. Besides of functional requirements also quality requirements
    such as security level, safety level, time performance, and overall cost of development
    and operation are also different for different applications. The different requirements
    typically require changing the IoT architecture. In the literature, several reference
    architectures for FMISs and IoT have been proposed that can be reused to derive
    the IoT application architecture. Deriving the proper architecture however is
    far from trivial and this can impede the success of the IoT system. The objective
    of this study is to contribute to the current state-of-the-art of FMISs by enhancing
    the current architecture design approaches for IoT-based FMIS. Hereby, the study
    aims to provide an architecture design method for designing IoT-based FMISs. The
    approach presented adopts a feature-driven domain analysis approach to model the
    different smart farming requirements. Further, based on FMIS and IoT reference
    architectures the steps and the modeling approaches for designing the IoT-based
    FMIS architecture are described. The approach is illustrated using two case studies
    on smart farming in Turkey, one for developing IoT-based FMIS for smart wheat
    production in Konya, and the other for smart green houses in Antalya. Background
    and related work Internet of things (IoT) Until recent time, the internet was
    primarily used for interconnecting computers any time and any place but this required
    human interaction and monitoring. The IoT is a new paradigm that adds a dimension
    to the current information and communications technologies (ICTs), whereby the
    dimension “Anything communication” is added to the communication capabilities.
    The IoT enables anytime, anyplace connectivity for anything, by linking the objects
    of the real world with the virtual world. In the IoT world physical things and
    virtual things, all interact with each other in the same space and time. Since
    the IoT is the result of technological progress in many fields such as wireless
    sensor networks, machine-to-machine communication, mobile computing, ubiquitous
    computing, and embedded systems, the term “IoT” might have different meanings.
    Many definitions of IoT can be found in the literature, but the IoT is defined
    by the International Telecommunication Union (ITU) as “the network of physical
    objects or ‘things’ embedded with electronics, software, sensors, and network
    connectivity, which enables these objects to collect and exchange data”. Here
    “thing” is defined as: an object of the physical world (physical things) or the
    information world (virtual things), which is capable of being identified and integrated
    into communication networks (ITU 2005). McEwen and Cassimally (2014) formulate
    the IoT with a simple equation as: “Physical Object + Controller, Sensor, and
    Actuators + Internet = IoT”. The IoT is the result of technological progress in
    many parallel and often overlapping fields, including those of embedded systems,
    ubiquitous and pervasive computing, mobile telephony, telemetry and machine-to-machine
    communication, wireless sensor networks, mobile computing, and computer networking.
    What is important is that IoT adds a dimension to the current ICTs, which already
    provide “any time” and “any place” communication. Various reference architectures
    have been provided for the IoT. In general, IoT architecture is represented as
    a layered architecture. In this case a “layer” simply represents a grouping of
    modules that offers a cohesive set of services. Based on the literature (Al-Fuqaha
    et al. 2015; Pandya and Champaneria 2015; Gazis et al. 2015; Palattella et al.
    2013; Sheng et al. 2013) the reference architecture is shown in Fig. 1. Fig. 1
    IoT reference architecture Full size image The reference architecture includes
    the following layers: device, network, session, application, business, management
    and security. The device layer consists of sensors and physical devices. This
    layer identifies and collects data and specific information generated by sensors
    and physical devices. The data gathered is passed to the network layer. In essence
    the device layer bridges the gap between the physical world and the digital world.
    The network layer provides functionality for networking connectivity and transport
    capabilities. This layer is also called transport layer. This layer securely transmits
    data gathered from sensors to the session layer. The transmission medium can be
    wired or wireless. The session layer is responsible for service management and
    consists of functionality for setting up and taking down of the association between
    the IoT connection points. Several session layer standards and protocols are offered
    by different organizations. Although most of these standards and protocols use
    the transmission control protocol (TCP) or the user datagram protocol (UDP) for
    transport, they have different architectures and characteristics for various purposes.
    The application layer contains the IoT services and manages the system using the
    data from the session layer. The implemented IoT application can be, for example,
    smart farming, smart city, and smart home. The business layer defines business
    logic and workflows. This layer is responsible for the management of all IoT systems,
    services and applications within the domain. The business models are defined in
    this layer based on the data gathered from the application layer. The data is
    analyzed to build the required business models and define the strategies. The
    security layer is a side-car layer relating to the other five layers and provides
    the security functionality. Similarly, the management layer is a side-car layer
    supporting capabilities such as device management, local network topology management,
    and traffic and congestion management (Köksal and Tekinerdogan 2017; Khan et al.
    2012). Architecture design Software architecture for a program or computing system
    consists of the structure or structures of that system, which comprise elements,
    the externally visible properties of those elements, and the relationships among
    them (Venters et al. 2018; Tekinerdogan 2014; Bass et al. 2012; Clements et al.
    2010). Software architecture forms one of the key artifacts in the entire software
    development life cycle since it embodies the earliest design decisions and includes
    the gross-level components that directly impact the subsequent analysis, design
    and implementation (Apel et al. 2013). It is generally accepted that software
    architecture design plays a fundamental role in coping with the inherent difficulties
    of the development of large-scale and complex software. Research on architecture
    design in the last two decades has resulted in different useful techniques and
    approaches. Architectural drivers define the concerns of the stakeholders. A stakeholder
    is defined as an individual, team, or organization with interests in, or concerns
    relative to, a system. Each of the stakeholders’ concerns impacts the early design
    decisions that the architect makes. A common practice is to model different “architectural
    views” for describing the design according to the stakeholders’ concerns (Tekinerdogan
    2014; Demirli and Tekinerdogan 2011; Clements et al. 2010). An architectural view
    is a representation of a set of system elements and relations associated with
    them to support a particular concern (Clements et al. 2010). Having multiple views
    helps to separate the concerns and as such support the modeling, understanding,
    communication and analysis of the software architecture for different stakeholders.
    Architectural views conform to viewpoints that represent the conventions for constructing
    and using such a representation. An architectural framework organizes and structures
    the proposed viewpoints. A recent software architecture framework approach is
    the so-called Views and Beyond (V&B) approach (Clements et al. 2010). The approach
    distinguishes three different categories of viewpoints or styles including module,
    component-and-connector, and allocation styles: “Module” view category that is
    used for documenting a system’s principal units of implementation. “Component
    and Connector” category that is used for documenting the system’s units of execution.
    “Deployment View” category that is used to document the relationships between
    a system’s software and its development and execution environments. A software
    architecture that addresses the concerns of specific stakeholders is here referred
    to as “concrete architecture”. A concrete architecture defines the boundaries
    and constraints for the implementation and is used to analyze risks, balance trade-offs,
    plan the implementation project and allocate tasks (Tekinerdogan 2014). Concrete
    architectures can be viewed as specific implementations of “reference architectures”,
    which are generic designs. In turn, a reference architecture is derived from the
    knowledge and experiences accumulated in designing concrete architectures in the
    past (Cloutier et al. 2010; Angelov et al. 2012). The concrete architectures differ
    from one case to the next depending on the requirements of the stakeholders involved.
    Reference architectures can be used descriptively to “capture the essence of existing
    architectures” or prescriptively to guide the development of new ones (Cloutier
    et al. 2010). Related work Several studies discuss the adoption of internet technologies
    to support FMIS (Kruize et al. 2016; Fountas et al. 2015; Kaloxylos et al. 2012;
    Steinberger et al. 2009; Nikkilä et al. 2010; Sørensen et al. 2010; Wolfert et
    al. 2010; Seelan et al. 2003; Murakami et al. 2007). These studies have focused
    on different issues including the adoption of service-oriented architectures for
    FMIS (Murakami et al. 2007; Steinberger et al. 2009; Wolfert et al. 2010), the
    development of data exchange standards for supporting interoperability over the
    internet (Schmitz et al. 2009), and the adoption and implementation of geographic
    information systems (GIS) (Seelan et al. 2003). The main focus of these studies
    is integration and operation of an FMIS over the internet. The integration and
    adoption of IoT in the FMIS is not explicitly considered. In (Murakami et al.
    2007), a distributed service-oriented reference architecture is proposed for the
    development of information systems for precision agriculture. This web-based approach
    is focused on communication between software on a service bus. In (Schmitz et
    al. 2009), the so-called AgroXML is proposed as a standardized language based
    on extensible markup language (XML) to be used for data exchange in FMIS. In Nikkilä
    et al. (2010), a web-based approach is defined to implement connectivity requirements
    arising from the internet and the management of GIS data. In (Sørensen et al.
    2010), a new model for FMIS is proposed to provide better information handling
    focusing on internal data connection, external information collection, plan generation,
    and report generation in FMIS. In Kaloxylos et al.(2012), an architecture is proposed
    to provide support and integration of different stakeholders and services, and
    interworking with the external services. There are some studies in the literature
    related to web-based architectures (Steinberger et al. 2009; Chaudhary et al.
    2004). These studies present architectures to enhance the effectiveness of web-based
    decision support system on which data can be requested for further use via a web
    portal and a web service interface. Instead of full FMIS most architecture academic
    research on FMIS is restricted to individual component of an FMIS such as predicting
    crop yield, implementing a special sensor, and the usability of an FMIS. There
    are only few studies that explicitly discuss FMIS architectures in a comprehensive
    manner (Nikkilä et al. 2010). For example, in (Linseisen 2001), FMIS architecture
    is discussed by focusing on an information system gathering and storing high accuracy
    GPS data. In Beck (2001), an architecture, based on implementing object databases
    such as common object request broker architecture (CORBA) middleware and Java
    languages is proposed to provide easier development, maintenance, and easier integration
    of information systems. Advances in the functionality of academic and commercial
    FMIS are presented in (Fountas et al. 2015). This study investigates commercial
    and academic FMIS packages and performs a cluster analysis on them. The authors
    indicate that commercial packages tend to target daily farm office tasks such
    as budgeting, finance, recordkeeping, machinery management, and documentation.
    On the other hand, academic FMISs deal with compliance to standards, automated
    data capture, and interoperability issues. There are also studies that discuss
    traditional on-site FMIS software. However, these studies mainly focus on the
    improvement of information integration of traditional FMIS and do not take IoT
    technologies into account. For example, Verdouw et al. (2016), propose an architecture
    to improve the standardization and integration of data, application, and process.
    A service-oriented architecture (SOA) based solution is proposed to improve the
    information integration implementing business process management (BMP). Related
    to IoT is the research on wireless sensor networks which is reviewed in Jawad
    et al. (2017) and Aqeel-Ur-Rehman et al. (2014). These studies primarily focused
    on comparing sensors and communication technologies such as ZigBee, Bluetooth,
    Wifi, Sigfox, Wibree, long range radio and GPRS. Although these protocols might
    increase the number of possibilities to communicate data in IoT, these studies
    do not directly offer design solutions for FMIS. This paper has focused on applying
    IoT for FMIS in particular. However, IoT has also been applied in different application
    domains. The application of IoT in agriculture has been reviewed in Verdouw et
    al. (2016). This review showed that the IoT concept captured the attention of
    the scientific community in 2010 and since then number of studies has continuously
    increased. In total 168 papers and books were reviewed in the paper. The identified
    top topics of these studies include food supply chains, arable farming, general
    agriculture, greenhouse horticulture, and livestock farming, and open-air horticulture
    including orchards. On the other hand, it is stated that IoT applications mostly
    focus on basic functionalities, including tracking, tracing, monitoring, and event
    management. It is concluded that although IoT is receiving an increasing level
    of attention, it is still in its infancy in the agriculture and food domain which
    is suffering from lack seamless integration and advanced solutions. Case studies
    and problem statement In this section, the problem statement is presented that
    is illustrated using two case studies of smart farming in Turkey. The case studies
    have been selected based on their relevance and their difference with respect
    to the functional and quality requirements. The case studies include the development
    of IoT-based FMIS for wheat production and tomato production in Turkey. In the
    following, first the details of each case study are presented, and subsequently
    the problem statement is described. Case study: wheat production Turkey has 23.9
    million hectares of cultivated farms. Grain production occupies 49% of this area.
    Wheat production constitutes 67% of the total grain production (Turkish Land Crop
    Office 2017). Turkey’s wheat production is about 20 million tons yearly (Turkish
    Ministry of Agriculture 2018). As such, wheat production is one of the most important
    agriculture businesses in Turkey. One of the key regions of wheat production in
    Turkey is the region of Konya which is far from costal area and located on a major
    plain near the middle of Turkey. Konya has a terrestrial climate, and big arable
    farms. Konya is the region in Turkey with the largest wheat production. It produces
    3 million tons of wheat yearly. Case study: tomato production in greenhouses The
    second case study is of tomato production in greenhouses in Antalya. Tomato production
    in the world is 170 million tons yearly and almost 12 million tons of this production
    is produced in Turkey. Turkey exports tomatoes and tomato products to many countries.
    The total export is about 600 000 tons. Tomato is produced both in open fields
    and in greenhouses. About 51% of greenhouse production in Turkey is tomato. Antalya
    is located in the south of Turkey just north of the Mediterranean coast. The typical
    Mediterranean climate of the region is suitable for vegetable and fruit production.
    Currently, specialty greenhouse farming is very common in Antalya. Some 80% of
    glass greenhouses and 50% of plastic greenhouses of Turkey are in Antalya. Problem
    description Generally, wheat and tomato are produced with traditional farming
    practices in Konya and Antalya regions. A general observation from governmental
    reports is that a small part of the farmers in these regions use traditional FMIS
    (Turkish Ministry of Agriculture 2018). Even with the use of FMISs several problems
    in the agricultural sector could still be identified. Inefficient crop production
    To meet the growing population in Turkey it is important to increase the crop
    production, which requires a more effective and efficient crop production. According
    to the Turkish Statistical Institute (TSI), Turkey is one of the top 10 wheat
    producers in the world. But this production is not sufficient for Turkey’s growing
    internal demand. In order to compensate the need, Turkey imports more than 4 million
    tons of wheat each year. From the efficiency point (tons/hectare) of view improvements
    are required and possible. Turkey’s average wheat yield is about 2.6 tons/ha.
    Inefficient usage of soil Turkey has 2.2 million farmers, and 23.9 million hectares
    cultivated farms but 17% of arable farms are fallow (Turkish Ministry of Agriculture
    2018). One of the reasons for this is due to lack of insight and support regarding
    decision making on crop production, soil fertilization, and pesticide management.
    Increase in cost of farming inputs In the last years the cost of fertilizers,
    fuel and pesticides have dramatically increased, but the usage of these inputs
    has not been effectively monitored. This has adversely affected farming and greenhouse
    production profit. As a result of this, the number of farmers in these domains
    have decreased and the overall production has declined. To solve these problems,
    better monitoring and management of inputs is required to decrease the overall
    costs. These problems can, to some extent, be tackled by focusing on improved
    business and logistics processes, by applying total quality and smart farming
    principles, and appropriate sensing and effector technologies. Yet, these solutions
    remain limited compared to the adoption of IoT that provides further optimization
    by enabling the integration of various technologies such as (wireless) sensor
    networks, mobile computing, cloud network, data analytics, and decision support
    systems. To cope with these problems IoT can be considered a feasible solution
    (Dlodlo and Kalezhi 2015; Ma et al. 2011). IoT enables the use of sensors to measure
    the required parameters (e.g. soil quality), support the decision-making process
    using services such as data analytics, and use actuators to execute the proper
    action at the right time and right place. This is for example the case for the
    wheat and tomato production that has been described in the previous sections.
    With the introduction of IoT several benefits are envisioned. Firstly, determining
    the variability in yield potential might allow optimizing production at each site.
    With the help of smart farming practices such as site-specific soil nutrition
    management, quality of the soil can be improved. Also, pest management allows
    mapping pest populations and obtaining site-specific application maps reducing
    pesticide usage and minimizing environmental impact. Managing farming practices
    and obtaining profit maps can help reducing the risk in agriculture. Better irrigation,
    fertilization practices, and pest management strategies save resources. Crop production
    problems can be solved more precisely and in less time with smart farming. Further,
    long term data can be collected and analyzed, leading to better strategic management
    decisions. Saving input materials and resources enables reducing labor requirements
    and cost. Finally, reducing cost and improving quality will increase profits obtained.
    So far with the existing FMIS these goals could not be fully realized or are only
    achieved to a limited extent. Although IoT promises to be very worthwhile, it
    is not easy to develop an IoT-based FMIS. In the literature, various different
    reference architectures have been proposed for both IoT and FMIS. Recently, the
    two concepts are further integrated leading to an IoT based FMIS architecture.
    Unfortunately, deriving a concrete application architecture for the specific farming
    situation is far from trivial. This is because the existing architectures are
    usually represented as reference architectures that are too abstract and do not
    consider further details that are required to derive the application architecture.
    To derive the concrete architecture for a particular context, the different features
    of FMIS and IoT should be selected. This includes for example the different management
    functionality, the security protocols, the device communication protocols, and
    the cloud services. For each of these many different selections can be made and
    the combination of these leads to a broad design space. Obviously, given a description
    for the smart farming system many different architecture alternatives can be identified.
    Since the architecture has a direct systemic impact on the overall IoT based smart
    farming it is important to derive the proper architecture to meet the overall
    smart farming requirements of the stakeholders. For guiding the architect in deriving
    the customized concrete architecture a systematic approach is necessary. FMIS
    development method In Fig. 2, the proposed development approach for deriving an
    IoT-based FMIS application architecture is shown. The approach consists of two
    basic activities including Domain Engineering and FMIS Development. In essence,
    the approach is based on the product line engineering process as described in
    the literature (Tüzün et al. 2015; Capilla et al. 2014; Apel et al. 2013). Fig.
    2 FMIS development approach Full size image The Domain Engineering activity focuses
    on developing and preparing the development artefacts (e.g. design and code) for
    the FMIS. The first step includes the development of an IoT FMIS family feature
    model that defines the common and variant features of the different FMISs. The
    subsequent step focuses on developing the reference architecture for IoT based
    FMIS. The final step in the domain engineering activity aims to develop the reusable
    components that will be necessary to develop the FMIS based on the reference architecture.
    The following sections elaborate on the development of the family feature model
    and then present the corresponding reference architecture. The FMIS development
    activity focuses on a specific IoT-based FMIS. The FMIS will be developed based
    on reuse of the artefacts in the domain engineering activity. The first step in
    the application engineering includes the selection of the features of the application.
    Further, the features will include both features for the IoT and the FMIS. These
    will be usually different for different FMISs in different contexts. Based on
    the selected features the specific FMIS application architecture will be developed
    starting from the reference architecture of the domain engineering activity. The
    final step includes the implementation of the FMIS. In this final step, the components
    developed earlier in the domain engineering activity will be reused. Very often
    a simulation system can be developed for FMIS to validate the system before deciding
    on the large-scale investment. Family feature model The first step of the domain
    engineering activity of the proposed approach in Fig. 2 is the development of
    a family feature diagram for IoT-based FMIS. A feature diagram is a tree that
    is used to model the commonalities and differences within a specific domain or
    system. The feature diagram includes a root node representing the domain or system
    that features the essential characteristics or externally visible properties of
    the system (Tekinerdogan et al. 2012). Features may have sub-features which can
    lead to a hierarchical tree. Features can be mandatory or variant. Variant features
    are usually represented as optional or alternative features. Optional features
    can be selected or not, whereby alternative features require the selection of
    one of the defined features. A feature configuration is a set of features which
    describes a member of a communication protocol. A feature constraint further restricts
    the possible selection of features to define configurations. The domain analysis
    consists of two basic activities including domain scoping and domain modeling.
    In the scoping process, the domain scope is defined and the set of knowledge sources
    are selected. In the domain modeling process the feature diagram is provided.
    During the domain scoping process for the IoT based FMIS, not only scientific
    papers but also websites and white papers of the important vendors and stakeholders
    in the IoT and smart farming domains have been considered. The selected list of
    important sources that were considered for IoT are shown in Appendix 1, the list
    of sources for smart farming are shown in Appendix 2. It is not claimed that the
    set of sources is comprehensive but an analysis of these selected studies shows
    a convergence and agreement on the concepts. In the following section the feature
    diagram for IoT is described first followed by a description of the feature diagram
    for smart farming. Feature model for IoT Based on the primary studies given in
    Appendix 1, the top-level feature diagram of the IoT as given in Fig. 3 is obtained.
    In essence, the top-level figure diagram presents the design features and as such
    includes the mandatory features for the layers of the earlier defined IoT reference
    architecture in Fig. 1. The feature diagram states that all the layers are mandatory
    for setting up an IoT system. Fig. 3 Top level feature diagram of IoT Full size
    image For each of the layers a detailed feature diagram that represents the commonalities
    and variability for the corresponding layer can be derived. Among the IoT layers
    it appears that the decisive layer is the session layer that includes the protocols
    for initiating the connection and the further communication session. Figure 4
    shows the feature diagram that was derived from the domain analysis to the IoT
    session layer communication protocols. Fig. 4 Feature diagram of session level
    communication protocols of IoT Full size image The top-level mandatory features
    in the feature diagram are protocol type, source-target, transport type and architecture.
    The protocol type feature defines the protocols that were identified from the
    selected primary studies. These identified protocols are the following: Message
    Queuing Telemetry Transport (MQTT): One of the most popular protocols to collect
    device data and communicate with servers (OASIS 2011). Extensible Messaging and
    Presence Protocol (XMPP): is based on exchanges of XML messages in real time that
    is defined to connect devices to servers (IETF 2011). Advanced Message Queuing
    Protocol (AMQP): A queuing system designed to connect servers to each other (OASIS
    2011). Data Distribution Service (DDS): A fast data bus for integrating devices
    and systems (OMG 2015). The Constrained Application Protocol (CoAP): A specialized
    web-based protocol to be used in constrained nodes and constrained networks (IETF
    2011). As given in Fig. 4, there are three types of source-target relations available
    in session layer protocols: Device-to-Device (D2D), Device-to-Server (D2S), and
    Server-to-Server (S2S). In some studies, these features are also called Machine-to-Machine
    (M2M), Machine-to-Cloud (M2C), and Cloud-to-Cloud (C2C) respectively. Session
    layer protocols are closely related to the network layer. For all communication
    protocols, the transport layer could be either the user datagram protocol (UDP)
    or transmission control protocol (TCP). Some protocols like DDS, support both
    UDP and TCP. The addressing scheme (unicast, broadcast, or multicast) might be
    important depending on the application requirements. The selection of network
    layer protocol is important since using TCP and/or UDP changes the characteristics
    of the communication from performance and security perspectives. The layer below
    the network layer, that is the device layer includes the IoT devices that have
    a direct connection with the physical devices. The physical devices have different
    functionality and transmission range. If low power devices and networks will be
    used, adoption of TCP in the network layer is generally less feasible, and likewise
    the UDP protocol is used instead. On the other hand, TCP is required for supporting
    security and the common security protocols of (SSL/TLS) are not available using
    UDP. The architecture of the session layer protocols can be either publish-subscribe
    or request-reply. In publish-subscribe architecture, participants (e.g. sensors)
    send data to a topic on which several subscribers (e.g. cloud software) that are
    registered to this topic might read data. In this architecture publishers and
    subscribers do not need to know each other, and do not need to be operating at
    the same time, i.e. this communication type provides time and space uncoupling.
    This type of communication is well suited for data that must flow from one producer
    to many consumers. On the other hand, for the request-reply architecture, senders
    and receivers do need to know each other. The requester sends a request message
    and waits for the response. When the replier (e.g. sensor) receives the request,
    it responds with a reply message. The session layer protocols of IoT generally
    use publish-subscribe architecture except in the case of CoAP in which a request-reply
    pattern is adopted. There are many criteria to select the right IoT session layer
    protocol depending on the application requirement. Further information on the
    selection of the proper IoT session layer protocol is provided in (Köksal and
    Tekinerdogan 2017). Feature model for farm management information systems For
    IoT based smart farming the other important domain is of smart farming itself.
    Similar to the IoT domain again a domain analysis process has been applied in
    which relevant primary studies on smart farming were searched and based on these
    selected studies a feature diagram was derived representing the common and variant
    features. The selected primary studies are listed in Appendix 2. Based on the
    literature the following sub-domains for smart farming could be identified: (1)
    Global Positioning Systems (GPS), (2) Geographical Information Systems (GIS),
    (3) Sensors, (4) Variable Rate Technology (VRT), (5) Yield Monitoring (YM), (6)
    Yield Mapping (YMAP), and (7) Farm Management Information Systems (FMIS). FMIS
    software is a core part of the smart farming. FMISs are used to collect and process
    data used to manage all farming operations. The top-level feature diagram for
    FMIS is given in Fig. 5. The right part of the feature diagram has been derived
    from the FMIS functions as defined in (Fountas et al. 2015). The left part focuses
    on the IoT related functionality of FMIS including collection of data, processing
    data, visualization of data, communication with external systems, and system management.
    This paper will further focus on the IoT FMIS aspects. Fig. 5 Top level feature
    diagram of FMIS Full size image The data acquisition feature defines the gathering
    of data from sensors and other systems used in smart farming such as tractors,
    agribots and unmanned vehicles. It includes functions for processing the gathered
    data whereby useful information is extracted using data mining, machine learning,
    and image processing. The data visualization feature defines the displaying of
    processed data in different forms. Apart from classical tables, reports, and monitoring
    tools, dedicated visualization maps are essential for smart farming applications.
    Maps such as yield maps, soil maps, lighting maps, and profit maps are displayed
    for different purposes. The system management feature defines the management of
    data acquisition, processing, visualization, and external system communication
    features of FMIS. The quality related functions such as reliability, scalability,
    extensibility, and security are considered in this feature. Finally, the “communication
    with external systems” feature defines the communication with external systems,
    such as a weather forecast system. Each of these features are shown in a different
    color in Fig. 5 to refer to these in later sections. Feature model for IoT based
    FMIS In principle, IoT and FMIS are independent concepts and as such these have
    been modeled separately in the previous sub-sections. In principle the features
    from the IoT feature diagram and the features from the FMIS feature diagram could
    have been selected. Alternatively, the notion of an IoT based FMIS can be considered
    as the integration of both concepts that needs to be separately considered. To
    this end, Fig. 6 shows the integrated family feature diagram derived from the
    feature models for IoT and FMIS. The focus was on FMIS as the dominant decomposition
    and the IoT features were integrated in the separate leaves of the FMIS feature
    tree. In the figure for different type of features different fill patterns have
    been used. The detailed feature diagram given in Fig. 6 can in principle be further
    extended with respect to specific project requirements. For the context of this
    paper though, the provided feature models are sufficient to illustrate the approach.
    Fig. 6 Family feature diagram of FMIS software Full size image In IoT based FMIS,
    data acquisition consists of IoT data acquisition and conventional data acquisition
    to support legacy systems. IoT data acquisition contains 5 alternative IoT session
    layer protocols as discussed earlier namely MQTT, XMPP, AMQP, DDS, and CoAP. Depending
    on the application one or more protocols for IoT communication can be selected
    for the FMIS. In the earlier section the criteria for this have been described.
    A traditional data acquisition feature consists of ISOBUS and controller area
    network (CAN) protocols. As stated before, other (legacy or non-IoT) protocols
    can be added to the feature diagram. Data processing features mainly depend on
    the application type and include Image/Video processing, data mining, data logging,
    and decision-support features. One or more features might be used at the same
    time. Depending on the application requirements these features can be extended
    to use different processing features. Data visualization consists of monitoring
    and mapping functions. Monitoring consists of environment monitoring and yield
    monitoring functions. Mapping includes yield, soil-type, and light mapping features.
    System management includes sensor control, actuator control, system control features
    such as device identification, node discovery, and directory and naming services.
    Sensor control consists of several sub-features such as soil sensing, light sensing,
    weather sensing, and water sensing. Also, system control includes vehicle control
    and UAV/Drone control features. Finally, external services feature contains externally
    communicated systems such as weather forecast, finance services, and other external
    systems. Reference architecture for FMIS Once the family feature models for IoT
    based FMISs have been developed, the next step is the development of the reference
    architecture for the potential systems. In fact, in the literature several reference
    architectures have already been proposed for FMISs (Nikkilä et al. 2010; Sørensen
    et al. 2010, 2011; Beck 2001; Fountas et al. 2006) However, in general these reference
    architectures are either at a conceptual level and/or do not consider IoT aspects
    explicitly. Hence, in this section, the reference architecture for IoT based FMIS
    will be introduced. For this, selected viewpoints of the Views and Beyond architecture
    framework (Clements et al. 2010) will be used including the decomposition viewpoint,
    layered viewpoint and deployment viewpoint. Decomposition view The decomposition
    view is used to show how system responsibilities are partitioned across modules
    and how these modules are decomposed into sub-modules. Usually, the features in
    the feature diagram are realized by one or more modules in the decomposition view.
    The decomposition view of the architecture depicts the overall structure of the
    architecture which is reasonably decomposed into modular implementation units.
    It is regarded as a fundamental view of the architecture since it serves as an
    input for other views (e.g. work allocation view) and helps to communicate and
    define the structure of the software. The proposed reference decomposition view
    for the IoT based FMIS is given in Fig. 7. The modules in the decomposition view
    are colored to make the link with the earlier defined features in the feature
    diagrams of FMIS. In essence, the decomposition view includes the modules for
    data acquisition, data processing, data visualization, system management, and
    modules for communication with external services. The decomposition view includes
    all the possible modules for the various IoT based FMIS applications. Note that
    in this case for each feature in the earlier feature diagram, one module has been
    defined in the decomposition view. Further the lower level functionalities such
    as node discovery, and directory and name services, have not been depicted. The
    following section explains the configuration of a specific decomposition view
    from this reference decomposition view. Fig. 7 IoT based FMIS—decomposition view
    Full size image Layered view The layered view is similar to decomposition view
    since it reflects the division of software into units. The difference is that
    in a layered view, modules are structured into layers, which interact based on
    a strict ordering relation. This means that if layer A is allowed to use layer
    B, layer A’s implementation can use any public facilities of Layer B. However,
    layer B cannot use any facilities of layer A. Figure 8 shows the layered view
    for the IoT-based FMIS. Here the dominant decomposition is taken from the IoT
    layered view as it was given in Fig. 1, and likewise it includes the same layers
    of the IoT reference architecture. The specific details are primarily in the higher-level
    layers including the business layer, the application layer and the data acquisition
    layer. The FMIS business layer includes all required farm management operations
    logic and workflows such as Fertility Management, Nutrient Management, Pest Management,
    Weed Management, and Irrigation Management. The FMIS application layer includes
    FMIS Data Processing, Data Visualization, System Management, and Communication
    with External Systems. The FMIS Data Acquisition Layer is for data adaptation
    between the IoT session layer and FMIS, i.e. this layer provides the connection
    with the session layer protocols of the IoT. As such, this layer includes the
    IoT session layer interfaces such as MQTT interface, and XMPP interface. To support
    non-IoT systems, the module conventional interface also takes place in this layer.
    Fig. 8 IoT based FMIS—layered view Full size image Deployment view The earlier
    defined views (decomposition, layered) focus on modeling the software modules
    of the IoT-based FMIS. The deployment view elaborates on these views and is used
    to show the allocation of the identified software modules to the hardware of a
    computing platform. The deployment view of an IoT based FMIS is given in Fig.
    9. The data processing module is deployed on the Central Cloud Server and Client
    (Farmer) nodes. The other nodes are dedicated to sensors, actuators, and cameras.
    The main sensors in the UAV/Drone and Satellite are cameras. Vehicles can have
    their own sensors, actuators, and cameras. Hence, these items can be assigned
    to different nodes. Fig. 9 IoT based FMIS—deployment view Full size image Case
    study evaluation Case study protocol The primary objective of the case studies
    is to evaluate the impact of the developed architecture design method for IoT
    based FMIS. To evaluate the above research questions, the case study research
    protocol as defined by Runeson and Höst (2008) has been applied. Based on this
    the indicated five steps have been followed: (1) case study design (2) preparation
    for data collection (3) execution with data collection on the studied case (4)
    analysis of collected data (5) reporting. Table 1 shows the case study design
    elements. The case study research has been applied both for a retrospective case
    and prospective case. The retrospective case included a system which was developed
    before and for which there was already an existing architecture with required
    design documents. The prospective case includes the system that is planned to
    be developed. Table 1 Case study design Full size table The goal for the retrospective
    study was to compare the earlier result with the result that is produced by proposed
    method. In this way it was aimed to evaluate the effectiveness of the method.
    For the prospective case study, the aim was to evaluate both the effectiveness
    and the practicality of the approach. The research questions were defined accordingly
    as it is shown in the table. For the adopted background and sources in the case
    study research, official design documents have been used and interviews were held
    with project managers and system architects. For the retrospective case study,
    the requirements and design documents were available, whereas for the prospective
    case study only the requirements document was available. For both case studies
    project managers and system architects were interviewed. The project manager had
    more than 20 years of experience in farm management system. The two system architects
    had more than 15 years of experience in designing farm management systems. For
    both case studies a qualitative data analysis approach has been used. For the
    retrospective case study, indirect data analysis has been used by analyzing the
    requirements documents, applying the method and comparing the results of the method
    with the existing architecture. For the prospective case study, a direct and indirect
    data analysis approaches were used. For the direct data analysis, semi-structured
    interviews were conducted, in which a list of predefined set of questions were
    asked to the project manager and software architects. The predefined questions
    are listed in Table 2. The questions included a 5-point Likert scale (strongly
    disagree to strongly agree) for the possible answers. In addition, explanation
    was asked for each question. Note that although Likert scales are used for the
    evaluation of the approach, it is not aimed to be quantitative but primarily qualitative.
    The interview questions with Likert scales as such were used as supporting instruments
    to the open semi-structured interview that were held with the stakeholders. Table
    2 Questionnaire for the Interview Full size table The interview was organized
    as follows: 1. First a meeting was scheduled with the project manager and system
    architects for the initial interview. The goal of this interview was to capture
    the initial thoughts and experience on IoT adoption. 2. In the second step a short
    presentation was provided about the goal of the developed method. Also, the operation
    of the method as well as the final outcome was shortly explained. 3. In the third
    step the method was applied both for the retrospective case (wheat production)
    and prospective case (tomato production in greenhouses). 4. In the fourth step,
    the researchers analyzed the architecture design that resulted from the application
    of the method to the retrospective case and the prospective case. 5. In the fifth
    step, the researchers held a post interview with the subjects with the purpose
    of identifying the impact of the method and its practicality. 6. In the sixth
    step, the researchers collectively assessed data from the initial interview, report
    delivered by the method, and the post interview. The assessment was carried out
    separately and later was discussed together to derive the lessons learned. The
    following subsection discusses the results of the above process after the first
    two steps. Subsequently the evaluation in step 4, 5 and 6 are described. FMIS
    architecture design As stated before, the application architecture is derived
    from the family feature model and the reference architecture. As described earlier
    the FMIS development method includes the development of the application feature
    model and the application architecture. Retrospective case study: smart wheat
    production Figure 10 shows the feature model for smart wheat production that is
    derived after the analysis of the existing case study. This application feature
    model is obtained by reusing the feature model for FMIS given in Fig. 6 and selecting
    the features that are needed for this case study. As shown in the figure, for
    this case study, MQTT session layer protocol of IoT is chosen. The main reasons
    were because open source implementations of MQTT could be used. MQTT supports
    TCP and device-to-server communication which were considered necessary in the
    given context. Likewise, the MQTT feature of the IoT Data Acquisition will be
    used. Also, in order to support conventional data acquisition with tractors used
    in wheat production ISOBUS and CAN communications will be supported. Almost all
    data processing and data visualization features are required for smart wheat production.
    So almost all of these features remained in the feature diagram of Smart Wheat
    Production. For this retrospective case study, the FMIS will be integrated with
    the external weather forecast system only. Fig. 10 Application feature diagram
    of the FMIS software for Iot based smart wheat production—retrospective case study
    Full size image Decomposition view Based on the selected features as defined in
    Fig. 10, the application architecture can now be derived. As discussed before,
    the architecture of a system is usually described using multiple different architecture
    views. For each of the required architectural views it is necessary to develop
    the application arhiteture view. Figure 11 shows the decomposition view of the
    Smart Wheat Production that is obtained using the reference decomposition view
    given in Fig. 7. As explained above, MQTT, ISOBUS, and CAN data acquisition modules
    will be used to support IoT communications. All the sub-features of the system
    management feature of the family feature model will be used, except the light
    sensing feature. The light sensing feature is used to obtain light maps in the
    greenhouses. Yield monitoring, yield mapping, and soil type mapping modules will
    be used to implement data visualization features. All data processing modules
    namely image/video processing, data mining, decision support, and data logging
    modules will be implemented. Finally, a single external communication interface:
    external weather forcast interface module will be implemented. Fig. 11 IoT based
    FMIS—decomposition view for an IoT based smart wheat production—retrospective
    case study Full size image Layered view Figure 12 shows the layered view of smart
    wheat production. Similar to the other views, this view is also customized from
    the reference layered view diagram which is given in Fig. 8. Here the modules
    of the decomposition view are distributed over the layers in the layered view.
    The modules MQTT interface and conventional interface are allocated to the FMIS-data
    acquisition layer. The FMIS-application layer includes the modules data processing,
    data visualization, system management and communication with external system.
    The FMIS-business layer include fertility management, nutrient management, pest
    management, weed management, and irrigation management. It was assumed that the
    other layers and the modules in these layers are similar as defined in the reference
    architecture. Fig. 12 IoT based FMIS—application layered view for an IoT based
    smart wheat production—retrospective case study Full size image Deployment view
    The deployment view of the smart wheat production case study is given in Fig.
    13. The required software modules given in the decomposition view are deployed
    to a central cloud server and client (farmer). Since there is no satellite to
    be used it is omitted for this case. A subset of the features from the ground
    sensors actuators, and cameras, on-the-go sensors, actuators will be used. These
    will be deployed on vehicle, tractor or UAV/Drone nodes. Fig. 13 IoT based FMIS—deployment
    view of Iot based smart wheat production—retrospective case study Full size image
    Prospective case study: IoT based smart tomato production in greenhouses Similar
    to the retrospective case study the steps of the approach have been applied to
    derive the FMIS architecture. Due to space limitations the description of the
    steps will not be repeated and the specific diagrams will not be shown. It should
    be noted that unlike the retrospective case study, for the prospective case study
    there was no ready defined architecture. This did not have an impact on the application
    of the method but for the evaluation the comparison with existing architecture
    could naturally not be done. Result of the evaluation for the retrospective case
    study The previous subsection has shown the application of the approach. As defined
    in the case study protocol the effectiveness and practicality of the approach
    has been analyzed. The results of the interview showed that for all the asked
    questions a score of 4 or 5 were provided. Based on these results the effectiveness
    and practicality of the approach will be elaborated on. Effectiveness of the approach
    For assessing the effectiveness of the approach, the resulting application architecture
    was analyzed and post-interviews were carried out. For the retrospective study
    the application architecture was described in different document formats including
    MS PowerPoint and MS Visio. Further some detailed design documents could be accessed.
    The available architecture was not based on a well-defined viewpoint approach
    and no systematic approach was used. Nevertheless, it was possible to analyze
    the existing application architecture and compare it with the application architecture
    that was derived using the presented approach. For the comparison three relations
    were identified including (1) convergence (2) deviation (3) absence. The convergence
    relation implies that similar architecture elements could be identified in both
    the architecture designs. Deviation implies that the resulting application architecture
    had additional elements that were not defined in the existing architecture. Finally,
    absence defines that the resulting application architecture had missing elements
    that were defined in the existing architecture. Overall the result of the analysis
    showed that the resulting application architecture was quite similar to the existing
    architecture. In general, the convergence was very high. Several deviation and
    absence relations could be identified though. With respect to deviation in the
    resulting application architecture the modules UAV/Drone Control and External
    Weather Forecast Interface were not defined in the existing architecture. On the
    other hand, also some absence relations could be identified. For example, the
    resulting application architecture did not have the module Finance Interface Module,
    Farmer Data Module, and Simulation Module that were explicitly defined in the
    existing application architecture. This became also apparent in the post-interviews.
    In the interview, the questions 2, 3, 4 and 5 relate directly to the effectiveness
    of the approach. The architects provided a score of at least 4 for all these questions
    indicating that the approach is largely effective for the corresponding case.
    Practicality of the approach The practicality of the method was assessed though
    questions 6 to 9 of the questionnaire. The architects gave at least a score of
    4 for all these questions indicating that they were quite satisfied with the practicality
    of the method. Further it was stated that the architecture design could now be
    more quickly designed. Another interesting issue that was explicitly mentioned
    was the fact that the method helped to support communication about the design
    decisions early on. For the question “Will you use the method again?” the answers
    were positive again and both architects indicated that they would use this method
    for the subsequent project. The architects also had some suggestions for improvement
    including the need for allowing specific delta modules when deriving the application
    architecture. Result of the evaluation for the prospective case study Similar
    to the results of the retrospective study, the answers to the provided questions
    were positive and received a score of 4 or higher. In the following the effectiveness
    and practicality of the proposed approach is discussed for the prospective case
    study. Effectiveness of the approach For the retrospective case study, the resulting
    architecture was compared with the existing architecture to assess the effectiveness
    of the approach. For this prospective case study, the results could not be compared
    with an existing application architecture since only requirements document was
    provided and the application architecture had still to be designed. The requirements
    document was used to identify the required application feature diagram. Based
    on this the application architecture was derived. The effectiveness of the application
    architecture and the overall approach was based on the results of the interview.
    The scores for the questions 2 to 5 related to effectiveness were at least 4.
    This indicated that the approach was effective for the given case. The architects
    noted that the application could be easily derived based on the defined requirements.
    Practicality of the approach For assessing the practicality of the approach, the
    results of questions 6 to 10 were considered. Again, it appeared that these had
    all a score with at least 4. Similar to the retrospective case study the approach
    was found practical and easy to use. Similar statements as in the retrospective
    case study were made. The explicitly mentioned identified benefits included the
    reduction of effort to design the architecture, discuss the design decisions,
    and the surprisingly shorter learning curve than expected. Discussion The introduction
    of the IoT has led to the notion of IoT-based FMIS to support the smart farming
    goals. This paper aimed to integrate the IoT systems with the FMIS to align both
    systems and create additional value that cannot be achieved if these are considered
    separately. This integration effort leads to the enhancement of the current FMIS
    with new modules that support the smart farming operations based on IoT. In the
    presented approach these required new modules have been explicitly defined in
    addition to the traditional FMIS modules. The overall approach as such provides
    an integrated view of the overall system to better support the architecture of
    IoT-based FMIS. The method that was discussed can be adopted for deriving an IoT
    based FMIS architecture for multiple different systems. Hence, the focus is on
    the whole product family of IoT based FMISs rather than on a single system. The
    notion of product families or product line engineering and the corresponding systematic
    reuse is discussed in detail in the product line engineering community (Clements
    2006). The presented method is inspired and customizes the product line engineering
    approach in which reference models are developed and applications are developed
    by reusing these reference models. The reference feature diagram that was shown
    aims to target and integrate the domains of IoT and FMIS. The focus in this paper
    was primarily to illustrate the overall method. The feature diagrams as well as
    the reference architecture design could be easily extended. The architectures
    for IoT and FMIS were discussed separately and the integration of both for supporting
    IoT based FMISs was illustrated. The architecture can be extended in two ways.
    First of all, the different views could be further refined to provide an even
    more comprehensive result. This would require for example to further detail the
    modules that are needed in the decomposition view. Secondly, the architecture
    representations could be extended with other architecture views. Three architecture
    views were chosen including decomposition view, layered view and deployment view.
    If needed other architecture views in the architecture documentation process could
    be used as well. The complete versions of the feature diagrams as well the detailed
    implemented architecture designs have not been shown due to confidentiality issues.
    The reference architecture is designed in such a way that it is generic enough
    to derive different concrete architectures. Nevertheless, as is the case for all
    reference models, the reference architecture does not provide all the details.
    Likewise, a system which requires very dedicated features that were not anticipated
    would not be covered by the reference architecture. Furthermore, the focus has
    been on illustrating the reference architecture and the approach for deriving
    a concrete architecture. This appeared to be useful and practical. However, it
    is not claimed that the reference architecture is complete, and likewise further
    research can be used to refine and enhance the reference architecture. For example,
    the device layer and the related functionality have not been discussed in detail
    in this article. This could though be easily added without loss of generality
    and applicability of the proposed approach. Although, the approach has been shown
    for two important case studies in the smart agri-food sector, the method can be
    also applied for the development of other FMISs. The paper did not focus on the
    implementation of these systems. The reason for this is because of confidentiality
    and the goal to prescribe the system-to-be in the prospective case study. For
    the prospective case study, it is decided to develop first a simulation system
    to evaluate the outcome of the method. This is considered as part of future work.
    This paper provided both the reference architecture for IoT-based FMIS and the
    overall approach to derive a concrete architecture. The idea of systematic guidelines
    for deriving a concrete architecture could also be used for enhancing the use
    of existing IoT-based reference architectures. Although the proposed method has
    illustrated the development of IoT based FMISs, the method could even be used
    for developing traditional FMISs. In that case the IoT architecture part would
    be omitted and just the development of reference models for FMIS would be considered.
    This paper describes a domain-driven approach to design IoT-based FMIS and support
    the architect in deriving a concrete IoT-based FMIS architecture. Several other
    important issues need to be considered to realize effective smart farming. Important
    aspects include the acceptability of the provided IoT technology by the relevant
    stakeholders including the end-users, development of cost-effective transition
    strategies, and farm management and agricultural economics. Detailed discussion
    on economics and profitability of IoT solutions in the agriculture domain have
    been addressed by multiple studies including (Griffin and Lowenberg-DeBoer 2005;
    Griffin et al. 2018; Wolfert et al. 2017; Lowenberg-DeBoer et al. 2000; Schimmelpfennig
    2016; Kutter et al. 2011). Adopting IoT-based FMIS is not trivial and usually
    requires large economic investments. To justify these up-front investments the
    return-on-investment both with respect to cost and quality should be defined.
    Further, IoT-based FMIS potentially requires changes to farm equipment or totally
    new farm equipment. Hence, it is important to analyze the acceptability and adoption
    scenarios, and provide clear transition strategies for the efficient introduction,
    usage and maintenance of smart farming. Due to space limitations and the concrete
    scope of the paper this is not further discussed. A systematic case study research
    has been applied to validate the proposed approach. Each empirical study usually
    has to deal with a few potential threats to validity. In the following these are
    discussed for the presented case study research, and the mitigation strategy for
    each threat is described. Construct validity refers to what extent the operational
    measures that are studied really represent what the researchers have in mind and
    what is investigated according to the research questions (Yin 2009). Table 3 shows
    various identified threats to construction validity together with the counter
    measures. Table 3 Threats to construct validity and applied counter measures in
    case studies Full size table Internal Validity relates to a causal relationship
    between treatment and the outcome. The retrospective case study relied on existing
    design documentation and related literature. There could be missing information
    in both cases that would affect the outcome. To mitigate this threat several iterations
    were done to derive both the application feature model and the application architecture.
    In the prospective case, the lack of proper requirements documentation could have
    an impact on the derived decisions. To mitigate this threat, this has been discussed
    with the interviewed persons in detail and several iterations were adopted. External
    Validity concerns the ability to generalize the results of the study. In the evaluation,
    both a retrospective and prospective case study were adopted derived from different
    application domains. This was done to support triangulation and likewise extend
    the external validity. The approach was considered effective for both case studies
    but due to the small number of participants a stronger statement could not be
    provided. In the future work a repetition of this study with multiple other case
    studies with an increased number of participants would further justify the claims
    of this paper and also support the quantitative evaluation. Conclusion Farm management
    information systems are being increasingly applied in many farming systems. Several
    architectures for FMISs have been proposed in the literature but these are usually
    abstract, and it is not trivial to derive the application FMIS architecture for
    the corresponding context of the farm system. This paper has provided an architecture
    design method for deriving application architectures for FMISs. For this, reference
    architectures for IoT and FMIS were adopted, and a novel IoT based FMIS has been
    defined. The architecture design method has been provided for deriving the customized
    application FMIS architecture. To support the design of the application architecture
    a domain driven approach has been adopted whereby a family feature diagram was
    defined representing the common and variant features of IoT based farm management
    information systems. The approach was illustrated using a systematic case study
    approach. Both retrospective and prospective case studies were implemented including
    IoT based wheat production and IoT based tomato FMIS. The case study research
    showed that the approach was both effective and practical. It appeared that both
    the reference architecture that was provided as well as the corresponding method
    appeared to be very useful in deriving the customized application FMIS architecture.
    Since in general developing IoT systems is not trivial adopting a systematic approach
    appears to be useful in not only the final results but also the intermediate steps
    that support the communication between the stakeholders and the overall guidance
    of the design decisions. The contribution of this paper can be useful for both
    researchers who do research on IoT based FMISs as well as practitioners who aim
    to architect different FMISs. The future work will apply the approach for other
    farm management systems. Further focus will be on the architecture design and
    integration of multiple different FMISs. References Adamchuk, V. I., Hummel, J.
    W., Morgan, M. T., & Upadhyaya, S. K. (2004). On-the-go soil sensors for precision
    agriculture. Computers and Electronics in Agriculture. https://doi.org/10.1016/j.compag.2004.03.002.
    Article   Google Scholar   Al-Fuqaha, A., Guizani, M., Mohammadi, M., Aledhari,
    M., & Ayyash, M. (2015). Internet of things: a survey on enabling technologies,
    protocols, and applications. IEEE Communications Surveys and Tutorials, 17(4),
    2347–2376. https://doi.org/10.1109/COMST.2015.2444095. Article   Google Scholar   Angelov,
    S., Grefen, P., & Greefhorst, D. (2012). A framework for analysis and design of
    software reference architectures. Information and Software Technology, 54(4),
    417–431. https://doi.org/10.1016/j.infsof.2011.11.009. Article   Google Scholar   Apel,
    S., Batory, D., Kästner, C., & Saake, G. (2013). Feature-oriented software product
    lines. Feature-Oriented Software Product Lines: Concepts and Implementation. https://doi.org/10.1007/978-3-642-37521-7.
    Article   Google Scholar   Aqeel-Ur-Rehman, A. Z. A., Islam, N., & Shaikh, Z.
    A. (2014). A review of wireless sensors and networks’ applications in agriculture.
    Computer Standards and Interfaces. https://doi.org/10.1016/j.csi.2011.03.004.
    Article   Google Scholar   Bass, L., Clements, P., & Kazman, R. (2012). Software
    architecture in practice (3rd Edn, Vol. 3nd). Architecture. Beck, Howard. (2001).
    Agricultural enterprise information management using object Databases, Java, and
    CORBA. Computers and Electronics in Agriculture, 32(2), 119–147. https://doi.org/10.1016/S0168-1699(01)00162-4.
    Article   Google Scholar   Capilla, R., Bosch, J., Trinidad, P., Ruiz-Cortés,
    A., & Hinchey, M. (2014). An overview of dynamic software product line architectures
    and techniques: Observations from research and industry. Journal of Systems and
    Software, 91(1), 3–23. https://doi.org/10.1016/j.jss.2013.12.038. Article   Google
    Scholar   Chaudhary, S., Sorathia, V., & Laliwala, Z. (2004). Architecture of
    sensor based agricultural information system for effective planning of farm activities.
    In Proceedings—2004 IEEE international conference on services computing, SCC 2004,
    (pp. 93–100). https://doi.org/10.1109/SCC.2004.1357994. Clements, P. (2006). Software
    product lines. Software Product Lines, 3714(3), 1–105. https://doi.org/10.1007/11554844.
    Article   Google Scholar   Clements, P., Bachmann, F., Bass, L., Garlan, D., Ivers,
    J., Little, R., et al. (2010). Documenting software architectures. Style DeKalb
    IL. https://doi.org/10.1109/ICSE.2003.1201264. Article   Google Scholar   Cloutier,
    R., Muller, G., Verma, D., Nilchiani, R., Hole, E., & Bone, M. (2010). The concept
    of reference architectures. Systems Engineering, 13(1), 14–27. https://doi.org/10.1002/sys.20129.
    Article   Google Scholar   Demirli, E., & Tekinerdogan, B. (2011). Software language
    engineering of architectural viewpoints. In Lecture notes in computer science
    (including subseries lecture notes in artificial intelligence and lecture notes
    in bioinformatics), (Vol. 6903 LNCS, pp. 336–343). https://doi.org/10.1007/978-3-642-23798-0_36.
    Dlodlo, N., & Kalezhi, J. (2015). The internet of things in agriculture for sustainable
    rural development. In 2015 international conference on emerging trends in networks
    and computer communications (ETNCC), (pp. 13–18). IEEE. https://doi.org/10.1109/ETNCC.2015.7184801.
    Fountas, S., Carli, G., Sørensen, C. G., Tsiropoulos, Z., Cavalaris, C., Vatsanidou,
    A., et al. (2015). Farm management information systems: Current situation and
    future perspectives. Computers and Electronics in Agriculture, 115, 40–50. https://doi.org/10.1016/j.compag.2015.05.011.
    Article   Google Scholar   Fountas, S., Wulfsohn, D., Blackmore, B. S., Jacobsen,
    H. L., & Pedersen, S. M. (2006). A model of decision-making and information flows
    for information-intensive agriculture. Agricultural Systems, 87(2), 192–210. https://doi.org/10.1016/j.agsy.2004.12.003.
    Article   Google Scholar   Gazis, V., Gortz, M., Huber, M., Leonardi, A., Mathioudakis,
    K., Wiesmaier, A., Zeiger, F., & Vasilomanolakis, E. (2015). A survey of technologies
    for the internet of things. In IWCMC 2015—11th international wireless communications
    and mobile computing conference (pp. 1090–1095). https://doi.org/10.1109/IWCMC.2015.7289234.
    Griffin, T. W., & Lowenberg-DeBoer, J. (2005). Worldwide adoption and profitability
    of precision agriculture implications for Brazil. Revista de Política Agrícola,
    14(4), 20–37. Google Scholar   Griffin, T. W., Shockley, J. M., Mark, T. B., Shannon,
    D. K., Clay, D. E., & Kitchen, N. R. (2018). Economics of precision farming. Precision
    Agriculture Basics. https://doi.org/10.2134/precisionagbasics.2016.0098. Article   Google
    Scholar   IETF. (2011). “XMPP main”. 2011. https://xmpp.org/. 2013. “CoAP.” http://coap.technology/.
    ITU. (2005). The internet of things. ITU Internet Report, 2005, 212. https://doi.org/10.2139/ssrn.2324902.
    Article   Google Scholar   Jawad, H., Nordin, R., Gharghan, S., Jawad, A., & Ismail,
    M. (2017). Energy-efficient wireless sensor networks for precision agriculture:
    A review. Sensors, 17(8), 1781. https://doi.org/10.3390/s17081781. Article   Google
    Scholar   Kaloxylos, A., Eigenmann, R., Teye, F., Politopoulou, Z., Wolfert, S.,
    Shrank, C., et al. (2012). Farm management systems and the future internet era.
    Computers and Electronics in Agriculture, 89, 130–144. https://doi.org/10.1016/j.compag.2012.09.002.
    Article   Google Scholar   Khan, R., Khan, S.U., Zaheer, R., & Khan, S. (2012).
    Future internet: The internet of things architecture, possible applications and
    key challenges. In 2012 10th international conference on frontiers of information
    technology (pp. 257–260). IEEE. https://doi.org/10.1109/FIT.2012.53. Kitchenham,
    B. A., & Pfleeger, S. L. (2002). Principles of survey research part 3: Constructing
    a survey instrument. ACM SIGSOFT Software Engineering Notes, 27(2), 20. https://doi.org/10.1145/511152.511155.
    Article   Google Scholar   Köksal, Ö., & Tekinerdogan, B. (2017). Feature-driven
    domain analysis of session layer protocols of internet of things. In Proceedings—2017
    IEEE 2nd international congress on internet of things, ICIOT 2017 (pp. 105–112).
    https://doi.org/10.1109/IEEE.ICIOT.2017.19. Kruize, J. W., Wolfert, J., Scholten,
    H., Verdouw, C. N., Kassahun, A., & Beulens, A. J. M. (2016). A reference architecture
    for farm software ecosystems. Computers and Electronics in Agriculture, 125, 12–28.
    https://doi.org/10.1016/J.COMPAG.2016.04.011. Article   Google Scholar   Kutter,
    T., Tiemann, S., Siebert, R., & Fountas, S. (2011). The role of communication
    and co-operation in the adoption of precision farming. Precision Agriculture,
    12(1), 2–17. https://doi.org/10.1007/s11119-009-9150-0. Article   Google Scholar   Linseisen,
    H. (2001). Development of a precision farming information system. In Proceedings
    of the third European conference on precision agriculture (pp. 689–694). http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.460.5744.
    Lowenberg-DeBoer, J., Erickson, K., & Vogel, K. A. (2000). Precision farming profitability.
    West Lafayette: Agricultural Research Programs, Purdue University. Google Scholar   Ma,
    J., Zhou, X., Li, S., & Li, Z. (2011). Connecting agriculture to the internet
    of things through sensor networks. In 2011 international conference on internet
    of things and 4th international conference on cyber, physical and social computing
    (pp. 184–187). IEEE. https://doi.org/10.1109/iThings/CPSCom.2011.32. McEwen, A.,
    & Cassimally, H. (2014). Designing the internet of things. Wiley. https://www.wiley.com/en-tr/Designing+the+Internet+of+Things-p-9781118430620.
    Murakami, E., Saraiva, A. M., Ribeiro, L. C. M., Cugnasca, C. E., Hirakawa, A.
    R., & Correa, P. L. P. (2007). An infrastructure for the development of distributed
    service-oriented information systems for precision agriculture. Computers and
    Electronics in Agriculture, 58(1), 37–48. https://doi.org/10.1016/j.compag.2006.12.010.
    Article   Google Scholar   Nikkilä, R., Seilonen, I., & Koskinen, K. (2010). Software
    architecture for farm management information systems in precision agriculture.
    Computers and Electronics in Agriculture, 70(2), 328–336. https://doi.org/10.1016/j.compag.2009.08.013.
    Article   Google Scholar   OASIS. (2011). “AMQP.” 2011. http://www.amqp.org/specification/1.0/amqp-org-download.
    2014. “MQTT.” 2014. http://mqtt.org/2014/11/mqtt-v3-1-1-now-an-oasis-standard.
    OMG. (2015). DDS Specification V 1.4 (p. 180). http://www.omg.org/spec/DDS/1.4/.
    Palattella, M. R., Accettura, N., Vilajosana, X., Watteyne, T., Grieco, L. A.,
    Boggia, G., et al. (2013). Standardized protocol stack for the internet of (important)
    things. IEEE Communications Surveys and Tutorials, 15(3), 1389–1406. https://doi.org/10.1109/SURV.2012.111412.00158.
    Article   Google Scholar   Pandya, H.B., & Champaneria, T.A. (2015). Internet
    of things: Survey and case studies. 2015 international conference on electrical,
    electronics, signals, communication and optimization (EESCO) (pp. 1–6). https://doi.org/10.1109/EESCO.2015.7253713.
    Rains, G. C., & Thomas, D. L. (2009). Precision farming: An introduction. Griffin:
    University of Georgia. Google Scholar   Runeson, P., & Höst, M. (2008). Guidelines
    for conducting and reporting case study research in software engineering. Empirical
    Software Engineering. https://doi.org/10.1007/s10664-008-9102-8. Article   Google
    Scholar   Schimmelpfennig, D. (2016). Farm profits and adoption of precision agriculture.
    https://www.ers.usda.gov/webdocs/publications/80326/err-217.pdf?v=42661. Schmitz,
    M., Martini, D., Kunisch, M., & Mösinger, H. J. (2009). AgroXML enabling standardized,
    platform-independent internet data exchange in farm management information systems.
    In Metadata and semantics (pp. 463–468). https://doi.org/10.1007/978-0-387-77745-0_45.
    Seelan, S. K., Laguette, S., Casady, G. M., & Seielstad, G. A. (2003). Remote
    sensing applications for precision agriculture: A learning community approach.
    Remote Sensing of Environment. https://doi.org/10.1016/j.rse.2003.04.007. Article   Google
    Scholar   Sheng, Z., Yang, S., Yifan, Y., Vasilakos, A., McCann, J., & Leung,
    K. (2013). A survey on the IETF protocol suite for the internet of things: standards,
    challenges, and opportunities. IEEE Wireless Communications, 20(6), 91–98. https://doi.org/10.1109/MWC.2013.6704479.
    Article   Google Scholar   Sørensen, C. G., Fountas, S., Nash, E., Pesonen, L.,
    Bochtis, D., Pedersen, S. M., et al. (2010). Conceptual model of a future farm
    management information system. Computers and Electronics in Agriculture, 72(1),
    37–47. https://doi.org/10.1016/j.compag.2010.02.003. Article   Google Scholar   Sørensen,
    C. G., Pesonen, L., Bochtis, D. D., Vougioukas, S. G., & Suomi, P. (2011). Functional
    requirements for a future farm management information system. Computers and Electronics
    in Agriculture, 76(2), 266–276. https://doi.org/10.1016/j.compag.2011.02.005.
    Article   Google Scholar   Steinberger, G., Rothmund, M., & Auernhammer, H. (2009).
    Mobile farm equipment as a data source in an agricultural service architecture.
    Computers and Electronics in Agriculture, 65(2), 238–246. https://doi.org/10.1016/j.compag.2008.10.005.
    Article   Google Scholar   Tekinerdogan, B. (2014). Software architecture. In
    T. Gonzalez, J. Diaz-Herrera, & A. Tucker (Eds.), Computing handbook: Computer
    science and software engineering (p. 2280). London: Chapman and Hall/CRC. Google
    Scholar   Tekinerdogan, B., Sozer, H., & Aksit, M. (2012). Feature-based rationale
    management system for supporting software architecture adaptation. International
    Journal of Software Engineering and Knowledge Engineering, 22(7), 945–964. https://doi.org/10.1142/S021819401250026X.
    Article   Google Scholar   Turkish Land Crop Office. (2017). Turkish grain report
    2016. http://www.tmo.gov.tr/Upload/Document/hububat/hububatraporu2016.pdf. Turkish
    Ministry of Agriculture. (2018). Herbal production data. http://www.tarim.gov.tr/sgb/Belgeler/SagMenuVeriler/BUGEM.pdf.
    Tüzün, E., Tekinerdogan, B., Kalender, M. E., & Bilgen, S. (2015). Empirical evaluation
    of a decision support model for adopting software product line engineering. Information
    and Software Technology, 60, 77–101. https://doi.org/10.1016/j.infsof.2014.12.007.
    Article   Google Scholar   Venters, C. C., Capilla, R., Betz, S., Penzenstadler,
    B., Crick, T., Crouch, S., et al. (2018). Software sustainability: Research and
    practice from a software architecture viewpoint. Journal of Systems and Software,
    138(April), 174–188. https://doi.org/10.1016/J.JSS.2017.12.026. Article   Google
    Scholar   Verdouw, C., Wolfert, J., & Tekinerdogan, B. (2016). Internet of things
    in agriculture. CAB Reviews: Perspectives in Agriculture, Veterinary Science,
    Nutrition and Natural Resources. https://doi.org/10.1079/PAVSNNR201611035. Article   Google
    Scholar   Wolfert, S., Ge, L., Verdouw, C., & Bogaardt, M.-J. (2017). Big data
    in smart farming—A review. Agricultural Systems, 153(May), 69–80. https://doi.org/10.1016/J.AGSY.2017.01.023.
    Article   Google Scholar   Wolfert, J., Verdouw, C. N., Verloop, C. M., & Beulens,
    A. J. M. (2010). Organizing information integration in agri-food-A method based
    on a service-oriented architecture and living lab approach. Computers and Electronics
    in Agriculture, 70(2), 389–405. https://doi.org/10.1016/j.compag.2009.07.015.
    Article   Google Scholar   Yin, R.K. (2009). Case study research : Design and
    methods/Robert K. Yin. Applied Social Research Methods Series (p. 5). https://doi.org/10.1097/FCH.0b013e31822dda9e.
    Zhang, N., Wang, M., & Wang, N. (2002). Precision agriculture—A worldwide overview.
    Computers and Electronics in Agriculture, 36(2–3), 113–132. https://doi.org/10.1016/S0168-1699(02)00096-0.
    Article   Google Scholar   Download references Author information Authors and
    Affiliations Wageningen University & Research, Hollandseweg 1, 6706 KN, Wageningen,
    The Netherlands Ö. Köksal & B. Tekinerdogan Corresponding author Correspondence
    to Ö. Köksal. Appendices Appendix 1: Selected set of primary studies for IoT Al-Fuqaha,
    A., Guizani, M., Mohammadi, M., Aledhari, M., & Ayyash, M. (2015). Internet of
    Things: A Survey on Enabling Technologies, Protocols, and Applications. IEEE Communications
    Surveys and Tutorials, 17(4), 2347–2376. https://doi.org/10.1109/COMST.2015.2444095.
    Gazis, V., Gortz, M., Huber, M., Leonardi, A., Mathioudakis, K., Wiesmaier, A.,
    … Vasilomanolakis, E. (2015). A survey of technologies for the internet of things.
    In IWCMC 2015 - 11th International Wireless Communications and Mobile Computing
    Conference (pp. 1090–1095). https://doi.org/10.1109/IWCMC.2015.7289234. IETF.
    (2001). Extensible Messaging and Presence Protocol (XMPP). IETF Standard. https://xmpp.org/about/technology-overview.html.
    Last accessed 03 February 2018. IETF. (2014). Constrained Application Protocol
    (CoAP). IETF Standard. http://coap.technology/. Last accessed 03 February 2018.
    Koksal, O., & Tekinerdogan, B. (2017). Feature-driven domain analysis of session
    layer protocols of internet of things. In Proceedings—2017 IEEE 2nd International
    Congress on Internet of Things, ICIOT 2017 (pp. 105–112). https://doi.org/10.1109/IEEE.ICIOT.2017.19.
    OASIS. (2012). Advanced Message Queuing Protocol (AMQP), Version 1.0. OASIS Standard.
    http://docs.oasis-open.org/amqp/core/v1.0/amqp-core-messaging-v1.0.html. Last
    accessed 03 February 2018. OASIS. (2014). Message Queuing Telemetry Transport
    (MQTT), Version 3.1.1. OASIS Standard. http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html.
    Last accessed 03 February 2018. OMG. (2015). “Data Distribution Service for Real
    Time Systems (DDS), v1.4. OMG Standard. http://www.omg.org/spec/DDS/About-DDS/.
    Last accessed 03 February 2018. Palattella, M. R., Accettura, N., Vilajosana,
    X., Watteyne, T., Grieco, L. A., Boggia, G., & Dohler, M. (2013). Standardized
    protocol stack for the internet of (important) things. IEEE Communications Surveys
    and Tutorials, 15(3), 1389–1406. https://doi.org/10.1109/SURV.2012.111412.00158.
    Pandya, H. B., & Champaneria, T. A. (2015). Internet of things: Survey and case
    studies. In 2015 International Conference on Electrical, Electronics, Signals,
    Communication and Optimization (EESCO), 1–6. https://doi.org/10.1109/EESCO.2015.7253713.
    Sheng, Z., Yang, S., Yu, Y., Vasilakos, A., McCann, J., & Leung, K. (2013). A
    survey on the ietf protocol suite for the internet of things: Standards, challenges,
    and opportunities. IEEE Wireless Communications, 20(6), 91–98. https://doi.org/10.1109/MWC.2013.6704479.
    Appendix 2: Selected set of primary studies for smart farming Adamchuk, V. I.,
    Hummel, J. W., Morgan, M. T., & Upadhyaya, S. K. (2004). On-the-go soil sensors
    for precision agriculture. Computers and Electronics in Agriculture. https://doi.org/10.1016/j.compag.2004.03.002.
    Fountas, S., Carli, G., Sørensen, C. G., Tsiropoulos, Z., Cavalaris, C., Vatsanidou,
    A., … Tisserye, B. (2015). Farm management information systems: Current situation
    and future perspectives. Computers and Electronics in Agriculture, 115, 40–50.
    https://doi.org/10.1016/j.compag.2015.05.011. Jawad, H., Nordin, R., Gharghan,
    S., Jawad, A., & Ismail, M. (2017). Energy-Efficient Wireless Sensor Networks
    for Precision Agriculture: A Review. Sensors, 17(8), 1781. https://doi.org/10.3390/s17081781.
    Murakami, E., Saraiva, A. M., Ribeiro, L. C. M., Cugnasca, C. E., Hirakawa, A.
    R., & Correa, P. L. P. (2007). An infrastructure for the development of distributed
    service-oriented information systems for precision agriculture. Computers and
    Electronics in Agriculture, 58(1), 37–48. https://doi.org/10.1016/j.compag.2006.12.010.
    Nikkilä, R., Seilonen, I., & Koskinen, K. (2010). Software architecture for farm
    management information systems in precision agriculture. Computers and Electronics
    in Agriculture, 70(2), 328–336. https://doi.org/10.1016/j.compag.2009.08.013.
    Rains, Glen, Dan Thomas. (2000). Precision Farming: An Introduction. University
    of Georgia, Georgia Extension Bulletin No. 1186. http://hdl.handle.net/10724/12223.
    Last accessed 03 February 2018. Schmitz, M., Martini, D., Kunisch, M., & Mösinger,
    H. J. (2009). AgroXML enabling standardized, platform-independent internet data
    exchange in farm management information systems. In Metadata and Semantics (pp.
    463–468). https://doi.org/10.1007/978-0-387-77745-0_45. Sørensen, C. G., Fountas,
    S., Nash, E., Pesonen, L., Bochtis, D., Pedersen, S. M., … Blackmore, S. B. (2010).
    Conceptual model of a future farm management information system. Computers and
    Electronics in Agriculture, 72(1), 37–47. https://doi.org/10.1016/j.compag.2010.02.003.
    Sørensen, C. G., Pesonen, L., Bochtis, D. D., Vougioukas, S. G., & Suomi, P. (2011).
    Functional requirements for a future farm management information system. Computers
    and Electronics in Agriculture, 76(2), 266–276. https://doi.org/10.1016/j.compag.2011.02.005.
    Steinberger, G., Rothmund, M., & Auernhammer, H. (2009). Mobile farm equipment
    as a data source in an agricultural service architecture. Computers and Electronics
    in Agriculture, 65(2), 238–246. https://doi.org/10.1016/j.compag.2008.10.005.
    Verdouw, C., Wolfert, J., and Tekinerdogan, B. (2016). Internet of Things in Agriculture,
    CAB Reviews: Perspectives in Agriculture, Veterinary Science, Nutrition and Natural
    Resources. 1-12. http://dx.doi.org/10.1079/PAVSNNR201611035. Zhang, N., Wang,
    M., & Wang, N. (2002). Precision agriculture - A worldwide overview. Computers
    and Electronics in Agriculture, 36(2–3), 113–132. https://doi.org/10.1016/S0168-1699(02)00096-0.
    Rights and permissions OpenAccess This article is distributed under the terms
    of the Creative Commons Attribution 4.0 International License (http://creativecommons.org/licenses/by/4.0/),
    which permits unrestricted use, distribution, and reproduction in any medium,
    provided you give appropriate credit to the original author(s) and the source,
    provide a link to the Creative Commons license, and indicate if changes were made.
    Reprints and permissions About this article Cite this article Köksal, Ö., Tekinerdogan,
    B. Architecture design approach for IoT-based farm management information systems.
    Precision Agric 20, 926–958 (2019). https://doi.org/10.1007/s11119-018-09624-8
    Download citation Published 11 December 2018 Issue Date 15 October 2019 DOI https://doi.org/10.1007/s11119-018-09624-8
    Share this article Anyone you share the following link with will be able to read
    this content: Get shareable link Provided by the Springer Nature SharedIt content-sharing
    initiative Keywords Smart farming Farm management information system Internet
    of things Architecture design Use our pre-submission checklist Avoid common mistakes
    on your manuscript. Sections Figures References Abstract Introduction Background
    and related work Case studies and problem statement Case study evaluation Discussion
    Conclusion References Author information Appendices Rights and permissions About
    this article Advertisement Discover content Journals A-Z Books A-Z Publish with
    us Publish your research Open access publishing Products and services Our products
    Librarians Societies Partners and advertisers Our imprints Springer Nature Portfolio
    BMC Palgrave Macmillan Apress Your privacy choices/Manage cookies Your US state
    privacy rights Accessibility statement Terms and conditions Privacy policy Help
    and support 129.93.161.219 Big Ten Academic Alliance (BTAA) (3000133814) - University
    of Nebraska-Lincoln (3000134173) © 2024 Springer Nature"'
  inline_citation: '>'
  journal: Precision Agriculture
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: Architecture design approach for IoT-based farm management information systems
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Krampe F.
  - Deeken H.
  - Steckel T.
  - Aschenbruck N.
  citation_count: '1'
  description: Modern telemetry-based applications enable farmers to work more efficiently
    and to improve the utilization of their farmland. However, connectivity between
    agricultural machines and central farm management information systems is almost
    exclusively realized via mobile networks and, thus, suffers from the challenging
    network conditions, which often characterize agricultural scenarios. Robust networking
    with reliable communication across multiple machines is one of the fundamental
    challenges in highly distributed agricultural processes, such as the harvesting
    of crops. In this paper, we present the design and evaluation of a new hybrid-opportunistic
    network architecture that combines multiple Internet and ad-hoc machine-to-machine
    (M2M) connections simultaneously to provide robust and reliable communication
    in a decentralized network.
  doi: 10.1109/IOT-TUSCANY.2018.8373020
  full_citation: '>'
  full_text: '>

    "IEEE.org IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account
    Personal Sign In Browse My Settings Help Access provided by: University of Nebraska
    - Lincoln Sign Out All Books Conferences Courses Journals & Magazines Standards
    Authors Citations ADVANCED SEARCH Conferences >2018 IoT Vertical and Topical...
    HOAR: A hybrid-opportunistic architecture for robust agricultural networking Publisher:
    IEEE Cite This PDF Florian Krampe; Henning Deeken; Thilo Steckel; Nils Aschenbruck
    All Authors 1 Cites in Paper 188 Full Text Views Abstract Document Sections 1.
    Introduction II. Related Work III. HOAR: A Hybrid-Opportunistic Architecture for
    Robust Agricultural Networking IV. Evaluation V. Conclusion & Future Work Authors
    Figures References Citations Keywords Metrics Footnotes Abstract: Modern telemetry-based
    applications enable farmers to work more efficiently and to improve the utilization
    of their farmland. However, connectivity between agricultural machines and central
    farm management information systems is almost exclusively realized via mobile
    networks and, thus, suffers from the challenging network conditions, which often
    characterize agricultural scenarios. Robust networking with reliable communication
    across multiple machines is one of the fundamental challenges in highly distributed
    agricultural processes, such as the harvesting of crops. In this paper, we present
    the design and evaluation of a new hybrid-opportunistic network architecture that
    combines multiple Internet and ad-hoc machine-to-machine (M2M) connections simultaneously
    to provide robust and reliable communication in a decentralized network. Published
    in: 2018 IoT Vertical and Topical Summit on Agriculture - Tuscany (IOT Tuscany)
    Date of Conference: 08-09 May 2018 Date Added to IEEE Xplore: 07 June 2018 ISBN
    Information: DOI: 10.1109/IOT-TUSCANY.2018.8373020 Publisher: IEEE Conference
    Location: Tuscany, Italy SECTION 1. Introduction The use of precision agriculture
    technologies like GPS-based guidance systems, yield monitoring, and variable-rate
    technology led to increasing efficiency in agriculture [9]. Similarly, Farm Management
    Information Systems (FMISs) provide Enterprise Resource Planning (ERP)-like functionalities
    for farmers, such as planning and documenting agricultural operations, which often
    rely on processing recorded telemetry data [1]. The necessary connectivity to
    send telemetry data between the central FMIS system and the agricultural machines
    is commonly realized via Public Land Mobile Networks (PLMNs) [11]. However, the
    sparse coverage of the farmland by PLMNs often leads to unreliable network conditions
    in agricultural environments [4]. This poses a challenge, as it limits the potential
    of using digital assistance system in on-going agricultural operations. A harvesting
    campaign with several harvesters and their transport fleets, for example, is a
    highly distributed mobile network. To control a harvesting process, telemetry
    data and process information must be synchronized regularly between machines and
    the FMIS. Being limited to PLMNs as communication channel, leads to significant
    delays or may prohibit communication completely. Establishing reliable communication
    links between agricultural machines and a central FMIS is, therefore, a prerequisite
    for the digital coordination of on-going agricultural processes. Since agricultural
    machines often work in close proximity, direct M2M communication can be of aid,
    as it complements infrastructure-based connectivity. The same holds for Delay
    Tolerant Networks (DTNs), which can be used to exploit the mobility of machines,
    ie. regular transports between field and farm, to enable connectivity from and
    to nodes with no PLMN connectivity. In this paper, we propose a hybrid-opportunistic
    network architecture that is designed for robustness under challenging conditions
    in agricultural applications. As a hybrid-opportunistic network, we define a combination
    of infrastructure based networks (e.g., Public Land Mobile Networks (PLMNs) or
    Wireless Local Area Networks (WLANs)) and machine-to-machine (M2M) networks (e.g.,
    Delay Tolerant Networks (DTNs) or opportunistic networks). The data sent through
    the architecture is scheduled by an algorithm based on preassigned priorities
    and the availability of the different communication links. The rest of this paper
    is organized as follows. In Section II, related approaches are presented. In Section
    III, the design and implementation of the developed architecture are introduced.
    The performance of this architecture is evaluated in Section IV. Finally, Section
    V concludes the paper. SECTION II. Related Work There exist different approaches
    that use a combination of infrastructure based and opportunistic networks to enable
    communication under challenging conditions. KioskNet [2] is an architecture that
    provides a communication opportunity in rural areas by using buses and lorries
    as data ferries. In parallel, a PLMN link with a low datarate is used to transfer
    control messages as fast as possible. TeamPhone [3] is an approach which can be
    used, e.g., after natural disasters when parts of the infrastructure are destroyed
    and people need help. It creates an alternative network consisting of the remaining
    infrastructure and the smart phones of the survivors whereas some of these are
    in a normal communication mode and the ones of trapped survivors are in a rescue
    mode which helps to locate those people. The established network uses ad hoc connections
    between the smart phones and the remaining infrastructure. Mayer et al. proposed
    the Hybrid Routing System which is a decentralized and collaborative routing approach
    for hybrid DTNs [5]. It uses direct and transitive non-deterministic infrastructure
    connections for an improved routing within large or clustered DTNs. The authors
    further enhance the Hybrid Routing System through another new routing algorithm
    which switches packets to infrastructure based connections, if their deadline
    cannot be reached through the DTN [6]. Fig. 1. Overview of the communication architecture
    Show All There were also developments towards challenging networks in the context
    of agricultural processes. In [7], a middleware is presented that combines infrastructure
    based networks with ad-hoc connections to enable communication with a centralized
    server. Our approach differs from the ones described above as addresses the requirements
    of the underlying agricultural use case and utilizes it specific characteristics,
    ie., the always recurring mobility-pattern for the network nodes with periodic
    packets to be sent. These packets have to be prioritized and scheduled by the
    network architecture according to certain priorities. Furthermore, the coverage
    with infrastructure based communication links is limited. Hence, the scheduling
    of the packets has to reflect the links available. In contrast to related work,
    we decided to not integrate Mobile Adhoc Network (MANET) approaches in the system
    design as the DTN provides a very similar functionality and we expect our scenarios
    to be too sparse to enable end-to-end connections. SECTION III. HOAR: A Hybrid-Opportunistic
    Architecture for Robust Agricultural Networking In agricultural scenarios, we
    found the following challenges: Based on the given application, there are priorities
    which are assigned to every packet to indicate how important the transmission
    of the packet is. This is a challenge as well as an opportunity. Packets better
    should be delivered before their deadline. However, not all packets needs to be
    transmitted reliably. For some classes, packet loss is tolerable. For these classes,
    packets that are foreseen to be late can be discarded early. Beside these priorities,
    another aspect is addressing a single nodes. Each node has multiple interfaces
    with one IP address each, but the addresses may change when the network connections
    change. Thus, an addressing scheme or address resolution is needed. Another challenge
    are the specific network topologies. There may be agricultural vehicles that do
    not leave certain areas for a longer time (e.g., harvesters). These vehicles may
    never be reachable via certain communication paths. If a stationary node which
    cannot reach a PLMN shall receive a packet, this packet has to be transmitted
    via the DTN. To address these challenges, we present our Hybrid-Opportunistic
    Architecture for Robust Agricultural Networking (HOAR). A. Overview of the Architecture
    The core idea of HOAR is the use of different network technologies simultaneously.
    The approach is based on the assumption that packets can be transferred the most
    efficient way, if the sender and the receiver node can reach each other directly.
    This can be achieved by using direct M2M communication. If the destination node
    is not reachable directly, in most cases, a transmission via the Internet is the
    second fastest way. If the sender node has no connection to the Internet, the
    packet has to be transmitted via DTN-based forwarding. HOAR consists of the three
    components (see Figure 1). The SOFiA-Socket (SOS)1 is the main component which
    is used by the mobile nodes. It provides the functionality to send and receive
    packets. Furthermore, it internally stores and schedules all packets and ensures
    a reliable communication. The SOFiA-Management-Server (SoMaS) is a modified SoS
    whose main task is to store data persistently for a later evaluation. This task
    is typically implemented as a server node. Thus, it has only a connection to the
    Internet and no DTN/M2M interface. The SOFiA-Server-Socket (SoSeS) is a central
    server node which relays packets between multiple SoSs or a SoS and the SoMaS.
    Therefore, it does not provide functionality to send or receive packets. As the
    sender and receiver node may not have an Internet connection at the same time,
    there is a demand for this central relay. Since the mobile nodes usually have
    no static IP addresses, the SoSeS also provides address resolution, too. For the
    infrastructure-based part, our approach is integrated above the transport layer
    by using UDP. In principle, the use of a raw IP socket is possible as well, but
    would probably be blocked by common firewalls and would require superuser rights.
    For the DTN/M2M functionality the external library IBRDTN [8] is used. It provides
    a standard compliant implementation of the bundle protocol [10], as well as different
    common forwarding strategies (e.g., Epidemic Routing [12]). The internal structure
    of the SoS is shown in Figure 2. The core component is the scheduler which is
    an algorithm running in an own thread. It communicates with the application and
    the network components through shared data structures. The scheduler manages all
    incoming and outgoing packets. It either forwards them directly to the correct
    destination or stores them in the internal data queues. There exists one data
    queue for each of the time priorities, which will be explained in Section III-C.
    Within each queue the packets are stored following the FIFO principle. Beside
    these data queues, there exist three additional data structures which are used
    for the management of pending acknowledgments, callbacks for the application,
    and sequence numbers of already received packet. The ACK-Map is periodically maintained
    by the scheduler which resends a packet with an pending acknowledgment (ACK) after
    a configurable amount of time. When the application passes data to the SoS, it
    can optionally pass callback objects which are triggered by the scheduler on special
    events like the successful transmission of a packet. The sequence numbers of already
    received packets are stored. Hence, a multiple received packet should not be forwarded
    to the application twice. Fig. 2. The internal structure of the SOS Show All B.
    Packet Format There are two types of packets used by our approach: the SofiaDataPacket
    and the SofiaAck. Figure 3 shows the header of the data packet. The header for
    the ACK packet is identical, but has no length field. The flags in the first byte
    indicate the type of the packet (Data or ACK), if the connection was limited (PLMN
    or WLAN) and if the packet was forwarded from another node. This information is
    important for the SoSeS to manage the connections to the SoSs. The fields SRC
    RTM and DEST RTM indicate whether the source or destination of the packet respectively
    is reachable through all type of connections or if they are limited to the Internet
    or the DTN. This information is used by the scheduling algorithm described in
    Section III-C. The second byte contains information about the priorities assigned
    to the packet. The next three bytes contain source and destination address, as
    well as a message sequence number. Addresses are needed on this layer, to have
    one unified address per HOAR node. The two byte long deadline field contains a
    UNIX timestamp denoting when the packet expires. This field is necessary, as it
    enables the early drop of packets that will be too late for the deadline. C. Scheduling
    The basic idea of the scheduler is to determine the best routing for the data
    to be sent. For this it checks, if there is a direct (M2M) connection to the destination.
    If true, the packet is directly transmitted via the DTN interface. Otherwise,
    if an Internet connection is available, the packet is transmitted via the Internet.
    If there is no Internet connection available, DTN-based forwarding is used. Fig.
    3. The header format of a sofiadatapacket Show All Table I Priorities for each
    packet In Table I, an overview of the available priorities is given. First of
    all, the time-critical option describes in which timespan the packet shall be
    transmitted. Based on this option the reliable option indicates whether the packet
    can be dropped when the given deadline cannot be kept or if it shall be transmitted
    anyway. The last option acknowledgement specifies if the transmissions shall be
    ensured by ACK packets and if the sending application shall be informed by callbacks
    about special events belonging to the particular packet. Based on these priorities,
    priority queuing is applied. The scheduler resorts all queues periodically and
    moves packets, that cannot reach their individual deadline within their current
    queue, to a queue of higher priority resulting in earlier transmission. If the
    packet is already in the highest priority, but cannot meet its deadline, it is
    either dropped or moved to the queue without a time limit, depending on the value
    of the reliable priority. Next we describe the scheduling performed by the SoS.
    The scheduling approach of the SoMaS and the SoSeS is very similar way, but make
    no use of DTN connections. The first criteria for the scheduling of the packets
    is the time priority of each packet. The first three time classes imply a deadline
    and thus make the transmission of respective packet time-critical. The fourth
    class, however, implies no deadline. It should, thereby, be transmitted in a way
    that does not influence the urgent transmissions negatively. This requirement
    is reached either by processing the packets of this time class after all other
    packets are processed by the scheduler or by only transmitting the packets through
    a connection to a static WLAN Access Point (AP) and the SoSeS. The only exception
    to this method occurs in situations in which the sender node never will reach
    a WLAN AP and is made aware of this fact through parametrization by the application.
    In this case, the header''s SRC RTM field is set to DTN indicating that the sender
    is only reachable through the DTN. Fig. 4. The general scheduling algorithm Show
    All The required transmission mode (RTM) of each node is collected by the SoSeS
    which extracts the information from the packets it forwards. If it receives a
    packet addressed to a node that is limited in its connectivity it sets the DEST
    RTM field corresponding to the stored value for the destination node. Furthermore,
    all nodes have a static configurable list of nodes that are only reachable through
    the Internet like the SoMaS and set the DEST RTM field by themselves. The packets
    of the first three time classes imply a deadline and are scheduled to the links
    as shown in Figure 4: If the destination RTM is set to DTN, the packet is transmitted
    via the DTN. If the destination RTM is set to Internet, the packet is transmitted
    via the Internet. If the node has no potential connection to the Internet, the
    packet is forwarded via the DTN. If there are no constraints regarding the destination
    RTM, the scheduler checks whether the destination is directly reachable. In this
    case, the packet is transmitted via the DTN interface. Otherwise, it is transmitted
    via the Internet, if a connection to it is available. If this is also not the
    case, the DTN is used as the fallback method. If the packet is in the queue for
    time class three packets, the fallback method is not used but instead the packet
    stays in the queue until the next iteration of the scheduler. Hence, the DTN is
    not flooded with non urgent packets. Following the algorithm described above,
    the scheduler tries to send the pending packets as fast as possible. Thereby,
    it only chooses one link for each packet i.e. a packet is not simultaneously send
    via multiple paths. Only when a packet is retransmitted because of an pending
    ACK, it can happen that the same packet is transmitted over different paths. In
    general, the SoSs only send their own packets to the SoSeS or directly to the
    destination node. However, when a packet is forwarded through the DTN on each
    hop the SoS performs a check whether it can transmit the packet faster over the
    Internet or whether it shall be further forwarded via the DTN. The decision is
    based on the same strategy like the normal scheduling algorithm. Fig. 5. The evaluation
    scenario Show All SECTION IV. Evaluation To evaluate HOAR, we created an idealized
    scenario of a harvesting campaign. This scenario is used to simulate the movement
    of agricultural vehicles and to determine their access to network infrastructure
    as well as their proximity to other machines for M2M transmissions. Secondly,
    we used this information to emulate the network connections and trigger message
    transmissions between the nodes in the HOAR network. A. Evaluation Scenario The
    reference scenario for our evaluation is based on the process of forage maize
    harvesting, where a self-propelled forage harvester (SFH), a compactor vehicle
    (CV), and a number of transport vehicles (TVs) work together in harvest chain.
    The SFH cuts and chops the maize plants in the field and overloads the harvested
    material onto the trailer of a TV. After the loading is finished the TV transports
    the harvested material to a weighbridge, where it is measured for accounting purposes,
    and afterwards to a silo. There the chopped maize is unloaded and compacted by
    the CV turning it into silage. We created an idealized version of this process
    for our evaluation scenario, see Figure 5. In this scenario, the SFH is stationary
    in the field and the CV at the silo. There are five TVs that move along the depicted
    route, throughout the whole evaluation scenario. The vehicles velocities are kept
    constant, to create an interval of 6 minutes between two vehicles arriving a the
    field, which guarantees an optimal utilization of the SFH. In the simulation,
    this harvesting process is repeatedly performed over a time span of 14 hours.
    At the silo and at the weighbridge the vehicles are connected to the Internet
    via WLAN APs. Furthermore, they have a connection to the Internet via the PLMN
    up to a distance of 2 km to the silo. This implies that the SFH has no Internet
    connection at any time and the TVs lose their connection on their way to the field.
    This leads to the challenging network constraints, we desire to address with HOAR.
    Table II Emulated network parameters Throughout the evaluation scenario status
    messages are transmitted between the nodes. They include the vehicles position,
    information on their current actions and control commands for the logistic process.
    These messages have a size of only a few bytes. All together, there are 22 types
    of different messages, that are either triggered by the process state or periodically
    send. Most of these packets (20 types) are prioritized as reliable and contain
    important information about the process state. The other two types of packets
    contain the GPS position of the sender and are send periodically by each TV. Because
    this information expires relatively fast, these packets are not prioritized to
    be sent reliable. To generate the evaluation scenario, time discrete simulations
    of the movement of all nodes are performed. For each second of the simulation
    run, the new position for each node is calculated and it is checked whether a
    new connection to another node or the Internet can be established, or whether
    an existing connection has to end. For the detection of a connection, a simple
    circular propagation model is used: Within a defined range two nodes can communicate
    with each other and beyond this range they cannot communicate. This information
    is written to individual log files for each node. In parallel, the generation
    of packets that shall be sent by the nodes is simulated based on the state of
    each node in the agricultural process. If a new packet has to be sent, a new log
    entry is created for the corresponding sender node. The packets that are created
    in the first and in the last hour of this process are ignored to avoid negative
    effects of the construction or destruction phase of the harvest chain. B. Emulative
    Evaluation Environment To evaluate the above scenario, an emulated network environment
    was created based on seven Raspberry Pi 3 Model B2 and a desktop-PC, which were
    interconnected through LAN connections and a central switch. The Raspberry Pis
    were used to deploy the SoS representing the vehicles, while the desktop-PC provides
    the SoSeS and the SoMaS. On top of the individual LAN interfaces, three virtual
    interfaces were created each representing the WLAN, PLMN, and DTN connections,
    whereby the DTN connection is based on an adhoc WLAN connection. With the Linux
    tool netem these interfaces were configured in a way that they behave like their
    emulated network types. The interfaces are configured as listed in Table II. If
    the connection to the Internet via PLMN or WLAN is not available (according to
    the evaluation scenario), the corresponding interfaces of the Raspberry Pis are
    simply turned down. This approach is suitable for the emulated Internet connection,
    but not for the emulated DTN connections because the contacts between the individual
    nodes have to be modeled. Therefore, the Linux tool iptables is used to block
    connections that are not available according to the evaluation scenario. All connections
    are enabled and disabled through a time driven bash script based on the log files
    described in Section IV-A. Fig. 6. Packet delivery fraction for the different
    traffic classes Show All Furthermore, the log files for the generated packets
    from Section IV-A are used to create measurement applications that send these
    packets based on the given timetable of the evaluation scenario. For the evaluation,
    the generation of log files is needed. For each packet that is send or received,
    a log entry is created on the affected node. After the measurement process is
    finished, each packet can be tracked using its sender node and sequence number.
    Before the evaluation, these log files are preprocessed by correcting the measured
    timestamps since the Raspberry Pis have a noticeable clock drift. The local time
    on the Raspberry Pis is synchronized using a common NTP server before and after
    the measurement and the correction offset is stored. This offset is used to recalculate
    the timestamps in the log files through a linear function. C. Results We evaluate
    the performance of HOAR, using the results of ten replications of the simulation
    scenarios, where each ran over a time span of 12 hours. The results are shown
    in Figure 6. It can be seen that the majority (approximately 68 %) of the data
    packets with the highest time priority t 1 cannot be transmitted in time. This
    is caused by the individual position and movement of the vehicles in the evaluation
    scenario. But at the same time, there is no packet loss in t 1 because the corresponding
    packets are prioritized as reliable packets. Thus, these packets are never actively
    dropped. On the other side, approximately 34 % of the packets with time priority
    t 2 can be successfully transmitted. This is caused by the fact that some of these
    packets are marked as non reliable in the evaluation scenario. Together with the
    fact that the packets obviously cannot be transmitted fast enough, these packets
    are dropped by the scheduling algorithm. The 5 % of the packets that cannot be
    transmitted in time belong to the number of packets that are marked as reliable
    in the evaluation scenario. Fig. 7. The use of the available communication paths
    Show All In the time priority t 3 , only a fraction of 17 % can be transmitted
    in time. This can be explained by a particularity of the evaluation scenario:
    In t 3 there are only two types of packets that are sent between the CV and the
    SFH or the TVs when located at the weighbridge and the SFH. Because of this constellation,
    the packets are firstly sent to the SoSeS which forwards them to the DTN. To forward
    these packets, the SoSeS uses the last three SoS-nodes as a gateway to the DTN,
    that it last received packets from and that have connections to the Internet and
    the DTN. However, this heuristic for the gateway nodes selection seems to be inefficient
    resulting in long transmission times for the packets belonging to the time class
    t 3 . In the lowest prioritized time category t 4 (always without a deadline),
    all packets are received in time. In Figure 7, the distribution of the data packets
    to the various available communication paths is shown. These paths are reconstructed
    from the log files by inserting all packet receipts in a graph and searching for
    available paths in this graph between the sender and the receiver node for each
    packet. The four available paths are DTN, Internet, hybrid, and multi. All packets
    that are only transmitted via the DTN belong to the first category. All packets
    that are relayed by the SoSeS but only use the PLMN or the WLAN are assigned to
    the Internet category. Packets that use the DTN and the Internet in one path are
    counted in the hybrid category. All packets that use more than one kind of path
    and which are received multiple times by the destination node belong to the multi
    category. It can be seen that all four types of paths are used in the emulated
    scenario. The specific distribution of the packets to the paths is strongly influenced
    by the evaluation scenario and the movement of the vehicles in this scenario over
    the time. A detailed analyses of this distribution is beyond the scope of this
    paper. In summary, the evaluation has shown that HOAR enables reliable transmissions
    even under challenging network conditions. The results are good enough to test
    the architecture in a real-world scenario. However, we expect a performance improvement
    by using a more sophisticated scheduling algorithm. SECTION V. Conclusion & Future
    Work In this paper, we presented HOAR that is designed for the use in an agricultural
    scenario with challenging network conditions. This architecture is able to schedule
    data packets according to preassigned priorities considering the availability
    of DTN/M2M, PLMN, and WLAN connections. Our evaluation has shown that the use
    of hybrid communication technologies is a promising approach under challenging
    network conditions in an agricultural scenario. Further improvements can be reached
    through a more advanced scheduling algorithm on the central SoSeS node. An extended
    evaluation in other agricultural scenarios, as well as a real-world deployment
    is part of our future work. ACKNOWLEDGMENT This paper was partly funded by CLAAS
    E-Systems KGaA mbH & Co KG and by the German Federal Ministry of Education and
    Research (BMBF) within the Program “Innovations for Tomorrow''s Production, Services,
    and Work” (funding number 01FJ15028). The authors are responsible for the contents
    of this publication. The authors would like to thank Jan-Hendrik Bolte for his
    feedback and ideas during the development process. Authors Figures References
    Citations Keywords Metrics Footnotes More Like This Cognitive Machine-to-Machine
    Communications for Internet-of-Things: A Protocol Stack Perspective IEEE Internet
    of Things Journal Published: 2015 A Novel Machine-to-Machine Communication Strategy
    Using Rateless Coding for the Internet of Things IEEE Internet of Things Journal
    Published: 2016 Show More IEEE Personal Account CHANGE USERNAME/PASSWORD Purchase
    Details PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS Profile Information COMMUNICATIONS
    PREFERENCES PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help? US & CANADA:
    +1 800 678 4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow About IEEE
    Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination
    Policy | IEEE Ethics Reporting | Sitemap | IEEE Privacy Policy A not-for-profit
    organization, IEEE is the world''s largest technical professional organization
    dedicated to advancing technology for the benefit of humanity. © Copyright 2024
    IEEE - All rights reserved."'
  inline_citation: '>'
  journal: 2018 IoT Vertical and Topical Summit on Agriculture - Tuscany, IOT Tuscany
    2018
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: 'HOAR: A hybrid-opportunistic architecture for robust agricultural networking'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Jeppesen J.H.
  - Ebeid E.
  - Jacobsen R.H.
  - Toftegaard T.S.
  citation_count: '26'
  description: The terms Internet of Things and Big Data are currently subject to
    much attention, though the specific impact of these terms in our practical lives
    are difficult to apprehend. Data-driven approaches do lead to new possibilities,
    and significant improvements within a broad range of domains can be achieved through
    a cloud-based infrastructure. In the agricultural sector, data-driven precision
    agriculture shows great potential in facilitating the increase in food production
    demanded by the increasing world population. However, the adoption rate of precision
    agriculture technology has been slow, and information and communications technology
    needed to promote the implementation of precision agriculture is limited by proprietary
    integrations and non-standardized data formats and connections. In this paper,
    an open geospatial data infrastructure is presented, based on standards defined
    by the Open Geospatial Consortium (OGC). The emphasis in the design was on improved
    interoperability, with the capability of using sensors, performing cloud processing,
    carrying out regional statistics, and provide seamless connectivity to machine
    terminals. The infrastructure was implemented through open source software, and
    was complemented by open data from governmental offices along with ESA satellite
    imagery. Four use cases are presented, covering analysis of nearly 50 000 crop
    fields and providing seamless interaction with an emulated machine terminal. They
    act to showcase both for how the infrastructure enables modularity and interoperability,
    and for the new possibilities which arise from this new approach to data within
    the agricultural domain.
  doi: 10.1016/j.compag.2017.12.026
  full_citation: '>'
  full_text: '>

    "Skip to main content Skip to article Journals & Books Search Register Sign in
    Brought to you by: University of Nebraska-Lincoln View PDF Download full issue
    Outline Highlights Abstract Keywords 1. Introduction 2. Related work 3. Infrastructure
    requirements 4. Infrastructure design and implementation 5. Use cases 6. Discussion
    7. Conclusion Acknowledgment References Show full outline Cited by (26) Figures
    (9) Show 3 more figures Tables (3) Table 1 Table 2 Table Computers and Electronics
    in Agriculture Volume 145, February 2018, Pages 130-141 Original papers Open geospatial
    infrastructure for data management and analytics in interdisciplinary research
    Author links open overlay panel Jacob Høxbroe Jeppesen a, Emad Ebeid b, Rune Hylsberg
    Jacobsen a, Thomas Skjødeberg Toftegaard a Show more Add to Mendeley Share Cite
    https://doi.org/10.1016/j.compag.2017.12.026 Get rights and content Highlights
    • A geospatial infrastructure conforming to OGC standards was implemented. • The
    entire work was based on open data and open source software. • Open data was used
    to analyze nearly 50 000 fields w.r.t. intra-field variations. • The standardized
    implementation results in easy transition to commercial products. Abstract The
    terms Internet of Things and Big Data are currently subject to much attention,
    though the specific impact of these terms in our practical lives are difficult
    to apprehend. Data-driven approaches do lead to new possibilities, and significant
    improvements within a broad range of domains can be achieved through a cloud-based
    infrastructure. In the agricultural sector, data-driven precision agriculture
    shows great potential in facilitating the increase in food production demanded
    by the increasing world population. However, the adoption rate of precision agriculture
    technology has been slow, and information and communications technology needed
    to promote the implementation of precision agriculture is limited by proprietary
    integrations and non-standardized data formats and connections. In this paper,
    an open geospatial data infrastructure is presented, based on standards defined
    by the Open Geospatial Consortium (OGC). The emphasis in the design was on improved
    interoperability, with the capability of using sensors, performing cloud processing,
    carrying out regional statistics, and provide seamless connectivity to machine
    terminals. The infrastructure was implemented through open source software, and
    was complemented by open data from governmental offices along with ESA satellite
    imagery. Four use cases are presented, covering analysis of nearly 50 000 crop
    fields and providing seamless interaction with an emulated machine terminal. They
    act to showcase both for how the infrastructure enables modularity and interoperability,
    and for the new possibilities which arise from this new approach to data within
    the agricultural domain. Previous article in issue Next article in issue Keywords
    Internet of ThingsRemote sensingOpen softwareOpen dataFarm management information
    systems 1. Introduction The Internet of Things (IoT) and Big Data have gained
    tremendous attention in recent years, and we are currently witnessing information
    and knowledge from data becoming a critically important tradable asset. Most domains
    are becoming increasingly data-centric, however, it is difficult to gain an overview
    of the specific benefits one might achieve from this. Furthermore, interoperability
    has, and still is, an issue, and standardization is necessary for achieving modularity,
    where a broad range of software and hardware modules can be seamlessly connected.
    This calls for a standardized cloud-based infrastructure with an eco-system approach,
    resulting in third-party vendors becoming able to develop add-ons to existing
    systems, much like apps for smartphones. The agricultural sector is required to
    increase yield production to meet the expected doubling of crop demand from 2005
    to 2050 (Tilman et al., 2011). Meanwhile, 70% of freshwater withdrawals are already
    devoted to irrigation and the agricultural sector is responsible for 30–35% of
    greenhouse gas emissions (Foley et al., 2011). This is partly caused by 50% of
    the global nitrogen applied not being absorbed by the crops they were distributed
    on (Stuart et al., 2014). Hence, there is a critical need for new methods for
    optimizing the agricultural domain. Precision agriculture employs technologies
    to manage spatial and temporal variability within fields to improve crop yield
    while decreasing the environmental impact. Hence, it facilitates site specific
    farming, such that e.g. irrigation and nitrogen fertilizer is distributed only
    where and when necessary. However, the adoption rate of precision agriculture
    has been slow, due to a range of factors, such as issues with interoperability,
    compatibility, and complexity (Aubert et al., 2012). Recent advances in open source
    software, open standards, and open interfaces show potential for overcoming these
    issues. The standardization of interfaces and formats by The Open Geospatial Consortium
    (OGC) can ensure interoperability of geographic information systems (GIS) (Nash
    et al., 2009, Nikkilä et al., 2010), which is an essential part of precision agriculture
    (Nikkilä et al., 2010). Furthermore, advances in cloud computing acts as an enabler
    for precision agriculture. The devices are interconnected, as seen in Fig. 1,
    and servers for storage, communication, processing, and analytics can use a variety
    of methods for extracting important knowledge from the vast amounts of data. Cloud
    computing capabilities are decreasing significantly in price, and high processing
    power along with large storage capabilities can be setup in an easy manner. Furthermore,
    open data provide valuable information for the agricultural practice. Although
    application maps based on satellite imagery has been found to improve profit while
    decreasing environmental impact (Seelan et al., 2003), the total cost of applying
    the system, alongside the implications regarding ease of use, made it infeasible.
    These issues have been significantly alleviated, due to the open multi-spectral
    satellite imagery from Sentinel-2 and Landsat satellites combined with the aforementioned
    advances in hardware and open software. Download : Download high-res image (225KB)
    Download : Download full-size image Fig. 1. An overview of a cloud-based data
    infrastructure, communicating with a broad range of devices. The work presented
    in this paper describes the geospatial data infrastructure required to facilitate
    data transfer, storage, processing, and analytics within precision agriculture.
    The contributions include an implementation of an OGC compliant infrastructure,
    including OGC standards for heterogeneous sensor webs. This covers important Information
    and Communications Technology (ICT) aspects of the precision agriculture practice,
    from satellite imagery or sensor data through cloud processing to tractor terminal,
    smartphone, or workstation. It is demonstrated how the infrastructure can be used
    to carry out large regional statistical analyses based on open data, which have
    not previously been viable. The infrastructure is implemented using open source
    software, and forms the foundation for interdisciplinary research with interoperability
    in mind, such that data can be shared in standardized formats, and visualized
    online. This results in the possibility for diverse research focusing on optimizing
    over the entire crop cycle. Finally, the infrastructure provides an easy transition
    to commercial products, hence coupling academic research with industrial objectives.
    The remainder of this paper is organized as follows: Section 2 covers related
    work, including the advances in open data and the current state of Farm Management
    Information Systems (FMIS) with regard to precision agriculture. Section 3 presents
    the requirements and needs for the geospatial data infrastructure, before Section
    4 describes the design and implementation of the proposed infrastructure. Section
    5 validates the infrastructure through four use cases. Section 6 provides a discussion
    on the findings. Finally, Section 7 concludes the paper. 2. Related work The Internet
    has provided an unprecedented platform for data sharing, where the cost of distribution
    to the public has become marginal. The availability of open data has progressed
    tremendously in recent years, and in 2013, the G8 countries decided to be trendsetters
    in open data policies (Castro and Korte, 2015). The financial benefits in 2008
    coming directly and indirectly from open data was estimated to be about 140 billion
    euro in Europe (Vickery, 2011). NASA opened data access to the LANDSAT satellite
    programme in 2008, and the impact of this decision is discussed in Wulder et al.
    (2012). They describe how the use of satellite imagery have increased significantly,
    and address several future benefits when data from several satellites, such as
    LANDSAT and Sentinel, can be used together. The record of distributed Landsat
    images per year before the open access was 25 000 in 2001 (Wulder et al., 2012),
    compared to 1 million distributed images in the first 17 days of March 2016 (Landsat).
    In Janssen et al. (2012), the benefits and barriers of adopting open data are
    discussed. The major technical barriers involve the absence of standardized data
    along with the lack of a central portal to access them. Within the agricultural
    sector, this is particularly true, as the sector has faced obstacles with respect
    to ICT due to vertical integrations and proprietary formats (Nash et al., 2009).
    The benefits of adopting open data cover economic growth and stimulation of innovation.
    Furthermore, there is a large potential for the use of open data for minimizing
    climate impact within the agricultural sector (Zaks and Kucharik, 2011). The advantages
    of employing decision support systems within the agricultural sector based on
    remote sensing, in particular satellite imagery, is described in Seelan et al.
    (2003), with several use cases proving the financial and ecological gains. The
    price of implementing such systems have decreased significantly, partly due to
    the open satellite data policies of NASA and ESA, and partly due to the reduced
    price of data communication and open software for data analysis. In Bivand (2011),
    a wide variety of open source GIS software tools are presented. According to Steiniger
    and Bocher (2009), open software can perform the advanced spatial analysis functions
    of the proprietary software. This is important, as the lack of standardization
    and the cost of required data and software are obstacles for precision agriculture
    (Seelan et al., 2003). Traditionally, FMISs have been operating on a field scale
    and did not include GIS data, which are essential for precision agriculture (Rains
    and Thomas, 2009). The complexity of employing GIS systems decreases, and the
    interoperability between software packages alongside with increasingly standardized
    transfer methods for spatial data have improved significantly, mainly due to the
    attention this matter has received within the GIS community (Nash et al., 2009).
    The adoption of web services based on open GIS standards are clear improvements
    for data transfer within the domain (Nash et al., 2009). A study performed in
    2015 of 144 FMIS solutions showed that only 40% supported site-specific farming,
    and only 15% supported a web interface (Fountas et al., 2015). These functionalities
    are core elements of future precision agriculture (Nikkilä et al., 2010). The
    lack of these functionalities is argued in the study, to be partly due to the
    development cost of them, followed by a lack of standardization. It is important
    to note, however, that a study of farmer experience with precision agriculture
    in 2005 found that 81% of Danish farmers, and 78% of American farmers, preferred
    to store data locally (Fountas et al., 2005). The knowledge gaps regarding ICT
    in agriculture are discussed in Mulla (2013). One advice for future research is
    to combine historic data from, e.g., satellites with real-time remote sensing
    data for improved decision making in farm operation. In Basso et al. (2013), it
    is discussed how remote sensed data can be used in collaboration with crop simulation
    models for improved precision. In Murakami et al. (2007), important requirements
    for obtaining precision agriculture are listed, and includes complete control
    of the system, more standardized computer systems, seamless integration and interoperability
    with other software packages, scalability, support for meta-data, and low cost.
    A review of the use of geospatial web services provided by OGC is discussed in
    Nash et al. (2009), however, the system is not implemented. In Chen et al. (2015),
    a system based on OGC standards and web services is proposed and implemented,
    however, they focus mainly on sensors in precision agriculture. An empirical analysis
    of the adoption rate of precision agriculture is presented in Aubert et al. (2012).
    They find that it is, in particular, the ease of use of the systems along with
    the compatibility of the systems with existing farming equipment, that limits
    the adoption rate. Interestingly, they also find that trialability has a negative
    impact on the adoption rate (Aubert et al., 2012). Hence, the farmers who try
    precision agriculture systems are less likely to adopt them, which indicates that
    the systems are more complex than farmers anticipate. Furthermore, they point
    out that the adoption of precision agriculture systems necessarily leads to an
    adoption of a range of components which are partially dependent, and that the
    complexity of such a systemic adoption has been underestimated, leading to a low
    adoption rate. This issue is addressed in this paper by introducing a modular
    approach towards precision agriculture, where each module can improve the farming
    practice without requiring a broad range of components to function. Furthermore,
    this software ecosystem approach provides the ability for third-party developers
    to easily add value to the setup. 3. Infrastructure requirements In this section,
    the requirements of the infrastructure, based on the ICT issues encountered in
    the precision agriculture domain are investigated. Lack of interoperability has
    been a major inhibitor for the adoption rate of precision agriculture, and continues
    to be a key issue (Fountas et al., 2015). It is advised that vendors should investigate
    open standards to ensure compatibility (Aubert et al., 2012) and that data should
    be delivered to cloud services providing OGC standardized interfaces and formats
    for the data consumers. Compatibility with existing farming equipment is important
    to improve the adoption rate of precision agriculture (Aubert et al., 2012), with
    seamless integration of new equipment for improved precision agricultural practices.
    An important benefit of applying the standardized formats and interfaces is the
    possibility for employing a highly modular service oriented architecture. This
    calls for a web services solution, where services can be added on top of the existing
    system and third-party vendors can contribute in an ecosystem approach. IoT is
    emerging at an immense pace, and sensor devices can be connected following OGC
    standards, namely the Sensor Web Enablement (SWE) initiative (Chen et al., 2015).
    Sensors such as weather stations and temperature sensors are already seen today,
    and they should be complemented by machine measurement data. This is required
    for future needs in fleet management and automated agricultural machinery. Cloud
    computing provides a large range of benefits, such as improved processing power,
    security, storage, and backup. The devices in the field should be terminals connecting
    to the cloud, such that the powerful server hardware can be utilized (Steinberger
    et al., 2009). This also improves possibilities for scalability significantly.
    Low cost is of significant importance (Murakami et al., 2007, Pierpaoli et al.,
    2013) and by employing open source software and open data, the price of the infrastructure
    can be minimized. Finally, the immediate benefits of employing precision agriculture
    should be clear to the farmer (Fountas et al., 2015). The requirements and needs
    for a geospatial data infrastructure for precision agriculture have been generalized
    to the following principles. Interoperability must be addressed and is advised
    to conform to the defined OGC standards. Modularity should be pursued, much like
    a software ecosystem, to avoid dependency on a whole system to engage with precision
    agriculture. The data pipeline should be transparent to the farmer and the raw
    data should be accessible to agronomists, scientists, and third-party vendors.
    Heterogeneous data sources should be combined in a seamless manner such that real-time
    sensor data can be combined with e.g. satellite imagery. Cloud computing with
    web based services should form the basis of the infrastructure, hence improving
    the possibilities for scalability, storage, and processing. Ease of use must be
    considered and non-technical users must be able to use the infrastructure through
    a simple user interface. Open data, software, and hardware should be prioritized
    to reduce price, minimize proprietary integrations, and to ease development for
    third-party vendors. 4. Infrastructure design and implementation The main focus
    in the design of the data infrastructure was to alleviate the current issues with
    interoperability, ease of use, modularity, streaming data, and cost. To meet the
    requirements stated in the preceding section, it was chosen that the geospatial
    data infrastructure should be a cloud-based solution, employing web services based
    on OGC standards. Furthermore, it should be based on open source software, to
    minimize cost. OGC provides open standardized formats and interfaces for geospatial
    data storage and communication, which is suitable for use in precision agriculture
    (Nash et al., 2009, Nikkilä et al., 2010). Of particular interest are: The Web
    Map Service (WMS), Web Coverage Service (WCS), Web Feature Service (WFS), and
    Web Processing Service (WPS). WMS is a protocol for serving maps over the Internet
    in a compressed format, such as Portable Network Graphics (PNG). The client requests
    a map within a certain geospatial area, e.g., a bounding box covering Denmark,
    and the server will respond with PNG images of a predefined size (referred to
    as tiles) such that it fills the requested bounding box. If the raw uncompressed
    pixel values are required, the WCS can be used in a similar way as WMS. However,
    it requires increased bandwidth due to the uncompressed data. WFS is used for
    requesting raw vector data such as a field polygon. If the raw vector data are
    not required, WMS can also be used to request a compressed image showing the drawn
    vector data. WPS can be used by the client to request the output of a process,
    such that the data are processed on the server, and the result is delivered to
    the client. This eases the implementation of applications based on geospatial
    calculations, as calculations can be defined in a standardized manner and processed
    in the cloud, rather than on the terminal device. Finally, OGC provides standards
    and formats for the SWE which is a set of standards enabling the use of sensors
    in a seamless way. The possibilities within these standards are pursued to support
    streaming data from a variety of sensors, which can be combined with, e.g., satellite
    imagery. The data are queried using the Sensor Observation Service (SOS), which
    is a protocol for querying sensor using a spatial and temporal filter. Finally,
    the infrastructure should be designed for horizontal scalability and be supposed
    to run on low-cost hardware. A conceptual architecture of the data infrastructure
    is provided in Fig. 2. Five layers illustrate the data pipeline from source to
    consumer, including the interfaces and software packages. The following sections
    will elaborate on the respective layers and describe the interfaces between them.
    Software packages are briefly described in Table 1. It should be noted that GeoNode
    consists of several software packages, with GeoServer and PostGIS as core elements,
    being the data manager and database respectively. Download : Download high-res
    image (546KB) Download : Download full-size image Fig. 2. Conceptual architecture
    of the infrastructure. The arrows denote the data flow directions. Table 1. List
    of open software packages and libraries used for implementation. Name Ver. Description
    GDAL 1.10.1 Library for geospatial data processing GeoNode 2.4 Geospatial content
    management system GeoServer 2.7.4 Data manager and WPS server (part of GeoNode)
    httpd (Apache) 2.4.7 Web server used for serving user friendly web applications
    OpenLayers 2.13.1/ 3.19.0 JavaScript library for GIS data, used for creating customized
    web services OpenSensorHub 1.1.0 System for streaming GIS sensor data, based on
    OGC SWE PostGIS 2.1.2 Spatial database (part of GeoNode) QGIS 2.18.2 GIS desktop
    software be used to process geospatial data Ubuntu 14.04.4 Operating system on
    virtual machines Zabbix 2.4.8 Server monitoring software used on all servers in
    the infrastructure 4.1. Layer 1: Data sources This layer includes data from both
    open data sources and sensors. Sensor data should be using OGC SWE standardized
    interfaces, such as SOS, as it enables interoperability with other OGC standardized
    software packages. An Android phone was used to emulate a machine terminal, and
    to stream sensor data to the OpenSensorHub server using the Android OpenSensorHub
    app. The data included GPS position, accelerometer data, and a video feed from
    the phone camera. It should be noted that these data serve as examples of streaming
    data transfer, and can be easily extended to include machine specific data. However,
    to employ data from existing farming equipment, the data must first be converted
    to OGC compliant formats. On the GeoNode web interface, data can be uploaded manually
    by a user, with the restriction that vector data must be in a shapefile and raster
    data must be in GeoTIFF format. This results in the users having the GIS data
    in a standardized manner on a central platform. The field polygons provided by
    The Danish AgriFish Agency were manually retrieved. Satellite data were downloaded
    from ESA, and topographic maps were delivered by the Danish Geodata Agency. Much
    more open data is available however, and the data presented here acts as a showcase
    of the potential in combining open data sources for decision support. 4.2. Layer
    2: Pre-processing In this layer, customized software translates data into standardized
    formats. This can be important for, e.g., the Sentinel-2 satellite data from ESA,
    which is provided in the compressed Jpeg2000 format, but is desired in GeoTIFF.
    In this work, the GDAL library was used to translate Jpeg2000 to GeoTIFF. More
    advanced cases can be seen in the case of, e.g., Sentinel-1 radar satellite, where
    raw data must be processed using specific processing algorithms for satellite
    radar data. 4.3. Layer 3: Data management This layer revolves around GeoNode,
    an open source GIS platform. GeoNode consists of multiple software packages, where
    two have been highlighted in Fig. 2, namely GeoServer and PostGIS. GeoServer acts
    as a data manager which provides a connection between the data storage and the
    web applications. GeoServer supports several OGC protocols such as WMS, WCS, WFS,
    and WPS. The data storage is a combination of a file system and a PostGIS database
    (a GIS extension to PostgreSQL). GeoNode provides a web interface with a user-based
    system for uploading, downloading, and visualizing GIS data. OpenSensorHub is
    an open source software platform for geospatial sensors, used in the infrastructure
    for streaming data. The key feature of it is the usage of OGC standards from the
    Sensor Web Enablement (SWE) initiative. The benefit of GeoNode and OpenSensorHub
    being based on OGC standards becomes apparent when developing user-friendly web
    applications. As mentioned earlier, four use cases will be presented in the following
    section, with one demonstrating a user-friendly web application designed to showcase
    the capabilities of the platform. It employs OpenLayers, a JavaScript library
    for handling GIS data, to query data from GeoNode and OpenSensorHub, and combine
    them in a standardized manner directly in the web application. This eases the
    implementation process significantly. Vertical scalability is often provided in
    an easy manner by the cloud provider, and horizontal scalability can be achieved
    in the application layer by setting up different GeoServer instances, depending
    on the geolocation of the data. Automated analytics based on data from different
    GeoServer instances can then be designed to run on low-traffic times of the day.
    Large scale data processing with GIS data is often easily parallelizable, and
    it has been shown that large amounts of data can be divided and processed efficiently
    in a horizontally scalable cloud infrastructure (Jacobsen et al., 2017). 4.4.
    Layer 4: Processing Server-side processing can be queried by a client through
    WPS. This is done by using HTTP POST to send an XML document to the server (in
    this case GeoServer), with the XML document containing a description of the processing
    tasks required, alongside the data needed to be processed. All data does not necessarily
    need to be inside the XML document, but pointers to other data sources can be
    used, including data already on the server. The WPS processes are executed in
    GeoServer in this implementation, but other WPS servers can be setup if desired.
    If the processing demands are high, the WPS services can be implemented to use
    horizontal scalability in an elastic cloud setup (Tan et al., 2015), such that
    results are delivered within the desired time limit. 4.5. Layer 5: Consumers This
    layer includes the consumers of the data. A machine terminal can query data, such
    as an application map for site specific fertilization, which eases the process
    compared to the USB storage devices currently used for data transfer to the machinery.
    Furthermore, the combination of data can be viewed on the terminal during operation,
    such as an Normalized Difference Vegetation Index (NDVI) map of the field combined
    with the positions of other machines. A Nexus 5X Android smartphone has been used
    to emulate a machine terminal to showcase how using Android along with standardized
    interfaces can significantly reduce implementation time. Trimble have recently
    released Android based terminals (MMX-070 and TMX-2050 (Trimble)). The status
    of the fields can be investigated through a user-friendly web application on a
    workstation, tablet, or smartphone. This is of high value for the farmer, as it
    provides an overview of current status of his crops. In this paper, the Google
    Chrome web browser was used on PCs and the Firefox web browser was used on the
    Android device in use case 3. When the calculations require increased processing
    power, they can be implemented as WPS processes to be sent to layer 4 for server-side
    processing in the cloud. Finally, the raw data in the data platforms can be downloaded
    to perform further analysis locally on, e.g., the agronomists own workstation
    using QGIS. 4.6. Hardware Cloud services were implemented on a DELL PowerEdge
    R430 virtualization server with 8 cores, 32 GB RAM, and a 400 GB SSD. It was employing
    Virsh and Kernel-based Virtual Machine (KVM) to run separate virtual machines
    (VMs) for GeoNode development, OpenSensorHub, Zabbix monitoring and the user-friendly
    web application. All VMs were based on Ubuntu 14.04.4 LTS, and were monitored
    using Zabbix, providing measurements of, e.g., CPU load, RAM load, and up-time.
    A Nexus 5X Android phone was used to emulate a machine terminal on the client
    side. Fig. 3 and Table 2 provides an overview of the virtual machines running
    the infrastructure. It should be noted that the GeoNode production environment
    server (VM3) has been setup at the IT department of Aarhus University to run GeoNode
    with improved backup solutions and storage capabilities. Download : Download high-res
    image (282KB) Download : Download full-size image Fig. 3. Overview of the virtual
    machines used for implementation, including the software packages installed on
    them. Table 2. List of virtual machines used for the implementation. Name Description
    VM1 - Zabbix Server 1 vCPU, 1 GB RAM VM2 - GeoNode Dev. 6 vCPUs, 8 GB RAM VM3
    - GeoNode Prod. 8 vCPUs, 16 GB RAM VM4 - OpenSensorHub 1 vCPU, 1 GB RAM VM5 -
    User-friendly Web Appl. 1 vCPU, 1 GB RAM 5. Use cases Four use cases were implemented
    to validate the design and to demonstrate the capabilities of the infrastructure.
    The first use case shows how open data can be used to perform regional scale analysis
    of several thousands of fields, identifying fields where the benefit of precision
    agriculture is maximized. This exemplifies one of the possibilities of data-driven
    agriculture which have become feasible due to the recent advances in open data
    and open source software. Additionally, application maps based on the NDVI maps
    are calculated for all analyzed fields. The second use case investigates categorized
    fields on the web interface of GeoNode, where possible reasons for the intra-field
    variation are inspected. Specifically, it uses open data to investigate if improper
    drainage is a possible cause for high intra-field variations in specific fields.
    The third use case revolves around machine terminal communication with the cloud,
    with the download of an application map from use case 1 through a user-friendly
    web application. Furthermore, data is continuously being streamed from the machine
    to the cloud during operation. The fourth use case combines heterogeneous data
    sources, and provides a combined view of the machine and the open data in a user-friendly
    web application, showing live updates with the machine carrying out the operation.
    This is useful for visualization and it provides the basis for more advanced services
    such as route optimization. 5.1. Use case 1: Regional scale analysis The access
    to open satellite data, alongside with modern high bandwidth Internet connections
    and low price hardware, has significantly decreased the complexity of performing
    regional scale statistics on thousands of fields at a time. This type of analysis
    provides a range of benefits for the entire value chain, including agronomists,
    farmers, and contractors. The infrastructure provides support for performing such
    analysis. In this paper, an NDVI map was used for analysis, which can be used
    to estimate biomass by comparing the reflectance in the visible red and infrared
    bands, following the equation: (1) where NIR and VIR are the infrared and visible
    red bands respectively (corresponding to band 8 and 4 for the Sentinel-2 satellite).
    The mean NDVI value of the individual fields can be compared (Jeppesen et al.,
    2016), or the standard deviation of the NDVI values inside the fields can be compared
    to identify fields exhibiting the highest amount of intra-field variation (Jeppesen
    et al., 2017). Following Jeppesen et al. (2017), 48 149 winter wheat fields distributed
    across the approximately 33 000 km2 area of Funen and Jutland, Denmark, were used
    for the analysis in this paper. Fig. 4 shows the results of the analysis, where
    the standard deviation of the NDVI values within the fields have been compared
    and used to categorize fields according to heterogeneity. The outermost 20 m of
    the field polygons were not included in the analysis, to account for the geometric
    imprecision of the Sentinel-2 satellite. It should be noted that NDVI was used
    due to the widespread use of the vegetation index, however a wide range of vegetation
    indices can be calculated based on the multi-spectral satellite imagery. The statistical
    analysis described here was carried out manually in QGIS. However, the analysis
    can be automated to be performed by automated cloud services on, e.g., every update
    of the used datasets. The flexibility makes it feasible for agronomists and researchers
    to perform regional scale analysis designed on their specific needs, and to automate
    and publish such analyses as an add-on to the existing system. Download : Download
    high-res image (2MB) Download : Download full-size image Fig. 4. An analysis of
    48 149 winter wheat fields in Jutland and Funen, Denmark. Two histograms are showing
    (a) the mean NDVI values and (b) the NDVI standard deviation values. In (c), a
    map of Jutland and Funen are shown, with fields categorized according to their
    standard deviation values (red color denotes a field in the highest variation
    category). (For interpretation of the references to color in this figure legend,
    the reader is referred to the web version of this article.) Based on the NDVI
    map, application maps were calculated for all analyzed winter wheat fields, according
    to the following basic equation: (2) Fig. 5 shows an application map created by
    using the multi-spectral satellite imagery. Such application maps can be created
    for all fields on a national scale, and provided to the individual farmers at
    a low cost, due to the open satellite imagery and open source software. The application
    maps will be used in use case 3 for download directly to the emulated machine
    terminal. It should be noted that it is not in the scope of this paper to provide
    an advanced expression of an application map, but rather to showcase the communication
    and processing possibilities. Using another vegetation index and a different expression
    for the application map is straightforward in the infrastructure. Download : Download
    high-res image (499KB) Download : Download full-size image Fig. 5. A winter wheat
    field with (a) an NDVI map and (b) an application map based on the NDVI map (cf.
    Eq. (2)). 5.2. Use case 2: Drainage analysis Field polygons categorized according
    to intra-field variation were uploaded to GeoNode and used with other data layers
    to create maps providing useful information for visual analysis of the fields.
    The Danish Meteorological Institute has published a rain distribution map, based
    on a digital elevation model, which contains polygons showing where 55 mm of rain
    would end in the landscape. By combining the categorized field polygons, an NDVI
    map, and the rain distribution map, one becomes able to investigate if improper
    drainage might be the cause of the high intra-field variation in the high variation
    category of fields. In Fig. 6, screenshots from the online data platform are used
    for investigation fields on Funen, Denmark. It is seen how the poor performing
    patches matches well with the rain distribution map, indicating that the reason
    for the high intra-field variation is caused by improper drainage. The investigation
    presented in this use case is purely based on visual inspection. More advanced
    analysis methods can be used to extract more information from the various data
    sets. One interesting case could be an investigation as to why the high variation
    fields seen in Fig. 6a seem to be grouped. A simple reason for having many high
    variation fields within a specific region might simply be due to it being a hilly
    area, but other unknown factors might be influential. Hence, by employing advanced
    analysis methods, one might reveal unknown patterns, which we are only able to
    discover as a consequence of the analysis methods available combined with the
    open data. Download : Download high-res image (1MB) Download : Download full-size
    image Fig. 6. Visualization on the data platform of Fields on Funen, Denmark,
    showing (a) an overview of the entire island, (b) a high-variation field on an
    NDVI map, and (c) the same high variation field with an NDVI map and a rain distribution
    map. It should be emphasized that although the data in this use case is presented
    on the data platform, it would be straightforward to create a commercial product
    based on it by using the OpenLayers library to create a user-friendly web application.
    Examples of this will be presented in use case 3 and 4. 5.3. Use case 3: Machine
    terminal communication As earlier mentioned, interoperability is a major inhibitor
    of the adoption of precision agriculture. Seamless connections between machinery
    and the cloud is important, and it should be possible to visualize and download
    data directly from the cloud to the machinery. This use case has been implemented
    to show how standardized interfaces can provide seamless communication with a
    machine terminal, and how WPS can be used for processing data in the cloud, based
    on a request from the client. As previously mentioned, a Nexus 5X Android smartphone
    is used to emulate the machine terminal. It queries an application map using WPS,
    such that the output of a cloud-based calculation is delivered directly to the
    terminal. Furthermore, the Nexus 5X sends sensor data to OpenSensorHub during
    operation, to demonstrate how machine data such as GPS position and speed is available
    in a centralized system in use case 3. The WPS process is described in Fig. 7,
    and uses GeoServer for the WPS operations. The sequence diagram shows how the
    user loads the page, selects a field, and downloads an application map. The process
    of creating the application map is described in an XML document, which is sent
    to GeoServer using HTTP POST. As described in the XML document, GeoServer projects
    the polygon to the desired coordinate reference system (CRS), crops the application
    map layer according to the polygon, and finally transforms the raster data to
    point in JSON format and returns it to the user. The application map data is queried
    directly from GeoServer, hence the client merely points to the data in the XML
    document. The strength of chaining standardized processes becomes clear when implementing
    new services, as they can simply be defined in the XML document, rather than being
    hand made on the server. Download : Download high-res image (328KB) Download :
    Download full-size image Fig. 7. Sequence diagram of the OGC services used for
    downloading an application map directly to the machine terminal. If it is not
    desired to have the final application map in JSON format, a different process
    can simply be defined in the XML document, and GeoServer will base the process
    on the new information. Furthermore, new processes can be created in, e.g., Python,
    and uploaded to the server. For instance, this can be useful for defining advanced
    calculations, which, contrary to above, is desired to be controlled on the server.
    This can be useful if it is desired to have an application map service where an
    advanced expression of the application map are defined server side. When implemented
    in this manner, the expression for the application map calculation can be altered
    by changing the process in GeoServer, hence resulting in no need for the implementation
    on the client side to be updated. Hence, WPS can be used for designing processes
    both on client and server side. In Fig. 8, the Nexus 5X is shown with the web
    application active. The NDVI map, application maps, and field polygons are shown
    along with three buttons for control. Using the touch interface to select a field,
    the application can be downloaded and saved to the device using the lower button.
    While the terminal is active, it continuously sends data to OpenSensorHub. These
    data include GPS position and a camera feed, and will be used in use case 4. The
    requirements for interoperability of precision agriculture machinery can be greatly
    helped on its way using the system presented in this use case. The communication
    to the farming equipment (e.g., fertilizer spreader) is not considered in this
    paper, as it is dependent on the manufacturers. The emphasis here is on having
    the machine terminal as the end-point, such that data can be transferred to it
    in an automated and simple manner. Download : Download high-res image (177KB)
    Download : Download full-size image Fig. 8. The Nexus 5X Android device emulating
    a machine terminal accessing the data in the cloud using the FireFox browser.
    The NDVI map can give an overview of the field, while the application map can
    be used by the machine for the farming operation. 5.4. Use case 4: Online visualization
    Ease of use has a significant effect on the adoption rate of precision agriculture
    (Aubert et al., 2012), alongside a simple user interface (Murakami et al., 2007).
    In this use case, a user-friendly web application is used to provide a complete
    overview of the analytics, the application map, and the machine carrying out the
    practice. Again, this use case shows one possible cloud service, however, the
    modular approach makes further development of new services available. In Fig.
    9, a web browser displays the overview page, combining data from the various cloud
    services. The NDVI map is overlaid with the field polygons, and an Android Device
    (Nexus 5X in this paper) is monitored on the screen. Additionally, a simulated
    GPS and a simulated weather station have been included, and the distance between
    the simulated GPS and the Android device is calculated at every update (every
    second) in the web application on the end-device. This provides the foundation
    for more advanced analysis, such as route optimization algorithms, fleet management,
    and decision support processed on the server. Download : Download high-res image
    (706KB) Download : Download full-size image Fig. 9. User-friendly web application
    providing an overview of an Android device, a simulated GPS, and a simulated weather
    station, mapped with a Sentinel-2 NDVI map and the field polygons. The Android
    device is streaming a video feed, as seen in the lower right corner. This use
    case demonstrates how the modularity in front-end applications for precision agriculture
    is implemented as a part of the infrastructure. The screenshot in Fig. 9 is from
    a laptop, however, it is possible to access the page from other devices, such
    as a smartphone, tablet, or a machine terminal running a web browser. An important
    point to consider regarding this is the simple manner in which applications can
    be developed through existing JavaScript libraries, such as OpenLayers. The entire
    web application is based on 402 lines of code, including all HTML, CSS, and JavaScript
    code, with an example of the OpenLayers code provided in Listing 1. Listing 1
    Code snippet of OpenLayers query of Open Street Maps and NDVI map to the user-friendly
    web application. // Open Street Maps new ol.layer.Tile({  source: new ol.source.OSM()
    }),  // NDVI map new ol.layer.Tile({  source: new ol.source.TileWMS({   url: ‘http://futurecropping.eng.au.dk/geoserver/wms’,   params:
    {‘LAYERS’: ‘geonode:ndvi’, ‘TILED’: true},   serverType: ‘geoserver’  }) }), 6.
    Discussion The tremendous progress in open data and open source software in recent
    years shows promising potential for improving the adoption rate of precision agriculture.
    In Atzberger (2013), it is stated that access to data is too complicated in the
    agricultural sector, and that data should be easily visualized and downloaded.
    This obstacle can be overcome partly by employing standards from the GIS community.
    Open source software, such as GeoNode, can provide a platform for data-sharing
    and visualization along with user authentication through a web-interface. Furthermore,
    the support of standardized formats such as GeoTIFF for raster data and shape
    files for vector data is an important factor to ensure interoperability with other
    software packages. Along with the support for web services, such as WMS and WFS,
    modern software can be of great assistance when ensuring GIS data support for
    future FMISs. With the availability of high-resolution satellite imagery, the
    farmer can perform sub-field scale analysis to, e.g., classify patches exhibiting
    poor growth, or simply to assess the status of his crops. Even more important,
    the farmer is able to determine the spatial extent of the patches, allowing for
    a more precise economical assessment. This provides financial gains (Seelan et
    al., 2003). Historical data including field polygons and satellite imagery are
    easily accessible in standardized formats. Several analysis opportunities arise
    from the seamless integration of software tools, such as QGIS, and the task of
    analyzing thousands of fields simultaneously has been alleviated significantly.
    It should be noted that the NDVI maps and the statistics based upon them do incorporate
    uncertainty. Issues such as atmospheric disturbances are not considered, but ESA
    is publishing atmospherically corrected Sentinel-2 data of imagery acquired after
    28 May 2017 (Sentinel-2). The choice of using NDVI for this work was made because
    it is widely used, and other vegetation indices might prove to be superior (Frampton
    et al., 2013, Delegido et al., 2011). It is of high importance to involve the
    domain experts (e.g., farmers or agronomists) in the development of analysis tools,
    which is discussed in Oliver et al., 2010, Seelan et al., 2003. They found that
    the farmer often has knowledge of the locations of poor-performing patches, but
    does not have in-depth knowledge of the spatial extent or the underlying reasons.
    They note however, that the farmers often have sufficient knowledge to capture
    the broad perspective regarding poor-performance crop patches, and to take the
    necessary action to reduce financial losses. In Janssen et al. (2012), it is stated
    that it is a myth that the open data automatically benefits the user, and it is
    emphasized that value lies in the relevant information and knowledge which can
    be obtained from the data. Although this statement seems straightforward, it is
    often forgotten when developing actual products (Janssen et al., 2012). The open
    geospatial infrastructure presented in this paper follows a simple installation
    procedure, and provides possibilities of cloud computing for storage, sharing,
    processing, and visualization. Furthermore, it is useful in other domains, and
    as the amount of open data increases, the analysis capabilities become even more
    relevant. Through the use cases, the infrastructure showed potential regarding
    the requirements described for a precision agriculture infrastructure in Section
    3. The future perspectives of the infrastructure includes fleet management by
    employing the SWE initiative from OGC, and it includes more advanced analytics
    services based on the large amount of open data available. 7. Conclusion In this
    paper, a geospatial data infrastructure, based on open standards and open source
    software, was demonstrated for precision agriculture. The infrastructure was implemented
    using off-the-shelf hardware and software, and was complemented by open data.
    Four use cases were presented, showcasing how the infrastructure handled regional
    scale analysis of agricultural fields, sub-field scale analysis for precision
    agricultural practices, data exchange between the cloud and an Android-based terminal
    device, and finally providing user-friendly web interface for online visualizations.
    The slow adoption rate of precision agriculture has been found to be partially
    caused by issues regarding interoperability, compatibility, ease of use, scalability,
    and security. These issues have been greatly alleviated through the advances in
    standardized formats and interfaces by OGC, and the impressive advance in open
    source software. Finally, open data, such as the multi-spectral Sentinel-2 satellite
    imagery provides valuable information, ready to be applied. The use of open data,
    software, and hardware, along with the possibilities for modularity ensures a
    low cost, both for developers and consumers. Rather than previous complete complex
    systems, it is proposed that the precision agriculture systems should be based
    on a modular approach, starting with optimizing the use of the existing equipment,
    with clear benefits to the individual farmers. Acknowledgment This work was funded
    by Innovation Fund Denmark as part of the Future Cropping project (J. nr. 5107-00002B).
    Open data was collected from The Danish AgriFish Agency, The Danish GeoData Agency,
    The Danish Meteorological Institute, and the European Space Agency. References
    Atzberger, 2013 C. Atzberger Advances in remote sensing of agriculture: context
    description, existing operational monitoring systems and major information needs
    Rem. Sens., 5 (2) (2013), pp. 949-981 CrossRefView in ScopusGoogle Scholar Aubert
    et al., 2012 B.A. Aubert, A. Schroeder, J. Grimaudo IT as enabler of sustainable
    farming: an empirical analysis of farmers’ adoption decision of precision agriculture
    technology Decis. Support Syst., 54 (1) (2012), pp. 510-520, 10.1016/j.dss.2012.07.002
    View PDFView articleView in ScopusGoogle Scholar Basso et al., 2013 Basso, B.,
    Cammarano, D., Carfagna, E., 2013. Review of crop yield forecasting methods and
    early warning systems. In: First Meet. Sci. Advis. Comm. Glob. Strateg. to Improv.
    Agric. Rural Stat., p. 1–56. Google Scholar Bivand, 2011 Bivand, R., 2011. Geocomputation
    and open source software: components and software stacks. SSRN Electron. J. (November).
    https://doi.org/10.2139/ssrn.1972280. Google Scholar Castro and Korte, 2015 Castro,
    D., Korte, T., 2015. Open Data in the G8: A Review of Progress on the Open Data
    Charter. Center for Data Innovation. Google Scholar Chen et al., 2015 N. Chen,
    X. Zhang, C. Wang Integrated open geospatial web service enabled cyber-physical
    information infrastructure for precision agriculture monitoring Comput. Electron.
    Agric., 111 (2015), pp. 78-91, 10.1016/j.compag.2014.12.009 View PDFView articleView
    in ScopusGoogle Scholar Delegido et al., 2011 J. Delegido, J. Verrelst, L. Alonso,
    J. Moreno Evaluation of sentinel-2 red-edge bands for empirical estimation of
    green LAI and chlorophyll content Sensors, 11 (7) (2011), pp. 7063-7081, 10.3390/s110707063
    View in ScopusGoogle Scholar Foley et al., 2011 J.A. Foley, N. Ramankutty, K.A.
    Brauman, E.S. Cassidy, J.S. Gerber, M. Johnston, N.D. Mueller, C.O. Connell, D.K.
    Ray, P.C. West, C. Balzer, E.M. Bennett, J. Sheehan, S. Siebert, S.R. Carpenter,
    J. Hill, C. Monfreda, S. Polasky, J. Rockstro, D. Tilman, D.P.M. Zaks Solutions
    for a cultivated planet Nature, 478 (7369) (2011), pp. 337-342, 10.1038/nature10452
    View in ScopusGoogle Scholar Fountas et al., 2005 S. Fountas, S. Blackmore, D.
    Ess, S. Hawkins, G. Blumhoff, J. Lowenberg-Deboer, C. Sorensen Farmer experience
    with precision agriculture in denmark and the us eastern corn belt Prec. Agric.,
    6 (2) (2005), pp. 121-141 CrossRefView in ScopusGoogle Scholar Fountas et al.,
    2015 S. Fountas, G. Carli, C. Sørensen, Z. Tsiropoulos, C. Cavalaris, A. Vatsanidou,
    B. Liakos, M. Canavari, J. Wiebensohn, B. Tisserye Farm management information
    systems: current situation and future perspectives Comput. Electron. Agric., 115
    (2015), pp. 40-50, 10.1016/j.compag.2015.05.011 View PDFView articleView in ScopusGoogle
    Scholar Frampton et al., 2013 W.J. Frampton, J. Dash, G. Watmough, E.J. Milton
    Evaluating the capabilities of Sentinel-2 for quantitative estimation of biophysical
    variables in vegetation ISPRS J. Photogramm. Rem. Sens., 82 (2013), pp. 83-92,
    10.1016/j.isprsjprs.2013.04.007 View PDFView articleView in ScopusGoogle Scholar
    Jacobsen et al., 2017 Jacobsen, R.H., Jeppesen, J.H., Laursen, K.F., Skovsgaard,
    J., Jensen, H.N., Toftegaard, T.S., 2017. A scalable cloud computing infrastructure
    for geospatial data analytics for change detection. In: 2017 Euromicro Conference
    on Digital System Design (DSD), 2017, pp. 403–410. https://doi.org/10.1109/DSD.2017.49.
    Google Scholar Janssen et al., 2012 M. Janssen, Y. Charalabidis, A. Zuiderwijk
    Benefits, adoption barriers and myths of open data and open government Inform.
    Syst. Manage., 29 (4) (2012), pp. 258-268, 10.1080/10580530.2012.716740 View in
    ScopusGoogle Scholar Jeppesen et al., 2016 Jeppesen, J.H., Jacobsen, R.H., Jørgensen,
    R.N., Toftegaard, T.S., 2016. Towards data-driven precision agriculture using
    open data and open source software. In: CIGR-AgEng Conference. http://conferences.au.dk/cigr-2016/full-papers/.
    Google Scholar Jeppesen et al., 2017 J.H. Jeppesen, R.H. Jacobsen, R.N. Jørgensen,
    A. Halberg, T.S. Toftegaard Identification of high-variation fields based on open
    satellite imagery Adv. Anim. Biosci., 8 (2) (2017), pp. 388-393, 10.1017/S2040470017000693
    View PDFView articleGoogle Scholar Landsat, 0000 Landsat, http://landsat.usgs.gov/Landsat_Project_Statistics.php
    (accessed 27-April-2016). Google Scholar Mulla, 2013 D.J. Mulla Twenty five years
    of remote sensing in precision agriculture: key advances and remaining knowledge
    gaps Biosyst. Eng., 114 (4) (2013), pp. 358-371 View PDFView articleView in ScopusGoogle
    Scholar Murakami et al., 2007 E. Murakami, A.M. Saraiva, L.C.M. Ribeiro Jr., C.E.
    Cugnasca, A.R. Hirakawa, P.L.P. Correa An infrastructure for the development of
    distributed service-oriented information systems for precision agriculture Comput.
    Electron. Agric., 58 (1) (2007), pp. 37-48, 10.1016/j.compag.2006.12.010 View
    PDFView articleView in ScopusGoogle Scholar Nash et al., 2009 E. Nash, P. Korduan,
    R. Bill Applications of open geospatial web services in precision agriculture:
    a review Prec. Agric., 10 (6) (2009), pp. 546-560, 10.1007/s11119-009-9134-0 View
    in ScopusGoogle Scholar Nikkilä et al., 2010 R. Nikkilä, I. Seilonen, K. Koskinen
    Software architecture for farm management information systems in precision agriculture
    Comput. Electron. Agric., 70 (2) (2010), pp. 328-336, 10.1016/j.compag.2009.08.013
    View PDFView articleView in ScopusGoogle Scholar Oliver et al., 2010 Y. Oliver,
    M. Robertson, M. Wong Integrating farmer knowledge, precision agriculture tools,
    and crop simulation modelling to evaluate management options for poor-performing
    patches in cropping fields Eur. J. Agron., 32 (1) (2010), pp. 40-50 View PDFView
    articleView in ScopusGoogle Scholar Pierpaoli et al., 2013 E. Pierpaoli, G. Carli,
    E. Pignatti, M. Canavari Drivers of precision agriculture technologies adoption:
    a literature review Proc. Technol., 8 (2013), pp. 61-69, 10.1016/j.protcy.2013.11.010
    View PDFView articleView in ScopusGoogle Scholar Rains and Thomas, 2009 G.C. Rains,
    D.L. Thomas Precision Farming: An Introduction University of Georiga (2009) Google
    Scholar Seelan et al., 2003 S.K. Seelan, S. Laguette, G.M. Casady, G.A. Seielstad
    Remote sensing applications for precision agriculture: a learning community approach
    Rem. Sens. Environ., 88 (1–2) (2003), pp. 157-169, 10.1016/j.rse.2003.04.007 View
    PDFView articleView in ScopusGoogle Scholar Sentinel2L2A, 0000 Sentinel-2, https://sentinel.esa.int/web/sentinel/missions/sentinel-2/news/-/article/pilot-production-of-sentinel-2-l2a-products-over-europe
    (accessed 09-May-2017). Google Scholar Steinberger et al., 2009 G. Steinberger,
    M. Rothmund, H. Auernhammer Mobile farm equipment as a data source in an agricultural
    service architecture Comput. Electron. Agric., 65 (2) (2009), pp. 238-246, 10.1016/j.compag.2008.10.005
    View PDFView articleView in ScopusGoogle Scholar Steiniger and Bocher, 2009 S.
    Steiniger, E. Bocher An overview on current free and open source desktop GIS developments
    Int. J. Geogr. Inform. Sci., 23 (10) (2009), pp. 1345-1370, 10.1080/13658810802634956
    View in ScopusGoogle Scholar Stuart et al., 2014 D. Stuart, R.L. Schewe, M. Mcdermott
    Land use policy reducing nitrogen fertilizer application as a climate change mitigation
    strategy: understanding farmer decision-making and potential barriers to change
    in the US Land Use Policy, 36 (2014), pp. 210-218, 10.1016/j.landusepol.2013.08.011
    View PDFView articleView in ScopusGoogle Scholar Tan et al., 2015 X. Tan, L. Di,
    M. Deng, J. Fu, G. Shao, M. Gao, Z. Sun, X. Ye, Z. Sha, B. Jin Building an elastic
    parallel OGC web processing service on a cloud-based cluster: a case study of
    remote sensing data processing service Sustainability (Switzerland), 7 (10) (2015),
    pp. 14245-14258, 10.3390/su71014245 View in ScopusGoogle Scholar Tilman et al.,
    2011 D. Tilman, C. Balzer, J. Hill, B.L. Befort Global food demand and the sustainable
    intensification of agriculture Proc. Nat. Acad. Sci., 108 (50) (2011), pp. 20260-20264
    CrossRefView in ScopusGoogle Scholar Trimble, 0000 Trimble, https://agriculture.trimble.com/precision-ag/products/displays/
    (accessed 25-June-2017). Google Scholar Vickery, 2011 G. Vickery Review of recent
    studies on psi re-use and related market developments Inform. Econ. (2011) Google
    Scholar Wulder et al., 2012 M.A. Wulder, J.G. Masek, W.B. Cohen, T.R. Loveland,
    C.E. Woodcock Opening the archive: how free data has enabled the science and monitoring
    promise of Landsat Rem. Sens. Environ., 122 (2012), pp. 2-10, 10.1016/j.rse.2012.01.010
    View PDFView articleView in ScopusGoogle Scholar Zaks and Kucharik, 2011 D.P.M.
    Zaks, C.J. Kucharik Data and monitoring needs for a more ecological agriculture
    Environ. Res. Lett., 6 (1) (2011), p. 014017, 10.1088/1748-9326/6/1/014017 View
    in ScopusGoogle Scholar Cited by (26) BIM compatibility and its differentiation
    with interoperability challenges as an innovation factor 2020, Automation in Construction
    Citation Excerpt : BIM uptake therefore remains slow, much to the frustration
    of industry and government policy makers. Scholars from different disciplines
    report that some reasons for the slow adoption rate of information systems such
    as BIM and graphic information systems (GIS) are associated to compatibility [22,23]
    and also interoperability with software packages required for different tasks
    [24]. At a technical level, interoperability refers to the ability of a technology
    to exchange information, communicate and cooperate with other systems without
    major modification of their structure. Show abstract Developing practical techniques
    for quantitative assessment of ecosystem services on farmland 2019, Ecological
    Indicators Citation Excerpt : Nevertheless, if such complexities could be encompassed
    within an application, then planning ecosystem service enhancements within a sophisticated
    GIS tool may be the more valuable approach. However, to date, the uptake of sophisticated
    decision support and GIS tools by land managers and farmers has been limited and
    with respect to GIS this is largely confined to precision farming applications
    rather than bespoke environmental planning and management (Aubert et al., 2012;
    Fountas et al., 2015; Jeppesen et al., 2018; Kaloxylos et al., 2012; Rose et al.,
    2016; Sørensen et al., 2010). When there are two or more approaches to assessing
    ecosystem services, although they may have different purposes and contexts it
    is important to have some understanding of any differences between them with respect
    to the results they provide. Show abstract Global Navigation Satellite Systems
    as State-of-the-Art Solutions in Precision Agriculture: A Review of Studies Indexed
    in the Web of Science 2023, Agriculture (Switzerland) Methodology for Creating
    a Geographic Information System for Transport Infrastructure Facilities 2023,
    International Journal of Technology Truth in a sea of data: adoption and use of
    data search tools among researchers and journalists 2023, Information Communication
    and Society Factors Influencing the Use of Geospatial Technology with LiDAR for
    Road Design: Case of Malaysia 2022, Sustainability (Switzerland) View all citing
    articles on Scopus View Abstract © 2017 Elsevier B.V. All rights reserved. Recommended
    articles Digitalization and agricultural transformation in developing countries:
    Empirical evidence from Tanzania agriculture sector Smart Agricultural Technology,
    Volume 7, 2024, Article 100379 Felician Andrew Kitole, …, Jeniffer Kasanda Sesabo
    View PDF The gamma shape mixture model and influence of sample-unit size on estimation
    of tree diameter distributions: Forest modelling Computers and Electronics in
    Agriculture, Volume 144, 2018, pp. 190-198 Rafał Podlaski, …, Monika Żelezik View
    PDF Developing Faculty in Emerging Areas of Interdisciplinary Research The American
    Journal of Medicine, Volume 131, Issue 10, 2018, pp. 1257-1262 David L. Coleman,
    …, Patricia W. Finn View PDF Show 3 more articles Article Metrics Citations Citation
    Indexes: 26 Captures Readers: 147 View details About ScienceDirect Remote access
    Shopping cart Advertise Contact and support Terms and conditions Privacy policy
    Cookies are used by this site. Cookie settings | Your Privacy Choices All content
    on this site: Copyright © 2024 Elsevier B.V., its licensors, and contributors.
    All rights are reserved, including those for text and data mining, AI training,
    and similar technologies. For all open access content, the Creative Commons licensing
    terms apply."'
  inline_citation: '>'
  journal: Computers and Electronics in Agriculture
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: Open geospatial infrastructure for data management and analytics in interdisciplinary
    research
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
