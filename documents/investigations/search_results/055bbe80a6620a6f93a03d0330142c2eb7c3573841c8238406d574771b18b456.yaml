- analysis: '>'
  authors:
  - Chouikhi S.
  - Esseghir M.
  - Merghem-Boulahia L.
  citation_count: '0'
  description: The term Industrial Internet of Things (IIoT) was created to describe
    a specific area of the Internet of Things (IoT) that integrates information and
    communication technologies (ICTs) like cloud/edge computing, wireless sensor/actuator
    networks, and connected objects to enable and accelerate the development of Industry
    4.0. IIoT applications (e.g., smart manufacturing, remote control of industrial
    machinery, and critical system monitoring) have various levels of criticality
    and Quality-of-Service (QoS) requirements. However, the characteristics of data
    collected by interconnected devices complicate the task of guaranteeing the QoS
    requirements in terms of latency and reliability in addition to the huge amount
    of energy consumption. As a potential solution, edge computing offers additional
    powerful resources in the proximity of the IIoT devices. Hence, the required QoS
    can be achieved by offloading computation-intensive tasks to edge servers. Moreover,
    the offloading process needs to be optimized to take full advantage. Unlikely,
    conventional optimization methods are very complex to be applied in the IIoT context.
    To overcome this issue, we propose a computation offloading approach based on
    deep reinforcement learning (DRL) to minimize long-term energy consumption and
    maximize the number of tasks completed before their tolerant deadlines. We introduce
    a system with multiple agents to deal with the increasing dimension of the action
    space, where each IIoT device is represented by its own DRL model. The goal of
    the model is to maximize a flexible and long-term reward. In addition, the DRL
    models are trained in the cloud and make decisions online in the edge servers,
    allowing quick decision making by avoiding iterative online optimization procedures.
    The performance of the proposed approach is evaluated through simulation. The
    proposal shows promising results compared to other approaches.
  doi: 10.1109/JIOT.2023.3333044
  full_citation: '>'
  full_text: '>

    "This website utilizes technologies such as cookies to enable essential site functionality,
    as well as for analytics, personalization, and targeted advertising purposes.
    To learn more, view the following link: Privacy Policy Typesetting math: 84% IEEE.org
    IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account Personal
    Sign In Browse My Settings Help Access provided by: University of Nebraska - Lincoln
    Sign Out All Books Conferences Courses Journals & Magazines Standards Authors
    Citations ADVANCED SEARCH Journals & Magazines >IEEE Internet of Things Journal
    >Volume: 11 Issue: 7 Energy-Efficient Computation Offloading Based on Multiagent
    Deep Reinforcement Learning for Industrial Internet of Things Systems Publisher:
    IEEE Cite This PDF Samira Chouikhi; Moez Esseghir; Leila Merghem-Boulahia All
    Authors 101 Full Text Views Abstract Document Sections I. Introduction II. Related
    Work III. System Model and Problem Formulation IV. Multiagent Deep Q -Learning-Based
    Tasks’ Offloading V. Performance Evaluation Show Full Outline Authors Figures
    References Keywords Metrics Abstract: The term Industrial Internet of Things (IIoT)
    was created to describe a specific area of the Internet of Things (IoT) that integrates
    information and communication technologies (ICTs) like cloud/edge computing, wireless
    sensor/actuator networks, and connected objects to enable and accelerate the development
    of Industry 4.0. IIoT applications (e.g., smart manufacturing, remote control
    of industrial machinery, and critical system monitoring) have various levels of
    criticality and Quality-of-Service (QoS) requirements. However, the characteristics
    of data collected by interconnected devices complicate the task of guaranteeing
    the QoS requirements in terms of latency and reliability in addition to the huge
    amount of energy consumption. As a potential solution, edge computing offers additional
    powerful resources in the proximity of the IIoT devices. Hence, the required QoS
    can be achieved by offloading computation-intensive tasks to edge servers. Moreover,
    the offloading process needs to be optimized to take full advantage. Unlikely,
    conventional optimization methods are very complex to be applied in the IIoT context.
    To overcome this issue, we propose a computation offloading approach based on
    deep reinforcement learning (DRL) to minimize long-term energy consumption and
    maximize the number of tasks completed before their tolerant deadlines. We introduce
    a system with multiple agents to deal with the increasing dimension of the action
    space, where each IIoT device is represented by its own DRL model. The goal of
    the model is to maximize a flexible and long-term reward. In addition, the DRL
    models are trained in the cloud and make decisions online in the edge servers,
    allowing quick decision making by avoiding iterative online optimization procedures.
    The performance of the proposed approach is evaluated through simulation. The
    proposal shows promising results compared to other approaches. Published in: IEEE
    Internet of Things Journal ( Volume: 11, Issue: 7, 01 April 2024) Page(s): 12228
    - 12239 Date of Publication: 15 November 2023 ISSN Information: DOI: 10.1109/JIOT.2023.3333044
    Publisher: IEEE Funding Agency: SECTION I. Introduction In recent years, the Industrial
    Internet of Things (IIoT) [1] has emerged as a special branch of the Internet
    of Things (IoT) applied to industrial applications. Its typical applications include
    smart manufacturing, remote control of industrial machinery, and critical system
    monitoring and it is distinguished by industry standards for IoT device operation
    and connectivity. High levels of resilience, communication availability, massive
    data collection, security, accuracy, automation, and interoperability are just
    a few characteristics of Industrial IoT. Moreover, IIoT is used for complex task
    sharing, decision making based on collected data, and remote access to machinery.
    In general, IIoT applications have different criticality degrees and Quality-of-Service
    (QoS) requirements. For instance, critical control and monitoring applications,
    such as monitoring systems in nuclear plants, need a high level of QoS in terms
    of latency, security, and throughput to avoid hazardous incidents. Unfortunately,
    the use of wireless networks makes it more challenging to respect the specificities
    of each application and provide the required QoS. In fact, besides the issues
    with wireless communications (e.g., jitter, fading, security, and interferences),
    the volume, variety, and velocity of data generated by connected objects add more
    difficulties to the task of satisfying the different applications’ requirements.
    In addition to QoS, we consider the characteristics of the connected objects representing
    the core of the IIoT systems, such as sensors, actuators, cameras, etc. These
    objects are, in general, resource-limited (CPU, memory, battery, etc.). When focusing
    on these limitations, it seems that limited battery energy is one of the most
    serious issues. In addition, in the era of 5G and 6G with their enormous volume
    of connected objects, reducing energy consumption and green communication become
    essential for any IoT-based application [2], [3]. To face these issues, the most
    promising solution is to opt for a cloud-edge architecture and offload heavy computation
    tasks to cloud or edge servers with more powerful resources. Tasks’ offloading
    has been proven to offer the required QoS in terms of latency and reliability
    as well as to optimize the use of objects’ resources, especially energy. However,
    such a solution needs to define optimal offloading strategies that consider different
    criteria, such as QoS, energy consumption, available resources, and rental prices,
    to make the most of this solution and not worsen the situation. The main methods
    for optimal computation offloading exploit distributed artificial intelligence
    techniques [e.g., game theory and deep learning (DL)]. In this context, this article
    focuses on the proposition of a multiagent deep reinforcement learning (DRL)-based
    approach for the offloading of intensive computation tasks. The main purpose of
    the proposal is to conserve the system’s energy without compromising the execution
    of tasks. Hence, the successful completion of tasks before their predefined deadlines
    and the energy consumption are considered as the criteria for choosing an offloading
    strategy. The remainder of this article is organized as follows. In Section II,
    we overview some of the interesting approaches proposed in the context of computation
    tasks offloading. Section III introduces the system model and the problem formulation.
    In Section IV-A, we present the multiagent DRL-based approach. Section V provides
    the performance evaluation and the simulation results. Finally, Section VI concludes
    this article. SECTION II. Related Work In the literature, a wide range of researches
    has been dedicated to the optimization of computation offloading either for IoT
    or IIoT [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16],
    [17], [18], [19], [20], [21], [22], [23], [24], [25]. In [5], queuing theory is
    applied to investigate the offloading problem in a fog computing system. The authors
    try to determine the optimal offloading probability and the transit power that
    reduces energy consumption, execution latency, and payment cost. Chen et al. [6]
    studied stochastic-based task offloading in mobile-edge computing (MEC). The proposed
    approach minimizes energy consumption while ensuring average queue length. Then,
    they proposed an energy-efficient dynamic offloading algorithm. Mao et al. [7]
    proposed an offloading strategy for minimizing task execution cost in terms of
    execution time and task failure in a green MEC system with energy harvesting devices.
    Dinh et al. [8] aimed to minimize the total tasks’ execution latency and the mobile
    device’s energy consumption. Hence, the authors developed a computation offloading
    approach with a single mobile device. In this approach, all the offloading tasks
    are offloaded to the fog server. In [9], a cooperative and distributed computation
    offloading algorithm is proposed. The authors consider the data processing tasks
    and the mining tasks together in a blockchain-empowered IIoT system. The problem
    is formulated as a potential game. Hong et al. [10] investigated the multihop
    computation-offloading problem in an IIoT–edge–cloud computing model, and a game-based
    model is adopted to achieve QoS-aware computation offloading. The main goal of
    the game is to minimize each task’s computation time and energy consumption. However,
    the authors considered only the energy consumption of the IIoT devices and not
    that of edge servers or cloud servers when the computation task is offloaded.
    Zhao et al. [11] proposed a game-based approach to optimally offload computation
    tasks of industrial vehicles to intelligent devices of the industrial MEC. The
    proposal aims to optimize the system cost, including execution time, energy consumption,
    and resources’ rental prices. Jie et al. [12] developed an optimal resource allocation
    scheme for a fog-based IIoT environment, and a double-Stackelberg game is applied
    to represent the competition between the fog nodes while providing services for
    users using cloud resources. Yu et al. [13] studied the task type-based computation
    offloading algorithm that allows the implementation of a data-as-a-service platform.
    They distinguished between data-intensive tasks and CPU-intensive tasks. To make
    data-intensive tasks choose local computing and CPU-intensive tasks favor offload
    computing, they next combined the cost model of computation offloading with task
    type. In IIoT environments, the parameters of devices and wireless channels are
    dynamic and change over time. Hence, computation offloading approaches using traditional
    high-complexity optimization methods are not suitable for such environments. To
    overcome these issues, computation task offloading approaches have opted for machine-learning
    (ML) methods. A low-complexity approach was proposed in [14], where the authors
    applied a supervised DL method to minimize the total transmit power of IoT devices
    while satisfying the latency requirements of computation tasks. Additionally,
    deep transfer learning (DTL) is used in dynamic IoT systems to modify the neural
    network. DRL has been adopted as a solution for computation offloading scenarios
    with high-dimensional action spaces. In [15], a DRL-based online offloading (DROO)
    approach is proposed. This approach uses a deep neural network to decide the optimal
    offloading strategy. DROO divides the original optimization problem into two subproblems:
    a computation offloading subproblem and a resource allocation subproblem. A reinforcement
    learning (RL)-based offloading system for energy harvesting IoT devices is presented
    to choose the edge device and the offloading rate based on the battery level,
    the historical transmission rate to each edge device, and the anticipated collected
    energy [16]. Liu et al. [17] developed a vehicle-edge computing network architecture
    for tasks’ offloading. The authors use Q -learning and DRL-based to optimize the
    offloading policies and resource allocation while considering the computation
    tasks’ latencies. Ale et al. [18] developed a model-free DRL-based approach for
    computation offloading tasks to maximize the number of tasks completed before
    their deadlines and minimize energy consumption. In [19], a novel Blockchain-based
    DRL approach has been proposed. This proposal enables energy-aware task scheduling
    and offloading in a software-defined networking (SDN)-enabled IoT network to achieve
    low latency and energy efficiency. Tang et al. [20] proposed a dynamic framing
    offloading algorithm based on a double deep Q -network (DFO-DDQN) that aims to
    minimize the total delay and waiting time of tasks in a vehicular edge computing
    (VEC) context. In [14], [15], [16], [17], [18], [19], and [20], the approaches
    have all adopted a single-agent strategy. Consequently, the action space dimension
    may explode with the network size. Hence, multiagent DRL can be adopted to overcome
    the above issue. Ren et al. [21] proposed a DRL-based approach to minimize the
    long-term energy consumption of a system with multiple IIoT devices and multiple
    fog access points. The proposed approach adopts a multiagent DRL model to deal
    with the dimensionality of the action space. Shi et al. [22] used multiple unmanned
    aerial vehicles (UAVs) as MEC servers that allow IIoT devices to offload their
    computation tasks. To obtain the energy-efficient and low-complexity solution,
    the authors proposed a computation offloading multiagent deep Q -learning-based
    algorithm with stochastic prioritized replay (MDSPR). Feng et al. [23] have developed
    a framework for cooperative computation offloading and resource allocation in
    blockchain-enabled MEC systems. In the framework, the authors try to maximize
    the computation rate of MEC systems and the transaction throughput of blockchain
    systems. The offloading decisions, the power allocation, the block size, and the
    block interval are optimized. However, this article assumed that each base station
    only serves one mobile device which is not practical in an IIoT context. Deep
    meta RL-based offloading (DMRO) algorithm [24] combines the perceptive ability
    of DL, the decision-making ability of RL, and the rapid environment learning ability
    of meta-learning to find optimal offloading strategies in dynamic environments.
    The algorithm objective is to jointly minimize the delay and energy consumption
    of IoT devices. Zhang et al. [25] studied the problem of task offloading for mobile
    devices in a MEC environment. The authors proposed a meta reinforcement-DRL-based
    offloading (MR-DRO) algorithm that relies on DRL and meta-learning models to jointly
    optimize the response time and the energy consumption. Table I gives a summary
    comparison of the presented ML-based works in terms of objectives, ML techniques,
    and DRL strategies. TABLE I Summary Comparison of ML-Based Works When analyzing
    the presented approaches, we notice that the existing studies try either to minimize
    energy consumption while respecting the latency constraint or to minimize jointly
    the energy and the latency. However, neither of these objectives is flexible.
    On the one hand, the latency constraint may not always be satisfied, and this
    means the nonexistence of a solution for the optimization problem. On the other
    hand, jointly optimizing the energy consumption and the latency does not prioritize
    the tasks with imminent deadlines. For instance, the latency of a task with a
    faraway deadline may be minimized with the cost of another task missing its deadline.
    Even with the use of coefficients, there is no guarantee that the minimization
    of latency will lead to the successful completion of tasks before the deadline.
    Ale et al. [18] aimed to maximize the number of tasks successfully completed.
    However, they proposed a single-agent DRL model which raises the problem of scalability.
    In the context of computation offloading for the optimization of IIoT-based systems,
    we propose a DRL approach for energy-efficient QoS-aware computation offloading.
    The proposed solution uses deep Q -learning (DQL) to minimize the energy consumption
    of the system. In addition, the proposal tries to guarantee the QoS in terms of
    latency by maximizing the number of tasks completed within their deadlines. The
    key novelty of our proposal is that we opt for a flexible reward function where
    the completion of the task before its deadline is the criterion, with the energy
    consumption, for selecting an offloading strategy. Our contributions in this article
    are summarized as follows. To improve the QoS for IIoT, we propose to offload
    computation-intensive tasks to edge servers that offer additional powerful resources.
    We aim to minimize the long-term energy consumption of the system, as well as
    maximize the number of tasks that are successfully completed before their tolerant
    deadlines. Hence, we model the problem as a Markov decision process (MDP) and
    present a multiagent DRL-based approach, in which each IIoT device has its own
    DRL model. This allows us to deal with the dimensionality and complexity issues.
    We define a flexible reward function that combines the number of completed tasks
    and the energy consumption to overcome the nonsatisfaction of latency constraint
    that may lead to the nonexistence of a feasible solution. The selection of task
    completion over latency as a criterion for the offloading strategy decision allows
    our system to better deal with the problem of critical tasks missing their deadlines.
    Moreover, we aim to optimize the long-term reward and not the short-term reward.
    Finally, we evaluate the proposal via simulation. The obtained results show that
    the multiagent DRL with the flexible reward provides good performance in terms
    of energy consumption and completed tasks. SECTION III. System Model and Problem
    Formulation A. System Model We consider an IIoT-based system as shown in Fig.
    1. IIoT devices include all connected objects equipped with sensors, actuators,
    and smart meters. They range from complex industrial robots, machines, and tracks
    to tiny environmental sensors. They are connected to the edge servers either by
    communication low-power technologies, such as ZigBee and Bluetooth, or by Wi-Fi
    technology. The edge servers design devices with more powerful computation resources,
    including but not limited to tablets, smartphones, laptops, and desktops. In this
    article, we did not consider the mobility of edge servers. These latter communicate
    with the cloud over Wi-Fi, Ethernet, optic fiber, 4G, or 5G technologies. The
    computation tasks of IIoT devices can be executed locally or offloaded to the
    edge and cloud servers. The edge servers’ tasks can also be offloaded to the cloud,
    but this scenario is out of the scope of this article. Fig. 1. IIoT-based system.
    Show All At a time slot t , tasks from IIoT device n∈N(t)={1,…,N} can be executed
    locally or offloaded to the edge or cloud servers. Each edge server m∈M(t)={1,…,M}
    is defined by its queue capacity Q m and maximum CPU frequency f max m . We consider
    that the frequency space is discrete with 1-MHz steps. We assume that the devices
    can communicate directly with the edge servers. The IIoT devices can generate
    more than one task at a given time interval t . We define the set of tasks of
    each device n as J n (t)={ j n,1 , j n,2 ,…, j n, J n } , where j n,i =( Z n,i
    , C n,i , D max n,i ) represents the task i of the device n . The parameters Z
    n,i , C n,i , and D max n,i represent the data size, the total CPU cycles required
    by the task, and the maximum tolerant delay of the task, respectively. Further,
    to overcome the issue with the dimension of actions’ space when using a single
    agent, we propose the use of multiple control agents: one agent for each device.
    Our objective is to minimize the system energy consumption which means minimizing
    the energy consumption of IIoT devices, edge servers, and cloud servers for each
    task. At the same time, we want to maximize the number of tasks that respect their
    maximum tolerant delays. To reach our objective, we need to determine the energy
    and delay generated by each task execution. The key notations are listed in Table
    II. TABLE II Key Notations The total service delay d k n,i (t) of task j n,i includes
    the computation delay d C n,i,k , the end-to-end transmission delay d T n,i,k
    , and the waiting delay d W n,i,k d k n,i (t)= d C n,i,k + d T n,i,k + d W n,i,k
    . (1) View Source The total energy e k n,i (t) consumed to execute a task j n,i
    is determined as the sum of transmission energy e T n,i,k and computation energy
    e C n,i,k e k n,i (t)= e C n,i,k + e T n,i,k . (2) View Source 1) Computation
    Model: The computation delay of task j n,i depends on the processor frequency
    of the node k and the number of CPU cycles needed to compute the task. It is expressed
    as d C n,i,k = C n,i f k n,i (3) View Source where f k n,i represents the frequency
    reserved to execute task j n,i . We include the waiting delay in the computation
    model since it depends on the node where the task will be computed. To be executed,
    a task must wait until all tasks preceding it in the queue, including the currently
    running task, are executed. Hence, the waiting delay is calculated as follows:
    d W n,i,k = ∑ i=1 J k C ∗,i f k ∗,i + d k run (4) View Source where J k denotes
    the number of tasks in the queue of k preceding j n,i ; while d k run is the remaining
    time of the task currently running. C ∗,i and f k ∗,i represent the number of
    CPU cycles and the reserved frequency, respectively, of task i waiting in node
    k queue. We use the asterisk symbol * to design the device that owns task i .
    This computation energy represents the processor power consumption during the
    execution of the task. It depends on the computation frequency as well as the
    electronic components of the processor. It is determined as e C n,i,k = μ k C
    n,i (5) View Source with μ k = c k ( f k n,i ) 2 represents the energy consumption
    per CPU cycle. c k is a constant coefficient that characterizes the processor
    chip. 2) Transmission Model: Given, the characteristics of wireless communication,
    the transmission part significantly impacts the energy consumption and delay when
    offloading a task to a different node. Moreover, the end-to-end transmission delay
    determination will vary depending on where the task will be executed. In addition,
    it depends on the speed with which the device sends its data (i.e., transmission
    rate and data size), the distance between the sender and the receiver, the characteristics
    of the physical medium, the state of the transmission channel, etc. In this work,
    the devices use nonorthogonal multiple access (NOMA) to transfer data to the servers.
    We reserved C m subchannels for every edge m . Let s c m ,n be the signal of device
    n transmitted to server m on subchannel c m , the received signal is expressed
    as y c m = ∑ n∈N p c m ,n s c m ,n h c m ,n − − − − − − − − − − − √ + n c m (6)
    View Source where p c m ,n denotes the transmission power of device n , h c m
    ,n represents the channel coefficient of the c m th subchannel from the n th device
    to m th server, and n c m is the Gaussian noise at the server m . In uplink NOMA,
    the successive interference cancellation (SIC) receiver is carried out at each
    server to split the overlapped signals. We assume that before m detects the n
    th device’s signal, it decodes the prior n ′ th ( n ′ <n) devices’ signal first,
    then removes the signal from its observation in a successive manner. The interference
    symbol from other devices will be treated as noise. Therefore, the received SINR
    of device n on subchannel c m at server m is calculated by δ c m ,n = p c m ,n
    | h c m ,n | 2 ∑ N n ′ p c m , ′ | h c m , ′ | 2 + σ 2 c m (7) View Source where
    σ 2 c m denotes the noise power on the subchannel c m at server m . The achievable
    data rate R n,i of device n to server m is expressed as R m n,i = ∑ c m =1 C m
    B c m log 2 (1+ δ c m ,n ) (8) View Source with B c m the bandwidth of subchannel
    c m . Hence, the transmission delay can be expressed as d T n,i,k = ⎧ ⎩ ⎨ ⎪ ⎪
    ⎪ ⎪ ⎪ ⎪ Z n,i R k n,i + d P n,i , Z n,i R k n,i , 0, if k=cloud if k∈M(t) otherwise  (9)
    View Source with R k n,i and d P n,i denote the transmission rate and the propagation
    delay of task j n,i . It is worth mentioning that we neglect the propagation delay
    when the task is offloaded to an edge server since these servers are very close
    to the devices. When a task is executed locally, it is obvious that d T n,i equals
    0. The transmission energy consumption for task j n,i is determined by the time
    taken to put the data on the medium ( Z n,i / R n,i ) and the transmission power
    used to forward data. It is given by e T n,i,k ={ Z n,i R k n,i p k n,i ,k∈{cloud}∪M(t)
    0, otherwise  (10) View Source where p k n,i denotes the transmission power used
    by device n when transmitting task j n,i to server k . B. Problem Formulation
    In each time interval t , each agent n should make offloading decisions. We define
    I k n,i (t) as the decision binary variable, where I k i (t)=1 when task j n,i
    is decided to be executed at node k , and equals 0 otherwise. Our objective is
    to minimize energy consumption while maximizing the number of tasks that respect
    the latency constraints in the long term through optimizing the offloading decision
    vector I n (t)=( I n,i (t) ) j n,i ∈ J n (t) , with I n,i =( I k n,i (t) ) k∈{n,cloud}∪M(t)
    ; and the frequency vector f=( f n,i ) j n,i ∈ J n (t) , where f n,i =( f k n,i
    ) k∈{n,cloud}∪M(t) . Let e n,i (t)= ∑ k∈{n,cloud}∪M(t) I k n,i (t) e k n,i (t)
    View Source and d n,i (t)= ∑ k∈{n,cloud}∪M(t) I k n,i (t) d k n,i (t) View Source
    we can formulate the energy-efficient computation offloading problem as follows:
    min I,f ∑ t=1 T ∑ n=1 N ∑ j n,i ∈ J n (t) e n,i (t) (11) View Source s.t. C1:  I
    k n,i (t)∈{0,1} ∀t ∀k∈{n,cloud}∪M(t), ∀n∈N(t) ∀ j n,i ∈ J n (t) C2:  ∑ k∈{n,cloud}∪M(t)
    I k n,i =1 ∀n∈N(t) ∀ j n,i ∈ J n (t) C3:  d n,i (t)≤ D max n,i  ∀t ∀n∈N(t) ∀ j
    n,i ∈ J n (t) C4:  f k n,i (t)≤ f max k  ∀t ∀k∈{n,cloud}∪M(t), ∀n∈N(t) ∀ j n,i
    ∈ J n (t). View Source Constraint C1 shows that I k n,i is a binary variable.
    Constraint C2 indicates that a task can be executed by one and only one node.
    Constraint C3 ensures that the tasks are finished before their tolerable deadlines.
    Finally, the last constraint C4 guarantees that the CPU frequency used for a task
    does not exceed the maximal possible frequency. In this problem, we intend to
    assign each computation task to a node. Hence, it can be simplified as a generalized
    assignment problem (GAP). GAP is an NP-hard problem and therefore, this offloading
    optimization problem is also NP-hard. It is very complex to directly solve it
    and we cannot find a solution in polynomial time. Some exhaustive methods can
    give us an exact optimal solution. However, the complexity increases exponentially
    with the network size. In addition, even with centralized solving, global knowledge
    of the network needs to be communicated to the central server, which is not practical
    with the limited resources of the IIoT devices. Hence, we opt for a DQL approach
    to solve the problem of tasks’ offloading in a distributed and intelligent manner.
    SECTION IV. Multiagent Deep Q -Learning-Based Tasks’ Offloading In this section,
    we present our approach for tasks’ offloading problem using DQL where a DQL model
    is created for each IIoT device n . A. Markov Decision Process Modeling We formulate
    the problem as an MDP to maximize the expected rewards. A typical MDP is modeled
    as < S n , A n , F n , R n , S ′ n > . A state vector belonging to the state space
    S n should reflect the environment perception. We define this vector as s n (t)=(
    J n (t),M(t), R n (t)) , where m t k represents the state of server k∈{cloud}∪
    M t , and R n (t) denotes the data rate matrix of device n . The state of the
    server includes its queue state that consists of task-frequency pairs, where the
    information about the tasks that the server will execute, as well as the currently
    running task, and their recommended frequencies are mentioned. The maximum frequency
    is also included in the state. The action a n (t)∈ A n represents the action taken
    by agent n when the system’s current state is s n (t). It includes the index k
    and the recommended CPU frequency for all the tasks belonging to J n (t) . The
    probability distribution F n includes the transition probabilities p( s ′ n |
    s n , a n )=Pr{ s n (t)= s ′ n | s n (t−1)= s n , a n (t−1)= a n }. (12) View
    Source It is worth mentioning that the agents cannot predict the states, transitions,
    and rewards before making the decision. Therefore, we propose a model-free DQL
    model with an unknown transition probability distribution. The reward function
    reflects the immediate feedback for the actions from the environment. In our offloading
    problem, the objective is to reduce the total energy consumption while respecting
    the tasks’ deadlines. Then, the reward function will be inversely proportional
    to the energy consumption. Moreover, we subtract a penalty from the reward when
    the deadline constraint is not respected. This penalty depends on the total number
    of tasks that did not satisfy the latency constraint. Hence, the immediate reward
    function for each DQL model can be defined as r n (t)= ⎧ ⎩ ⎨ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ 1 ∑ j
    n,i ∈ J n (t) e n,i (t) , 1 ∑ j n,i ∈ J n (t) e n,i (t) −φp, if  d n,i ≤ D max
    n,i ∀ j n,i ∈ J n (t) if ∃ j n,i | d n,i > D max n,i  (13) View Source where φ
    represents the number of unsuccessful tasks of IIoT device n ; with φ= ∑ j n,i
    ∈ J n (t) (1− λ n,i (t)) . p is the penalty factor, and λ n,i (t) is defined in
    (14). Unfortunately, there are several issues with the problem formulation (11)
    from which we define the reward (13). The latency constraint may not always be
    respected which causes problems for the agent in dealing with the nonexistence
    of a feasible solution. Moreover, the computational complexity and cost increase
    exponentially with the number of variables and the system size. Therefore, we
    need to redesign the reward function to deal with these problems. Let d k n,i
    (t) be the total service delay of task j n,i running in node k∈{n,cloud}∪M(t)
    at time slot t ; to check if a task is successfully executed, we introduce the
    binary variable λ t n,i as λ n,i (t)={ 1, 0, if  d k n,i (t)≤ D max n,i otherwise.  (14)
    View Source The new flexible reward function combines the number of successful
    tasks and the energy consumption at time slot t r n (t)= ∑ j n,i ∈ J n (t) λ n,i
    (t) ∑ j n,i ∈ J n (t) e n,i (t) . (15) View Source We can add coefficients to
    reflect the impact of the number of successful tasks and the energy consumption
    on the reward function. These coefficients can be adjusted based on applications
    and tasks’ criticity. For instance, if a task is very critical, we choose a large
    coefficient for λ to indicate to the system that it is more important to finish
    this task within the deadline than to save energy. Our goal is to maximize the
    long-term reward rather than only the immediate reward. However, the learning
    agent can only know the latter. Thus, to evaluate the action on the long-term
    reward, we combine the immediate reward and the estimated rewards of the future
    steps. The long-term return is expressed as r n = r n (t)+γ r n (t+1)+ γ 2 r n
    (t+2)+…= ∑ h=0 ∞ γ h r n (t+h) (16) View Source where γ∈[0,1] denotes the discount
    factor or reward decay. The expected future rewards are estimated with a policy
    π n , which is a set of actions followed by the learning agent n . Our objective
    is to find the optimal policy π ∗ n that optimizes the action-value function Q
    ∗ ( s n , a n )= max π n E[ r n (t)| s n (t)= s n , a n (t)= a n , π n ]. (17)
    View Source The optimal policy π ∗ n satisfies the Bellman equation Q( s n , a
    n )=E[ r n +γ max a ′ n Q( s ′ n , a ′ n )| s ′ n , a ′ n ]. (18) View Source
    The optimal Q -value can be found by an iterative update of the Bellman equation.
    The Q -value improves and tends toward the optimal value as t→∞ . However, it
    is not practical to iterate ∞ times, which may result in diverging from finding
    an optimal policy. To overcome this issue, we use a deep neural network as a nonlinear
    function that approximates complex states, which reduces considerably the search
    space. B. Deep Q -Learning Model We use the DQL model to optimize the tasks’ offloading
    strategy. This model combines DL with Q -learning and allows us to solve complex
    problems by overcoming the problem of dimensionality in Q -learning. In this model,
    the deep neural network represents the input states, and the probabilities of
    all possible actions are computed at one time. The agents rely on these probabilities
    and on the interactions with the environment to select actions. We illustrate
    the proposed DRL model for IIoT device n in Fig. 2. The approximate function in
    the suggested model is a neural network or Q -network with parameters w n . Within
    this model, for each input state s n (t) , for each action a n (t) , the output
    of the deep Q network (DQN) is Q( s n (t), a n (t); w n (t)) , where w n (t) represents
    the weights of the DQN. In addition, the agent uses a replay memory D n to store
    the experience < s n (t), a n (t), r n (t), s ′ n (t)> each time s n (t) is updated
    to s ′ n (t) . In each training step, a mini-batch of size B is randomly sampled
    from D n to update the parameters of the DQN. Fig. 2. Offloading DRL model of
    agent n . Show All However, it is very challenging to train the model when combining
    a DQN with RL because of the varying feedback from the environment. Hence, fixation
    methods are added to overcome this issue and allow model convergence. Indeed,
    a target network, with weights w ^ n that remain constant during a specific number
    of episodes, is used. This network is a copy of the approximator neural network
    or the learning network. The learning network learns from the replay memory data.
    Every Z episodes, the weights w n are copied to w ^ n . Updating w n aims to minimize
    the loss function defined as the mean-square error between the target Q value
    and the current Q value and expressed as L( w n )=E[ ( y n −Q( s n , a n ; w n
    )) 2 ] (19) View Source where y n = r n +γ max a n Q ^ ( s n , a n ; w ^ n ) (20)
    View Source with Q ^ and w ^ n represent the Q value output and the weights of
    the target DQN of device n . C. Training Process In this section, we describe
    the whole process of the DRL model training as illustrated in Algorithm 1. Algorithm
    1 DQL-Based Tasks’ Offloading Initialize parameters: γ , α , ϵ , B , Z , D and
    episode number E for n←1 to N do Initialize action-value Q with random weights
    w n ; Initialize target action-value Q ^ with weights w ^ n ← w n ; end for for
    ep←1 to E do Initialize environment; Get initial state s ; for t←1 to T max do
    select action a n using ϵ -greedy policy; obtain reward r n and get next state
    s ′ n ; store experience < s n , a n , r n , s ′ n > in replay memory D n ; s
    n ← s ′ n ; sample a random mini-batch with B experiences from D n ; update w
    n ← w n −α ∇ w n L( w n ) ; each Z steps update w ^ n ← w n end for ϵ←ϵ−ζ ; end
    for 1) Initialization: The first stage in the training process is to initialize
    the different parameters: the learning rate α , the decay factor γ , the exploration
    factor ϵ , the batch size B , the total number of episodes E , and the number
    of steps Z after which the target weights are updated. The replay memory D that
    stores the experiences of the agent n is also initialized. Then, for each device
    n , we initialize the learning network and the target network with the same random
    weights. 2) Exploration: In the second stage, each agent n uses the ϵ -greedy
    method to acquire knowledge about the environment and build the training data
    set. ϵ -greedy is a known method to balance exploration and exploitation by selecting
    between exploration and exploitation randomly. ϵ represents the probability of
    choosing the exploration phase. This means that the agent takes actions based
    on the ϵ -greedy policy. Hence, agent n selects the best actions with a probability
    of 1−ϵ and randomly chooses other actions with a probability of ϵ . As the environment
    knowledge of the agent gradually evolves, ϵ decreases by ζ (ϵ>>ζ) to allow the
    exploitation of the learned acquired knowledge and the selection of the optimal
    policies. Each action a n , from the current state s n , generates a reward r
    n , and leads to a new state s ′ n . The tuple < s n (t), a n (t), r n (t), s
    ′ n (t)> is stored in the replay memory D n . 3) Learning: In the learning stage,
    the agent n selects a mini-batch of B experiences from the replay memory as input
    training samples. The model uses these samples to update the weights w_{n} of
    the current learning network, and after each Z steps to update the target network.
    Then, the model calculates and optimizes the loss as the errors between the outputs
    of the two networks according to (19). The loss can be minimized using back propagation
    methods, and then the parameters w_{n} are updated. In this work, the classic
    gradient descent method is used \\begin{equation*} w_{n}=w_{n}-\\alpha \\nabla
    _{w_{n}}L\\left ({w_{n}}\\right ) \\tag{21}\\end{equation*} View Source where
    \\alpha denotes the learning rate. We trained the proposed multiagent DRL-based
    approach in the cloud, while the offloading decisions are made in the edge servers.
    The whole process performs as follows. Once the training process finishes, the
    cloud sends all the DRL models to each edge server. Initially, each device sends
    its tasks’ information to an assigned edge server. The cloud center assigned each
    device to an edge server using the model proposed in [26] (Section IV). The edge
    servers communicate with each other to exchange information, and hence, each server
    collects the information required for the DRL agent of each IIoT device associated
    with this server. If a device n ’s task is decided to be offloaded to edge server
    m^{\\prime } other than the nearest server m , this task will be transferred from
    server m to server m^{\\prime } . When all the tasks’ offloading decisions are
    made, the data are uploaded and the tasks start to be executed. The exact process
    will then repeat itself. We illustrate these steps by an example in Fig. 3 to
    better explain how the DRL offloading is implemented. We consider three edge servers
    m_{1} , m_{2} , and m_{3} and seven IIoT devices. In the first step, the cloud
    trains the seven DRL models. The trained models are then sent to the three servers.
    As a third step, each device n=1, {\\dots },7 forwards the information about its
    tasks (i.e., the sets {\\mathcal {J}}_{n} , n=1,\\,\\ldots \\,,7) to the nearest
    server as shown in the Figure. Once a server receives this information, it collects
    information about the tasks of all devices from other servers (step 4). Then,
    it makes the decision of tasks belonging to the devices associated with it (step
    5). As step 6, the offloading decisions are sent to the devices which can then
    upload the subsequent data of each task to the server that will execute it. Finally,
    the servers execute the tasks. As mentioned above, a task can be offloaded to
    a server other than the one that made the offloading decision. for instance, in
    the example, IIoT device 3 is associated with server m_{2} ; however, its tasks
    j_{3,1} and j_{3,2} are decided to be offloaded to server m_{3} , while task j_{3,3}
    is offloaded to server m_{1} . The same applies to devices 5 and 7 whose tasks
    j_{5,1} , j_{7,1} , and j_{7,3} are decided to be executed by other servers. Fig.
    3. Example of the DRL-based computation offloading process. (a) Models’ training.
    (b) Decision making. (c) Tasks’ offloading. Show All D. Algorithm Analysis The
    training process of the N DRL models is performed by the cloud server with powerful
    computation resources. Hence, the computation complexity is restricted to the
    complexity of the decision-making process. Let L and H denote the number of hidden
    layers and the number of neurons in a hidden layer, respectively, the number of
    multiplications for the DQN of a device is \\mathcal {O}(H(MN+MF+MJ_{n}+(L-1)H))
    , where M is the number of edge server, N is the number of IIoT devices, J_{n}
    is the number of tasks of device n , and F represents the dimension of the frequency
    action space. The complexity of applying the activation function is \\mathcal
    {O}(L\\times H) . In addition, we have the complexity of computing the DQN output
    that equals \\mathcal {O}(H(NM+MJ_{n}+LH)) . Given the complexity \\mathcal {O}(MF)
    of selecting the maximal Q value, the total complexity is \\mathcal {O}(H(M(N+F+J_{n})+LH))
    . SECTION V. Performance Evaluation This section evaluates the proposal performance
    using Python programming language and processes. We ran the simulation several
    times to better evaluate the proposed model. The system parameters settings are
    shown in Table III. TABLE III Parameters Settings The number of IIoT devices or
    users is set to 10 and 150. Each user can generate multiple tasks with different
    characteristics. We use 3 and 20 edge servers for the 10 and 150 devices, respectively.
    We begin by illustrating the convergence of the reward with 150 devices. We can
    see from Fig. 4 that the model converges around 400 episodes. However, the curves
    are still swaying because of the random factors of the generated data such as
    the uncertainty of tasks and the dynamic environment. Fig. 4. Convergence of the
    reward. Show All To evaluate the performance of our proposal multiagent DRL in
    terms of energy consumption, we compare it with different RL-based approaches
    when the number of IIoT devices is set to 10: single-agent DRL [18], multiagent
    RL, MEC-based DRL scheme [22], and an exhaustive searching algorithm. The energy
    consumption results of one episode are shown in Fig. 5, while Table IV gives the
    execution time of the offloading decision-making process for a time slot. The
    exhaustive searching algorithm finds the optimal solution which generates the
    minimum energy consumption. However, as shown in the table, this approach generates
    a high cost in terms of execution time. Compared to other approaches, multiagent
    DRL performs better in terms of energy consumption even if it takes more time
    to find a near-optimal offloading strategy. The single-agent-based approach finds
    a solution that generates more energy because it is hard to fully explore the
    large action space. The multiagent RL performs better than single-agent DRL; however,
    multiagent DRL still outperforms it even with the quasi-same execution time. The
    MEC-based DRL scheme generates more amount of energy consumption, even with the
    use of multiagent DRL, because it focuses only on the consumption of IIoT devices
    and ignores the edge and cloud consumption when deciding the offloading strategy.
    In addition, it needs more time to converge since it considers also locations
    of IIoT devices and UAVs. TABLE IV Offloading Decision-Making Time for One Slot
    Fig. 5. Average accumulative energy consumption for ten IIoT devices over an episode.
    Show All For further comparison, our approach (mdrl), which aims to maximize the
    flexible and long-term reward, is compared to the single-agent DRL approach (sdrl)
    proposed in [18], MEC-based DRL scheme [22], and a basic multiagent DRL (drl)
    that uses the reward defined in (13). We compare the ratio of the completed tasks
    to the total number of tasks in Fig. 6, and the ratio of energy to complete tasks
    in Fig. 7, for two numbers of IIoT devices: 10 and 150 devices. As we can see
    from the two figures, the models converge around 5000 episodes and the proposed
    approach outperforms the three others. In addition, with 150 devices, the approach
    performs slightly better as it has more data to learn from. The basic multiagent
    DRL generates similar results as our proposal in terms of energy to completed
    tasks ratio. However, the number of successfully completed tasks is much lower
    than that of our proposal. This is due to the fact that this model can only control
    a part of the decision variables, and the computation cost increases exponentially
    as the search space increases. Contrarily, the MEC-based DRL scheme obtained near
    results in terms of completed tasks’ ratio; while it does not perform well in
    terms of energy to completed tasks ratio because of the impact of the total energy
    consumption. Fig. 6. Ratio of successfully completed tasks. Show All Fig. 7. Ratio
    of energy to successfully completed tasks (j/task). Show All In Fig. 8, we evaluated
    the ratio of successfully completed tasks versus the total number of tasks. We
    notice that this ratio increases with the increasing number of tasks. This behavior
    is the direct consequence of the fact that with a high number of tasks, the DL
    approaches have a bigger data set from which they can learn. Furthermore, our
    proposal performs better than the other approaches since it focuses on maximizing
    the number of successfully completed tasks rather than minimizing the execution
    time. The same figure shows the total energy consumption versus the number of
    tasks after the learning stage. From the figure, it is clear that the proposed
    multiagent approach outperforms the three other algorithms. The figure also strengthens
    the results obtained in the two preceding figures concerning the successfully
    completed tasks and the energy to completed tasks ratios. Fig. 8. Task successful
    ratio and the total energy consumption versus the number of computation tasks.
    Show All Furthermore, it is observed that with the increase in the number of tasks,
    energy consumption increases approximately linearly. This is because agents make
    offloading decisions upon each task’s arrival according to the maximum Q -value.
    After the convergence of the neural network, the action with the highest Q -value
    has a high probability of obtaining minimized energy consumption. Fig. 9 illustrates
    the behavior of the successful task completion ratio and the energy consumption
    when the transmit power of IIoT devices varies. Considering that the transmit
    power reduces the communication delays, the ratio of successfully completed tasks
    increases. However, this improvement in this ratio is coupled with a significant
    increase in energy consumption. In addition, we notice that with high power, the
    improvement in the completion ratio is slight in contrast with the increase in
    energy which is very considerable. Hence, we need to carefully select the optimal
    power that generates the best task completion/energy ratio. In our scenario, the
    optimal power interval is set between 21 and 26 W. Fig. 9. Task successful ratio
    and the total energy consumption versus the transmit power. Show All SECTION VI.
    Conclusion In this article, we investigated the problem of computation offloading
    based on edge computing for IIoT. We aim to minimize long-term energy consumption
    as well as maximize the number of tasks that are completed before their tolerant
    deadlines. We proposed to define a DRL model for each IIoT device to deal with
    the dimensionality and complexity issues. Moreover, we define a flexible reward
    function that combines the number of completed tasks and the energy consumption
    to overcome the nonsatisfaction of latency constraints that may lead to the nonexistence
    of a feasible solution. In addition to the reward flexibility, the proposed model
    allows us to maximize the long-term reward. The results obtained by simulation
    showed that the multiagent DRL with the flexible reward provides better performance
    compared to other approaches. For future work, we intend to extend our approach
    to include the case when a task can be partitioned into subtasks before its offloading
    to the edge servers. Authors Figures References Keywords Metrics More Like This
    Deep Reinforcement Learning for Time-Energy Tradeoff Online Offloading in MEC-Enabled
    Industrial Internet of Things IEEE Transactions on Network Science and Engineering
    Published: 2023 Quality of Service-Adaptive Industrial Internet of Things leveraging
    Edge Computing and Deep Reinforcement Learning : The Deep QoS-Adaptive Learning
    Environment (DeQALE) Architectu... 2022 17th Iberian Conference on Information
    Systems and Technologies (CISTI) Published: 2022 Show More IEEE Personal Account
    CHANGE USERNAME/PASSWORD Purchase Details PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS
    Profile Information COMMUNICATIONS PREFERENCES PROFESSION AND EDUCATION TECHNICAL
    INTERESTS Need Help? US & CANADA: +1 800 678 4333 WORLDWIDE: +1 732 981 0060 CONTACT
    & SUPPORT Follow About IEEE Xplore | Contact Us | Help | Accessibility | Terms
    of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | IEEE Privacy
    Policy A not-for-profit organization, IEEE is the world''s largest technical professional
    organization dedicated to advancing technology for the benefit of humanity. ©
    Copyright 2024 IEEE - All rights reserved."'
  inline_citation: '>'
  journal: IEEE Internet of Things Journal
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: Energy-Efficient Computation Offloading Based on Multiagent Deep Reinforcement
    Learning for Industrial Internet of Things Systems
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Chouikhi S.
  - Esseghir M.
  - Merghem-Boulahia L.
  citation_count: '0'
  description: The term ''Industrial Internet of Things'' (IIoT) was created to describe
    a specific area of the Internet of Things (IoT) that integrates Information and
    Communication Technologies (ICT) like cloud/edge computing, wireless sensor/actuator
    networks, connected objects, etc. to enable and accelerate the development of
    industry 4.0. Industry standards for IoT device connectivity and operation set
    it apart. A few of the properties of Industrial IoT include its high levels of
    resilience, communication availability, enormous data collecting, security, accuracy,
    automation, and interoperability. IIoT is also used for complicated task delegation,
    data-driven decision-making, and remote control of equipment. The IIoT applications
    also have various levels of criticality and quality of service requirements. Hence,
    it is very challenging to respect the specificity of each application and guarantee
    the required QoS. In this paper, we offload computationally demanding tasks to
    edge and cloud servers with stronger computational capabilities. Our suggested
    model tries to maximize the number of tasks completed before their tolerant deadlines
    while minimizing each IIoT device's energy consumption. Furthermore, we introduce
    a distributed cooperative game that enables each device to choose whether to offload
    its tasks or locally execute them based on task completion and energy consumption.
    We demonstrate the existence of the Nash equilibrium by demonstrating that the
    proposed game is a weighted potential game. We also propose a practical implementation
    of the game using a distributed mechanism. Finally, we evaluate the proposal using
    simulation to show the benefits of computation offloading in terms of latency
    and energy consumption.
  doi: 10.1109/IWCMC58020.2023.10183071
  full_citation: '>'
  full_text: '>

    "This website utilizes technologies such as cookies to enable essential site functionality,
    as well as for analytics, personalization, and targeted advertising purposes.
    To learn more, view the following link: Privacy Policy Loading [MathJax]/extensions/MathMenu.js
    IEEE.org IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account
    Personal Sign In Browse My Settings Help Access provided by: University of Nebraska
    - Lincoln Sign Out All Books Conferences Courses Journals & Magazines Standards
    Authors Citations ADVANCED SEARCH Conferences >2023 International Wireless C...
    Computation Offloading for Industrial Internet of Things: A Cooperative Approach
    Publisher: IEEE Cite This PDF Samira Chouikhi; Moez Esseghir; Leila Merghem-Boulahia
    All Authors 72 Full Text Views Abstract Document Sections I. Introduction II.
    System Model and Problem Formulation III. Cooperative Computation offloading Game
    IV. Performance Evaluation V. Conclusion Authors Figures References Keywords Metrics
    Abstract: The term ‘’Industrial Internet of Things’’ (IIoT) was created to describe
    a specific area of the Internet of Things (IoT) that integrates Information and
    Communication Technologies (ICT) like cloud/edge computing, wireless sensor/actuator
    networks, connected objects, etc. to enable and accelerate the development of
    industry 4.0. Industry standards for IoT device connectivity and operation set
    it apart. A few of the properties of Industrial IoT include its high levels of
    resilience, communication availability, enormous data collecting, security, accuracy,
    automation, and interoperability. IIoT is also used for complicated task delegation,
    data-driven decision-making, and remote control of equipment. The IIoT applications
    also have various levels of criticality and quality of service requirements. Hence,
    it is very challenging to respect the specificity of each application and guarantee
    the required QoS. In this paper, we offload computationally demanding tasks to
    edge and cloud servers with stronger computational capabilities. Our suggested
    model tries to maximize the number of tasks completed before their tolerant deadlines
    while minimizing each IIoT device’s energy consumption. Furthermore, we introduce
    a distributed cooperative game that enables each device to choose whether to offload
    its tasks or locally execute them based on task completion and energy consumption.
    We demonstrate the existence of the Nash equilibrium by demonstrating that the
    proposed game is a weighted potential game. We also propose a practical implementation
    of the game using a distributed mechanism. Finally, we evaluate the proposal using
    simulation to show the benefits of computation offloading in terms of latency
    and energy consumption. Published in: 2023 International Wireless Communications
    and Mobile Computing (IWCMC) Date of Conference: 19-23 June 2023 Date Added to
    IEEE Xplore: 21 July 2023 ISBN Information: ISSN Information: DOI: 10.1109/IWCMC58020.2023.10183071
    Publisher: IEEE Conference Location: Marrakesh, Morocco Funding Agency: SECTION
    I. Introduction Industrial Internet of Things (IIoT) [1] is the term coined for
    the specific segment of the Internet of Things (IoT) that enables and accelerates
    the evolution of industry 4.0 by integrating Information and Communication Technologies
    (ICT), such as cloud/edge computing, wireless sensor/actuator networks, connected
    objects, etc. It is distinguished by industry standards for IoT device operation
    and connectivity. High levels of resilience, communication availability, massive
    data collection, security, accuracy, automation, and interoperability are just
    a few characteristics of Industrial IoT. Moreover, IIoT is used for complex task
    sharing, decision-making based on collected data, and remote access to machinery.
    In addition, the IIoT applications have different criticality degrees and Quality
    of Service (QoS) requirements. For instance, critical control and monitoring applications,
    such as monitoring systems in nuclear plants, need a high level of QoS in terms
    of latency, security, and throughput to avoid hazardous incidents. Unfortunately,
    using wireless networks makes it more challenging to respect the specificities
    of each application and provide the required QoS. In fact, besides the issues
    with wireless communications (such as jitter, fading, security, and interferences),
    the volume, variety, and velocity of data generated by connected objects add more
    difficulties to the task of satisfying the different applications’ requirements.
    Hence, more dedicated protocols should be developed in order to satisfy the challenging
    requirements. In addition to QoS, we consider the characteristics of the connected
    objects representing the core of the IIoT systems such as sensors, actuators,
    cameras, etc. In fact, these objects are, in general, resource-limited (CPU, memory,
    battery, …). When focusing on these limitations, it seems that limited battery
    energy is the most serious issue. For instance, battery-powered sensor node IIoT
    devices are expected to be functional and reliable for a number of years, therefore
    energy efficiency is crucial. A promoting solution for all these issues is to
    opt for a cloud-edge architecture and offload heavy computation tasks to cloud
    or edge servers. Such a solution needs to define optimal offloading strategies
    that consider different criteria. The main methods used for optimal computation
    offloading exploit distributed artificial intelligence techniques (e.g., game
    theory, deep learning, …). The research community has recently shown a substantial
    interest in investigating novel techniques and methods for computation offloading
    in IoT and IIoT contexts. These techniques are developed with the intention of
    optimizing offloading strategies while taking into account different criteria
    for each application. Game theory, which has been shown to be effective, is one
    of the potential methods being used. With this method, the IIoT devices can fully
    or partially autonomously choose their offloading tactics. Jie et al. [2] improved
    real-time resource consumption and QoS by modeling user interactions with a fog
    agent as a recurrent Stackelberg game. To achieve efficient resource allocation
    in three-tier IoT fog networks, Zhang et al. [3] proposed a Stackelberg game-based
    joint optimization methodology. For a blockchain-powered IIoT context, Chen et
    al. [4] developed a multihop cooperative and distributed computation offloading
    technique that took into account both the data processing tasks and the mining
    tasks. The problem was formulated using a potential game model, which enables
    each device to make decisions on its own. The computation offloading problem was
    presented in [5] as a multi-hop problem in an IIoT edge-cloud computing system.
    The authors developed a game-theoretic strategy to ensure computation offloading
    with QoS awareness. The game goal is to minimize latency and energy usage required
    for task execution. In [6], a game theory-based approach was proposed to optimally
    offload partial computation tasks of industrial vehicles to many available intelligent
    devices of industrial Mobile Edge Computing (MEC). The latter reduces the system
    cost in terms of latency, energy use, and rental cost. Using a double-Stackelberg
    game, the authors of [7] suggested an optimal resource allocation system for a
    fog-based IIoT ecosystem where fog nodes compete to deliver services for data
    users. The task type-based computation offloading algorithm that enables the creation
    of a platform that provides data-as-a-service was studied by Yu et al. [8]. They
    made dataintensive tasks prefer local computing and CPU-intensive tasks prefer
    offload computing using a combined cost model. Analyzing the above papers, we
    notice that in most application scenarios, computation offloading algorithms are
    mainly aimed at minimizing energy consumption and reducing latency. However, these
    solutions are not flexible since they do not prioritize the tasks with imminent
    deadlines. Even if they use coefficients, they cannot guarantee that the tasks
    will finish their execution before their deadlines. Therefore, in the context
    of computation offloading, we choose a method in which, in addition to energy
    usage, the completion of a task is the primary criterion. In order to optimize
    Industrial Internet of Things environments, we suggest a distributed cooperative
    compute offloading game in this work. The main goal of the proposed game is to
    reduce energy consumption while guaranteeing the quality of service in terms of
    task completion prior to tolerant deadlines. We demonstrate that the sequential
    execution of the games by edge servers ensures that the offloading game reaches
    a Nash equilibrium. In addition, we suggest a practical offloading algorithm to
    demonstrate that the suggested game can be implemented in real scenarios. The
    rest of the paper is organized as follows. Section II introduces the system model
    and the problem formulation. In Section III, we formulate the cooperative game
    and present the offloading algorithm. Section IV provides the performance evaluation
    and the simulation results. Finally, Section V concludes the article. SECTION
    II. System Model and Problem Formulation Our IIoT system consists of a set of
    IIoT devices \\mathcal{N}= \\{1, \\ldots, N\\} belonging to the same organization,
    a set of edge servers \\mathcal{M}=\\{1, \\ldots, M\\} , and a cloud server. A
    device n generates one computation task jn at a time. The tasks are independent
    and can be executed locally or offloaded to the edge or cloud servers. In addition,
    task j_{n} \\in \\mathcal{J}=\\left\\{1, \\ldots, j_{n}, \\ldots, j_{N}\\right\\}
    is represented by a triplet \\left(D_{n}, C_{n}, T_{n}^{\\max}\\right) . The parameters
    D_{n}, C_{n} , and T_{n}^{\\max} represent the data size, the total CPU cycles
    required by the task, and the maximum tolerant delay of the task, respectively.
    We assume that an edge server m \\in \\mathcal{M} can execute up to Qm tasks simultaneously.
    Moreover, each IloT device can communicate directly with the edge servers. We
    define the offloading decision vector of n as: \\begin{equation*}x_{n}=\\left(x_{0}^{n},
    x_{1}^{n}, \\ldots, x_{m}^{n}, \\ldots, x_{M}^{n}, x_{M+1}^{n}\\right) \\tag{1}\\end{equation*}
    View Source where the binary decision variable x_{k}^{n}=1, k=0.. M+1 if the task
    is decided to be executed at node k with node 0 and node M+1 represents the device
    and the cloud server, respectively. These decision variables are subject to the
    following constraint: \\begin{equation*}\\sum_{k=0}^{M+1} x_{k}^{n}=1, \\forall
    n \\in \\mathcal{N} \\tag{2}\\end{equation*} View Source This constraint ensures
    that a task is executed by exactly one node. In addition to this constraint, we
    need to guarantee that the number of tasks assigned to an edge server does not
    exceed its capacity, which is expressed by: \\begin{equation*}\\sum_{n=1}^{N}
    x_{m}^{n} \\leq Q_{m}, \\forall m \\in \\mathcal{M} \\tag{3}\\end{equation*} View
    Source We aim to minimize the total energy consumed by each device en while respecting
    the maximum tolerant delay of the task jn. In order to achieve this goal, we calculate
    the computation energy, the transmission energy, the computation delay, and the
    transmission delay whether for the local computation, the edge computation, or
    the cloud computation: \\begin{equation*}e_{n}=\\sum_{k=0}^{M+1} x_{k}^{n} e_{n}^{k}
    \\tag{4}\\end{equation*} View Source \\begin{equation*}t_{n}=\\sum_{k=0}^{M+1}
    x_{k}^{n} t_{n}^{k} \\tag{5}\\end{equation*} View Source When a device decides
    that the task will be computed locally, the total energy equals the computation
    energy and is given by: \\begin{equation*}e_{n}^{0}=\\mu_{n} C_{j_{n}}, \\tag{6}\\end{equation*}
    View Source with \\mu_{n} represents the device energy consumption per CPU cycle.
    The total delay, in this case, is given by: \\begin{equation*}t_{n}^{0}=\\frac{C_{j_{n}}}{f_{n}}
    \\tag{7}\\end{equation*} View Source where fn represents the computation frequency
    of device n. When device n chooses to offload its task to an edge server or to
    the cloud server, the energy consumed by the device consists only of the transmission
    energy since the computation is the responsibility of the server. Hence, the total
    energy is: \\begin{equation*}e_{n}^{m}=e_{n}^{R}=\\frac{D_{j}}{r_{n}} p_{n}, \\forall
    m=1.. M+1 \\tag{8}\\end{equation*} View Source where rn and pn denote the data
    rate and the transmission power of device n, respectively. The total delay of
    the offloading decision is the sum of transmission delay t_nR and computation
    delay t_nC: \\begin{equation*}t_{n}^{m}=t_{n}^{C, m}+t_{n}^{R, m}, \\forall m=1..
    M+1 \\tag{9}\\end{equation*} View Source The transmission delay is expressed as:
    \\begin{equation*}t_{n}^{R, m}=\\frac{D_{j_{n}}}{r_{n}}+t_{n}^{P}, \\forall m=1..
    M+1 \\tag{10}\\end{equation*} View Source t_nP represents the propagation delay
    that equals 0 when the task is offloaded to edge servers since these servers are
    very close to the devices. To simplify, without loss of generality, we assume
    that the edge servers divide their computation frequency fm equally between the
    tasks executing simultaneously. Hence, the computation delay is given by: \\begin{equation*}t_{n}^{C,
    m}=\\frac{\\delta_{m} C_{j_{n}}}{f_{m}}, \\forall m=1.. M \\tag{11}\\end{equation*}
    View Source where \\delta_{m}=\\sum_{n=1}^{N} x_{m}^{n} is the number of tasks
    affected to server m. When the task is offloaded to the cloud server, the computation
    delay is: \\begin{equation*}t_{n}^{C, M+1}=\\frac{C_{j_{n}}}{f_{c, n}} \\tag{12}\\end{equation*}
    View Source where f_{c, n} is the computation frequency reserved to execute task
    jn at the cloud server. We formulate the energy-efficient computation offloading
    problem as a constrained multi-objective optimization problem: \\begin{equation*}\\min
    _{x} F=\\left[f_{n}\\right]_{n \\in \\mathcal{N}}=\\left[e_{n}\\right]_{n \\in
    \\mathcal{N}} \\tag{13}\\end{equation*} View Source s.t. \\begin{align*}C 1: x_{n}^{k}
    \\in\\{0,1\\}, \\forall n \\in \\mathcal{N}, \\forall k=0.. M+1 \\\\ C 2: \\sum_{k=0}^{M+1}
    x_{k}^{n}=1, \\forall n \\in \\mathcal{N} \\\\ C 3: \\sum_{n=1}^{N} x_{m}^{n}
    \\leq Q_{m}, \\forall m \\in \\mathcal{M} \\\\ C 4: t_{n} \\leq T_{n}^{\\text
    {max}}, \\forall n \\in \\mathcal{N}\\end{align*} View Source Constraint C1 shows
    that the decision variables are binary. C2 ensures that a task can be executed
    by one and only one node. The third constraint guarantees that we do not exceed
    the capacity of an edge server. The final constraint is given to ensure that a
    task finishes its execution before its deadline. This offloading multi-objective
    optimization problem is NPhard. Hence, we can opt for game theory to reduce the
    complexity and allow the distribution of the solving. In the next section, we
    propose a cooperative computation offloading game, where the IIoT devices cooperate
    to select their optimal strategies. SECTION III. Cooperative Computation offloading
    Game In the proposed cooperative game, each device can decide its optimal offloading
    strategy regarding the other devices’ strategies. As we see in the system model
    section, the execution time of a task depends on the number of tasks offloaded
    to the edge servers which means that a device strategy depends on all the other
    strategies. Hence, each IIoT device n select a strategy x_{n}^* that as: \\begin{equation*}x_{n}^*
    \\in \\arg \\max _{x_{n}} u_{n}\\left(x_{n}, x_{-n}\\right) \\tag{14}\\end{equation*}
    View Source where un denotes the utility to be maximized, and x_{-n} represents
    the strategies of all IIoT devices except n. A. Game Model and Nash Equilibrium
    The cooperative scheduling game \\mathcal{G} \\quad=\\lt \\mathcal{N},\\left(x_{n}\\right)_{n
    \\in \\mathcal{N}},\\left(u_{n}\\right)_{n \\in \\mathcal{N}}\\gt is described
    as follows: Players: The IloT devices Strategies: each IIoT device n determines
    the offloading strategy xn. utility function: u_{n}\\left(x_{n}, x_{-n}\\right)
    for each device n. Theoretically, we can define the utility function un as the
    objective function fn in equation (13) under the same constraints. However, constraint
    C4 may not be always satisfied. A solution is to combine the energy consumption
    and the total delay as the utility function. This solution is not flexible since
    it does not prioritize the tasks with imminent deadlines. Even if we use coefficients,
    we cannot guarantee that the task will be finished before its deadline. In our
    proposal, we opt for a flexible utility defined as: \\begin{equation*}u_{n}\\left(x_{n},
    x_{-n}\\right)=\\left(1-\\alpha_{n}\\right) \\sum_{k=0}^{M+1} x_{k}^{n} \\lambda_{n}^{k}-\\alpha_{n}
    \\frac{\\sum_{k=0}^{M+1} x_{k}^{n} e_{n}^{k}}{e_{\\max}} \\tag{15}\\end{equation*}
    View Source where \\lambda_{n}^{k} is a binary variable to check if a task is
    completed on time, with: \\begin{equation*}\\lambda_{n}^{k}= \\begin{cases}1 &
    \\text {if} t_{n}^{k} \\leq T_{n}^{\\max} \\\\ 0 & \\text {Otherwise.}\\end{cases}
    \\tag{16}\\end{equation*} View Source \\alpha_{n} \\in[0,1] is a coefficient set
    on a priority basis regarding the energy consumption and the completion of the
    task. The term e_{\\max} is added to normalize the energy consumption. At the
    beginning of the game, player n selects a strategy xn. When he finds another strategy
    x_{n}^{\\prime} with better utility, he chooses the new strategy. The players
    improve their strategies one by one, which means that only one player changes
    his strategy while the other players maintain their old strategies. Using this
    strategy improvement mechanism, we can introduce the following theorem. Theorem
    1.Given any random initial strategies of players, the game \\mathcal{G} can reach
    a Nash Equilibrium through finite strategy improvements To prove this theorem,
    we only need to prove that \\mathcal{G} is a weighted potential game [9]. Definition
    1.Let N be the number of players, \\mathcal{X} the set of action profiles over
    the action sets \\mathcal{X}_{n} of each player n, and u be the payoff function.
    A game \\mathcal{G}=\\left(N, \\mathcal{X}=\\mathcal{X}_{1} \\times \\ldots \\times\\right.
    \\left.\\mathcal{X}_{N}, u: \\mathcal{X} \\rightarrow \\mathbb{R}^{N}\\right)
    is weighted potential game if there is a function \\Phi: \\mathcal{X} \\rightarrow
    \\mathbb{R} and a vector w \\in \\mathbb{R}_{+}^{N} such that \\forall n, \\forall
    x_{-n}, \\forall x_{n}, x_{n}^{\\prime} \\in \\mathcal{X}_{N} \\begin{equation*}\\Phi\\left(x_{n},
    x_{-n}\\right)-\\Phi\\left(x_{n}^{\\prime}, x_{-n}\\right)=w_{n}\\left(u_{n}\\left(x_{n},
    x_{-n}\\right)-u_{n}\\left(x_{n}^{\\prime}, x_{-n}\\right)\\right)\\end{equation*}
    View Source Proof.To prove that \\mathcal{G} is a weighted potential game, we
    need first to find a potential function that represents this game. Then we prove
    that when player n switches from action x to action x^{\\prime} , the change in
    the potential equals the change in the utility of that player multiplied by a
    weight. Since we mentioned in the system model section that the IloT devices belong
    to the same organization, it is beneficial for this organization to minimize the
    global energy consumption of all the IIoT devices while maximizing the number
    of total tasks completed on time instead of considering the IloT devices one by
    one. Thus, we can define a potential function as: \\begin{equation*}\\Phi\\left(x_{n},
    x_{-n}\\right)=\\frac{1}{J} \\sum_{n=1}^{N} \\sum_{k=0}^{M+1}\\left(1-\\alpha_{n}\\right)
    x_{k}^{n} \\lambda_{n}^{k}-\\frac{1}{J} \\sum_{n=1}^{N} \\frac{\\sum_{k=0}^{M+1}
    \\alpha_{n} x_{k}^{n} e_{n}^{k}}{e_{\\max}}\\tag{17}\\end{equation*} View Source
    where J is the total number of tasks used to normalize the profit from completing
    tasks and energy consumption. The coefficient \\alpha \\in[0,1] reflects the preference
    priority of the organization regarding each task. Given the system, we can distinguish
    four possible improvement moves: local/edge, local/cloud, edge/cloud, and edge/edge.
    We need to prove that the change in the potential function equals a weighted change
    in the utility for each case. Local/edge: Player n changes his strategy from local
    computing (i.e., x_{0}=1 \\wedge x_{k}=0, \\forall k=1.. M+1 ) to edge computing
    (i.e., x_{m}=1 \\wedge x_{k}=0, \\forall k \\in 0, M+1 \\cup \\mathcal{M} \\backslash
    m ). The difference is calculated as shown by equation (18). The same calculation
    can be applied if the player changes his strategy from edge computing to local
    computing. This shows that this improvement move holds the definition of a weighted
    potential game. Moreover, the proof is the same for the remaining three improvement
    moves (i.e., local/cloud, edge/cloud, and edge/edge). Therefore, the cooperative
    offloading game \\mathcal{G} is a weighted potential game. Furthermore, given
    the sequential change of strategies and the finite number of feasible strategies,
    the game terminates at an equilibrium point [9] B. Computation Offloading Algorithm
    As the game is cooperative, as was already said, the IloT devices must share certain
    data. We must minimize this information interchange as much as we can because
    we believe it to be energy-intensive. We propose to exchange only two vectors:
    the vector \\delta=\\left(\\delta_{1}, \\ldots, \\delta_{m}, \\ldots, \\delta_{M}\\right)
    with \\delta_{m} the number of task offloaded to edge server m as defined in (11).
    The second vector is \\sigma=\\sigma_{1}, \\ldots, \\sigma_{n}, \\ldots, \\sigma_{N}
    , with \\sigma_{n}=1 if device n improves its strategy in the current iteration.
    In addition to these vectors, the devices need some information about the edge
    servers’ computation frequencies, as well as the cloud frequency reserved for
    a task. The algorithm performs as follows: The cloud server and the edge servers
    send, respectively, fc and fm to all the devices; Each device n chooses an arbitrary
    strategy xn; The edge server with the small ID initiates the game by initializing
    vectors \\delta and \\sigma , sorting the IloT devices in list L with its ID as
    the last node in the list). Then, it sends them to the first device; When device
    n receive the vectors and the list L, it will search for a strategy that increases
    its utility; If it is the case, n selects this strategy, updates \\delta and \\sigma
    . Then, it forwarded them with the list to the next device; The last device in
    the list sends the vectors to the game initiator, When the edge server receives
    the vectors, it will check \\sigma , if \\sigma_{n}=0, \\forall n \\in \\mathcal{N}
    , the server sends a game-over message to all the devices. Else, it resets \\sigma
    , resorts the devices in a new list, and a new iteration begins; If device n receives
    a game-over message, it adapts its last strategy as the optimal strategy. Algorithm
    1 shows the pseudo-code of the cooperative computation offloading game. Table
    I The Parameters Settings SECTION IV. Performance Evaluation In this section,
    we present the simulation results generated by the implementation of the proposed
    model in Python. We run the simulation at least 50 times to better evaluate the
    proposed model. The system parameters settings are shown in table I. In order
    to analyze how the weights \\alpha_{n} affect the energy consumption and the completion
    of tasks while performing the cooperative offloading algorithm, the energy consumption
    and the number of tasks completed on time are compared by changing their values.
    In this simulation and to simplify without loss of generality, we assume that
    \\alpha_{n}=\\alpha, \\forall n \\in \\mathcal{N} . We begin by evaluating the
    system energy expenditure while varying the number of IIoT devices. We set \\alpha
    to 0.75,0.5 , and 0.25. From Figure 1, we can observe that when we decrease the
    value of \\alpha , the energy consumption increases. The gap between the three
    scenarios becomes more significant with the increase in the number of IloT devices.
    This result is obvious as the system prioritizes the completion of tasks over
    the energy consumption when we decrease the value of \\alpha . This is illustrated
    by Figure 2 which gives the ratio of tasks completed on time to the total number
    of tasks. For instance, when the number of devices equals 50, we can achieve the
    completion on time of all the tasks. With the increasing number of devices, the
    difference between the achieved results of the three values of \\alpha is very
    remarkable. \\begin{align*} \\Phi\\left(x_{n}, x_{-n}\\right)-\\Phi\\left(x_{n}^{\\prime},
    x_{-n}\\right) & =\\left[\\frac{1}{J}\\left(\\left(1-\\alpha_{n}\\right) \\lambda_{n}^{0}+\\sum_{i
    \\in \\mathcal{N} \\backslash n} \\sum_{k=0}^{M+1}\\left(1-\\alpha_{i}\\right)
    x_{k}^{i} \\lambda_{i}^{k}\\right)-\\frac{1}{J. e_{\\max}}\\left(\\alpha_{n} e_{n}^{0}+\\sum_{i
    \\in \\mathcal{N} \\backslash n} \\sum_{k=0}^{M+1} \\alpha_{i} x_{k}^{i} e_{i}^{k}\\right)\\right]
    \\\\ & -\\left[\\frac{1}{J}\\left(\\left(1-\\alpha_{n}\\right) \\lambda_{n}^{m}+\\sum_{i
    \\in \\mathcal{N} \\backslash n} \\sum_{k=0}^{M+1}\\left(1-\\alpha_{i}\\right)
    x_{k}^{i} \\lambda_{i}^{k}\\right)-\\frac{1}{J \\cdot e_{\\max}}\\left(\\alpha_{n}
    e_{n}^{m}+\\sum_{i \\in \\mathcal{N} \\backslash n} \\sum_{k=0}^{M+1} \\alpha_{i}
    x_{k}^{i} e_{i}^{k}\\right)\\right] \\\\ & =\\left[\\frac{1-\\alpha_{n}}{J} \\lambda_{n}^{0}-\\frac{\\alpha_{n}}{J
    \\cdot e_{\\max}} e_{n}^{0}\\right]-\\left[\\frac{1-\\alpha_{n}}{J} \\lambda_{n}^{m}-\\frac{\\alpha_{n}}{J
    \\cdot e_{\\max}} e_{n}^{m}\\right] \\\\ & =\\frac{1}{J}\\left[\\left(\\left(1-\\alpha_{n}\\right)
    \\lambda_{n}^{0}-\\alpha_{n} e_{n}^{0}\\right)-\\left(\\left(1-\\alpha_{n}\\right)
    \\lambda_{n}^{m}-\\alpha_{n} e_{n}^{m}\\right)\\right] \\\\ & =\\frac{1}{J}\\left(\\left(u_{n}\\left(x_{n},
    x_{-n}\\right)-u_{n}\\left(x_{n}^{\\prime}, x_{-n}\\right)\\right)\\right. \\tag{18}\\end{align*}
    View Source SECTION Algorithm 1: Cooperative offloading Algorithm Phase 1:Initialization
    for m=1.. M+1 do send fm to \\forall n \\in \\mathcal{N} end for for \\forall
    n \\in \\mathcal{N} do x_n=\\operatorname{random}() ; end for Initialize \\delta,
    \\sigma , and L by server s ; Phase 2:Offloading Game repeat s sends \\delta,
    \\sigma , and L to L. f i r s t ; for \\forall n \\in \\mathcal{N} do \\quad receive
    \\delta, \\sigma , and L if \\exists x_{n}^{\\prime} \\mid u\\left(x_{n}, x_{-n}\\right)\\lt
    u\\left(x_{n}^{\\prime}, x_{-n}\\right) then \\quad x_{n}=x_{n}^{\\prime} ; \\quad
    \\sigma= update \\left(\\sigma_{n}=1\\right) ; \\quad update \\delta ; end if
    send \\delta, \\sigma , and L to L. n e x t ; end for if server s receives the
    vectors then check \\sigma if \\exists n \\in \\mathcal{N} \\mid \\sigma_{n}==1
    then \\quad \\sigma= reset (0) ; resort L ; else game-over = True; end if end
    if until game-over == True s send game-over to \\forall n \\in \\mathcal{N} for
    \\forall n \\in \\mathcal{N} do if receive game-over then x_{n}^*=x_{n} ; end
    if end for Fig. 1. Impact of \\alpha on the system energy consumption Show All
    We then compare our proposal to the existing algorithm FCFI [5]. This algorithm
    defines the utility function as a weighted sum of the execution delay and the
    energy consumption. We set \\alpha to 0.5 for this comparison. We first compare
    the performance gain which is the ratio of the system cost for locally computing
    all the tasks to the system cost generated by the algorithm. Figure 3 shows that
    the cooperative offloading algorithm outperforms FCFI algorithm. To understand
    from where the difference between the two algorithms’ results comes, we measure
    the ratio of the energy consumed by the algorithm itself to the total system energy
    consumption. This ratio is illustrated by Figure 4 where it is clear that FCFI
    algorithm generates a high energy cost compared to the cooperative algorithm.
    Fig. 2. Impact of \\alpha on the ratio of tasks completed on time Show All Fig.
    3. Performance gain versus the number of IIoT devices Show All Fig. 4. Ratio of
    cooperative game cost to system cost in terms of energy consumption Show All SECTION
    V. Conclusion In this paper, we studied the problem of computationintensive tasks’
    offloading in IIoT environments. We opt for cloud-edge-device architecture to
    optimize energy consumption while respecting the tolerant deadlines of completion
    of tasks’ computation. After giving the problem formulation, we proposed a distributed
    cooperative offloading game, where the offloading strategies are determined by
    the IIoT devices. When a device makes a decision about its strategy, it considers
    the energy consumption and the completion of the task We also introduced a distributed
    algorithm, where the devices improve their strategies sequentially. The algorithm
    represents the implementation of the game that applies in practice. The performance
    of the proposed approach is evaluated through simulation, and the proposed game
    shows good results. For future work, we intend to extend our approach to include
    cases when some tasks are dependent on each other. ACKNOWLEDGMENT This work is
    partly financed by the Grand-Est region, France, and the European Regional Development
    Fund (ERDF) under the EnerQoS project. Authors Figures References Keywords Metrics
    More Like This Compromises between energy consumption and quality of service metrics
    in wireless sensor networks with mobile sink and cluster based routing protocols
    2017 International Conference on Internet of Things, Embedded Systems and Communications
    (IINTEC) Published: 2017 Impact of Sink Mobility on Quality of Service Performance
    and Energy Consumption in Wireless Sensor Network with Cluster Based Routing Protocols
    2017 IEEE/ACS 14th International Conference on Computer Systems and Applications
    (AICCSA) Published: 2017 Show More IEEE Personal Account CHANGE USERNAME/PASSWORD
    Purchase Details PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS Profile Information
    COMMUNICATIONS PREFERENCES PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help?
    US & CANADA: +1 800 678 4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow
    About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination
    Policy | IEEE Ethics Reporting | Sitemap | IEEE Privacy Policy A not-for-profit
    organization, IEEE is the world''s largest technical professional organization
    dedicated to advancing technology for the benefit of humanity. © Copyright 2024
    IEEE - All rights reserved."'
  inline_citation: '>'
  journal: 2023 International Wireless Communications and Mobile Computing, IWCMC
    2023
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: 'Computation Offloading for Industrial Internet of Things: A Cooperative
    Approach'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Reuter C.
  - Haunschild J.
  - Hollick M.
  - Mühlhäuser M.
  - Vogt J.
  - Kreutzer M.
  citation_count: '2'
  description: The growth of cities continues to be a global megatrend. As more and
    more people live in urban areas and urban services and infrastructures are under
    growing strain, technologies are increasingly being researched and used to make
    city life more efficient and comfortable. As a result, so-called “Smart Cities”
    have complex IT infrastructures and cyber-physical systems such as sensor/actuator
    networks for the general population and are developing worldwide. Urban infrastructure
    must be secured against attacks, ensuring reliable and resilient services for
    citizens as well as privacy and data security. This paper introduces selected
    challenges faced by infrastructure providers, citizens and decision-makers in
    handling attacks aimed at information and communication technologies (ICT) of
    urban infrastructures and presents current research avenues for tackling cyberattacks
    and for developing tools for creating, portraying and disseminating actionable
    information as one important response to security challenges. It then presents
    findings from a representative survey conducted in Germany (N=1091) on the experiences
    and perceptions of citizens concerning the relevance of cyberattacks will be presented.
  doi: 10.18420/muc2020-ws117-408
  full_citation: '>'
  full_text: '>

    "SEARCH DISCOVER STATISTICS DEUTSCH Log In Home Fachbereiche Mensch-Computer-Interaktion
    (MCI) Mensch und Computer Mensch und Computer 2020 Workshopband MuC 2020 Towards
    Secure Urban Infrastructures: Cyber Security Challenges for Information and Communication
    Technology in Smart Cities Workshopbeitrag Towards Secure Urban Infrastructures:
    Cyber Security Challenges for Information and Communication Technology in Smart
    Cities CSV RIS BibTeX No Thumbnail Available Document type Text/Workshop Paper
    Files muc2020-ws-408.pdf (640.1 KB) Date 2020 Authors Reuter, Christian Haunschild,
    Jasmin Hollick, Matthias Mühlhäuser, Max Vogt, Joachim Kreutzer, Michael Source
    Mensch und Computer 2020 - Workshopband MCI-WS12: 7. Workshop Mensch-Maschine-Interaktion
    in sicherheitskritischen Systemen Publisher Gesellschaft für Informatik e.V. Abstract
    The growth of cities continues to be a global megatrend. As more and more people
    live in urban areas and urban services and infrastructures are under growing strain,
    technologies are increasingly being researched and used to make city life more
    efficient and comfortable. As a result, so-called “Smart Cities” have complex
    IT infrastructures and cyber-physical systems such as sensor/actuator networks
    for the general population and are developing worldwide. Urban infrastructure
    must be secured against attacks, ensuring reliable and resilient services for
    citizens as well as privacy and data security. This paper introduces selected
    challenges faced by infrastructure providers, citizens and decision-makers in
    handling attacks aimed at information and communication technologies (ICT) of
    urban infrastructures and presents current research avenues for tackling cyberattacks
    and for developing tools for creating, portraying and disseminating actiona-ble
    information as one important response to security challenges. It then presents
    findings from a representative survey conducted in Germany (N=1091) on the experiences
    and perceptions of citizens concerning the relevance of cyberat-tacks will be
    presented. Full Reference BibTeX Reuter, Christian; Haunschild, Jasmin; Hollick,
    Matthias; Mühlhäuser, Max; Vogt, Joachim; Kreutzer, Michael (2020): Towards Secure
    Urban Infrastructures: Cyber Security Challenges for Information and Communication
    Technology in Smart Cities. Mensch und Computer 2020 - Workshopband. DOI: 10.18420/muc2020-ws117-408.
    Bonn: Gesellschaft für Informatik e.V.. MCI-WS12: 7. Workshop Mensch-Maschine-Interaktion
    in sicherheitskritischen Systemen. Magdeburg. 6.-9. September 2020 Keywords Urban
    infrastructure , Cybersecurity , Smart City , IoT DOI 10.18420/muc2020-ws117-408
    Collections Workshopband MuC 2020 Full item page GI Magazines .INF Business &
    Information Systems Engineering - The International Journal of WIRTSCHAFTSINFORMATIK
    Datenbank Spektrum Enterprise Modelling and Information Systems Architectures
    (EMISAJ) i-com - Journal of Interactive Media Informatische Bildung in Schulen
    (IBiS) it - Information Technology Journal of Integrative Bioinformatics KI -
    Künstliche Intelligenz Wirtschaftsinformatik und Management Lecture Notes in Informatics
    Dissertations Proceedings Seminars Thematics About Us What is the Digital Library?
    Frequently asked Questions & Support Report Errors and give Feedback (Content-)Overview
    New Features Imprint Privacy policy Cookie settings ©  Gesellschaft für Informatik
    e.V. We collect and process your personal information for the following purposes:
    Authentication, Preferences, Acknowledgement and Statistics. Customize DeclineThat''s
    ok"'
  inline_citation: '>'
  journal: Lecture Notes in Informatics (LNI), Proceedings - Series of the Gesellschaft
    fur Informatik (GI)
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: 'Towards Secure Urban Infrastructures: Cyber Security Challenges for Information
    and Communication Technology in Smart Cities'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Pavlovic M.
  - Bier H.
  - Pillan M.
  citation_count: '0'
  description: Ambient User Experience (Ambient UX) is a conceptual framework providing
    a strategy for design processes that target cyber-physical spaces. Such design
    processes interface Wireless Sensor-Actuator Networks (WSAN), Artificial Intelligence
    (AI), and physically built environments. For managing the complexity of such design
    processes and ensuring the development of a design facilitating users’ satisfaction,
    design approaches focused on experience and user activities linked to bio-cyber-physical
    feedback loops are needed. This paper points out how Ambient UX supports decision-making
    in a design process. It outlines the importance of mapping user experiences for
    cyber-physically enhanced environments by discussing design practices that can
    support this activity and presenting a representative case study implemented with
    students at TU Delft.
  doi: 10.7480/spool.2020.3.5490
  full_citation: '>'
  full_text: '>

    "SPOOL CURRENT ARCHIVES THREADS ABOUT ANNOUNCEMENTS SEARCH Register Login / Archives
    / Vol. 7 No. 3: Cyber-physical Architecture #3 / Articles Ambient UX for Cyber-Physical
    Spaces Milica Pavlovic KU Leuven http://orcid.org/0000-0002-6693-1233 Henriette
    Bier Delft University of Technology http://orcid.org/0000-0003-4652-8751 Margherita
    Pillan Politecnico di Milano http://orcid.org/0000-0002-4157-4305 Download PDF
    DOI: https://doi.org/10.7480/spool.2020.3.5490 Abstract Ambient User Experience
    (Ambient UX) is a conceptual framework providing a strategy for design processes
    that target cyber-physical spaces. Such design processes interface Wireless Sensor-Actuator
    Networks (WSAN), Artificial Intelligence (AI), and physically built environments.
    For managing the complexity of such design processes and ensuring the development
    of a design facilitating users’ satisfaction, design approaches focused on experience
    and user activities linked to bio-cyber-physical feedback loops are needed. This
    paper points out how Ambient UX supports decision-making in a design process.  It
    outlines the importance of mapping user experiences for cyber-physically enhanced
    environments by discussing design practices that can support this activity and
    presenting a representative case study implemented with students at TU Delft.    How
    to Cite Pavlovic, M., Bier, H., & Pillan, M. (2021). Ambient UX for Cyber-Physical
    Spaces. SPOOL, 7(3), 27–36. https://doi.org/10.7480/spool.2020.3.5490 More Citation
    Formats Published 2021-02-14 Issue Vol. 7 No. 3: Cyber-physical Architecture #3
    Section Articles Categories Cyber-physical Architecture License Copyright (c)
    2020 SPOOL This work is licensed under a Creative Commons Attribution 4.0 International
    License. Plaudit References Aarts, E., & Marzano, S. (2003). The new everyday:
    Views on ambient intelligence. 010 Publishers. Atzori, L., Iera, A., & Morabito,
    G. (2010). The internet of things: A survey. Computer networks, 54(15), 2787-2805.
    Bier, H., Cheng, A. L., Mostafavi, S., Anton, A., & Bodea, S. (2018). Robotic
    Building as Integration of Design-to-Robotic-Production and-Operation. In Robotic
    Building (pp. 97-119). Springer, Cham. Bier, H. (2017). Robotic Building. Spool,
    4(1), 1-6. Bier, H., & Knight, T. (2010). Digitally-driven architecture. Footprint,
    1-4. Blythe, M. (2014). Research Through Design Fiction: Narrative in Real and
    Imaginary Abstracts. CHI ‘14: Proceedings of the SIGCHI Conference on Human Factors
    in Computing Systems. 703–712. Brown, S. (2019, September 16). What business leaders
    need to know about artificial intelligence. Retrieved from: https://mitsloan.mit.edu/ideas-made-to-matter/what-business-leaders-need-to-know-about-artificial-intelligence
    Corne, D. W., Reynolds, A. P., & Bonabeau, E. (2012). Swarm Intelligence. Dalton,
    N. S., Schnädelbach, H., Wiberg, M., & Varoudis, T. (2016). Architecture and interaction.
    Springer, Cham, doi, 10, 978-3. Ferber, J., & Weiss, G. (1999). Multi-agent systems:
    an introduction to distributed artificial intelligence (Vol. 1). Reading: Addison-Wesley.
    Forlizzi, J., & Ford, S. (2000, August). The building blocks of experience: an
    early framework for interaction designers. In Proceedings of the 3rd conference
    on Designing interactive systems: processes, practices, methods, and techniques
    (pp. 419-423). ACM. Fox, M. & Kemp, M. (2009). Interactive Architecture. New York,
    Princeton Architectural Press. Garrett, J. J. (2010). Elements of user experience,
    the: user-centered design for the web and beyond. Pearson Education. Ghosh, B.,
    Daugherty, P. R., Wilson, H. J., & Burden, A. (2019, May 9). Taking a Systems
    Approach to Adopting AI. Retrieved from: https://hbr.org/2019/05/taking-a-systems-approach-to-adopting-ai
    Hassenzahl, M. (2010). Experience design: Technology for all the right reasons.
    Synthesis Lectures on Human-Centered Informatics, 3(1), 1-95. Houben, M., Denef,
    B., Mattelaer, M., Claes, S., & Vande Moere, A. (2017, June). The meaningful integration
    of interactive media in architecture. In Proceedings of the 2017 ACM conference
    companion publication on Designing Interactive Systems (pp. 187-191). ACM. Kalbach,
    J. (2016). Mapping experiences: A complete guide to creating value through journeys,
    blueprints, and diagrams. O’Reilly Media, Inc. Kuniavsky, M. (2010). Smart things:
    ubiquitous computing user experience design. Elsevier. Lisetti, C. L., & Schiano,
    D. J. (2000). Automatic facial expression interpretation: Where human-computer
    interaction, artificial intelligence and cognitive science intersect. Pragmatics
    & cognition, 8(1), 185-235. Lyytinen, K., & Yoo, Y. (2002). Ubiquitous computing.
    Communications of the ACM, 45(12), 63-96. Marcus, A. (Ed.). (2016). Design, User
    Experience, and Usability: Design Thinking and Methods: 5th International Conference,
    DUXU 2016, Held as Part of HCI International 2016, Toronto, Canada, July 17–22,
    2016, Proceedings (Vol. 9746), pp. 114–123. Springer. McCorduck, P., Minsky, M.,
    Selfridge, O. G., & Simon, H. A. (1977, August). History of Artificial Intelligence.
    In IJCAI (pp. 951-954). Minsky, M. (1961). Steps toward artificial intelligence.
    Proceedings of the IRE, 49(1), 8-30. Mitchell, W. J. (1996). City of bits: space,
    place, and the infobahn. MIT press. Morville, P., & Rosenfeld, L. (2006). Information
    architecture for the World Wide Web: Designing large-scale web sites. O’Reilly
    Media, Inc. Nilsson, N. J. (1980). Principles of artificial intelligence. Morgan
    Kaufmann. Norman, D. (2013). The design of everyday things: Revised and expanded
    edition. Basic books. Pavlovic, M. (2020). Designing for Ambient UX: Design Framework
    for Managing User Experience within Cyber-Physical Systems. (Unpublished doctoral
    dissertation). Politecnico di Milano, Milan. Pavlovic, M., Kotsopoulos, S., Lim,
    Y., Penman, S., Colombo, S., & Casalegno, F. (2019, October). Determining a Framework
    for the Generation and Evaluation of Ambient Intelligent Agent System Designs.
    In Proceedings of the Future Technologies Conference (pp. 318-333). Springer,
    Cham. Peng, Q., Matterns, J.B, (2016). Enhancing User Experience Design with an
    Integrated Storytelling Method. Springer International Publishing Switzerland
    2016 Pillan, M., Costa, F., & Aureggi, M. (2019). The Complexity of Simple Goals:
    Case Study of a User-Centred Thermoregulation System for Smart Living and Optimal
    Energy Use. Sustainability, 11(13). Rajkumar, R., Lee, I., Sha, L., & Stankovic,
    J. (2010, June). Cyber-physical systems: the next computing revolution. In Design
    Automation Conference (pp. 731-736). IEEE. Pillan, M., Pavlović, M., & He, S.
    (2018). Mental Model Diagrams as a Design Tool for Improving Cross-cultural Dialogue
    Between the Service Providers and Customers: Case of the Chinese Restaurant Business
    in Milan. In P.-L. P. Rau (Ed.), Cross-Cultural Design. Methods, Tools, and Users
    (Vol. 10911, pp. 78–96). Pillan, M. (2017). Wandering eyes: Reframing ethnography
    and collecting hints for the design of products and systems for domestic environments.
    Cumulus REDO Conference Proceedings, 520–530. Design School Kolding. Kolding,
    Denmark Pillan, M., Varisco, L., & Bertolo, M. (2017). Facing Digital Dystopias:
    A Discussion about Responsibility in the Design of Smart Products. In M. B. Alonso
    & E. Ozcan (Eds.), Proceedings of the Conference on Design and Semantics of Form
    and Movement—Sense and Sensitivity, DeSForM 2017 (pp. 121–131). Russell, S. J.,
    & Norvig, P. (2016). Artificial intelligence: a modern approach. Malaysia; Pearson
    Education Limited. Sanders, E. B. N. (2003). From user-centered to participatory
    design approaches. In Design and the social sciences (pp. 18-25). CRC Press. Sanders,
    E. B. N., Stappers, P.J., (2008) Co-creation and the new landscapes of design.
    Online Journal Co-Design, 4:1, 5-18. Taylor & Francis. Secomandi, F., & Snelders,
    D. (2011). The object of service design. Design Issues, 27(3), 20-34. Sheppard,
    B., Sarrazin, H., Kouyoumjian, G. & and Dore, F. (2018). Business Value of Design.
    McKinsey Quarterly. Accessed on 28 May 2019, retrieved from: https://www.mckinsey.com/business-functions/mckinsey-design/our-insights/the-business-value-of-design.
    Stickdorn, M., Hormess, M. E., Lawrence, A., & Schneider, J. (2018). This is service
    design doing: applying service design thinking in the real world. O’Reilly Media,
    Inc. Yang, S. H. (2014). Wireless sensor networks principles, design and applications.
    Springer, London. Zelkha, E., Epstein, B., Birrell, S., & Dodsworth, C. (1998).
    From Devices to ‘Ambient Intelligence’: The Transformation of Consumer Electronics
    (Conference Keynote). In Digital living room conference (pp. 16-19). CURRENT ISSUE
    INFORMATION For Readers For Authors For Librarians YOU MIGHT ALSO LIKE docomomo
    journal by docomomo blue papers by the UNESCO Chair Water, Ports and Historic
    Cities cubic journal by the Cubic Society"'
  inline_citation: '>'
  journal: Spool
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: Ambient ux for cyber-physical spaces
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Sankar S.
  - Srinivasan P.
  citation_count: '22'
  description: 'Background and Objective: The Internet of Things (IoT) has intended
    for enabling the physical devices to connect over the internet, that''s able to
    exchange the data between the physical devices in heterogeneous wireless sensor
    network environment. IoT paradigm is the integration of several technologies such
    as wireless sensor, actuator networks, identification and tracking technologies,
    distributed intelligence, enhanced a communication protocol which provides the
    communication solution among the objects. Materials and Methods: The combination
    of the emerging technologies and Internet transform physical objects into smart
    objects, able to learn, understand and react to their environment by itself. In
    coming years, IoT is expected to introduce the new technologies and applications
    for connection between the physical objects and intelligent decision-making. Conclusion:
    This paper presents the detailed summary of the Internet of Things introduction,
    visions, enabling technologies, Architectural details, protocols and its standard
    specification, research opportunities and challenges and application related issues.'
  doi: null
  full_citation: '>'
  full_text: '>'
  inline_citation: '>'
  journal: International Journal of Pharmacy and Technology
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: 'Internet of Things (IoT): A survey on empowering technologies, research
    opportunities and applications'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Gupta S.
  - Verma S.
  - Abrol R.K.
  citation_count: '0'
  description: Wireless Sensor & Actuator networks take actuation decisions based
    on the data collected by the deployed set of sensor nodes. The method of data
    acquisition, leading to decision making, could be semi-automated or fully automated.
    In either case, the reliable delivery of information assumes critical importance
    since it has a direct impact on the decision making process for subsequent action
    by the actuator network. This paper presents in details a novel methodology “Layer
    Based Time Constrained Reliable Data Acquisition Mechanism” LTCRDM, which can
    be utilized for reliable delivery of information, sensed periodically or in response
    to a query, by the sensors deployed over a geographical area to a centralized
    sinkwhere the decision for eventual actuation is taken. Since the latency and
    reliability requirements in a WSAN are stringent, the mechanism detailed attempts
    delivery of maximum packets with minimum latency to ensure that estimation of
    the sensed event is accurate leading to correct decision making. The methodology
    ensures relatively low packet loss as compared to standard packet delivery mechanisms
    with latency time constraints. The algorithm for dissemination of query (LQDM)
    in the deployed nodes is also presented. Authors have provided detailed algorithm,
    results of simulation and observations using IEEE 802.15.4 PHY & MAC as underlying
    layers. Experimental results over a test-bed are also presented. A critical analysis
    of the results is presented for comparison against the standard methodologies
    in vogue.
  doi: 10.14257/ijgdc.2015.8.4.32
  full_citation: '>'
  full_text: '>

    ""'
  inline_citation: '>'
  journal: International Journal of Grid and Distributed Computing
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: Layer based query dissemination &amp; reliable data acquisition mechanism
    for wireless sensor &amp; actuator networks
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Goumopoulos C.
  - O'Flynn B.
  - Kameas A.
  citation_count: '98'
  description: Precision irrigation based on the "speaking plant" approach can save
    water and maximize crop yield, but implementing irrigation control can be challenging
    in system integration and decision making. In this paper we describe the design
    of an adaptable decision support system and its integration with a wireless sensor/actuator
    network (WSAN) to implement autonomous closed-loop zone-specific irrigation. Using
    an ontology for defining the application logic emphasizes system flexibility and
    adaptability and supports the application of automatic inferential and validation
    mechanisms. Furthermore, a machine learning process has been applied for inducing
    new rules by analyzing logged datasets for extracting new knowledge and extending
    the system ontology in order to cope, for example, with a sensor type failure
    or to improve the accuracy of a plant state diagnosis. A deployment of the system
    is presented for zone specific irrigation control in a greenhouse setting. Evaluation
    of the developed system was performed in terms of derivation of new rules by the
    machine learning process, WSN performance and mote lifetime. The effectiveness
    of the developed system was validated by comparing its agronomic performance to
    traditional agricultural practices. © 2014 Elsevier B.V.
  doi: 10.1016/j.compag.2014.03.012
  full_citation: '>'
  full_text: '>

    "Skip to main content Skip to article Journals & Books Search Register Sign in
    Brought to you by: University of Nebraska-Lincoln View PDF Download full issue
    Outline Highlights Abstract Keywords 1. Introduction 2. Materials and methods
    3. Experiments and results 4. Conclusions Acknowledgments References Show full
    outline Cited by (101) Figures (12) Show 6 more figures Tables (5) Table 1 Table
    2 Table 3 Table 4 Table 5 Computers and Electronics in Agriculture Volume 105,
    July 2014, Pages 20-33 Automated zone-specific irrigation with wireless sensor/actuator
    network and adaptable decision support Author links open overlay panel Christos
    Goumopoulos a b, Brendan O’Flynn c, Achilles Kameas a Show more Share Cite https://doi.org/10.1016/j.compag.2014.03.012
    Get rights and content Highlights • Precision irrigation based on the “speaking
    plant” approach and accurate measurements. • A modular wireless sensor node used
    in reconfigurable autonomous sensing networks. • A proactive closed-loop computing
    model through an adaptive decision-making layer. • Machine learning to determine
    accurately significant thresholds of plant-based parameters. Abstract Precision
    irrigation based on the “speaking plant” approach can save water and maximize
    crop yield, but implementing irrigation control can be challenging in system integration
    and decision making. In this paper we describe the design of an adaptable decision
    support system and its integration with a wireless sensor/actuator network (WSAN)
    to implement autonomous closed-loop zone-specific irrigation. Using an ontology
    for defining the application logic emphasizes system flexibility and adaptability
    and supports the application of automatic inferential and validation mechanisms.
    Furthermore, a machine learning process has been applied for inducing new rules
    by analyzing logged datasets for extracting new knowledge and extending the system
    ontology in order to cope, for example, with a sensor type failure or to improve
    the accuracy of a plant state diagnosis. A deployment of the system is presented
    for zone specific irrigation control in a greenhouse setting. Evaluation of the
    developed system was performed in terms of derivation of new rules by the machine
    learning process, WSN performance and mote lifetime. The effectiveness of the
    developed system was validated by comparing its agronomic performance to traditional
    agricultural practices. Previous article in issue Next article in issue Keywords
    Wireless sensor/actuator networkIEEE 802.15.4 standardRule-based systemMachine
    learningAdaptive decision-makingPlant-based irrigation 1. Introduction Given the
    advancements in the field of wireless sensor networks (WSNs) as well as in the
    miniaturization of such sensor systems, new trends have emerged in the field of
    precision agriculture (Zhang et al., 2002, Srinivasan, 2006). Reviews of wireless
    sensor technologies and applications in agriculture and food industry have been
    given by Wang et al. (2006) and by Ruiz-Garcia et al. (2009).Wireless networks
    allow the deployment of sensing and actuation infrastructure at a much finer granularity
    than has been available before. Sensors and actuators can be used to precisely
    and autonomously control, for example, the concentration of fertilizer in the
    soil, based on information gathered from the soil itself, the ambient temperature,
    and other relevant environmental factors. Incorporating feedback into the system
    through the use of sensors and actuators allows for a more fine-grained analysis
    that can adjust flow rate and duration in a way that is informed by local conditions.
    Significant economic gains are expected by applying such precise information to
    control the growth of particularly delicate and high value crops such as wine
    grapes, citrus fruit and strawberries. Sensors that are able to monitor the crop
    itself, for example, leaf temperature in strawberries, or sugar-levels in grapes,
    or the photosynthetic activity of the crop plant, to provide location-specific
    data could also prove to be very effective. In particular, the use of WSN technology
    to optimize irrigation in agriculture is of benefit to both the farmers and the
    environment. According to recent reports, agriculture irrigation accounts for
    50–60% of freshwater usage from sources in the natural environment and up to more
    than 90% in some developing countries (UNESCO, 2009, pp. 106–115). Given the increasing
    worldwide shortage of water caused by a combination of a changing climate and
    pressure resulting from high demand of agricultural products, it is of primary
    importance to develop new irrigation control strategies that allow the minimization
    of water wastage while keeping associated costs at an affordable level. In this
    paper we describe the design of an intelligent decision support system and its
    integration with a wireless sensor/actuator network (WSAN) to implement closed-loop
    zone specific irrigation control in greenhouses via wireless communication. Our
    research focuses on the provision of proactive applications by deploying sensor
    networks and connecting sensor data with actuators through an adaptive and able
    to learn decision-making layer. The system developed provides real-time monitoring
    and control of both agricultural inputs and outputs (irrigation control). A rule
    editor with a graphical user interface (GUI) is used by the domain-expert to initialize
    the knowledge base. The system is optimized to adapt to changes in crop development
    by configuring the rule parameters in the system ontology. In addition, machine
    learning is employed to enrich systems’ knowledge base. The remaining of the paper
    is organized as follows. Section 2 gives an overall description of the developed
    system. The topics covered in this discussion include the layered modular architecture
    of the system, the WSAN platform, the supported sensors and their interfacing
    to the platform, the ontology-based decision making layer and the machine learning
    process followed to extend system knowledge. Section 3 details the technological
    and agronomic results. It provides an evaluation of the developed system in terms
    of a prototype deployment, the derivation of new rules from the machine learning
    experiments performed, the WSN performance analysis and the mote lifetime estimation
    by using analytical models, the agronomic impact of the system and also provides
    a discussion of related work and lessons learnt. Finally, Section 4 presents a
    summary of this work. 2. Materials and methods The overall goal of the research
    and development work described in this paper is to design a new plant growth monitoring
    and control system comprising: • a distributed network of sensors for accurately
    sensing the plant growth activity and environmental conditions, and plant growth
    control actuators; • ontology-based decision support mechanisms that associate
    sensor data with actuator commands; • a machine learning process for enhancing
    plant state diagnosis based on logged data; and • a set of tools that facilitate
    the specification of applications and the visualization of measuring parameters
    and assessed states. As an application example of the above system we have considered
    an intelligent irrigation control strategy applied to protected agricultural crops
    that can improve the environmental and economic sustainability of the greenhouse
    sector. 2.1. System overview The system is organized in a layered modular approach
    to allow flexibility and extensibility. A layered system architecture decouples
    the low-level sensory communication from the application business logic; the former
    gathers raw data from sensors, while the latter can be captured as an hierarchy
    of rules (Goumopoulos et al., 2007). In this way, applications do not depend on
    a specific sensor or a protocol that this sensor uses to transfer data values.
    Therefore, new sensor devices that emerge for a selected plant parameter can be
    integrated to the system without disturbing the other modules. Similarly, a different
    wireless communication protocol can be used without affecting the application
    business logic. This approach allowed us to develop and evaluate precision agriculture
    applications with diverse system and technology configurations (Goumopoulos et
    al., 2007, Goumopoulos et al., 2009, Goumopoulos, 2012). Fig. 1 illustrates the
    system architecture in a high level view. In yellow color are shown the components
    that are discussed in this paper. In the lower layer various sensors/actuators
    that can collectively form composite WSANs, provide the raw data and the means
    to activate devices associated with agricultural inputs (e.g., irrigation). In
    the driver’s layer, a specific driver is designed and implemented for each WSAN
    implementing the hardware communication protocol. The coordinator of the WSAN
    is connected to the corresponding gateway at the backend system which collects
    all sensor measurements before forwarding them to populate a relational database.
    The system architecture embraces the use of standalone devices that communicate
    directly with a driver through a device-specific communication protocol. These
    devices are usually complex sensors such as an infrared (IR) imaging system, and
    the PAM meter. The latter which is used in our prototype employs the so-called
    Pulse-Amplitude-Modulation (PAM) measuring principle to provide a selective measure
    of the relative chlorophyll fluorescence quantum yield for determining the photosynthetic
    efficiency of the plant. This parameter acts as a general plant health indicator
    and provides a reference for the classification process of the machine learning
    algorithm applied. Download : Download full-size image Fig. 1. High-level system
    architecture. The functionality of the backend system is supported by the following
    main components: Ontology, Decision Support System (DSS), and Machine Learning
    (ML). The ontology specifies all the rules that support the decision-making process
    in the form of a knowledge base. The DSS provides all the synthetic information,
    acquired from the analysis of the stored data, needed to make operative decisions
    for the plant growth management. The purpose of the ML component is to analyze
    the structured information using machine learning and data mining techniques in
    order to find interesting new correlations. A number of tools have also been developed
    to support the application development. 2.2. WSAN platform and sensor/actuator
    interfacing The hardware platform used is the 25 mm mote developed at Tyndall
    (Bellis et al., 2005, Tyndall, 2014). The hardware platform is analogous to a
    Lego™-like 25 mm × 25 mm stackable system (Fig. 2). The module contains an Atmel
    ATMega128L 8-bit microcontroller and a Chipcon CC2420 ZigBee RF chip both of which
    are combined on one layer. The microcontroller is equipped with 128 KB in-system
    flash memory and can be programmed to handle analogue to digital conversion (ADC)
    of sensor data and the communication networking protocols for interfacing with
    the RF transceiver to achieve communication with other nodes. The CC2420 transceiver
    used is 802.15.4 compliant – and as such can cover 16 channels in the 2.4 GHz
    band. Current consumption is very low with transmit and receive currents typically
    17.4 mA and 19.7 mA and 1 μA in sleep mode. Stacked upon this RF microcontroller
    layer is our custom sensor/actuator interface layer, which allows any combination
    of eight different sensors or actuators to be connected to the 25 mm module. On
    the software side, the microcontroller runs a tailored version of TinyOS, an optimised
    operating system that allows fast configuration of the sensor nodes. The power
    layer may include batteries or other energy supply or power harvesting mechanisms,
    i.e., solar cells or piezo electric power generation mechanisms. An 25 mm Li-ion
    battery layer is also provided with built-in USB charger capability. In an early
    version of the system the authors have investigated an alternative configuration
    of the Tyndall25 mote regarding the communication layer (Nordic VLSI nRF2401 2.4
    GHz RF transceiver) and the network topology (peer-to-peer) (Goumopoulos et al.,
    2007). Download : Download full-size image Fig. 2. Tyndall25 mote modular platform.
    2.2.1. Communication protocol and topology The communication protocol used in
    our case is based on the IEEE 802.15.4 standard (IEEE 802.15.4 Standard, 2006)
    which specifies the physical layer and the Medium Access Control (MAC) layer of
    the protocol. IEEE 802.15.4 combined with the ZigBee open specification specify
    a protocol stack for the development of short-range and low power communications
    for Wireless Personal Area Networks (WPANs). The basic configuration of the IEEE
    802.15.4 permits a transfer rate of 250 Kbps to a distance range of 10–100 m in
    the 2.4 GHz frequency band depending on the antenna, the environment and the power
    consumption permitted by a given application. The IEEE 802.15.4 standard supports
    two addressing schemes, either short (16 bit) or long addresses (IEEE 64 bit)
    so theoretical network size is up to 65536 or 264 nodes. A maximum frame size
    of 127 bytes is supported with a payload of up to 114 bytes (assuming short addresses).
    An IEEE 802.15.4 network consists of one PAN coordinator and a set of devices
    which are classified as reduced functionality devices (RFD) and full functionality
    devices (FFD). The interconnection of these devices allow the creation of three
    types of topologies: star (the PAN coordinator is in the transmission range of
    all other devices resulting in single-hop communication), mesh or peer-to-peer
    (a node may communicate with any neighbor enabling multi-hop communication) and
    cluster-tree (a combination of the previous topologies where the PAN coordinator
    is the root of the tree and all the non-leaf devices are defined as coordinators
    with the ability to forward the packets to/from the root). The physical layer
    of IEEE 802.15.4 uses Carrier Sense Multiple Access (CSMA) with Collision Avoidance
    (CA) to access the radio channel (IEEE 802.15.4 Standard, 2006). The MAC layer
    enables two different operational modes: non beacon-enabled mode and beacon enabled
    mode. In the former case the access control is governed by non-slotted CSMA/CA,
    where as in the latter case the network coordinator broadcasts a special frame
    (a beacon) periodically that permits the synchronization of the associated devices.
    In our current system we use the non-beacon mode and thus our network topology
    is a star topology. Selecting the non-beacon mode was mandatory due to the unavailability
    of a beacon-mode implementation for our WSAN platform. In the star topology the
    coordinator and the actuator controlling motes are powered from the mains source,
    where as the sensor motes are battery powered. Given that the plant processes
    we want to monitor and control (e.g. plant dehydration) are slow, the use of low
    sampling intervals (in the order of 5–30 min) is acceptable to save energy. In
    addition, the data to be transmitted is of low complexity resulting in limited
    payloads on the IEEE 802.15.4 data frames. A sampling rate of 5 min with a payload
    of only 18 bytes (total data frame size 33 bytes) gives a sampling rate of 0.88
    bps which is very low compared to the medium transmission rate (250 Kbps). This
    low sampling rate affects the collision probability and allows achieving a high
    successful packet delivery rate for a sufficient number of nodes provided that
    nodes can awake in a random manner during the specified sampling interval to take
    measurements and transmit their values, as we will explain in the evaluation part
    of the sensor network. The protected environment of greenhouses provides also
    the possibility of using a range of facilities like mains power for certain devices
    (e.g. controlling of water pumps). By using the star topology we have avoided
    well known complications that are related with the use of the beacon-enabled mode
    such as clock drifts between coordinators in cluster tree topologies, dynamic
    network resynchronization in the case a cluster joins/leaves the network and the
    need for dynamic rearrangement of duty cycles in the case of a coordinator failure.
    2.2.2. Sensors The interfacing of commercial-off-the-shelf (COTS) sensors generally
    requires special hardware for each sensor. This is because different sensors may
    have different power requirements and output type and range. Three types of sensors
    had to be interfaced for the Tyndall25 mote: soil moisture sensors, humidity sensors
    and thermistors for determining leaf/air temperature. The main properties of these
    sensors are summarized in Table 1. Table 1. Sensors interfaced to the 25 mm mote.
    Sensor model ECHO EC-10 SHT11 MF51E103E3950 Measured parameter Volumetric Water
    Content (VWC) Relative humidity and temperature Leaf, air temperature Range 0
    to saturated VWC 0 to 100%RH and −40 to 123 °C −40 to 100 °C Resolution 0.1%VWC
    0.05%RH and 0.01 °C 0.1 °C (10-bit ADC, [5, 45]°C) 0.02 °C (12-bit ADC, [5, 45]
    °C) Accuracy ±1 to ±3% VWC ±3%RH and ± 0.4 °C ±0.5% Resistance Tolerance ±0.05
    °C (after calibration) Measurement time 10 ms 80 ms 10 ms Response time N/A 8
    s and 5–30 s 1 s Current Consumption 2 mA measuring 0.55 mA measuring 0.08 mA
    measuring 0.3 μA sleep Supply voltage range 2.5–5.5 V 2.4–5.5 V 2.5–5.5 V Output
    type Voltage (10–40% of excitation voltage) Digital (2-wire) Resistance (181.7–0.67
    KΩ) Cost 100 € 20 € 5 € (including conditioning circuitry) URL http://www.decagon.com
    http://www.sensirion.com http://www.cantherm.com 2.2.2.1. Soil moisture sensor
    Soil moisture can be measured by electromagnetic sensors which determine volumetric
    water content (VWC) and occasionally electrical conductivity in the soil under
    consideration. The correlation between the electromagnetic signals measured and
    VWC is attributed to the high permittivity of water which can be inferred by the
    sensors through various means (e.g., time, frequency and capacitance). In our
    case the ECHO EC-10 soil moisture probe by Decagon was selected. It uses the capacitance
    technique to measure the dielectric permittivity of the surrounding medium which
    can then be related to the VWC of the soil. The ECHO EC-10 sensor provides fast
    measurements with very low power consumption, giving the ability to take many
    measurements over a long period of time (e.g., a growing season) with minimal
    battery usage. Regarding the accuracy of the measured VWC the manufacturer recommends
    establishing soil-specific calibration functions (Campbell, 2004). The soil used
    in our applications was a peat substrate. A series of soil/water mixtures were
    used and the corresponding sensor responses were recorded. The process was performed
    for different sensors and the average values of 3 repetitions were used to obtain
    the following equation: (1) Soil moisture sensor outputs could be input directly
    into the analogue to digital converter because they are in the voltage range of
    the microcontroller. 2.2.2.2. Humidity sensor For measuring humidity we have selected
    the SHT11 component from Sensirion which also provides temperature measurements.
    A capacitive sensor element is used for measuring relative humidity while temperature
    is measured by a band-gap sensor. The device also integrates signal processing
    and provides a fully calibrated digital output. To obtain the relative humidity
    we used the accuracy enhancement formula that is provided by the manufacturer
    (Sensirion, 2011): (2) where SORH is the humidity readout value (12-bit length),
    C1 = −2.0468, C2 = 0.0367 and C3 = −1.5955 * 10−6. The humidity sensor provides
    its output in a digital format which can be input directly into the microcontroller.
    2.2.2.3. Temperature sensor There are different types of sensors that are used
    for temperature measurement in greenhouses. Of the sensors available, thermistors
    were chosen as they have high sensitivity to minute changes in temperature (change
    in resistance vs. temperature on a scale of −3%/°C to −6%/°C for NTC thermistors),
    low thermal mass, high thermal conduction, low cost and are small enough to be
    placed on the plant leaf. Two important parameters that must be taken into account
    when designing a temperature measurement system are resolution and accuracy. The
    temperature resolution is the smallest detectable incremental change of temperature
    that can be detected by the system. Thermistors’ inherent high sensitivity can
    provide high resolution measurements. The temperature accuracy is the maximum
    difference that will exist between the real temperature (which must be measured
    by a reference thermometer) and the measured value by the system. In our case,
    we have selected a negative temperature coefficient (NTC) thermistor (i.e. resistance
    decreases as temperature increases) with high resistance tolerance (±0.5%) and
    a nominal resistance of 10 kΩ at 25 °C (Cantherm, 2006). The measurement system
    we have designed achieves a temperature resolution of 0.02 °C and an accuracy
    of ±0.05 °C over a temperature range of 5–45 °C. The resolution and accuracy of
    temperature measurement is critical for the precision irrigation application we
    developed and therefore we have carefully designed the corresponding system. Moreover,
    higher resolution and accuracy are required for the machine learning experiments
    that will be described later in the paper. A characteristic of thermistors is
    the non-linear relationship between thermistors resistance (Rth) measured in ohms,
    and temperature (T) measured in Kelvin, as given by the well-known Steinhart–Hart
    thermistor equation or the simpler B-parameter equation: (3) where R0 is the resistance
    value at reference temperature T0 (typically 25 °C/298.15 K), B is the B or Beta
    value, which is an indication of the slope of the Rth–T curve (the higher the
    Beta value the greater the change in resistance per degree C). Both R0 and B are
    specified in the sensor data sheet. R∞ is the thermistor resistance as the temperature
    approaches infinity. Eq. (3) solved for T is written as: (4) The measurement system
    provides temperature values in three steps: 1. Measurement of the conditioning
    circuit output voltage by means of the ADC module. 2. Calculation of the thermistor
    resistance from the ADC value. 3. Calculation of the temperature using Eq. (4).
    In order to obtain both high precision and high resolution temperature values
    by the measurement system several design choices have to be made in the above
    three steps. A conditioning circuit is used to interface thermistors to the ADC
    module of the Tyndall25 mote working with an external reference voltage of 2.5
    V (Vref) for 12-bit ADC. The conditioning circuit includes four high precision
    resistors (0.1% tolerance) and a high precision operational amplifier (op-amp)
    with low noise and low offset voltage that scales and shifts the analog signal
    of the thermistor voltage in order to correctly map the required thermistor resistance
    range to the voltage range (0–2.5 V) supported by the ADC module. To overcome
    the impact of the circuit component uncertainties and get highly accurate measurements
    careful calibration was performed, matching the output of the measuring system
    to a set of known reference values. Details of this calibration process are omitted
    due to lack of space. Fig. 3 shows a plot of the calibration data and also the
    thermistor resistance variation compared to the temperature variation. The figure
    shows also the linear fit of the curves that could be used for applications that
    can afford lower accuracy measurements. Download : Download full-size image Fig.
    3. Calibration data plot. 2.2.3. Irrigation system Fig. 4 shows the schematic
    layout of the irrigation distribution unit. In principle, the mote’s controlling
    software, via a transistor switch, activates a relay that in turn activates the
    pump device. The interface layer sits on top of the Tyndall25 mote as additional
    layers cannot be placed above it due to the size of the connectors attached to
    it. In order to toggle the external relay, which is part of the actuator portion,
    12 V must be supplied at the interface layer output. The heart of the actuator
    portion of the interface layer is a simple transistor switch that is controlled
    by the microcontroller. When the software running on the microcontroller toggles
    the appropriate output a voltage is supplied to the base of the transistor and
    the switch is turned on and 12 V is supplied to the relay which is connected to
    a Harwin M30-610 connector. The 12 V supply voltage is used not only for the actuators
    but also to power all possibly connected sensors and the entire Tyndall25 mote.
    The interface layer contains a Torex XC6202 voltage regulator to regulate the
    12 V supply down to 3.3 V in order to power the mote and connected sensors. Download
    : Download full-size image Fig. 4. Schematic layout of the irrigation distribution
    unit. In order for this system to work the mote has to take commands from the
    coordinator node so as to know what section to irrigate and for how long. The
    coordinator sends a command via its radio link to the associated node controlling
    the actuator. This command is sent to the module in the irrigation distribution
    unit that converts the signal to a voltage level that the microcontroller can
    read. Once the microcontroller receives a valid command according to the decision
    making output it will actuate the pump valve and open a particular solenoid in
    order to irrigate a specific section of the crop layout. The solenoid operated
    water valves distribute the watering supply in four distinct zones of plants.
    A fifth water valve provides humidity control. The pumps used in the system are
    the Whale Whisperflo UP0815 pressure pump with a flow rate of 8 L min−1. The solenoids
    are manufactured by Bermad, model S-390-2-R. 2.3. Ontology-based DSS and tools
    At the heart of the back-end system (Fig. 1) lies the DSS component which is build
    on top of an ontology. An ontology is a tool that can conceptualize a world view
    by capturing general knowledge and providing basic notions and concepts for basic
    terms (Uschold and Gruninger, 1996). The ontology developed defines domain concepts
    and relations among them. It provides a vocabulary for expressing the decision-making
    rules based on plant and environmental sensing parameters which are related with
    a set of sensors and actuators as well as correlated biological information (Fig.
    5). The specification of the ontology was performed using the Protégé ontology
    development tool (http://protege.stanford.edu/) based on the OWL standard language.
    An in depth discussion of the ontology design is provided by Goumopoulos et al.
    (2009). Download : Download full-size image Fig. 5. Part of the system ontology
    hierarchy. In this context, the decision-making process is based on a set of rules
    in operational representation forms, which are applied on existent knowledge and
    allow the use of the ontology for reasoning providing inferential and validation
    mechanisms. For example, there is a need for a set of rules that will take into
    account both plant and environmental parameters and the description of a plant
    in order to diagnose a plant’s state. Other rules would take into account the
    plant’s state, its description and user defined policies to determine the possible
    actions of the system, such as the request for a resource. An inference engine
    is used for the decision-making process. The inference engine module exploits
    the Jess (Java Expert System Shell) rule engine (http://herzberg.ca.sandia.gov/jess/).
    The execution of this module starts based on the initial facts and the rules stored
    in the rule base using CLIPS format. The concepts that appear in the rules have
    emerged from the ontology. Essentially, this is an approach of building rules
    on top of ontologies. Therefore, the reasoning is based on the definition of the
    ontology, by using first-order predicate calculus. The user, however, can define
    or update existing rules using a front-end tool and expressing the rules with
    simple if-then-else logic. A number of tools have been developed to facilitate
    the development, configuration and monitoring of applications. For each node in
    the WSAN we provide a driver operator configuration software that specifies the
    actions to setup the properties of the WSAN in order to make it functional for
    the agricultural application. This configuration provides also the definition
    of certain parameters that will allow the proper interpretation of the data received
    by the device operator. Fig. 6 illustrates the interface defined for configuring
    the Tyndall25-based WSAN. Options include setting the mote to be configured, its
    frequency channel and position in the field, the active ADCs and the type of the
    associated sensor/actuator. Download : Download full-size image Fig. 6. Tyndall25-based
    WSAN driver configuration software. Fig. 7 shows the design of the ‘Heat Stress’
    calculation rule for the irrigation application using a simple rule editing tool
    targeted to the domain expert, which provides a visual interface based on a node
    connection model. The rule consists of three conditions combined with a logical
    AND node. An expression builder facilitates the definition of the condition relying
    on concepts stored in the ontology. The rule, as designed, states that when all
    conditions are met then the heat stress state of the RC area must be set to active
    (HeatStress ACTIVE). The Supervisor Logic and Data Acquisition (SLADA) tool is
    another tool used to view knowledge represented into the ontology, monitor and
    log plant/environmental parameters and manage dynamically the rules taking part
    in the decision-making process in co-operation with the rule editor. The rule
    editor and the SLADA tool are described in detail in Goumopoulos et al. (2007).
    Download : Download full-size image Fig. 7. Using the rule editor to compose a
    rule for the irrigation application. 2.4. Machine learning In the context of precision
    agriculture it is feasible to extract new knowledge from stored data in the form
    of models that are in an easy to manage form by the decision making system and
    understandable to the domain expert involved in the crop production process (Dimitriadis
    and Goumopoulos, 2008). Elaborating on our previous research work, we used classification
    algorithms, which produce a classifier as a set of rules or decision trees that
    can be then exploited to predict the classification of new data cases and can
    insert new rules to the domain model. Before that, the application of clustering
    algorithms based on particular proximity criteria-attributes can create hypotheses
    about the relationships that can be found in the dataset and identify the natural
    groupings in the input data. We devised a machine learning process model that
    guides machine learning experimentation with an aim to incorporate derived rules
    and attributes into the decision-making mechanism (Fig. 8). This process is an
    expanded form of the process model for machine learning application in agriculture
    that was created by the Waikato Environment for Knowledge Analysis (WEKA) group
    in University of Waikato in New Zealand (Witten and Frank, 2005). The close cooperation
    between the data mining expert and the plant science field expert is required
    in several phases. In the pre-processing and analysis phases, their collaboration
    will shape the datasets upon which the machine learning algorithms shall operate.
    The responsibility of the field expert is to review and interpret the appropriateness
    of the data and suggest possible transformations and/or relaxations. The responsibility
    of the data mining expert is to guarantee that the inferred rules correspond satisfactorily
    to the evaluated measures (e.g., overall success rate and false positive rate)
    from the machine learning perspective. Regarding the data mining process, algorithms
    provided by the WEKA workbench are used. At the post-processing phase the field
    expert could indicate which subset of the derived rules establishes new valuable
    knowledge, and which part describes common knowledge. To estimate the performance
    of classifiers generated from the entire data set of example cases, the 10-fold
    cross validation approach to training and testing was used. Download : Download
    full-size image Fig. 8. Machine learning process model. 3. Experiments and results
    Strawberry plants (Fragaria ananassa) have been selected for system validation
    and evaluation because the delivered technology can be relevant to the commercial
    production of this crop, while on a practical level, the size of the leaves enables
    easy attachment of sensors. In addition, irrigation control on strawberry plants
    is important as they have a shallow root system making them particularly sensitive
    to water stress. On the other hand, controlling excessive irrigation is significant
    for avoiding nutrient leaching and disease development that affect negatively
    the crop yield. The most effective balance needs to be achieved between these
    two requirements. The irrigation treatments, controlled by our system, were imposed
    from the beginning of the flowering to the end of the fruit maturity from early
    June to late July in a greenhouse establishment at the University College Cork
    in Ireland (Fig. 9) in the context of the PLANTS project (daisy.cti.gr/plants/)
    funded by the European Community under the Information Society Technologies Programme.
    A subset of this experiment was performed using a different WSAN platform (Crossbow
    MICAz) and the results regarding this configuration are discussed in Goumopoulos
    (2012). Download : Download full-size image Fig. 9. Experimental setup (left);
    drip-feed into a pot (right). 3.1. Plant signals and environmental parameters
    The primary plant signals and environmental parameters explored during application
    development are: Plant’s leaf Temperature (PT), Chlorophyll Fluorescence (CF),
    Ambient Temperature (AT), Humidity (H) and Soil Moisture (SM). PT was chosen as
    it indicates drought and heat stress (Mannini and Anconelli, 1993). The former
    is due to lack of water and will be reflected in the stomata (leaf pores) closing
    when the plants are under water stress and with the shutdown of transpiration
    the leaves will begin to heat up (i.e., monitoring the temperature of the leafs
    to determine drought state). On the other hand, heat stress can occur independently
    of water stress when the environmental temperature gets very high and transpiration
    cannot maintain leaf cooling. By comparing PT and AT one can deduce an indication
    of plant stress. The addition of the SM parameter enables the system to decide
    between heat stress (i.e. plant has adequate water but temperature is high) and
    drought stress (i.e. both water content is low and temperature is high). The CF
    parameter serves as the feedback mechanism to determine the state of the photosynthetic
    rate of the plant and from this determine how productive or stressed the plant
    is under the current conditions (Norikane et al., 2003). We use this parameter
    for the machine learning process. A healthy plant absorbs light from the sun and
    directs a proportion of the energy absorbed (slightly above 80%) to photosynthesis,
    through chlorophyll a. This proportion can be determined by providing a very bright
    pulse of light and determining the difference between minimal and maximal fluorescence.
    Any decline in this proportion indicates a reduction in the efficiency with which
    light is converted to photosynthetic product, and such a decline is often seen
    when a plant is stressed. So when plants become dehydrated or are otherwise stressed,
    they are often less able to convert sunlight into photosynthetic product and this
    stress can be detected using fluorescence (Razavi et al., 2008). Fluorometers
    that use the PAM technique (PAM meter) work by rapidly sending brief pulses of
    light to a plant. A healthy plant responds to this light very quickly (within
    microseconds) by re-emitting some of the light energy as fluorescence which is
    detected by the fluorometer. CF measurements are taken using a standalone sensor
    device (Junior PAM1), whereas PT, AT, H and SM measurements are taken by the WSAN.
    3.2. System deployment The experimental setup consists of an array of 96 plants
    placed in a glasshouse, arranged in an array of 12 by 8. Four different zones
    are defined: Left-Edge (LE), Right-Edge (RE), Left-Center (LC), Right-Center (RC).
    Also, there is one zone selected for misting which overlaps with the RC zone.
    The setup integrates 36 thermistors (8 ambient and 28 plant temperature thermistors)
    and 8 soil moisture probes into one system that when required can irrigate and
    also determine when to stop the irrigation. This deployment takes into account
    differences in the location of the plants in the overall area and will allow for
    independent irrigation of edge or centre zone plants as required. Eight Tyndall25
    motes are used for connecting the various sensors, one mote is sensorless and
    is used as a gateway with the backend system, and one mote is used for controlling
    the irrigation system. The motes are placed in IP-67 rated water-proof packaging
    to endure the field conditions (Fig. 9). Sensor mapping to the zones is managed
    with the WSAN configuration tool (Fig. 6). Sensor nodes are taking measurements
    at user-defined intervals. For this experiment the rate was 5 min. To reduce random
    noise each measurement is the average of ten sensor readings. SM, PT and AT values
    are calculated from measurements taken by multiple sensors deployed in a zone.
    For the SM and AT parameters the average is calculated since a few sensors are
    involved (up to 3). In case of PT, where more sensors are involved (up to 10),
    both the mean and the median values have been considered and finally the median
    has been selected because of its robustness to outliers. The PAM meter sensor
    has been used for collecting data only from the RC area. The timewindow for measuring
    the photosynthetic activity is set between 9 am and 5 pm. The sensor uses a magnetic
    clamp to hold the plant leaf about 1 mm from the end of the light pipe. In order
    to receive readings from the PAM meter, successive measuring cycles must be initiated
    by the corresponding device driver. Each cycle starts with illuminating the leaf
    of the plant with an actinic light, followed by a saturation pulse, followed by
    a measurement. Then the driver pulses the leaf with increasing quantities of actinic
    light to get characterisation curves that contain information on the state of
    the leaf. A sequential protocol to communicate with the PAM meter has been implemented.
    The communication is done via the COM port connected to the PAM meter using a
    standard cable. The PAM meter uses a series of ASCII commands that are sent from
    the controlling device in a binary format. Some of these commands control the
    saturation pulse (i.e. ‘s’) and the actinic light intensity (e.g., ‘ai3’, ‘ai4’,
    etc.) and others like the ‘etr’ command request specific readings from the sensor.
    In particular, actinic light intensity commands also request PAR (photosynthetically
    active radiance) readings transmitted from the PAM meter. For example, actinic
    intensity ai3 will have a PAR value of 50, ai4 a PAR value of 70, etc. A delay
    of at least 100 ms is required between character transmissions, whereas a delay
    of up to 10 s is necessary between commands. Table 2 contains the application
    rules for the RC zone with thresholds specialized for the reproductive phase of
    strawberries. It is possible the threshold values to vary depending on the growing
    phase of the crop. In the strawberry fruiting stage, for example, more irrigation
    is required for quality production. In Table 2 we have shown a separate rule that
    defines the variable RCSMThreshold to the proper threshold value during the reproductive
    phase of the crop. Similarly, another rule defines the variable IrrigationThreshold
    with the proper value in the same growing phase. Note that the SM threshold can
    be defined to be both zone-specific and growing phase-specific, where as the irrigation
    threshold is defined to be the same for all zones. Existing knowledge from the
    horticulture literature can be easily integrated into our system through the ontology
    and rule editing tools discussed earlier. The uncertainty of the decisions can
    be modeled with confidence factors that can be integrated into the rules (Goumopoulos
    et al., 2007). Table 2. Application rules. Rule Body RCDroughtStress IF RCLeafTemperature
    – RCAmbientTemperature > 0.9 °C THEN RCDroughtStress ← TRUE ELSE RCDroughtStress
    ← FALSE RCHeatStress IF RCDroughtStress AND RCSoilMoisture > RCSMThreshold THEN
    RCHeatStress ← TRUE ELSE RCHeatStress ← FALSE RCNeedIrrigation IF RCDroughtStress
    AND NOT RCHeatStress THEN RCNeedIrrigation ← TRUE ELSE RCNeedIrrigation ← FALSE
    RCNeedMisting IF RCDroughtStress AND RCHeatStress THEN RCNeedMisting ← TRUE ELSE
    RCNeedMisting ← FALSE RCSMThreshold IF GrowingPhase = REPRODUCTIVE THEN RCSMThreshold
    ← 0.6 IrrigationThreshold IF GrowingPhase = REPRODUCTIVE THEN IrrigationThreshold
    ← 1800 s Two additional parameters must be defined for the prototype to be properly
    working: the duration of irrigation/misting and an idle time, which specifies
    the amount of time the rules should be disabled, after the action is performed.
    This is to allow the ecosystem to absorb the changes. The values used for the
    example application were 30 min/1 min and 4 h respectively. The irrigation system
    uses a reservoir, a pump system, standard pipe work, nipples and drippers which
    emit water directly into the plant pot. Flow rate depends on the pump pressure.
    The emitter flow rate per pot is regulated at 1 L h−1 with an application efficiency
    of 95%. In the misting system the drippers are replaced by nozzles that are designed
    to produce a fine spray. 3.3. Machine learning experiments For the machine learning
    experiments datasets collected by the deployed system were used. The attributes
    involved are: CF, PT, SM, AT, PAR, and the derived properties ETR (electron transport
    rate), QE (quantum efficiency of photosynthesis), InfPAR (inflection PAR), and
    the learning goals DS (DroughtStress) and HS (HeatStress) categorized with values
    TRUE/FALSE. The ETR is calculated within PAM meter by combining the CF (represented
    by several fluorescence quotients) and PAR measurements (Pfündel, 2007). InfPAR
    is calculated on the ETR vs. saturated PAR curve (Fig. 10); the curve is calculated
    using a second degree least squares algorithm. The point of inflection is calculated
    as the intersection point between the asymptotic lines of the curve’s first derivative.
    QE is the slope of the above curve. Download : Download full-size image Fig. 10.
    ETR vs. saturated PAR curve. Data gathering was performed for a period of seven
    weeks corresponding to the reproductive phase of the crop. For analysis purposes
    we have divided this process into two stages. The first stage is represented in
    a dataset called “ETR_Photosynthetic Activity” which includes only the properties
    related to the plants photosynthetic activity and a characterization of the plant
    DS state, used as the classification parameter of the applied learning algorithms,
    within 234 instances (half of them were characterized as stressed and half as
    not stressed). The classification was done manually by domain experts. The aim
    was to acquire rules that determine the DS status of the plant based on its photosynthetic
    activity (rules #1 and #2 in Table 3). The second stage leverages on the knowledge
    acquired by the previous stage and is represented in a dataset called “MultiParameterCorrelation”
    which includes all attributes, the HS class assessed by the built-in rules (Table
    2) and the DS class assessed by both built-in and inferred rules from the first
    stage, within 4032 instances. The aim was to find new correlations between plant
    stress states and sensor measurements (rules #3–#7 in Table 3). The attribute
    Δtmp denotes the difference between plant and ambient temperature. By examining
    the list of the inferred rules it is obvious that rules #4 and #5 can collide
    with rule #1. Consequently, the rules that have been inferred might not be in
    a fully operational form. To alleviate this specific issue we need to conjugate
    the condition part of rules #4 and #5 with the term “SM > 60” in order to differentiate
    between DS and HS assessment. Table 3. Part of the rules derived by running machine
    learning algorithms. # Inferred rule Correctly classified (%) 1 IF (InfPAR ⩽ 319)
    THEN DS = TRUE 100 2 IF (QE < 0.87) THEN DS = TRUE 100 3 IF (AT ⩾ 18.5 AND AT
    ⩽ 28.5 AND PT ⩾ 20.8 AND PT ⩽ 29.9 AND Δtmp ⩾ 3.3 AND Δtmp ⩽ -1.3) THEN HS = TRUE
    100 4 IF (InfPAR ⩽ 243) THEN HS = TRUE 95 5 IF (PT ( 19 AND InfPAR ⩽ 313) THEN
    HS = TRUE 95 6 IF SM ⩽ 0.62 THEN DS = TRUE 91 7 IF Δtmp ⩾ 0.84 THEN DS = TRUE
    85 Based on the suggested machine learning process model (Fig. 8) and by using
    the WEKA feature selection tools we analyzed the relation between the parameters
    of lower informational value and the learning goals, and we created new data sets
    for each classification goal. This methodology disqualifies the appearance of
    complicated rules with many parameters not related to the classification class.
    Furthermore, we see in Table 3 that the rules for the prediction of the DS can
    be based on 3 different parameters. By having such a pluralism, the failure of
    a sensor may not be critical for the assessment of a state. Rules #6 and #7 in
    Table 3 are particularly interesting as they indicate a possible refinement on
    the threshold values of the corresponding rules for the assessment of the DS state
    with respect to the ones used by the built-in rules. Although the horticulture
    literature suggests a Δtmp value of 1 °C (Mannini and Anconelli, 1993) our machine
    learning experimentation indicates that this could be refined to 0.84 °C. Such
    an update can benefit the adaptation of the system in the current environment
    and improve the precision of the applied rules. This refinement has been also
    explored by the application of the Expectation Maximization (EM) clustering algorithm
    of the WEKA workbench in terms of the PT, AT and SM attributes. The result was
    a four cluster set which is graphically depicted in Fig. 11. As the plot depicts,
    each cluster is generally allocated in one of the four areas separated by the
    dotted vertical and horizontal lines. The different colors indicate the cluster
    a data instance belongs to. Black, blue red and cyan refer to cluster C0, C1,
    C2 and C3 respectively. Cluster 3 contains approximately 95% of the instances
    marked as healthy (DS = FALSE and HS = FALSE). All instances belonging to clusters
    1 and 2 needed irrigation treatment. For cluster 0, 82% of the instances required
    misting treatment and the rest were healthy. Finally, 9% of the instances belonging
    to cluster 3 requested irrigation and 3% requested misting. All other instances
    were stated as healthy. Download : Download full-size image Fig. 11. Clustering
    of the “MultiParameterCorrelation” dataset. 3.4. WSN performance In this section
    we analyze the WSN performance focusing mainly on the estimation of the packet
    loss rate in terms of the number of motes and the duty cycle of the system. The
    duty cycle is defined as the ratio of the time required to sense and transmit
    a sample of the sensors attached to the mote to the sampling period. We assume
    a star topology formed by a set of sensor motes and a coordinator powered from
    the main source. We assume a steady state network where child nodes have already
    been associated to the coordinator node. The unslotted CSMA/CA protocol is used
    for the channel access, briefly described next. Two variables are used for each
    transmission attempt: number of backoff retries (NB) and backoff exponent (BE).
    In the beginning these variables are initialized as NB = 0 and BE = macMINBE (default
    value is 3). NB represents the number of backoff retries before assuming a channel
    access failure having a range between 0 and 5. The 802.15.4 MAC layer uses BE
    to choose a random backoff between 0 and 2BE – 1 to delay the Clear Channel Assessment
    (CCA) phase. BE has a range between 0 and 5 (setting BE to 0 means CSMA/CA is
    switched off). After the backoff period the MAC layer issues a CCA and if the
    channel is clear transmission can start. If the channel is found to be busy, both
    NB and BE are incremented by 1 and a new backoff is attempted. If NB exceeds the
    maximum threshold (macMaxCSMABackoffs = 5) then transmission is aborted. After
    the transmission the node waits for an ack frame. If the ack is successfully received,
    the transmission is considered successful. Our analysis is based on the analytical
    models developed by Timmons and Scanlon (2004) to describe the performance of
    the IEEE 802.15.4 protocol focusing on the estimation of the lifetime of an 802.15.4
    network of sensors in a star topology. For a network of n sensors the probability
    that the channel is clear in the CCA phase after the first backoff interval is
    given by the following formula: (5) where q is the probability of a node transmitting
    at any time. This probability depends in our case on the sampling period interval
    (SPI) defined for taking measurements and the payload size of the data frame.
    We do not take into account the polling messages from a sensor node to the network
    coordinator since these messages are very sparse (a pooling message is sent every
    measurements, approximately three times a day). The total size of the data frame
    is 33 bytes (18 bytes payload, 9 bytes MAC headers and 6 bytes PHY headers). So
    q is calculated as follows: (6) where TDF is the data frame transmission time.
    To estimate the packet loss rate we need to take into account the cumulative probability
    to find the channel clear so that packet transmission can happen (Ptr) by taking
    into account up to five backoff intervals as defined in the 802.15.4 CSMA/CA protocol
    and the probability of packet collision due to the fact that two or more nodes
    can select the same delay and transmit simultaneously. Ptr is defined as follows
    (Timmons and Scanlon, 2004): (7) Given that the probability of selecting the same
    backoff delay leading to collision is we can approximate the packet loss rate
    as follows: (8) The analysis shows that for a large number of sensors (up to 1000)
    with a low duty cycle (0.04% corresponding to an SPI of 5 min) both the probabilities
    of the channel being free for transmission and of not having a collision are greater
    than 99%. This means that the loss of packets is negligible. For the rather small
    number of devices used in our application it would be also more efficient to remove
    the CSMA/CA technique to avoid the initial backoff period and thus save more power.
    Fig. 12 shows the effect of the duty cycle of the system (determined by the selected
    SPI) on the packet loss rate for a constant payload size of 100 bytes. The results
    demonstrate that for a sufficient number of sensors duty cycles up to 1% give
    an acceptable packet loss rate in the range of 5%. Download : Download full-size
    image Fig. 12. Effect of duty cycle on packet loss rate. 3.5. Mote lifetime estimation
    The sensor motes operate according to the duty cycle in order to achieve the monitoring
    requirements of the application and conserve power by entering as much as possible
    to the sleeping mode. The energy consumption can be modeled by the following equation:
    (9) where ESense, ETx, ERx, EInit and ESleep represnt the energy consumed for
    sampling the sensors attached to the mote, transmitting data frames and receiving
    ack frames, initializing the mote and sleeping. Energy ESense is calculated as
    follows: (10) where V is the battery voltage (3.3 V), Ic is the current consumption
    to sample a sensor and ts is the total time to sample a sensor during a time interval
    T. Assuming a sampling period interval SPI then where tm is the measurement time
    for each sampling. For each sensor the Ic and tm values are defined in Table 1.
    Assuming SPI = 5 min Table 4 summarizes the energy consumption for the mote. In
    every cycle the sensing and the transmission operations are taking place only
    once. The duty cycle (DC) of the service is measured at 0.04% and the average
    power consumption is approximated by the following equation: (11) where Pactive
    is the sensing and transmission power consumption and Psleep is the sleep mode
    power consumption. From Table 4 the average power consumption is estimated to
    151 μW. Lifetime of the mote can be computed as where CBATT is the battery capacity
    (expressed in mAh) and E is the average energy given in Table 4. Using a 3.3 V
    Li-ion battery of 500 mAh the lifetime of the mote will be 1.2 years whereas a
    battery of 1200 mAh will achieve a 2.9 years lifetime. Therefore, the mote lifetime
    can easily satisfy the full crop agronomic cycle of strawberries which is 200
    days. Table 4. Energy consumption measurements. Empty Cell Energy (mJ) Power (mW)
    Time (ms) I (mA) ESense 6.57 89.45 73.5 27.11 ETx 4.63 132.4 35 40.12 EInit 0.40
    20 20 6.06 ERx 0.06 133.7 0.45 40.52 ESleep 16.19 0.054 299,871 0.02 Average 0.160
    0.151 0.05 3.6. Agronomic impact On the agronomic part of the experiment the instrumentation
    of the strawberry field with the WSN and the plant-driven irrigation resulted
    in a notable reduction in water consumption (∼20%) with respect to traditional
    agricultural practices involving user defined timed irrigation based on rules
    of thumb (twice or thrice a week for 1–2 h). The latter was applied in a parallel
    setup for the same growing period of the crop. The irrigation treatments were
    imposed from the beginning of the flowering to the end of the fruit maturity from
    early June to late July. Since the objective of any crop cultivation is to achieve
    the highest yield, crop yield is the most effective way to evaluate the benefits
    of crop growth systems. Therefore we compared the plant-driven irrigation system
    with the traditional irrigation scheme, regarding strawberry growth, in terms
    of crop yield, water use efficiency and other yield parameters. In our experiment,
    the strawberry harvesting stage started about 28 days after flowering and there
    were ten harvests that took place every 3 days. The highest quality of the crop
    was noticed in the first rounds. At each round of the harvest period the yield,
    the number of strawberries and the average weight per strawberry were recorded.
    The dry weight of strawberries was also determined by drying them at 80 °C in
    an oven. Water use efficiency was also determined for each case as the ratio between
    yield and the water amount used. Statistical analysis of the collected data was
    performed by standard analysis of variance (ANOVA) with the Statistical Package
    for the Social Sciences for Windows. The irrigation treatments were run as one-way
    ANOVA. Table 5 summarizes the comparison of the two irrigation treatments. There
    was no statistically significant difference between the yields achieved by the
    two irrigation treatments. Traditional irrigation produced a slightly higher yield
    than the plant-driven irrigation, which can be explained by the excess amount
    of water provided. Dry strawberry yields were similar as were the average number
    and average weight of strawberries. On the other hand, the water use efficiency
    of the plant-driven approach was significantly better than of the traditional
    approach. Therefore the plant-driven approach with the system configuration discussed
    in this paper was successful in providing the proper amount of water for the physiological
    growth of the crop producing similar crop yield with the traditional irrigation
    system. Table 5. Crop quality indicators for the different irrigation treatments.
    Irrigation treatment Yield (g/plant) Dry weight (g/plant) Water amount (lt/plant)
    Avg berry weight (g) Water use efficiency (g/lt) Traditional 690.6a 69.9a 31a
    9.0 22.4a Plant-driven 686.4a 69.1a 25b 9.0 27.6b Note: Means followed by the
    same letter are not significantly different at the 0.05 probability level. 3.7.
    Related work and discussion Over the years there has been a tremendous progress
    on the application of WSN technology in the precision agriculture domain at various
    forms. In the work of Peres et al. (2011), for example, an Intelligent Precision
    Agriculture Gateway was developed that can provide middleware services between
    on site deployed WSNs and remote locations. Data are gathered by ZigBee operated
    WSNs that feed a local database which can be then queried by authorized remote
    clients. Usability and scalability issues are in the focus of their research.
    As another example, in the work of Garcia-Sanchez et al. (2011) an integrated
    WSN-based system for crop monitoring and video surveillance was developed in a
    distributed environment using cost effective communication technology (IEEE 802.15.4).
    Energy consumption, end-end transmission delays and network synchronization are
    some of the main features that have been addressed during system design by the
    authors. Irrigation scheduling based on WSNs has been proposed by Vellidis et
    al. (2008), by Kim et al. (2008) and by Pardossi et al. (2009). Coates et al.
    (2013) have integrated a commercial WSN with valve control software and hardware
    for agriculture irrigation based on soil moisture monitoring. The design of the
    actuator hardware and the development of the actuator firmware implementing a
    custom communication protocol are discussed in detail. A stress-test of the system
    was conducted with successful results. In a similar setup, Li et al. (2011) report
    a WSAN prototype deployed in a crop field for precision irrigation. While our
    system presents some common features with systems such as the above mentioned
    (e.g., the design and deployment of a WSAN for monitoring the crop and controlling
    irrigation), our overall solution is different in concept. We propose a new proactive
    computing model by looping sensor data with actuators through an adaptive and
    able to learn decision-making layer. In addition, the use of an ontology-based
    knowledge representation scheme for the organization of concepts and definition
    of operational semantics provides system flexibility and adaptability and supports
    the application of automatic inferential and validation mechanisms. Several implementations
    of WSNs have been deployed in greenhouses focusing mainly on crop and climate
    monitoring (Ahonen et al., 2008, Wang et al., 2008, Jimenez et al., 2012). The
    common characteristic of these implementations, independently of their state-of-the-art
    approaches in communication networking or hardware and software integration or
    their theoretical foundation, is that they tend to be simple prototypes which
    lack long-term evaluation. On the other hand, implementations that integrate wireless
    sensors with actuators for automatic control of greenhouse processes are limited.
    Park and Park (2011) developed a monitoring and control prototype that uses a
    WSN deployed in a greenhouse with a goal to gather environmental and plant based
    data. The data are used by a decision support system that attempts to optimize
    the greenhouse climate in order to improve crop productivity by controlling the
    HVAC system. The application logic is encoded in a set of rules which take into
    account current sensor values and actuator states. This prototype presents common
    features with the system we have developed but also has significant limitations
    regarding the size of deployment, the accuracy of measurements (no calibration
    of the used sensors is performed), the lack of supporting tools for application
    development and the lack of an overall system evaluation. Rule-based systems for
    irrigation management have been proposed in the field of agriculture in the form
    of expert systems (Thomson and Ross, 1996, Mohan and Arumugam, 1997). Knowledge
    acquisition is a basic building block of any expert system. Knowledge acquisition
    tools have been developed to help with building and maintaining the required knowledge
    (Rafea et al., 2003). Besides managing the existing knowledge acquired from the
    domain experts and literature using a handy rule editing tool, we have demonstrated
    in this paper the use of machine learning techniques to enhance the knowledge
    base with new rules for irrigation management. Two key parameters explored in
    the proposed rule-based irrigation control system are the plant leaf temperature
    (PT) and chlorophyll fluorescence (CF). Even though experimenting with strawberries
    we have not noticed significant differences in PT and CF between the leaves of
    a plant, this may not be true for other plants and other parameters. It is well
    accepted that plant-based techniques monitoring physiological responses require
    much replication for reliable data (Jones, 2004). In our prototype, for example,
    to get a representative measurement of the plant temperature in a specific zone,
    multiple sensors are used, scattered among multiple plants. Thermistors are used
    in our case because of their low cost, easy installation and high accuracy. Other
    solutions, such as IR imaging, which can scan the canopy of several plants, provide
    alternatives that have their own advantages and shortcomings (Wang et al., 2010).
    IR imaging may not provide as much as accuracy we require at an affordable cost,
    non-leaf objects can create noise and environmental factors such as reflectance,
    heating pipes and suspended light can significantly affect the results returned.
    Frequently, a manual image processing method is required for better accuracy.
    Regarding the CF parameter, this is mainly used for the machine learning process
    and works as a proof of concept that new rules can be learned based on this parameter.
    Irrigation decisions can then be based on multiple parameters and this, in principle,
    can improve system fault tolerance in case of a sensor failure. Undoubtedly, the
    robustness of the system can be improved by replicating the CF sensor. Our modular
    architecture allows the replacement of the current CF sensor with a more affordable
    one, which can be easily replicated, whenever such a sensor is available. We argue
    in this paper that deploying a WSN in a greenhouse to monitor both plant and environmental
    parameters in a way that takes into account space variability, in order to control
    irrigation, constitutes an efficient approach. One advantage of this approach
    is that the solution can be easily scaled to include more inexpensive sensors,
    without disturbing the other system modules, and likely improving the decision-making
    process. On the downside, the WSN maintenance and the calibration of sensors are
    tasks that must be taken into account. Regarding the machine learning process
    important conclusions have been drawn. Firstly, it has been verified that applying
    machine learning strategies in precision agriculture applications is a useful
    and efficient method, although not simple, for learning rules and relationships
    automatically from diverse datasets that simplifies the often tiresome and error-prone
    process of acquiring knowledge from the gathered data. Validation of the inferred
    knowledge, however, will require an iterative approach where the situation observed
    is repeated and thus a safe conclusion can be reached. Secondly, there is a need
    of a two-way interaction between the domain expert and the domain modeler. Their
    collaboration is crucial to transform the raw data received from the sensors into
    the final datasets to be used by the machine learning algorithms. Additionally,
    new rules inferred must be validated for their relevance by the domain expert
    and checked for consistency and redundancy with the existing ones. In principle,
    part of the consistency and integrity checks could be managed automatically through
    the rule-based reasoning engine by defining special conflict detection rules.
    An upgrade of the agronomic evaluation performed would be a comparison of our
    system with modern irrigation scheduling practices based on the estimation of
    crop evapotranspiration (ETc.). Here, the main idea is to balance the amount of
    water taken away through evapotranspiration with the amount of water to be applied.
    ETc. can be calculated using various weather parameters obtained by a weather
    station, statistical data and models developed for predicting ETc. Such models
    are integrated in relevant decision support systems for the daily management of
    irrigation. A more simplified approach to calculate ETc. is by using a Class A
    evaporation pan which relates the measured evaporation to crop water use. In that
    case, an appropriate crop coefficient (Kc) must be applied to determine ETc. Accurate
    Kc values, however, depend on various site-specific parameters (e.g., soil characteristics,
    crop physiology, development stage, etc.) and are often difficult to establish.
    The additional complexity of developing an ETc.-based irrigation scheduling system
    from scratch prevented us from making such a comparison. Plant-based methods for
    irrigation scheduling do not indicate directly the amount of water to be applied
    and experimentation is required to determine control thresholds (Jones, 2004).
    Accordingly, it is not possible to use the plant temperature to stop irrigation
    due to the time lag between applying the irrigation, the permeation through the
    substrate and the subsequent uptake of the water by the plant. To alleviate this
    shortcoming, plant-based sensors are combined with soil moisture measurement sensors
    that can indicate when to stop the irrigation. Thresholds then are established
    through experimentation where irrigation treatments are tested over a range of
    sensor values to identify the best case. In such experiments the thermistors were
    used to commence the irrigation, and the soil moisture probes were used to determine
    when adequate water had been added to the substrate. After experimentation the
    average irrigation time to reach the ideal 60% of water content after the identification
    of a water stress was found to be 30 min. 4. Conclusions We have been involved
    with a facet of precision agriculture that concentrates on plant-driven crop management.
    By monitoring soil, crop and climate in a field and providing a decision support
    system that is able to learn, it is possible to deliver treatments, such as irrigation,
    to specific parts of a field in real time and proactively. We have presented in
    this paper an integrated framework consisting of hardware and software components
    as well as tools that support efficiently the development of an autonomous WSAN-based
    system for precision irrigation in greenhouses. Fertilizer and pesticide treatments
    are other examples of applications in agriculture that could benefit from such
    proactive approaches.The integration of a chlorophyll content meter sensor would
    allow system upgrading to incorporate fertigation (supply of fertilizer via the
    irrigation system). In that case the system ontology will need to be updated with
    appropriate rules to determine where/when exactly a fertilizer (e.g. nitrogen)
    is required. The availability of sensors for the detection of plant-emitted volatile
    organic compounds (VOCs) including ethylene (which signals general stress), esters
    of jasmonic acid (which signal pest attack), and esters of salicylate (which signal
    pathogen attack) would allow the issue of infection alerts and actuate a pathogen
    or pest-specific response as appropriate. By integrating to our platform electronic
    nose technology it is possible that volatile sensor arrays could detect the presence
    of specific pathogens or pests. Moving our research towards a more autonomous
    system with self-adaptation and self-learning characteristics, we have been exploring
    ways of incorporating learning capabilities in the system. Our experiments have
    shown that machine learning algorithms can be used for inducing new rules by analyzing
    logged datasets to determine accurately significant thresholds of plant-based
    parameters and for extracting new knowledge and extending the system ontology.
    To deal with the uncertainty of data, work is in progress to define a model describing
    the uncertainty aspects. Quality indicators can be specified so that the end-user
    (either an application or a person) can make judgements on the confidence level
    that the information entails. Uncertain context mechanisms such as probabilistic
    logic, fuzzy logic and Bayesian networks can be evaluated and applied accordingly.
    Acknowledgments Part of the research described in this paper was conducted in
    the PLANTS project (IST FET Open IST-2001-38900); the authors wish to thank their
    fellow researchers in the PLANTS consortium for their input and support. We are
    grateful to professor Alan Cassells from the University College Cork for sharing
    his valuable insights regarding the plant science aspects of this research. The
    authors would also like to thank the anonymous reviewers for their helpful comments
    and constructive suggestions to improve the final version of the paper. References
    Ahonen et al., 2008 T. Ahonen, R. Virrankoski, M. Elmusrati Greenhouse monitoring
    with wireless sensor network Proceedings of the IEEE/ASME International Conference
    on Mechtronic and Embedded Systems and Applications, Beijing, China (2008), pp.
    403-408 CrossRefView in ScopusGoogle Scholar Bellis et al., 2005 S.J. Bellis,
    K. Delaney, B. O’Flynn, J. Barton, K.M. Razeeb, C. O’Mathuna Development of field
    programmable modular wireless sensor network nodes for ambient systems Comput.
    Commun., 28 (13) (2005), pp. 1531-1544 View PDFView articleView in ScopusGoogle
    Scholar Campbell, 2004 Campbell, C.S., 2004. Calibrating ECH2O soil moisture probes.
    Application note. Available at: <http://www.decagon.com>. Accessed on February
    1st 2014. Google Scholar Cantherm,, 2006 Cantherm MF51E High Precision NTC Thermistors
    for Extremely Accurate Temperature Measurement Available at: (2006) <http://www.cantherm.com>,
    accessed on 01.02.14 Google Scholar Coates et al., 2013 R.W. Coates, M.J. Delwiche,
    A. Broad, M. Holler Wireless sensor network with irrigation valve control Comput.
    Electron. Agric., 96 (2013), pp. 13-22 View PDFView articleView in ScopusGoogle
    Scholar Dimitriadis and Goumopoulos, 2008 S. Dimitriadis, C. Goumopoulos Applying
    machine learning to extract new knowledge in precision agriculture applications
    Proceedings of the Panhellenic Conference on Informatics, Samos, Greece (2008),
    pp. 28-30 CrossRefGoogle Scholar Garcia-Sanchez et al., 2011 A.J. Garcia-Sanchez,
    F. Garcia-Sanchez, J. Garcia-Haro Wireless sensor network deployment for integrating
    video-surveillance and data-monitoring in precision agriculture over distributed
    crops Comput. Electron. Agric., 75 (2) (2011), pp. 288-303 View PDFView articleView
    in ScopusGoogle Scholar Goumopoulos, 2012 Goumopoulos, C., 2012. An autonomous
    wireless sensor/actuator network for precision irrigation in greenhouses. In Smart
    Sensing Technology for Agriculture and Environmental Monitoring (pp. 1–20). Springer,
    Berlin Heidelberg. Google Scholar Goumopoulos et al., 2009 C. Goumopoulos, A.
    Kameas, A. Cassells An ontology-driven system architecture for precision agriculture
    applications Int. J. Metadata Semant. Ontol., 4 (1–2) (2009), pp. 72-84 CrossRefView
    in ScopusGoogle Scholar Goumopoulos et al., 2007 C. Goumopoulos, A. Kameas, B.
    O’Flynn Proactive agriculture: an integrated framework for developing distributed
    hybrid systems Proceedings of the International Conference on Ubiquitous Intelligence
    and Computing, Hong Kong, China (2007), pp. 214-224 CrossRefView in ScopusGoogle
    Scholar IEEE 802.15.4 Standard, 2006 IEEE 802.15.4 Standard, Wireless Medium Access
    Control (MAC) and Physical Layer (PHY) Specifications for Low-Rate Wireless Personal
    Area Networks (WPANs) The Institute of Electrical and Electronics Engineers Inc.,
    New York, USA (2006) Google Scholar Jimenez et al., 2012 Jimenez, A., Jimenez
    S., Lozada, P., Jimenez, C., 2012. Wireless sensors network in the efficient management
    of greenhouse crops. In: Proceedings of the International Conference on Information
    Technology, Washington, USA, pp. 680–685. Google Scholar Jones, 2004 H.G. Jones
    Irrigation scheduling: advantages and pitfalls of plant-based methods J. Exp.
    Bot., 55 (407) (2004), pp. 2427-2436 View in ScopusGoogle Scholar Kim et al.,
    2008 Y. Kim, R.G. Evans, W.M. Iversen Remote sensing and control of an irrigation
    system using a distributed wireless sensor network IEEE Trans. Instrum. Meas.,
    57 (7) (2008), pp. 1379-1387 View in ScopusGoogle Scholar Li et al., 2011 Z. Li,
    N. Wang, T. Hong, A. Franzen, J. Li Closed-loop drip irrigation control using
    a hybrid wireless sensor and actuator network Sci. China Inf. Sci., 54 (3) (2011),
    pp. 577-588 CrossRefView in ScopusGoogle Scholar Mannini and Anconelli, 1993 P.
    Mannini, S. Anconelli Leaf temperature and water stress in strawberry Acta Hortic.,
    345 (1993), pp. 55-61 CrossRefGoogle Scholar Mohan and Arumugam, 1997 S. Mohan,
    N. Arumugam Expert system applications in irrigation management: an overview Comput.
    Electron. Agric., 17 (1997), pp. 263-280 View PDFView articleView in ScopusGoogle
    Scholar Norikane et al., 2003 J. Norikane, E. Goto, K. Kurata, T. Takakura A new
    relative referencing method for crop monitoring using chlorophyll fluorescence
    Adv. Space Res., 31 (1) (2003), pp. 245-248 View PDFView articleView in ScopusGoogle
    Scholar Pardossi et al., 2009 A. Pardossi, L. Incrocci, G. Incrocci, F. Marlorgio,
    P. Battista, L. Bacci, B. Rapi, P. Marzialetti, J. Hemming, J. Balendonck Root
    zone sensors for irrigation management in intensive agriculture Sensors, 9 (4)
    (2009), pp. 2809-2835 CrossRefView in ScopusGoogle Scholar Park and Park, 2011
    D.H. Park, J.W. Park Wireless sensor network-based greenhouse environment monitoring
    and automatic control system for dew condensation prevention Sensors, 11 (4) (2011),
    pp. 3640-3651 CrossRefView in ScopusGoogle Scholar Peres et al., 2011 E. Peres,
    M.A. Fernandes, R. Morais, C.R. Cunha, J.A. LóPez, S.R. Matos, P.J.S.G. Ferreira,
    M.J.C.S. Reis An autonomous intelligent gateway infrastructure for in-field processing
    in precision viticulture Comput. Electron. Agric., 78 (2) (2011), pp. 176-187
    View PDFView articleView in ScopusGoogle Scholar Pfündel, 2007 Pfündel, E., 2007.
    Junior-PAM Chlorophyll fluorometer Operator’s Guide. Heinz Walz GmbH. Google Scholar
    Rafea et al., 2003 A. Rafea, H. Hassen, M. Hazman Automatic knowledge acquisition
    tool for irrigation and fertilization expert systems Expert Syst. Appl., 24 (1)
    (2003), pp. 49-57 View PDFView articleView in ScopusGoogle Scholar Razavi et al.,
    2008 F. Razavi, B. Pollet, K. Steppe, M.C. van Labeke Chlorophyll fluorescence
    as a tool for evaluation of drought stress in strawberry Photosynthetica, 46 (4)
    (2008), pp. 631-633 CrossRefView in ScopusGoogle Scholar Ruiz-Garcia et al., 2009
    L. Ruiz-Garcia, L. Lunadei, P. Barreiro, J.I. Robla A review of wireless sensor
    technologies and applications in agriculture and food industry: state of the art
    and current trends Sensors, 9 (6) (2009), pp. 4728-4750 CrossRefView in ScopusGoogle
    Scholar Sensirion, 2011 Sensirion Datasheet SHT1x (SHT10, SHT11, SHT15) Humidity
    Sensor (2011) Available at: <http://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/Humidity/Sensirion_Humidity_SHT1x_Datasheet_V5.pdf>,
    accessed on 01.02.14 Google Scholar Srinivasan, 2006 A. Srinivasan (Ed.), Handbook
    of Precision Agriculture Principles and Applications, Haworth Press, New York
    (2006) Thomson and Ross, 1996 S.J. Thomson, B.B. Ross Model-based irrigation management
    using a dynamic parameter adjustment method Comput. Electron. Agric., 14 (4) (1996),
    pp. 269-290 View PDFView articleView in ScopusGoogle Scholar Timmons and Scanlon,
    2004 Timmons, N.F., Scanlon, W.G., 2004. Analysis of the performance of IEEE 802.15.4
    for medical sensor body area networking. In: Proceedings of the IEEE Communications
    Society Conference on Sensor and Ad Hoc Communications and Networks, Santa Clara,
    USA, pp. 16–24. Google Scholar Tyndall, 2014 Tyndall, 2014. Wireless Sensor Networks
    Prototyping Platform 25mm. Tyndall National Institute, Cork, Ireleand. Available
    at: <http://www.tyndall.ie/content/wireless-sensor-networks-prototyping-platform25mm>
    [accessed on 01.02.14]. Google Scholar UNESCO, 2009 UNESCO, 2009. The 3rd United
    Nations World Water Development Report: Water in a Changing World (WWDR-3). UNESCO,
    Paris, France. Available at: <http://www.unesco.org/water/wwap/wwdr/wwdr3/> [accessed
    on 01.02.14]. Google Scholar Uschold and Gruninger, 1996 M. Uschold, M. Gruninger
    Ontologies: principles, methods and applications Knowledge Eng. Rev., 11 (2) (1996),
    pp. 93-155 CrossRefGoogle Scholar Vellidis et al., 2008 G. Vellidis, M. Tucker,
    C. Perry, C. Kvien, C. Bednarz A real-time wireless smart sensor array for scheduling
    irrigation Comput. Electron. Agric., 61 (1) (2008), pp. 44-50 View PDFView articleView
    in ScopusGoogle Scholar Wang et al., 2008 C. Wang, C.J. Zhao, X.J. Qiao, X. Zhang,
    Y.H. Zhang The design of wireless sensor networks node for measuring the greenhouse’s
    environment parameters Comput. Computing. Technol. Agric., 259 (2008), pp. 1037-1046
    CrossRefGoogle Scholar Wang et al., 2006 N. Wang, N. Zhang, M. Wang Wireless sensors
    in agriculture and food industry-recent development and future perspective Comput.
    Electron. Agric., 50 (1) (2006), pp. 1-14 View PDFView articleCrossRefView in
    ScopusGoogle Scholar Wang et al., 2010 X. Wang, W. Yang, A. Wheaton, N. Cooley,
    B. Moran Automated canopy temperature estimation via infrared thermography: a
    first step towards automated plant water stress monitoring Comput. Electron. Agric.,
    73 (1) (2010), pp. 74-83 View PDFView articleView in ScopusGoogle Scholar Witten
    and Frank, 2005 I.H. Witten, E. Frank Data Mining: Practical Machine Learning
    Tools and Techniques Morgan Kaufmann Publishers, San Francisco, CA, USA (2005)
    Google Scholar Zhang et al., 2002 N. Zhang, M. Wang, N. Wang Precision agriculture
    – a worldwide overview Comput. Electron. Agric., 36 (2–3) (2002), pp. 113-132
    View PDFView articleView in ScopusGoogle Scholar Cited by (101) Cyber-agricultural
    systems for crop breeding and sustainable production 2024, Trends in Plant Science
    Show abstract Artificial intelligence and deep learning applications for agriculture
    2023, Precision Agriculture: Evolution, Insights and Emerging Trends Show abstract
    MaCOnto: A robust maize crop ontology based on soils, fertilizers and irrigation
    knowledge 2022, Intelligent Systems with Applications Show abstract Smart Farming
    in Europe 2021, Computer Science Review Show abstract Evolutionary layout design
    synthesis of an autonomous greenhouse using product-related dependencies 2021,
    Artificial Intelligence for Engineering Design, Analysis and Manufacturing: AIEDAM
    Computer Model for an Intelligent Adjustment of Weather Conditions Based on Spatial
    Features for Soil Moisture Estimation 2024, Mathematics View all citing articles
    on Scopus 1 http://www.walz.com/ View Abstract Copyright © 2014 Elsevier B.V.
    All rights reserved. Recommended articles Smart farming and water saving-based
    intelligent irrigation system implementation using the Internet of Things Recent
    Trends in Computational Intelligence Enabled Research, 2021, pp. 339-354 Sagnick
    Biswas, …, Jyoti Sekhar Banerjee Temporal convolution-network-based models for
    modeling maize evapotranspiration under mulched drip irrigation Computers and
    Electronics in Agriculture, Volume 169, 2020, Article 105206 Zhijun Chen, …, Xudong
    Zhang View PDF A new scheme to optimize irrigation depth using a numerical model
    of crop response to irrigation and quantitative weather forecasts Computers and
    Electronics in Agriculture, Volume 150, 2018, pp. 387-393 Hassan M. Abd El Baki,
    …, Tadaomi Saito View PDF Show 3 more articles Article Metrics Citations Citation
    Indexes: 98 Policy Citations: 1 Captures Readers: 242 View details About ScienceDirect
    Remote access Shopping cart Advertise Contact and support Terms and conditions
    Privacy policy Cookies are used by this site. Cookie settings | Your Privacy Choices
    All content on this site: Copyright © 2024 Elsevier B.V., its licensors, and contributors.
    All rights are reserved, including those for text and data mining, AI training,
    and similar technologies. For all open access content, the Creative Commons licensing
    terms apply."'
  inline_citation: '>'
  journal: Computers and Electronics in Agriculture
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: Automated zone-specific irrigation with wireless sensor/actuator network
    and adaptable decision support
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Goumopoulos C.
  citation_count: '8'
  description: In this work we describe the design of an adaptable decision support
    system and its integration with a wireless sensor/actuator network (WSAN) to implement
    zone specific irrigation control in greenhouses via wireless communication. Our
    research has focused on the provision for proactive applications by deploying
    sensor networks and connecting sensor data with actuators through an ontology-based
    decision-making layer. The system developed provides for real-time monitoring
    and control of both agricultural inputs and outputs (irrigation control). A simple
    rule editor is also provided through a graphical user interface for the domain-expert
    to specify the knowledge base. © 2012 Springer-Verlag Berlin Heidelberg.
  doi: 10.1007/978-3-642-27638-5_1
  full_citation: '>'
  full_text: '>

    "Your privacy, your choice We use essential cookies to make sure the site can
    function. We also use optional cookies for advertising, personalisation of content,
    usage analysis, and social media. By accepting optional cookies, you consent to
    the processing of your personal data - including transfers to third parties. Some
    third parties are outside of the European Economic Area, with varying standards
    of data protection. See our privacy policy for more information on the use of
    your personal data. Manage preferences for further information and to change your
    choices. Accept all cookies Skip to main content Advertisement Log in Find a journal
    Publish with us Track your research Search Cart Smart Sensing Technology for Agriculture
    and Environmental Monitoring pp 1–20Cite as Home Smart Sensing Technology for
    Agriculture and Environmental Monitoring Chapter An Autonomous Wireless Sensor/Actuator
    Network for Precision Irrigation in Greenhouses Christos Goumopoulos  Chapter
    2122 Accesses 4 Citations Part of the book series: Lecture Notes in Electrical
    Engineering ((LNEE,volume 146)) Abstract In this work we describe the design of
    an adaptable decision support system and its integration with a wireless sensor/actuator
    network (WSAN) to implement zone specific irrigation control in greenhouses via
    wireless communication. Our research has focused on the provision for proactive
    applications by deploying sensor networks and connecting sensor data with actuators
    through an ontology-based decision-making layer. The system developed provides
    for real-time monitoring and control of both agricultural inputs and outputs (irrigation
    control). A simple rule editor is also provided through a graphical user interface
    for the domain-expert to specify the knowledge base. Access provided by University
    of Nebraska-Lincoln. Download to read the full chapter text Chapter PDF References
    Baggio, A.: Wireless Sensor Networks in Precision Agriculture. In: Proc. ACM Workshop
    Real-World WSNs, Stockholm, Sweden (2005) Google Scholar   Beckwith, R., Teibel,
    D., Bowen, P.: Report from the Field: Results from an Agricultural Wireless Sensor
    Network. In: Proc. 29th IEEE International Conference on Local Computer Networks,
    Tampa, FL, USA, pp. 471–478 (2004) Google Scholar   Burrell, J., Brooke, T., Beckwith,
    R.: Vineyard computing: sensor networks in agricultural production. IEEE Pervasive
    Computing 3(1), 38–45 (2004) Article   Google Scholar   Campbell, C.S.: Calibrating
    ECH2O soil moisture probes. Application note (2004), www.decagon.com (accessed
    on September 21, 2011) Cardell-Oliver, R., Kranz, M., Smettem, K., Mayer, K.:
    A Reactive Soil Moisture Sensor Network: Design and Field Evaluation. International
    Journal of Distributed Sensor Networks 1, 149–162 (2005) Article   Google Scholar   Chatzigiannakis,
    I., Mylonas, G., Kokkinos, P., Akribopoulos, O., Logaras, M., Mavrommati, I.:
    Implementing multiplayer pervasive installations based on mobile sensing devices:
    Field experience and user evaluation from a public showcase. J. Syst. Softw. 84(11),
    1989–2004 (2011) Article   Google Scholar   Crossbow Technology Inc., Mica2 Motes
    Specifications, http://www.xbox.com/ (accessed on September 21, 2011) von Eicken,
    T., Culler, D.E., Goldstein, S.C., Schauser, K.E.: Active messages: a mechanism
    for integrating communication and computation. In: Proc. 19th Annual International
    Symposium on Computer Architecture, Queensland, Australia, pp. 256–266 (1992)
    Google Scholar   Estrin, D., Culler, D., Pister, K., Sukhatme, G.: Connecting
    the physical world with pervasive networks. IEEE Pervasive Computing 1(1), 59–69
    (2002) Article   Google Scholar   Gay, D., Levis, P., von Behren, R., Welsh, M.,
    Brewer, E., Culler, D.: The nesC language: A holistic approach to networked embedded
    systems. SIGPLAN Not. 38(5), 1–11 (2003) Article   Google Scholar   Goumopoulos,
    C., Kameas, A., Oflynn, B.: Proactive Agriculture: An Integrated Framework for
    Developing Distributed Hybrid Systems. In: Proc. 4th Ubiquitous Intelligence and
    Computing, Hong Kong, China, pp. 214–224 (2007) Google Scholar   Guinard, A.,
    McGibney, A., Pesch, D.: A wireless sensor network design tool to support building
    energy management. In: Proc. 1st ACM Workshop on Embedded Sensing Systems for
    Energy-Efficiency in Buildings, New York, NY, USA, pp. 25–30 (2009) Google Scholar   Heinzelman,
    W.R., Chandrakasan, A., Balakrishnan, H.: Energy-Efficient Communication Protocol
    for Wireless Microsensor Networks. In: 33rd Annual Hawaii International Conference
    on System Sciences, Maui, Hawaii, USA, pp. 3005–3014 (2000) Google Scholar   López
    Riquelme, J.A., Soto, F., Suardíaz, J., Sánchez, P., Iborra, A., Vera, J.A.: Wireless
    sensor networks for precision horticulture in Southern Spain. Comput. Electron.
    Agric. 68(1), 25–35 (2009) Article   Google Scholar   Mannini, P., Anconelli,
    S.: Leaf temperature and water stress in strawberry. Acta Horticulturae 345, 55–61
    (1993) Google Scholar   Pierce, F.J., Elliott, T.V.: Regional and on-farm wireless
    sensor networks for agricultural systems in Eastern Washington. Comput. Electron.
    Agric. 61(1), 32–43 (2008) Article   Google Scholar   TinyOS, http://www.tinyos.net
    (accessed on September 21, 2011) Uschold, M., Gruninger, M.: Ontologies: Principles,
    Methods and Applications. Knowledge Eng. Rev. 11(2), 93–155 (1996) Article   Google
    Scholar   Wang, N., Zhang, N., Wang, M.: Review: Wireless sensors in agriculture
    and food industry-Recent development and future perspective. Comput. Electron.
    Agric. 50(1), 1–14 (2006) Article   Google Scholar   Download references Author
    information Authors and Affiliations Department of Information & Communication
    Systems Engineering, Aegean University, Samos, Greece Christos Goumopoulos Editor
    information Editors and Affiliations School of Engineering and Advanced Techn,
    AgHort Bldg A, Rm 3.77, Massey University (Turitea Campus), Palmerston North,
    4410, New Zealand Subhas C Mukhopadhyay Rights and permissions Reprints and permissions
    Copyright information © 2012 Springer Berlin Heidelberg About this chapter Cite
    this chapter Goumopoulos, C. (2012). An Autonomous Wireless Sensor/Actuator Network
    for Precision Irrigation in Greenhouses. In: Mukhopadhyay, S. (eds) Smart Sensing
    Technology for Agriculture and Environmental Monitoring. Lecture Notes in Electrical
    Engineering, vol 146. Springer, Berlin, Heidelberg. https://doi.org/10.1007/978-3-642-27638-5_1
    Download citation .RIS.ENW.BIB DOI https://doi.org/10.1007/978-3-642-27638-5_1
    Publisher Name Springer, Berlin, Heidelberg Print ISBN 978-3-642-27637-8 Online
    ISBN 978-3-642-27638-5 eBook Packages Engineering Engineering (R0) Share this
    chapter Anyone you share the following link with will be able to read this content:
    Get shareable link Provided by the Springer Nature SharedIt content-sharing initiative
    Publish with us Policies and ethics Download book PDF Sections References Abstract
    Chapter PDF References Author information Editor information Rights and permissions
    Copyright information About this chapter Publish with us Discover content Journals
    A-Z Books A-Z Publish with us Publish your research Open access publishing Products
    and services Our products Librarians Societies Partners and advertisers Our imprints
    Springer Nature Portfolio BMC Palgrave Macmillan Apress Your privacy choices/Manage
    cookies Your US state privacy rights Accessibility statement Terms and conditions
    Privacy policy Help and support 129.93.161.219 Big Ten Academic Alliance (BTAA)
    (3000133814) - University of Nebraska-Lincoln (3000134173) © 2024 Springer Nature"'
  inline_citation: '>'
  journal: Lecture Notes in Electrical Engineering
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: An autonomous wireless sensor/actuator network for precision irrigation in
    greenhouses
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - ElGammal M.
  - Eltoweissy M.
  citation_count: '5'
  description: We propose A3SAN, a framework for context-aware, resource-aware, autonomic,
    and adaptive management of Sensor-Actuator Networks (SANSs). We introduce new
    techniques for autonomic network configuration and management in reaction to context
    and resource dynamics. We propose a novel approach for quantitative context representation
    and management based on Potential Fields that allows us to quantify interesting
    events spatiotemporally, and simplifies the fusionand grouping of concurrent contexts.
    Adaptability is achieved by associating each node in the network with a dynamic
    Node Affinity Profile, which determines its suitability to serve each event type.
    Different configuration and management tasks such as clustering, task allocation,
    and role assignment are carried out using a distributed variant of the Affinity
    Propagation algorithm. A Fuzzy Logic based decision-making engine provides effective
    context analysis and conflict resolution between competing tasks, enabling swift
    adaptation to context and resource dynamics. Using simulation, we evaluate the
    efficacy of these techniques, and their ability to achieve our goal of efficient
    and autonomous management of SANs. © 2011 IEEE.
  doi: 10.1109/SASO.2011.43
  full_citation: '>'
  full_text: '>

    "IEEE.org IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account
    Personal Sign In Browse My Settings Help Access provided by: University of Nebraska
    - Lincoln Sign Out All Books Conferences Courses Journals & Magazines Standards
    Authors Citations ADVANCED SEARCH Conferences >2011 IEEE Fifth International...
    Towards Aware, Adaptive and Autonomic Sensor-Actuator Networks Publisher: IEEE
    Cite This PDF Mahmoud ElGammal; Mohamed Eltoweissy All Authors 3 Cites in Papers
    202 Full Text Views Abstract Document Sections I. Introduction II. Overview of
    A3san III. Experimental Results IV. Conclusion Authors Figures References Citations
    Keywords Metrics Abstract: We propose A3SAN, a framework for context-aware, resource-aware,
    autonomic, and adaptive management of Sensor-Actuator Networks (SANSs). We introduce
    new techniques for autonomic network configuration and management in reaction
    to context and resource dynamics. We propose a novel approach for quantitative
    context representation and management based on Potential Fields that allows us
    to quantify interesting events spatiotemporally, and simplifies the fusionand
    grouping of concurrent contexts. Adaptability is achieved by associating each
    node in the network with a dynamic Node Affinity Profile, which determines its
    suitability to serve each event type. Different configuration and management tasks
    such as clustering, task allocation, and role assignment are carried out using
    a distributed variant of the Affinity Propagation algorithm. A Fuzzy Logic based
    decision-making engine provides effective context analysis and conflict resolution
    between competing tasks, enabling swift adaptation to context and resource dynamics.
    Using simulation, we evaluate the efficacy of these techniques, and their ability
    to achieve our goal of efficient and autonomous management of SANs. Published
    in: 2011 IEEE Fifth International Conference on Self-Adaptive and Self-Organizing
    Systems Date of Conference: 03-07 October 2011 Date Added to IEEE Xplore: 31 October
    2011 ISBN Information: ISSN Information: DOI: 10.1109/SASO.2011.43 Publisher:
    IEEE Conference Location: Ann Arbor, MI, USA SECTION I. Introduction Embedding
    Wireless Sensor-Actuator Networks (SANs) into the physical environment, bridges
    the gap between users, software and physical resources, potentially transforming
    the emerging cyber-physical spaces into smart environments with enhanced safety,
    reliability and efficiency [3], [4], [5]. SAN nodes are heterogeneous by nature,
    and their collective capabilities allow them to sense the environment, carry out
    computational and mechanical tasks, communicate and collaborate to provide a large
    number of services allowing for new possibilities for interaction between users
    and their surroundings. However, with the aforementioned potential come new challenges.
    For the integration to be truly transparent, SANs must possess a high degree of
    autonomy. It is also desirable for such networks to operate unattended for extended
    periods of time, which raises the issues of power efficiency and system longevity.
    Also, some applications may have stringent Quality of Service (QoS) requirements
    that must be fulfilled by the system, exacerbating concerns about resource utilization
    efficiency, timeliness of response, and scalability. Finally, the possibility
    of having to serve a large number of users or events with conflicting interests
    concurrently requires the system to be aware of the context of each task, and
    to be able to adapt both proactively and reactively to the myriad of possible
    events with their widely varying context dynamics. A solid theoretical foundation
    that allows the integration of context-awareness generically into SAN s for future
    Cyber-physical systems (CPSs) is yet to be developed. In most existing approaches,
    the entities that constitute context are hardly formalized, and are usually provided
    as anecdotal evidence to support the case at hand [6]. It''s necessary to develop
    a uniform and generic context modeling and manipulation methodology that allows
    the system to represent context variables and apply reasoning to them in order
    to dynamically choose the appropriate course of action. Another issue is rigidity,
    where the system is hardwired to detect and react only to a specific set of context
    variables, without offering a clear and simple path for extension. We introduce
    the notion of Extensible Awareness, where system components utilize a common scheme
    for expressing the context entities they can monitor, consume, and react to. Explicit
    extension points are defined, allowing the operator to extend the system awareness
    of new context entities and fine-tune its reaction to them. Finally, a realization
    of a context-aware SAN cannot be considered successful without the proper mechanisms
    that allow it to react to context changes swiftly, adapt itself accordingly, and
    even predict future behavior. Those mechanisms must be power-conscious due to
    the resource constraints of SANs, and they should work in a distributed fashion
    without assuming global visibility of the system in order to provide fault-tolerant,
    autonomous operation, and a high degree of scalability. Figure 1 A3SAN components
    (right); Dynamic node affinity profile (left). Show All SECTION II. Overview of
    A3san Our objective in this work is to enable effective multimission SANs that
    are aware, adaptable, autonomic, efficient, and responsive to context and resource
    dynamics. Our work provides self-managing SANs capable of hosting multiple applications
    operating in different contexts with competing demands. Within each context, the
    network attempts to optimize service provisioning to the situation at hand, taking
    into consideration the efficient utilization of network resources. Show All In
    A3SAN we propose a novel context representation method based on Potential Fields
    [2] that allows us to quantify interesting events spatiotemporally. Each node
    in the system is governed by a dynamic Node Affinity Profile (Figure 1), which
    determines its suitability to serve each event type. Different configuration and
    management tasks, such as clustering, task allocation, and role assignment, are
    carried out using a distributed variant of the Affinity Propagation [1] algorithm.
    A Fuzzy Logic -based decision-making engine provides effective context analysis
    and conflict resolution between competing tasks for swift adaptation to dynamic
    context changes. Proactive adaptation to anticipated events is also possible using
    Machine Learning techniques. Figure 2 A SAN executing a border security application.
    IA and IB are two intrusion events. The arrows represent the node affinity toward
    each event, which is used to determine which task each node will be joining. Show
    All In A3SAN, context-awareness goes beyond affecting the operational state of
    the system to guiding its self-management, configuration, and optimization. Affinity
    Propagation -inspired techniques for self-management make the ability to serve
    multiple concurrent goals efficiently an intrinsic property of the network, one
    that doesn''t require special handling. Extensible awareness allows the system
    to evolve in terms of knowledge of new contexts and the ability to handle them
    effectively. SECTION III. Experimental Results Several experiments were conducted
    using simulation to verify the efficacy of the aforementioned techniques in the
    management of SANs. For instance, Figure 3 shows the efficiency of A3SAN clustering
    compared to other leading WSN clustering protocols. Figure 3 (left) shows that
    in a network of 3000 nodes, each node needn''t send more than 1.2 messages on
    average in order to execute the clustering protocol. This results in extending
    the network lifetime, as exhibited in Figure 3 (right). Figure 4 shows the efficiency
    of A3SAN''s task allocation, and its ability to outperform greedy heuristic approaches.
    Figure 3 For different network sizes, the left graph shows the number of messages
    needed for clustering to the number of nodes in the network, while the right graph
    shows the number of clustering rounds until the last nodes dies. Show All Figure
    4 For arbitrary node and task counts, the left figure shows the efficiency of
    A3SAN''s task allocation compared to a greedy heuristic approach, while the right
    figure shows the execution time of A3SAN''s algorithm compared to the greedy approach
    and exhaustive search. Show All SECTION IV. Conclusion We presented A3SAN, a context
    and resource -aware framework for adaptive, autonomic management of SANs. Our
    experimental results show the efficacy of our proposed approach for context representation
    and management using Potential Fields, and adaptive network configuration using
    Affinity Propagation, corroborating our hypothesis that this approach could indeed
    help us achieve more effective context management, autonomicity, and adaptability
    in SANs. Authors Figures References Citations Keywords Metrics More Like This
    An Energy Efficient Tour Construction Using Restricted k-Means Clustering Algorithm
    for Mobile Sink in Wireless Sensor Networks 2018 11th International Conference
    on Developments in eSystems Engineering (DeSE) Published: 2018 A New Clustering
    Algorithm Based on the Optimum One-Hop Distance in Wireless Sensor Networks 2008
    International Conference on Embedded Software and Systems Published: 2008 Show
    More IEEE Personal Account CHANGE USERNAME/PASSWORD Purchase Details PAYMENT OPTIONS
    VIEW PURCHASED DOCUMENTS Profile Information COMMUNICATIONS PREFERENCES PROFESSION
    AND EDUCATION TECHNICAL INTERESTS Need Help? US & CANADA: +1 800 678 4333 WORLDWIDE:
    +1 732 981 0060 CONTACT & SUPPORT Follow About IEEE Xplore | Contact Us | Help
    | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting
    | Sitemap | IEEE Privacy Policy A not-for-profit organization, IEEE is the world''s
    largest technical professional organization dedicated to advancing technology
    for the benefit of humanity. © Copyright 2024 IEEE - All rights reserved."'
  inline_citation: '>'
  journal: Proceedings - 2011 5th IEEE International Conference on Self-Adaptive and
    Self-Organizing Systems, SASO 2011
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: Towards aware, adaptive and autonomic sensor-actuator networks
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Karpinski M.
  - Cahill V.
  citation_count: '8'
  description: Wireless sensor, actuator networks distinguish themselves from wireless
    sensor networks by the need to coordinate actuators' actions, real-time constraints
    on communication and the frequently feedback-based nature of computation performed
    in the network. In this paper we propose a functional macro-programming language,
    SOSNA, that employs the stream programming paradigm to concisely specify data
    transformations in the network so that wireless sensor actuator network (WSAN)
    application developers can focus on higher-level control-oriented problems rather
    than on designing the way in which communication is organised in the network.
    SOSNA accommodates a broad class of WSAN coordination models, supports mobility
    and provides a means of employing feedback for distributed state maintenance.
    Program execution proceeds in rounds providing real-time guarantees on actuator
    decision making and synchronisation. In addition, static program semantics permit
    nodes to switch their radios off to conserve energy. Copyright 2008 ACM.
  doi: 10.1145/1402050.1402061
  full_citation: '>'
  full_text: '>

    "This website uses cookies We occasionally run membership recruitment campaigns
    on social media channels and use cookies to track post-clicks. We also share information
    about your use of our site with our social media, advertising and analytics partners
    who may combine it with other information that you’ve provided to them or that
    they’ve collected from your use of their services. Use the check boxes below to
    choose the types of cookies you consent to have stored on your device. Use necessary
    cookies only Allow selected cookies Allow all cookies Necessary Preferences Statistics
    Marketing Show details       skip to main content University of Nebraska Lincoln
    Browse About Sign in Register Journals Magazines Proceedings Books SIGs Conferences
    People Search ACM Digital Library Advanced Search Conference Proceedings Upcoming
    Events Authors Affiliations Award Winners HomeConferencesDMSNProceedingsDMSN ''08Stream-based
    macro-programming of wireless sensor, actuator network applications with SOSNA
    RESEARCH-ARTICLE SHARE ON Stream-based macro-programming of wireless sensor, actuator
    network applications with SOSNA Authors: Marcin Karpiński , Vinny Cahill Authors
    Info & Claims DMSN ''08: Proceedings of the 5th workshop on Data management for
    sensor networksAugust 2008Pages 49–55https://doi.org/10.1145/1402050.1402061 Published:24
    August 2008Publication History 6 citation 232 Downloads eReaderPDF DMSN ''08:
    Proceedings of the 5th workshop on Data management for sensor networks Stream-based
    macro-programming of wireless sensor, actuator network applications with SOSNA
    Pages 49–55 Previous Next ABSTRACT References Cited By Index Terms Recommendations
    Comments ABSTRACT Wireless sensor, actuator networks distinguish themselves from
    wireless sensor networks by the need to coordinate actuators'' actions, real-time
    constraints on communication and the frequently feedback-based nature of computation
    performed in the network. In this paper we propose a functional macro-programming
    language, SOSNA, that employs the stream programming paradigm to concisely specify
    data transformations in the network so that wireless sensor actuator network (WSAN)
    application developers can focus on higher-level control-oriented problems rather
    than on designing the way in which communication is organised in the network.
    SOSNA accommodates a broad class of WSAN coordination models, supports mobility
    and provides a means of employing feedback for distributed state maintenance.
    Program execution proceeds in rounds providing real-time guarantees on actuator
    decision making and synchronisation. In addition, static program semantics permit
    nodes to switch their radios off to conserve energy. References Mica2 mote datasheet.
    Crossbow Technology Inc. I. F. Akyildiz and I. H. Kasimoglu. Wireless sensor and
    actor networks: research challenges. Ad Hoc Networks, 2(4):351--367, 2004. E.
    A. Ashcroft, A. A. Faustini, R. Jagannathan, and W. W. Wadge. Multidimensional
    programming. Oxford University Press, Oxford, UK, 1995. Show All References Cited
    By View all Casadei R. (2023). Macroprogramming: Concepts, State of the Art, and
    Opportunities of Macroscopic Behaviour Modelling. ACM Computing Surveys. 55:13s.
    (1-37). Online publication date: 31-Dec-2024. https://doi.org/10.1145/3579353
    Dulay N, Micheletti M, Mostarda L and Piermarteri A. (2018). PICO-MP: De-centralised
    Macro-Programming for Wireless Sensor and Actuator Networks 2018 IEEE 32nd International
    Conference on Advanced Information Networking and Applications (AINA). 10.1109/AINA.2018.00052.
    978-1-5386-2195-0. (289-296). https://ieeexplore.ieee.org/document/8432254/ Liang
    J, Cao J, Liu R and Li T. (2016). Distributed Intelligent MEMS. ACM Computing
    Surveys. 49:1. (1-29). Online publication date: 31-Mar-2017. https://doi.org/10.1145/2926964
    Show All Cited By Index Terms Stream-based macro-programming of wireless sensor,
    actuator network applications with SOSNA Computer systems organization Architectures
    Distributed architectures Embedded and cyber-physical systems Real-time systems
    Software and its engineering Software notations and tools General programming
    languages Language types Software organization and properties Software system
    structures Distributed systems organizing principles Recommendations Corona based
    deployment strategies in wireless sensor network A wireless sensor network (WSN)
    is composed of a large number of sensor nodes, relay nodes, and a base station,
    that are deployed in an environment to collect information. WSNs are getting more
    widespread use and have been adapted to a vast array of ... Read More Evaluation
    of Reliable Data Transmission Protocol in Wireless Sensor-Actuator Network AINAW
    ''07: Proceedings of the 21st International Conference on Advanced Information
    Networking and Applications Workshops - Volume 02 In a wireless sensor-actuator
    network (WSAN), sensor and actuator nodes exchange messages in a wireless channel.
    Sensor nodes can deliver messages to only close nodes while actuator can deliver
    to distant nodes. Messages sent by nodes might be lost due ... Read More A Fault-Tolerant
    Model of Wireless Sensor-Actuator Network Advances on Heterogeneous Wireless Sensor
    Networks In a wireless sensor and actuator network (WSAN), a group of sensor nodes,
    actuators, and actuation devices is geographically distributed and linked by wireless
    networks. Sensor nodes gather information for an event occurring in the physical
    world and ... Read More Comments 20 References View Table Of Contents Footer Categories
    Journals Magazines Books Proceedings SIGs Conferences Collections People About
    About ACM Digital Library ACM Digital Library Board Subscription Information Author
    Guidelines Using ACM Digital Library All Holdings within the ACM Digital Library
    ACM Computing Classification System Digital Library Accessibility Join Join ACM
    Join SIGs Subscribe to Publications Institutions and Libraries Connect Contact
    Facebook Twitter Linkedin Feedback Bug Report The ACM Digital Library is published
    by the Association for Computing Machinery. Copyright © 2024 ACM, Inc. Terms of
    Usage Privacy Policy Code of Ethics"'
  inline_citation: '>'
  journal: 5th International Workshop on Data Management for Sensor Networks, DMSN'08,
    In Conjunction with the 34th International Conference on Very Large Data Bases
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: Stream-based macro-programming of wireless sensor, actuator network applications
    with SOSNA
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  authors:
  - Ngai E.
  - Lyu M.
  - Liu J.
  citation_count: '44'
  description: 'Wireless sensor-actuator network (WSAN) comprises of a group of distributed
    sensors and actuators that communicate through wireless links. Sensors are small
    and static devices with limited power, computation, and communication capabilities
    responsible for observing the physical world. On the other hand, actuators are
    equipped with richer resources, able to move and perform appropriate actions.
    Sensors and actuators cooperate with each other: While sensors perform sensing,
    actuators make decisions and react to the environment with the right actions.
    WSAN can be applied in a wide range of applications, like environmental monitoring,
    battlefield surveillance, chemical attack detection, intrusion detection, space
    missions, etc. Since actuators perform actions in response to the sensed events,
    real-time communications and quick reaction are necessary. To provide effective
    applications by WSAN, two major problems remain: How to minimize the transmission
    delay from sensors to actuators, and how to improve the coordination among the
    actuators for fast reaction. To tackle these problems, we designed a real-time
    communication framework to support event detection, reporting, and actuator coordination.
    This paper explores the timely communication and coordination problems among the
    sensors and actuators. Moreover, we proposed two self-organized and distributed
    algorithms for event reporting and actuator coordination. Some preliminary results
    are presented to demonstrate the advantages of our approach. © 2006 IEEE.'
  doi: null
  full_citation: '>'
  full_text: '>'
  inline_citation: '>'
  journal: IEEE Aerospace Conference Proceedings
  limitations: '>'
  relevance_score1: 0
  relevance_score2: 0
  title: A real-time communication framework for wireless sensor-actuator networks
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
