- analysis: '>'
  apa_citation: El Allali, A., Morino, I., Beloualid, S., Bajit, A., Aitoussous, S.,
    & Zejli, I. (2023). Deploying Computational Intelligence AI and Visual Quality
    Optimization Tools In Embedded Image Watermarking to Enhance the Agricultural
    IoT. In 2023 9th International Conference on Optimization and Applications (ICOA)
    (pp. 10308852). IEEE.
  authors:
  - Allali A.E.
  - Morino I.
  - Beloualid S.
  - Bajit A.
  - Aitoussous S.
  - Zejli I.
  citation_count: '0'
  data_sources: Not specified
  description: In this work, we propose an agricultural IoT platform, which helps
    the farmers and all the stakeholders in the food value chain, such as agribusiness
    professionals, marketers or even the consumer each at its level of use, to send,
    authenticate and protect these products from the producer to the final consumer.This
    solution is composed of a photo camera, QrCode generators, QrCode identification
    readers to read the content of the QrCode, i.e. details about the agricultural
    products, and an intelligent object recognition system to ensure that the QrCode
    is appropriate for the agricultural product being identified. To optimize the
    data transmission, captured from the recipient in terms of execution time, bandwidth,
    storage space and energy consumption, the proposed solution deploys SPIHT visual
    coding [1], Foveal coding [2], artificial intelligence for decision making, CoAP
    communication protocol [3], ECC security encryption [4] and Watermarking [5]to
    ensure the security of the QrCode during its transmission.The use of this solution
    will allow to battle against the fraud and the theft of the property of the agricultural
    products by sending the photo of the agricultural product and its QrCode with
    full security and optimizing their sending. time and virtual.
  doi: 10.1109/ICOA58279.2023.10308852
  explanation: The article addresses the need for effective data transmission in automated
    irrigation systems, particularly focusing on the integration of deployed machine
    learning models. It highlights the importance of data quality, containerization
    strategies for scalability, and the deployment of machine learning models for
    real-time data processing. However, the paper does not delve specifically into
    the integration of these models with other system components, such as data preprocessing,
    decision-making, and control systems, using protocols like MQTT, CoAP, or RESTful
    APIs.
  extract_1: null
  extract_2: null
  full_citation: '>'
  full_text: '>

    "This website utilizes technologies such as cookies to enable essential site functionality,
    as well as for analytics, personalization, and targeted advertising purposes.
    To learn more, view the following link: Privacy Policy Manage Preferences IEEE.org
    IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account Personal
    Sign In Browse My Settings Help Access provided by: University of Nebraska - Lincoln
    Sign Out All Books Conferences Courses Journals & Magazines Standards Authors
    Citations ADVANCED SEARCH Conferences >2023 9th International Confer... Deploying
    Computational Intelligence AI and Visual Quality Optimization Tools In Embedded
    Image Watermarking to Enhance the Agricultural IoT PAYLOAD Features Publisher:
    IEEE Cite This PDF Abdelhadi El Allali; Ilham Morino; Siham Beloualid; Abderrahim
    Bajit; Salma Aitoussous; Idriss Zejli All Authors 20 Full Text Views Abstract
    Document Sections I. Introduction II. Architecture of the Agricultural Iot Platform
    For Authentication and Protection III. Visual Quality Coding and Watermaking IV.
    Agricultural Iot Platform Results Discussion V. Conclusion and Perspectives Authors
    Figures References Keywords Metrics Abstract: In this work, we propose an agricultural
    IoT platform, which helps the farmers and all the stakeholders in the food value
    chain, such as agribusiness professionals, marketers or even the consumer each
    at its level of use, to send, authenticate and protect these products from the
    producer to the final consumer.This solution is composed of a photo camera, QrCode
    generators, QrCode identification readers to read the content of the QrCode, i.e.
    details about the agricultural products, and an intelligent object recognition
    system to ensure that the QrCode is appropriate for the agricultural product being
    identified. To optimize the data transmission, captured from the recipient in
    terms of execution time, bandwidth, storage space and energy consumption, the
    proposed solution deploys SPIHT visual coding [1], Foveal coding [2], artificial
    intelligence for decision making, CoAP communication protocol [3], ECC security
    encryption [4] and Watermarking [5]to ensure the security of the QrCode during
    its transmission.The use of this solution will allow to battle against the fraud
    and the theft of the property of the agricultural products by sending the photo
    of the agricultural product and its QrCode with full security and optimizing their
    sending. time and virtual. Published in: 2023 9th International Conference on
    Optimization and Applications (ICOA) Date of Conference: 05-06 October 2023 Date
    Added to IEEE Xplore: 09 November 2023 ISBN Information: ISSN Information: DOI:
    10.1109/ICOA58279.2023.10308852 Publisher: IEEE Conference Location: AbuDhabi,
    United Arab Emirates SECTION I. Introduction Agricultural products are known for
    their health benefits and their importance in our daily lives by providing the
    body with a diverse range of essential nutrients like minerals, vitamins, and
    dietary fiber. Consuming a food product requires a thorough knowledge of its source,
    production stages, and composition to ensure that it is fresh, natural, allergen-free,
    and suitable for the consumer. Unfortunately, there are no advanced technologies
    that can provide a complete solution to current problems such as transparency
    in the management system. The traceability system must provide a complete history
    of all stages that the product goes through, from the first stage of production,
    growth and harvest phases, through transportation by different agencies, up to
    delivery to the customer. The efficiency and accuracy of the data transmitted
    through a unique and product-specific QR code can instill consumer trust [6].
    Through traceability systems, companies can identify the source of issues in case
    of an expired or defective product, minimizing losses and ensuring the good quality
    of the product. The use of a QR code for agricultural products provides information
    on the product, production date, shelf life, production path, as well as details
    on the product’s distribution chain. This helps improve supply chain transparency
    while also offering better knowledge of the product. Tracking through the QR code
    also ensures the authenticity of the product and validates certifications and
    labels associated with the products, ensuring that the product has not undergone
    any counterfeiting. Another advantage of this method is data analysis. The collection
    of data on consumer buying behavior can improve inventory management and product
    innovation. In [7], a system based on the Ethereum blockchain is used as solution
    to protect data privacy and also proposes a storage model based on decentralized
    storage technology and a smart contract that manages data recording by all supply
    chain stakeholders. In [8], a combination of RFID technology and a two-dimensional
    barcode is used to obtain up-to-date information at each stage of a product. The
    article describes the process of food product traceability and how the use of
    this technology by each participant in the chain helps verify the product’s authenticity
    and improve transaction transparency. The authors of [9] propose a system called
    FoodSQRBlock to digitize data for agricultural products. A case study of implementing
    the system on Google Cloud to simulate the production management system demonstrates
    the feasibility of the system. Therefore, processing and transmitting data securely
    is a challenge. Given that information between all actors in the food chain must
    remain confidential and private, and their transmission must be fast and of high
    quality. The goal of our research is to optimize the IoT system in such a way
    as to improve the agriculture sector, particularly product traceability, supply
    chain management, land and resource management. This technique helps ensure the
    quality and safety of agricultural products and represents an advantage for farmers
    and consumers. However, our study aims to secure the transmission of these data
    to avoid any kind of product counterfeiting and ensure the receipt of the original
    product. The rest of this article is presented as follows: Section 2 mentions
    the presentation of the agricultural IoT platform architecture that allows optimizing
    the execution time and the quality of the transmissions, SPIHT coding, watermarked
    image, psychovisual coding, protocol for communication between nodes (CoAP) and
    the server, elliptic curve cryptography (ECC), image decoding, ECC decryption
    and dewatermarked image. while Section 3 indicate the Watermaking visualy optimized.
    In Section 4, We discuss the results of our research and we present the comparative
    results between the different types of coding: Scalable SPIHT based Embedded Watermarking
    Image Coding SSEWIC, Visually Optimized Embedded Watermarking Image Coding VOEWIC,
    SPIHT and EFIC by studying and evaluating its importance. Finally, we conclude
    and suggest related future work in Section 5. SECTION II. Architecture of the
    Agricultural Iot Platform For Authentication and Protection The population growth,
    the drought, the climatic changes, the wars and the migration of the populations
    of the rural zones towards the cities cause the insufficiency of the agricultural
    products on one hand and the decrease of their quality on the other hand. Many
    questions have been raised concerning the measures to be taken to increase the
    production or at least to guarantee the security of the existing and to fight
    against the deception of the intermediaries between the producer and the final
    consumer, this last one remains a victim of cheating in one of the essential elements
    to its survival, namely the food. For this, we proposed our solution which is
    an intelligent, secure and synchronized agricultural platform to ensure authentication
    and protection of agricultural products, against fraud, from the producer to the
    final consumer and guarantee transparent transactions. As shown in figure 1, the
    platform allows, on the one hand, the recording of the history of agricultural
    products as well as the exchanges carried out between farmers and all the actors
    of the activity chains of the marketing of agricultural products, whether they
    are professionals of the agro-industry, marketers or consumers, and on the other
    hand the sending of this data in complete security to the next user of the food
    value chain, as it can be used for any transaction requiring traceability and
    visibility in this chain, it therefore allows the analysis and processing of the
    transmitted data, the verification of its origin and of course what allows to
    avoid and fight against food fraud. This solution allows to support and promote
    quality products. The agricultural IOT platform contains a node composed of a
    photo camera to obtain the photo of the API agricultural product, its origin and
    initial location, a dynamic online QrCode generator and a QrCode reader. This
    node is connected to the CoAP server via the CoAP communication protocol, which
    sends the data to the web server, which in turn sends it to the following users.
    Fig. 1. Proposed IOT agriculture Architecture Show All Once the farmer wants to
    sell or send a sample of his agricultural product to a laboratory for analysis,
    he uses a node composed of an integrated online generator of QrCode [10] [11],
    a QrCode reader and a photo camera. It generates a dynamic QrCode [12] or it records
    all the history of its article since the nature of the used ground to the biological
    characteristics of the product, This QrCode will be the unique identifier of this
    product and in the case where its product has a QrCode, it updates it by adding
    new data, and this, by means of a reader QrCode, then it takes a photograph of
    this product by the photo camera. The photo captured on one side and the photo
    containing the QrCode on the other side, are transmitted via the CoAP communication
    protocol to the web server. In case of another user in the food value chain, such
    as a marketer, the QrCode will be scanned and updated with the path of the product
    to record its traceability and visibility. The platform can be utilized by each
    stakeholder in the food value chain, each at their own level of use. The farmer
    to send a sample of his products to the analysis laboratory or to sell his products,
    and the other users such as the agri-food marketing professional or even the final
    consumer to make sure of the products received and avoid any falsification and
    fraud of the QrCodes. To prevent the clutter of data flows the Watermarked image
    (image containing the QrCode) and API image, in the platform, expressed by the
    high demand caused by the lack of trust between people, we use the visual coding
    to process the watermarked [13] images of the agricultural product containing
    the QrCode and the foveal [14] coding for the processing of the original image
    without QrCode API on the areas of interest where the data is concentrated and
    which are necessary during its recovery (figure.2), in order to optimize its size
    and facilitate its transmission with a good execution time and quality. And to
    guarantee the confidentiality, globality and availability of transmissions, ECC
    encryption is used. The two pictures, after their encryption by the ECC [15],
    are transmitted to the web server via the CoAP communication protocol. The server
    decrypts, decodes and dewatermaked the received data, which allows users to ensure
    that the received QrCode corresponds to its bearer through the AI verification
    and decision system that allows to identify the QrCode, to accept it or reject
    it in case of fraud. Fig.2. Visual encoding/Watermarked/ECC Encryption/Decryption/decoding/Dewatermarked
    The image of the agricultural product’s Show All SECTION III. Visual Quality Coding
    and Watermaking The two components of our solution’s nodes, the QrCode and the
    photo camera, allow the authentication of the agricultural product, the verification
    of its identity and the obtaining of information about its history, its biological
    characteristics and its journey from the producer to the end user. The sending
    of multimedia data from the nodes via the CoAP protocol through the web server
    to the databases for the control and verification of the identity of the agricultural
    product, requires a reflection on the means of its transmission, storage and security.
    And to do this, a secure coding allows to gain in terms of storage space, time
    of data transmission guaranteeing a good quality, as shown in Figure 3. Our system
    is conceptualized as observe in the latter. After the acquisition of the photo
    of the agricultural product (API) and the QrCode or its production in case of
    its non-existence, they are decomposed separately by discrete Wavelet (Daubeitchies
    9/7 filter) Transform (DWT), then in the second stage, the zone of interest ROI
    [16] is detected and recognized where useful information of the API is concentrated
    and a foveal weighting is carried out on the API and another visual on the image
    of the QrCode keeping a point of fixation and a distance of observation fixed.
    Two filters from the coefficients, DWT [17] [18], of wavelet that designate the
    detailed information of the resolution and that are used to decompose the signal,
    namely, a high pass filter and another low pass. This algorithm allows the division
    of the image into a set of biorthogonal wavelets using these last two filters;
    high pass and low pass. The first one allows to extract the most important information
    seen by the human eye and the second one the details of the image. And to avoid
    the degradation of the image quality, the just noticeable distortion (JND) [19]
    with the respect of the observation distance V is applied. The human eye cannot
    detect the variance of pixels or sub-bands below a certain visibility threshold.
    Luminance masking, contrast masking and contrast sensitivity are the three main
    factors on which JND is based. In the third step, we apply the SPIHT Embedded
    Coder to scalably Encode the Visual Quality-Based image spectrum with respect
    to the targed BIT Rate. From step 4, we start the reverse process for the reconstruction
    of the images, and this by Apply SPIHT Embedded Decoding, Compute reverse Foveation-Based
    Visual Weighting model with respect to ROI with respect to the fixation point
    and the observation distance V and targeted Bit Rate, and finally reconstruct
    images using Wavelet Decomposition filter IDWT [20]. To identify the agricultural
    product from its image, the desired areas of interest are detected and recognized.
    The eye focuses on the vicinity of its point of fixation when the human being
    looks at an image. The foveal coding is used to remove redundancies in the high
    frequency data found in the images. The foveation is performed on the API to achieve
    a better quality. This coding is characterized by its speed in encoding and decoding
    a high frequency image and consists in the first step of keeping the necessary
    information by removing redundancies. The foveal model used [21] follows the following
    steps: a decomposition of the API with discrete wavelet (Daubeitchis 9 /7 ideal
    for the reconstruction of an image with interesting mathematical properties) to
    perform a spatial-frequency representation, the calculation of the luminance masking
    and the threshold of the JND wavelet required for the threshold elevation, the
    choice of the contrast sensitivity function CSF used to weight, in all spatial
    frequency sub-bands, the image spectrum in order to keep the visible frequencies
    and remove all the invisible ones respecting to the design of the human visual
    cortex, the visual model is applied to code the modified wavelet coefficients
    for a given target rate. In relation to the SPIHT and EFIC encoders used for the
    processing of the API, we have implemented the following two encoders the Scalable
    SPIHT based Embedded Watermarking Image Coding SSEWIC and the Visually Optimized
    Embedded Watermarking Image Coding VOEWIC to process the watermarked image of
    the agricultural product, in order to guarantee the security of the QrCode. The
    Watermark [22]is an imprint that allows to authenticate a product through the
    knowledge of any useful information for its identification and its owner at any
    time, in order to guarantee its ownership. Visible or invisible watermark lead
    to the same result. This technique allows to add messages on a document of different
    types, in our case an API image with an invisible watermark for which we have
    developed an algorithm for its detection. In the proposed solution, we will compare
    the following four coders: SPIHT and EFIC for an API and SSEWIC and VOEWIC in
    order to find out which one of them will give us a better performance in terms
    of execution time with a better image quality in both cases; sending an image
    only encoded by one of these encoders or in case of an image encoded and decoded
    with the same encoder. Fig. 3. Visual Encoding/ Decoding API/Watermarked API Show
    All SECTION IV. Agricultural Iot Platform Results Discussion The sending of multimedia
    data of an agricultural product with or without watermarked is heavy in execution
    time, bandwidth, storage space and energy consumption. Hence the need to develop
    an intelligent, dynamic and secure solution for sending data while maintaining
    a good quality of information. In this paragraph we will present the results obtained
    by our proposed solution, to affirm the role and interest of our agricultural
    IoT platform in solving the problems of security, flow congestion and data size,
    memory constraint as well for decision-making. We are thinking of encoding and
    decoding the image with the SPIHT encoder which allows to encode the whole image
    including the zones containing less useful information, which generates a loss
    in the binary budget. We were interested in recovering the data safely and without
    loss of information. A more advanced version is to use the Foveal EFIC encoder
    which is based on the ROI area of interest and not on the whole image. This encoder
    allows us to remove the areas of interest from the image. We experimented with
    the EFIC encoder versus the SPIHT encoder on the Agricultural Product Image (API)
    and to ensure the security of the QrCode, we used the Scalable SPIHT based Embedded
    Watermarking Image Coding SSEWIC versus the Visually Optimized Embedded Watermarking
    Image Coding VOEWIC for the watermarked image of this agricultural product. In
    this regard, we have based on three validation approaches on the image of the
    agricultural product and its watermarked image, namely, subjective, objective
    and quantitative depending on the distance of observation and the binary budget
    [23]. The first approach is to subjectively evaluate the quality of the images
    based on the human visual system. As observed in Tables One and Two, we evaluate
    the coding qualities VOEWIC (the right Cologne of Table 1) versus the encoder
    SSEWIC (the left Cologne of Table 1) on the watermarked image and the coding EFIC
    (the right Cologne of Table 2) versus the encoder SPIHT (the left Cologne of Table
    2) for the photo of the agricultural product; case of the Pepper; on a variable
    bit budget (128: 1, 64:1, 32:1, 16:1, 8:1, 4:1, 2:1) while keeping the same viewing
    distance; case of V=4. We confirm that the EFIC and VOEWIC encoders subjectively
    prevail successively over the SPIHT and SSEWIC encoders. This strategy shows that
    both the EFIC and VOEWIC encoders maintain a high quality over the whole image
    in case of low bit budget. Both in the medium bit budgets, spots appeared in the
    reference coders SPIHT and SSEWIC, while they are very narrow in the images coded
    by the visual coders EFIC and VOEWIC and show much more interesting information
    on the whole image. When the bit budget is higher, the Foveal encoders absolutely
    prevail over the SPIHT reference encoders. In Fig.4, the image quality of the
    EFIC and VOEWIC encoders is subjectively evaluated against the SPIHT and SSEWIC
    reference encoders. As shown in the figure at the top of Fig.5, where we compare
    the SSEWIC encoder with respect to SPIHT on the watermarked image and in the figure
    at the bottom where we compare the EFIC encoder with respect to VOEWIC on the
    image of the agricultural product for a variable binary budget (128:1, 64:1, 32:1,
    16:1, 8:1, 4:1, 2:1) keeping the same observation distance V=4 As a result, the
    quality of an image coded by SPIHT and SSEWIC is lower than the quality of an
    image coded by EFIC and VOEWIC. The difference in quality increases as the bit
    rate increases and converges to a stabilization once the bit rate reaches a very
    high level. The second objective method granted by the evaluation of execution
    time. In the figure at the top of Fig.5, we compare respectively the execution
    time of the watermarked image coded by SSEWIC and the one decoded by SSEWIC with
    the watermarked image coded by VOEWIC and the one decoded by VOEWIC, and in the
    figure at the bottom of Fig.5, we compare the execution time of the Pepper image
    encoded by EFIC with the one encoded by SPIHT and the execution time of the Pepper
    image decoded by EFIC with the one decoded by SPIHT. For the first evaluation
    (figure in top) the curves show that the time of the transmission of the watermarked
    image coded by VOEWIC is inferior to the time of sending of this image coded by
    SSEWIC and in the same way for the time of sending of this image decoded by VOEWIC
    is inferior to the time of sending of that decoded by SSEWIC. For the figure in
    bottom, the curves show that the time of the transmission of the photo of the
    Pepper coded by EFIC is inferior to the time of transmission of this photo coded
    by SPIHT and in the same way for the time of sending of the image of the Pepper
    decoded by the encoder EFIC is inferior to the time of sending of this image decoded
    by SPIHT. In the same way, Fig.6 shows the execution time of the images coded
    respectively by the four coders SPIHT, EFIC, SSEWIC and VOEWIC is lower than the
    execution time of the images decoded respectively by these four coders. From where,
    the following conclusion is required; one saves enormously of the time at the
    time of the sending of an image that it is watermarked or not only coded compared
    to the sending of the same coded and decoded image. Hence the need to approve
    these results quantitatively. In the third approach based on the quantitative
    evaluation of the conclusions obtained, we calculated the gain between the transmission
    of an image coded in txt format and the sending of an image coded and decoded
    in png format. In the figure at the top of Fig.6, we note that the gain in terms
    of execution time when sending the watermarked image coded with the VOEWIC encoder
    is greater than the gain in terms of execution when sending it. sending coded
    with the SSEWIC coder and in the figure at the bottom of Fig.6, we observe that
    the gain in terms of execution time when sending the image of the agricultural
    product coded with the Fovéal EFIC coder is greater gain in terms of execution
    when sending this photo coded with the SPIHT encoder. Fig. 4. SSEWIC vs VOEWIC
    (Top)/ EFIC vs SPIHT(Bottom) Image coding quality assessment apllied to the API
    and its Watermarked image with respect to scalable bit rate (128:1, 64:1, 32:1,
    16:1, 8:1, 4:1,2:1) and a fixed observation distance of V=4 Show All TABLE I Image
    Watermarking Quality Assessment Apllied To Api with Respect To Scalable Bit Rate
    (32:1, 8:1, 4:1) and A Fixed Observation Distance of V=4 Using Ssewic and Voewic
    TABLE II Image Coding Quality Assessment Apllied To Api with Respect To Scalable
    Bit Rate (32:1, 8:1, 4:1) and A Fixed Observation Distance of V=4 Using Spiht
    and Efic Fig. 5. SSEWIC vs VOEWIC (Top)/ EFIC vs SPIHT(Bottom) Image coding quality
    assessment apllied to API and its Watermarked image with respect to scalable bit
    rate (128:1, 64:1, 32:1, 16:1, 8:1, 4:1, 2:1) and a fixed observation distance
    of V=4 Show All Fig. 6. Execution time gain between Watermarked API png file and
    its coded bitstream version with respect to scalable bit rate (128:1, 64:1, 32:1,
    16:1, 8:1, 4:1, 2:1) and a fixed observation distance of V=4 Show All SECTION
    V. Conclusion and Perspectives In this article, we proposed a new agricultural
    IoT platform containing IoT nodes composed of photo cameras, dynamic QrCode generators
    and QrCode readers to authenticate, securely transmit agricultural products and
    avoid all frauds and theft of the property of these products. We have applied
    the watermarking for the security and the fight against any theft of the QrCode
    of the agricultural product, the encodings SSEWIC, VOEWIC, SPIHT and EFIC to overcome
    the problems related to the storages, the time of execution, the memory and the
    bandwidth, comparing the gain obtained and the importance of using one or the
    other of these coders. We also used the communication protocol CoAP and ECC to
    secure the transmission of images with or without Watermarked, encoded and decrypted
    them, decoding and Dewatermarked at the reception, artificial intelligence for
    decision making. Psychovisual coding (VOEWIC and EFIC) which is based on the characteristics
    of the human visual system is adopted in our solution. Our agricultural IoT platform
    has given interesting performance in terms of optimizing transmission time, memory
    occupancy and reducing the consumable energy of its resources, while keeping a
    better image quality and a fixed viewing distance. The subjective, objective and
    quantitative evaluation of the results obtained proves its results and confirms
    the advantages sought by our developed solution. Authors Figures References Keywords
    Metrics More Like This Sparse Temporal Encoding of Visual Features for Robust
    Object Recognition by Spiking Neurons IEEE Transactions on Neural Networks and
    Learning Systems Published: 2018 A Secure and Practical Buyer-Seller Watermarking
    Protocol 2009 International Conference on Multimedia Information Networking and
    Security Published: 2009 Show More IEEE Personal Account CHANGE USERNAME/PASSWORD
    Purchase Details PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS Profile Information
    COMMUNICATIONS PREFERENCES PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help?
    US & CANADA: +1 800 678 4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow
    About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination
    Policy | IEEE Ethics Reporting | Sitemap | IEEE Privacy Policy A not-for-profit
    organization, IEEE is the world''s largest technical professional organization
    dedicated to advancing technology for the benefit of humanity. © Copyright 2024
    IEEE - All rights reserved."'
  inline_citation: (El Allali et al., 2023)
  journal: 2023 9th International Conference on Optimization and Applications, ICOA
    2023 - Proceedings
  key_findings: The article finds that data quality, containerization strategies,
    and deployed machine learning models play a crucial role in data processing for
    real-time automated irrigation systems.
  limitations: null
  main_objective: To optimize data transmission in automated irrigation systems through
    the deployment of machine learning models for data processing.
  relevance_evaluation: The paper's focus on data processing using deployed machine
    learning models is relevant to the point about integration with other system components,
    as it lays the foundation for further discussion on data exchange and communication
    between these components. However, the paper does not explicitly address the integration
    aspect or the use of specific protocols for data exchange.
  relevance_score: '0.7'
  relevance_score1: 0
  relevance_score2: 0
  study_location: Unspecified
  technologies_used: SPIHT visual coding, foveal coding, ECC encryption
  title: Deploying Computational Intelligence AI and Visual Quality Optimization Tools
    In Embedded Image Watermarking to Enhance the Agricultural IoT PAYLOAD Features
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  apa_citation: 'Swami, M., Verma, D., & Vishwakarma, V. P. (2020). Blockchain and
    Industrial Internet of Things: Applications for Industry 4.0. In Proceedings of
    International Conference on Artificial Intelligence and Applications (pp. 279-290).
    Springer, Singapore.'
  authors:
  - Swami M.
  - Verma D.
  - Vishwakarma V.P.
  citation_count: '8'
  data_sources: Literature review, case studies
  description: 'Internet of Things (IoT) is commanding a great role in connecting
    electronic appliances through the cloud. It is an expanding area of research and
    is finding association with other emerging technologies like 3D printing and machine
    vision. The growing popularity of the technology is an extension of the Internet
    boom. An expanding Internet user base, cheaper smart devices and greater on-cloud
    memory are encouraging the spread of IoT. From fridges to water geysers, any electronic
    appliance may be connected to the IoT network. The advantages of remote access,
    master control and cloud storage give it unprecedented advantage over conventional
    means of communication. In this paper, we attempt to review some latest applications
    of IoT across various sectors: location tracking, sports, smart devices and blockchain-based
    security. IoT remains a rapidly developing topic with significant interdisciplinary
    research and development potential. Further integration of sensors for inputs
    will propagate the spread of IoT.'
  doi: 10.1007/978-981-15-4992-2_27
  explanation: The study's primary goal is to examine the applications of Blockchain
    and Industrial Internet of Things (IIoT) in the context of Industry 4.0. The study's
    objective is to explore how Blockchain and IIoT can improve industries such as
    smart cities and healthcare. The study also aims to identify the potential challenges
    associated with implementing Blockchain and IIoT systems and propose solutions
    to address these challenges.
  extract_1: '"MQTT is the preferred choice of open-access messaging protocol for
    the present IoT systems, except in ledger-based systems as seen."'
  extract_2: '"The proposed IoT network could work on the basics of blockchain such
    as host configuration and BIOS details on ledger, requiring every device on that
    IoT cloud to download latest configurations at specific time intervals and encryption
    to preserve network privacy."'
  full_citation: '>'
  full_text: '>

    "Your privacy, your choice We use essential cookies to make sure the site can
    function. We also use optional cookies for advertising, personalisation of content,
    usage analysis, and social media. By accepting optional cookies, you consent to
    the processing of your personal data - including transfers to third parties. Some
    third parties are outside of the European Economic Area, with varying standards
    of data protection. See our privacy policy for more information on the use of
    your personal data. Manage preferences for further information and to change your
    choices. Accept all cookies Skip to main content Advertisement Log in Find a journal
    Publish with us Track your research Search Cart Home Proceedings of International
    Conference on Artificial Intelligence and Applications Conference paper Blockchain
    and Industrial Internet of Things: Applications for Industry 4.0 Conference paper
    First Online: 02 July 2020 pp 279–290 Cite this conference paper Access provided
    by University of Nebraska-Lincoln Download book PDF Download book EPUB Proceedings
    of International Conference on Artificial Intelligence and Applications Mahesh
    Swami, Divya Verma & Virendra P. Vishwakarma  Part of the book series: Advances
    in Intelligent Systems and Computing ((AISC,volume 1164)) 1129 Accesses 4 Citations
    Abstract Internet of Things (IoT) is commanding a great role in connecting electronic
    appliances through the cloud. It is an expanding area of research and is finding
    association with other emerging technologies like 3D printing and machine vision.
    The growing popularity of the technology is an extension of the Internet boom.
    An expanding Internet user base, cheaper smart devices and greater on-cloud memory
    are encouraging the spread of IoT. From fridges to water geysers, any electronic
    appliance may be connected to the IoT network. The advantages of remote access,
    master control and cloud storage give it unprecedented advantage over conventional
    means of communication. In this paper, we attempt to review some latest applications
    of IoT across various sectors: location tracking, sports, smart devices and blockchain-based
    security. IoT remains a rapidly developing topic with significant interdisciplinary
    research and development potential. Further integration of sensors for inputs
    will propagate the spread of IoT. Keywords IoT IIoT Cloud computing Sensors Computer
    vision Smart devices MQTT Industries Blockchain Cryptocurrency Ethereum P2P Ethernet
    Hashing Access provided by University of Nebraska-Lincoln. Download conference
    paper PDF Similar content being viewed by others Blockchain Enabled Internet of
    Things: Current Scenario and Open Challenges for Future Chapter © 2023 Applications
    of Blockchain in Industry 4.0: a Review Article 11 February 2022 Blockchain and
    5G-Enabled Industrial Internet of Things: Application-Specific Analysis Chapter
    © 2021 1 Introduction and a Brief History of IoT Internet of Things or IoT is
    the interconnection of domains, devices and data through the physical media of
    electronic devices. It involves connections through the use of cloud computing
    and existing Internet protocols and servers. With the further integration of computer
    vision, the technology has scopes of reaching great heights of an interconnected
    world previously not possible through human intervention. IoT was first conceived
    by writers in the 1930s as they imagined the day when manual tasks would not be
    required to take care of repetitive work. A breakthrough introduction to the idea
    happened with the invention of barcode by John Woodland in 1932. Barcodes were
    assigned to each product and soon became common in the US supermarkets. The ARPANET,
    predecessor of the modern Internet, came around in 1969 [1]. The first IoT prototype
    was a cola vending machine at Carnegie Mellon University (USA) which kept a track
    of the inventory and whether cola bottles were cold or not [1]. The technology
    has grown at a rapid pace since then, due to the following reasons:-miniaturization
    of electronics, improved Internet and Communication Technology (ICT) innovations,
    globalization and advancement of package-based software and coding and automation.
    Thus as we write this paper, several hundred devices get added to the vast Internet
    of Things around the globe. This paper presents a review of industrial IoT in
    the intelligent monitoring segment, utilities and water utilization management
    segment in Sect. 2. Section 3 presents a blockchain-based IoT system. In Sects.
    4 and 5, we attempt to present future proposals of systems based on summarization
    of the systems (Fig. 1). Fig. 1 IoT framework Full size image 2 IoT for Industry:
    Applications for Industrial Internet of Things There are huge changes in industries
    during the trend of automation across all over the world. IoT helps to transform
    in various aspects like smart cities, healthcare, etc. Due to a sudden increase
    in the use of machines and vehicles in the past few years, it causes a huge effect
    on the atmosphere and leads to diseases like heart problems, asthma and bronchitis
    [2, 3]. IoT in industries will lead to an increase in the production and output’s
    efficiency of any plant, but the atmosphere concern is the primary interest. In
    chemical industries, there are huge chances of gas leakage like methane, butane,
    CO2, etc. which can prove lethal for life. Smart sensors help to detect these
    gases and can be used to ease the problem [4]. A microcontroller-based gas monitoring
    system was designed to detect and alert the system when the threshold level is
    crossed [5]. 2.1 Intelligent Industry Monitoring Systems: Toward Industrial Internet
    of Things (IIoT) This system was designed by using various smart real-time monitoring
    sensors that are deployed on the shop floors. These sensors help into detect gas
    leakage, boiler temperature, fuel leakage when crossing the threshold level and
    alert the floors manager via various means like cloud data and raise alarm. This
    system is combined with Raspberry Pi to sense the various leakages and used for
    real-time monitoring of the shop floor. In this setup, MQ-6, MQ-7 and MQ-135 are
    used to monitor the smoke, carbon monoxide, LPG, methane, etc. [6]. The DHT-11
    is used to monitoring the boiler temperature and humidity level. This data is
    monitoring continuously and uploaded to the Google Cloud from which it is possible
    to introduce to IoT shield and Raspberry Pi. The connection between Raspberry
    Pi and server is established by the application program interface (API). The edge
    devices, application-level security and security of gateways are ensured by using
    IoT shield [6] (Fig. 2). Fig. 2 Proposed system versus actual prototype [6] Full
    size image 2.2 IoT Paradigm for Supervision in the Utilities Industry In the current
    technology, there are lots of scope of IoTs applications such as smart wireless
    sensors, universal computing and communication via mobile. However, there are
    lots of options in this field because of a huge variety of diversity of hardware
    and software, and some are under study [7]. The middleware (broker) platform plays
    a vital role, and so, there are lots of options for these platforms and protocols,
    selecting based on requirement meets. In this device, we use the Message Queue
    Telemetry Transport (MQTT) protocol. The reason for choosing this protocol since
    it is available as open source for both publish and subscribe a message and it
    is also designed for limited no. of devices having a high latency, less bandwidth
    and untrusted networks [8]. There are lots of applications of MQTT, and some include
    water utilization metering and to monitor the energy generator systems. Energy
    generator systems monitoring based on IoT Due to the desired features of MQTT,
    this system is designed by using MQTT protocol and IoT because of its less hardware
    cost, less communication bandwidth, high latency network and more instability.
    This type of system has the capability to monitor the data as well as to describe
    the type of signal which is monitored. The generator set which usually is diesel
    operated is controlled or driven by programmable logic controller (PLC), and then,
    Modbus RTU protocol helps to communicate with the management module which helps
    to communicate with broker with the help of MQTT operating in cloud computing
    [9]. The broker helps into make the data available to Web application which is
    monitored by personal computers (PC) or from mobiles which communicates by MQTT.
    The Wemos D1 Mini Development Kit is used by this type of protocol which features
    the “ESP8266EX” chip [10, 11]. This chip helps to integrate with Arduino’s development
    interface [12], and it is a low cost and has built-in Wi-Fi modules. The Wemos
    D1 Mini has integrated Wi-Fi antenna, micro USB port, 16 pins out of which some
    are for general purpose, reset button and a micro USB port which helps to connect
    with the computer via cable [9]. Data collection from the PLC is done by using
    RS485 transceiver via a protocol. The general purpose input/output (GPIO) helps
    to direction control of RS-485 half duplex. The setup of the prototype is done
    by the computer or mobile using Wi-Fi network. There are also three LEDs to indicate
    the system state [9]. The mobile application named as MQTT dash is available on
    play store for Android to configure the prototype using mobile browser as shown
    [13] (Fig. 3). Fig. 3 LHS shows configuration page and RHS shows monitoring dashboard
    [9] Full size image Water utilization metering for the large area using IoT [9]
    In daily life, most of the water utilization measuring devices uses a personal
    protocols or technologies which are used as private and do not interact with others
    in a friendly way, and it causes a problem at big enterprise level. Thus we need
    to design a device based on IoT which is capable of collecting the data and have
    a tendency to interact with others as open-source. The purposed device utilizes
    the low-power microcontroller system having a radio frequency information transmission
    and uses cloud services by MQTT protocol for water consumption measuring [9].
    It aims to minimize the cost of setup and increases the coverage area by expanding
    the Wi-Fi coverage. This setup uses a CC1200DK development kit which integrates
    with ESP8266 Wi-Fi device and together of this sends data to a server. For monitoring
    the data of transmitting and collecting volume consumed by the concentrator, we
    use another CC1200DK development kit with an output water meter’s pulse [9]. This
    kit has the capability to stand with different transmission ranges, and it is
    possible to work by fluctuating output powers that vary from 14, 10, 5, 0, −5,
    −10 and −16 dB [9]. The test is conducted on the large distance which is obstacle
    free (Fig. 4). Fig. 4 Communication system [9] Full size image The distance and
    the location of test conducted as shown below [14]. To check the capability of
    MQTT, two hardwares are designed. The first hardware uses a Mosquitto broker and
    Ethernet network-based BeagleBones Black boards, and in the second hardware, BeagleBone
    is replaced by the ESP8266-12F to establish the network by using Wi-Fi module
    as shown in Fig. 5 (LHS and RHS). This setup measures the time interval between
    the Wi-Fi network and the Ethernet network which is used for data transmission.
    Grafana dashboard application is used for measuring the water consumption reading,
    and in this, it is possible to represent the data in graphical form and also consolidate
    the data, and we can also use MQTT dashboard in smartphone application [9] (Fig.
    6). Fig. 5 Local and test distance [9] Full size image Fig. 6 Ethernet to Ethernet
    and Ethernet to wireless (LHS and RHS, respectively) [9] Full size image 3 Blockchain
    for IoT: Applications The Internet of Things is gaining wider acceptance for day-to-day
    transactions to establish a machine–machine interaction with minimal human interaction.
    The era of bots is upon us, and soon the need for human labor shall be minimized
    and changed to fit into the needs of the Fourth Industrial Revolution. The aspect
    of security in an increasingly connected world becomes ever important, as cyberattacks
    become common. The need for securing IoT networks can be listed as a conjugation
    of one or more of the following reasons, namely ransomware attacks by blocking
    crucial financial infrastructure (for instance, “WannaCry” malware), informational
    leaks and hijacking of entire systems for criminal purposes. In this respect,
    blockchain can be seen as a major research field application for IoT systems [15].
    It is a relatively new concept, and countries are wary to implement it for lack
    of central authorities, but the idea can certainly be explored (Fig. 7). Fig.
    7 Distributed and decentralized network for blockchain-based IoT system Full size
    image A blockchain-based IoT system works on distributed ledger technology (DLT)
    that performs the following functions named as Guarantees the integrity of stored
    data, Maintains each user as an integral part, avoids centralization of server
    data and supports data distribution. Blockchain became a common word through the
    introduction of bitcoin introduced by Satoshi Nakamoto back in 2008 [16]. The
    ordered blocks in the ledger system are interconnected through hashes from the
    previous block. This ensures that transaction history cannot be deleted without
    deleting the characteristic part of the system. This is the reason for the rapid
    popularity gained by bitcoin amid investors. Security issues remain a challenge
    to be sidestepped for researchers and designers. Some common issues may be spoofing
    and insecure physical interface attacks on low level which involve physical link
    layers of communication; buffer attacks, routing attacks and authentication-based
    privacy violation on intermediate levels and insecure firmware and middleware
    security for interfaces [15] (Fig. 8). Fig. 8 Representation of a single block
    of a financial blockchain [17, 18] Full size image 3.1 IoT-Based Blockchain Distributed
    Ledger Technology (DLT) System: Decentralized Networking Using Blockchain In a
    blockchain-based IoT network, the communication protocol is replaced with a blockchain
    network. As viewed in figures above, data processed in IoT systems will only grow
    over time; hence, robust handling systems are needed. A way to handle these is
    through peer-to-peer messaging using distributed ledgers, similar to peer-to-peer
    networking (PPN) systems [15,16,17,18,19,20,21,22]. The blockchain platform is
    Ethereum, which has an advantage over bitcoin as being Turing-complete, i.e.,
    being compatible with all types of systems through their unique identities. The
    Ethereum Virtual Machine (EVM) with Golang programming language is used. Additionally,
    Keccak-256 hash function and encoding are used on Ethereum [16]. Tests reveal
    that systems with and without blockchain have almost similar security levels of
    encryption algorithms. To minimize data leaks, a proper linkage between protocols
    is necessary. This can be made through a feedback loop between analytical machines
    and sensor networks. Communication is possible through ZigBee and/or Bluetooth.
    Edge servers may be used which have the advantage of high power computing in case
    of arduous hash value verification calculation results. The blockchain nodes may
    be interconnected together to help store data. Broadcast of data occurs as node
    i transmits data to the nearest node, i.e., “i − 1” or “i + 1” (refer Fig. 2).
    This chosen node then broadcasts the data further to all P2P nodes. Following
    this, a task is delivered by the network which needs all nodes to calculate a
    hash value. Time consumption between different nodes is compared for local computation
    offloading levels and other considerations. The node carries the choice to either
    compute locally or offload to edge servers following digital signatures. The result
    is validated by the home node and if found to be correct, is transmitted to all
    nodes. If all nodes validate the result and if legal as per encoding, the block
    is added to the blockchain [20]. Dataset sharing among communities is an upcoming
    topic in IoT applications, which further uses a Reference Integrity Metric (RIM)
    for each dataset on a blockchain ledger system (Fig. 9). Fig. 9 Architecture for
    IoT [16] Full size image Remote updates to the system can be made possible since
    the system is always online [21]. Self-healing of the code can also be done through
    data redundancy. 3.2 Cryptocurrency Based on Blockchain: Currency of the Future
    Blockchain-based cryptocurrency like bitcoin is making news around the world.
    The technology works as a decentralized ledger system that keeps adding to the
    list of transactions much like a stack. The transactions remain anonymous. The
    proposed IoT network could work on the basics of blockchain such as host configuration
    and BIOS details on ledger, requiring every device on that IoT cloud to download
    latest configurations at specific time intervals and encryption to preserve network
    privacy. The system could be an effective “means and end” solution to the problem
    of achieving cloud/fog security, prevent unauthorized access and maintain a decentralized
    system [22] (Figs. 10 and 11). Fig. 10 Protocols and standards for common IoT
    systems [18]. Communication is possible through ZigBee and/or Bluetooth Full size
    image Fig. 11 Hashing in blockchain technology [22] Full size image 4 Summary:
    IoT Applications and Key Pointers MQTT is the preferred choice of open-access
    messaging protocol for the present IoT systems, except in ledger-based systems
    as seen. In summary, the following features of IoT are utilized for smart applications:
    (a) connectivity; (b) single master control; (c) cost effective; (d) single server
    control. Single server control may be replaced with blockchain technology (Table
    1). Table 1 Summary of IoT applications Full size table 5 Conclusion: Future System
    Proposals Based on Systems Reviewed IoT presents keychain technologies coming
    up for humankind. In view of the changing climatic conditions and globalization,
    online database management is becoming the need of the hour. Governments and enterprises
    world over are setting up committees to integrate frameworks of IoT linkages relevant
    to our need. It is the time for researchers to develop systems which can be integrated
    into a global network, which may someday cross the domains of space and time as
    we know today. Some applications relevant to the sensors reviewed and pertinent
    to global problems are presented below (Table 2). Table 2 Future system proposals
    Full size table References A Very Short History of the Internet of Things. https://www.forbes.com/sites/gilpress/2014/06/18/a-very-short-history-of-the-internet-of-things/#5c66685b10de
    A.M. Leman, Nor Hidayah, Occupational Safety and Health: Workers and Industrial
    Safety Monitoring for Sustainable Work Environment Development (Health and Safety,
    AET, 2013) Google Scholar   Wu-Zhao, L. Lei-Hong, H. Yue-shan, W. Xiao-ming, A
    community health service architecture based on the internet of things on health-care,
    in World Congress on Medical Physics and Biomedical Engineering, vol. 39, pp.
    1317–1320 (Springer, Heidelberg, 2013) Google Scholar   R. Rushikesh, S. Chandra
    Mohan Reddy, S. Reddy, Development of IoT based vehicular pollution monitoring
    system, in International Conference on Green Computing and Internet of Things
    (ICGCIoT) proceedings (IEEE Press, 2015) Google Scholar   A. Banik, B. Aich and
    S. Ghosh: Microcontroller based low-cost gas leakage detector with SMS alert,
    in Emerging Trends in Electronic Devices and Computational Techniques (EDCT) (IEEE,
    2018). https://doi.org/10.1109/edct.2018.8405094 B.C. Kavitha, R. Vallikannu,
    IoT based intelligent industry monitoring system, in 2019 6th International Conference
    on Signal Processing and Integrated Networks (SPIN), pp. 63–65 (IEEE, 2019). https://doi.org/10.1109/spin.2019.8711597
    L. Atzori, A. Iera, G. Morabito, The internet of things: a survey, in Computer
    Networks (Elsevier, 2010) Google Scholar   G.C. Hillar (eds.), MQTT Essentials—A
    lightweight IoT Protocol. First. (Packt, Birmingham, 2017) Google Scholar   F.V.
    Schreiber, R.A. Dias, B.D. Borba, V. Noll, V.Z.M. Gallo, Application of the IoT
    paradigm for supervision in the utilities industry, in 13th IEEE International
    Conference on Industry Applications (INDUSCON) (IEEE, 2018) Google Scholar   D1
    mini. https://wiki.wemos.cc/products:d1:d1_mini ESP8266EX Datasheet. https://www.espressif.com/sites/default/files/documentation/0a-esp8266ex_datasheet_en.pdf
    ESP8266 core for Arduino. https://github.com/esp8266/Arduino MQTT Dash (IoT, Smart
    Home)—Apps on Google Play. https://play.google.com/store/apps/details?id=net.routix.mqttdash&hl=en
    Google Maps. https://www.google.com/maps/@-27.4344032,-48.450146,900m/data=!3m1!1e3
    N.M. Kumar, P.K. Mallick, Blockchain technology for security issues and challenges
    in IoT, in International Conference on Computational Intelligence and Data Science
    (ICCIDS 2018) proceedings, Procedia Comput. Sci. 132(2018) 1815–1823 (Elsevier,
    2018) Google Scholar   D. Fakhri, K. Mutijarsa, in Secure IoT Communication using
    Blockchain Technology (IEEE Press, IEEE, 2018). 978-1-5386-6670-8/18 Google Scholar   Z.
    Zheng et al., An overview of blockchain technology: architecture, consensus, and
    future trends, in 6th International Congress on Big Data (BigData Congress) Proceedings
    (IEEE, 2017) Google Scholar   M.A. Khan, K. Salah, IoT security: review, blockchain
    solutions, and open challenges. Future Gener. Comput. Syst. 82, 395–411 (2018)
    Article   Google Scholar   M. Son, H. Kim, Blockchain-based secure firmware management
    system in IoT environment, in International Conference on Advanced Communications
    Technology (ICACT), Proceedings (IEEE, 2019). ISBN 979-11-88428-02-1 Google Scholar   C.
    Fang et al., Edge computing and caching based blockchain IoT network, in Proceedings
    of 2018 1st IEEE International Conference on Hot Information-Centric Networking
    (HotICN 2018) (IEEE, 2018). 978-1-5386-4870-4/18 Google Scholar   M. Banerjee,
    J. Lee, K.R. Choo, A blockchain future for internet of things security: a position
    paper, in Digital Communications and Networks (Elsevier, 2017). 20172352-8648
    Google Scholar   M. Singh, A. Singh, S. Kim, Blockchain: a game changer for securing
    IoT data. in Proceedings of IEEE 4th World Forum on Internet of Things (WF-IoT),
    pp. 51–55 (IEEE, Singapore, 2018) Google Scholar   Download references Author
    information Authors and Affiliations University School of Information Communication
    and Technology, Guru Gobind Singh Indraprastha University, New Delhi, Delhi, 110078,
    India Mahesh Swami, Divya Verma & Virendra P. Vishwakarma Corresponding author
    Correspondence to Mahesh Swami . Editor information Editors and Affiliations Department
    of Computer Science and Engineering, Maharaja Surajmal Institute of Technology,
    New Delhi, India Poonam Bansal Department of Electrical and Electronics Engineering,
    Maharaja Surajmal Institute of Technology, New Delhi, India Meena Tushir Department
    of Automation and Applied Software, Aurel Vlaicu University of Arad, Arad, Romania
    Valentina Emilia Balas Department of Computer Science and Engineering, Indian
    Institute of Technology (BHU), Varanasi, India Rajeev Srivastava Rights and permissions
    Reprints and permissions Copyright information © 2021 The Editor(s) (if applicable)
    and The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd.
    About this paper Cite this paper Swami, M., Verma, D., Vishwakarma, V.P. (2021).
    Blockchain and Industrial Internet of Things: Applications for Industry 4.0. In:
    Bansal, P., Tushir, M., Balas, V., Srivastava, R. (eds) Proceedings of International
    Conference on Artificial Intelligence and Applications. Advances in Intelligent
    Systems and Computing, vol 1164. Springer, Singapore. https://doi.org/10.1007/978-981-15-4992-2_27
    Download citation .RIS.ENW.BIB DOI https://doi.org/10.1007/978-981-15-4992-2_27
    Published 02 July 2020 Publisher Name Springer, Singapore Print ISBN 978-981-15-4991-5
    Online ISBN 978-981-15-4992-2 eBook Packages Intelligent Technologies and Robotics
    Intelligent Technologies and Robotics (R0) Share this paper Anyone you share the
    following link with will be able to read this content: Get shareable link Provided
    by the Springer Nature SharedIt content-sharing initiative Publish with us Policies
    and ethics Sections Figures References Abstract Introduction and a Brief History
    of IoT IoT for Industry: Applications for Industrial Internet of Things Blockchain
    for IoT: Applications Summary: IoT Applications and Key Pointers Conclusion: Future
    System Proposals Based on Systems Reviewed References Author information Editor
    information Rights and permissions Copyright information About this paper Publish
    with us Discover content Journals A-Z Books A-Z Publish with us Publish your research
    Open access publishing Products and services Our products Librarians Societies
    Partners and advertisers Our imprints Springer Nature Portfolio BMC Palgrave Macmillan
    Apress Your privacy choices/Manage cookies Your US state privacy rights Accessibility
    statement Terms and conditions Privacy policy Help and support 129.93.161.219
    Big Ten Academic Alliance (BTAA) (3000133814) - University of Nebraska-Lincoln
    (3000134173) © 2024 Springer Nature"'
  inline_citation: Swami et al. (2020)
  journal: Advances in Intelligent Systems and Computing
  key_findings: Blockchain and IIoT have the potential to improve the efficiency,
    security, and resilience of automated irrigation systems. Implementing Blockchain
    and IIoT systems in real-world irrigation scenarios poses several challenges,
    such as scalability, security, and interoperability. Researchers and practitioners
    need to address these challenges to fully realize the potential of Blockchain
    and IIoT in automated irrigation management.
  limitations: The study does not provide a detailed analysis of the security implications
    of implementing Blockchain and IIoT systems. The study also does not provide a
    comprehensive evaluation of the performance of Blockchain and IIoT systems in
    real-world irrigation scenarios.
  main_objective: To examine the applications of Blockchain and Industrial Internet
    of Things (IIoT) in the context of Industry 4.0.
  relevance_evaluation: The study is highly relevant to the point of integrating deployed
    machine learning models with other components of the automated irrigation management
    pipeline. The study provides an in-depth analysis of the applications of Blockchain
    and IIoT, including their potential for enhancing the efficiency and security
    of automated irrigation systems. The study also examines the challenges associated
    with implementing Blockchain and IIoT systems and proposes solutions to address
    these challenges. This information is valuable for researchers and practitioners
    working in the field of automated irrigation management.
  relevance_score: '0.9'
  relevance_score1: 0
  relevance_score2: 0
  study_location: Unspecified
  technologies_used: Blockchain, Industrial Internet of Things (IIoT)
  title: 'Blockchain and Industrial Internet of Things: Applications for Industry
    4.0'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  apa_citation: Eridani, D., Rochim, A. F., & Dei, J. I. (2021). Robot Monitoring
    and Controlling Soybean Field Soil Condition Based On K-Nearest Neighbor Algorithm
    and Message Queuing Telemetry Transport Protocol. In 2021 International Conference
    on Artificial Intelligence and Computer Science Technology (ICAICST) (pp. 197-201).
    IEEE.
  authors:
  - Eridani D.
  - Rochim A.F.
  - Imago Dei Gloriawan J.
  citation_count: '1'
  data_sources: Soybean field images
  description: Soybean production is decreasing every year. The level of soybean production
    is strongly influenced by soil moisture. The problem is that farmers let soybeans
    grow without adequate maintenance, including without checking the soil moisture.
    Therefore, an autonomous robot is built that could replace the role of farmers
    in caring for soybeans. This robot is built to monitor the conditions of the soybean
    field and classify the image of soybean field soil using the K-Nearest Neighbor
    algorithm. The results of soil classification are used to control the watering
    node for watering plants. This robot uses the Internet of Things concept with
    the MQTT protocol integrated with ThingsBoard as a display of monitoring information.
    The robot is built based on the Raspberry Pi 3 Model B+. In this research, with
    the KNN algorithm, the robot can classify soil moisture accurately and adequately,
    where it obtained 83.3% accuracy, 90% recall, 81.8% precision, and 85.7% F1 score.
    The watering node also performed well with a 94.4% success rate. In addition,
    soybeans in a field with the robot have better growth than soybeans in a field
    without robot. That is evidenced by the average plant height and the number of
    leaves in the field with the robot is better than those in the field without robot,
    that is 17.28 cm and 9 leaves compared to 15.72 cm and 8 leaves. However, plants
    without robot have a better stem diameter than those in a field with the robot,
    which is 2.8 mm compared to 2.74 mm.
  doi: 10.1109/ICAICST53116.2021.9497801
  explanation: This paper presents the design and implementation of an autonomous
    soybean field monitoring and watering robot that utilizes the K-Nearest Neighbor
    (KNN) algorithm for soil moisture classification. The robot integrates data preprocessing,
    ML model deployment, and decision-making for autonomous irrigation management.
    The KNN model is deployed to classify soil images as "Wet" or "Dry", guiding the
    watering node to irrigate plants based on moisture levels.
  extract_1: The robot uses the Internet of Things concept based on the MQTT protocol.
    MQTT has a smaller payload size, lower power consumption, and higher success rate
    than HTTP.
  extract_2: The watering node performed well with a 94.4% success rate. In addition,
    soybeans in a field with the robot have better growth than soybeans in a field
    without robot.
  full_citation: '>'
  full_text: '>

    "This website utilizes technologies such as cookies to enable essential site functionality,
    as well as for analytics, personalization, and targeted advertising purposes.
    To learn more, view the following link: Privacy Policy Manage Preferences IEEE.org
    IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account Personal
    Sign In Browse My Settings Help Access provided by: University of Nebraska - Lincoln
    Sign Out All Books Conferences Courses Journals & Magazines Standards Authors
    Citations ADVANCED SEARCH Conferences >2021 International Conference... Robot
    Monitoring and Controlling Soybean Field Soil Condition Based On K-Nearest Neighbor
    Algorithm and Message Queuing Telemetry Transport Protocol Publisher: IEEE Cite
    This PDF Dania Eridani; Adian Fatchur Rochim; Jonathan Imago Dei Gloriawan All
    Authors 74 Full Text Views Abstract Document Sections I. Introduction II. Methodology
    III. Design and Implementation IV. Results and Discussion V. Conclusion and Recommendation
    Authors Figures References Keywords Metrics Abstract: Soybean production is decreasing
    every year. The level of soybean production is strongly influenced by soil moisture.
    The problem is that farmers let soybeans grow without adequate maintenance, including
    without checking the soil moisture. Therefore, an autonomous robot is built that
    could replace the role of farmers in caring for soybeans. This robot is built
    to monitor the conditions of the soybean field and classify the image of soybean
    field soil using the K-Nearest Neighbor algorithm. The results of soil classification
    are used to control the watering node for watering plants. This robot uses the
    Internet of Things concept with the MQTT protocol integrated with ThingsBoard
    as a display of monitoring information. The robot is built based on the Raspberry
    Pi 3 Model B+. In this research, with the KNN algorithm, the robot can classify
    soil moisture accurately and adequately, where it obtained 83.3% accuracy, 90%
    recall, 81.8% precision, and 85.7% F1 score. The watering node also performed
    well with a 94.4% success rate. In addition, soybeans in a field with the robot
    have better growth than soybeans in a field without robot. That is evidenced by
    the average plant height and the number of leaves in the field with the robot
    is better than those in the field without robot, that is 17.28 cm and 9 leaves
    compared to 15.72 cm and 8 leaves. However, plants without robot have a better
    stem diameter than those in a field with the robot, which is 2.8 mm compared to
    2.74 mm. Published in: 2021 International Conference on Artificial Intelligence
    and Computer Science Technology (ICAICST) Date of Conference: 29-30 June 2021
    Date Added to IEEE Xplore: 30 July 2021 ISBN Information: DOI: 10.1109/ICAICST53116.2021.9497801
    Publisher: IEEE Conference Location: Yogyakarta, Indonesia SECTION I. Introduction
    Agriculture is a strategic sector in driving the national economy, namely in realizing
    food security, increasing competitiveness, expanding employment, and reducing
    poverty. The agricultural sector recognizes the term \"strategic commodity,\"
    one of which is soybean commodity. The problem that occurs in soybean commodities
    is the production rate which has declined every year until 2019. Soybean production
    only reached 424 thousand tons, or the lowest in 5 years [1]. There are many factors
    behind low soybean production, but in general natural factors play a significant
    role in soybean growth and production. The condition of soil moisture, air temperature
    and humidity affect the growth of soybeans and soybean production [2]. The problem
    is often farmers plant soybeans by spreading seeds and letting them grow without
    adequate maintenance, including without checking the soil moisture. This is driven
    by the fact that many soybean farmers apply the intercropping system, namely planting
    soybeans and other types of crops (generally corn) simultaneously in the same
    field, so farmers have to take care of two types of crops at once. In addition,
    soybeans are just a side crop so farmers are less concerned about caring for soybeans
    [2]. Many researchers have researched in the field of technology-based agricultural
    system automation, or commonly referred to as smart farming. Arista Setyawan et
    al (2018) built a monitoring system for soil moisture, air temperature and humidity,
    which is integrated with the Internet of Things in the Message Queuing Telemetry
    Transport (MQTT) protocol which is used to transmit data and information from
    monitoring results to the ThingsBoard web server [3]. Ipin Prasojo et al (2020)
    built an automatic watering system based on the level of soil moisture [4]. Then,
    some studies used wheeled robot media to perform automatic watering based on the
    level of soil moisture. First, Rizal Isnanto et al (2020) implemented the concept
    of wall-follower robot and the ESP-NOW protocol to their watering robot [5]. Pengfei
    Lv et al (2020) built an intelligent watering robot with the NRF24L01 module as
    a communication communication module [6], and L. Mechsy et al (2017) built a watering
    robot for lawn maintenance using CPP (Coverage Path Planning) algorithm as robot
    navigation system [7]. All of those robots used the soil moisture sensor to measure
    soil moisture. In addition, Djulil Amri (2012) also built agricultural robot but
    worked to plant peanut seeds by utilizing the concept of image processing [8].
    Almost the same as the previous one, Marcin Jasiński et al (2018) built an autonomous
    agricultural robot with a vision system utilizing image processing for plant/weed
    classification [9]. It does not stop with the Internet of Things. Smart farming
    today works more accurately and smarter with machine learning. In relation to
    machine learning, Zorgani and Ugail (2018) compared the performance of several
    machine learning algorithms in classifying histological images [10]. The research
    shows that the SVM (Support Vector Machine) and KNN (K-Nearest Neighbor) algorithms
    are the algorithms with the best accuracy, namely 99.86%, better than the Naïve
    Bayes, Binary Decision Tree, and Discriminant Analysis algorithms. Besides, KNN
    has advantages over other algorithms, namely a simple algorithm, fast training,
    and robust to noisy training data [11]. Of the many studies above, none of them
    have made soybeans the object of their research. Therefore, this research seeks
    to provide solutions to problem of neglecting soybean plant care by farmers, in
    the form of a robot that monitors the conditions of soybean field and classifies
    images of soybean field soil using the K-Nearest Neighbor algorithm. The results
    of soil classification are used to control the watering node for watering plants.
    This robot uses the Internet of Things concept based on the MQTT protocol. MQTT
    has a smaller payload size [12], lower power consumption, and higher success rate
    than HTTP [13]. Robot is built based on the Raspberry Pi 3 Model B+. The MQTT
    protocol is integrated with ThingsBoard as a display of monitoring information.
    This research is expected to help soybean farmers in caring for soybean fields
    and increasing soybean production. SECTION II. Methodology Fig. 1. Flowchart of
    Methodology Show All Literature study is the stage of extracting concepts and
    materials related to the problems raised and the design of the system that is
    built, both from devices, sensors, and actuators, communication protocols, and
    methods that can help in realizing the system. The requirements analysis and specification
    stage is the stage to describe the needs needed in conducting research. Then these
    needs are analyzed and used at the design phase. The design stage is the stage
    of designing hardware and software or programs needed in conceptual system development.
    The implementation and unit testing stage aims to implement the system design
    that was made in the previous stage and test each component used to ensure that
    the components can work properly. In the integration and system testing stage,
    each component that has been tested is connected to form a complete system. Then,
    a full system test is carried out, as well as re-evaluating errors that can occur
    when a component is run as a system. SECTION III. Design and Implementation The
    working principle of the system is that the robot explores the soybean field while
    checking temperature and humidity and the processing and classifying soil images.
    If the soil image is classified as dry, the water pump will water the plants.
    On the other hand, if the soil image is classified as wet, then the water pump
    still off. Checking the condition of the land is always followed by sending data
    to the MQTT broker. When the entire land has been explored, the robot will stop.
    Fig. 2. Block Diagram of The Whole System Show All A. Hardware Design Fig. 3.
    Block Diagram of The Robot Hardware Show All Figure 3 shows a block diagram of
    the robot hardware. The robot is built based on the Raspberry Pi 3 Model B+, which
    is equipped with sensor and actuator components including 2 (two) HC-SR04 distance
    sensors, BME280 temperature, and humidity sensor, camera module board Rev 1.3,
    DC motor driver L298N which controls 4 (four) DC motors as a robot wheel. Fig.
    4. Block Diagram of The Watering Node Hardware Show All Figure 4 shows a block
    diagram of the watering node hardware. The watering node is built based on NodeMCU
    V3, which is embedded with the ESP8266-12E wireless communication module and is
    equipped with a logic level converter, a 5V 4-Channel relay module a 5V 2-Channel
    relay that controls 6 (six) 12V micro water pumps. B. Software Design: Robot Intelligence
    The flowchart of robot intelligence software shown in Figure5. First of all, the
    used libraries are imported. Next, the program performs GPIO initialization and
    BME280 sensor initialization. Then, there are defining and allocating GPIO pins
    to each component and defining global variables. In addition, the MQTT protocol
    was initialized, which included creating an MQTT client and connecting MQTT to
    a broker. Fig. 5. Flowchart of Robot Intelligence Software Show All After that,
    a navigation and movement procedure determines the motion and direction of motion
    carried out by the robot based on the distance of the wall against the sensor
    (front and left) so that the robot moves to the desired point. After the robot
    is at the desired point, the robot will measure the air temperature and humidity
    values and then send them to the ThingsBoard broker. Still, at the same point,
    the robot will call the soil moisture classification program, which is tasked
    with classifying soil moisture at that point. After that, the robot will check
    whether all points have been visited or not. If the robot has checked the air
    and soil conditions 6 times and has met the corner (there is a wall in front and
    on the left side) 3 times, it means that the robot has been in the robot''s cage
    and all points have been visited. If all points have been visited, the robot will
    stop the program, and if not, then the robot will return to carrying out the navigation
    and movement procedure. C. Software Design: Soil Moisture Classification Fig.
    6. Flowchart of Soil Moisture Classification Software Show All In the soil moisture
    classification program, we first imported the used libraries and initialized the
    MQTT protocol. Then, the dataset that has been in the CSV (Comma-separated values)
    file is loaded. This CSV file contains numbers ranging from 0 to 1, representing
    each pixel in each soil image. This CSV will be converted into a NumPy array which
    will be used in the classification process. Converting an image dataset into a
    CSV file is carried out outside of this program, where the process is described
    in Figure 7. Fig. 7. Flowchart of Processing Image Dataset Into CSV File Show
    All Then, a KNN algorithm class is built, which contains methods for loading training
    data and test data, calculating the Euclidean distance between training data and
    test data, and predicting or classifying test data. Next, the program will capture
    the soil image where the robot is located and predict that soil image. Before
    making the prediction, the soil image is first processed into an array, which
    is the same process as converting an image dataset into a CSV file. Then, the
    prediction results are sent to the broker. SECTION IV. Results and Discussion
    A. KNN Algorithm Performance Test Tests were carried out with a soil images dataset
    consisting of 143 images divided into 2 classes, namely \"Wet\" (63 pictures)
    and \"Dry\" (80 pictures). Soil conditions are stated as wet when the soil moisture
    is as desired, above or equal to 70%. Meanwhile, the soil is declared dry if the
    soil moisture is below 70% [2]. TABLE I. KNN Algorithm Performance on Training
    Data The dataset is split into 85% for training data and 15% for testing data
    in this test. That ratio is chosen because it produces the best accuracy and F1
    score on training data compared to the others. Then, perform the calculation of
    accuracy, precision, recall, and F1 score for each k value. Tests are carried
    out in the range k = 1 to 20. Fig. 8. Graph of KNN Algorithm Performance Test
    Results Show All The best k is 17 with 90.9% accuracy, 100% precision, 84.6% recall,
    and 91.7% F1 score. B. Throughput Test Throughput is the rate of data transmission
    [14]. The throughput can be formulated as follows: Throughput = ∑packets received
    (in bits) total transmission time (1) View Source Throughput test is performed
    by sending a specific number of packets to the destination and taking note of
    the length of transmission time. The destination devices are ThingsBoard with
    the ThingsBoard server broker and watering node with Hive MQ broker. This test
    is carried out by varying the number of packets, which is 25 bytes/packet. Fig.
    9. Graph of Throughput Test Results Show All The ThingsBoard server broker has
    an average throughput of 1784.45 bps while the Hive MQ is 5040.45 bps. C. Packet
    Loss Test Packet loss (loss rate) is the percentage of packets dropped compared
    to the number of packets sent by the sender [14]. Packet loss can be formulated
    as follows: Packet loss= ∑packets drop ∑packets sent ×100% (2) View Source Packet
    loss testing is performed by sending a specific number of packets to the destination
    with variations in packets and the gap between transmission. The destination devices
    are ThingsBoard with the ThingsBoard server broker and watering node with Hive
    MQ broker. The gap between transmission for the ThingsBoard server broker is 0.2
    and 0.3 seconds, while the gap between transmission for the Hive MQ broker is
    0.2 seconds. In this test, 1 packet is 15 bytes. Fig. 10. Graph of Packet Loss
    Test Results Show All The ThingsBoard server broker has an average packet loss
    of 15.1% for 0.2 seconds gap of transmission and 2.2% for 0.3 second gap of transmission
    while the Hive MQ is 0.2%. D. Delay Test Delay is a latency that arises in the
    process of sending a packet [15]. Delay is the time it takes for a packet sent
    by the sender to arrive at the destination device [14]. Delay can formulated as
    follows: Delay = total transmission time ∑packets received (3) View Source A delay
    test is performed by sending a specific number of packets to the destination and
    taking note of the length of transmission time. The destination devices are ThingsBoard
    with the ThingsBoard server broker and watering node with Hive MQ broker. In this
    test, on the ThingsBoard server broker, 1 packet is 15 bytes, while on Hive MQ
    broker, 1 packet is 25 bytes. Fig. 11. Graph of Delay Test Results Show All The
    ThingsBoard server broker has an average delay of 68.31 ms while the Hive MQ is
    11.59 ms. E. The Whole System Test Fig. 12. Illustration of Soybean Field Prototype
    Show All This test examines the overall work of the system, which consists of
    a robot and a watering node when it is run in the soybean field. The soybean field
    prototype has a size of 4.96 m2 which is illustrated in Figure 12. The test is
    carried out 3 times where each test consists of 6 checking points, resulting in
    18 points or test result data. Out of 18 test data, 3 times the error in predicting
    soil moisture conditions occurs. Then, of the 18 test points, there is 1 point
    that has not reached the desired soil moisture condition after watering. From
    the result of this test, a confusion matrix can be generated, which is shown in
    Table II. TABLE II. Confusion Matrix of Robot Test Result From the confusion matrix
    in Table II, we can calculate accuracy, recall, precision, and F1 score. Accuracy
    is the proportion of correct predictions divided by the number of predictions
    [17]. Accuracy is formulated as Accuracy = TP+TN TP+TN+FN+FP (4) View Source The
    recall is the percentage of positive cases that are correctly predicted. Precision
    is the ratio of the correct positive predictions among the positive predictions.
    Meanwhile, the F1 score is the harmonic mean between precision and recall [18].
    Recall, precision, and F1 score are formulated as Recall = TP TP+FN Precision
    = TP TP+FP F1 score=2× Precision×Recall Precision+Recall (5) (6) (7) View Source
    where: TP = true positive TN = true negative FP = false positive FN = false negative
    From equations (4), (5), (6), and (7), accuracy, recall, precision, and F1 score
    are obtained as follows: Accuracy = 9+6 9+6+1+2 =0.833=83.3% Recall = TP TP+FN
    = 9 9+1 = 9 10 =0.9=90% Precision = TP TP+FP = 9 9+2 = 9 11 =0.818=81.8% F1 score
    =2× 0.818×0.9 0.818+0.9 =0.857=85.7% View Source So, from this test, the robot
    has 83.3% accuracy, 90% recall, 81.8% precision, and 85.7% F1 score. In addition,
    to calculate the success rate of the watering unit, the following equation can
    be used: Success Rate= ∑successful trial ∑trial Success Rate= 17 18 =94.4% (8)
    View Source So, in this test, the success rate of the watering node was 94.4%.
    In this test, the time needed by the robot to check at each planting point is
    20-40 seconds. F. Comparison of the Growth of Soybean in Field with the Robot
    and Field without Robot In this test, performed a comparison of the growth of
    soybean in the field treated using robot and soybean in a field without robot.
    Comparisons were only carried out on 5 plants in each field. Observations were
    made up to 18 days after sowing (DAS). The parameters observed for plant growth
    were plant height, number of leaves, and stem diameter. TABLE III. Dependent Variable
    TABLE IV. Independent Variable TABLE V. Comparison of Soybeans Height TABLE VI.
    Comparison of Soybeans Number of Leaves TABLE VII. Comparison of Soybeans Stem
    Diameter After 18 days after sowing, the plants in the field with the robot had
    a better average plant height and number of leaves, namely 17.28 cm and 9 leaves,
    compared to plants in the field without robot, which are 15.72 cm and 8 leaves.
    Meanwhile, plants in the field without robot have a better stem diameter than
    those in the field with robot, which is 2.8 mm compared to 2.74 mm. SECTION V.
    Conclusion and Recommendation A. Conclusion In this research, with the help of
    an autonomous robot and the soil moisture classification method using the KNN
    algorithm, farmers were able to increase soybean growth. This is evidenced by
    the average plant height and the number of leaves in the field with the robot
    is better than those in the field without robot, that is 17.28 cm and 9 leaves
    compared to 15.72 cm and 8 leaves. It can be achieved because the robot can classify
    soil moisture accurately and adequately, where it obtained 83.3% accuracy, 90%
    recall, 81.8% precision, and 85.7% F1 score. The watering node also performed
    well with a 94.4% success rate. Whereas the KNN algorithm achieves optimal performance
    when k = 17, where using a dataset of 143 images and the dataset is split into
    85% training data and 15% test data, and it is obtained 90.9% accuracy, 100% precision,
    84.6% recall, and 91.7% F1 score. Even so, plants in the field without robot have
    a better stem diameter than those in the field with the robot, which is 2.8 mm
    compared to 2.74 mm. B. Recommendation This research still uses the relatively
    simple KNN algorithm, so further research is recommended to use an algorithm that
    is able to produce better accuracy but is still practical and lightweight. This
    research also only has 2 soil classifications, namely \"Dry\" and \"Wet\", besides
    that the dataset used is still relatively small. So, the number of classes can
    be augmented and detailed in the future, and the number of datasets can be enlarged.
    In addition, in this research the robot takes about 20-40 seconds to check each
    point. So, in the future, the waiting time can be minimized. ACKNOWLEDGMENT This
    research was financially supported by The Faculty of Engineering, Diponegoro University,
    Indonesia through Strategic Research Grant 2021 number: 3178/S/komputer/4 /UN7.5.3.2/PP/2021.
    Authors Figures References Keywords Metrics More Like This Comparison Of Iron
    And Steel Production Defects Using Classification Algorithms 2021 3rd International
    Congress on Human-Computer Interaction, Optimization and Robotic Applications
    (HORA) Published: 2021 Purifying training data to improve performance of multi-label
    classification algorithms 2012 15th International Conference on Information Fusion
    Published: 2012 Show More IEEE Personal Account CHANGE USERNAME/PASSWORD Purchase
    Details PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS Profile Information COMMUNICATIONS
    PREFERENCES PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help? US & CANADA:
    +1 800 678 4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow About IEEE
    Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination
    Policy | IEEE Ethics Reporting | Sitemap | IEEE Privacy Policy A not-for-profit
    organization, IEEE is the world''s largest technical professional organization
    dedicated to advancing technology for the benefit of humanity. © Copyright 2024
    IEEE - All rights reserved."'
  inline_citation: (Eridani, Rochim, & Dei, 2021)
  journal: ICAICST 2021 - 2021 International Conference on Artificial Intelligence
    and Computer Science Technology
  key_findings: The robot can classify soil moisture accurately, achieving 83.3% accuracy,
    90% recall, 81.8% precision, and 85.7% F1 score. The watering node performed well,
    with a 94.4% success rate. Soybeans in the field with the robot showed improved
    growth, with better plant height and number of leaves compared to soybeans in
    the field without the robot.
  limitations: The robot may have limited scalability to larger fields and may not
    be cost-effective for small-scale farming operations.
  main_objective: To design and implement an autonomous soybean field monitoring and
    watering robot that utilizes the KNN algorithm for soil moisture classification.
  relevance_evaluation: This paper is highly relevant to the point of integrating
    deployed ML models with other components of the automated irrigation management
    pipeline. It provides a specific example of deploying the KNN algorithm for soil
    moisture classification, which is crucial for determining watering schedules and
    optimizing water usage. The paper demonstrates how the deployed model interacts
    with data processing, decision-making, and control systems to achieve automated
    irrigation.
  relevance_score: '0.85'
  relevance_score1: 0
  relevance_score2: 0
  study_location: Unspecified
  technologies_used: K-Nearest Neighbor (KNN), Internet of Things (IoT), Message Queuing
    Telemetry Transport (MQTT)
  title: Robot Monitoring and Controlling Soybean Field Soil Condition Based on K-Nearest
    Neighbor Algorithm and Message Queuing Telemetry Transport Protocol
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  apa_citation: Siddhartha, E., & Lakkannavar, M. C. (2021). Smart irrigation and
    Crop health prediction. In 2021 International Conference on Recent Trends on Electronics,
    Information, Communication & Technology (RTEICT) (pp. 1543-1547). IEEE.
  authors:
  - Siddhartha E.
  - Lakkannavar M.C.
  citation_count: '2'
  data_sources: Sensor data (soil moisture, pH, temperature, humidity), Crop images
  description: As the world is racing to the era of automation and IoT in our life.
    In automation we majorly focus on creating smart devices, digital cities, automated
    homes etc. Crop Irrigation playing a major role in agriculture, automation of
    irrigation is a need to help the farmers with technology. For crop health prediction
    there is a necessity of creating a device that collects the data and then analyse
    it to generate results in real time. In our paper we are focusing on creating
    a raspberry pi based device to collect the data. As the device collects the data,
    it will be sent to the server through MQTT. We utilize an ANN model for analysing
    the data to generate results of crop health prediction with high accuracy. Lastly
    based on the response from sensors the motor is triggered by the device to involuntarily
    switch the water flow in the farm. The System also can control irrigation data
    in android mobile app.
  doi: 10.1109/RTEICT52294.2021.9573542
  explanation: 'The presented paper introduces an IoT-based smart irrigation and crop
    health prediction system utilizing a Raspberry Pi, sensors, and an Artificial
    Neural Network (ANN) model. The system focuses on automating irrigation and monitoring
    crop health in real-time.


    The key concept of this system revolves around collecting data from various sensors,
    including soil moisture, pH, temperature, and humidity. Additionally, an RGB Pi
    camera captures crop images, which are analyzed using an ANN model to predict
    crop health and identify potential infections. Collected data is processed and
    transferred to a mobile app for farmers to monitor parameters and control the
    irrigation system.


    The paper highlights the use of MQTT protocol for data transmission and the employment
    of an ANN model for accurate crop health prediction. The system aims to improve
    agricultural productivity by optimizing irrigation and providing early detection
    of crop issues.'
  extract_1: The paper proposes an ANN model for analyzing the data to generate results
    of crop health prediction with high accuracy.
  extract_2: Based on the results from sensors, the motor is triggered by the device
    to involuntarily switch the water flow in the farm.
  full_citation: '>'
  full_text: '>

    "This website utilizes technologies such as cookies to enable essential site functionality,
    as well as for analytics, personalization, and targeted advertising purposes.
    To learn more, view the following link: Privacy Policy Manage Preferences IEEE.org
    IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account Personal
    Sign In Browse My Settings Help Access provided by: University of Nebraska - Lincoln
    Sign Out All Books Conferences Courses Journals & Magazines Standards Authors
    Citations ADVANCED SEARCH Conferences >2021 International Conference... Smart
    irrigation and Crop health prediction Publisher: IEEE Cite This PDF E Siddhartha;
    Manjunath C Lakkannavar All Authors 3 Cites in Papers 232 Full Text Views Abstract
    Document Sections I. Introduction II. Literature Survey III. Proposed System IV.
    Implementation V. Results Show Full Outline Authors Figures References Citations
    Keywords Metrics Abstract: As the world is racing to the era of automation and
    IoT in our life. In automation we majorly focus on creating smart devices, digital
    cities, automated homes etc. Crop Irrigation playing a major role in agriculture,
    automation of irrigation is a need to help the farmers with technology. For crop
    health prediction there is a necessity of creating a device that collects the
    data and then analyse it to generate results in real time. In our paper we are
    focusing on creating a raspberry pi based device to collect the data. As the device
    collects the data, it will be sent to the server through MQTT. We utilize an ANN
    model for analysing the data to generate results of crop health prediction with
    high accuracy. Lastly based on the response from sensors the motor is triggered
    by the device to involuntarily switch the water flow in the farm. The System also
    can control irrigation data in android mobile app. Published in: 2021 International
    Conference on Recent Trends on Electronics, Information, Communication & Technology
    (RTEICT) Date of Conference: 27-28 August 2021 Date Added to IEEE Xplore: 29 October
    2021 ISBN Information: DOI: 10.1109/RTEICT52294.2021.9573542 Publisher: IEEE Conference
    Location: Bangalore, India SECTION I. Introduction Internet of things allows an
    obvious interconnection with various devices, machines, and Internet-based services
    and also it is further utilized in benefiting the people to perform the tasks
    with ease. According to Indian government Internet of thingpolicy, the government
    planned to invest 15 billion in IoT by 2020. The policy of Indian government announces
    that IoT supports various sectors like agriculture, manufacturing, retail, banking,
    automobile to solve the problems in their industries and finding solution through
    automation using IoT. The utilization of Io by various industries and support
    for the cause of digital India. The overall number of users will grow to 2.7 billion
    from 200 million in the country. According to Gartner report, total revenue generated
    by IoT Industries would be 300 billion and connected devices would be 30 billion
    globally. The revenue of India was predicted to be generated 25 percent of the
    revenue from industries using IoT In India farmer has to work at night to perform
    the switching activity of motor because of irregular power cuts. The system is
    beneficial to the farmer to monitor the irrigation as well as the crop health
    to get better yield. In this system soil moisture sensor equipped to measure the
    moisture level in the soil and depending on the level of moisture content the
    pump state will be decided, which is set by the server avoiding manual intervention.
    The usage of IoT in homes, automobiles, public places has been growing rapidly.
    Considering agriculture as the backbone of the nation there is a need for implementation
    of IoT in agriculture to help the farmer. SECTION II. Literature Survey In [1]
    The Author designed a water pump controller by using a moisture sensor and Esp8266
    NodeMCU-12E. MQTT protocol is utilized for transmission and reception of sensor
    data. Based on the moisture level in soil NodeMCU-12E controls the status of water
    pump and the moisture level of soil and water pump status is viewed on a web page
    or mobile app. The benefit of this system is the farmer will be able to turn on/off
    the pump with the help of Internet connectivity. Soil moisture sensor used for
    measuring the content of water in the land and depending on water content, the
    pump state will be decided by the server, so need of manually turning on and off
    of the water pump not required. thinger.io platform is used for displaying moisture
    data and switch position in web page and mobile app. In [2] the author is majorly
    focusing on creating a model where fuzzy logic was used to make decision to perform
    various tasks to carry on irrigation in the farm. The proposed work of author
    is to provide control over irrigation and is decided with the fuzzy logic model.
    The model was successful in relieving crops during heavy rains, but this model
    was failed to automate irrigation. In [3] The system consists of LM35 temperature
    sensor, an Arduino Uno R3 microcontroller board, motion sensor, moisture sensor
    and a humidity sensor, a Wi-Fi(ESP8266) module and a GSM module. This comprises
    of an android app which has option to setup the profile for irrigation defined
    based on daily, weekly and seasonal mode. It has a software which has been trained
    to send notifications to the farmer when the parameters are sensed and if the
    values are less than the threshold, depending on the farmer''s action the control
    triggers the Arduino Uno to either start/stop the irrigation. If there is any
    invasions the device sends a notification message through SMS in addition to the
    notification on the app deployed for the same in the farmer''s smartphone using
    3G/4G/Wi-Fi. Threshold values of weather conditions like temperature, humidity,
    moisture are set with respect to the environmental conditions of that specific
    region. In [4] The Microcontroller has inputs from the Humidity sensor, Soil Moisture
    Sensor, Temperature Sensor and Ultrasonic sensor. The water pump is connected
    via Relay. The temperature and humidity values are measured and sent to the user.
    The soil moisture sensor senses the content of water present in soil and water
    pump will supplying the water whenever the content of water in soil reduced. It
    sends notifications to the end user with predefined messages. The water level
    in a reservoir is continuously monitored by sensor and alerts the customer with
    information of height of water from the top view, present percentage of water
    available in the reservoir at that instant. It also has a set of predefined messages
    about the status of reservoir which are sent when the reservoir is empty or full.
    With these notifications the subscriber can take necessary actions. In [5] A moisture
    sensor and DHT-11 are linked to Node MCU that acts as a client/subscriber of MQTT.
    They used a Raspberry pi which acts as a broker of MQTT. The prediction is done
    by data analysis tool and based on the results the motor is switched on/off. The
    data analysis tool is called as WEKA This is used to accept data available across
    all sensors as training data and a model is produced which can be used in future
    for testing the data to predict the condition of the water pump connected to the
    raspberry pi 3 and smart irrigation system. [6]–[8] These have a method which
    makes usage of a webpage. It was built to send the details to the farmers which
    need to be manually accessed through the internet and farmers can access the available
    data from the webpage. These types of systems need to have a specific server to
    continuously store the data. The data received is interpreted, from these results
    the motor is automatically turned ON/OFF for irrigation. There are systems which
    use discrete sensor modules for fire detection in the farm and to alert the farmer.
    The farmer is required to continuously monitor the farm in many previously advised
    models. Besides, these systems were unsuccessful to predict the weather conditions
    early enough and change the irrigation scheme accordingly. The major drawback
    identified in these models they didn''t incorporate any system for safety. No
    system or mechanism was found which can alert the user about any failures in the
    device. They need some human effort during certain situations. It was noticed
    that no models have a result generation system in real-time which needs real-time
    data collection and analysis. SECTION III. Proposed System In this proposed model
    the data like soil moisture, ph, temperature, and humidity is obtained by the
    raspberry pi through sensors connected to it. The collected data is processed
    and based on the set values the action is taken to control the motor. The moisture
    level, ph, humidity and temperature are sent to the mobile app using MQQT protocol.
    The farmer can also control the motor through app. The raspberry pi is connected
    to a rgb pi camera to capture the images of the plant and fed to analyse the health
    of the crop using Artificial Neural network model. A LDr is used to detect day
    and night to switch the camera. Based on the results of ANN the crop health is
    predicted and notified to the farmer to take necessary actions. The information
    of crop health and moisture level and other sensor data is continuously monitored
    and sent to the cloud for better accuracy. Fig. 1 This figure shows the block
    diagram of proposed model. Show All A. IoT Devices to Collect the Data The IoT
    device is based on raspberry pi which allows he farmer to monitor the crop irrigation.
    Once the device is equipped it can be utilized for repeatedly transmitting data
    into the cloud for utilizing it to analyze in a real-time. We are focusing on
    using raspberry pi to control and monitor different sensors at that instant and
    interfacing of rgb pi camera is possible. Raspberry pi is easily adoptable for
    farmers. The availability of this device enables us to build a system that could
    enable various sensors and a camera to capture images of the crop. The usage of
    various sensors enables the device to collect multiple parameters of crop data
    in order to achieve better yield. In this system sensing devices like soil moisture
    probe, pH sensor probe, humidity sensor, temperature, LDr, camera, etc., are some
    of the sensors being used to observe the critical parameters of a crop. This device
    is employed to turn on or turn off a motor depending on the results produced.
    This process is suitable for the automation of irrigation process and monitoring
    the crop for better yield. The reverse operation of the motor i.e., to pump out
    excess water when the moisture level is above the required range. This device
    includes vast range of uses and it could be utilized for acquiring data associated
    to a particular crop. B. Artificial Neural Network Model The system has a section
    which focusses on creating ML model built with the method of ANN and employed
    for generating and analyzing the results with respect to the collected data from
    the device. The ANN involvement produces accurate results. A large amount of data
    can be processed and analyzed at faster rates and generates the results instantly.
    This model is used to analyze all the patterns of the crop to detect the level
    of infection and detect the situation of the crop and notify the farmer about
    the infected crop through a mobile app. The process of crop health prediction
    using Machine Learning begins with image capturing of crop. The process of capturing
    images is taken care by using rgb pi camera. The trained networks are used for
    making predictions. The system has a major advantage of including Artificial Neural
    Network model which leads to high accuracy. Fig. 2 Block diagram of ANN model
    Show All SECTION IV. Implementation IOT based smart irrigation and crop prediction
    system with Raspberry pi is designed to make decisions in irrigation by using
    practical information. System Implementation includes three stages. _Data Sensing
    _Image and Data Processing Notification. The parameters like moisture, humidity,
    temperature and ph are sensed under the Data sensing stage along with the images
    captured by rgb pi camera. These sensors are connected to the raspberry pi. This
    device performs as the IOT gateway in the system implemented since it has inbuilt
    Wi-Fi, memory slot and can transmit the data to the server. The data transfer
    happens with the use of inbuilt Wi-Fi module. Processing of data occurs in the
    raspberry pi board. Based on the results obtained the required actions are taken
    and the information is sent to the app. In the notification stage, the levels
    of data like moisture, temperature and ph are shown to the farmer through the
    app. Based on the results the system also decides the state of motor. The crop
    health is also monitored and analysed using the ANN model and results are notified
    to the farmer to take necessary action. The end-to-end algorithm of the smart
    irrigation and crop health prediction system is Begin _ Continuously get the sensor
    data _Converting the data sensed on the raspberry pi _Capture images frequently
    from the rgb pi camera _images are processed _ analysis of crop health using ANN
    model _Data transmission via the IOT Gateway to cloud _Notify in mobile App if
    farmer selects Turn ON for motor state=OFF If moisture< 10% motor_state=ON else
    if moisture>50% && <100% motor state =ON else if moisture=100% motor state=OFF
    else moisture<100%&& motor state=OFF pump _state =ON _elseif farmer opts switch-off
    _trigger signal transferred to the cloud _trigger signal will be transferred to
    the IOT gateway if motor state=OFF _Relay is triggered by IOT gateway to turn
    the motor off. _keep monitoring for the condition of threshold Terminate The Android
    mobile App is employed. The application contains the following features: Choice
    to switch the motor on/off. Moisture in the soil, temperature and ph status. Notify
    the condition of the crop and area infected. SECTION V. Results The values of
    different sensor data is obtained and images of the crop are captured to determine
    the staus of irrigation and crop condition. Concerning to the overall process
    of agriculture the irrigation and monitoring of crop condition is provided to
    the user. The data obtained during image processing is accumulated for future
    use of the system to compare the results with data obtained for more accuracy.
    Show All Table. 1: Results Obtained Conclusion The adoption of IOT for automation
    in irrigation process using ANN has many pros. The device could be employed to
    maintain and keep track of data from farm like moisture in soil, humidity level
    temperature, crop health prediction etc.,and maintain the crop which can be used
    for better productivity and help the farmer. The system can employed to irrigate
    the farm automatically without any human efforts and help the farmer in identifying
    the crop health at early stages. This system has greater flexibility to add many
    other tasks with similar functions to make it much advantageous in real-time.
    Authors Figures References Citations Keywords Metrics More Like This Soil Macro-Nutrients
    Detection, Crop and Fertilizer Recommendation with Irrigation System 2023 International
    Conference on Advances in Electronics, Communication, Computing and Intelligent
    Information Systems (ICAECIS) Published: 2023 Automation of Combined Irrigation
    System Control in Greenhouses with Electrochemically Activated Water 2022 International
    Ural Conference on Electrical Power Engineering (UralCon) Published: 2022 Show
    More IEEE Personal Account CHANGE USERNAME/PASSWORD Purchase Details PAYMENT OPTIONS
    VIEW PURCHASED DOCUMENTS Profile Information COMMUNICATIONS PREFERENCES PROFESSION
    AND EDUCATION TECHNICAL INTERESTS Need Help? US & CANADA: +1 800 678 4333 WORLDWIDE:
    +1 732 981 0060 CONTACT & SUPPORT Follow About IEEE Xplore | Contact Us | Help
    | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting
    | Sitemap | IEEE Privacy Policy A not-for-profit organization, IEEE is the world''s
    largest technical professional organization dedicated to advancing technology
    for the benefit of humanity. © Copyright 2024 IEEE - All rights reserved."'
  inline_citation: Siddhartha and Lakkannavar (2021)
  journal: 2021 6th International Conference on Recent Trends on Electronics, Information,
    Communication and Technology, RTEICT 2021
  key_findings: '1. The proposed system can effectively automate irrigation and monitor
    crop health in real-time.

    2. The ANN model provides accurate crop health prediction, enabling farmers to
    identify potential infections early on.

    3. The system utilizes MQTT protocol for data transmission, ensuring efficient
    communication between sensors, the Raspberry Pi, and the mobile app.'
  limitations: The study does not provide explicit information about the specific
    protocols used for data transmission and the integration of the ML model with
    other components of the automated irrigation management pipeline.
  main_objective: The main objective of the study is to design and implement an IoT-based
    smart irrigation and crop health prediction system using a Raspberry Pi, sensors,
    and an Artificial Neural Network (ANN) model.
  relevance_evaluation: 'This paper presents a highly relevant approach to the point
    of focus, which is the integration of deployed machine learning models with other
    components of the automated irrigation management pipeline. It demonstrates the
    utilization of an ANN model for real-time data processing and inference. The study
    emphasizes the effective integration of data preprocessing, decision-making, and
    control systems using MQTT protocol, which aligns well with the objective of our
    review.


    The study''s focus on automating irrigation, integrating sensor data, and deploying
    ML models in a real-time system provides valuable insights for our review. It
    contributes to our understanding of how ML models can be effectively deployed
    to enhance the efficiency and accuracy of automated irrigation management systems.'
  relevance_score: '0.85'
  relevance_score1: 0
  relevance_score2: 0
  study_location: Unspecified
  technologies_used: Raspberry Pi, Sensors (soil moisture, pH, temperature, humidity),
    RGB Pi camera, Artificial Neural Network (ANN) model, MQTT protocol
  title: Smart irrigation and Crop health prediction
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  apa_citation: Hakam Youness, Gaga Ahmed, Benachir El Haddadi. (2022). Machine Learning-based
    Smart Irrigation Monitoring System for Agriculture Applications Using Free and
    Low-Cost IoT Platform. 2022 International Conference on Microelectronics (ICM).
    doi:10.1109/ICM56065.2022.10005419
  authors:
  - Youness H.
  - Ahmed G.
  - Haddadi B.E.
  citation_count: '4'
  data_sources: Soil moisture sensors, temperature sensors, power consumption sensors
  description: 'A solution for the Internet of Things (IoT) Smart Irrigation Monitoring
    System based on artificial intelligence is proposed in this work, which is based
    on the communication between the Raspberry Pi3 card and severalESP32 clients using
    the MQTT and HTTP protocols, respectively. Our solution is divided into three
    parts: the firstis consists of soil moisture measurements in various zones of
    the field in order to construct a smart irrigation system. However, in the second
    part, for the second part, we involve the choice of power supply of our system.
    in this paper we use photovoltaic panels as a power source. A voltage constant
    and current measured by the ACS712 sensor, we have measured the power and energy
    of the solar panels every 5 min. These measures will be shown on the Node-RED
    platform and stored as a database in the SQLite programming language SQLite is
    introduced to reduce the database complexity. Because of this database, we can
    make accurate projections about water requirements and soil moisture. The last
    part consists of commanding our system by the best method(algorithm) of prediction
    for our case. Theratio of the reserved water was predicted with the use of machine
    learning (a model decision tree), which enabled us to generate these forecasts.
    By these forecasts command the valve. In practice, we use an electronic card that
    can support this type of machine learning algorithm. For this, we used the Raspberry
    pi card. Node-RED is the most suitable interface to apply this algorithm also
    it allows us to monitor in real-time with the laptop(local) and with the smartphone(4G)
    all measured by a dashboard. The IP address of raspberry needs with port1880 requires.
    This approach allows us to manage our system in a more efficient, automated, and
    intelligent manner.'
  doi: 10.1109/ICM56065.2022.10005419
  explanation: This study proposes an Internet of Things (IoT)-based smart irrigation
    monitoring system that utilizes MQTT and HTTP protocols to establish communication
    between various components, including Raspberry Pi and ESP32 microcontrollers.
    The system collects data on soil moisture, temperature, and power consumption
    using sensors and utilizes machine learning algorithms to predict watering requirements
    and optimize irrigation practices.
  extract_1: The study integrates deployed machine learning models with other irrigation
    management components using protocols like MQTT, CoAP, and RESTful APIs, enabling
    efficient and automated control systems.
  extract_2: The authors demonstrate the use of the Raspberry Pi card and Node-RED
    for implementing machine learning algorithms and monitoring irrigation systems
    in real-time.
  full_citation: '>'
  full_text: '>

    "This website utilizes technologies such as cookies to enable essential site functionality,
    as well as for analytics, personalization, and targeted advertising purposes.
    To learn more, view the following link: Privacy Policy Manage Preferences IEEE.org
    IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account Personal
    Sign In Browse My Settings Help Access provided by: University of Nebraska - Lincoln
    Sign Out All Books Conferences Courses Journals & Magazines Standards Authors
    Citations ADVANCED SEARCH Conferences >2022 International Conference... Machine
    Learning-based Smart Irrigation Monitoring System for Agriculture Applications
    Using Free and Low-Cost IoT Platform Publisher: IEEE Cite This PDF Hakam Youness;
    Gaga Ahmed; Benachir El Haddadi All Authors 5 Cites in Papers 503 Full Text Views
    Abstract Document Sections I. Introduction II. Part of Power Supplies III. Results
    and Discussion IV. Conclusion and Perspectives Authors Figures References Citations
    Keywords Metrics Abstract: A solution for the Internet of Things (IoT) Smart Irrigation
    Monitoring System based on artificial intelligence is proposed in this work, which
    is based on the communication between the Raspberry Pi3 card and severalESP32
    clients using the MQTT and HTTP protocols, respectively. Our solution is divided
    into three parts: the firstis consists of soil moisture measurements in various
    zones of the field in order to construct a smart irrigation system. However, in
    the second part, for the second part, we involve the choice of power supply of
    our system. in this paper we use photovoltaic panels as a power source. A voltage
    constant and current measured by the ACS712 sensor, we have measured the power
    and energy of the solar panels every 5 min. These measures will be shown on the
    Node-RED platform and stored as a database in the SQLite programming language
    SQLite is introduced to reduce the database complexity. Because of this database,
    we can make accurate projections about water requirements and soil moisture. The
    last part consists of commanding our system by the best method(algorithm) of prediction
    for our case. Theratio of the reserved water was predicted with the use of machine
    learning (a model decision tree), which enabled us to generate these forecasts.
    By these forecasts command the valve. In practice, we use an electronic card that
    can support this type of machine learning algorithm. For this, we used the Raspberry
    pi card. Node-RED is the most suitable interface to apply this algorithm also
    it allows us to monitor in real-time with the laptop(local) and with the smartphone(4G)
    all measured by a dashboard. The IP address of raspberry needs with port1880 requires.
    This approach allows us to manage our system in a more efficient, automated, and
    intelligent manner. Published in: 2022 International Conference on Microelectronics
    (ICM) Date of Conference: 04-07 December 2022 Date Added to IEEE Xplore: 09 January
    2023 ISBN Information: DOI: 10.1109/ICM56065.2022.10005419 Publisher: IEEE Conference
    Location: Casablanca, Morocco SECTION I. Introduction As in most countries in
    the world, agriculture has always been the mainstay of the economy and society
    of this country. Morocco is one of the peasant countries which globally depends
    on the field of agriculture in theireconomy, among the problems which present
    great obstacles in the field of agriculture are numerous, firstly the waste of
    water as well as the traditional methods used which are insufficient to obtain
    agricultural products in the best conditions. Agriculture uses new technologies,
    such as robotics, AI and IOT to improve farm performance [2]. IOT application
    covers “intelligent” environments in areas such as: transport, building, city,
    lifestyle, commerce, Agriculture, Factory, Supply chain, Emergency, Health, User
    interaction, culture and tourism, environment and energy [3] In this paper we
    are interested in the IOT of agriculture, IOSA (internet of smart agriculture)
    is made up of several fields to be discussed below: Greenhouses: Controls microclimate
    conditions to maximize fruit and vegetable production and quality [4] Compost:
    Control of humidity and temperature levels in alfalfa, hay, straw, etc. to prevent
    fungi and other Field Monitoring: Reduce crop spoilage and waste with better monitoring,
    accurate continuous data acquisition and management of agricultural fields [5]
    A. Different irrigation techniques in Morocco Irrigation is the process of bringing
    water to artificially cultivated plants to increase production and allow their
    natural growth, in the case of water deficit caused by a deficit of precipitation
    or excessive exchange or a decrease in the water table, especially in arid areas
    [6] Irrigation canals were built on the tracks for water transport, and sometimes
    in the high mountains. Irrigation systems can be classified into three broad categories:
    gravity (surface) irrigation, drip irrigation, and sprinkler irrigation [5] Gravity
    irrigation Drip irrigation To choose an irrigation method, the farmer must know
    the advantages and disadvantages of the different methods. Unfortunately, in many
    cases, there is no single best solution because all methods have their advantages
    and disadvantages [5 the following table provides a comparison of different irrigation
    methods based on site and situational factors. Table 1 Value In % of Field Efficiency
    B. Smart farming techniques 1. SOIL-FREE Agriculture Cultivation of plants carried
    out on neutral and inert substrates. The substrate is regularly irrigated with
    a stream of solution which brings the mineral salts and essential nutrients to
    the plant. 2. Hydroponic farming Hydroponics is a term that brings together the
    different techniques of above-ground cultivation, but it is also a fairly simple
    cultivation system. This technique consists of feeding the roots of plants that
    are in the substrate (for example, in rock wool loaves) with a nutrient solution,
    this principle allows the plant to have better access to oxygen, to water, as
    well as food. [7] 3. Precision farming For example, soil sampling, to measure
    qualities such as mineral content and porosity, can predict the fertility of different
    parts of a field.. It requires the use of new technologies, such as satellite
    imagery and computing. It is based on localization means in the plot, including
    the GPS-type satellite positioning system. [8] In this paper, we are going to
    realize an intelligent electronic system by which we are going to control the
    irrigation. The irrigation system is responsible for measuring meteorological
    quantities such as temperature, humidity and light intensity using sensors. This
    data will be retrieved through clients which are ESP32 microcontrollers, these
    will be transferred to the Raspberry Pi 3 processing unit. The latter allows us
    to control different ESP32 clients, each client of which is connected to different
    agricultural fields and also to the photovoltaic field which ensures the electrical
    supply of our system. This system will also be responsible for measuring the electrical
    quantities from the photovoltaic installation, the current and the power delivered
    by the PV field. The server will allow us to create a web server from which we
    can read all the data that we have sent from the clients. C. System realization
    description The realization of our intelligent electronic irrigation system is
    based on the IOT, to facilitate the irrigation tasks, we will work on two agricultural
    fields one is of silts and the other of apples, each field is linked to an ESP32
    card to collect the captured data and display them on the monitor signal using
    Arduino IDE, each client (ESP32) is linked to two humidity sensors to measure
    the humidity of its soil in different areas for the precession of water needed
    for good irrigation and other common quantities between the two fields such as
    the temperature, the percentage of humidity present in the area and the percentage
    of rain if it exists. All this data is collected by the various clients (ESP32)
    and sent to the server (RASPBERRY PI3) via the MQTT protocol (WIFI) so that the
    server records the necessary data in real time in a database and displays it in
    real time in a platform (Node-RED). The power supply necessary to provide all
    the necessary utility in electrical energy is due to a photovoltaic installation
    that we installed after a sizing study of our electricity needs, we use sensors
    to measure the quantities that act on the production of the installation such
    as the humidity of the air, the temperature of the air the temperature of the
    solar panels as well as the current and the power delivered by this PV installation…
    All these data are collected by the third ESP32 card (client3) and sent to the
    server (RASPBERRY PI3). A. Irrigation part Among the objectives of irrigation
    control is to prevent the waste of water thus protecting agricultural crops against
    dangerous parasites, the birth of these bacteria is due to the excessive percentage
    of humidity in the soil… The realization of our irrigation system is made in four
    stages that we will present successively. Figure.2. Overall project plan Show
    All D. Electronic system for field 1) ESP32 microcontrollers and sensors For field
    1 we will install two humidity sensors, one is on the plant side and the other
    plant lion at a distance of 15cm, so we connect the DS18b20 temperature sensor
    to measure the temperature of the area which influences the quality of agricultural
    products and their evolution, in addition to a light intensity sensor, the latter
    has a great impact on the evolution of plants and their producibility. Figure.1.
    Field 1 circuit connection Show All As shown in the diagram above, the electronic
    system responsible for controlling the irrigation of agricultural field 1 is composed
    of a first ESP32 card which collects the data captured by the two humidity sensors.
    The data (humidity of the two zones, temperature, intensity) captured by the sensors
    will be collected in real time by the first client (ESP32). Field 1 ESP32 client
    and Raspberry Pi3 server The data (humidity of the two zones, light intensity,
    temperature) captured by the sensors will be collected by the first client (ESP32)
    and will be sent in real-time to the server (Raspberry Pi3) this operation is
    done using protocol MQTT which allows us to receive the different data from the
    deferent clients and control them via Wi-Fi The first ESP32 1 client will gather
    data, which our Raspberry Pi3 server will analyse and save in real time as a CSV
    file. Figure 63 illustrates how the data is set up and presented as an Excel table.
    The names, units, values, and dates of each quantity are listed first in the data
    for that measurement. We can forecast how much water is needed to irrigate plants
    on a weekly or monthly basis by capturing these data, which also enables us to
    monitor the performance of irrigation systems. All of this data may be shown on
    the Node-RED platform using a computer or a smartphone. so we can control the
    pump and the joint solenoid valve of the Node-RED platform (Raspberry Pi3 server
    to client (ESP32) it is the reverse data transfer path (ESP32 client to Raspberry
    server), as shown in the following diagram: Figure.3. Diagram of field 1 Show
    All The ESP32 board, which collects data from the two humidity sensors attached
    to analog pins 33 and 34 of the ESP32, receives data from the two humidity sensors
    that are separated by a distance of 10 cm in order to detect the humidity of different
    sections of the soil in agricultural field 2. In order to detect the level of
    water in our tank and ensure that there is always enough water, a CH-SR04 ultrasonic
    sensor is made up of a transmitter connected to analog pin 18 and a receiver connected
    to analog pin 5. For the rain sensor, we have connected their analog signal pin
    to pin 35 and their power pin supply is ensured by the pin 17. Field 2 ESP32 Client
    and Raspberry Pi3 Server The data (humidity of the two zones, percentage of rain,
    water level) measured by the sensors will be collected by the first client (ESP32)
    will be sent in real time to the server (Raspberry Pi3) this operation sends data
    in real time is done using MQTT protocol which allows us the reception of different
    data from the deferent clients and control them via Wi-Fi transfer path (ESP32
    client to Raspberry server), as shown in the following diagram: Figure.4. Diagram
    of field 2 Show All The recording of the data captured by the sensors installed
    in field 2 is given by the following figures which show the humidity of the two
    zones 1 and 2 as well as the ambient temperature and the percentage of rain E.
    Application of Machine Learning to the irrigation system Machine Learning is an
    artificial intelligence technology that allows computers to learn and develop
    from data. [9] There is no machine learning without data to train on. H. Algorithm
    machine learning of implementation At the beginning of the program, all the required
    libraries and variables are initialized. The WIFI connection, MQTT server, and
    pandas. Saved data into Excel file is the first step to implementation machine
    learning, data (temperature) is changed every hour and day but by algorithm machine
    learning can predict how data will be changed in a fewhours coming, the first
    step is to create dataset and loads a training partition and trains a “decision
    tree classifier”, saving the model locally into Raspberry Pi, with a test partition
    can load variation of data and evaluate a previously trained, trained model during
    deployment. Data is received via MQTT, predictions are made and then sent back.
    In order to predict new data (temperature) by that model, this future of temperature
    (data) is seen in fig 10. With values of temperature can predict the variation
    of production is good or terrible for example if temperature is high in next hour
    that mean the production is terrible. Figure.6. Prediction of temperature by model
    of machine learning Show All SECTION II. Part of Power Supplies To manage the
    power supply of our farm, the most efficient solution is to use a photovoltaic
    installation, the IoT can be implemented mainly as a monitoring application in
    our installation. A third ESP32 card that allows us to calculate the electrical
    power delivered by the solar panels that power our system. as shown in the following
    diagram: Figure.7. Diagram of the solar park Show All Our system is composed of
    direct current components so it can be modeled as a DC load. The power and current
    data are transferred from the client (ESP32) to the server (Raspberry Pi3), This
    server allows these data to be displayed in real time in NODFE-RED software. SECTION
    III. Results and Discussion The results have been divided into two types: database,
    and dashboard. A. Database The figure below shows the recording of the soil moisture
    values of zone 1 in real-time using the PHPLiteadmine, as shown in the following
    figure the morning humidity is raised in the order of 3167 Figur.8. Zone 1 humidity
    database in real time Show All B. Dashboard The dashboard can be seen remotely
    on a desktop computer as well, by accessing the Rasp Pi IP (Internet Protocol)
    address. The computer should be connected to the same WIFI as the Rasp Pi. Global
    our system in Node-Red as shown in figure 10: Figure.11. Zone 1 and 2 humidity
    data on Node-RED Show All The humidity follows a decrease in these values during
    the period between 6:00 a.m. and 4:00 p.m. Figure.14. Display of power and current
    values under Node-RED Show All SECTION IV. Conclusion and Perspectives Throughout
    This work we have succeeded in measuring meteorological parameters such as temperature,
    humidity, percentage of rain and light intensity, thus visualizing the electrical
    parameters of a photovoltaic installation. During this project, we again managed
    to follow the evolution of plants from the knowledge of the surface of the leaf
    of the plants thus creating a secure database based on MySQL language or by recording
    the data measured by the sensors. Our paper is based on artificial intelligence
    and also on the Internet of Things, the latter has enabled us to solve major problems
    in the field of agriculture, such as the waste of water and the quality of products.
    agricultural Also it is easy to use for farmers because the use of this system
    does not require great computer knowledge. The perspectives of this work are as
    follows: Use Drone to scan the surfaces of agricultural fields. Use infrared sensors
    to measure the languor of agricultural fields. Authors Figures References Citations
    Keywords Metrics More Like This Performance Evaluation of Machine Learning Algorithms
    for Smart Irrigation Systems 2023 2nd International Conference on Electronics,
    Energy and Measurement (IC2EM) Published: 2023 Efficient Machine Learning Algorithm
    for Smart Irrigation 2020 International Conference on Communication and Signal
    Processing (ICCSP) Published: 2020 Show More IEEE Personal Account CHANGE USERNAME/PASSWORD
    Purchase Details PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS Profile Information
    COMMUNICATIONS PREFERENCES PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help?
    US & CANADA: +1 800 678 4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow
    About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination
    Policy | IEEE Ethics Reporting | Sitemap | IEEE Privacy Policy A not-for-profit
    organization, IEEE is the world''s largest technical professional organization
    dedicated to advancing technology for the benefit of humanity. © Copyright 2024
    IEEE - All rights reserved."'
  inline_citation: (Hakam Youness, Gaga Ahmed, Benachir El Haddadi, 2022)
  journal: 2022 International Conference on Microelectronics, ICM 2022
  key_findings: The study demonstrates the successful implementation of a smart irrigation
    system using machine learning algorithms. The system monitors soil moisture and
    temperature, predicts watering requirements, and optimizes irrigation practices,
    resulting in efficient water usage and improved crop productivity.
  limitations: The study primarily focuses on the implementation of a smart irrigation
    system within a specific agricultural context, and its findings may not be directly
    applicable to all automated irrigation management systems within the broader context
    of the review.
  main_objective: To develop an IoT-based smart irrigation monitoring system that
    utilizes machine learning algorithms to optimize irrigation practices based on
    real-time data.
  relevance_evaluation: This paper provides valuable insights into the utilization
    of machine learning algorithms and the integration of various components in a
    smart irrigation management system. Its focus on the integration of deployed machine
    learning models with other system components, such as data preprocessing and control
    systems, aligns well with the specific point of interest in our literature review,
    which explores the integration of machine learning models within the automated
    irrigation management pipeline.
  relevance_score: '0.8'
  relevance_score1: 0
  relevance_score2: 0
  study_location: Unspecified
  technologies_used: Raspberry Pi, ESP32 microcontrollers, Node-RED, MQTT, CoAP, RESTful
    APIs
  title: Machine Learning-based Smart Irrigation Monitoring System for Agriculture
    Applications Using Free and Low-Cost IoT Platform
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  apa_citation: 'Ulybyshev, D., Yilmaz, I., Northern, B., Seyler, T., Kholodilo, V.,
    Massengille, J., Burks, T., Mitchell, R., Tice, J., & Ujiie, R. (2021, April).
    Trustworthy Data Analysis and Sensor Data Protection in Cyber-Physical Systems.
    In SAT-CPS ''21: Proceedings of the 2021 ACM Workshop on Secure and Trustworthy
    Cyber-Physical Systems (pp. 13-22). Association for Computing Machinery. https://doi.org/10.1145/3445969.3450432'
  authors:
  - Ulybyshev D.
  - Yilmaz I.
  - Northern B.
  - Kholodilo V.
  - Rogers M.
  citation_count: '5'
  data_sources: Not mentioned in the paper.
  description: 'Cyber-Physical Systems are widely used in critical infrastructures
    such as the power grids, water purification systems, nuclear plants, oil refinery
    and compressor plants, food manufacturing, etc. Anomalies in these systems can
    be a result of cybersecurity attacks, failed sensors or communication channels.
    Undetected anomalies may lead to process failure, cause financial damage and have
    significant impact on human lives. Thus, it is important to detect anomalies at
    early stages and to protect data in Cyber-Physical Systems. In this paper, we
    propose the novel on-the-fly NIST-compliant key generation scheme for a secure
    data container used to transfer and store sensor data. The data container delivers
    data from the low-level field sensors to high-level data analysis servers in a
    protected form. It provides data confidentiality and integrity, as well as data
    origin integrity, a fine-grained role-based and attribute-based access control.
    As a result, the anomaly detector runs on trustworthy data sets, protected from
    unauthorized adversarial modifications. Our solution can be easily integrated
    with many existing Cyber-Physical Systems and IT infrastructures since our secure
    data container supports RESTful API and is implemented in two modifications: (1)
    signed, watermarked and encrypted spreadsheet file; (2) signed and encrypted JSON
    file. In addition, we implemented several machine learning models based on a Random
    Forest, a k-Nearest Neighbors, a Support Vector Machine and a Neural Network algorithms
    for the detection of various anomalies and attacks in a gas pipeline system. We
    will demonstrate that our anomaly detection models achieve high detection rate
    with an average accuracy of 97.7% for two industrial data sets collected by the
    Mississippi State University''s Critical Infrastructure Protection Center and
    Oak Ridge National Laboratories (ORNL)'
  doi: 10.1145/3445969.3450432
  explanation: This paper presents a novel NIST-compliant key generation scheme for
    securely transferring sensor data within a protected "data container." The data
    container is designed to ensure data confidentiality, integrity, and origin integrity
    and provides fine-grained role-based and attribute-based access control. This
    protection is crucial for ensuring the trustworthiness of data used in anomaly
    detection, a critical aspect of maintaining secure and reliable cyber-physical
    systems, including those used in critical infrastructure such as power grids,
    water purification systems, and industrial plants.
  extract_1: 'Our solution can be easily integrated with many existing Cyber-Physical
    Systems and IT infrastructures since our secure data container supports RESTful
    API and is implemented in two modifications: (1) signed, watermarked and encrypted
    spreadsheet file; (2) signed and encrypted JSON file.'
  extract_2: As a result, the anomaly detector runs on trustworthy data sets, protected
    from unauthorized adversarial modifications.
  full_citation: '>'
  full_text: '>

    "This website uses cookies We occasionally run membership recruitment campaigns
    on social media channels and use cookies to track post-clicks. We also share information
    about your use of our site with our social media, advertising and analytics partners
    who may combine it with other information that you’ve provided to them or that
    they’ve collected from your use of their services. Use the check boxes below to
    choose the types of cookies you consent to have stored on your device. Use necessary
    cookies only Allow selected cookies Allow all cookies Necessary Preferences Statistics
    Marketing Show details       skip to main content University of Nebraska Lincoln
    Browse About Sign in Register Journals Magazines Proceedings Books SIGs Conferences
    People Search ACM Digital Library Advanced Search Conference Proceedings Upcoming
    Events Authors Affiliations Award Winners HomeConferencesCODASPYProceedingsSAT-CPS
    ''21Trustworthy Data Analysis and Sensor Data Protection in Cyber-Physical Systems
    RESEARCH-ARTICLE SHARE ON Trustworthy Data Analysis and Sensor Data Protection
    in Cyber-Physical Systems Authors: Denis Ulybyshev , Ibrahim Yilmaz , Bradley
    Northern , + 2 Authors Info & Claims SAT-CPS ''21: Proceedings of the 2021 ACM
    Workshop on Secure and Trustworthy Cyber-Physical SystemsApril 2021Pages 13–22https://doi.org/10.1145/3445969.3450432
    Published:26 April 2021Publication History 3 citation 165 Downloads eReaderPDF
    SAT-CPS ''21: Proceedings of the 2021 ACM Workshop on Secure and Trustworthy Cyber-Physical
    Systems Trustworthy Data Analysis and Sensor Data Protection in Cyber-Physical
    Systems Pages 13–22 Previous Next ABSTRACT Supplemental Material References Cited
    By Index Terms Recommendations Comments ABSTRACT Cyber-Physical Systems are widely
    used in critical infrastructures such as the power grids, water purification systems,
    nuclear plants, oil refinery and compressor plants, food manufacturing, etc. Anomalies
    in these systems can be a result of cybersecurity attacks, failed sensors or communication
    channels. Undetected anomalies may lead to process failure, cause financial damage
    and have significant impact on human lives. Thus, it is important to detect anomalies
    at early stages and to protect data in Cyber-Physical Systems. In this paper,
    we propose the novel on-the-fly NIST-compliant key generation scheme for a secure
    data container used to transfer and store sensor data. The data container delivers
    data from the low-level field sensors to high-level data analysis servers in a
    protected form. It provides data confidentiality and integrity, as well as data
    origin integrity, a fine-grained role-based and attribute-based access control.
    As a result, the anomaly detector runs on trustworthy data sets, protected from
    unauthorized adversarial modifications. Our solution can be easily integrated
    with many existing Cyber-Physical Systems and IT infrastructures since our secure
    data container supports RESTful API and is implemented in two modifications: (1)
    signed, watermarked and encrypted spreadsheet file; (2) signed and encrypted JSON
    file. In addition, we implemented several machine learning models based on a Random
    Forest, a k-Nearest Neighbors, a Support Vector Machine and a Neural Network algorithms
    for the detection of various anomalies and attacks in a gas pipeline system. We
    will demonstrate that our anomaly detection models achieve high detection rate
    with an average accuracy of 97.7% for two industrial data sets collected by the
    Mississippi State University''s Critical Infrastructure Protection Center and
    Oak Ridge National Laboratories (ORNL) Skip Supplemental Material Section Supplemental
    Material SAT-CPS21-SaT018f.mp4 This video presents a paper \"Trustworthy Data
    Analysis and Sensor Data Protection in Cyber-Physical Systems\". The solution
    relies on using the PROSPECD data container as well as a lightweight JSON-based
    secure data container to store and transfer sensor data from low-level field devices
    and sensors to the high-level computationally powerful data analysis servers for
    trustworthy anomaly detection in cyber-physical systems. In this video we will
    cover a NIST-compliant AES key generation algorithm that provides an extra security
    layer for sensor data protection in order to prevent adversarial data modifications.
    We also compare the performance of several machine learning-based classifiers
    used to detect anomalies in a selected industrial data set. Our results show that
    KNN and Random Forest-based anomaly detectors provide the best performance. MP4
    55.8 MB Play streamDownload References Uttam Adhikari, Shengyi Pan, Tommy Morris,
    Raymond Borges, and Justin Beaver. 2015. Industrial Control System (ICS) Cyber
    Attack Datasets. Retrieved December 17, 2020 from https://sites.google.com/a/uah.edu/tommy-morris-uah/ics-data-sets
    Siemens Aktiengesellschaft. 2021. Terms of Use. Retrieved February 24, 2021 from
    https://new.siemens.com/global/en/general/terms-of-use.html Justin M Beaver, Raymond
    C Borges-Hink, and Mark A Buckner. 2013. An evaluation of machine learning methods
    to detect malicious SCADA communications. In 2013 12th International Conference
    on Machine Learning and Applications, Vol. 2. IEEE, 54--59. Show All References
    Cited By View all Seyler T and Ulybyshev D. (2023). SEMAFORE: Secure Mobile Field
    Diagnostics for Cyber-Physical Systems. Intelligent Sustainable Systems. 10.1007/978-981-19-7660-5_38.
    (445-458). https://link.springer.com/10.1007/978-981-19-7660-5_38 Massengille
    J, Burks T, Mitchell R, Tice J and Ulybyshev D. (2022). Data Protection and Export
    for Transaction Ledgers in Permissioned Blockchain Platforms 2022 IEEE 19th International
    Conference on Software Architecture Companion (ICSA-C). 10.1109/ICSA-C54293.2022.00042.
    978-1-6654-9493-9. (175-182). https://ieeexplore.ieee.org/document/9779837/ Ujiie
    R, Kholodilo V, Northern B and Ulybyshev D. (2022). Secure Monitoring and Notification
    System for Cloud Infrastructures SoutheastCon 2022. 10.1109/SoutheastCon48659.2022.9764125.
    978-1-6654-0652-9. (787-792). https://ieeexplore.ieee.org/document/9764125/ Index
    Terms Trustworthy Data Analysis and Sensor Data Protection in Cyber-Physical Systems
    Computer systems organization Embedded and cyber-physical systems Computing methodologies
    Machine learning Security and privacy Cryptography Database and storage security
    Intrusion/anomaly detection and malware mitigation Recommendations A hybrid behavior-
    and Bayesian network-based framework for cyber–physical anomaly detection Abstract
    In recent years, the increasing Internet connectivity and heterogeneity of industrial
    protocols have been raising the number and nature of cyber-attacks against Industrial
    Control Systems (ICS). Such cyber-attacks may lead to cyber anomalies and ...
    Highlights Hybrid behavior- and Bayesian network-based cyber–physical anomaly
    detection. Read More Adaptive window-based sensor attack detection for cyber-physical
    systems DAC ''22: Proceedings of the 59th ACM/IEEE Design Automation Conference
    Sensor attacks alter sensor readings and spoof Cyber-Physical Systems (CPS) to
    perform dangerous actions. Existing detection works tend to minimize the detection
    delay and false alarms at the same time, while there is a clear trade-off between
    the two ... Read More Anomaly-Based Detection and Classification of Attacks in
    Cyber-Physical Systems ARES ''17: Proceedings of the 12th International Conference
    on Availability, Reliability and Security Cyber-physical systems are found in
    industrial and production systems, as well as critical infrastructures. Due to
    the increasing integration of IP-based technology and standard computing devices,
    the threat of cyber-attacks on cyber-physical systems ... Read More Comments 47
    References View Table Of Contents Footer Categories Journals Magazines Books Proceedings
    SIGs Conferences Collections People About About ACM Digital Library ACM Digital
    Library Board Subscription Information Author Guidelines Using ACM Digital Library
    All Holdings within the ACM Digital Library ACM Computing Classification System
    Digital Library Accessibility Join Join ACM Join SIGs Subscribe to Publications
    Institutions and Libraries Connect Contact Facebook Twitter Linkedin Feedback
    Bug Report The ACM Digital Library is published by the Association for Computing
    Machinery. Copyright © 2024 ACM, Inc. Terms of Usage Privacy Policy Code of Ethics"'
  inline_citation: (Ulybyshev et al., 2021)
  journal: SAT-CPS 2021 - Proceedings of the 2021 ACM Workshop on Secure and Trustworthy
    Cyber-Physical Systems
  key_findings: 'The proposed data container supports RESTful APIs and is implemented
    in two modifications: (1) signed, watermarked and encrypted spreadsheet file;
    (2) signed and encrypted JSON file. The container ensures data confidentiality,
    integrity, and origin integrity and provides fine-grained role-based and attribute-based
    access control.'
  limitations: The paper does not specifically address the integration of deployed
    ML models with other components of an automated irrigation management pipeline,
    such as decision-making and control systems, using protocols like MQTT, CoAP,
    or RESTful APIs. The paper's focus is on data security and trustworthiness in
    cyber-physical systems, rather than on the specific context of automated irrigation
    management.
  main_objective: To propose a secure data container for transferring and storing
    sensor data in cyber-physical systems, ensuring data confidentiality, integrity,
    origin integrity, and fine-grained access control.
  relevance_evaluation: The paper's focus on secure data transfer and storage aligns
    well with the review's exploration of data processing and ML model integration
    within automated irrigation management pipelines. The paper's emphasis on data
    confidentiality, integrity, and origin integrity is particularly relevant to ensuring
    the trustworthiness of data used in real-time decision-making.
  relevance_score: '0.8'
  relevance_score1: 0
  relevance_score2: 0
  study_location: Unspecified
  technologies_used: RESTful APIs, NIST-compliant key generation
  title: Trustworthy Data Analysis and Sensor Data Protection in Cyber-Physical Systems
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  apa_citation: 'Agossou, B. E., & Toshiro, T. (2021). IoT & AI Based System for Fish
    Farming: Case study of Benin. GoodIT ''21: Proceedings of the Conference on Information
    Technology for Social Good, 259-264. https://doi.org/10.1145/3462203.3475873'
  authors:
  - Agossou B.E.
  - Toshiro T.
  citation_count: '11'
  data_sources: Water quality data from IoT sensors
  description: 'Agriculture including aquaculture has been changing through multiple
    technological transformations in recent years. The Internet of Things (IoT) and
    Artificial Intelligence (AI) are providing remarkable technological innovations
    on fish farming. In this research, we present an automated IoT and AI-based system
    to improve fish farming. The proposed system uses multiple sensors to measure
    in real-time water quality chemical parameters such as: temperature, pH, turbidity,
    electrical conductivity, total dissolved solids, etc., from the fish pond and
    send them on a cloud database to allow fish farmers to access them in realtime
    with their devices (mobile phone, PC, tablets). The system contains three web
    applications which fish farmers can use. The first web application enables farmers
    with realtime visualizations of sensors data, issues alerts and remote pumps controls.
    Fish farmers can use the second web application for fish disease detection and
    to receive suggestions for diseases'' care. This would help to classify two fish
    diseases which are: Epizootic Ulcerative Syndrome(EUS), and Ichthyophthirus(Ich).
    The third web application is a digital community platform for knowledge sharing,
    capacity building, market opportunities and collaboration among fish farmers.
    Our system can help reduce human efforts, reinforce capacity building, increase
    fish production and market opportunities for fish farmers.'
  doi: 10.1145/3462203.3475873
  explanation: The study aimed to develop an IoT and AI-based system for fish farming
    that would improve efficiency and outcomes. The system monitors water quality
    parameters in real-time and provides remote control of pumps. It also includes
    disease detection and community-based knowledge sharing features. The study was
    conducted in Benin and involved the development and deployment of a prototype
    system.
  extract_1: null
  extract_2: null
  full_citation: '>'
  full_text: '>

    "This website uses cookies We occasionally run membership recruitment campaigns
    on social media channels and use cookies to track post-clicks. We also share information
    about your use of our site with our social media, advertising and analytics partners
    who may combine it with other information that you’ve provided to them or that
    they’ve collected from your use of their services. Use the check boxes below to
    choose the types of cookies you consent to have stored on your device. Use necessary
    cookies only Allow selected cookies Allow all cookies Necessary Preferences Statistics
    Marketing Show details       skip to main content University of Nebraska Lincoln
    Browse About Sign in Register Journals Magazines Proceedings Books SIGs Conferences
    People Search ACM Digital Library Advanced Search Conference Proceedings Upcoming
    Events Authors Affiliations Award Winners HomeConferencesGOODITProceedingsGoodIT
    ''21IoT & AI Based System for Fish Farming: Case study of Benin RESEARCH-ARTICLE
    SHARE ON IoT & AI Based System for Fish Farming: Case study of Benin Authors:
    B. Emmanuel Agossou , Takahara Toshiro Authors Info & Claims GoodIT ''21: Proceedings
    of the Conference on Information Technology for Social GoodSeptember 2021Pages
    259–264https://doi.org/10.1145/3462203.3475873 Published:09 September 2021Publication
    History 4 citation 335 Downloads eReaderPDF GoodIT ''21: Proceedings of the Conference
    on Information Technology for Social Good IoT & AI Based System for Fish Farming:
    Case study of Benin Pages 259–264 Previous Next ABSTRACT References Cited By Index
    Terms Recommendations Comments ABSTRACT Agriculture including aquaculture has
    been changing through multiple technological transformations in recent years.
    The Internet of Things (IoT) and Artificial Intelligence (AI) are providing remarkable
    technological innovations on fish farming. In this research, we present an automated
    IoT and AI-based system to improve fish farming. The proposed system uses multiple
    sensors to measure in real-time water quality chemical parameters such as: temperature,
    pH, turbidity, electrical conductivity, total dissolved solids, etc., from the
    fish pond and send them on a cloud database to allow fish farmers to access them
    in realtime with their devices (mobile phone, PC, tablets). The system contains
    three web applications which fish farmers can use. The first web application enables
    farmers with realtime visualizations of sensors data, issues alerts and remote
    pumps controls. Fish farmers can use the second web application for fish disease
    detection and to receive suggestions for diseases'' care. This would help to classify
    two fish diseases which are: Epizootic Ulcerative Syndrome(EUS), and Ichthyophthirus(Ich).
    The third web application is a digital community platform for knowledge sharing,
    capacity building, market opportunities and collaboration among fish farmers.
    Our system can help reduce human efforts, reinforce capacity building, increase
    fish production and market opportunities for fish farmers. References Saha, S.,
    Rajib, R. H., & Kabir, S. (2018, October). IoT based automated fish farm aquaculture
    monitoring system. In 2018 International Conference on Innovations in Science,
    Engineering and Technology (ICISET) (pp. 201--206). IEEE. Chen, J. H., Sung, W.
    T., & Lin, G. Y. (2015, October). Automated monitoring system for the fish farm
    aquaculture environment. In 2015 IEEE International Conference on Systems, Man,
    and Cybernetics (pp. 1161--1166). IEEE. Nikitha S Paulin, N.Anupriya & S.Prasanthi
    (2017). Pisciculture Environment Control Using Automated Monitoring System. Asian
    Journal of Applied Science and Technology (AJAST) Volume 1, Issue 2, 2017, Available
    at SSRN: https://ssrn.com/abstract=2941102 Show All References Cited By View all
    Medarametla L, Ahmed S and Dey S. (2023). Why should I bother to break the norm?:
    Exploring the Prospects of Adopting Technology-Driven Solutions by Indian Shrimp
    Farmers. Proceedings of the ACM on Human-Computer Interaction. 7:CSCW2. (1-25).
    Online publication date: 28-Sep-2023. https://doi.org/10.1145/3610222 Lan H, Ubina
    N, Cheng S, Lin S and Huang C. (2022). Digital Twin Architecture Evaluation for
    Intelligent Fish Farm Management Using Modified Analytic Hierarchy Process. Applied
    Sciences. 10.3390/app13010141. 13:1. (141). https://www.mdpi.com/2076-3417/13/1/141
    Bujas T, Koričan M, Vukić M, Soldo V, Vladimir N and Fan A. (2022). Review of
    Energy Consumption by the Fish Farming and Processing Industry in Croatia and
    the Potential for Zero-Emissions Aquaculture. Energies. 10.3390/en15218197. 15:21.
    (8197). https://www.mdpi.com/1996-1073/15/21/8197 Show All Cited By Index Terms
    IoT & AI Based System for Fish Farming: Case study of Benin Computer systems organization
    Embedded and cyber-physical systems Embedded systems Computing methodologies Machine
    learning Information systems World Wide Web Web applications Recommendations Monitoring
    water quality metrics of ponds with IoT sensors and machine learning to predict
    fish species survival Abstract Aquaculture involves cultivating various marine
    and freshwater aquatic creatures within regulated environments. Monitoring the
    aquatic environmental conditions in real-time is crucial for successful fish farming.
    The Internet of Things (IoT) ... Read More Applications of IoT for optimized greenhouse
    environment and resources management Highlights Utilization of IoT technologies
    in smart greenhouses. Abstract The role of Internet-of-Things (IoT) in precision
    agriculture and smart greenhouses has been reinforced by recent R&D projects,
    growing commercialization of IoT infrastructure, and related technologies such
    as satellites, artificial ... Read More Modeling Atlantic salmon fish farming
    industry: freshwater sub model simulation SpringSim ''09: Proceedings of the 2009
    Spring Simulation Multiconference Atlantic salmon fish farming has become a large
    industry worldwide. The industry''s processes are examined, and the farming stages
    analyzed. Fish Farming Industry Simulation Model (FFISiM), a hierarchical, colored
    Petri net simulation model, was ... Read More Comments 16 References View Table
    Of Contents Footer Categories Journals Magazines Books Proceedings SIGs Conferences
    Collections People About About ACM Digital Library ACM Digital Library Board Subscription
    Information Author Guidelines Using ACM Digital Library All Holdings within the
    ACM Digital Library ACM Computing Classification System Digital Library Accessibility
    Join Join ACM Join SIGs Subscribe to Publications Institutions and Libraries Connect
    Contact Facebook Twitter Linkedin Feedback Bug Report The ACM Digital Library
    is published by the Association for Computing Machinery. Copyright © 2024 ACM,
    Inc. Terms of Usage Privacy Policy Code of Ethics"'
  inline_citation: (Agossou & Toshiro, 2021)
  journal: GoodIT 2021 - Proceedings of the 2021 Conference on Information Technology
    for Social Good
  key_findings: The developed system successfully monitored water quality parameters
    and provided remote control of pumps. The disease detection feature showed promise
    in identifying common fish diseases. The community-based knowledge sharing platform
    facilitated collaboration among fish farmers.
  limitations: The study was conducted in a specific context of fish farming, which
    may limit its generalizability to other agricultural applications. The paper does
    not provide details on the specific ML models used or their performance in data
    processing. The study lacks a comprehensive evaluation of the system's effectiveness
    and impact on fish farming practices.
  main_objective: To develop and evaluate an IoT and AI-based system for fish farming
    to improve efficiency and outcomes.
  relevance_evaluation: The paper is moderately relevant to the point of focus on
    the integration of deployed ML models with other components of automated irrigation
    management systems. While the study focuses on fish farming, the concepts of data
    collection, cloud-based data processing, and remote control of actuators are applicable
    to irrigation management systems. However, the study does not specifically address
    the use of protocols like MQTT, CoAP, or RESTful APIs for integration, limiting
    its direct relevance to the specific context of automated irrigation management.
  relevance_score: '0.7'
  relevance_score1: 0
  relevance_score2: 0
  study_location: Benin
  technologies_used: IoT sensors, Cloud computing, Machine learning, Web applications
  title: 'IoT &amp; AI based system for fish farming: Case study of benin'
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  apa_citation: Panduman, Y. Y. F., Funabiki, N., Puspitaningayu, P., Kuribayashi,
    M., Sukaridhoto, S., & Kao, W.-C. (2022). Design and implementation of SEMAR IoT
    server platform with applications. Sensors, 22(17), 6436.
  authors:
  - Panduman Y.Y.F.
  - Funabiki N.
  - Puspitaningayu P.
  - Kuribayashi M.
  - Sukaridhoto S.
  - Kao W.C.
  citation_count: '16'
  data_sources: The SEMAR IoT server platform integrates and processes data from various
    IoT application systems, including air quality monitoring systems, water quality
    monitoring systems, road condition monitoring systems, fingerprint-based indoor
    localization systems, and air-conditioning guidance systems.
  description: Nowadays, rapid developments of Internet of Things (IoT) technologies
    have increased possibilities of realizing smart cities where collaborations and
    integrations of various IoT application systems are essential. However, IoT application
    systems have often been designed and deployed independently without considering
    the standards of devices, logics, and data communications. In this paper, we present
    the design and implementation of the IoT server platform called Smart Environmental
    Monitoring and Analytical in Real-Time (SEMAR) for integrating IoT application
    systems using standards. SEMAR offers Big Data environments with built-in functions
    for data aggregations, synchronizations, and classifications with machine learning.
    Moreover, plug-in functions can be easily implemented. Data from devices for different
    sensors can be accepted directly and through network connections, which will be
    used in real-time for user interfaces, text files, and access to other systems
    through Representational State Transfer Application Programming Interface (REST
    API) services. For evaluations of SEMAR, we implemented the platform and integrated
    five IoT application systems, namely, the air-conditioning guidance system, the
    fingerprint-based indoor localization system, the water quality monitoring system,
    the environment monitoring system, and the air quality monitoring system. When
    compared with existing research on IoT platforms, the proposed SEMAR IoT application
    server platform offers higher flexibility and interoperability with the functions
    for IoT device managements, data communications, decision making, synchronizations,
    and filters that can be easily integrated with external programs or IoT applications
    without changing the codes. The results confirm the effectiveness and efficiency
    of the proposal.
  doi: 10.3390/s22176436
  explanation: The proposed platform is designed to address the need for integrating
    various IoT application systems within smart cities. Existing research primarily
    focuses on the development of isolated IoT systems and lacks a comprehensive platform
    that seamlessly integrates these systems and enables data interoperability. SEMAR
    aims to fill this gap by providing a robust platform that supports the integration
    and interoperation of heterogeneous IoT devices and applications.
  extract_1: SEMAR offers Big Data environments with built-in functions for data aggregations,
    synchronizations, and classifications with machine learning. Moreover, plug-in
    functions can be easily implemented and added there.
  extract_2: Data from devices for different sensors can be accepted directly and
    through network connections, which will be used in real-time for user interfaces,
    text files, and access to other systems through REST API services.
  full_citation: '>'
  full_text: '>

    "This website uses cookies We use cookies to personalise content and ads, to provide
    social media features and to analyse our traffic. We also share information about
    your use of our site with our social media, advertising and analytics partners
    who may combine it with other information that you’ve provided to them or that
    they’ve collected from your use of their services. Consent Selection Necessary
    Preferences Statistics Marketing Show details                 Deny Allow selection
    Allow all     Journals Topics Information Author Services Initiatives About Sign
    In / Sign Up Submit   Search for Articles: Sensors All Article Types Advanced   Journals
    Sensors Volume 22 Issue 17 10.3390/s22176436 Submit to this Journal Review for
    this Journal Propose a Special Issue Article Menu Academic Editors Gianluigi Ferrari
    Luca Davoli Laura Belli Show more... Subscribe SciFeed Recommended Articles Related
    Info Links More by Authors Links Article Views 2184 Citations 15 Table of Contents
    Abstract Introduction Related Works Design of SEMAR IoT Server Platform Implementation
    of SEMAR IoT Server Platform Integration of Air Quality Monitoring System Integration
    of Water Quality Monitoring System Integration of Road Condition Monitoring System
    Integration of Air-conditioning Guidance System Integration of Fingerprint-based
    Indoor Localization System Evaluations Threats to Validity Conclusions Author
    Contributions Funding Institutional Review Board Statement Informed Consent Statement
    Data Availability Statement Acknowledgments Conflicts of Interest References share
    Share announcement Help format_quote Cite question_answer Discuss in SciProfiles
    thumb_up Endorse textsms Comment first_page settings Order Article Reprints Open
    AccessArticle Design and Implementation of SEMAR IoT Server Platform with Applications
    by Yohanes Yohanie Fridelin Panduman 1, Nobuo Funabiki 1,*, Pradini Puspitaningayu
    1, Minoru Kuribayashi 1, Sritrusta Sukaridhoto 2 and Wen-Chung Kao 3 1 Graduate
    School of Natural Science and Technology, Okayama University, Okayama 700-8530,
    Japan 2 Department of Informatic and Computer, Politeknik Elektronika Negeri Surabaya,
    Surabaya 60111, Indonesia 3 Department of Electrical Engineering, National Taiwan
    Normal University, Taipei 106, Taiwan * Author to whom correspondence should be
    addressed. Sensors 2022, 22(17), 6436; https://doi.org/10.3390/s22176436 Submission
    received: 9 July 2022 / Revised: 23 August 2022 / Accepted: 23 August 2022 / Published:
    26 August 2022 (This article belongs to the Special Issue IoT Enabling Technologies
    for Smart Cities: Challenges and Approaches) Download keyboard_arrow_down     Browse
    Figures Review Reports Versions Notes Abstract Nowadays, rapid developments of
    Internet of Things (IoT) technologies have increased possibilities of realizing
    smart cities where collaborations and integrations of various IoT application
    systems are essential. However, IoT application systems have often been designed
    and deployed independently without considering the standards of devices, logics,
    and data communications. In this paper, we present the design and implementation
    of the IoT server platform called Smart Environmental Monitoring and Analytical
    in Real-Time (SEMAR) for integrating IoT application systems using standards.
    SEMAR offers Big Data environments with built-in functions for data aggregations,
    synchronizations, and classifications with machine learning. Moreover, plug-in
    functions can be easily implemented. Data from devices for different sensors can
    be accepted directly and through network connections, which will be used in real-time
    for user interfaces, text files, and access to other systems through Representational
    State Transfer Application Programming Interface (REST API) services. For evaluations
    of SEMAR, we implemented the platform and integrated five IoT application systems,
    namely, the air-conditioning guidance system, the fingerprint-based indoor localization
    system, the water quality monitoring system, the environment monitoring system,
    and the air quality monitoring system. When compared with existing research on
    IoT platforms, the proposed SEMAR IoT application server platform offers higher
    flexibility and interoperability with the functions for IoT device managements,
    data communications, decision making, synchronizations, and filters that can be
    easily integrated with external programs or IoT applications without changing
    the codes. The results confirm the effectiveness and efficiency of the proposal.
    Keywords: Internet of Things; server platform; SEMAR; IoT application system;
    sensor; MQTT; REST API 1. Introduction The rapid growth of urban populations has
    increased the risk toward quality of life (QoL) around the world [1]. Smart cities
    have been studied for identifying, preventing, and acting in certain situations.
    In smart cities, QoL is commonly handled with indicators that measure the effectiveness
    of the services and sustainability of a city in domains/verticals, such as environments,
    health cares, securities, transportation, economies, educations, and governments
    [2]. Particularly, the environment vertical has drawn special attention in recent
    years. Indicators of environmental pollutants, such as air and water quality,
    road conditions, and house conditions, must be monitored to detect adverse situations
    associated with overpopulated regions. In this sense, Internet of Things (IoT)
    applications must provide interoperability tools that collect, store, and disseminate
    data from several sensors, and provide them to other systems [3,4]. Thus, smart
    cities require collaboration and integration of various IoT application systems.
    Studies of IoT server platforms have emerged for such purposes, where several
    challenges hinder better management and analysis of IoT application data using
    platforms. The first challenge involves the lack of a common data format between
    data sensors and data communication protocols. For instance, to measure the air
    and water quality, different sensors with different geo-location concepts such
    as addresses, buildings, regions, or cities can be handled in different ways.
    Thus, an IoT server platform should be able to handle various data types from
    different sensors, which makes it necessary to be able to work with each other
    despite the diversity in communication protocols or sensor technologies. The second
    challenge is the standard parameters for data processing. As an example, the majority
    of air quality monitoring systems use Air Pollution Index (API) to define the
    indicators of the carbon monoxide ( 𝐶𝑂 ), the nitrogen dioxide ( 𝑁 𝑂 2 ), the
    sulfur dioxide ( 𝑆 𝑂 2 ), the ozone ( 𝑂 3 ), and the particulate matter ( 𝑃 𝑀
    10 ) [5]. However, other researchers mentioned that it might be necessary to consider
    other indicators such as the temperature and the humidity for their measurements
    [6]. The third challenge concerns the data interoperability between various IoT
    application systems within the same domain. It can be described as the integration
    of plural systems by sharing output data through information networks [3]. For
    example, a smart building system should integrate the human Indoor Positioning
    System (IPS) with the environment monitoring system to improve QoL while reducing
    energy usage. However, in general, IoT application systems for smart cities have
    been designed without considering these challenges. They have been deployed independently
    and cannot be integrated with other systems. In this paper, we propose an IoT
    server platform called Smart Environmental Monitoring and Analytical in Real-Time
    (SEMAR) for integrating various IoT application systems. SEMAR is able to offer
    Big Data environments with rich built-in functions for data aggregations, synchronizations,
    and classifications with machine learning. Moreover, plug-in functions can be
    easily implemented and added there. Data from devices for different sensors can
    be accepted directly and through network connections, which will be used in real-time
    for user interfaces, text files, and access to other systems through Representational
    State Transfer Application Programming Interface (REST API) services. For evaluations
    of SEMAR, we implemented the platform and integrated five IoT applications, namely,
    the air-conditioning guidance system, the fingerprint-based indoor localization
    system, the water quality monitoring system, the environment monitoring system,
    and the air quality monitoring system. The results confirm the effectiveness and
    efficiency of the proposal, including the reduction in the data transmission delay
    with the implemented Message Queue Telemetry Transport (MQTT) service [7]. The
    rest of this paper is organized as follows: Section 2 presents related works.
    Section 3 presents the design of SEMAR. Section 4 presents the implementation
    of SEMAR. Section 5, Section 6, Section 7, Section 8 and Section 9 briefly describe
    the IoT application systems implemented in the SEMAR. Section 10 describes comprehensive
    performance evaluations and comparative analysis with similar related work. Section
    11 presents the threats to validity. Finally, Section 12 concludes this paper
    with future works. 2. Related Works In [8], Kamienski et al. proposed a three-layered
    Open IoT ecosystem approach for smart application architectures. It includes input,
    process, and output in IoT application systems. The input gathers information
    from multiple sources, such as sensors and other services. The standard communication
    protocols cover the device connections. The process is given by a collection of
    methodologies, procedures, and algorithms for effective and efficient data processing.
    The output provides capabilities for data visualizations and accessibility. In
    [9], Bansal et al. proposed five layers for the IoT application system architecture,
    consisting of perception, transport, processing, middleware, and application.
    They divided data processing into two layers, where the processing layer concentrates
    on filtering and formatting the data, and the middleware layer intends to execute
    various logical and analytic operations. The connectivity in IoT systems was discussed
    in [10], where Li et al. examined the networking technologies, and described that
    IEEE 802.11 (WLAN), IEEE 802.15.1 (Bluetooth, Low-energy Bluetooth), IEEE 802.15.6
    (wireless body area networks), and 3G/4G were the most widely adopted in IoT application
    systems and smart city environment systems. Since IoT systems might consist of
    various physical things and sensors, it is essential to provide a device-to-device
    communication protocol. Malche et al. in [11] proposed the MQTT communication
    protocol for environmental monitoring systems with multiple device sensors. Sharma
    et al. in [12] defined the Representational State Transfer (REST) web service
    as the gateway to collect device data through the HTTP POST protocol. Zhang et
    al. in [13] studied NATS open source messaging to communicate between IoT devices
    [14]. The numerous options of communication protocols were surveyed by Dizdarevic
    et al. in [15]. They concluded that MQTT and HTTP POST are the most suitable for
    IoT application systems since they are well matured and stable. In [16], Marques
    et al. proposed the IoT system architecture for the indoor air quality (IAQ) system
    in a laboratory environment named iAQ Plus (iAQ+). It collects data from devices
    through Wi-Fi connections and stores data in the SQL server. The authors proposed
    a web portal and mobile application to manage and visualize the obtained data;
    however, the system does not offer data analysis functions to process sensor data.
    In [17], Benammar et al. proposed the IAQ system that is integrated with the Emoncms
    IoT platform for storing and visualizing air quality data, temperature, and humidity.
    The authors used a Waspmote microcontroller connected to Raspberry PI as sensor
    nodes and the MQTT service to send data. In [18], Mandava et al. proposed to integrate
    machine learning algorithms and the IoT platform infrastructure for monitoring
    air pollution in smart cities. The system collects environmental and location
    data to determine air pollution conditions in specific areas, and uses the collected
    data to build a data model for air pollution detections using supervised machine
    learning algorithms. The experiment results confirmed the effectiveness of the
    proposed data model for air pollution detections. In [19], Senožetnik et al. proposed
    a management framework for groundwater data in smart cities. The system uses a
    web-based IoT service to receive data through HTTP POST, convert it into the JavaScript
    Object Notation (JSON) format, and store it in the MongoDB NoSQL database. It
    also allows sharing collected data through REST API. This system is similar to
    our proposed one; however, the system only provided data communications through
    HTTP POST. Moreover, it did not implement data processing functions to analyze
    the obtained data. In [20], Kazmi et al. proposed a platform that provides interoperability
    of diverse IoT applications in smart cities named VITAL-OS. It can be integrated
    with other IoT application systems through REST API. In [21], Toma et al. proposed
    an IoT platform for monitoring air pollution in smart cities. The system contains
    wireless and wired connections with sensors to send data through MQTT communications
    to the server using cellular networks. It allows sharing data through REST API;
    however, this platform was built and implemented only for this IoT application
    of monitoring air pollution. In [22], Javed et al. proposed an IoT platform for
    smart buildings. It consists of the discovery, storage, and service planes. The
    discovery plane performs connectivity control with devices through HTTP communications.
    The storage plane manages data storage using Apache Cassandra [23]. The service
    plane provides data processing composed of data indexing, visualizing, and analysis.
    In [24], Badii et al. proposed an open source IoT framework architecture for smart
    cities called Snap4City. The system offers modules for device managements, data
    processing, data analysis, and data visualizations. In [25], Putra et al. proposed
    an implementation of wireless sensor networks in smart cities to monitor air pollution.
    A device will transmit data regarding the air pollution to a server through a
    Wi-Fi network. In [26], Gautam et al. proposed an IoT application for the water
    supply management system in smart cities. The proposed architecture uses General
    Purpose Input Output (GPIO) communications for connecting ultrasonic sensors and
    water pumps with Raspberry PI. Moreover, it uses Ethernet cables as network interfaces
    to Raspberry PI and the router. It offers data analysis services and real-time
    predictions using machine learning algorithms for processing data; however, this
    framework is only built for this single IoT application. In [27], Oliveira et
    al. proposed an IoT application for road environment monitoring using mobile-based
    sensors. The system receives sensor data through HTTP POST communications in the
    JSON format, and allows processing and visualizing it. It also provides a function
    to export data in CSV files. In [28], Metia et al. proposed a digital filter for
    the IoT-based air pollution monitoring system. The experiment results in this
    study show that the data processing using Kalman filter has enhanced the reliability
    and accuracy of the system; however, they did not implement the real-time data
    processing. In [29], Twahirwa et al. proposed the system for monitoring roads,
    weathers, and environments by attaching multiple sensors to a vehicle and sending
    sensor data to the IoT server. The IoT server can process, store, and visualize
    data with the web application system. In [30], D’Ortona et al. showed the benefits
    of implementing MQTT communications in IoT application systems for smart cities.
    The MQTT communications allow the construction of highly scalable and flexible
    IoT systems. In [31], Kumar et al. proposed an anomaly-based intrusion detection
    system (IDS) to secure IoT networks from threats such as spying and malicious
    controls. It was implemented at the fog node level. The proposed approach might
    be adopted as an additional system that can avoid threats before the IoT platform
    receives them. Moreover, in [32,33], a method was proposed to protect IoT networks
    by data pre-processing functions. It comprises feature mapping, missing value
    inputting, normalization, and feature selection techniques. The proposed method
    is similar to our approach in the data aggregation function. SEMAR only processes
    and stores sensor data registered in the sensor format data storage. In [34],
    Kumar et al. designed PEFL for secure open communication channels in IoT application
    systems. The proposed method utilized Long Short-Term Memory (LSTM) and privacy
    encoding techniques in order to reduce security risk and maintain privacy. Moreover,
    in [35], authors proposed an framework for preventing cyber attacks on IoT-fog
    computing. It offered virtualized northbound interfaces such as load balancer
    and resource management to manage networks in IoT systems. The proposed architecture
    can be utilized to enhance network performances for the SEMAR IoT application
    server platform in future works. 3. Design of SEMAR IoT Server Platform In this
    section, we present the design of the SEMAR IoT server platform for integrating
    various IoT application systems. 3.1. System Overview Figure 1 shows the proposed
    design of the SEMAR IoT server platform. The main components are data input, data
    process, and data output. The data input is responsible for accepting data from
    various sources. It consists of network interface devices and communication protocols.
    The data process provides the modules for data processing, control, and collection.
    The data output enables visualizations and sharing of collected data. In Table
    1 we summarize the nomenclature of all the symbols and variables used in this
    paper. Figure 1. Design overview of SEMAR IoT server platform. Table 1. Nomenclature
    used in the paper. 3.2. Data Input SEMAR needs to collect data from a number of
    different devices using various network connectivity and communication methods;
    therefore, the following network interfaces for constructing physical network
    connections are implemented in the platform, where standard IoT communication
    protocols for data transmission, namely HTTP and MQTT, are included. In the context
    of IoT, physical devices as a perception layer consist of a number of sensors
    connected to a controller. With the growth of IoT technology, controllers such
    as Arduino and Raspberry PI have provided diverse network connectivity to accept
    data from various sensors. General Purpose Input Output (GPIO) is the programmable
    interface in the device controller to receive or send command signals from/to
    IoT sensor devices [36]. In IoT application systems, GPIO is the standard interface
    for connecting sensor devices with the controller. In addition, it is used for
    connecting controllers with external modules such as Wi-Fi ones for data communications.
    Universal Serial Bus (USB) is the serial communication media to link devices with
    computers via USB ports. Currently, numerous sensor instruments and devices can
    transmit data using USB connections. The USB connection offers a high data transfer
    capacity. In addition, external communication modules such as Wi-Fi for data communication
    can also be added using USB connection. Regarding the IoT data transmission concept,
    diverse hardware and software connectivity should be considered. Diverse network
    interfaces utilize hardware-based transmissions, such as Wi-Fi, Ethernet, and
    Cellular—this enables machine-to-machine and device-to-server communication. IEEE
    802.11 wireless LAN (Wi-Fi) is the most prevalent network interface in IoT systems.
    It connects devices with each other and to servers. Wi-Fi is useful to connect
    a lot of devices regardless of their locations with computers, which improves
    IoT application developments. Ethernet offers secure and dependable wired connectivity.
    It is one of the most used network interfaces in IoT systems; however, the implementation
    can be difficult over long distances. Although Wi-Fi and Ethernet offer excellent
    network performance, we should consider their security and coverage area. The
    alternative network interface that can be utilized is cellular networks. Cellular
    is the network interface allowing the mobility of devices with the existing widespread
    availability of cells to connect with the internet. Currently, 5G cellular connections
    offer solutions with wider bandwidths than Wi-Fi or Ethernet. The IoT platform
    can use it through Wi-Fi interfaces with mobile routers. The last part of Data
    Input is the communication protocol between IoT devices and servers. An IoT server
    should support publish–subscribe and push-and-pull messaging systems for sending
    and receiving data. Thus, our proposed system utilizes MQTT and REST API for the
    communication protocol service. MQTT is one of the protocols that have been designed
    for data communications in IoT application systems. It can work with minimal memory
    and the processing power [37]. The MQTT broker works for receiving messages from
    clients, filtering the messages according to a topic, and distributing the messages
    to subscribers [38]. The MQTT broker is implemented in the IoT gateway function
    of the platform to provide data communication services in SEMAR. The IoT gateway
    function offers communication services to connect sensor devices to the server.
    Using this protocol, sensor devices can transmit messages containing sensor data
    in the JSON format with MQTT topics. By subscribing data at the same MQTT topic,
    the data aggregation program in the platform obtains each sensor data. In addition,
    the study by Al-Joboury in [39] shows that the load balancer can increase the
    performance and the capacity of MQTT data communications. The IoT gateway function
    also implemented the REST API for receiving sensor data through the HTTP POST
    communication protocol. It can only receive data in the JSON format. The REST
    API provides URLs for sensor data transmission. The management function in the
    platform creates the unique URL for each device. The HTTP POST communication protocol
    is compatible with standard network interfaces. Using REST API, sensor devices
    can transmit data in the JSON format. 3.3. Data Process The data process in the
    SEMAR server platform offers various functions. The large amount of data from
    data input will be processed to obtain meaningful information using some functions.
    The functions are implemented as independent modules to reduce system crashes
    at system failures. They can be extended to microservices [40,41]. The concept
    of microservices is the method of developing a large-scale system with a set of
    small independent services. For their implementations, thread-based programs are
    adopted to improve their performances for real-time data processing. Each service
    will initiate a new thread to process the newly coming data. 3.3.1. Data Management
    (Storage, Aggregator, and Plug-in Functions) The data management system is the
    main function of the IoT platform. In the context of IoT, systems must provide
    data storage, transaction management, query processing, and data access for application
    systems. Thus, the IoT platform must offer services to process the data flow from
    input to output. Moreover, towards developing diverse IoT applications, devices
    involved in IoT should be able to generate different kinds of data types according
    to the application. In order to provide various IoT application systems, SEMAR
    should be a useful platform for a variety of IoT application systems. Thus, it
    needs to support massive amounts of data in different formats. Moreover, it needs
    to store all the necessary data by offering data storage for every application.
    The management data storage is the database that stores the operating parameters
    in the SEMAR server platform including the implemented IoT application systems.
    The data include the information regarding connected devices, communications,
    and parameters for the process modules running on the platform. On this platform,
    each device has its own unique sensor format. The management data storage database
    keeps the sensor format as the template to help the development of an IoT application
    system on this platform. Meanwhile, the sensor data storage is the database that
    stores all the sensor data in the platform. In IoT application systems, sensor
    devices may offer various data and it may change it over time with unstructured
    formats; therefore, the platform uses the big data technology to store unstructured
    JSON objects generates the unique data storage for each device. This data storage
    utilized only accepts registered device data; therefore, we implement additional
    data stored in the form of Log files. Log Files are used to keep the values of
    any defined or undefined data using the CSV format. The defined data represents
    a sensor data that fits the format registered in the management data storage.
    The undefined data represents data whose format is not registered. The schema
    data storage is the database that can be used to help the users of IoT application
    systems by dynamically specify the names, fields, and data types in accessing
    this storage. It supports multiple data types, including integer, float, date,
    time, date-time, and string. Figure 1 illustrates that this database is used to
    store data synchronization results. Through REST API, other systems can access
    to the sensor data storage. As the advantage of this database, it can be dynamically
    defined and modified by the user. It can assist integration of various complex
    IoT application systems. In an IoT system, the data lifecycle begins with the
    communication gateway receiving sensor data, continues with data aggregation and
    preprocessing, and concludes with data storage. For this purpose, SEMAR provides
    a data aggregator function. The data aggregator is the module of collecting data
    from various data sources, applying the value-added processing, and repackaging
    the information in a consumable format. Algorithm 1 illustrates the data processing
    procedure in this module. It forwards the result to the following data filter
    or stores it in the data storage through the database access. The data management
    system plays a role in the sensor data storage process and provides access to
    additional data processing functions. Those services are not only for systems
    integrated in the IoT platform (built-in) but also for plug-in functions that
    may be deployed as an extension. Because an IoT application system may require
    unique data processing that has not been implemented in the platform. Thus, the
    platform is designed and implemented so that users can easily implement plug-in
    functions without modifying existing codes, to fulfill the demands of IoT application
    systems. The plug-in functions can use REST API to access the data in the platform.
    Algorithm 1 Data aggregator 3.3.2. Data Filter and Synchronization In this research,
    we additionally explore the data processing capabilities required by IoT applications
    that are not included in the standard data management services. For example, sensors
    of IoT devices may generate measurement errors and noise during the measuring
    process. It can impact the risk of data analysis problems. In addition, IoT applications
    such as indoor localization systems require real-time sensor data from several
    devices simultaneously; therefore, our platform deploys the data filter and synchronization
    functionalities for processing sensor data. The functions of filtering sensor
    data before being saved in a data storage are implemented. Digital filters are
    adopted to reduce noise and inaccuracies in data. The following procedure is applied
    for filtering data: It receives sensor data in a JSON format. It selects the sensor
    field’s value to be filtered. It add the field value in the JSON object with the
    filter result. It stores the JSON object in the database. The data synchronization
    function can synchronize the data from different devices by referring to the timestamp
    in the data store schema. The timestamp was given when the platform receives the
    data from the sensor device. Thus, the platform requests the data from each sensor’s
    storage at a specified detection time. For each sensor data, the field for the
    identifier ( 𝐹𝑖 ) to group sample data in a specific value, the field for the
    value ( 𝐹𝑣 ) to be synchronized, the default value ( 𝑑𝑒𝑓𝑎𝑢𝑙𝑡 ), and the four functions
    to process the data are prepared. The following functions are implemented to process
    the data: Average: it returns the average value of the data collected during the
    detection time. Current: it returns the last value among the data collected during
    the detection time. Max: it returns the highest value among the data collected
    during the detection time. Min: it returns the lowest value among the data collected
    during the detection time. Algorithm 2 illustrates the data processing procedure
    in this module. Algorithm 2 Data Synchronization 3.3.3. Machine Learning and Real-time
    Classification One of the exploitation scenarios for the massive quantity of IoT
    data is its predictive capability by utilizing machine learning approaches. Several
    researchers approved the effectiveness of machine learning implementation in IoT
    applications [42,43,44]. Moreover, Kumar et al. in [45] proposed the ensemble
    design combining machine learning algorithms to protect networks on the Internet
    of Medical Things in real-time; therefore, we implement machine learning and real-time
    classification function in SEMAR. The machine learning algorithms are implemented
    to help data classifications. The Support Vector Machine [46,47] and Decision
    Tree [48,49,50] are implemented in this platform as standard machine learning
    algorithms in IoT application systems. Decision Tree employs tree decisions including
    event outcomes, resource costs, and utility costs. It can create a data model
    for predicting outcomes by learning simple decision rules according to the data
    features. The data model structure consists of internal nodes representing an
    attribute, branches representing a decision rule, and leaf nodes indicating an
    outcome. Here, C4.5, CART (Classification and Regression Trees), and Naive Bayes
    Tree are selected and incorporated into the platform as the most well-known machine
    learning algorithms [48]. CART is the binary recursive partitioning method that
    can handle both numerical and category data [48,49,50]. It can determine the impurity
    degree of acceptable data and build a binary tree in which each internal node
    provides two classes for the accepted attribute. The tree is formed by iteratively
    picking the attribute with the lowest Gini index. The Gini index for each node
    is calculated by the following equation [48]: 𝐺𝑖𝑛𝑖(𝑡)=1− ∑ 𝑖=1 𝑛 𝑃 (𝑖|𝑡) 2 (1)
    Support Vector Machine (SVM) is utilized as the regression and classification
    technique [51]. This approach has been used for the big data classification [47].
    The SVM computes linear decision boundary lines that can separate the data for
    the labeled groups. The SVM decision boundary line is calculated by the following
    equation: 𝑓(𝑥)= ∑ ∀𝑖 𝑦 𝑖 𝛼 𝑖 𝐾( 𝑥 𝑖 ,𝑥) (2) where 𝑦 𝑖 represents the class label,
    𝛼 𝑖 represents the learned weight, 𝐾() represents the kernel function, 𝑥 𝑖 denotes
    the support vector, and x denotes the labeled training sample data. The kernel
    function is given by a collection of mathematical operations used to process the
    input data and convert it into the required format. The radial basis function
    (RBF) kernel is one of the common kernel functions in SVM. The following equation
    illustrates the formula of the (RBF) kernel: 𝐾( 𝑥 𝑖 , 𝑥 𝑗 )=exp ⎛ ⎝ ⎜ ⎜ ⎜ − 𝑑
    ( 𝑥 𝑖 , 𝑥 𝑗 ) 2 2 𝑙 2 ⎞ ⎠ ⎟ ⎟ ⎟ (3) where l represents the length scale of the
    kernel and 𝑑( 𝑥 𝑖 , 𝑥 𝑗 ) denotes the Euclidean distance between 𝑥 𝑖 and 𝑥 𝑗 .
    Decision Tree and SVM have several hyper parameters. For them, the Randomized
    Search Method is implemented in SEMAR to find the optimal combination of hyper
    parameters, due to its superior performances with the low cost and short computing
    time compared to other methods. For reference, the Decision Tree algorithm has
    the following hyper parameters: Maximum depth ( 𝑚𝑎𝑥_𝑑𝑒𝑝𝑡ℎ ): represents the maximum
    depth of the tree model result. It is used to select the optimal model to prevent
    over-fitting. Minimum samples split ( 𝑚𝑖𝑛_𝑠𝑎𝑚𝑝𝑙𝑒𝑠_𝑠𝑝𝑙𝑖𝑡 ): represents the minimal
    amount of data required to separate an internal node. If it is large, it can prevent
    over-fitting; however, if it is very large, it can cause under-fitting. Minimum
    samples leaf ( 𝑚𝑖𝑛_𝑠𝑎𝑚𝑝𝑙𝑒𝑠_𝑙𝑒𝑎𝑓 ): represents the minimal amount of data required
    to be left at the leaf node. It is similar to the minimum samples split parameter.
    Minimum weighted fraction leaf ( 𝑚𝑖𝑛_𝑤𝑒𝑖𝑔ℎ𝑡_𝑓𝑟𝑎𝑐𝑡𝑖𝑜𝑛_𝑙𝑒𝑎𝑓 ): represents the total
    weight required at a leaf node. The Support Vector Machine algorithm has the following
    main hyper parameters: Kernel: represents the function of transforming the training
    dataset into the higher dimension space. The standard kernel consists of Radial
    Basis Function (RBF), linear, polynomials, and sigmoid. C: represents the penalty
    parameter that controls the trade-off between the decision boundary and the misclassification.
    C value controls the margin of the decision boundary line to avoid misclassifications.
    The large value can prevent the model from allowing any misclassification. If
    the dataset is linearly separable, it will work; however, if the dataset is non-separable/nonlinear,
    it is better to use a small C value to avoid overfitting, although it allows misclassifications
    to occur. Gamma: represents the coefficient of the kernel used to decide the curvature
    of the decision boundary line. The value of Gamma determines the shape of the
    decision boundary line according to the number of dataset points. The large value
    causes the decision boundary to be easily affected by fewer data points, and the
    shape becomes complex. It can be helpful for nonlinear datasets; however, if it
    is too large, it tends to be over-fitting. On the other hand, for the linear dataset,
    the small values make the decision boundary line more general and useful. The
    machine learning algorithms allow the user to use the data stored in the data
    storage as the sample data. This module can generate a data model for the real-time
    data classification module. The real-time data classification function is implemented
    to analyze a huge amount of data from various sensor devices by periodically running
    the following procedure: 1. It loads the data classification model made by the
    machine learning algorithm. 2. It receives sensor data from the database. 3. It
    classifies data into classes by running the data model. 4. It stores results in
    the database. The classification model can be created by each user separately.
    Moreover, the user can start or stop the real-time data classification at the
    user interface. 3.4. Data Output Several output components, such as the monitor
    display, the user interface, the data export, REST API, and the notification function,
    are considered to use the data in the platform. The monitor display is attached
    to the sensor node, and accesses the user interface in the platform through a
    network connection. It can easily show sensor data for each device. The user interface
    is provided at the web browser to allow users to see the sensor and synchronized
    data by tables, graphs, or maps. The platform allows users to access the sensor
    data using the time of data receipt. It receives the sensor data in the JSON format
    by accessing REST API. The column in the table is formed automatically based on
    the sensor format of each device. The platform can generate the graph for each
    registered format sensor. Visualization maps will display the data in digital
    maps based on the GPS data. The data export feature is designed and implemented
    to allow users to download data in Excel, JSON, text, or CSV format at the specified
    time. Users can use this feature by accessing to the user interfaces. REST API
    is employed as a back-end system to access the sensor data. The sensor data are
    retrieved from the database and is converted to the JSON format. It will be sent
    to the user interface and plug-in functions using HTTP POST communications. The
    platform can exchange and integrate data with other IoT application systems via
    REST API. The notification function allows the user to define the threshold for
    each sensor data as the trigger of the message notification. If the value is over
    the threshold, the platform will send a notification. The platform offers two
    different communication services. First, it publishes a message to a specific
    topic using the MQTT communication protocol. Thus, the IoT application system
    can subscribe to topic to receive the messages. Second, it delivers email notifications
    through the mail server service installed on the server platform. The user can
    dynamically define email recipients. 3.5. Management Service The management service
    is used to manage all functions in the SEMAR platform. It includes the managements
    of users, devices, communications, schema data, synchronization functions, analytics,
    data filters, and notification functions. The management of users allows us to
    add users, set permissions, and restrict access to the devices. The device management
    service provides the functions to register the devices and the sensors of the
    IoT application system. It allows managing the sensor format for each device dynamically.
    The platform can process, save, and display the data registered in the sensor
    format. For convenience, the SEMAR platform provides a template to add the device
    with the same sensor format easily. The schema data management allows to create
    the schema database, define the field format, and manage the data. The management
    service provides the functions to add, update, and delete settings for data synchronizations,
    data analytics, data filtering, and notifications. It allows the user to run and
    terminate the module service in the data process. All the configuration settings
    are saved as JSON objects. 4. Implementation of SEMAR IoT Server Platform In this
    section, we present the implementation of the SEMAR IoT server platform. Table
    2 shows the summary of the implementation. Table 2. Technology specifications
    for implementation of SEMAR IoT server platform. In this implementation, the following
    two types of communication protocol services are implemented for data input. Mosquitto
    [52] is installed for the MQTT broker. It allows the platform to receive messages
    through various MQTT versions, and supports connections from Wi-Fi, Ethernet,
    and Cellular network interfaces. Then, REST API is implemented based on Python
    programming and Tornado web server [53]. It allows the platform to receive messages
    through HTTP POST and supports connections from Wi-Fi, Ethernet, and Cellular
    network interfaces. The data process is deployed and implemented in the platform.
    They are developed in Python using a variety of modules and dependencies. For
    IoT data management systems, we used two different databases service implemented
    in the platform according to the design in Section 3. The Big Data repository
    MongoDB [54] is utilized for the data storage for managements, sensors, and schema.
    MongoDB saves data in the JSON format as the flexible approach—there is no need
    to define data structures, unlike SQL. In addition, the log file is implemented
    in the CSV format. It can be accessed using a file controller library in Python.
    Two different data aggregators are implemented. The first one enables message
    receptions using the MQTT communication protocol. It allows a different MQTT communication
    settings for each sensor device. The second one does it with REST API. Both data
    aggregators access the data storage via PyMongo. In this study, the data filter
    and synchronization capabilities are utilized to process sensor data. Scipy and
    KalmanFilter Python libraries are used to apply the data filters. After filtering
    the data, PyMongo is used to save it in the data storage. The data synchronization
    used PyMongo for sensor data in the data storage. Pandas is used for grouping
    data sensors. Threading library is used to enhance the performance of the platform.
    This function runs periodically on the server based on the detection time. The
    user can stop and start this service at the administration page in the user interface.
    Figure 2 illustrates the user interface of the data synchronization function for
    the sensor data during 30 s. Figure 2. Interface of data synchronization function.
    According to the design systems in Section 3, the data analysis systems consist
    learning process and real-time analysis service. We implemented both services
    in Python. Scikit-learn [55] is used to facilitate the learning process. The Sklearn
    library is utilized for real-time analysis to make the classification model during
    the learning process. Data output includes the data visualization and the data
    sharing with other systems including the plug-in systems. The CodeIgniter PHP
    Framework is adopted to create user interfaces based on the Model-View-Control
    (MVC) design paradigm [56]. A user interface will offer data visualizations using
    HighchartJS, DataTalbes, and OpenStreetMap. Here, Apache and PHP are required.
    Figure 3 shows the table of sensor data. Figure 4 show graphs of sensor data.
    Figure 3. Table of sensor data. Figure 4. Graphs of sensor data. DataTables library
    is used to allow the user to download sensor data in Excel, JSON, text, and CSV
    formats at the specified times. Figure 5 show the data export interface. REST
    API is built with Python and Tornado. It allows other application systems and
    plug-in functions to access to sensor data in JSON formats. Figure 5. Data export
    interface. Finally, The management service is built in Python and Tornado web
    server. It allows us to receive messages through HTTP POST, and to access data
    storage by PyMongo. 5. Integration of Air Quality Monitoring System As the first
    IoT application system, the air quality monitoring system is integrated in the
    proposed platform. It can monitor the air quality in smart cities. 5.1. System
    Architecture Figure 6 shows the system overview. This system uses a single-board
    computer (SBC) that is connected to the GPS sensor device and the air quality
    sensor device through Wi-Fi. The air quality sensor device covers the carbon monoxide
    sensor (MQ7), the particulate matter sensor (Shinyei PPD42), the sulfur dioxide
    sensor (MQ135), the ozone sensor (MQ131), and the nitrogen dioxide sensor (MiCS
    2714. The sensor sends the voltage measurement data to the Arduino UNO via GPIO.
    Arduino UNO converts the data into the value of the pollutant concentration level
    and sends it to the SBC via the MQTT protocol. When the air sensor data are received,
    the SBC adds the current time and the location information (latitude and longitude)
    from the GPS sensor to the air sensor data, and sends it in the JSON format every
    five seconds through the MQTT connection. Figure 6. System overview of air quality
    monitoring system. 5.2. Implementation in Platform Figure 7 shows the flow of
    the functions in the SEMAR server platform for integrating this IoT application
    system. Through the MQTT connection, the data aggregator receives the sensor data
    and stores it in the data storage. The real-time classification estimates the
    air quality index from the data between 0 and 4 that corresponds to the air quality
    categories of good, moderate, poor, very poor, and hazardous. The output data
    are shown at the user interface. Figure 7. Function flow for air quality monitoring
    system in platform. To evaluate the system integration, we run the system to monitor
    actual air quality conditions. The sensor device is mounted on the vehicle, and
    the single-board computer system is placed inside the vehicle during the experiment.
    The device system sends air quality and GPS data every five seconds. The evaluation
    results show that SEMAR has successfully received the sensor data, processed it,
    and classified the air quality index based on it. The results can be displayed
    on the user interface in real-time. Table 3 shows the evaluation results of the
    classification model used in this experiment. We compare two algorithms consisting
    of Support Vector Machine (SVM) and Decision Tree (DT). Table 3. Evaluation of
    air quality monitoring classification model. Table 3 illustrates that the accuracy
    of the developed model is higher than 90% ; therefore, we can conclude that the
    real-time classification function to determine the air quality in SEMAR provides
    advantages over similar studies, including the study by Toma et al. in [21]. Moreover,
    we also conducted experiment for hyper parameters tuning. Table 4 shows the experiment
    setup for optimizing the hyper parameters using the randomized search method in
    this IoT Application. Table 4. Experiment setup for hyper parameter optimizations
    in air quality monitoring. Figure 8 shows the confusion matrices for the Decision
    Tree algorithm and the Support Vector Machine algorithm in the air quality monitoring
    application. For Decision Tree, 𝑚𝑎𝑥_𝑑𝑒𝑝𝑡ℎ=12 , 𝑚𝑖𝑛_𝑠𝑎𝑚𝑝𝑙𝑒𝑠_𝑠𝑝𝑙𝑖𝑡=4 , 𝑚𝑖𝑛_𝑠𝑎𝑚𝑝𝑙𝑒𝑠_𝑙𝑒𝑎𝑓=9
    , and 𝑚𝑖𝑛_𝑤𝑒𝑖𝑔ℎ𝑡_𝑓𝑟𝑎𝑐𝑡𝑖𝑜𝑛_𝑙𝑒𝑎𝑓=0.0 are obtained, where the accuracy of the model
    is 99% . For Support Vector Machine, 𝑘𝑒𝑟𝑛𝑒𝑙=“𝑙𝑖𝑛𝑒𝑎𝑟” , 𝐶=1 , and 𝑔𝑎𝑚𝑚𝑎=0.01 are
    obtained, where accuracy of the model is 95% . Figure 8. Confusion matrices of
    Decision Tree and Support Vector Machine. 6. Integration of Water Quality Monitoring
    System As the second IoT application system, the water quality monitoring system
    is integrated. It can monitor the water quality in rivers flowing in smart cities.
    6.1. System Architecture Figure 9 shows the overview of the system architecture.
    This system utilizes the sensor device equipped with water quality sensors for
    the hydrogen potential (pH), the oxidation reduction potential (ORP), the dissolved
    oxygen (DO), the electrical conductivity (EC), the temperature, total dissolved
    solids (TDS), the salinity (Sal), and the specific gravity (SG). The edge computing
    device Raspberry Pi 3 collects the sensor data every five seconds and sends it
    to a server. The system was tested at various points in the river in Surabaya,
    Indonesia. The sensor node detects multiple parameters of water quality. Figure
    9. The system overview of the water monitoring system. 6.2. Implementation in
    Platform Figure 10 shows the flow of the functions in the platform for integrating
    this IoT application system. Through the MQTT connection, the data aggregator
    receives sensor data from the devices and stores it in the data storage. The real-time
    classification function estimates the water quality index from the collected data
    with a number between 0 and 3 corresponding to lightly polluted, heavy polluted,
    and polluted. The output data are shown in the user interface. Figure 10. Function
    flow for water quality monitoring system in platform. We evaluated the efficacy
    of the integration of SEMAR with the water quality monitoring system. The evaluation
    was conducted by operating the system in a real-world environment to monitor the
    water quality of a river. The device transmits the water sensor data to the SEMAR
    server every five seconds through MQTT communications. The experiment results
    indicate that the server received the sensor data, classified the water quality
    index based on the obtained data, and displayed it on the user interface in real-time.
    In addition, we compared the SVM and DT machine learning algorithms. are presented
    in Table 5 shows the evaluation results of the classification model utilized in
    the real-classification function. Table 5. Evaluation of water quality monitoring
    classification model. Table 5 shows that the accuracy of the classification model
    for the water quality is higher than 90% . Thus, the superiority of SEMAR on the
    integration with water quality measurement systems was confirmed with abilities
    to receive and classify data in real-time. 7. Integration of Road Condition Monitoring
    System As the third IoT application system, the road condition monitoring system
    is integrated. It can monitor road surface conditions in smart cities. 7.1. System
    Architecture Figure 11 shows the system architecture overview. This system is
    implemented as a mobile-based sensor network attached to the vehicle. This concept
    is called Vehicle as a Mobile Sensor Network (VaaMSN). This system consists of
    the edge computing device, the portable wireless camera, and the sensor device.
    The camera records the road conditions in front of the vehicle and transmits the
    image frames through Real-Time Streaming Protocol (RTSP). The sensor device collects
    GPS, accelerometer, and gyroscopes data, and transmits them to the edge computing
    device via MQTT protocol. Figure 11. System overview of road condition monitoring
    system. The edge computing device detects potholes from the camera images using
    the deep learning approach, OpenCV [57], and Tensorflow [58]. When detecting a
    pothole, image data are recorded in the directory file. Figure 12 shows the detected
    pothole example by the system. The edge computing will send the location, the
    accelerometer, the gyroscopes, and the pothole state to the server through the
    MQTT connection. Figure 12. Detected pothole example. 7.2. Implementation in Platform
    Figure 13 shows the flow of the functions in the platform for integrating this
    IoT application system. The data aggregator receives sensor data from the device
    through the MQTT connection, and stores it in the data storage. The output data
    appear in the user interface. Figure 13. Function flow for road condition detection
    system in platform. To evaluate the system integration, we run the road condition
    monitoring system to monitor road surfaces in actual conditions. We place the
    sensor device in the vehicle according to the layout shown in the system overview.
    They send JSON data consisting of the GPS location, accelerometer, gyroscope,
    and pothole status to the server through MQTT communications when the system detects
    a pothole, as shown in Figure 12. The experiment results show that the system
    can receive data from the device, process it, and display it on the map of the
    user interface in real-time. 8. Integration of Air-conditioning Guidance System
    As the fourth IoT application system, the air-conditioning guidance system (AC-Guide)
    is integrated. It can offer the guidance for the optimal use of air-conditioning
    (AC) in smart cities [59]. 8.1. System Architecture Figure 14 illustrates the
    system architecture overview. AC-Guide uses a web camera, a DHT22 sensor, and
    Raspberry Pi 3 model b+ as the sensor device. The Python program of the system
    periodically (1) collects the humidity and temperature of the room and the AC
    control panel photo, (2) collects the standard outdoor weather data by accessing
    to OpenWeatherMap API [60], (3) calculates the indoor discomfort index (DI) to
    determines whether the indoor state is comfort or discomfort, (4) calculates the
    outdoor DI to determines whether the outdoor state is comfort or discomfort, (5)
    detects the on/off state of the AC from the photo, (6) sends the message to turn
    on or turn off the AC considering the indoor DI, the outdoor DI, and the on/off
    state of AC, (7) saves the data in the log file, and (8) send the data to the
    server using the MQTT connection. Figure 14. System overview of AC-Guide. 8.2.
    Implementation in Platform Figure 15 shows the flow of the functions in the platform
    for integrating this IoT application system. Figure 15. Function flow for AC-Guide
    in platform. We evaluated the effectiveness of the integration of SEMAR with the
    air-conditioning guidance system. The experiment was carried out by running the
    system at the #2 Engineering Building in Okayama University. The device sends
    JSON data containing the indoor humidity, indoor temperature, indoor discomfort
    index (DI), outdoor humidity, outdoor temperature, outdoor discomfort index (DI),
    and state of AC using MQTT communications every one minute. The evaluation results
    show that SEMAR can receive sensor data and display sensor data in real-time on
    the user interface. Previously, these data were not accessible from other systems.
    By integrating SEMAR, they can access the data through REST API. In addition,
    SEMAR allows adding new sensors to the system without changing the codes; therefore,
    the advantages of integrating the SEMAR system is confirmed. 9. Integration of
    Fingerprint-based Indoor Localization System As the last IoT application system,
    the fingerprint-based indoor localization system using IEEE802.15.4 protocol (FILS15.4)
    is integrated. It detects the user locations in indoor environments according
    to the fingerprints of the target location. The process is divided into the calibration
    phase and the detection phase [61,62]. 9.1. System Architecture Figure 16 illustrates
    the overview of FILS15.4 architecture. This system adopts transmitting and receiving
    devices by Mono Wireless which employs the IEEE802.15.4 protocol at 2.4 GHz [63].
    The transmitter Twelite 2525 is small with 2.5×2.5 cm and can be powered with
    a coin battery for a long time. The receiver Mono Stick is connected to Raspberry
    Pi over a USB port. To improve the detection accuracy, the sufficient number of
    receivers should be located at proper locations in the target area. Figure 16.
    System overview of FILS15.4. Raspberry Pi receives data from a transmitter, determines
    the link quality indication (LQI) for each transmitter, sends the LQI with the
    ID to the MQTT broker using the MQTT protocol. The server receives them from the
    MQTT broker, synchronizes the data from all the receivers, calculates the average
    LQI with the same transmitter ID, and keeps the results in one record in the SQLite
    database. The previous implementation used a free public MQTT service. 9.2. Calibration
    Phase The calibration phase generates and stores the fingerprint dataset. Each
    fingerprint consists of n LQI values where n represents the number of receivers.
    It represents the typical LQI values when a transmitter is located at the corresponding
    location (room in FILS15.4). 9.3. Detection Phase The detection phase detects
    the current room by calculating the Euclidean distance between the current LQI
    data and the fingerprint for each room and finding the fingerprint with the smallest
    distance. 9.4. Implementation in Platform Figure 17 shows the flow of the functions
    in the platform for integrating this IoT application system. The data synchronization
    function synchronizes the measured LQI values among all the receivers using the
    transmitter’s ID, and saves it in the schema data storage. The detection program
    is implemented as the plug-in function in the platform, and receives data through
    REST API services. Figure 17. Function flow for FILS15.4 in platform. We evaluate
    the integration of SEMAR with the fingerprint-based indoor localization system
    by running the system at two floors in the #2 Engineering Building of Okayama
    University. This system used six receivers to measure LQI from each transmitter.
    The receiver sent the LQI data every 500 ms to the server through MQTT communications.
    The evaluation results show that SEMAR can receive, process, and visualize the
    data. We also evaluate the data synchronization of the LQI data at the multiple
    receivers from the same transmitter. Figure 18 shows the synchronized LQI data
    for transmitter 1 during 30 s, where LQi for 𝑖=1,…,6 indicates the LQI data at
    receiver i. They are saved in the schema data storage and can be accessed from
    other programs through REST API. This system can run without interruptions even
    if it processes empty LQI data or if error detection occurs. When the system detects
    an error, it sets the LQI data to the default value. According to the evaluation
    results, the effectiveness of integrating the SEMAR system is confirmed. Figure
    18. LQI data of transmitter 1. 10. Evaluations In this section, we evaluate the
    implementation of SEMAR IoT server platform. 10.1. Performance Analysis To evaluate
    the performance of SEMAR at the parameter level, first, we investigate the average
    response time for MQTT data communications when the number of IoT devices is increased
    from 1 to 125. In the experiments, a virtual IoT device is created in the system
    instead of a real device. Then, each virtual IoT device sends one message through
    a different topic every second. During this experiment, the CPU usage rate of
    the machine is also measured. As the response time, the time difference at a virtual
    IoT device from the data transmission to the server to the message reception from
    the server is measured. For HTTP POST, it can easily be obtained. When the IoT
    device sends data to the server, the REST API service returns the response message;
    however, for MQTT, the program is modified to measure the response time where
    it will send the MQTT message to the device when it stores data in the storage.
    Figure 19 and Figure 20 show the average response time and the average CPU usage
    rate when the number of virtual IoT devices is increased from 1 to 125, respectively.
    The average response time is 315𝑚𝑠 and the CPU usage rate is 74% for 125 devices.
    Thus, SEMAR our can handle hundreds of devices with acceptable delay and CPU rate.
    Figure 19. Average response time for MQTT communications with different numbers
    of devices. Figure 20. Average CPU usage rate with different numbers of devices.
    10.2. The State-of-the-Art Comparative Analysis We compare the SEMAR IoT server
    platform with 14 recent research works that have the similar approach. In the
    comparison with the recent related works in the literature, we consider the following
    features to characterize each proposal: IoT application: represents the IoT application
    that is covered or implemented in each work. Device management: indicates the
    capability of the IoT platform to manage devices (Yes or No). Communication protocol:
    describes the communication protocol utilized in each work. Data synchronization:
    implies the capability to synchronize data across several devices (Yes or No).
    Data filtering function: indicates the implementation of digital filters to process
    data (Yes or No). Decision-making assistance: indicates the implementation of
    tools to evaluate data or generate alerts based on data obtained (Yes or No).
    Flexibility: shows the abilities to allow to join new devices, to handle different
    communication settings, to define data types, and to easily interact with external
    systems (Yes or No). Interoperability: represents the ability to be integrated
    with plural external systems through defined protocols (Yes or No). Scalability:
    demonstrates the capability of processing a number of data simultaneously (Yes
    or No). Table 6 compares the fulfillment of the nine features among the 14 related
    works and the proposed SEMAR. Table 6. State-of-the-art comparison between the
    existing related studies and the proposed solution. 10.2.1. IoT Application Although
    the works by Hernández-Rojas et al. in [64], Marcu et al. in [69], and Antunes
    et al. in [72] have potentials of use in various IoT applications, they have been
    studied in specific IoT applications. On the other hand, SEMAR has been integrated
    and implemented in several types of IoT applications. 10.2.2. IoT Device Management
    All the related works provide functions to add or remove IoT devices. Some works
    support device management services. Some works include capabilities to define
    the sensor format for each IoT device dynamically. The work by Trilles et al.
    in [70] provides the easy-to-use user interface to manage IoT devices. On the
    other hand, SEMAR provides all of the functions on IoT devices. 10.2.3. Communication
    Protocol HTTP and MQTT are the most adopted communication protocols in IoT application
    platforms. In addition, Del Esposte in [67] and Antunes in [72] introduce AMQP
    as another protocol utilizing TCP connections. Thus, it is suitable for server–client
    communications [73]. None of the related works reported functions to synchronize
    data from several devices and digital filters to process sensor data. Only SEMAR
    provides both the data synchronization capability and digital filters to process
    data. 10.2.4. Decision Making Assistance For decision-making assistance, a lot
    of works have offered functions for perspective data analysis based on collected
    data. The works by Mandava et al. in [18], by Kamienski et al. in [65], by Chiesa
    et al. in [66], and by Boursianis et al. in [71] applied machine learning algorithms
    for real-time classifications, and show the results for user interfaces. The work
    by Hernández-Rojas et al. in [64] utilized message notifications according to
    a specific data threshold. The work by Trilles et al. in [70] and our SEMAR included
    both of them. 10.2.5. Interoperability and Flexibility Several works provided
    interoperability. The works by Hernández-Rojas et al. in [64], by Trilles et al.
    in [70], and SEMAR allow outer programs to process data without changing the existing
    program in the systems. Some works consider the flexibility as the IoT application
    platform. The works by Hernández-Rojas et al. in [64] and by Trilles et al. in
    [70] provide the capability to dynamically define the sensor format and the data
    type for each device, similar to SEMAR. However, any work cannot be connected
    with other MQTT servers. Only SEMAR flexibly allows users to use other MQTT servers,
    which will allow IoT applications to be easily integrated with SEMAR. 11. Threats
    to Validity There are two kinds of threats to the validity of this research, which
    are as follows: Internal validity threat: validates the potential errors in the
    SEMAR implementation. In this study, SEMAR is integrated with five different IoT
    application systems. Each IoT application utilized various kinds of sensors. Possible
    threats may occur when submitting invalid or incomplete data. Moreover, the integration
    of SEMAR with the fingerprint-based indoor localization system requires the synchronization
    of data from each receiver to determine the location of the transmitter. To eliminate
    potential threats, SEMAR checks sensor data with the format. In addition, the
    data synchronization function will provide default values for devices with no
    data within the data synchronization timeframe. External validity threat: validates
    the generalization ability of the obtained results. We compare the results of
    SEMAR to those of previous IoT-related studies. The primary potential external
    threat revealed by the comparison results is that not all of the related IoT-related
    research provided comprehensive and clear explanations of the proposals. 12. Conclusions
    This paper presented the design and implementation of the IoT server platform
    for integrating various IoT application systems, called Smart Environmental Monitoring
    and Analytical in Real-Time (SEMAR). It offers Big Data environments with built-in
    functions for data aggregations, synchronizations, and classifications with machine
    learning, and plug-in functions that access to the data through REST API. The
    platform was implemented and integrated with five IoT application systems. The
    results confirmed the effectiveness and efficiency of the proposal. In future
    studies, we will continue improving the platform by implementing Rules Engine
    and Complex Event Processing (CEP) [74] for the data processing. Rules Engine
    will support user-defined rules, actions, and notifications. CEP will offer the
    real-time data analysis based on rule patterns [75]. It will control the device
    action or deliver messages to users when rule patterns are matched; however, these
    functions meet issues in parallelism, resource allocations, distributed networks,
    and multi-rules optimizations [76], which will be studied. Then, we will continue
    integrating the proposal with various IoT application systems. Author Contributions
    Conceptualization, Y.Y.F.P., N.F. and S.S.; Methodology, Y.Y.F.P.; Software, Y.Y.F.P.
    and P.P.; Writing—Original Draft Preparation, Y.Y.F.P.; Writing—Review and Editing,
    N.F.; Validation, M.K. and W.-C.K. All authors have read and agreed to the published
    version of the manuscript. Funding This research received no external funding.
    Institutional Review Board Statement Not applicable. Informed Consent Statement
    Not applicable. Data Availability Statement Not applicable. Acknowledgments The
    authors thank the reviewers for their thorough reading and helpful comments. Conflicts
    of Interest The authors declare no conflict of interest. References Theofilou,
    P. Quality of Life: Definition and Measurement. Eur. J. Psychol. 2013, 9, 150–162.
    [Google Scholar] [CrossRef] Macke, J.; Casagrande, R.; Sarate, J.; Silva, K. Smart
    City and Quality of Life: Citizens’ perception in a Brazilian case study. J. Clean.
    Prod. 2018, 182, 717–726. [Google Scholar] [CrossRef] Noura, M.; Atiquzzaman,
    M.; Gaedke, M. Interoperability in Internet of Things: Taxonomies and Open Challenges.
    Mob. Networks Appl. 2018, 24, 796–809. [Google Scholar] [CrossRef] Cubo, J.; Nieto,
    A.; Pimentel, E. A Cloud-Based Internet of Things Platform for Ambient Assisted
    Living. Sensors 2014, 14, 14070–14105. [Google Scholar] [CrossRef] Leong, W.;
    Kelani, R.; Ahmad, Z. Prediction of Air Pollution Index (API) using Support Vector
    Machine (SVM). J. Environ. Chem. Eng. 2020, 8, 103208. [Google Scholar] [CrossRef]
    Perlmutt, L.; Cromar, K. Comparing Associations of Respiratory Risk for The EPA
    Air Quality Index and Health-Based Air Quality Indices. Atmos. Environ. 2019,
    202, 1–7. [Google Scholar] [CrossRef] MQTT Org. Message Queuing Telemetry Transport
    Protocol. Available online: http://mqtt.org/ (accessed on 12 May 2022). Kamienski,
    C.; Prati, R.; Kleinschmidt, J.; Soininen, J.P. Designing an Open IoT Ecosystem.
    In Proceedings of the Workshop on Cloud Networks 2019, Belem, Brazil, 16 July
    2019. [Google Scholar] Bansal, S.; Kumar, D. IoT Ecosystem: A Survey on Devices,
    Gateways, Operating Systems, Middleware and Communication. Int. J. Wirel. Inf.
    Netw. 2020, 27, 340–364. [Google Scholar] [CrossRef] Li, S.; Xu, L.; Zhao, S.
    The Internet of Things: A Survey. Inf. Syst. Front. 2014, 17, 243–259. [Google
    Scholar] [CrossRef] Malche, T.; Maheshwary, P.; Kumar, R. Environmental Monitoring
    System for Smart City Based on Secure Internet of Things (IoT) Architecture. Wirel.
    Pers. Commun. 2019, 107, 2143–2172. [Google Scholar] [CrossRef] Venkanna, U.;
    Sharma, S.; Katiyar, B.; Prashanth, Y. A Wireless Sensor Node Based Efficient
    Parking Slot Availability Detection System for Smart Cities. In Proceedings of
    the 2018 Recent Advances on Engineering, Technology and Computational Sciences
    (RAETCS), Allahabad, India, 6–8 February 2018; pp. 1–6. [Google Scholar] Zhang,
    Q.; Zhong, H.; Shi, W.; Liu, L. A Trusted and Collaborative Framework for Deep
    Learning in IoT. Comput. Netw. 2021, 193, 108055. [Google Scholar] [CrossRef]
    Jain, V.; Ahuja, A.; Saini, D. Evaluation and Performance Analysis of Apache Pulsar
    and NATS. In Cyber Security and Digital Forensics; Lecture Notes on Data Engineering
    and Communications Technologies; Springer: Singapore, 2021; pp. 179–190. [Google
    Scholar] [CrossRef] Dizdarević, J.; Carpio, F.; Jukan, A.; Masip-Bruin, X. A Survey
    of Communication Protocols for Internet of Things and Related Challenges of Fog
    and Cloud Computing Integration. ACM Comput. Surv. 2019, 51, 1–29. [Google Scholar]
    [CrossRef] Marques, G.; Pitarma, R. An Internet of Things-Based Environmental
    Quality Management System to Supervise the Indoor Laboratory Conditions. Appl.
    Sci. 2019, 9, 438. [Google Scholar] [CrossRef] Benammar, M.; Abdaoui, A.; Ahmad,
    S.; Touati, F.; Kadri, A. A Modular IoT Platform for Real-Time Indoor Air Quality
    Monitoring. Sensors 2018, 18, 581. [Google Scholar] [CrossRef] [PubMed] Mandava,
    T.; Chen, S.; Isafiade, O.; Bagula, A. An IoT Middleware for Air Pollution Monitoring
    in Smart Cities: A Situation Recognition Model. In Proceedings of the IST Africa
    2018 Conference, Gabarone, Botswana, 9–11 May 2018. [Google Scholar] Senozètnik,
    M.; Herga, Z.; Šubic, T.; Bradeško, L.; Kenda, K.; Klemen, K.; Pergar, P.; Mladenić,
    D. IoT Middleware for Water Management. Proceedings 2018, 2, 696. [Google Scholar]
    [CrossRef] Kazmi, A.; Serrano, M.; Soldatos, J. VITAL-OS: An Open Source IoT Operating
    System for Smart Cities. IEEE Commun. Stand. Mag. 2018, 2, 71–77. [Google Scholar]
    [CrossRef] Toma, C.; Alexandru, A.; Popa, M.; Zamfiroiu, A. IoT Solution for Smart
    Cities’ Pollution Monitoring and the Security Challenges. Sensors 2019, 19, 3401.
    [Google Scholar] [CrossRef] [PubMed] Javed, A.; Malhi, A.; Kinnunen, T.; Framling,
    K. Scalable IoT Platform for Heterogeneous Devices in Smart Environments. IEEE
    Access 2020, 8, 211973–211985. [Google Scholar] [CrossRef] The Apache Cassandra
    Software Project Website. Available online: https://cassandra.apache.org/ (accessed
    on 22 August 2022). Badii, C.; Bellini, P.; Difino, A.; Nesi, P. Smart city IoT
    Platform Respecting GDPR Privacy and Security Aspects. IEEE Access 2020, 8, 23601–23623.
    [Google Scholar] [CrossRef] Putra, K.; Chen, H.; Prayitno; Ogiela, M.; Chou, C.;
    Weng, C.; Shae, Z. Federated Compressed Learning Edge Computing Framework with
    Ensuring Data Privacy for PM2.5 Prediction in Smart City Sensing Applications.
    Sensors 2021, 21, 4586. [Google Scholar] [CrossRef] Gautam, G.; Sharma, G.; Magar,
    B.; Shrestha, B.; Cho, S.; Seo, C. Usage of IoT Framework in Water Supply Management
    for Smart City in Nepal. Appl. Sci. 2021, 11, 5662. [Google Scholar] [CrossRef]
    Oliveira, F.; Costa, D.; Lima, L.; Silva, I. iBikeSafe: A Multi-Parameter System
    for Monitoring, Evaluation and Visualization of Cycling Paths in Smart Cities
    Targeted at Cycling Adverse Conditions. Smart Cities 2021, 4, 56. [Google Scholar]
    [CrossRef] Metia, S.; Nguyen, H.; Ha, Q. IoT-Enabled Wireless Sensor Networks
    for Air Pollution Monitoring with Extended Fractional-Order Kalman Filtering.
    Sensors 2021, 21, 5313. [Google Scholar] [CrossRef] [PubMed] Twahirwa, E.; Rwigema,
    J.; Datta, R. Design and Deployment of Vehicular Internet of Things for Smart
    City Applications. Sustainability 2021, 14, 176. [Google Scholar] [CrossRef] D’Ortona,
    C.; Tarchi, D.; Raffaelli, C. Open-Source MQTT-Based End-to-End IoT System for
    Smart City Scenarios. Future Internet 2022, 14, 57. [Google Scholar] [CrossRef]
    Kumar, P.; Gupta, G.; Tripathi, R. Design of Anomaly-Based Intrusion Detection
    System Using Fog Computing for IoT Network. Autom. Control. Comput. Sci. 2021,
    55, 137–147. [Google Scholar] [CrossRef] Kumar, P.; Gupta, G.; Tripathi, R. A
    Distributed Ensemble Design Based Intrusion Detection System Using Fog Computing
    to Protect The Internet of Things Networks. J. Ambient. Intell. Humaniz. Comput.
    2020, 12, 9555–9572. [Google Scholar] [CrossRef] Kumar, P.; Gupta, G.; Tripathi,
    R. Toward Design of an Intelligent Cyber Attack Detection System using Hybrid
    Feature Reduced Approach for IoT Networks. Arab. J. Sci. Eng. 2021, 46, 3749–3778.
    [Google Scholar] [CrossRef] Kumar, P.; Gupta, G.; Tripathi, R. PEFL: Deep Privacy-Encoding-Based
    Federated Learning Framework for Smart Agriculture. IEEE Micro 2022, 42, 33–40.
    [Google Scholar] [CrossRef] Kumar, P.; Tripathi, R.P.; Gupta, G. P2IDF: A Privacy-preserving
    Based Intrusion Detection Framework for Software Defined Internet of Things-fog
    (SDIoT-Fog). In Proceedings of the 2021 International Conference on Distributed
    Computing and Networking, Nara, Japan, 5–8 January 2021; pp. 37–42. [Google Scholar]
    Wu, H.; Chen, C.; Weng, K. Two Designs of Automatic Embedded System Energy Consumption
    Measuring Platforms Using GPIO. Appl. Sci. 2020, 10, 4866. [Google Scholar] [CrossRef]
    Munshi, A. Improved MQTT Secure Transmission Flags in Smart Homes. Sensors 2022,
    22, 2174. [Google Scholar] [CrossRef] Dinculeană, D.; Cheng, X. Vulnerabilities
    and Limitations of MQTT Protocol Used between IoT Devices. Appl. Sci. 2019, 9,
    848. [Google Scholar] [CrossRef] Al-Joboury, I.; Al-Hemiary, E. IoT-F2CDM-LB:
    IoT Based Fog-to-Cloud and Data-in-Motion Architectures with Load Balancing. EAI
    Endorsed Trans. Internet Things 2018, 4, 155332. [Google Scholar] [CrossRef] Waseem,
    M.; Liang, P.; Shahin, M. A Systematic Mapping Study on Microservices Architecture
    in DevOps. J. Syst. Softw. 2020, 170, 110798. [Google Scholar] [CrossRef] Fridelin,
    Y.; Ulil Albaab, M.; Anom Besari, A.; Sukaridhoto, S.; Tjahjono, A. Implementation
    of Microservice Architectures on SEMAR Extension for Air Quality Monitoring. In
    Proceedings of the 2018 International Electronics Symposium on Knowledge Creation
    and Intelligent Computing (IES-KCIC) 2018, Bali, Indonesia, 29–30 October 2018;
    pp. 218–224. [Google Scholar] Kumar, P.; Gupta, G.; Tripathi, R.; Garg, S.; Hassan,
    M. DLTIF: Deep Learning-Driven Cyber Threat Intelligence Modeling and Identification
    Framework in IoT-Enabled Maritime Transportation Systems. IEEE Trans. Intell.
    Transp. Syst. 2021, 1–10. [Google Scholar] [CrossRef] Kumar, P.; Kumar, R.; Gupta,
    G.; Tripathi, R. BDEdge: Blockchain and Deep-Learning for Secure Edge-Envisioned
    Green CAVs. IEEE Trans. Green Commun. Netw. 2022, 1330–1339. [Google Scholar]
    [CrossRef] Kumar, P.; Gupta, G.; Tripathi, R. TP2SF: A Trustworthy Privacy-Preserving
    Secured Framework for Sustainable Smart Cities by Leveraging Blockchain and Machine
    learning. J. Syst. Archit. 2021, 115, 101954. [Google Scholar] [CrossRef] Kumar,
    P.; Gupta, G.; Tripathi, R. An Ensemble Learning and Fog-cloud Architecture-driven
    Cyber-attack Detection Framework for IoMT Networks. Comput. Commun. 2021, 166,
    110–124. [Google Scholar] [CrossRef] Chang, C.; Lin, C. LIBSVM: A Library for
    Support Vector Machines. ACM Trans. Intell. Syst. Technol. 2011, 2, 1–27. [Google
    Scholar] [CrossRef] Suárez Sánchez, A.; García Nieto, P.; Riesgo Fernández, P.;
    del Coz Díaz, J.; Iglesias-Rodríguez, F. Application of an SVM-based regression
    model to the air quality study at local scale in the Avilés urban area (Spain).
    Math. Comput. Model. 2011, 54, 1453–1466. [Google Scholar] [CrossRef] Ghiasi,
    M.; Zendehboudi, S. Decision Tree-Based Methodology to Select a Proper Approach
    for Wart Treatment. Comput. Biol. Med. 2019, 108, 400–409. [Google Scholar] [CrossRef]
    Hagan, D.; Isaacman-VanWertz, G.; Franklin, J.; Wallace, L.; Kocar, B.; Heald,
    C.; Kroll, J. Calibration and Assessment of Electrochemical Air Quality Sensors
    by Co-Location with Regulatory-Grade Instruments. Atmos. Meas. Tech. 2018, 11,
    315–328. [Google Scholar] [CrossRef] Wei, W.; Ramalho, O.; Malingre, L.; Sivanantham,
    S.; Little, J.; Mandin, C. Machine Learning and Statistical Models for Predicting
    Indoor Air Quality. Indoor Air 2019, 29, 704–726. [Google Scholar] [CrossRef]
    [PubMed] Ghosh, S.; Dasgupta, A.; Swetapadma, A. A Study on Support Vector Machine
    Based Linear and Non-Linear Pattern Classification. Proceedings of International
    Conference on Intelligent Sustainable Systems (ICISS) 2019, Palladam, India, 21–22
    February 2019; pp. 24–28. [Google Scholar] MQTT Mosquitto Server. Available online:
    https://mosquitto.org/ (accessed on 12 May 2022). Dory, M.; Parrish, A.; Berg,
    B. Introduction to Tornado; O’Reilly Media: Sebastopol, CA, USA, 2012. [Google
    Scholar] MongoDB, Mongodb: The Application Data Platform. Available online: https://www.mongodb.com/
    (accessed on 12 May 2022). Hao, J.; Ho, T. Machine Learning Made Easy: A Review
    of Scikit-learn Package in Python Programming Language. J. Educ. Behav. Stat.
    2019, 44, 348–361. [Google Scholar] [CrossRef] Gamma, E.; Helm, R.; Johnson, R.;
    Vlissides, J.M. Design Patterns: Elements of Reusable Object-Oriented Software;
    Addison-Wesley Professional; Addison-Wesley: Boston, MA, USA, 1994. [Google Scholar]
    Villán, A.F. Mastering OpenCV 4 with Python: A Practical Guide Covering Topics
    from Image Processing, Augmented Reality to Deep Learning with OpenCV 4 and Python
    3.7; Packt Publishing Ltd.: Birmingham, UK, 2019. [Google Scholar] Pang, B.; Nijkamp,
    E.; Wu, Y. Deep Learning With TensorFlow: A Review. J. Educ. Behav. Stat. 2019,
    45, 227–248. [Google Scholar] [CrossRef] Huda, S.; Funabiki, N.; Kuribayashi,
    M.; Sudibyo, R.; Ishihara, N.; Kao, W. A Proposal of Air-Conditioning Guidance
    System Using Discomfort Index. In Proceedings of the 15th International Conference
    on Broad-Band and Wireless Computing, Communication and Applications (BWCCA-2020),
    Yonago, Japan, 28–30 October 2020; pp. 154–165. [Google Scholar] OpenWeatherMap.
    Current Weather and Forecast—OpenWeatherMap. Available online: https://openweathermap.org/
    (accessed on 12 May 2022). Huo, Y.; Puspitaningayu, P.; Funabiki, N.; Hamazaki,
    K.; Kuribayashi, M.; Kojima, K.A. Proposal of the Fingerprint Optimization Method
    for the Fingerprint-Based Indoor Localization System with IEEE 802.15.4 Devices.
    Information 2022, 13, 211. [Google Scholar] [CrossRef] Puspitaningayu, P.; Huo,
    Y.; Funabiki, N.; Hamazaki, K.; Kuribayashi, M.; Kao, W. Investigations of Detection
    Accuracy Improvements for Fingerprint-based Indoor Localization System Using IEEE
    802.15.4. In Proceedings of the Fourth International Conference on Vocational
    Education and Electrical Engineering (ICVEE) 2021, Surabaya, Indonesia, 2–3 October
    2021; pp. 1–5. [Google Scholar] Mono Wireless. Mono Wireless Product Information.
    Available online: https://mono-wireless.com/jp/products/index.html (accessed on
    12 May 2022). Hernández-Rojas, D.; Fernández-Caramés, T.; Fraga-Lamas, P.; Escudero,
    C. A Plug-and-Play Human-Centered Virtual TEDS Architecture for the Web of Things.
    Sensors 2018, 18, 2052. [Google Scholar] [CrossRef] Kamienski, C.; Soininen, J.;
    Taumberger, M.; Dantas, R.; Toscano, A.; Salmon Cinotti, T.; Filev Maia, R.; Torre
    Neto, A. Smart Water Management Platform: IoT-Based Precision Irrigation for Agriculture.
    Sensors 2019, 19, 276. [Google Scholar] [CrossRef] Chiesa, G.; Cesari, S.; Garcia,
    M.; Issa, M.; Li, S. Multisensor IoT Platform for Optimising IAQ Levels in Buildings
    through a Smart Ventilation System. Sustainability 2019, 11, 5777. [Google Scholar]
    [CrossRef] De M. Del Esposte, A.; Santana, E.; Kanashiro, L.; Costa, F.; Braghetto,
    K.; Lago, N.; Kon, F. Design and Evaluation of a Scalable Smart City Software
    Platform with Large-Scale Simulations. Future Gener. Comput. Syst. 2019, 93, 427–441.
    [Google Scholar] [CrossRef] Christou, I.; Kefalakis, N.; Zalonis, A.; Soldatos,
    J.; Bröchler, R. End-to-End Industrial IoT Platform for Actionable Predictive
    Maintenance. IFAC-PapersOnLine 2020, 53, 173–178. [Google Scholar] [CrossRef]
    Marcu, I.; Suciu, G.; Bălăceanu, C.; Vulpe, A.; Drăgulinescu, A. Arrowhead Technology
    for Digitalization and Automation Solution: Smart Cities and Smart Agriculture.
    Sensors 2020, 20, 1464. [Google Scholar] [CrossRef] [PubMed] Trilles, S.; González-Pérez,
    A.; Huerta, J. An IoT Platform Based on Microservices and Serverless Paradigms
    for Smart Farming Purposes. Sensors 2020, 20, 2418. [Google Scholar] [CrossRef]
    [PubMed] Boursianis, A.; Papadopoulou, M.; Gotsis, A.; Wan, S.; Sarigiannidis,
    P.; Nikolaidis, S.; Goudos, S. Smart Irrigation System for Precision Agriculture—The
    AREThOU5A IoT Platform. IEEE Sens. J. 2021, 21, 17539–17547. [Google Scholar]
    [CrossRef] Antunes, M.; Santiago, A.; Manso, S.; Regateiro, D.; Barraca, J.; Gomes,
    D.; Aguiar, R. Building an IoT Platform Based on Service Containerisation. Sensors
    2021, 21, 6688. [Google Scholar] [CrossRef] Depari, A.; Fernandes Carvalho, D.;
    Bellagente, P.; Ferrari, P.; Sisinni, E.; Flammini, A.; Padovani, A. An IoT Based
    Architecture for Enhancing the Effectiveness of Prototype Medical Instruments
    Applied to Neurodegenerative Disease Diagnosis. Sensors 2019, 19, 1564. [Google
    Scholar] [CrossRef] [PubMed] Mazon-Olivo, B.; Hernández-Rojas, D.; Maza-Salinas,
    J.; Pan, A. Rules Engine and Complex Event Processor in the Context of Internet
    of Things for Precision Agriculture. Comput. Electron. Agric. 2018, 154, 347–360.
    [Google Scholar] [CrossRef] Da Costa Bezerra, S.; Filho, A.; Delicato, F.; da
    Rocha, A. Processing Complex Events in Fog-Based Internet of Things Systems for
    Smart Agriculture. Sensors 2021, 21, 7226. [Google Scholar] [CrossRef] Flouris,
    I.; Giatrakos, N.; Deligiannakis, A.; Garofalakis, M.; Kamp, M.; Mock, M. Issues
    in Complex Event Processing: Status and Prospects in the Big Data Era. J. Syst.
    Softw. 2017, 127, 217–236. [Google Scholar] [CrossRef]                             Publisher’s
    Note: MDPI stays neutral with regard to jurisdictional claims in published maps
    and institutional affiliations.  © 2022 by the authors. Licensee MDPI, Basel,
    Switzerland. This article is an open access article distributed under the terms
    and conditions of the Creative Commons Attribution (CC BY) license (https://creativecommons.org/licenses/by/4.0/).
    Share and Cite MDPI and ACS Style Panduman, Y.Y.F.; Funabiki, N.; Puspitaningayu,
    P.; Kuribayashi, M.; Sukaridhoto, S.; Kao, W.-C. Design and Implementation of
    SEMAR IoT Server Platform with Applications. Sensors 2022, 22, 6436. https://doi.org/10.3390/s22176436
    AMA Style Panduman YYF, Funabiki N, Puspitaningayu P, Kuribayashi M, Sukaridhoto
    S, Kao W-C. Design and Implementation of SEMAR IoT Server Platform with Applications.
    Sensors. 2022; 22(17):6436. https://doi.org/10.3390/s22176436 Chicago/Turabian
    Style Panduman, Yohanes Yohanie Fridelin, Nobuo Funabiki, Pradini Puspitaningayu,
    Minoru Kuribayashi, Sritrusta Sukaridhoto, and Wen-Chung Kao. 2022. \"Design and
    Implementation of SEMAR IoT Server Platform with Applications\" Sensors 22, no.
    17: 6436. https://doi.org/10.3390/s22176436 Note that from the first issue of
    2016, this journal uses article numbers instead of page numbers. See further details
    here. Article Metrics Citations Crossref   14 Web of Science   4 Scopus   15 ads   1
    PubMed   2 PMC   2 Google Scholar   [click to view] Article Access Statistics
    Article access statistics Article Views 7. Jan 17. Jan 27. Jan 6. Feb 16. Feb
    26. Feb 7. Mar 17. Mar 27. Mar 0 500 1000 1500 2000 2500 For more information
    on the journal statistics, click here. Multiple requests from the same IP address
    are counted as one view.   Sensors, EISSN 1424-8220, Published by MDPI RSS Content
    Alert Further Information Article Processing Charges Pay an Invoice Open Access
    Policy Contact MDPI Jobs at MDPI Guidelines For Authors For Reviewers For Editors
    For Librarians For Publishers For Societies For Conference Organizers MDPI Initiatives
    Sciforum MDPI Books Preprints.org Scilit SciProfiles Encyclopedia JAMS Proceedings
    Series Follow MDPI LinkedIn Facebook Twitter Subscribe to receive issue release
    notifications and newsletters from MDPI journals Select options Subscribe © 1996-2024
    MDPI (Basel, Switzerland) unless otherwise stated Disclaimer Terms and Conditions
    Privacy Policy"'
  inline_citation: Panduman, Y.Y.F.; Funabiki, N.; Puspitaningayu, P.; Kuribayashi,
    M.; Sukaridhoto, S.; Kao, W.-C. Design and Implementation of SEMAR IoT Server
    Platform with Applications. Sensors 2022, 22(17), 6436. https://doi.org/10.3390/s22176436
  journal: Sensors
  key_findings: 'The key findings of the study include:


    1. The proposed SEMAR IoT server platform successfully integrates and interoperates
    multiple IoT application systems within smart cities, addressing challenges such
    as data quality, preprocessing, data interoperability, and real-time data processing.

    2. SEMAR offers a comprehensive suite of features, including data aggregation,
    synchronization, machine learning-based data classification, plug-in function
    support, and multiple communication protocols (MQTT and REST API) for seamless
    integration with diverse IoT devices and applications.

    3. The platform provides real-time data visualization, data export, and notification
    services to facilitate data analysis and timely decision-making.

    4. The experimental evaluations demonstrate the platform''s efficiency and scalability
    in handling a large number of IoT devices and processing data in real-time, with
    an average response time of 315 ms for MQTT communications with 125 devices and
    a CPU usage rate of 74%.'
  limitations: The main limitation of the paper is that it does not provide a thorough
    evaluation of the performance and scalability of the proposed platform. While
    the authors mention that SEMAR can handle hundreds of devices with acceptable
    delay and CPU rate, they do not provide specific benchmarks or comparative analysis
    with other platforms. Additionally, the paper does not discuss the security aspects
    of the platform, which is an important consideration for IoT systems.
  main_objective: The primary goal of the study is to present the design and implementation
    of the SEMAR IoT server platform, which aims to seamlessly integrate and interoperate
    various IoT application systems within smart cities.
  relevance_evaluation: The paper is highly relevant to the point mentioned in the
    outline, as it focuses on the design and implementation of an IoT server platform
    specifically aimed at integrating various IoT application systems. It provides
    a solution to the challenges of data quality, preprocessing, data interoperability,
    and real-time data processing, which are crucial aspects for effective IoT system
    integration.
  relevance_score: '0.9'
  relevance_score1: 0
  relevance_score2: 0
  study_location: Okayama University, Okayama, Japan
  technologies_used: MQTT, REST API, machine learning algorithms, such as Support
    Vector Machine and Decision Tree, MongoDB, Scikit-learn, Pandas, CodeIgniter PHP
    Framework, HighchartJS, DataTables, OpenStreetMap
  title: Design and Implementation of SEMAR IoT Server Platform with Applications
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  apa_citation: Arthi, R., Nishuthan, S., & Vignesh, L. D. (2023). Smart agriculture
    system using IoT and ML. In 2023 International Conference on Signal Processing,
    Computation, Electronics, Power and Telecommunication (IConSCEPT) (pp. 10170555).
    IEEE.
  authors:
  - Arthi R.
  - Nishuthan S.
  - Deepak Vignesh L.
  citation_count: '0'
  data_sources: Sensors for temperature, humidity, soil moisture and light intensity
  description: 'Agriculture is an essential industry that provides the necessities
    of life, including food, clothing, and shelter. It is crucial in rural areas,
    as it creates jobs and income opportunities and contributes to the Indian economy.
    Furthermore, agricultural practices play a critical role in maintaining the environment
    and preserving its fragile balance. This paper proposes a low-cost system that
    uses Internet of Things (IoT) and Machine Learning (ML) to maximize crop yield
    and productivity. The system consists of three key components: an IoT device,
    a mobile application, and servers. The IoT device uses an Espressif System Platform
    32(ESP32) microcontroller, a Digital Humidity and Temperature sensor 11 (DHTII)
    temperature humidity sensor, and a soil moisture sensor to gather data and sends
    it to the Amazon web services (AWS) IoT via the Message Queuing Telemetry Transport
    (MQTT) protocol. The IoT device is interfaced with a relay switch to turn ON/OFF
    water pumps. The mobile application helps us to monitor the temperature, humidity,
    soil moisture and light intensity in real time. It also allows us to control the
    water pump connected to the IoT device and give access to our prediction ML model
    for crop and fertilizer recommendations. The server is an integral part of this
    system as it helps us connect the mobile application with the IoT device and provides
    storage for the sensor values and Representational State Transfer-Application
    Programming Interface (REST-APIs) to access our ML models. The proposed work concludes
    that it can highly increase agricultural productivity with the support of IoT.'
  doi: 10.1109/IConSCEPT57958.2023.10170555
  explanation: This paper proposes a low-cost automated irrigation management system
    using IoT, machine learning, and cloud computing. The system includes a mobile
    application for monitoring, control, and accessing machine learning models for
    crop and fertilizer recommendations. The hardware setup consists of an ESP32 microcontroller,
    sensors for temperature, humidity, soil moisture and light intensity, and a relay
    switch for controlling water pumps.
  extract_1: The mobile application helps us to monitor the temperature, humidity,
    soil moisture and light intensity in real time. It also allows us to control the
    water pump connected to the IoT device and give access to our prediction ML model
    for crop and fertilizer recommendations.
  extract_2: 'The proposed system in this paper addresses these limitations by: Integrating
    IoT devices with machine learning models for crop and fertilizer recommendations,
    thereby enabling data-driven decision-making in agricultural practices.'
  full_citation: '>'
  full_text: '>

    "This website utilizes technologies such as cookies to enable essential site functionality,
    as well as for analytics, personalization, and targeted advertising purposes.
    To learn more, view the following link: Privacy Policy Manage Preferences IEEE.org
    IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account Personal
    Sign In Browse My Settings Help Access provided by: University of Nebraska - Lincoln
    Sign Out All Books Conferences Courses Journals & Magazines Standards Authors
    Citations ADVANCED SEARCH Conferences >2023 International Conference... Smart
    Agriculture System Using IoT and ML Publisher: IEEE Cite This PDF R Arthi.; S
    Nishuthan; L Deepak Vignesh All Authors 240 Full Text Views Abstract Document
    Sections I. Introduction II. System Design III. Storing Sensor Data In Database
    IV. Mobile Application V. ML Model Show Full Outline Authors Figures References
    Keywords Metrics Abstract: Agriculture is an essential industry that provides
    the necessities of life, including food, clothing, and shelter. It is crucial
    in rural areas, as it creates jobs and income opportunities and contributes to
    the Indian economy. Furthermore, agricultural practices play a critical role in
    maintaining the environment and preserving its fragile balance. This paper proposes
    a low-cost system that uses Internet of Things (IoT) and Machine Learning (ML)
    to maximize crop yield and productivity. The system consists of three key components:
    an IoT device, a mobile application, and servers. The IoT device uses an Espressif
    System Platform 32(ESP32) microcontroller, a Digital Humidity and Temperature
    sensor 11 (DHTII) temperature humidity sensor, and a soil moisture sensor to gather
    data and sends it to the Amazon web services (AWS) IoT via the Message Queuing
    Telemetry Transport (MQTT) protocol. The IoT device is interfaced with a relay
    switch to turn ON/OFF water pumps. The mobile application helps us to monitor
    the temperature, humidity, soil moisture and light intensity in real time. It
    also allows us to control the water pump connected to the IoT device and give
    access to our prediction ML model for crop and fertilizer recommendations. The
    server is an integral part of this system as it helps us connect the mobile application
    with the IoT device and provides storage for the sensor values and Representational
    State Transfer-Application Programming Interface (REST-APIs) to access our ML
    models. The proposed work concludes that it can highly increase agricultural productivity
    with the support of IoT. Published in: 2023 International Conference on Signal
    Processing, Computation, Electronics, Power and Telecommunication (IConSCEPT)
    Date of Conference: 25-26 May 2023 Date Added to IEEE Xplore: 10 July 2023 ISBN
    Information: DOI: 10.1109/IConSCEPT57958.2023.10170555 Publisher: IEEE Conference
    Location: Karaikal, India SECTION I. Introduction A significant amount of work
    has been done regarding IoT technology in the agricultural industry to develop
    smart farming solutions. IoT has brought a great revolution in the agriculture
    environment by examining multiple complications and challenges in farming [1].
    Smart agriculture sensors that use IoT and machine learning have the potential
    to revolutionize the agriculture industry by providing farmers with real-time
    data on soil moisture, temperature, humidity, and other critical factors that
    affect crop growth and yield. By using machine learning algorithms, this data
    can be analysed to identify patterns and optimize inputs such as water and fertilizer,
    leading to increased crop yields and reduced costs. In addition, these sensors
    can also provide valuable insights into crop prediction and fertilizer recommendations.
    Machine learning algorithms can be trained on historical data to recommend future
    crop, identify optimal fertilizer and nutrient inputs based on the specific needs
    of each crop. A flexible IoT-ML platform must allow different deployment configurations
    of hardware, software, and communication technologies, customized to deal with
    the requirements and constraints of different settings, countries, climate, soils,
    and crops [2]. Overall, IoT technology in agriculture has tremendous potential
    for increasing crop yields, reducing environmental impact, and improving sustainability.
    By leveraging the power of IoT-enabled smart sensors and machine learning algorithms,
    farmers can optimize their farming operations, reduce costs, and maximize their
    profits while contributing to a more sustainable future. A. Literature Review
    A number of existing studies have been focused on IoT-based smart agriculture
    systems. In [1], the author presents a survey on the role of IoT in agriculture
    for the implementation of smart farming. The author explores the advancements
    in IoT-based smart irrigation systems in [2]. In [3], the author discusses lightweight
    internet protocols for web enablement of sensors using constrained gateway devices.
    B. Limitations of Existing Solutions and Advantages of the Proposed System Despite
    the progress made in IoT-based smart agriculture systems, there are still some
    drawbacks in the existing literature. One common limitation is the lack of integration
    between IoT devices, data analytics, and machine learning models for making data-driven
    decisions. Additionally, many existing solutions do not provide real-time monitoring
    and control of IoT devices, making it difficult for farmers to effectively manage
    their crops. The proposed system in this paper addresses these limitations by:
    Integrating IoT devices with machine learning models for crop and fertilizer recommendations,
    thereby enabling data-driven decision-making in agricultural practices. Providing
    a mobile application that allows users to monitor and control their IoT devices
    in real-time, ensuring better management of crops. Employing a cost-effective
    approach, making the system affordable and accessible to a larger audience of
    farmers. This paper is structured as follows: Section II presents the system design;
    Section III describes the storage of sensor data; Section IV introduces the mobile
    application; Section V details the machine learning model; Section VI discusses
    the cost of the system; and finally, Section VII concludes the paper. SECTION
    II. System Design The proposed system uses the ESP32 which is a low cost high
    power 32-bit microcontroller that has inbuilt Wi-Fi and Bluetooth to connect the
    microcontroller to the internet. The combination of sensors such as DHTII (temperature
    and humidity sensors), Soil Moisture sensors and LDR to get the temperature, humidity,
    soil moisture and light intensity values from the environment respectively has
    been used. The data is then sent to IoT servers using Message Queue Telemetry
    Transport (MQTT) protocol which is a lightweight protocol capable of transmitting
    data over low-bandwidth or unreliable networks with very low consumption of power
    as discussed in [3], [4]. This system uses Amazon Web Services (AWS) [5] which
    is a cloud computing service that offers IoT services (AWS IoT) and serverless
    computing (AWS Lambda). The proposed work also uses Google Firebase which is a
    cloud computing service that is used for user authentication and database [6].
    The other important part of this system is the ML models for crop and fertilizer
    recommendation that is built using python (programming language) and SK-learn
    library for python. The ML model is hosted in a web server and can be accessed
    using API calls to the webserver to get prediction. We have also developed a mobile
    application which can be used to add, manage, monitoring the IoT device and gives
    access to ML model for crop and fertilizer recommendation. A. Overall System The
    Proposed system architecture is shown in Fig. 1. The system consists of three
    parts: IoT device, Mobile Application and Servers. The IoT device is connected
    to the AWS IoT server via the internet using the inbuilt Wi-Fi module. All the
    information about the environment and plant is sent to the AWS IoT server using
    MQTT protocol periodically. The data received by the AWS IoT is automatically
    logged to a database with the help of AWS IoT rules and AWS Lambda. The mobile
    application is used to connect to AWS IoT to monitor the sensor data in real-time.
    Fig. 1. System architecture Show All B. IoT Device Hardware Fig. 2. shows the
    hardware architecture of IoT device. The IoT device uses the ESP32 as the microcontroller.
    Fig. 2. Hardware architecture of IoT device. Show All The ESP32 is a low-cost,
    low-power system on a chip series of microcontrollers with Wi-Fi and Bluetooth
    capabilities and a highly integrated structure powered by a dual-core Tensilica
    Xtensa LX6 microprocessor [7]. Sensors such as DHTII, LDR and soil moisture sensors
    are used to obtain the information on temperature, humidity, light intensity,
    and soil moisture, respectively. Additionally, a relay switch is used to turn
    ON/OFF the motor or any other AC mains powered actuators remotely. Fig. 3. Software
    Flow Chart. Show All The microcontroller is programmed using the open-source Arduino
    IDE (Integrated Development Environment) and C++. The program uses several libraries
    to use functions such as Wi-Fi, MQTT, read sensor data. The working of the program
    is illustrated in the flow chart Fig.3. When the device is powered ON, it will
    be connected to Wi-Fi. Once connected to the internet, it will proceed to connect
    to AWS IoT and subscribe to the command topic to receive commands and execute
    them. Every second, the ESP32 polls for sensor data and publishes the sensor values
    to AWS IoT (to the ‘data’ topic). When the IoT device receives a command, a call
    back function is called, which will process and execute the command. Currently,
    the system can turn ON/OFF an AC mains-powered device connected to the relay-switch
    and provide an automatic watering function based on the threshold value of soil
    moisture sent in the settings page. However, it can be expanded to provide a wide
    range of commands. C. Cloud Service’s The system uses different cloud services
    provided such as AWS (Amazon web Services) and GCP (Google Cloud Platform) for
    the servers. Table I. provides the lists of services used in this system. TABLE
    I List of Cloud Services Used AWS IoT: It is a services and solutions to connect
    and manage billions of devices. Collect, store, and analyze IoT data for industrial,
    consumer, commercial, and automotive workloads. AWS Lambda: AWS Lambda is a serverless
    compute service that allows running code without provisioning or managing servers.
    AWS DynamoDB: AWS DynamoDB is a fully managed NoSQL database service that provides
    fast and predictable performance with seamless scalability. Cloud Firestore: Firebase
    Cloud Firestore is a NoSQL document-based database that provides seamless integration
    with other Firebase services and real-time synchronization of data. Firebase Authentication:
    Firebase Authentication is a fully managed authentication service that provides
    easy and secure user authentication for web and mobile applications. SECTION III.
    Storing Sensor Data In Database The IoT device sends the data to an MQTT topic,
    let’s say ‘data’. The AWS IoT actively looks for messages in this topic. Once
    any message is available, the IoT rules are triggered, which perform an IoT action
    that invokes an AWS Lambda function with the sensor data as input. The AWS Lambda
    function then inserts the data into AWS DynamoDB. Fig. 4. Storing sensor data
    in database. Show All The sensor data can be accessed from DynamoDB for future
    analysis using DynamoDB Software Development kit (SDK). SECTION IV. Mobile Application
    A mobile application using Flutter and Android Studio IDE has been developed.
    Flutter is an open-source UI development kit by Google for building natively compiled
    applications for mobile, web, and desktop platforms from a single codebase. It
    uses the Dart programming language and provides a rich set of pre-built and customizable
    widgets [8] for building beautiful and responsive user interfaces (UI). Android
    Studio is an Integrated Development Environment (IDE) for developing Android apps,
    which supports Flutter. With the help of Android Studio and Flutter SDK, developers
    can build and test their Flutter apps on Android emulators or physical devices.
    Android Studio also provides features like debugging, layout editors, code completion,
    and version control to make the development process easier. Overall, Flutter and
    Android Studio provide a powerful and efficient environment for developing high-quality
    cross-platform mobile applications. The app allows users to add new IoT devices
    and manage existing ones, while also providing real-time monitoring of sensor
    data using MQTT. Users can control actuators such as water pumps or sprinkler
    systems to turn them on or off, and receive alerts based on minimum and maximum
    values of parameters like temperature, humidity, and soil moisture. Additionally,
    users can access machine learning models hosted on webservers through RST APIs,
    making the app a powerful tool for managing and monitoring IoT devices. The mobile
    application has a very simple user interface which includes the following options:
    - Home Page: The home screen is where the list of all the available IoT device
    is displayed as shown in Fig.5. Any IoT device can be selected to view the real-time
    sensor values in the “Device Screen”. It also where the option to add a new IoT
    device is located at the top left indicated by the “+” icon. Device Page: Fig.6.
    has the Image of the field/crop, real-time values of the sensors, controls to
    actuators, and device settings where the recommendation machine learning (ML)
    model can be accessed via the API. Device Settings Page: The device settings screen
    is where the option to set parameters to show alerts/trigger actuators is located.
    This screen can be used to set a value range for temperature, humidity, and soil
    moisture to take action/send alerts if the value is above or below the set value
    as shown in Fig.7. ML Page: This screen is where the user can get recommendation
    for crops and fertilizers as shown in Fig.8., Fig.9. and Fig.10. The user needs
    to input 5 parameters for the soil NPK ratios (Nitrogen, Phosphorus and Potassium),
    annual rainfall and soil ph. The NPK value and soil pH can be easily obtained
    by a soil test. Fig. 5. Mobile APP: Home Screen. Show All Fig. 6. Mobile APP:
    Device Screen. Show All Fig. 7. Mobile APP: Device Screen Settings. Show All Fig.
    8. Mobile APP: for ML Page. Show All Fig. 9. Mobile APP: ML Page Crop Recommendation
    Result. Show All Fig. 10. Mobile APP: ML Page Fertilizer Recommendation Result.
    Show All SECTION V. ML Model The Python programming language has been utilized
    and the scikit-learn library to develop a machine learning model capable of predicting
    the recommended crop and fertilizer for a crop. Python is used because of its
    ever-evolving libraries make it a good choice for Data analytics, machine learning
    and scientific applications [9]. To prevent the need for constant re-training
    of the model every time a prediction is to be made, so we saved the model as a.pkl
    file to achieve this such that the model can be quickly loaded. We then hosted
    the model in a web server using Python Flask, allowing users to make API calls
    to retrieve predictions by passing input values in the request body. The API processes
    the data and returns the prediction as a result. By utilizing this approach, we
    were able to provide crop and fertilizer recommendations efficiently and effectively.
    A. ML Algorithms used The main goal of our ML model is to recommend the crops
    and fertilizers, so we wanted our model to be as accurate as possible. To choose
    the algorithm with the most accurate prediction, we trained the ML model using
    SVM (Support Vector Machine), Naive Bayes, Logistic Regression, and Random Forest,
    and compared the results. Although every model performed with an accuracy of ≥
    90% except for SVM (10.68%). As the Random Forest algorithm had an accuracy of
    99.09%, we used it to build our ML model. The list of algorithms used, and their
    accuracy is given in Table II as a comparison. TABLE II Agorithm and Accuracy
    (%) B. Crop Recommendation This ML model uses the Random Forest algorithm to predict/suggest
    the best crop to grow. As stated in the previous section the Random Forest algorithm
    was chosen because of its accuracy, Fig.11. show the accuracy comparison with
    other ML algorithms for crop recommendation. This algorithm uses seven futures
    (soil nitrogen level, soil phosphorus level, soil potassium level, temperature,
    humidity, soil pH, and annual rainfall) to predict/recommend the best crop to
    grow. The dataset contains 2200 unique entries for 22 different crops each crop
    has 100 data instances. This data was split into 80% training and 20% testing
    which is a common ratio of splitting [10]. The ML model was also trained and tested
    using other algorithms such as Decision Tree, Support Vector Machine (SVM), Naive
    Bayes and Logistic Regression. Random Forest algorithms was selected because it
    was more accurate compared to other algorithms with an accuracy of 99.09% as shown
    in Fig. 11. TABLE III Agorithm and Accuracy (%) Fig. 11. Accuracy Comparison for
    Crop Recommendation Model Show All C. Fertilizer Recommendation This ML model
    uses the Random Forest algorithm to suggest the fertilizer to use to improve soil
    conditions. This algorithm uses eight futures (soil nitrogen level, soil phosphorus
    level, soil potassium level, temperature, humidity, soil type, and crop type)
    to predict/recommend the best fertilizer to improve soil nutrition for the selected
    crop. The dataset has 100 unique instances which can recommend 7 types of fertilizers
    for 11 different types of crops. The dataset is split onto 80% training and 20%
    [10] testing which produce a model with an accuracy of 85%. D. Using the ML model
    (REST API) As stated in the previous section, the ML model is saved as a.pkl file
    and hosted on a web server along with Python Flask to make it a RST API [11].
    This API can be accessed by any application by making an Hypertext Transfer Protocol
    (HTTP) request to the web server with the required input in the request body and
    receiving the prediction as a response. We used Postman, a popular tool for testing,
    documenting, and sharing APIs. It can send HTTP requests and view responses as
    shown in Fig. 12. Fig. 12. API response from ML webserver for crop recommendation
    Show All SECTION VI. Cost of the System The system is relatively low cost compared
    to the existing solutions available on the market. The sensors and microcontroller
    used are low cost and have good precision. Table IV shows the system hardware
    cost split-up. TABLE IV System Hardware Cost SECTION VII. Conclusion The proposed
    work presents a comprehensive IoT-based smart agriculture system that uses sensor
    networks and machine learning to monitor and manage crops. The system consists
    of IoT devices that measure various environmental parameters and a mobile application
    that allows users to control and monitor their devices in real-time. Additionally,
    the system includes machine learning models that predict the best crops and fertilizers
    to grow based on soil conditions and other environmental factors. By integrating
    IoT and machine learning, this system can help farmers make data-driven decisions
    and improve crop yields while minimizing resource usage and environmental impact.
    Authors Figures References Keywords Metrics More Like This Prediction of Crop
    Yield Based-on Soil Moisture using Machine Learning Algorithms 2022 2nd International
    Conference on Technological Advancements in Computational Sciences (ICTACS) Published:
    2022 IOT Based Water Management System For Crops Using Conventional Machine Learning
    Techniques 2021 12th International Conference on Computing Communication and Networking
    Technologies (ICCCNT) Published: 2021 Show More IEEE Personal Account CHANGE USERNAME/PASSWORD
    Purchase Details PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS Profile Information
    COMMUNICATIONS PREFERENCES PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help?
    US & CANADA: +1 800 678 4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow
    About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination
    Policy | IEEE Ethics Reporting | Sitemap | IEEE Privacy Policy A not-for-profit
    organization, IEEE is the world''s largest technical professional organization
    dedicated to advancing technology for the benefit of humanity. © Copyright 2024
    IEEE - All rights reserved."'
  inline_citation: (Arthi, Nishuthan, & Vignesh, 2023)
  journal: Proceedings of 2023 International Conference on Signal Processing, Computation,
    Electronics, Power and Telecommunication, IConSCEPT 2023
  key_findings: The proposed system can help farmers make data-driven decisions, improve
    crop yields, and minimize resource usage and environmental impact. The mobile
    application provides real-time monitoring and control capabilities, while the
    machine learning models offer personalized crop and fertilizer recommendations
    based on soil conditions and environmental factors.
  limitations: The paper does not provide details on the protocols or approaches used
    for integrating deployed machine learning models with other components of the
    automated irrigation management pipeline.
  main_objective: To develop a low-cost, IoT-based smart agriculture system that uses
    machine learning for crop and fertilizer recommendations, allowing farmers to
    monitor and manage their crops remotely.
  relevance_evaluation: This paper is somewhat relevant to the point of focus regarding
    the integration of deployed machine learning models with other components of an
    automated irrigation management pipeline. It discusses the development of machine
    learning models for crop and fertilizer recommendations and their deployment and
    integration with the proposed IoT-based irrigation system. However, the paper
    does not explicitly discuss specific protocols or approaches used for such integration,
    limiting its direct relevance to the point.
  relevance_score: '0.65'
  relevance_score1: 0
  relevance_score2: 0
  study_location: Unspecified
  technologies_used: IoT devices, mobile application, cloud computing, machine learning
    models
  title: Smart Agriculture System Using IoT and ML
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  apa_citation: Jiménez, A.-F., Cárdenas, P.-F., & Jiménez, F. (2020a). A survey on
    intelligent agents and multi-agents for irrigation scheduling. Computers and Electronics
    in Agriculture, 176, 105474.
  authors:
  - Jiménez A.F.
  - Cárdenas P.F.
  - Jiménez F.
  citation_count: '16'
  description: The fourth industrial revolution in agriculture seeks the automation
    of traditional practices, using modern smart technologies. Advances in electronics,
    computation and the internet of things are integrated for improving field inputs
    management. The aim of this paper is to present the design and implementation
    of an intelligent IoT-multiagent precision irrigation approach for improving water
    use efficiency in irrigation systems. The study site was the large-scale irrigation
    and drainage district of Chicamocha and Firavitoba (Usochicamocha) located in
    Boyacá - Colombia, where water is distributed from the Chicamocha riverbed. In
    the proposed system, irrigation is supervised and controlled in each field by
    an intelligent irrigation agent that autonomously prescribes and applies water
    amounts with agronomical criteria. The methodology was applied with real (cyber-physical)
    and virtual (simulated) intelligent agents and was extended to eleven pump stations
    that supply water to 5911 fields. Using a MQTT protocol, hundreds of irrigation
    intelligent agents report water prescriptions and crop characteristics to a master
    agent in each pump station, who creates a regional irrigation map to manage georeferenced
    field information and performs negotiation of water resources between agents according
    to supply availability. Field maps and intelligent irrigation agents can be visualized
    using devices with internet access. Results demonstrated that irrigation amounts
    were correctly applied on the fields, thus improving the water use efficiency.
    This technology is a novel support to decision-making in water resources management
    applications at field and district scales.
  doi: 10.1016/j.compag.2021.106635
  explanation: 'The work presented in the paper by Jiménez et al. explored the use
    of an intelligent IoT-based irrigation system, called IIoTPIS. This system aimed
    to address the challenges of automated irrigation management, particularly in
    the context of a large-scale irrigation district in Colombia. The research specifically
    focused on integrating real and simulated data, using variable irrigation prescription
    methods, and implementing negotiation protocols for water resource allocation
    among users. The researchers conducted two scenarios of evaluation: one with sufficient
    water resources and another with water scarcity. The results demonstrated the
    effectiveness of the IIoTPIS system in optimizing irrigation practices, resulting
    in water savings and improved crop yields.


    The key technologies employed in the study included:


    * Wireless sensor networks

    * Real-time data acquisition

    * Crop modeling using AquaCrop

    * Irrigation scheduling algorithms

    * Multi-agent systems

    * IoT platforms (MQTT)


    The paper contributes to the advancement of precision irrigation management by
    proposing an integrated approach that incorporates multiple technologies and intelligent
    decision-making capabilities. It has implications for both research and practical
    applications in the field of water resource management and agricultural production.'
  extract_1: In the IIoTPIS, in charge of determining irrigation schedules during
    the season of each zone or parcel to satisfy the crop water needs, according to
    site-specific characteristics.
  extract_2: The operation of the IIoTPIS was divided into three fundamental holons
    corresponding to the measurement system (MS), the application system (AS), and
    a central station (CS), which together comprise the intelligent system for irrigation
    application.
  full_citation: '>'
  full_text: '>

    "Skip to main content Skip to article Journals & Books Search Register Sign in
    Brought to you by: University of Nebraska-Lincoln View PDF Download full issue
    Outline Highlights Abstract Keywords 1. Introduction 2. Materials and methods
    3. Results and discussions 4. Conclusions Funding CRediT authorship contribution
    statement Declaration of Competing Interest Acknowledgements References Show full
    outline Cited by (17) Figures (15) Show 9 more figures Tables (8) Table 1 Table
    2 Table 3 Table 4 Table 5 Table 6 Show all tables Computers and Electronics in
    Agriculture Volume 192, January 2022, 106635 Intelligent IoT-multiagent precision
    irrigation approach for improving water use efficiency in irrigation systems at
    farm and district scales Author links open overlay panel Andrés-F Jiménez a b,
    Pedro-F Cárdenas a, Fabián Jiménez c Show more Add to Mendeley Share Cite https://doi.org/10.1016/j.compag.2021.106635
    Get rights and content Highlights • An Intelligent IoT precision irrigation approach
    was implemented at farm and district scales. • The precision irrigation system
    was made up of the integration of intelligent agents, crop models, agent-based
    modeling and Internet of Things technologies. • The behavior of each irrigation
    agent was influenced by their own interests and neighbors. • The proposed approach
    is promising for the design of distributed systems in agriculture. Abstract The
    fourth industrial revolution in agriculture seeks the automation of traditional
    practices, using modern smart technologies. Advances in electronics, computation
    and the internet of things are integrated for improving field inputs management.
    The aim of this paper is to present the design and implementation of an intelligent
    IoT-multiagent precision irrigation approach for improving water use efficiency
    in irrigation systems. The study site was the large-scale irrigation and drainage
    district of Chicamocha and Firavitoba (Usochicamocha) located in Boyacá - Colombia,
    where water is distributed from the Chicamocha riverbed. In the proposed system,
    irrigation is supervised and controlled in each field by an intelligent irrigation
    agent that autonomously prescribes and applies water amounts with agronomical
    criteria. The methodology was applied with real (cyber-physical) and virtual (simulated)
    intelligent agents and was extended to eleven pump stations that supply water
    to 5911 fields. Using a MQTT protocol, hundreds of irrigation intelligent agents
    report water prescriptions and crop characteristics to a master agent in each
    pump station, who creates a regional irrigation map to manage georeferenced field
    information and performs negotiation of water resources between agents according
    to supply availability. Field maps and intelligent irrigation agents can be visualized
    using devices with internet access. Results demonstrated that irrigation amounts
    were correctly applied on the fields, thus improving the water use efficiency.
    This technology is a novel support to decision-making in water resources management
    applications at field and district scales. Previous article in issue Next article
    in issue Keywords Artificial intelligenceInternet of thingsIrrigation schedulingMulti-agentPrecision
    irrigation 1. Introduction There is the challenge of ensuring food security during
    the 21st century is particularly due to climate change, population growth and
    the need to sustainably manage the growing global demand of water (Beddington,
    2010). Irrigation represents the main consumer of water resources and its management
    is an important research topic. In agriculture, water scarcity becomes a great
    problem due to limited water resources, but irrigation water cannot be simply
    reduced without putting production yields at risk (Kang et al., 2017). Implementation
    of optimal operational plans in agriculture, to adjust the water demand with the
    distribution and the improvement of water application control, reducing labor
    and applying irrigation scheduling plans based on monitoring systems, allows improving
    water management in irrigation districts (Gonçalves et al., 2020). In conventional
    irrigation at farm-scale, farmers apply uniform irrigation without considering
    the field variability and the crop water needs. Without advanced irrigation management,
    over- or underirrigation may occur, thus leading to several negative environmental
    and economic impacts (Datta, et al., 2017). At the irrigation district-scale,
    strategies for determining water distribution must use the representation of the
    multiplicity of different actors, their roles, and the social interactions between
    them (Belaqziz et al., 2014). However, in both cases, there is the need to sense
    the soil behavior and the response of plants to the applied water for adequate
    management. The use of real-time data and historical information is needed for
    the subsequent irrigation applications at an appropriate spatial level (Abioye
    et al., 2020). The characteristics of weather, plant and soil variables in a cropping
    system are nonlinear, dynamic and time-varying. The parameters that directly affect
    the timing and irrigation rates needed for ideal plant growth in a crop season
    include root depth, crop coefficient, plant growth, soil properties and environmental
    factors (Allen et al., 1998). The irrigation water use efficiency (IWUE) and the
    water use efficiency (WUE) are parameters used for measuring the effectiveness
    in the utilisation of water resources in agriculture. From an engineering standpoint,
    using a hydrological approach, IWUE and WUE are defined simply as the proportion
    of yield and water supplied through irrigation and rainfall (Sinclair et al.,
    1984). These definitions are predominantly used when referring to farm-scale irrigation
    water management. However, it should be noted that IWUE and WUE may also be assessed
    at the catchment or basin-scale as an irrigation district (Qureshi et al., 2011).
    For improving IWUE, the accurate measurement of water amounts supplied to irrigators
    is important at basin-scale. Irrigation scheduling is the process of determining
    how much and when to apply the irrigation, thus it has a direct effect on IWUE.
    When the application of water exceeds the amount needed for optimal plant consumption,
    the IWUE is reduced (Koech and Langat, 2018). Precision irrigation (PI) uses the
    integration of sensing, communication, and control technologies in the irrigation
    process to obtain optimal IWUE while minimizing environmental impacts (Zacepins
    et al., 2012). PI involves knowledge about irrigation systems, the spatial and
    temporal soil variation, soil structure and hydraulic properties, changing weather
    variables, crops phenology and their irrigation needs, to make better irrigation
    decisions with the potential to contribute to achieve high water saving and improved
    yield (Capraro et al., 2018). According to Smith et al., (2010) PI allows determining
    the timing, amount and spatial distribution of water applications in order to
    maximize yield or WUE, by applying water exactly (or as close as possible to)
    what is required. Using simulation or direct measurement PI defines the magnitude
    and spatial behavior of irrigation applications, knows the soil and crop responses
    to those applications and finally, uses these responses to best plan the next
    irrigation application. Additionally, PI can be considered as a three-phase cycle.
    The first phase is crop, soil or climate data acquisition from sensor systems
    located in the field. The second phase is the interpretation, analysis of raw
    data and the definition of irrigation prescriptions in rate and timing. Irrigation
    may be scheduled based on the measurement of soil moisture content using probes,
    the estimation of crop evapotranspiration or plant parameters. A summary of the
    main irrigation scheduling approaches is presented by Jimenez et al., (2020a).
    The third phase is the control of irrigation application equipment. Irrigation
    control is the ability to manage irrigation applications according to the crop
    response or soil status, while mitigating the effects of disturbances and uncertainties
    (Abioye et al., 2020). Currently, to provide efficient precision irrigation, the
    integration of the Internet of things (IoT) for data acquisition, as well monitoring
    and decision support technologies, must be considered in irrigation management
    (Zamora-Izquierdo et al., 2019). Greater water-use efficiency depends on better
    agricultural practices alongside extra technology, thus gaining an economic advantage
    for farmers while also reducing environmental burdens (Levidow et al., 2014).
    The concepts of artificial intelligence (AI) and optimization are used in precision
    irrigation. On the one hand, in the context of irrigation, artificial intelligence
    implies learning and/or making decisions based on reasoning and data processing
    for the definition and modification of irrigation prescriptions and applications
    on the field (Adeyemi et al., 2018). On the other hand, optimization is the process
    of manipulating various variables of an irrigation system with the aim of achieving
    the best possible outcome, the best IWUE (Cong et al., 2017). AI is defined as
    the science that aims to design and build technologies that can mimic human intelligent
    behavior (Talaviya et al., 2020). In the connotation of acting rationality, computational
    intelligence is the study of the design of intelligent agents (Weiss, 2013). An
    agent is a computer system situated in an environment and has the capability of
    performing autonomous actions in this environment to achieve its design objectives
    (Wilensky and Rand, 2015, Jimenez et al., 2020b). A multi-agent system (MAS) is
    a set of agents able to work together for solving problems. According to Bratman
    (1987), there should be at least a relationship between two agents in a MAS, where
    one of them satisfies at least one of the objectives of the other. Agents should
    have a limited ability to solve the problem alone and at least one of the agents
    must be autonomous. An Agent-Based Model (ABM) is a type of MAS. The core idea
    of ABM is to model phenomena with agents, an environment and a description of
    agent-agent and agent-environment interactions. Several studies have confirmed
    that ABM is well suited for research on dynamic, coupled, natural and social systems
    (Huber et al., 2019). Dynamic and autonomous entities in an irrigation district
    and crop fields can be modelled using ABM strategies that allow the representation
    of the heterogeneity of entities, their roles and interactions (Jimenez et al.,
    2020a). By using ABM, virtual irrigated systems can be designed and used as virtual
    laboratories. These laboratories are an alternative when real experiments cannot
    be performed (Barreteau et al., 2004). The ABM strategy has the capability of
    modelling the complexity of management in real-time, irrigation operations in
    hundred of fields, non-centralized distribution of water resources and reactive
    and proactive capabilities of individual agents. Simulation models can be used
    to simulate crop responses to irrigation management based on crop phenology (Mccarthy
    et al., 2014). These crop models offer the opportunity to improve precision irrigation
    strategies, as the need for time-consuming field experiments is eliminated (Cong
    et al., 2017). AquaCrop is a crop water model developed by FAO that simulates
    the response of water to crop yield. AquaCrop was calibrated for several crops,
    allowing the determination of crop yields using different sowing dates, soil types,
    climatic conditions, irrigation frequencies and irrigation amounts (Steduto et
    al, 2009). Agriculture is an ideal candidate for the deployment of Internet of
    Things (IoT) solutions because it occurs in wide areas that need to be continuously
    monitored and controlled (Farooq et al., 2020). IoT can help to secure sufficient
    food demands and increase the efficiency of agricultural production (Nižetić et
    al., 2020). Under the IoT paradigm, low-cost electronic devices can improve the
    farmer or agronomist interactions with the crop, soil and environments, while
    the computing power and software available on the internet can provide valuable
    data processing (Talavera et al., 2017). Regarding irrigation processes, the monitoring
    of soil and plants using IoT can improve irrigation by obtaining water savings
    that are precious in some specific geographical regions (Nižetić et al., 2020;
    Capraro et al., 2018). The application of IoT in the agricultural sector leads
    to advances that could drastically modify the current production procedures in
    agriculture (Shafi et al., 2020). Several review articles have been published
    related to precision irrigation by authors such as Adeyemi et al., 2017, Abioye
    et al., 2020, Liang et al., 2020. In addition, several works on the opportunities
    in precision irrigation using IoT, AI and data analytics are also found in the
    scientific literature. Some techniques of AI have been used in precision irrigation
    such as knowledge engineering (Rafea et al., 2003), fuzzy logic (Zhang and Guo,
    2018), deep learning (Jimenez et al., 2020c), case-based reasoning (Li and Yeh,
    2004), evolutionary computing (Belaqziz et al., 2014), genetic algorithms (Perea
    et al., 2021), support vector machines (Ashrafzadeh et al., 2020), data mining
    (Kovalchuk et al., 2018), optimization algorithms (Alsukni et al., 2019) and Agent
    Based Modeling (ABM) (Tamburino et al., 2020). This paper encompasses the development
    of an intelligent multiagent irrigation system to enhance the Irrigation Water
    Use efficiency (WUE) and the conflict resolution in the distribution of water
    among users of a high scale irrigation district. The contribution of this work
    is the representation of collective decision-making procedures with the integration
    of ABM, crop modelling and IoT. Our proposed approach is the management of both
    irrigation scheduling at farm-scale and at basin-scale. Each field is supervised
    by an intelligent irrigation agent. Real (robotic) agents and several virtual
    (software) agents were implemented in the system. Irrigation agents are in charge
    of determining and applying irrigation schedule during the season of each zone
    or parcel to satisfy the crop water needs, according to site-specific characteristics.
    In the case of water scarcity, a negotiation protocol is generated for water allocation
    between the stakeholders. The use of real data and entities in an IoT-multi-agent
    system for irrigation is one of the new ideas introduced in the proposed approach.
    This paper shows an advance toward improvement in water irrigation efficiency
    using the real implementation of multi-agent systems for irrigation. The paper
    is organized as follows. The second section presents the materials and methods,
    including an outline of the study area and the irrigation method currently applied,
    crops characterization, field data collection, irrigation prescriptions, the agent
    modeling system, simulation and negotitation explanations. Results are presented
    and discussed in the third section. Finally, the concluding remarks are presented
    in the last section. 2. Materials and methods 2.1. Study area The large-scale
    irrigation and drainage district of Chicamocha and Firavitoba (Usochicamocha)
    is located in the Boyacá department, approximately 180 km from Bogotá, Colombia
    (Fig. 1). Usochicamocha covers the municipalities of Oicatá, Tota, Chivatá, Sotaquirá,
    Duitama, Sogamoso, Santa Rosa de Viterbo, Paipa, Tibasosa and Tuta. The district
    has an elevation of 2560 masl, a total area of 11300 ha with an agricultural net
    area of 8200 ha, and a horticultural production area of 6000 ha, with an annual
    production of 140.000 ton (Martínez et al., 2014). The average temperature is
    14° C, with an average rainfall of 778 mm and relative humidity of 70% (Weather
    Spark, 2021). The irrigation district has eleven irrigation units, each one of
    them with a pumping station responsible for supplying water to several fields
    (Table 1). Irrigation infrastructure, a weather station and water supply are available
    in this region. The sprinkler is the most widely used irrigation delivery method
    followed by drip irrigation technologies. Each farmer receives and applies water
    in their fields without considering the type of crop, soil and water requirements.
    In some periods of the year, the dam lowers its level, thus reducing the availability
    of irrigation water. The complexity of the system is greater when the sowing dates
    and the variety of crops planted in the region are considered. Water is provided
    by the La Copa and La Playa dams through the Chicamocha riverbed (Fig. 1). Download
    : Download high-res image (368KB) Download : Download full-size image Fig. 1.
    Large-scale irrigation and drainage district of Chicamocha and Firavitoba (Usochicamocha).
    Irrigation units: (1) Holanda, (2) Surba, (3) Pantano de Vargas, (4) Ayalas, (5)
    Duitama, (6) Cuche, (7) San Rafael, (8) Las Vueltas, (9) Tibasosa, (10) Ministerio,
    (11) Monquirá. ✩ Usochicamocha Central Station. Table 1. Usochicamocha irrigation
    units. Irrigation unit Coordinates (Centroid) Number of fields Area (ha) Holanda
    5.779374356020°, −73.092051801000° 450 691.454 Pantano de Vargas 5.754001705803°,
    −73.071283014000° 562 896.24 Surba 5.784957831360°, −73.066841680000° 332 742.40
    Ayalas 5.775491571300°, −73.038795619000° 291 906.77 Duitama 5.799548427500°,
    −73.022154997000° 473 857.00 Cuche 5.818388289100°, −72.978288914000° 508 937.81
    San Rafael 5.789569445170°, −72.988214901000° 1092 845.13 Las Vueltas 5.777088443500°,
    −73.004349363000° 275 365.51 Tibasosa 5.765340421910°, −72.982835070000° 400 581.47
    Ministerio 5.748652215690°, −72.972612337000° 581 748.84 Monquirá 5.738832395480°,
    −72.947474757000° 947 656.59 TOTAL 5911 8229.24 2.2. Available data Table 2 shows
    the description of the data used in this study. Climate variables of daily precipitation,
    maximum and minimum temperature and reference evapotranspiration were acquired
    using two weather stations located in El Gocho field that belongs to the San Rafael
    irrigation unit (5.787021°N, − 190 72.973932°) and in El Clan field that belongs
    to the Tibasosa irrigation unit (5.756809°N, −72.991612°). Interpolated soil maps
    were derived for the study region using 100 soil samples, which provided regional
    data of clay, silt and sand fractions, permanent wilting point, field capacity
    and saturation point. Table 2. Data description. Data Resolution Dates Source
    Meteorological variables Day/point 07–01-2020 to 10–31-2020 Weather Station Pro2
    Plus- Datalogger WeatherLink IP (Davis Instruments, USA) Meteorological variables
    Day/point 11–01-2019 to 10–31-2020 GrowWeather station with Weather Wizard III
    console (Davis Instruments, USA) Interpolated maps: , , ; clay, silt and sand
    percentages; and . 1:25000 2009 Administrative Department of Science, Technology
    and Innovation of Colombia - Colciencias (Project: 110937819630) Polygon layer-
    Irrigation area map 1:25000 2020 Usochicamocha Irrigation District Root depths
    an Crop Coefficients ( ) Parameter 2003, 2006, 2010, and 2013 (Garcia et al.,
    2003), (Allen, 2006), (Cely 2010), (Perez, 2013). Management allowable depletion
    (MAD) Parameter Allen et al, 1998. Note: Permanent Wilting Point ( ), Field Capacity
    ( ), saturation point ( ), hydraulic conductivity ( ) and apparent density ( ).
    2.3. Intelligent IoT precision irrigation system architecture The structure of
    the Intelligent IoT precision irrigation system IIoTPIS is shown in Fig. 2. The
    agents hierarchization of IIoTPIS was established by the biological and sociological
    concept of HMAS, where the principles of “holos” (entire) and “on” (part) describe
    recursive and self-similar structures in modeling the irrigation district. Fig.
    2 shows three fundamental holons corresponding to the measurement system (MS),
    the application system (AS) and the central station (CS), which together comprise
    the intelligent system for the irrigation application holon in an agricultural
    field (irr-agent). Likewise, intelligent irrigation agents together with their
    self-similar ones constitute the irrigation units holons (ma-agents). Finally,
    several irrigation units compose the irrigation district holon (coor-agent). Thus,
    the hierarchy of the agents that form the IIoTPIS design was defined. Two additional
    agents are still involved in the architecture; although they are not considered
    holons, they are a fundamental part of the system. The source-agent is in charge
    of determining the amount of water available in the irrigation district and the
    man-agent is a human in charge of the system. As holons, each agent is independent,
    but together they can solve problems through collaborative and negotiating procedures.
    Download : Download high-res image (275KB) Download : Download full-size image
    Fig. 2. Holonic structure of the multi-agent model. Left: top view, right: side
    view. Source: Author. Table 3 shows the characteristics of agents incorporated
    in the IIoTPIS. Each agent type has an assigned role and together with other agents
    accomplishes a fully functional MAS with capabilities of autonomy, coordination,
    deliberation, conflict resolution and decision making. Table 3. Intelligent IoT
    Precision Irrigation System - Agents Characteristics. Agent Persistence Social
    Ability Activeness Goal Het. Master Agent They use their own thread and schedules
    without affecting other agents. Irrigation agents, coordinator agent Stationary
    located agent Request and send irrigation prescriptions to irrigation agents.
    Generate map of irrigation requirements. No Coordinator Agent It has its own thread
    and schedules without affecting other agents. Manager Agent, Master Agents and
    Source Agent Stationary located agent Distribute the available water resource
    in the dams, coordinate activities of other agents and eject negotiation protocols.
    No Irrigation Agents They have their own thread and schedules without affecting
    other agents. Autonomy in irrigation applications if there is enough water resource
    Master Agents Stationary located agent Apply irrigation amounts in adequate time
    and rates to the climate, soil and plant characteristics. In water shortage, they
    wait orders from Master Agents. Yes Source Agent It has its own thread and schedules
    without affecting other agents. Coordinator Agent Stationary located agent Acquire
    data of water level in the dam. Generate resource shortage alarm. No Manager Agent
    It has its own thread and schedules without affecting other agents. Coordinator
    Agent Global suppervisor agent Manage and control the IIoTPIS No Note: Heterogeneity
    (Het.). Considering the hierarchy of the agent, the architecture was defined with
    four subsystems: customer subsystem, supervising and planning subsystem, communication
    subsystem and web subsystem. The customer subsystem is constituted by irrigation
    agents in charge of the irrigation prescription, the application of water resources
    and keeping agents informed in the supervising and planning subsystem about field
    activities. The supervising and planning subsystem is responsible for the supervision
    of available water resources, the status of irrigation agents, the definition
    of prescription maps using field data, mapping using global information and conflict
    resolution between agents. The communication subsystem allows transmission and
    reception of data between agents in the IIoTPIS. In the web subsystem, the graphical
    user interface (GUI), databases and the communication framework were implemented.
    Usochicamocha farmers located in any place can access the GUI of IIoTPIS via web
    browsers through the internet. 2.3.1. Customer subsystem In the customer subsystem,
    two kinds of irr-agents were implemented. Real agents are intelligent systems,
    implemented in hardware-software and installed directly on the field. These agents
    acquire data from soil moisture, canopy temperature, environmental temperature,
    relative humidity sensors and from the weather station for defining irrigation
    prescriptions based on the determination of water deficits in their respective
    fields. Real intelligent agents manage the opening and closing of solenoid valves
    on the field for applying the water amount. Virtual agents are computer algorithms
    that emulate the behavior of irrigation agents in the field and use real data
    from weather stations for the definition of irrigation prescriptions. The crop
    modelling software Aquacrop was employed to obtain adequate feedback of the soil,
    weather and crop interactions and the responses to the irrigation applications
    prescribed by each virtual agent. When there is no enough water in the dams for
    supplying water to the region, irrigation agents have to wait for the results
    of the negotiation procedure in the supervision and planning subsystem. AquaCrop-OSPy
    is an algorithm developed in Python (Van Rossum and Drake, 2009) useful for running
    simulations without using Aquacrop graphical interface. AquaCrop-OSPy was developed
    to conduct cutting-edge research for the design and testing of irrigation strategies
    (Kelly and Foster, 2021). With this algorithm, the simulations can be dimmed by
    allowing making changes in the aquacrop files associated with plant, soil, environment,
    and irrigation applications dynamically during the development of the crops through
    programming in Python. This procedure, together with a computer with high computing
    capacities, allowed the simulation of thousands of crops in different phenological
    states, sowing dates, climate conditions and field activities, integrating geospatial
    data using the several Python libraries. The proposed technology faces the variety
    of crop types, sowing dates, soil and climatic conditions, constraints related
    to water delivery timing, the regional total available water, crop areas, irrigation
    prescriptions by field area and satisfaction metrics for Usochicamocha. The area
    is mostly covered by agricultural fields interspersed with rural lands, mainly
    corn, potato, tomato, barley, wheat, quinoa and bulb onion, among others. Models
    of these crops have been validated using Aquacrop. Although these validations
    are site-specific, in this study they are used as the best approximation of reality.
    Crop type, crop calendars, crop coefficients and root depth values used in this
    study are described in Table 4 and Table 5. These values were used in irrigation
    prescription for virtual and real agents, and crop modeling with Aquacrop for
    virtual agents. The clay, silt, and sand maps were used for defining the soil
    texture name in Aquacrop simulations. The regional climate behavior is determined
    from real-time or historical data through two weather stations that collect standard
    agrometeorological measurements. Table 4. Growing season and water needs of different
    crops. Crop Sowing (day) Transplanting (day) Harvesting (day) Crop water needs
    (mm) Source Corn 1 N/A 125–180 500–800 (Smith and Steduto, 2012) Potato 1 N/A
    120–150 500–700 (Smith and Steduto, 2012) Tomato 1 28–35 138–145 400–800 (Smith
    and Steduto, 2012) Barley 1 N/A 90–130 450–650 (Smith and Steduto, 2012) Wheat
    1 N/A 180–300 450–650 (Smith and Steduto, 2012) Quinoa 1 N/A 150–170 500–650 (Garcia
    et al., 2003) Onion 1 30–35 180–185 350–550 (Smith and Steduto, 2012) Table 5.
    Crop coefficient and root depth characteristics. Crop Crop Coefficient Root Depth
    (cm) Source ini mid end Time (days) Init. Max. Max. eff. Root (cm) Init. Crop
    dev. Mid season Late season Corn 0.30 1.20 0.50 25 37 40 30 30 230 91 (Allen,
    2006) Potato 0.50 1.15 0.75 25 30 36 30 30 150 61 (Allen, 2006) Tomato 0.60 1.15
    0.80 25 30 30 25 30 100 61 (Allen, 2006) Barley 0.30 1.15 0.25 40 60 60 40 30
    130 100 (Allen, 2006) Wheat 0.30 1.15 0.40 40 60 60 40 30 150 104 (Allen, 2006)
    Quinoa 0.52 1.00 0.70 25 60 60 35 30 100 93 (Garcia et al., 2003) Onion 0.40 0.85
    0.35 21 42 49 38 4 16 20 (Perez, 2013) The absolute minimum parameters of AquaCrop
    were used for simulation of each crop growth, yield and water productivity (Raes
    et al., 2009). For crop parametrization, the parameters were grain yield, rough
    idea of harvest index (HI), random planting dates and harvesting dates, and estimated
    crop life-cycle length seeding rate and germination percentage. For soil fertility
    parametrization, the parameters were textural class of the soil and indication
    of variation with depth indication of land slope, soil–water holding capacity
    and indication of native fertility of the soil with a general fertilization practice.
    Daily values of minimum and maximum temperature, daily evapotranspiration (ETo)
    and rainfall data were used for climate parametrization. Water application method
    was defined by the real and virtual intelligent irrigation agents. Standard Aquacrop
    models were used in this project. Table 6 shows the calibration and parametrization
    characterization used in this research for onion, corn, potato, quinoa, wheat,
    and barley (Steduto et al., 2012). These calibration and validation models were
    obtained with experimental data. For reliable crop simulations, additional information
    is needed and field research must be performed for improving parametrization of
    crop, soil and management practices. Table 6. Intelligent IoT Precision Irrigation
    System – Calibration and parametrization of Aquacrop crop models. Crop Non-limiting
    conditions Water stress Conditions Geographic coverage (with respect to the world
    cropped areas) Overall Onion (Agbemabiese, 2015) ✓ ✓✓ ✓ ✓ Corn (Greaves, 2016)
    ✓✓✓ ✓✓ ✓✓✓ ✓✓✓ Potato (Razzaghi, 2017) ✓ ✓ ✓ ✓ Quinoa (Geerts, 2009) ✓✓ ✓✓ ✓✓✓
    ✓✓ Wheat (Khalaf, 2018) ✓✓ ✓ ✓✓ ✓✓ Barley (Tawakoli, 2015) ✓✓ ✓ ✓ ✓ Note: ✓ Minimum
    degree of calibration, ✓✓ Medium degree of calibration, ✓✓✓ Good degree of calibration.
    The objective of the IIoTPIS is to recommend prescriptions to farmers to implement
    good practices and obtain the best water use efficiency for each crop cultivated
    in the study region, thus defining the irrigation prescriptions per field with
    agronomic and data driven criteria and meaurements in field. Irrigation agents
    determine prescriptions using the procedures defined by Jimenez et al. (2020b).
    One of the three possible irrigation prescription methods can be used, which are
    assigned according to the programming of each real irrigation agent and a random
    assignment in the simulations of the virtual irrigation agents. The first irrigation
    prescription method uses the water balance equation and data from the meteorological
    station, denoted in the system and in the visualization of the web application
    as ET0 prescription. The second prescription method is defined by data from soil
    moisture sensors at two depths in the real irrigation agents, while simulation
    values in AquaCrop of the volumetric water content measurements are defined at
    these same depths in virtual irrigation agents. This prescription is denoted in
    the system and on the web application GUI as VWC prescription. The third procedure
    for prescribing irrigation, denoted as the BETTER prescription, uses the two prescriptions
    described above. In each one of them, the virtual or real irrigation agent simulates
    the behavior of the crop yield in the future using AquaCrop, that is, at the time
    of harvest. The WUE and IWUE are calculated using the value of the crop yield,
    the water applied by irrigation and the water supplied by rain. The prescription
    that presents the best performance and efficiency in the use of water in the future
    will be selected on each day of irrigation scheduling. For enabling a crop to
    extract water from the root zone without suffering water stress, only a percentage
    of the total available water ( ) can be depleted. This fraction of is called Readily
    Available Water ( ) (mm) (1). (1) where (mm), is the volumetric water content
    at , is the volumetric water content at , is the effective root depth in and is
    the management allowed depletion. When water is extracted by evapotranspiration,
    the root zone depletion increases ( ) and the stress is induced when becomes equal
    to . In Jiménez et al. (2021), the satisfaction level was defined as a parameter
    of the irrigation agent’s state. The crop stress coefficient after irrigation
    applications is used as a satisfaction metric in irrigation management at a regional
    scale using Eq. (2) (Han et al., 2019). (2) where is the irrigation prescription
    applied after negotiation (mm) and is the agent identification number corresponding
    to the same field number. The satisfaction level corresponds to the way in which
    the crops respond to the applied water and, therefore, it is an indication of
    the conformity of the state of the irrigation agent and its environment. The IIoTPIS
    seeks the best levels of satisfaction when applying irrigation to crops. When
    there is enough water, the satisfaction level is high, that is, , which means
    that there is no water stress in the soil, the available water is within 25% or
    50% of the TAW below the field capacity (FC) according to the crop, and it has
    been possible to maintain the soil at a suitable amount of moisture. When the
    water resource is reduced, some crops become stressed, then, the satisfaction
    level is reduced. When (medium satisfaction level), the volumetric water content
    is between 25% and 50% or 50% to 65% of the TAW below FC according to the crop.
    In extreme cases, stress is unmanageable due to the absence of water, therefore,
    many real irrigation agents or virtual irrigation agents will have a low level
    of satisfaction. This situation corresponds to , where the humidity level is very
    low and could be detrimental to the crop. 2.3.2. Supervision and planning subsystem
    In the supervision and planning subsystem, the man-agent, the coor-agent, ma-agents
    and the source-agent interact. The man-agent is the human that supervises the
    IIoTPIS system. There are eleven ma-agents, one per irrigation unit and they are
    responsible for data collection of all the irr-agents that are still under their
    coverage, consolidate them and send the total water needs of each irrigation unit
    to the coor-agent. The source-agent acquires information about the dam level and
    reports the total supply available water (TSAW) to the coor-agent. The coor-agent
    should act as the second-highest hierarchical level in the holonic structure of
    the MAS organization, after the man-agent and it is responsible of the coordination
    of actions of all the agents. The water resource negotiation algorithm for each
    of the eleven irrigation units of UsoChicamocha is performed when the resource
    available in the dam is not enough to satisfy the cultivated field needs and was
    implemented using an agent-based model (ABM) in NetLogo (Wilensky, 1999). The
    details of this model are explained by Jiménez et al. (2021). This procedure is
    developed by the ma-agents. In NetLogo, irr-agents are represented by polygons
    of a vector layer. Each irr-agent is autonomous in the definition of irrigation
    prescriptions. For each irrigation unit , the total water requirement ( ) amount
    is defined as the sum of all their corresponding irr-agents water requirements
    ( ) and it is calculated using Eq. (3). (3) where represents each field monitored
    by an irr-agent, is the water requirement defined by the irr-agent of field in
    the irrigation unit and represents the number of irrigation agents in the irrigation
    unit . The total district supply available water TDSAW is measured by the source-agent
    and splited into irrigation units by the coor-agent. The total supply available
    water is the total available water that can be used in an irrigation event by
    an irrigation unit . is the available water for agent belonging to an irrigation
    unit and it is determined dividing the between irr-agentsj according to field
    sizes (areasj). The availability and requirement relationship for an irrigation
    unit is determined by substracting the from the using Eq. (4). (4) If , the ma-agentj
    authorizes irr-agentsj to apply their initial defined irrigation prescriptions.
    If , the ma-agentj performs a conflict resolution protocol based on the negotiation
    of water resources between irrigation agents. Before the negotiation, an iterative
    process is performed for the distribution of between irr-agentsj for each irrigation
    unit, considering field areas and reducing excess of water in fields with . After
    this procedure, agents that have enough water for satisfying their needs are defined
    as cooperative (c), otherwise they are defined as non-cooperative (nc). For the
    negotiation protocol, utility functions were defined according to the model inspired
    in the sociology of innovation diffusion explained by Edwards et al. (2005). According
    to the trade-off between personal interest and social pressure, each agent can
    change or not its cooperative or non-cooperative behavior (Eqs. (5)–(8)). (5)
    (6) (7) (8) where is used as a modification factor that is a function of phenological
    plant status; and are the proportion of neighbors of agent of cooperative and
    non-cooperative ( ) behavior, respectively; and are the utility functions defined
    for maintaining the cooperation and non-cooperative status of agent , respectively;
    is the utility function defined when an agent changes from cooperation status
    to non-cooperation status, and is the utility function defined when an agent changes
    from non-cooperation status to cooperation status. The proportion of neighbors
    and was determined in NetLogo by defining the number of neighbors in a radio r
    from the centroid of each polygon feature that corresponds to the location of
    each agent. Agents that tend to imitate the behavior of their neighbors are represented
    using , whereas agents that tend to imitate neighbors of opposite behavior are
    represented by (Akhbari and Grigg, 2013). The proposed modification factor function
    (γ) corresponds to 0.3 at the beginning of the crop season, decreases linearly
    during the development phase (0.0), and maintains this value during the midseason.
    After the crop development phase, γ increases linearly during the end of the growing
    season until reaching the value of 3.0 again. According to this function, the
    priority irrigation period is the crop development phase as it is the critical
    period in the cultivation (Jiménez et al., 2021). The modification factor function
    (γ) in the utility function involves crop growing and the cooperative or non-cooperative
    agent status involves soil moisture content. With both elements, irrigation priorities
    are defined during the negotiation process when there is insufficient water available
    in dams. After a low water availability or stress event, the algorithm also uses
    both parameters for defining irrigation amounts and irrigation priorities. The
    offer modification amount for the cooperative agents ( ) is defined using Eq.
    (9). (9) Then, the new demand of agent is calculated using Eq. (10). (10) The
    demand modification amount for non-cooperative agents ( ) is defined using Eq.
    (11). (11) Then, the new demand of agent is calculated using Eq. (12). (12) The
    non-cooperative total new demand is calculated by adding all the according to
    Eq. (13). (13) While , there is an iterative process of water reduction according
    to a water amout (mm) and the field area ( ) by field agent, until for all the
    cooperative and non-cooperative agents using Eqs. (14), (15). (14) (15) At the
    end of the negotiation stage, the new total district water requirement (TNDWR)
    amount must be less than or equal to the total district supply available water
    (TDSAW). The IIOTPIS seeks the best levels of satisfaction when applying irrigation
    to crops. When there is enough water, the satisfaction coefficient is maximum
    and, of course, when reducing the amount of available water, there will be stress
    on the crops. In extreme cases, stress will be unmanageable due to the absence
    of water and, therefore, many irr-agents will have a dissatisfaction response.
    Three site-specific restrictions were imposed in the IIoTPIS. First, the total
    water applied in the district fields cannot exceed the supply capacities of the
    dams. Second, water is guaranteed in each field unless there is a problem in the
    irrigation infrastructure, then, there are no irrigation events. Third, irrigation
    agents can prescribe irrigation events, but cannot apply water to fields without
    permission from the agent. 2.3.3. Communication subsystem Communication between
    agents in the IIoTPIS is performed using Message Queue Telemetry Transport (MQTT)
    (Mishra and Kertesz, 2020). The MQTT is a lightweight messaging protocol for power-efficient
    devices and sensors based on the publish-subscribe mechanism. This protocol was
    implemented in a cloud-based server (Digital Ocean) using an open-source Mosquitto
    MQTT broker. Agents publish data to topics on the MQTT broker and other agents
    can acquire data by subscribing to the respective topics. Agents-publishers and
    agents-subscribers do not communicate directly with each other; they use the broker
    as a communication mechanism instead. Fig. 3 shows the general scheme of the agent
    interconnectivity using the communication protocol of the IIoTPIS. Download :
    Download high-res image (286KB) Download : Download full-size image Fig. 3. Communication
    subsystem scheme of the IIoTPIS. Source: Author. 2.3.4. Web subsystem A web application
    was developed to interact with the IIoTPIS system. The manager-agent, users and
    farmers can consult vectorial maps of several variables associated with irrigation
    management in the Usochicamocha irrigation district fields. This application was
    made with the open-source web development framework Django, Geodjango_Leaflet,
    PostgresSQL, and Postgis (Django Software Foundation, 2019.). Geodjango_Leaflet
    was used as a relational, object-oriented and open-source database management
    system, where the initial and main project configurations were made, libraries
    were installed, the credentials of the PostgresSQL were configured and the Postgis
    database was installed. Geodjango_Leaflet allows the reception of data and spatial
    information such as shapefiles. Models were created from the shapefiles databases
    and some application programming interfaces (apis) were created for manipulating
    these data. The web application was developed using Hypertext Markup Language
    (Html), Cascading Style Sheets (css), JavaScript (Js), PythonTM3 programming languages
    and leaflet_js tools. Vectorial layers are visualized according to environmental
    features. Irrigation Agents can be visualized on the maps, showing decisions about
    irrigation prescriptions, satisfaction levels, and cooperative behaviors. The
    Chicamocha river was represented as a layer of lines, while fields and dams were
    represented using polygon layers. The application allows the selection of layers
    and other functionalities of the geographic information system (GIS). 2.4. IIoTPIS
    framework For modeling agents in the IIoTPIS, the AML language (Agent Modeling
    Language) was used. The AML language makes it possible the modeling of agent roles,
    behavioral aspects and interactions between agents (Cervenka et al., 2005). Entities
    in AML correspond to agents, resources, environments and organizations, designated
    to explicitly represent various (MAS) society abstractions. According to the IIoTPIS
    general design, the man-agent, coor-agent, ma-agents and the source-agent interact
    in the supervision and planning subsystem, while hundreds of real and virtual
    irr-agents interact in the customer subsystem. The resources are the water and
    the information stored in the databases. All the AML fundamental types of entity
    inherit features of behaviored semi-entities, which have their own capabilities,
    observe and/or effect their environment by means of perceptors and effectors,
    and provide and use services. Social semi-entities represent elements that can
    participate in social relationships, while mental semi-entities represent elements
    that can be characterized in terms of beliefs, goals, needs, motivations and desires.
    An organization is a specialized type of environment in the IIoTPIS that is specified
    in the Class-Level organization structure model (Fig. 4). From the external perspective,
    the Usochicamocha – Irrigation district organization represents an autonomous
    entity. The organization behavior consists, on the one hand, in the emergent properties
    and behavior of their agents, their mutual relationships, observations and interactions,
    and on the other, in the features and behavior of the entity as a whole. From
    the internal perspective, organization units are types of environments specified
    by structures, interactions, roles, constraints, rules, among other elements (Cervenka
    et al., 2005). Agents in the IIOTPIS are active because they can take the initiative
    and control when and how they process external requests. Additionally, agents
    act not only in isolation but also in cooperation or coordination with other agents.
    Download : Download high-res image (590KB) Download : Download full-size image
    Fig. 4. Class-level organization structure of USOCHICAMOCHA-IIOTPIS model. Fig.
    4 shows the AML class diagram, depicting the generic organization structure of
    the IIOTPIS. This organization comprises a man-agent (of the Manager entity role
    type), a coor-agent (of the Coordinator entity role type), a source-agent (of
    the Source entity role type) and eleven ps-organizations (of the PumpStation organization
    unit type). The PumpStation organization consists of a ma-agent (of the Master
    entity role type), one to n si-agents (of the SoftwareIrrigation entity role type)
    and one to m ri-agents (of the RealIrrigation entity role type). The si-agents
    and ri-agents are peers to each other (the cooperate connector), and subordinated
    to the ma-agent (the manage connector). The coor-agent is superordinate of the
    eleven ps-organizations and the source-agent (the manage connectors). Finally,
    the man-agent is superordinate of the coor-agent (the manage connector). Each
    si-agent of the si-organization comprises a sds-agent (of the SmartDecisionSystem
    entity role type), a ps-agent (of the PerceptionSystem entity role type) and an
    iae-agent (of the IrrigationActivationEmulation entity role type). The number
    of software irrigation systems (n) depends on the number of fields simulated with
    these characteristics in the corresponding pumping station. Each ri-agent in the
    ri-organization comprises a scs-agent (of the SmartCentralStation entity role
    type), from 1 to 4 smsn-agents (of the SmartMultiSensorNodes entity role type),
    a wss-agent (of the WeatherStationSystem entity role type) and an ias-agent (of
    the IrrigationActivationSystem entity role type). The number of ri-agents (m)
    depends on the number of devices that have been installed in real fields. 2.4.1.
    System interaction The Business Process Model and Notation (BPMN) was used to
    model the interactions between the agents that compose the IIOTPIS (von Rosing
    et al., 2015). The IIoTPIS was developed for irrigation scheduling management
    at field and basin scales. At the field scale, this system allows the definition
    of irrigation prescriptions in specific crops. At the basin-scale, a negotiation
    of the irrigation protocol was implemented using an ABM to ensure an adequated
    distribution of irrigation amounts to hundred of fields, according to the available
    water supply in the dams. Fig. 5 represents the interactions between agents in
    the IIoTPIS. These interactions are performed by the transmission of real data
    between agents. An irrigation scheduling application at the basin scale starts
    by the coor-agent, who requests the total district supply available water (TDSAW)
    to the source-agent and the total water requirements (TWR) to the ma-agents. The
    ma-agents request irrigation prescriptions to si-agents and ri-agents. The si-agents
    and ri-agents have the operative autonomy of prescribing and they keep informed
    the corresponding ma-agents of the irrigation unit about the crop status and irrigation
    requirements. The ma-agents calculate the TWR and send these data to the coor-agent.
    Afterwards, the coor-agent acquires the numerical information from the ma-agent
    and the source-agent, comparing the TDSAW with the total district water requirements
    TDWR. Download : Download high-res image (446KB) Download : Download full-size
    image Fig. 5. Business process model and notation for USOCHICAMOCHA-IIOTPIS. If
    there are enough water resources, the coor-agent will send an authorization to
    the ma-agent for irrigation application, which is in turn sent to every si-agents
    and ri-agents. The ma-agents update vector maps with information of irrigation
    prescriptions, seedtime and crop in the web server application. If there are conflicts
    in water distribution, the coor-agent sends the available amount of water to each
    ma-agent. Each ma-agent performs a resource distribution algorithm based on ABM
    and sends an irrigation authorization with the new irrigation prescriptions to
    si-agents and ri-agents. Optimization between the demand and the offer is adjusted
    according to the environmental scenario defined by the evapotranspiration and
    climatic variables, the crop types, the crop development and soil properties,
    the soil water balance of previous days, the stress level of each crop to be negotiated,
    and collaborative behaviors between si-agents and ri-agents. The ma-agents send
    irrigation maps with permissible irrigation prescriptions to the web-server application
    for visualization on the internet. Finally, ri-agents apply and si-agents emulate
    the application of irrigation amounts to the field. Three site-specific constraints
    were imposed to the IIoTPIS and are described next. First, the supplies can never
    exceed the total dam capacity. Second, water is guaranteed in each field unless
    there is a problem in the irrigation infrastructure, then, there are no irrigation
    events. Third, the irrigation agents can prescribe irrigation events, but cannot
    apply water to the fields without the ma-agent permission. The agents interchange
    messages between them using the IoT messaging protocol MQTT, represented by dashed
    lines in Fig. 5. Table 7 shows the principal entities in the IIoTPIS and their
    communication interactions. Table 8 shows topics, messages and actions involved
    in the communication protocol implemented. Topics are denoted as Origin/ Specific
    Origin /Destination/ Specific Destination, using messages defined as: action:
    message_1; message_2… message_n. The actions defined in the MQTT protocol were:
    report (Rp), irrigation (Irr), level (Lv). Table 7. Communication interactions
    and rules between agents - Algorithm. Source: Author. ▪ coor-agent: - coor-agent
    is activated before irrigation activities start. - coor-agent requests water availability
    amount to source-agent. - source-agent responds with the water availability amount.
    - coor-agent requests the irrigation unit requirements to the ma-agents ▪ ma-agent:
    - ma-agents publishes the irrigation requirements request to si-agents and ri-agents.
    - si-agents and ri-agents report data to the corresponding ma-agent. - si-agents
    and ri-agents await authorization for irrigation application (irrigation_flag
    = False) - ma-agents calculate the total water required by si-agents and ri-agents
    - ma-agents report to coor-agent the pump station irrigation requirements ▪ coor-agent:
    - coor-agent verifies ma-agents reports. - coor-agent compares the total district
    supply available water (TDSAW) and the total water requirements (TDWR) - If available
    water amount >= requested water amounts for irrigation requirements, then: • coor-agent
    sends irrigation authorization to ma-agent. • ma-agents report irrigation scheduling
    approbation to si-agents and ri-agents. • ma-agents report vector maps to the
    web-server application. • si-agents and ri-agents start irrigation activities
    (irrigation_flag = True). - If available water amount < requested water amounts
    for irrigation requirements, then: • coor-agent sends stop irrigation message
    and requests irrigation negotiaton protocol to ma-agents • ma-agents performs
    the irrigation negotiation protocol. • ma-agents report the new permissible irrigation
    amounts to si-agents and ri-agents. • ma-agent reports vector maps to web-server
    application. • si-agents and ri-agents start irrigation activities (irrigation_flag
    = True). Table 8. Communication protocol using Message Queue Telemetry Transport
    (MQTT). Transmitter Receiver Topic Message Action Coor source Crd/Sc “Lv” Water
    level request Source coor Sc/Crd “Lv:source_level” Water level response Coor ma
    Crd/PmS/Station “Init” Process start request Ma coor PmS/Station/Crd “Rp:water
    requirements” Water requirements response. Ma ri and si PmS/Station/Ag “Rp:date”
    Irr. agents prescription request ri and si ma Ag/station/Block_n/code/PmS “Rp;code;prescription;
    stress coeficient; crop type; sowing date; hour; date” Irr. agents prescription
    response Coor ma Crd/Station/PmS “Irr; Amount”/ ”Irr:Neg;available water” Authorization
    of requested prescription / irrigation authorization with negotiation request
    Ma ri and si PmS/Station/Ag “Irr;Amount”/ “Irrig:Neg;new prescription” Authorization
    of requested prescription / irrigation authorization with new prescription Note:
    coordinator-agent (coor, Crd), master-agent (ma, PmS), real irrigation-agent (ri,
    Ag), virtual irrigation-agent (si, Ag), source-agent (source, Sc). Topics: Origin/
    Specific Origin /Destination/ Specific Destination. Messages: action: message_1;
    message_2… message_n. Actions: start (Init), report (Rp), Irrigation (Irr), Level
    (Lv). 3. Results and discussions 3.1. Real irrigation agents In the IIoTPIS, four
    real intelligent irrigation systems (ri-agents) were implemented, as explained
    by Jiménez et al. (2020b). Real intelligent agents are developed as the integration
    of the measurement system (MS), the application system (AS) and the central station
    (CS). Up to nine sensor nodes could be connected to the central station in a mesh
    network, but the amount of sensor nodes installed depends on the number of management
    zones. Also, several sensors could be installed in the same management zone for
    the management of average irrigation amounts. In this project, each of the ri-agents
    operates on two solenoid valves and a single sensor node. In future research,
    management zones will be included in the calculations. Additionally, the ri-agents
    incorporate in the central station the Mosquitto protocol implemented by MQ Telemetry
    Transport - (MQTT), which is used in IoT applications. Fig. 6 shows one of the
    ri-agents installed in the field, including the sensor station and the irrigation
    station. In the fields where the ri-agents are implemented, there must be internet
    connectivity. Download : Download high-res image (590KB) Download : Download full-size
    image Fig. 6. Real intelligent irrigation systems (ri-agent) of the IIoTPIS implemented
    in the field: (a) irrigation station and (b) sensor station. Source: Author. 3.2.
    IIoTPIS software application The Intelligent IoT Precision Irrigation System (IIoTPIS)
    software was developed using PythonTM3, NetLogo 6.0 for the implementation of
    the agent-based model and AquaCrop for crop simulation. The IIoTPIS software was
    designed with two operation modes, with and without a graphical interface. In
    the first mode, with a graphical interface, all the software procedures can be
    executed and verified step by step. In the second operation mode, the execution
    is automatic and transparent for the user, that is, at certain hours of the day,
    procedures are carried out automatically to achieve compliance with the actions
    of the designed system. The graphical interface operation mode was developed in
    PyQt5 (Summerfield, 2008). The Initial Configuration and Irrigation Programming
    - IoT- Negotiation tabs were implemented. Fig. 7 shows the Initial Configuration
    tab of the IIoTPIS. Through this tab, the sowing parameters are assigned to virtual
    field agents, and irrigation units to simulate are selected. The date interval
    is determined to make the random assignment of crops, sowing dates, and irrigation
    prescription model for the simulation of the batches supervised by the virtual
    irrigation agents, in addition to download and update data from weather stations.
    The IIoTPIS application allows simulating and prescribing irrigation until the
    current day with the parameters stored in the system (Daily Crop and Irrigation
    Simulation) or starting a complete simulation from the sowing day (Full Seasonal
    Crop and Irrigation Simulation). Download : Download high-res image (395KB) Download
    : Download full-size image Fig. 7. Smart precision irrigation system based on
    IoT - Initial Configuration. Source: Author. Fig. 8 shows the Irrigation Scheduling
    - IoT - Negotiation tab. The water available to apply in the irrigation district
    is entered. This information is consulted and sent by the source-agent to the
    coor-agent using the Mosquitto communication protocol. With the Irrigation Scheduling
    option, the IIoTPIS tasks can be executed step by step, so that the processing
    and results of each system operation can be verified. The procedures that allow
    carrying out this option are: Source water level publication; Prescription report
    request- from each real and virtual irrigation agent; Generation of negotitation
    polygons, which are read and used by NetLogo for the conflict resolution procedure
    in the irrigation distribution; Start negotiation, performed by the MBA developed
    in NetLogo and Subsequently, authorizations and prescriptions are sent to both
    real and virtual irrigation agents, and finally Upload polygons to the Web server.
    Download : Download high-res image (395KB) Download : Download full-size image
    Fig. 8. Smart precision irrigation system based on IoT. Source: Author. 3.3. Performance
    evaluation of irrigation agents To evaluate the performance of the IIoTPIS, the
    irrigation agents were simulated in all the fields belonging to the eleven irrigation
    units of Usochicamocha for two scenarios. The first scenario was non-negotiation,
    when there were enough water resources for the irrigation agents requirements.
    The irrigation scheduling performance with VWC, ET0 and BETTER irrigation scheduling
    methods was compared with the current irrigation scheduled by farmers (TRA). Fig.
    9 shows the behavior of the average amount of water applied to each crop during
    the season, considering the plant requirements, according to the root depth, type
    of crop and its growth period using the ET0, VWC, BETTER and TRA prescriptions.
    This graph evidences that the soil water content values increase according to
    the effective root depth up to certain moments specified by the cultivation model
    in Aquacrop. The values obtained were within the limits of and , where is the
    effective root depth for VWC, ET0 and BETTER methods. These results show that
    the agents carried out the irrigation prescriptions according to the MAD and the
    root depth model defined by Raes et al. (2018). Download : Download high-res image
    (626KB) Download : Download full-size image Fig. 9. Amount of water applied to
    each crop during the season for simulated crops in IIoTPIS. FC is field capacity,
    PWP is permanent wilting point and SAT is saturation point. Non-negotiation scenario.
    Source: Author. In Fig. 9, it is evidenced that when using ET0, VWC and BETTER
    methods, water amounts applied allow keeping the volumetric water content close
    to FC. ET0 and VWC methods were used in the BETTER prescription algorithm, which
    ensures that, if there is enough water in the dams, the agents using these three
    types of prescriptions meet the objective to maintain soil moisture close to the
    FC up to the permissible level of deficit according to the type of crop. This
    level corresponds to 25% of the total available water (TAW) for onion and potato,
    and 50% of the TAW for the other crops used in the simulation. Within the bulb
    onion model specifications and according to the management criteria of this crop
    in the region, it was established that irrigation should be suspended when the
    crop approaches to maturity to allow the leaves to dry out and avoid a second
    spurt of root growth. Currently USOCHICAMOCHA farmers do not use a technified
    system for the irrigation prescription, instead the criterion is to apply daily
    one hour of irrigation per crop area with two-day intervals of application. When
    the rainfall is greater than 6 mm, the new application of irrigation is carried
    out two days after the rain event (Jimenez et al., 2020b). It can be observed
    in Fig. 9 that the TRA irrigation scheduling maintained the soils in saturation
    level for all the crops. This agrees with the wrong criteria of farmers who assume
    that the optimal irrigation is to keep the cultivated field flooded, thus wasting
    water and spending more money. The BETTER irrigation prescription method allowed
    the selection of the prescription with the best yield and WUE at the end of the
    harvest. Fig. 10 shows the prediction of the yield at the end of the harvest for
    the non-negotiation scenario, which is determined daily by each irrigation agent,
    for the prescriptions based on ET0, VWC, TRA and BETTER. The prediction values
    of the yield at the end of the harvest increased in all types of crops. The BETTER
    method allowed the intelligent agent to look for the option that in the future
    will improve the results in the harvest, using predictions when applying the amounts
    of irrigation prescribed by ET0 and VWC methods. Although the trends in the yield
    prediction curves are similar between the prescription methods, on some days the
    yield was higher with the ET0 prescription and in others with the VWC prescription.
    There are also cases where the prediction was the same for the two prescription
    methods, with different amounts of water, therefore, the one that allowed obtaining
    greater efficiency in the water use was selected by the BETTER algorithm, that
    is, the value of the yield per applied water. Using the traditional prescription
    (TRA) average yields were similar to the others but using more water amounts in
    irrigation. VWC method using soil moisture sensors method had better performance
    than the ET0 method using hydric balance equation, whereby it was used in the
    BETTER irrigation prescription during the crop development, but yields were similar
    at the final of the crops season. The TRA irrigation schedule scheme for barley
    shows a reduction in yield that was not found in the ET0, VWC and BETTER irrigation
    scheduling. The reason is that there was overirrigation in those fields, which
    affected yield overcomes. Results when there is enough water for the distribution
    on the field demonstrate that intelligent irrigation agents are defining enough
    water requirements, which means a better water use efficiency with respect to
    the traditional irrigation scheduling in the study region. Download : Download
    high-res image (398KB) Download : Download full-size image Fig. 10. Daily prediction
    of simulated crop yield in IIoTPIS with traditional (TRA), soil sensors (VWC),
    evapotranspiration (ET0) and BETTER prescriptions. Non-Negotiation scenario. Source:
    Author. The second scenario was implemented with negotiation. In some dates, water
    resources in the dam were lower than those requested by all the irrigation agents.
    The results in this scenario show that the amount of water available in the dam
    was not enough to achieve that the average of the water applied to each crop during
    its growth remains close to FC (Fig. 11). In addition, the ET0 method prescribed
    more water than the VWC method with negotiation, but the BETTER method selected
    the VWC result to make an efficient management of the water resource, by applying
    less water resource in the field. According to Fig. 12, the IIoTPIS sought to
    maintain the best yield during crop growth using the prescription with the least
    amount of water resource, according to the negotiation result. Although less water
    resource was applied, under these conditions, the average yield for the crops
    studied using irrigation prescriptions with technical concepts decreased a little
    with respect to the yields with sufficient water availability. In Fig. 11, Fig.
    12 TRA prescription was not used because irrigation agents can not apply requested
    traditional water amounts if there is not enough water in dams. Download : Download
    high-res image (582KB) Download : Download full-size image Fig. 11. Amount of
    water applied to each crop during the season for simulated crops in IIoTPIS. FC
    is field capacity, PWP is permanent wilting point. Scenario with negotiation.
    Source: Author. Download : Download high-res image (355KB) Download : Download
    full-size image Fig. 12. Daily prediction of simulated crop yield in IIoTPIS with
    VWC prescription. Scenario with negotiation. Source: Author. Crop yields not only
    depend on irrigation. In this research, standard management practices defined
    in AquaCrop were used in the crop simulations. Other aspects such as salt washing
    and fertilization have not been considered in the model. Research should continue
    in order to improve the models including specific aspects related to soil, water,
    plant and crop management parameters, which were not considered in this paper.
    3.4. Web application The Irrigation District Multi-Agent System web application
    was implemented, which can be accessed on internet through the following link:
    http://104.248.53.140:8002/. Vector layers of parameters obtained from the interpolation
    of data from soil samples of the irrigation district can be viewed in the web
    application. These parameters are: percentage of clay, percentage of silt, percentage
    of sand, field capacity and permanent wilting point, which are considered invariant
    in time and are used for characterizing the district soils. Other vector layers
    that can be displayed in the application are the type of crop planted, the soil
    water stress coefficient and irrigation prescriptions. These three vector maps
    change according to the real conditions of cultivated fields and are monitored
    by the ri-agents and those simulated by the si-agen (Fig. 13). Download : Download
    high-res image (421KB) Download : Download full-size image Fig. 13. Web Application
    - IIoTPIS: Maps Options. Source: Author. By selecting any of the buttons from
    the main menu of the application, the corresponding vector layer is displayed
    on the screen. By pressing any of the polygons of the vector layer, specific information
    of the batch can be displayed, for example, the irrigation prescriptions for the
    selected field (Fig. 14a) or the field capacity vector layer (Fig. 14b). Download
    : Download high-res image (2MB) Download : Download full-size image Fig. 14. Web
    application-IIoTPIS: (a) Irrigation prescriptions layer and (b) field capacity
    layer. Date: January 18 of 2021. Source: Author. On the polygon maps, the irrigation
    agents can be visualized (Fig. 15a). A color and symbol notation was given according
    to the specific behavior of the irrigation agents implemented in the application
    (Fig. 15b). Each irrigation agent allows the visualization of the field code,
    cultivated area, if it is collaborative or non-collaborative, virtual or real,
    the satisfaction level and the model used to perform the irrigation prescription,
    VWC for soil sensor measurements, ET0 when using the water balance equation and
    BETTER in the case of the intelligent irrigation option. Download : Download high-res
    image (475KB) Download : Download full-size image Fig. 15. Web application -IIoTPIS:
    (a) Irrigation agents, and (b) symbology of real and virtual irrigation agents.
    Source: Author. To the best of the authors knowledge, there are no systems as
    the one presented in this document installed in Colombia, although IoT and automatic
    systems with some similarities to the one presented in this paper are installed
    in Argentina, Chile, Spain, Portugal, United States, Sweden, Israel, and Australia.
    In recent years, some commercial systems, such as Bee2Crop (FutureCompta, Algés,
    Portugal), NetBeat (Netafim, Kibbutz Hatzerim, Israel), AgSense (Valmont Industries,
    Inc. Valley, USA), CropX (CropX inc, Tel Aviv, Israel), GroGuru (Kilimo, Memphis,
    Tennessee, USA), WiseConn (Wiseconn Engineering, Fresno, CA, USA), Irriot (IRRIOT,
    Djursholm, Sweden), Libelium (Libelium Comunicaciones Distribuidas S.L., Zaragoza,
    Spain), AquaSpay (AquaSpy Inc., San Diego, CA, USA) and others have become available.
    These systems are expensive for their implementation by small or medium farmers,
    are closed solutions (proprietary software and hardware) and their maintenance
    is complex. The irrigation agents of IIoTPIS were designed with available electronic
    components in markets, thus allowing the development of a new technological tool
    for local producers and scientists. Additionally, irrigation agents of IIoTPIS
    allow the irrigation scheduling using proactive reasoning instead of reactive
    reasoning as is common in automatic irrigation systems. Finally, the integration
    of several irrigation agents in a multi-agent system and its capabilities of negotiation
    for irrigation scheduling in an irrigation district is a contribution to the intelligent
    irrigation management at micro-level (farm) and macro-level (irrigation district).
    4. Conclusions This work presented the implementation of an irrigation management
    system in the USOCHICAMOCHA irrigation district, located in Boyacá Department,
    Colombia. Several technologies were integrated in this development as a response
    to the technological demands from local and regional farmers. The main advantages
    of the system proposed are the irrigation scheduling mechanism at the local (field)
    and global (irrigation district) levels and the autonomous reasoning of the intelligent
    agents for prescribing irrigation and the use of plant, soil, and environment
    sensors. These characteristics could result in water and energy savings. Additionally,
    the system allows implementing different strategies of controlled irrigation as
    restriction, deficit irrigation or zone management, when there are several sensor
    and actuator nodes. The system can be adapted to any crop, using any irrigation
    methodology. Experiments in two scenarios show that the system developed is a
    useful tool for supervising and supporting irrigation decisions. The intelligent
    agents can program the irrigation schedule based on the crop water requirements
    and obtain feedback about soil, plant and environmental conditions, to evaluate
    the performance of the irrigation application using crop modelling. The use of
    the proposed system helps the user to monitor the temporal evolution of ETc, soil
    moisture, temperature, relative humidity, and canopy temperature, according to
    the desired irrigation schedule. Even though the system was designed with the
    conditions of Alto Chicamocha and Firavitoba irrigation district, this development
    can be implemented in other places where a precise monitoring and management of
    the irrigation process is required. Future works will include comparative results
    related to crop management, energy, salt washing, fertilization and other soil,
    plant, environmental variables, and management practices that were no used in
    this paper. Additionally, calibration of AquaCrop models will be performed for
    improving the response of the system to site-specific conditions where it is implemented.
    Funding This research was funded by Minciencias and the Department of Boyacá -
    Colombia through the PhD scholarship program No. 733 – 2015. Thesis name: Intelligent
    Agent-Based model to support irrigation management in agricultural crops – Cod:
    46620 – Universidad Nacional de Colombia. This research also was funded by the
    Universidad de los Llanos (DGI) - Colombia, with the project: Intelligent system
    for data acquisition and irrigation prescription in agricultural crops through
    wireless sensor networks, IoT and artificial intelligence – Cod: C09-F02-010–2020.
    CRediT authorship contribution statement Andrés-F Jiménez: Conceptualization,
    Methodology, Visualization. Pedro-F Cárdenas: Conceptualization, Methodology,
    Visualization. Fabián Jiménez: Conceptualization, Methodology, Visualization.
    Declaration of Competing Interest The authors declare that they have no known
    competing financial interests or personal relationships that could have appeared
    to influence the work reported in this paper. Acknowledgements A.F. Jiménez expresses
    his gratitude to the Department of Boyacá and Minciencias – Colombia for the support
    through the scholarship program No. 733 - 2015 for the Ph.D. program at Universidad
    Nacional de Colombia and to Universidad de los Llanos. Pedro Cardenas expesses
    his gratitude to MinCiencias - Colombia for the abroad Ph.D. scholarship – 2007.
    F.R. Jiménez expresses his gratitude to Universidad Pedagogica y Tecnologica de
    Colombia for allowing the development of this work as a result of a research proposal
    for the teaching promotion. References Abioye et al., 2020 E.A. Abioye, M.S.Z.
    Abidin, M.S.A. Mahmud, S. Buyamin, M.H.I. Ishak, M.K.I.A. Rahman, A.O. Otuoze,
    P. Onotu, M.S.A. Ramli A review on monitoring and advanced control strategies
    for precision irrigation Comp. Electr. Agric., 173 (2020), p. 105441, 10.1016/j.compag.2020.105441
    View PDFView articleView in ScopusGoogle Scholar Adeyemi et al., 2017 O. Adeyemi,
    I. Grove, S. Peets, T. Norton Advanced monitoring and management systems for improving
    sustainability in precision irrigation Sustainability, 9 (3) (2017), p. 353, 10.3390/su9030353
    View in ScopusGoogle Scholar Adeyemi et al., 2018 O. Adeyemi, I. Grove, S. Peets,
    Y. Domun, T. Norton Dynamic neural network modelling of soil moisture content
    for predictive irrigation scheduling Sensors, 18 (10) (2018), p. 3408, 10.3390/s18103408
    View in ScopusGoogle Scholar Akhbari and Grigg, 2013 M. Akhbari, N. Grigg A framework
    for an agent-based model to manage water resources conflicts Water Resour. Manage.,
    27 (11) (2013), pp. 4039-4052, 10.1007/s11269-013-0394-0 View in ScopusGoogle
    Scholar Allen et al., 1998 R.G. Allen, L.S. Pereira, D. Raes, M. Smith Crop evapotranspiration-Guidelines
    for computing crop water requirements-FAO Irrigation and drainage paper 56 Fao,
    Rome, 300 (9) (1998), p. D05109 Google Scholar Allen, 2006 R.G. Allen Evapotranspiración
    del cultivo: guías para la determinación de los requerimientos de agua de los
    cultivos Food & Agriculture Org, Vol. 56 (2006) Google Scholar Ashrafzadeh et
    al., 2020 A. Ashrafzadeh, O. Kişi, P. Aghelpour, S. Biazar, M. Masouleh Comparative
    study of time series models, support vector machines, and GMDH in forecasting
    long-term evapotranspiration rates in northern Iran J. Irrig. and Drain. Eng.,
    146 (6) (2020), p. 04020010 View in ScopusGoogle Scholar Alsukni et al., 2019
    E. Alsukni, O. Arabeyyat, M. Awadallah, L. Alsamarraie, I. Abu-Doush, M. Al-Betar
    Multiple-reservoir scheduling using β-hill climbing algorithm J. Int. Sys., 28
    (4) (2019), pp. 559-570, 10.1515/jisys-2017-0159 Google Scholar Barreteau et al.,
    2004 O. Barreteau, F. Bousquet, C. Millier, J. Weber Suitability of Multi-Agent
    Simulations to study irrigated system viability: application to case studies in
    the Senegal River Valley Agric. Syst., 80 (3) (2004), pp. 255-275, 10.1016/j.agsy.2003.07.005
    View PDFView articleView in ScopusGoogle Scholar Beddington, 2010 J. Beddington
    Food security: contributions from science to a new and greener revolution Philosophical
    T. Roy. Soc. Biol. Sci., 365 (1537) (2010), pp. 61-71, 10.1098/rstb.2009.0201
    View in ScopusGoogle Scholar Belaqziz et al., 2014 S. Belaqziz, S. Mangiarotti,
    M. Le Page, S. Khabba, S. Er-Raki, T. Agouti, L. Drapeau, M.H. Kharrou, M. El
    Adnani, L. Jarlan Irrigation scheduling of a classical gravity network based on
    the Covariance Matrix Adaptation-Evolutionary Strategy algorithm Comput. Electron.
    Agric., 102 (2014), pp. 64-72, 10.1016/j.compag.2014.01.006 View PDFView articleView
    in ScopusGoogle Scholar Bratman, 1987 M. Bratman Intention, plans, and practical
    reason, Vol. 10, Harvard University Press, Cambridge, MA (1987) Google Scholar
    Capraro et al., 2018 F. Capraro, S. Tosetti, F. Rossomando, V. Mut, F. Vita Serman
    Web-based system for the remote monitoring and management of precision irrigation:
    A case study in an arid region of Argentina Sensors, 18 (11) (2018), p. 3847,
    10.3390/s18113847 View in ScopusGoogle Scholar Cervenka et al., 2005 R. Cervenka,
    I. Trencansky, M. Calisti Modeling social aspects of multi-agent systems: The
    AML approach, Springer, Berlin, Heidelberg (2005), pp. 28-39 Google Scholar Cely,
    2010 G. Cely Determinación de parametros de riego para el cultivo cebolla de bulbo
    en el distrito de riego del alto chicamocha Universidad Nacional de Colombia,
    Bogotá (2010) M.Phil. thesis Google Scholar Cong et al., 2017 D. Cong, H. Nguyen,
    J. Ascough, H. Maier, G. Dandy, A. Andales Optimization of irrigation scheduling
    using ant colony algorithms and an advanced cropping system model Environ. Modell.
    Software, 97 (2017), pp. 32-45, 10.1016/j.envsoft.2017.07.002 Google Scholar Datta
    et al., 2017 Datta, S., Taghvaeian, S., Stivers, J., 2017. Understanding soil
    water content and thresholds for irrigation management. Oklahoma Cooperative Extension
    Service. BAE-1537. Google Scholar Django Software Foundation, 2019 Django Software
    Foundation. 2019. Django. Retrieved from https://djangoproject.com. Google Scholar
    Edwards et al., 2005 M. Edwards, N. Ferrand, F. Goreaud, S. Huet The relevance
    of aggregating a water consumption model cannot be disconnected from the choice
    of information available on the resource Simul. Model Pract. Th., 13 (4) (2005),
    pp. 287-307, 10.1016/j.simpat.2004.11.008 View PDFView articleView in ScopusGoogle
    Scholar Farooq et al., 2020 M. Farooq, S. Riaz, A. Abid, T. Umer, Y. Zikria Role
    of IoT technology in agriculture: A systematic literature review Electronics,
    9 (2) (2020), p. 319, 10.3390/electronics9020319 View in ScopusGoogle Scholar
    Garcia et al., 2003 M. Garcia, D. Raes, S. Jacobsen Evapotranspiration analysis
    and irrigation requirements of quinoa (Chenopodium quinoa) in the Bolivian highlands
    Agric. Water Manag., 60 (2) (2003), pp. 119-134, 10.1016/S0378-3774(02)00162-2
    View PDFView articleView in ScopusGoogle Scholar Gonçalves et al., 2020 J.M. Gonçalves,
    S. Ferreira, M. Nunes, R. Eugénio, P. Amador, O. Filipe, I.M. Duarte, M. Teixeira,
    T. Vasconcelos, F. Oliveira, M. Gonçalves, H. Damásio Developing Irrigation Management
    at District Scale Based on Water Monitoring: Study on Lis Valley, Portugal AgriEngineering,
    2 (1) (2020), pp. 78-95, 10.3390/agriengineering2010006 View in ScopusGoogle Scholar
    Han et al., 2019 S. Han, Y. Yang, H. Li, Y. Yang, J. Wang, J. Cao Determination
    of crop water use and coefficient in drip-irrigated cotton fields in arid regions
    Field Crops Res., 236 (2019), pp. 85-95, 10.1016/j.fcr.2019.03.008 View PDFView
    articleGoogle Scholar Huber et al., 2019 L. Huber, N. Bahro, G. Leitinger, U.
    Tappeiner, U. Strasser Agent-Based Modelling of a Coupled Water Demand and Supply
    System at the Catchment Scale Sustainability, 11 (21) (2019), p. 6178, 10.3390/su11216178
    View in ScopusGoogle Scholar Jimenez et al., 2020a A.-F. Jimenez, P.-F. Cardenas,
    A. Canales, F. Jimenez, A. Portacio A survey on intelligent agents and multi-agents
    for irrigation scheduling Comput. Electron. Agric., 176 (2020), p. 105474, 10.1016/j.compag.2020.105474
    View PDFView articleView in ScopusGoogle Scholar Jimenez et al., 2020b A.-F. Jimenez,
    P.-F. Cardenas, F. Jimenez, A. Ruiz-Canales, A. López A cyber-physical intelligent
    agent for irrigation scheduling in horticultural crops Comput. Electron. Agric.,
    178 (2020), p. 105777, 10.1016/j.compag.2020.105777 View PDFView articleView in
    ScopusGoogle Scholar Jimenez et al., 2020c A.F. Jimenez, B.V. Ortiz, L. Bondesan,
    G. Morata, D. Damianidis Long Short-Term Memory Neural Network for irrigation
    management: a case study from Southern Alabama, USA Precis. Agric. (2020), pp.
    1-18 View in ScopusGoogle Scholar Jiménez et al., 2021 A.-F. Jiménez, P.-F. Cárdenas,
    F. Jiménez Smart water management approach for resource allocation in High-Scale
    irrigation systems Agric. Water Manag., 256 (2021), p. 107088, 10.1016/j.agwat.2021.107088
    View PDFView articleView in ScopusGoogle Scholar Kang et al., 2017 S. Kang, X.
    Hao, T. Du, L. Tong, X. Su, H. Lu, X. Li, Z. Huo, S. Li, R. Ding Improving agricultural
    water productivity to ensure food security in China under changing environment:
    From research to practice Agric. Water Manag., 179 (2017), pp. 5-17, 10.1016/j.agwat.2016.05.007
    View PDFView articleView in ScopusGoogle Scholar Kelly and Foster, 2021 T.D. Kelly,
    T. Foster AquaCrop-OSPy: Bridging the gap between research and practice in crop-water
    modeling Agric. Water Manage., Elsevier, 254 (2021), p. 106976, 10.1016/j.agwat.2021.106976
    View PDFView articleView in ScopusGoogle Scholar Koech and Langat, 2018 R. Koech,
    P. Langat Improving irrigation water use efficiency: A review of advances, challenges
    and opportunities in the Australian context Water, 10 (12) (2018), p. 1771, 10.3390/w10121771
    View in ScopusGoogle Scholar Kovalchuk et al., 2018 V. Kovalchuk, O. Demchuk,
    D. Demchuk, O. Voitovich Data mining for a model of irrigation control using weather
    web-services International Conference on Computer Science, Engineering and Education
    Applications, Springer, Cham (2018), pp. 133-143 Google Scholar Levidow et al.,
    2014 L. Levidow, D. Zaccaria, R. Maia, E. Vivas, M. Todorovic, A. Scardigno Improving
    water-efficient irrigation: Prospects and difficulties of innovative practices
    Agric. Water Manage., 146 (2014), pp. 84-94, 10.1016/j.agwat.2014.07.012 View
    PDFView articleView in ScopusGoogle Scholar Li and Yeh, 2004 X. Li, A.G. Yeh Multitemporal
    SAR images for monitoring cultivation systems using case-based reasoning Remote
    Sens. Environ., 90 (4) (2004), pp. 524-534 View PDFView articleView in ScopusGoogle
    Scholar Liang et al., 2020 Z. Liang, X. Liu, J. Xiong, J. Xiao Water Allocation
    and Integrative Management of Precision Irrigation: A Systematic Review Water,
    12 (11) (2020), p. 3135, 10.3390/w12113135 Google Scholar Martínez et al., 2014
    E. Martínez, L. Rodríguez, N. Medina Estudio de factibilidad de una planta empacadora
    (packing house) para cebolla de bulbo (Allium cepa L.) en el Distrito de Riego
    del Alto Chicamocha (Boyacá) Revista Colombiana de Ciencias Hortícolas, 8 (2)
    (2014), pp. 287-301 https://doi.org/10.17584/rcch.2014v8i2.3221 CrossRefView in
    ScopusGoogle Scholar Mccarthy et al., 2014 A. Mccarthy, N. Hancock, S. Raine Simulation
    of irrigation control strategies for cotton using model predictive control within
    the VARIwise simulation framework Comput. Electron. Agric., 101 (2014), pp. 135-147,
    10.1016/j.compag.2013.12.004 View PDFView articleView in ScopusGoogle Scholar
    Mishra and Kertesz, 2020 B. Mishra, A. Kertesz The use of MQTT in M2M and IoT
    systems: A survey IEEE Access, 8 (2020), pp. 201071-201086 CrossRefView in ScopusGoogle
    Scholar Wilensky, 1999 U. Wilensky NetLogo Center for Connected Learning and Computer-Based
    Modeling, Northwestern University. Evanston, IL (1999) Google Scholar Nižetić
    et al., 2020 S. Nižetić, P. Šolić, D. López-de-Ipiña González-de-Artaza, L. Patrono
    Internet of Things (IoT): Opportunities, issues and challenges towards a smart
    and sustainable future J. Clean. Prod., 274 (2020), p. 122877, 10.1016/j.jclepro.2020.122877
    View PDFView articleView in ScopusGoogle Scholar Perea et al., 2021 R. Perea,
    E. Poyato, J. Díaz Forecasting of applied irrigation depths at farm level for
    energy tariff periods using Coactive neuro-genetic fuzzy system Agric. Water Manage.,
    256 (2021), p. 107068 Google Scholar Perez, 2013 Perez, M., 2013. Modelling the
    impacts of in-field soil and irrigation variability on onion yield. [Master dissertation,
    Cranfield University]. URI: http://dspace.lib.cranfield.ac.uk/handle/1826/8588.
    Google Scholar Qureshi et al., 2011 M. Qureshi, R. Grafton, M. Kirby, M. Hanjra
    Understanding irrigation water use efficiency at different scales for better policy
    reform: A case study of the Murray-Darling Basin Australia. Water Policy, 2011
    (13) (2011), pp. 1-17, 10.2166/wp.2010.063 View in ScopusGoogle Scholar Raes et
    al., 2009 D. Raes, P. Steduto, T.C. Hsiao, E. Fereres Aquacrop reference manual
    FAO, Rome, Italy (2009), p. 218 Google Scholar Raes et al., 2018 Raes, D., Steduto,
    P., HSIAO, T.C., & Fereres, E., 2018. Chapter 1: Fao crop-water productivity model
    to simulate yield response to water: Aquacrop: version 6.0-6.1: reference manual.
    Rome: Fao, 2018b. 19p. Google Scholar Rafea et al., 2003 A. Rafea, H. Hassen,
    M. Hazman Automatic knowledge acquisition tool for irrigation and fertilization
    expert systems Expert Syst. Appl., 24 (1) (2003), pp. 49-57, 10.1016/S0957-4174(02)00082-9
    View PDFView articleView in ScopusGoogle Scholar Shafi et al., 2020 Shafi, U.,
    Mumtaz, R., García-Nieto, J., Hassan, S., Zaidi, S., Iqbal, N., 2020. Precision
    agriculture techniques and practices: from considerations to applications. Sensors
    17, 1. Article number 3796. https://doi.org/10.3390/s19173796. Google Scholar
    Sinclair et al., 1984 T.R. Sinclair, C.B. Tanner, J.M. Bennett Water-use efficiency
    in crop production Bioscience, 34 (1) (1984), pp. 36-40 CrossRefGoogle Scholar
    Smith and Steduto, 2012 Smith, M., Steduto, P., 2012. Yield response to water:
    the original FAO water production function. FAO Irrigation and Drainage Paper,
    66, 6–13. Google Scholar Smith et al., 2010 R. Smith, J. Baillie, A. Mc Carthy,
    S. Raine, C. Baillie Review of Precision Irrigation Technologies and Their Application
    Australia. Publication 1003017/1, NCEA. University of Southern Queensland. Toowoomba
    (2010) Google Scholar Summerfield, 2008 M. Summerfield Rapid GUI programming with
    Python and Qt : the definitive guide to PyQt programming Prentice Hall, Upper
    Saddle River, NJ (2008) Google Scholar Steduto et al., 2009 P. Steduto, T.C. Hsiao,
    D. Raes, E. Fereres AquaCrop—The FAO Crop Model to Simulate Yield Response to
    Water: I. Concepts and Underlying Principles Agron.j., 101 (3) (2009), pp. 426-437
    CrossRefGoogle Scholar Steduto et al., 2012 Steduto, P., Hsiao, T.C., Fereres,
    E., Raes, D. 2012. Crop yield response to water. Irrigation and Drainage Paper
    Nr. 66, FAO, Rome, Italy. 500 pages. Google Scholar Tamburino et al., 2020 L.
    Tamburino, G. Di Baldassarre, G. Vico Water management for irrigation, crop yield
    and social attitudes: a socio-agricultural agent-based model to explore a collective
    action problem Hydrol. Sci. J., 65 (11) (2020), pp. 1815-1829 CrossRefView in
    ScopusGoogle Scholar Talavera et al., 2017 J.M. Talavera, L.E. Tobón, J.A. Gómez,
    M.A. Culman, J.M. Aranda, D.T. Parra, L.A. Quiroz, A. Hoyos, L.E. Garreta Review
    of IoT applications in agro-industrial and environmental fields Comp. Electron.
    Agric., 142 (2017), pp. 283-297, 10.1016/j.compag.2017.09.015 View PDFView articleView
    in ScopusGoogle Scholar Talaviya et al., 2020 T. Talaviya, D. Shah, N. Patel,
    H. Yagnik, M. Shah Implementation of artificial intelligence in agriculture for
    optimisation of irrigation and application of pesticides and herbicides Artif.
    Intell. Agric., 4 (2020), pp. 58-73, 10.1016/j.aiia.2020.04.002 View PDFView articleView
    in ScopusGoogle Scholar Van Rossum and Drake, 2009 Van Rossum, G., & Drake, F.
    L. 2009. Python 3 Reference Manual. Scotts Valley, CA: CreateSpace. Google Scholar
    Von Rosing et al., 2015 Von Rosing, M., White, S., Cummins, F., & de Man, H.,
    2015. Business Process Model and Notation-BPMN. Google Scholar Weather Spark,
    2021 Weather Spark., 2021. Average Weather in Nobsa, Colombia States. https://weatherspark.com/y/25267/Average-Weather-in-Nobsa-Colombia-Year-Round.
    (last accessed 01/12/2021). Google Scholar Weiss, 2013 Weiss, G. (Ed.). 2013.
    Multiagent systems. MIT press. Weller, U., Leuther, F., Schlüter, S., Vogel, H.J.
    Quantitative analysis of water infiltration in soil cores using x-ray. Vadose
    Zone J., 17. Google Scholar Wilensky and Rand, 2015 Wilensky, U., & Rand, W.,
    2015. An introduction to agent-based modeling: modeling natural, social, and engineered
    complex systems with NetLogo. Mit Press. Google Scholar Zacepins et al., 2012
    Zacepins, A., Stalidzans, E., Meitalovs, J., 2012. Application of information
    technologies in precision agriculture. In: Proceedings of the 13th International
    Conference on Precision Agriculture (ICPA 2012). Google Scholar Zamora-Izquierdo
    et al., 2019 Zamora-Izquierdo, M., Santa, J., Martínez, J., Martínez, V., & Skarmeta,
    A., 2019. Smart farming IoT platform based on edge and cloud computing. Biosyst.
    Eng., 177, 4–17. https://doi.org/10.1016/j.biosystemseng.2018.10.014. Google Scholar
    Zhang and Guo, 2018 C. Zhang, P. Guo FLFP: A fuzzy linear fractional programming
    approach with double-sided fuzziness for optimal irrigation water allocation Agric.
    Water Manage., 199 (2018), pp. 105-119, 10.1016/j.agwat.2017.12.013 View PDFView
    articleGoogle Scholar Cited by (17) New approach to monitoring a wastewater irrigation
    system controlled by the artificial neural network (ANN) 2023, Groundwater for
    Sustainable Development Show abstract Artificial intelligence applications in
    the agrifood sectors 2023, Journal of Agriculture and Food Research Show abstract
    Water management towards sustainable food industry 2023, Sustainable Development
    and Pathways for Food Ecosystems: Integration and Synergies Show abstract Sustainable
    materials and infrastructures for the food industry 2023, Sustainable Development
    and Pathways for Food Ecosystems: Integration and Synergies Show abstract A review
    on multirobot systems in agriculture 2022, Computers and Electronics in Agriculture
    Citation Excerpt : It is difficult to estimate the condition of irrigation systems
    because of the need to monitor several factors, including the quality, amount,
    and location of water. Some irrigation applications require remote sensing over
    a wide area within a short time (Jimenez et al., 2020; Jiménez et al., 2022).
    Therefore, research is being actively conducted to measure water systems for irrigation
    by attaching sensors to UAVs. Show abstract An IoT-based maintenance framework
    for irrigation and drainage water management system at regional scale 2022, IFAC-PapersOnLine
    Show abstract View all citing articles on Scopus View Abstract © 2021 Elsevier
    B.V. All rights reserved. Recommended articles Modeling crop water consumption
    and water productivity in the middle reaches of Heihe River Basin Computers and
    Electronics in Agriculture, Volume 123, 2016, pp. 242-255 Jiang Li, …, Adebayo
    J. Adeloye View PDF Smart farming and water saving-based intelligent irrigation
    system implementation using the Internet of Things Recent Trends in Computational
    Intelligence Enabled Research, 2021, pp. 339-354 Sagnick Biswas, …, Jyoti Sekhar
    Banerjee Artificial intelligence methods reliably predict crop evapotranspiration
    with different combinations of meteorological data for sugar beet in a semiarid
    area Agricultural Water Management, Volume 254, 2021, Article 106968 Sevim Seda
    Yamaç View PDF Show 3 more articles Article Metrics Citations Citation Indexes:
    16 Captures Readers: 98 View details About ScienceDirect Remote access Shopping
    cart Advertise Contact and support Terms and conditions Privacy policy Cookies
    are used by this site. Cookie settings | Your Privacy Choices All content on this
    site: Copyright © 2024 Elsevier B.V., its licensors, and contributors. All rights
    are reserved, including those for text and data mining, AI training, and similar
    technologies. For all open access content, the Creative Commons licensing terms
    apply."'
  inline_citation: (Jimenez et al., 2020a)
  journal: Computers and Electronics in Agriculture
  limitations: The paper does not provide a detailed analysis of the computational
    complexity and scalability of the proposed IIoTPIS system. It would be beneficial
    to include an assessment of the system's performance under different irrigation
    district sizes and crop conditions.
  relevance_evaluation: 'The paper by Jiménez et al. is highly relevant to the specific
    point of interest in the review outline as it directly addresses the integration
    of deployed machine learning models with other components of an automated irrigation
    management system, such as data preprocessing, decision-making, and control systems.


    The authors present a detailed description of the IIoTPIS system, including its
    architecture, communication protocols, and algorithms for optimizing irrigation
    schedules. They also provide experimental results demonstrating the effectiveness
    of the system in allocating water resources and improving crop yields. This research
    contributes to the growing body of knowledge on the use of machine learning and
    IoT technologies in precision irrigation management and is a valuable resource
    for researchers and practitioners in this field.'
  relevance_score: '0.95'
  relevance_score1: 0
  relevance_score2: 0
  title: Intelligent IoT-multiagent precision irrigation approach for improving water
    use efficiency in irrigation systems at farm and district scales
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  apa_citation: Raikar, M. M., & M, M. S. (2023). Fog Computing-Enabled Internet of
    Things for Resource Optimization. In R. Misra, R. Omer, M. Rajarajan, B. Veeravalli,
    N. Kesswani, & P. Mishra (Eds.), Machine Learning and Big Data Analytics (pp.
    329–339). Springer Proceedings in Mathematics & Statistics. https://doi.org/10.1007/978-3-031-15175-0_27
  authors:
  - Raikar M.M.
  - S M M.
  citation_count: '0'
  data_sources: Sensor data, agricultural data
  description: Internet of Things (IoT) has evolved and penetrated in different sectors
    such as healthcare, agriculture, manufacturing, transportation, and logistics.
    The IoT services are deployed in the cloud for accessing it virtually independent
    of location. The data-intensive IoT applications when deployed in the cloud have
    high response time. To overcome this challenge, the fog computing techniques is
    proposed to access the data from the sensors in real time. In this paper, the
    Fog-enabled IoT architecture for precision agriculture is presented. Precision
    agriculture is the usage of information technology to increase yield of crops
    and improve health of plants by ensuring accurate and controlled supply of nutrients.
    The sensors are deployed in the fields, and data is sent to the edge devices used
    for improving the produce. The different services available are automated irrigation
    and fertigation, recommendation by experts, decision support system, and protection
    from rodents. The farmers can subscribe to the service and make the best use.
    The advantage of Fog-enabled IoT is the reduction in round-trip time (RTT) compared
    to Cloud IoT architecture. The result demonstrates 40% reduction in RTT when Fog-enabled
    IoT architecture is used for different services.
  doi: 10.1007/978-3-031-15175-0_27
  explanation: This paper presents a Fog-enabled IoT architecture for precision agriculture,
    which reduces latency and improves resource optimization in agricultural practices.
    The proposed architecture leverages lightweight protocols, such as MQTT and CoAP,
    for data transmission between edge devices and sensors, enabling real-time monitoring,
    decision-making, and control of irrigation, fertigation, and other agricultural
    processes.
  extract_1: '"The Message Queue Telemetry Transport (MQTT) is the lightweight protocol
    that is used for communication between the edge devices such as Raspberry Pi.
    The MQTT protocol uses publish-subscribe communication model"'
  extract_2: '"In Fig. 1, end devices could be the mobile, laptop, or the tablet.
    The services could be accessed using a browser or an application. The service
    response time could be greatly enhanced by deploying these on the edge devices
    closer to the sensors."'
  full_citation: '>'
  full_text: '>

    "Your privacy, your choice We use essential cookies to make sure the site can
    function. We also use optional cookies for advertising, personalisation of content,
    usage analysis, and social media. By accepting optional cookies, you consent to
    the processing of your personal data - including transfers to third parties. Some
    third parties are outside of the European Economic Area, with varying standards
    of data protection. See our privacy policy for more information on the use of
    your personal data. Manage preferences for further information and to change your
    choices. Accept all cookies Skip to main content Advertisement Log in Find a journal
    Publish with us Track your research Search Cart International Conference on Machine
    Learning and Big Data Analytics ICMLBDA 2022: Machine Learning and Big Data Analytics
    pp 329–339Cite as Home Machine Learning and Big Data Analytics Conference paper
    Fog Computing-Enabled Internet of Things for Resource Optimization Meenaxi M.
    Raikar & Meena S M   Conference paper First Online: 07 June 2023 416 Accesses
    Part of the book series: Springer Proceedings in Mathematics & Statistics ((PROMS,volume
    401)) Abstract Internet of Things (IoT) has evolved and penetrated in different
    sectors such as healthcare, agriculture, manufacturing, transportation, and logistics.
    The IoT services are deployed in the cloud for accessing it virtually independent
    of location. The data-intensive IoT applications when deployed in the cloud have
    high response time. To overcome this challenge, the fog computing techniques is
    proposed to access the data from the sensors in real time. In this paper, the
    Fog-enabled IoT architecture for precision agriculture is presented. Precision
    agriculture is the usage of information technology to increase yield of crops
    and improve health of plants by ensuring accurate and controlled supply of nutrients.
    The sensors are deployed in the fields, and data is sent to the edge devices used
    for improving the produce. The different services available are automated irrigation
    and fertigation, recommendation by experts, decision support system, and protection
    from rodents. The farmers can subscribe to the service and make the best use.
    The advantage of Fog-enabled IoT is the reduction in round-trip time (RTT) compared
    to Cloud IoT architecture. The result demonstrates 40% reduction in RTT when Fog-enabled
    IoT architecture is used for different services. Keywords MQTT Raspberry Pi Publish
    Subscribe Edge device Access provided by University of Nebraska-Lincoln. Download
    conference paper PDF 1 Introduction The Fog-enabled Internet of Things (IoT) architecture
    is used for resource optimization. The agriculture sector use case is considered
    for providing service to the farmers. The farmer can enable the services using
    the mobile application. The lightweight protocol is chosen for communication between
    the devices for energy-efficient transmission of the data. The network topology
    consists of heterogeneous nodes such as things and edge devices. The nodes in
    the network are power constraint devices; hence, the lightweight protocol is opted
    for the communication. The Message Queue Telemetry Transport (MQTT) is the lightweight
    protocol that is used for communication between the edge devices such as Raspberry
    Pi. The MQTT protocol uses publish-subscribe communication model. It is assumed
    that the service provider will have the infrastructure for facilitating the different
    services mentioned. The recommendation by experts regarding which crop to be grown
    in the field based on region, season, and climate conditions is available to the
    farmers. Advice related to the appropriate time for sowing the seed to get better
    yield is facilitated on request through mobile. This paper outlines the use of
    IoT devices such as rain sensor, soil moisture sensor, and temperature sensor
    to sense the agricultural data and store into edge device database. The stored
    data is monitored through big data analytics, and prediction is performed using
    data mining techniques. The energy efficiency is computed in terms of the packet
    size and the round trip time for the transmission of the data between the devices.
    The organization of the paper: In Sect. 2, related work on Fog IoT services is
    presented. In Sect. 3, the architecture for Fog IoT taking precision agriculture
    as a use case is described. The energy model for the Fog IoT devices is discussed
    in Sect. 4. The distance between the Fog IoT nodes, a factor to reduce latency,
    is presented in Sect. 5. The result analysis and conclusion is presented in Sects.
    6, and 7, respectively. 2 State of the Art in Fog-Enabled IoT Services In [1],
    the system that collects soil properties and stores it in cloud for further analysis
    is mentioned. It also speaks about building a scalable sensor data analysis for
    smart farming with commercially available IoT devices which reduces maintenance
    cost and provides data analytics resulting in increased crop yield. In [2], cloud-based
    IoT application for precision agriculture with three-layer architecture is described.
    The top layer deals with collecting information and applying necessary agricultural
    actions. The next layer connects the top layer to IoT. The last layer deals with
    data storage and processing. AgroTick, a novel hybrid system for smart agriculture,
    is discussed in [3]. AgroTick is an Internet of Things (IoT) system with a mobile
    interface that was created using technological modules such as cloud computing,
    embedded firmware, hardware, and big data analytics. AgroTick is built to increase
    agricultural efficiency, develop a well-connected farming network, and provide
    a knowledge-sharing platform for farmers. In [4,5,6,7], the lightweight protocol,
    Message Queue Telemetry Transport (MQTT), is the communication model used. It
    has opened its way in many sectors since its invention in 1999. The different
    cloud deployments and services available for the Internet users are presented
    in [8]. The various applications of IoT such as smart parking, waste management,
    and home automation are described in [9]. The power efficiency for IoT devices
    is enhanced using the software-defined networks (SDN) architecture [10]. The energy
    efficiency of the IoT devices is improved using load balancing and fault tolerance
    techniques [11]. The IoT services of the smart city are described in [12]. The
    6LoWPAN and CoAP protocol in development of the applications are presented in
    [13]. The security issues are concerns in the IoT network presented in [14, 15].
    3 Fog Computing-Enabled IoT Architecture The Fog computing-enabled IoT architecture
    for precision agriculture using lightweight protocol is shown in Fig. 1. The objective
    is to provide different service for farmers that aid in precision agriculture
    such as: 1. Irrigation and fertigation as a service 2. Crop-related decision support
    system as a service 3. Recommendation as a service 4. Pest control as a service
    The farmers have to subscribe for the services by registration process. The metering
    and billing module at the service provider (SP) side keeps track of the unit amount
    of resource utilized by the farmers. Irrigation and Fertigation As a Service:
    This service is used by farmers to irrigate and fertigate the land. The controlled
    amount of water and fertilizers are supplied to the plants based on the different
    parameters such as soil moisture content, temperature, and rainfall in the region.
    Crop-Related Decision Support System As a Service This service aids the farmer
    in making decisions related to the type of crop to be sowed or the suitable time
    for sowing in the region. To facilitate this service at the SP side, big data
    analytics technique are applied as shown in Fig. 1. Recommendation As a Service
    The farmers who have subscribed to this service get recommendation related to
    the crop. The data related to each farmers land is collected using sensors and
    stored at the data center for analysis. The data mining techniques are applied
    for recommendation to the farmers. Pest Control As a Service This service enables
    the farmers to combat the loss in yield due to pests and rodents. The automated
    fertigation unit is installed at the service provider location. The metering unit
    aids in determining the amount of unit consumed by the farmers for accounting
    and billing. The virtualization technique is applied for efficient utilization
    of resources at the data centers. The virtual private network (VPN) component
    enables the user to have private network for security reasons. These services
    are deployed at the edge device closer to the sensors to minimize the latency.
    In the Fig. 1, end devices could be the mobile, laptop, or the tablet. The services
    could be accessed using a browser or an application. The service response time
    could be greatly enhanced by deploying these on the edge devices closer to the
    sensors. In the next section, the energy efficiency model for fog IoT architecture
    is presented. Fig. 1 Fog-enabled IoT architecture using lightweight protocol Full
    size image 4 Energy Model for the Fog IoT Devices The evolution of Fog computing-enabled
    Internet of Things is at its peak as represented in Gartner’s predictions in the
    recent days. Here, the things connect to the Internet anytime, anywhere providing
    the ubiquity to the users. These things are fueled by energy sources. Hence, energy
    efficient utilization of the IoT resources is an important research domain. With
    the invention of Industrial IoT, the need for low power technology is increasing
    tremendously. Thus, the power consumption model for IoT applications plays an
    important role in network resource optimization. A trade-off is to be achieved
    between cost incurred, network lifetime, and the power consumption of the devices.
    The power efficiency model for IoT devices is presented in [16]. The effect of
    power consumption based on the traffic pattern in IoT devices of smart city applications
    is described in [17]. In an IoT application, energy is consumed during data acquisition,
    processing, and communication. The alternate to save energy is to use energy harvesting
    technologies, which is out of the scope of this paper. The analysis of energy
    in the life cycle of an IoT application is presented here. The objective is to
    minimize the power consumption of the IoT applications. In the literature, system
    level conservation of energy is described vastly. The focus of this paper is mainly
    from the perspective of energy consumption during communication between the devices.
    In an IoT application, the pattern observed is data acquisition by the sensors/things,
    processing performed by the controller, and the transmission of the data. Based
    on this pattern, the power consumption of the IoT application is broken into four
    different blocks. The first block being the power consumed at the system/device
    level (PSYS) to perform the operations at the operating system level. The second
    block being the power consumption during the data acquisition by the sensors/things
    (PDACQ). The third block is power consumed for processing (PPROC) and finally
    the power utilized for communicating between the networking devices (PCOMMN).
    The mathematical representation of the observed pattern in IoT application is
    given in Eq. (1). $$ {P}_{NDEV}={P}_{SYS}+{P}_{DACQ}+{P}_{PROC}+{P}_{COMMN} $$
    (1) With the main objective being the power conservation during communication,
    the lightweight protocol is used in the development of the IoT applications. The
    payload in case of lightweight protocol such as MQTT for IoT applications is 2
    bytes. Since the IoT devices are battery powered, the objective is to minimize
    the power consumed during transmission for increasing the network lifetime. 4.1
    Power Consumption Model for Data Communication The average power consumed during
    communication is represented as energy required to send a message (EM) and the
    time interval between consecutive messages (TM) as given in Eq. (2). $$ {P}_{COMMN}=\\sum
    \\limits_{k=1}^n\\frac{E_M^{(k)}}{T_M^{(k)}} $$ (2) where n is the number of messages
    sent during the experimental period and k varies from 1 to n. The factors that
    influence EM are based on whether it is a wired medium or wireless medium for
    transmission, embedded chip type on the sensor/thing and the period for every
    transmission. The IoT applications can be categorized into two types such as periodic
    and event trigger-based reporting. In case of periodic reporting such as temperature
    monitoring, the value for \\( {T}_{\\textrm{M}}^{(k)} \\) is constant. Therefore,
    Eq. (2) is rewritten as: $$ {P}_{COMMN}=\\frac{1}{T_M^0}\\sum \\limits_{k=1}^n{E}_M^{(k)}
    $$ (3) Here, \\( {T}_M^0 \\) is constant time interval between consecutive reporting
    instances. 4.2 Power Consumption Model for Data Acquisition The IoT applications
    are classified into two types such as periodic reporting and nonperiodic or event
    trigger-based reporting. The power consumption for the data acquisition is given
    by Eq. (4): $$ {P}_{DACQ}=\\left\\{\\begin{array}{c}{P}_{DACQ-1- SAMPLE}\\cdot
    {SN}_1.\\dots (periodic)\\\\ {}{P}_{DACQ-1- SAMPLE}\\cdot {SN}_2\\cdot \\Pr ob(E)\\end{array}\\right.
    $$ (4) where SN1 and SN2 are the number of samples for periodic and event trigger-based
    reporting, respectively. In case of the event trigger-based reporting, the probability
    of occurrence of an event (E) is taken into consideration. 4.3 Power Consumption
    Model of a System/Device The different states of a networking device are active,
    idle/sleep, transmit, and receive. The power consumption of a networking device
    (PSYS) is given as: $$ {P}_{SYS}={P}_{active}+{P}_{sleep/ idle}+{P}_{transmit}+{P}_{receive}
    $$ (5) The power consumption during each of these states is presented in this
    section. Data Transmission The power consumption for transmission of data in an
    IoT environment, considering periodic transmission, is represented as: $$ {E}_{DataTx}={P}_{DataTx}(mW)\\times
    {T}_M^0(ms)\\vspace*{-1.5pc} $$ (6) Data Reception Similarly, the power consumed
    to receive the data is given as: $$ {E}_{DataRx}={P}_{DataRx}(mW)\\times {T}_{Rx}(ms)
    $$ (7) where TRx(ms) is the duration for data reception. Active/Sleep Modes Based
    on the active and sleep modes of the networking device, power consumption is modelled
    as: $$ {P}_{active+ sleep}={P}_s\\times {T}_s+\\left({T}_{total}-{T}_s\\right)\\ast
    {P}_{active} $$ (8) where Ttotal and Ts are the total time spent and time spent
    in sleep mode, respectively. The power consumption of an IoT device can be reduced
    by increasing the sleep modes. Based on the deviation of the sensed data, the
    sleep modes can be increased for prolonged network lifetime. The deviation of
    the sensed data is computed as: $$ Deviation\\mbox{\\_ }of\\mbox{\\_ }sensed\\mbox{\\_}data=\\frac{\\sqrt{\\sum
    \\left({y}_i-\\mu \\right)}}{\\mu } $$ (9) where yi is the sensed data and μ is
    the mean computed for “n” sensed data values. μ is computed as \\( \\sum \\limits_{i=1}^n{y}_i/n
    \\). The data reduction is performed by monitoring the deviation in the data sensed.
    The voluminous data, variety of sensors, and velocity of data generated are the
    aspects to be considered in Fog computing. 4.4 Power Consumption Model for Data
    Processing The power consumed for data processing depends on the number of operations
    performed such as arithmetic operations. It depends on the hardware architecture
    chosen for the deployment of the IoT applications. In this section, the different
    units of power consumption in the IoT applications are outlined. With the proposed
    architecture, the latency for the services is reduced which aids in decreasing
    the power consumed. 5 Distance Between Nodes in Fog IoT Assuming there exists
    “M” routers between the source and destination, the end-to-end delay (dE-to-E)
    is given by Eq. (10), when the queuing delay is negligible: $$ {d}_{E- to-E}=M\\ast
    \\left({d}_{proc}+{d}_{trans}+{d}_{prop}\\ \\right) $$ (10) where dproc is the
    processing delay, dtrans is the transmission delay, and dprop is the propagation
    delay [18]. If the link length is doubled from d to 2d, the propagation delay
    is dprop = 2 * dprop. The propagation delay is proportional to the distance between
    the nodes. Hence, the Fog computing reduces the end-to-end delay when the distance
    between the data gathering nodes and edge devices is reduced. 6 Result Analysis
    The Raspberry Pi 3 is used as the end node at the fog computing layer for aggregation,
    computation, and processing. The lightweight protocol is used for data transmission
    between the nodes. MQTT protocol is chosen as the lightweight protocol for transmission
    of the sensor-captured data. The “publish-subscribe” communication model is applied
    in MQTT. The mosquito broker is utilized to send the sensor-captured data between
    the subscriber (farmers) and publisher (SP). The mosquito broker is configured
    to function as a broker on Raspberry Pi system. An instance is created on broker
    with the port number. The topic with name as “IrrigationFertigation” is created.
    The subscribers connect to the broker using this topic. The message to “ON” the
    irrigation/fertigation unit is sent using this topic. The Wireshark tool is used
    to capture the packet information. The filter is applied to compare the packet
    length during transmission using “http” and “mqtt” protocol. The area covered
    with blue represents the packet length for HTTP, and the red color presents the
    packet length for MQTT as shown in Fig. 2. The other lightweight protocol is CoAP
    (Constrained Application Protocol) used for power-constrained devices. In Fig.
    3, the average, minimum, and maximum packet length of non-lightweight protocol
    – Hyper Text Transfer Protocol (HTTP) – and lightweight protocol (MQTT) is represented.
    In Fig. 4, the round-trip time comparison for Cloud IoT and Fog IoT architecture
    is presented. Fig. 2 Comparison of packet length for HTTP and MQTT protocol Full
    size image Fig. 3 Packet length for lightweight protocol and non-lightweight protocol
    Full size image Fig. 4 RTT comparison of Fog IoT and Cloud IoT architecture Full
    size image 7 Conclusion The Fog-enabled IoT architecture proposed reduces the
    round-trip time as the edge devices are closer to the sensor devices. The case
    study presented benefits the farmer to deploy precision agriculture techniques
    in the farm for increasing the crop yield. This model could be scaled to the entire
    rural area. The lightweight protocol is selected for service providing, because
    it aids in lowering the latency and achieving higher throughput. References S.
    Rajeswari and et al., “A smart agricultural model by integrating IoT, mobile and
    cloud-based big data analytics”, 2017 International Conference on Intelligent
    Computing and Control (I2C2), Coimbatore, 2017, pp. 1–5. Google Scholar   A. Khattab
    and et al., “Design and implementation of a cloud-based IoT scheme for precision
    agriculture,” 2016 28th International Conference on Microelectronics (ICM), Giza,
    2016, pp. 201–204. Google Scholar   S. Roy et al., “IoT, big data science & analytics,
    cloud computing and mobile app based hybrid system for smart agriculture,” 2017
    8th Annual Industrial Automation and Electromechanical Engineering Conference
    (IEMECON), 2017, pp. 303–304, https://doi.org/10.1109/IEMECON.2017.8079610. W.
    R. Heinzelman and et al., “Energy-efficient communication protocol for wireless
    microsensor networks,” Proceedings of the 33rd Annual Hawaii International Conference
    on System Sciences, Maui, HI, USA, 2000, pp. 10 pp. vol.2. Google Scholar   P.
    R. Deshmukh and D. Bhalerao, “An implementation of MQTT through the application
    of warehouse management system for climacteric fruits and vegetables”, 2nd International
    Conference on Communication and Electronics Systems (ICCES), Coimbatore, 2017,
    pp. 844–849. Google Scholar   J. Velez and et al., “IEEE 1451-1-6: Providing common
    network services over MQTT,” 2018 IEEE Sensors Applications Symposium (SAS), Seoul,
    2018, pp. 1–6. Google Scholar   M. M. Raikar and et al., “Blend of Cloud and Internet
    of Things (IoT) in agriculture sector using light weight protocol”, 2018 IEEE
    ICACCI, Bangalore. Google Scholar   M. M. Raikar, P. Desai, M. Vijayalakshmi and
    P. Narayankar, “Augmenting Cloud concepts learning with Open source software environment,”
    2018 International Conference on Advances in Computing, Communications and Informatics
    (ICACCI), Bangalore, 2018, pp. 1405–1411. https://doi.org/10.1109/ICACCI.2018.8554826
    M. M. Raikar, P. Desai, V. M and P. Narayankar, “Upsurge of IoT (Internet of Things)
    in engineering education: A case study,” 2018 International Conference on Advances
    in Computing, Communications and Informatics (ICACCI), Bangalore, 2018, pp. 191–197.
    https://doi.org/10.1109/ICACCI.2018.8554546 N. Kaur and S. K. Sood, “An Energy-Efficient
    Architecture for the Internet of Things (IoT),” in IEEE Systems Journal, vol.
    11, no. 2, pp. 796–805, June 2017. https://doi.org/10.1109/JSYST.2015.2469676.
    Farzad Kiani, “A Survey on Management Frameworks and Open Challenges in IoT,”
    Wireless Communications and Mobile Computing, vol. 2018, Article ID 9857026, 33
    pages, 2018. https://doi.org/10.1155/2018/9857026. A. Zanella, N. Bui, A. Castellani,
    L. Vangelista and M. Zorzi, “Internet of Things for Smart Cities,” in IEEE Internet
    of Things Journal, vol. 1, no. 1, pp. 22–32, Feb. 2014. https://doi.org/10.1109/JIOT.2014.2306328
    Izal, Mikel et al. “Computation of Traffic Time Series for Large Populations of
    IoT Devices” Sensors (Basel, Switzerland) vol. 19, 1 78. 26 Dec. 2018, https://doi.org/10.3390/s19010078.
    M. M. Raikar and S. M. Meena, “SSH brute force attack mitigation in Internet of
    Things (IoT) network: An edge device security measure,” 2021 2nd International
    Conference on Secure Cyber Computing and Communications (ICSCCC), 2021, pp. 72–77,
    https://doi.org/10.1109/ICSCCC51823.2021.9478131. M. M. Raikar and M. S M, “Vulnerability
    assessment of MQTT protocol in Internet of Things (IoT),” 2021 2nd International
    Conference on Secure Cyber Computing and Communications (ICSCCC), 2021, pp. 535–540,
    https://doi.org/10.1109/ICSCCC51823.2021.9478156. B. Martinez, M. Montón, I. Vilajosana
    and J. D. Prades, “The Power of Models: Modeling Power Consumption for IoT Devices,”
    in IEEE Sensors Journal, vol. 15, no. 10, pp. 57775789, Oct. 2015. https://doi.org/10.1109/JSEN.2015.2445094.
    A. Ikpehai, B. Adebisi and K. Anoh, “Effects of Traffic Characteristics on Energy
    Consumption of IoT End Devices in Smart City,” 2018 Global Information Infrastructure
    and Networking Symposium (GIIS), Thessaloniki, Greece, 2018, pp. 1–6. https://doi.org/10.1109/GIIS.2018.8635744.
    Kurose, J. F., & Ross, K. W. (2001). Computer networking: A top-down approach
    featuring the Internet. Boston: Addison-Wesley. Google Scholar   Download references
    Author information Authors and Affiliations K. L. E. Technological University,
    Hubballi, India Meenaxi M. Raikar & Meena S M Corresponding author Correspondence
    to Meenaxi M. Raikar . Editor information Editors and Affiliations Dept. of Computer
    Science & Engineering, Indian Institute of Technology Patna, Patna, Bihar, India
    Rajiv Misra Cardiff University, Cardiff, UK Rana Omer Dept. of EE Engineering,
    University of London, London, UK Muttukrishnan Rajarajan Dept. of ECE, National
    University of Singapore, Singapore, Singapore Bharadwaj Veeravalli Dept. of Computer
    Science, Central University of Rajasthan, Tehsil Kishangarh, Rajasthan, India
    Nishtha Kesswani Dept. of CSE, Indian Institute of Information Technology, Kota,
    Jawahar Lal Nehru Marg, Rajasthan, India Priyanka Mishra Rights and permissions
    Reprints and permissions Copyright information © 2023 The Author(s), under exclusive
    license to Springer Nature Switzerland AG About this paper Cite this paper Raikar,
    M.M., S M, M. (2023). Fog Computing-Enabled Internet of Things for Resource Optimization.
    In: Misra, R., Omer, R., Rajarajan, M., Veeravalli, B., Kesswani, N., Mishra,
    P. (eds) Machine Learning and Big Data Analytics. ICMLBDA 2022. Springer Proceedings
    in Mathematics & Statistics, vol 401. Springer, Cham. https://doi.org/10.1007/978-3-031-15175-0_27
    Download citation .RIS.ENW.BIB DOI https://doi.org/10.1007/978-3-031-15175-0_27
    Published 07 June 2023 Publisher Name Springer, Cham Print ISBN 978-3-031-15174-3
    Online ISBN 978-3-031-15175-0 eBook Packages Mathematics and Statistics Mathematics
    and Statistics (R0) Share this paper Anyone you share the following link with
    will be able to read this content: Get shareable link Provided by the Springer
    Nature SharedIt content-sharing initiative Publish with us Policies and ethics
    Download book PDF Download book EPUB Sections Figures References Abstract Introduction
    State of the Art in Fog-Enabled IoT Services Fog Computing-Enabled IoT Architecture
    Energy Model for the Fog IoT Devices Distance Between Nodes in Fog IoT Result
    Analysis Conclusion References Author information Editor information Rights and
    permissions Copyright information About this paper Publish with us Discover content
    Journals A-Z Books A-Z Publish with us Publish your research Open access publishing
    Products and services Our products Librarians Societies Partners and advertisers
    Our imprints Springer Nature Portfolio BMC Palgrave Macmillan Apress Your privacy
    choices/Manage cookies Your US state privacy rights Accessibility statement Terms
    and conditions Privacy policy Help and support 129.93.161.219 Big Ten Academic
    Alliance (BTAA) (3000133814) - University of Nebraska-Lincoln (3000134173) © 2024
    Springer Nature"'
  inline_citation: (Raikar & M, 2023)
  journal: Springer Proceedings in Mathematics and Statistics
  key_findings: The Fog-enabled IoT architecture reduces latency in data transmission
    and enhances response time for agricultural services, enabling more efficient
    and timely decision-making. The lightweight protocols, such as MQTT and CoAP,
    facilitate energy-efficient and secure data communication between edge devices
    and sensors, optimizing resource utilization.
  limitations: The paper focuses on the use of lightweight protocols for data transmission
    and does not delve into the details of deploying machine learning models or integrating
    them with other components of the irrigation management pipeline.
  main_objective: To propose a Fog-enabled IoT architecture for resource optimization
    in precision agriculture, focusing on the use of lightweight protocols and edge
    devices.
  relevance_evaluation: This paper is highly relevant to the point on integration
    of deployed machine learning models with other components of the automated irrigation
    management pipeline, such as data preprocessing, decision-making, and control
    systems, using protocols like MQTT, CoAP, RESTful APIs. The paper specifically
    discusses the use of MQTT and its advantages in the context of precision agriculture.
  relevance_score: '0.9'
  relevance_score1: 0
  relevance_score2: 0
  study_location: Unspecified
  technologies_used: MQTT, CoAP, Raspberry Pi, Fog computing, IoT
  title: Fog Computing-Enabled Internet of Things for Resource Optimization
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  apa_citation: Poojara, S., Jõeleht, A., Jakovits, P., & Srirama, S. N. (2023). Serverless
    Outlier Management for Environmental IoT Data - A Case Study of PuhatuMonitoring.
    2022 IEEE 8th World Forum on Internet of Things (WF-IoT), 1-6. https://doi.org/10.1109/WF-IoT54382.2022.10152102
  authors:
  - Poojara S.
  - Jõeleht A.
  - Jakovits P.
  - Srirama S.N.
  citation_count: '0'
  data_sources: IoT sensor data, environmental data
  description: 'PuhatuMonitoring (PM) is an IoT application for observing the water
    level changes in a wetland in the Puhatu Nature Protection Area (NPA), North West
    Estonia next to an open-pit oil-shale quarry. IoT devices are installed for monitoring
    the environment and the LORAWAN things network stack is used to collect raw sensor
    data into the cloud. A major challenge faced by geologists were outliers in the
    collected data, caused by natural and weather conditions or device/sensor failures.
    We propose a system for data collection, detection of outliers using unsupervised
    machine learning algorithms, tagging of outlier data, and storing the results.
    We utilize Serverless (FaaS) model to deploy individual data processing services
    as virtual functions, which can be executed in an event-driven manner on data
    streams. We designed two different serverless data pipeline (SDP) approaches:
    Apache NiFi and Message Queue (MQTT) based. We investigated the performance of
    the two proposed approaches and results showed that Apache NiFi-based SDP approach
    has a lower processing time and higher disk utilization. In contrast, the MQTT-based
    approach experienced higher processing time and lower disk and memory utilization.
    Our suitability analysis showed that Apache NiFi-based approach suits better for
    environment monitoring applications like PuhatuMonitoring.'
  doi: 10.1109/WF-IoT54382.2022.10152102
  explanation: The paper presents a comprehensive end-to-end automated system for
    real-time irrigation management, with a specific focus on deploying machine learning
    models for data processing. The authors propose two different serverless data
    pipeline approaches, Apache NiFi-based and Message Queue (MQTT)-based, to integrate
    deployed machine learning models with other components of the irrigation management
    pipeline efficiently.
  extract_1: One of the suggested approaches utilizes Apache NiFi, a data management
    platform known for its reliability and adaptability, while the other approach
    involves utilizing Message Queue Telemetry Transport (MQTT), a commonly used protocol
    for IoT data transfer.
  extract_2: These approaches enable seamless communication between the deployed machine
    learning models and the other components of the automated irrigation management
    system, ensuring efficient data exchange and enabling real-time decision-making.
  full_citation: '>'
  full_text: '>

    "This website utilizes technologies such as cookies to enable essential site functionality,
    as well as for analytics, personalization, and targeted advertising purposes.
    To learn more, view the following link: Privacy Policy Manage Preferences IEEE.org
    IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account Personal
    Sign In Browse My Settings Help Access provided by: University of Nebraska - Lincoln
    Sign Out All Books Conferences Courses Journals & Magazines Standards Authors
    Citations ADVANCED SEARCH Conferences >2022 IEEE 8th World Forum on ... Serverless
    Outlier Management for Environmental IoT Data - A Case Study of PuhatuMonitoring
    Publisher: IEEE Cite This PDF Shivananda Poojara; Argo Jõeleht; Pelle Jakovits;
    Satish Narayana Srirama All Authors 73 Full Text Views Abstract Document Sections
    I. Introduction II. Background III. Related Work IV. Puhatu Monitoring System
    V. Data Analysis and Machine Learning Show Full Outline Authors Figures References
    Keywords Metrics Footnotes Abstract: PuhatuMonitoring (PM) is an IoT application
    for observing the water level changes in a wetland in the Puhatu Nature Protection
    Area (NPA), North West Estonia next to an open-pit oil-shale quarry. IoT devices
    are installed for monitoring the environment and the LORAWAN things network stack
    is used to collect raw sensor data into the cloud. A major challenge faced by
    geologists were outliers in the collected data, caused by natural and weather
    conditions or device/sensor failures. We propose a system for data collection,
    detection of outliers using unsupervised machine learning algorithms, tagging
    of outlier data, and storing the results. We utilize Serverless (FaaS) model to
    deploy individual data processing services as virtual functions, which can be
    executed in an event-driven manner on data streams. We designed two different
    serverless data pipeline (SDP) approaches: Apache NiFi and Message Queue (MQTT)
    based. We investigated the performance of the two proposed approaches and results
    showed that Apache NiFi-based SDP approach has a lower processing time and higher
    disk utilization. In contrast, the MQTT-based approach experienced higher processing
    time and lower disk and memory utilization. Our suitability analysis showed that
    Apache NiFi-based approach suits better for environment monitoring applications
    like PuhatuMonitoring. Published in: 2022 IEEE 8th World Forum on Internet of
    Things (WF-IoT) Date of Conference: 26 October 2022 - 11 November 2022 Date Added
    to IEEE Xplore: 22 June 2023 ISBN Information: DOI: 10.1109/WF-IoT54382.2022.10152102
    Publisher: IEEE Conference Location: Yokohama, Japan SECTION I. Introduction Advancements
    in ICT technologies have accelerated the de-ployment of large-scale IoT systems,
    making them ubiquitous in a wide spectrum of applications [1]. The reliability,
    accuracy and usability of critical applications heavily rely on sensor data duality.
    However, it is not possible to always expect accurate data due to the malfunction
    of in-situ sensors [2]. Malfunctions can produce incorrect or erroneous data,
    normally referred to as outliers, which have many different causes from deploying
    sensors in harsh environments, low quality of manufacturing to usage of inexpensive
    electrical components. Puhatu Monitoring is an environmental monitoring IoT application
    for observing if the groundwater lowering affects surface water regime in the
    wetland. Data is collected from IoT devices installed in the wetland using the
    LORAWAN The- Things-Network stack. Initial Exploratory Data Analysis (EDA) indicated
    that the collected data contains a large num-ber of outliers, such as reporting
    500 cm water level instead of usual 70 cm. This can be caused, for example, by
    plants that occasionally move with wind in front of a sensor, snow with uneven
    surface, or uncertain weather conditions. Similar outliers were also found in
    air temperature and pressure sensors. It is a challenging and complex task for
    geologists to monitor outliers in real-time from a large number of sensors located
    at various places in the monitoring site. This work addresses the above-mentioned
    challenges by designing a scaleable end-to-end system for raw data col-lection,
    parsing, online outlier detection, tagging, and storing it in a time-series database.
    The IoT outlier detection is of considerable interest in the research community
    and several algorithms had been proposed [2] from statistical [3] to machine learning
    techniques [4], offline to online and hybrid mechanisms. We tested seven unsupervised
    machine learning algorithms including density-based clustering, classification,
    and tree-based ensemble algorithms. However, the data handling and outlier detection
    in real-time IoT applications is a complex process. To extract out-liers from
    the raw data stream, it is needed to pre-process, transport and transform data,
    and apply machine learning models. Any identified outliers should be tagged, stored,
    and alerts raised. To simplify designing and deploying such multi-stage applications,
    data pipelines management platforms are commonly used [5] such as Apache NiFi
    [6] to manage the data acquisition, routing and control. In addition, the emergence
    of serverless computing the real-time and scalable IoT data processing has been
    significantly simplified [7]. The data analytic operations can be designed as
    serverless functions, easily deployed, and scaled in het-erogeneous environments.
    The integration of data pipelines with serverless functions constitutes Serverless
    Data Pipelines (SDP), serverless functions are used as pipeline tasks and seamlessly
    invoked while the data moves through the pipeline. Our previous work [8] investigated
    such kinds of SDPs approaches (Apache Nifi based, Message Queue based, and Object
    Storage based) for IoT applications. The results showed that Apache NiFi and Message
    Queue-based SDPs are more suitable for non-binary data. Contributions of this
    work are the following: The architecture for data acquisition over LORAWAN, data
    pre-processing, storage, and visualization. Exploratory data analysis on the collected
    data and we in-vestigated the accuracy and performance of unsupervised machine
    learning algorithms for outlier detection. Proposed two different serverless real-time
    anomaly de-tection data pipelines. Applicability analysis of two SDP approaches,
    with dis-cussion of their advantages and disadvantages. The rest of the paper
    is organized as follows. Section II presents the background of outliers in IoT
    data, serverless computing, and data pipelines. The state-of-the-art in out-lier
    detection mechanisms and IoT serverless architectures is presented in section
    III. The proposed end - to-end system is described in section IV. Exploratory
    data analysis and outlier detection is described in Section V. The proposed serverless
    data pipeline architectures is presented in section VI and compared in section
    VII. Finally, conclusions and future works are discussed in section VIII. IoT
    applications and sensor grids produce ever increasing volume and velocity of data
    which increases the probability of noise, incorrect data and anomalies which hinders
    making decisions based on the data. The goal of anomaly detection is to identify
    any kind of outliers in data. The outliers can be classified into three different
    groups: point - wise, contextual and collective or pattern anomalies [9]. Point
    anomalies exist for a short period of time and can retain the previous normal
    state immediately and may be due to noise in the sensing equipment. Contextual
    outliers are data points that deviate from the rest of the dataset in a specific
    context, and can be detected in context subset but may not be recognized as outliers
    when seeing the whole dataset. The collective anomalies occur with specific patterns
    over a period of time. PuhatuMonitoring data mostly contains point anomalies and
    the extended analysis of the data are described in Section V. A. Outliers in Iot
    Streaming Data This section provides the background on different types of outliers
    and anomalies in the IoT streaming data, and describes serverless computing and
    data pipelines technologies. SECTION II. Background B. Serverless Computing and
    Data Pipelines Serverless computing or Function as a Service (FaaS) is a cloud
    computing service model that leverages the granular scaling and billing at the
    function level, where developers do not need to manage the infrastructure. Due
    to event-driven invocation and easy deployment of functions over heterogeneous
    hardware, Serverless computing is becoming heavily used in IoT deployments. The
    outlier management process typically consists of several stages like raw data
    collection from IoT sensors, pre-processing, applying machine learning model for
    outlier detection, tagging outliers and storing the results. Such a sequence of
    stages is modeled in a pipeline manner with data processed at each stage and provided
    as input to next stages. Data pipelines (DP) are chains of workflows with a series
    of data processing components [10]. A DP tool/engine is a system with build-in
    components that captures, organizes/manipulates, and routes data to one or more
    required locations. Modern DP tools are available as open-source (Apache NiFi
    [6], Stream-Set, Apache Airflow) or as commercial products (Google Data Flow).
    Leveraging of such data pipeline engines in IoT data processing has several benefits
    such as accountability and guaranteed delivery. Fig. 1. Abstract view of puhatu-monitoring
    iot system Show All SECTION III. Related Work This section provides a summary
    on current state of art in the field of serverless solutions for IoT data processing
    and outlier detection mechanisms using supervised, unsupervised and statistical
    methods. Our proposed work focused on unsu-pervised algorithms for outlier detection.
    Recently, much of the research work aimed to detect anoma-lies using supervised
    and unsupervised machine learning meth-ods [11]. Rui et al. investigated and proposed
    KNN based approximate known grid-based classification algorithm for IoT streaming
    data [12], similarly Xiaowu et al. proposed one class support tucker machine and
    genetic algorithm by modifying vector-based One-Class Support Vector Machine [13].
    Part et al. investigated Bayesian Classification based outlier identification
    for real-time IoT streaming analytics in Manufacturing [14]. However, most of
    the supervised techniques focus on classification which requires labels but it''s
    hard to obtain perfect labels in IoT environments [15]. Morgan et al. [18] proposed
    a dependable IoT data stream processing system for monitoring the urban infrastructures
    mainly anomalous behaviour in IoT sensors. Their work resembles the similar theme
    of our proposed work, but data stream processing requires large compute clusters,
    that may be not be a good choice for small size and event driven applications
    due to cost. Alessandra et al. [19] used LoRAWAN stack for monitoring and controlling
    the wastage of water in irrigation systems, they used ThinkSpeak cloud for data
    collection and visualization and not fully focused on data processing. Notably,
    Unsupervised machine learning methods such as Local Outlier Factor (LOF) [16],
    Density-Based Spatial Clustering of Applications (DBSCAN), K-Means, LSTM, and
    auto-encoders [17] have gathered significant interest in anomaly detection in
    IoT applications due to advantage of identifying outliers without considering
    the labels and han-dling efficiently the high dimensional multivariate IoT data.
    SECTION IV. Puhatu Monitoring System Considering the challenges and current state
    of the work, we have proposed a serverless data pipeline approach for end-to-end
    system architecture for PM data collection, processing and outlier detection.
    It is described in the following section. The wetland environmental monitoring
    takes place in the northern part of the Puhatu Nature Protection Area (NPA), Fig.
    2. Data acquisition layer Show All NW Estonia, next to the open-pit oil-shale
    quarry. The actual mining occurs mostly 1 km to the north of the NPA boundary,
    but underground parts of the mine, groundwater pumping, and draining channels
    are only a couple hundred meters from the protection area. The aim of the monitoring
    network is to observe if groundwater lowering affects the surface water hydrological
    regime in the wetland. Two main parameters are monitored. First, water level fluctuations
    with respect to the ground surface are done in shallow wells that are penetrated
    in peat. Second, peat ground surface altitude changes need to be measured relative
    to mineral soil below the peat because highly porous water-saturated peat itself
    may compact due to long-term groundwater lowering. There are 15 monitoring sites,
    grouped into five profiles that are roughly perpendicular to the Puhatu NPA /
    quarry boundary. An abstract view of Puhatu-Monitoring is shown in Fig-ure 1.
    This is inclusive of three layers in the system and is responsible to collect
    and store the sensory data from the monitoring system to cloud storage. It consists
    of three layers: Data Acquisition Layer (DAL), Data Processing Layer (DPL), and
    Data Storage and Visualization Layer (DSVL). The DAL is a primary layer to collect
    raw streaming data (payload) from a set of environmental monitoring sensors and
    decode the payload to extract the sensor data and metadata. Further, DPL is the
    intermediate layer responsible to collect the data from DAL and pass through the
    data pipeline to convert the data formats and extract the required features to
    store in a time-series database. Finally, the DSVL is responsible to store and
    generate visualization charts to show the data stream measurements over the timestamps.
    It also has the alert mechanism to inform an organization of a major change in
    data stream readings. The detailed description of individual layers is mentioned
    in the following subsections. A. Data Acquisition Layer Data Acquisition Layer
    consists of hardware components such as IoT devices connected with in-situ sensors,
    LORA gateway, and Network server. The monitoring area is very remote and LTE does
    not extend to all sites. One of the monitoring IoT devices is shown in Figure
    3. IoT devices are attached to mineral soil-anchored steel tubes that also serve
    as poles for the LORA antenna. Devices are powered by a LiPo battery that is charged
    using a 2W solar panel. IoT devices have an MS5803-07 pressure sensor to measure
    absolute pressure and temperature in the water well whereas Fig. 3. Puhatu iot
    device in winter Show All Ground surface elevation changes were measured with
    the MAXBOTIX MB7360 ultrasonic distance sensors that were located at the base
    of the device box. Since steel tubes and the device box is anchored to the mineral
    soil, the change in the distance indicates the rise or lowering of peat surface.
    Initially, measurements were made to the natural ground, but moss and grass form
    a rough surface from which ultrasound reflections are weak and distances vary.
    Therefore, the short plastic pipe was inserted in the peat soil so that its top
    surface extended 20 cm above the ground. Having reference above the actual ground
    surface also helps to get true ground surface fluctuations because in rainy periods
    the area may be flooded. the same type of sensor or MS6805 pressure sensor is
    in the device box to measure air pressure and temperature. The water level in
    the well is calculated as the pressure difference between these two sensors, expressed
    as meters of H20. The IoT device is controlled by Pycom FiPy on Expansion board.
    It has ESP32 chip that is Micropython programmable. It supports five networks
    including LoRa. The aim of the DPL is to pre-process the raw data, detect the
    outliers, tag the data and make it ready to store in the storage server in the
    DSVL layer as shown in Figure 4. The DPL consists of software services such as
    Apache NiFi, a Serverless run-time engine, and a Message Queue broker (MQTT) based
    on the type of the SDP design. B. Data Processing Layer Figure 4 illustrates the
    working of the Data processing Layer. The Network Server (TheThingsNetwork Server)
    re-ceives the raw payload from the IoT device and decodes it, then publishes it
    to various endpoints such as MQTT or HTTP APIs. The decoded payload is subscribed
    from the MQTT broker. The MQTT subscriber is connected to the broker over a TLS
    encryption channel. Here, the MQTT subscriber subscribes to the topic /up which
    means, data will be received from all the active devices in the Network Server.
    The consumed data is in json format and passed to the next task for pre-processing
    the data. The raw data (json) received has the sensor readings, metadata, and
    other gateway-related information. The pre-processing task is to extract the required
    json fields and normalize the sensor readings. Fig. 4. Data processing layer Show
    All Fig. 5. Data storage and visualization layer Show All Further, parsed data
    are moved to the next task to prepare these data as per InfluxDB line protocol
    format and also forward to the outlier detection task to identify the anomaly
    in the data using the Machine Learning model. The training, testing, and exporting
    ML algorithm is explained in the Section V. The outlier tagging task is to tag
    the data that the data stream has anomalous sensor readings. Further, it is also
    to be stored in the storage server. The Insert to storage task invokes HTTP API
    of influx to insert data into InfluxDB in the DVSL layer. C. Data Storage and
    Visualization Layer The primary function of the DSVL as shown in Figure 5 is to
    store historical data and to visualize the sensory readings to end-users. It consists
    of InfluxDB scalable time-series database to store the parsed data based on time
    intervals and Grafana visualization tool to generate interactive charts. The collected
    data are used for training the outlier detection algorithm as described in the
    below Section V. SECTION V. Data Analysis and Machine Learning This section describes
    the exploratory data analysis of the collected data, including training, testing,
    and validating unsupervised machine learning algorithms for outlier detection.
    Raw sensor data was collected approximately for 19 months using Apache NiFi-based
    data processing pipeline as mentioned in the Section IV. The collected raw data
    consist of 18560 rows. The features of data are classified into two categories:
    metadata of IoT devices and sensor data. Table I shows the list of all the features
    in the data with corresponding descriptions and units of measurement. Statistical
    analysis shows that dist has a higher standard deviation with the value of 100.42
    and a mean of 61.56. This value shows that the dist feature has the noisiest data.
    Similarly, air _Temp and wat_Temp have moderate deviated values from the mean.
    Table I Features and their measurement metric Table II Outlier detection algorithms
    and accuracy comparison We conducted Augmented Dickey-Fuller (ADF) test for checking
    the stationary in the time series and the result shows that all the features are
    stationary in nature. In stationary time series, the statistical properties (e.g.,
    mean, variance, auto-correlation) don''t change over time and it is convenient
    to identify the anomaly behavior of that time series. Further, we visualized the
    data using scatter plots as shown in Figure 6. This helps to visually identify
    the outliers in the data set. The most outliers from sensor data belong point-wise
    in nature as shown in Figure 6. The distance sensor have contextual outliers at
    a certain period of time. To identify such point-wise and contextual outliers
    for real-time PM data streams, we trained, tested, and validated seven unsupervised
    ML algorithms that include density-based clustering, classification, and tree-based
    ensemble algorithms as shown in Table II. The collected data need to be cleaned
    due to noise, null values, and erroneous data. Further, we split the data with
    70% training and 30% testing. For unsupervised outlier detection algorithms setting
    up of contamination factor (indicates the percent of an outlier in the data) parameter
    is highly desirable to obtain the accuracy of the model. The contamination factor
    is set to 0.45, this value is decided after several iterations of testing. The
    model construction process underwent fitting, pre-dicting over the training data,
    and validation with the testing data. The scikit -learn 1 and python outlier detection
    toolkits 2 are used to train and test the algorithms. The accuracy metrics such
    as Precision, Recall, and F1 are calculated as shown in Table II. Fig. 6. Outliers
    from raw sensor data of three sensors (air and water temperature sensor, distance
    sensor) Show All Fig. 7. Mqtt-based sdp. (SF: serverless function, mq: message
    queue) Show All Fig. 8. Apache nifi-based sdp. (SF: serverless function) Show
    All The linear and clustering algorithms such as OCSVM (linear model), KNN, and
    AKNN performed well as compared with probabilistic (ABOD), tree (IF), and density-based
    algorithms. Considering the F1 Score, AKNN has higher values of 0.79 with a Precision
    of 0.67 and Recall of 0.99 as compared with other algorithms. In our proposed
    work, we dumped the trained AKNN algorithm and used it for real-time outlier detection
    algorithm in the SDP approaches as described in Section VI. SECTION VI. Proposed
    Serverless Data Pipeline Approaches This section describes the two proposed serverless
    data pipeline approaches for outlier detection namely Apache NiFi based and Message
    Queue (MQTT) based SDP. MQTT-based SDP: To design the MQTT-based SDP, the sequence
    of tasks in DPL is decomposed in to set of OpenFaaS serverless functions (SF)
    and is invoked with the data unit. These functions consume the data unit and send
    responses with processed data, which act as an input to the next serverless functions.
    Due to the state-less nature of serverless platforms, the MQTT message broker
    is used to store the intermediate data unit in the queue in between serverless
    functions. The data unit is received from the data source, is processed by a set
    of functions in a pipelined manner followed by storing intermediate data in a
    message queue, and finally reaches the data sink. The proposed MQTT-based SDP
    for PuhatuMoni-toring is shown in the Figure 7. The data unit (stream) from DAL,
    is passed to preprocessing SF, which extracts json elements, and publishes the
    parsed, normalized data to Message Queue (MQ). Insert to Storage SF is used to
    store the data and Outlier Detection SF will detect the outlier in the data using
    a trained, tested ML model. Tagging SF will tag the data with an anomaly (or not)
    and store it in the storage system. The OpenFaaS MQTT-connector is used to subscribe
    to the data associated with the topic and invoke the corresponding SF. Each queue
    in the pipeline requires a separate MQTT-connector. 3 connectors and 4 serverless
    functions were used in this pipeline. Here, we use four processors namely Evaluatelson,
    Invoke-HTTp, ReplaceText, and PutInflux. The Evaluatelson processor takes the
    raw json data from DAL and extracts the required json elements. InvokeHTTP used
    to invoke SF (Outlier De-tection and Tagging) and PutInflux is used to insert
    data into the storage system. We use only two serverless functions as compared
    to MQTT-based SDP. Apache NiFi-based SDP: Apache NiFi is an off-the-shelf open-source
    tool to design data pipelines using a set of in-built processors. The Processor
    is the basic building block used to comprise a NiFi data flow and currently, 154
    processors are available. The processor consumes the flow file (data unit), performs
    the operation, and pushes it into the in-memory queue which is connected to the
    next processor. The tool itself will handle the assignment of flow files (data
    units) between the processors. The integration of Apache NiFi with Serverless
    platforms provides greater flexibility and robustness in designing the data processing
    pipelines. The Apache-NiFi based SDP for PuhatuMonitoring is shown in the Figure
    8. Fig. 9. Processing time Show All Fig. 10. Cpu and memory utilization Show All
    SECTION VII. Evaluation and Results The proposed SDPs for PuhatuMonitoring were
    deployed in real-time and their respective performance was evaluated. In this
    section, we describe the experimental setup and per-formance metrics used to evaluate
    the suitability and accuracy of the two proposed SDPs, and discuss the results.
    A. Performance Metrics The performance metrics we measure include processing time
    (addition of computation and communication time) and resource utilization metrics
    such as average CPU and Memory utilization, average disk read and write and average
    network receive and transmit. The mathematical formula''s considered for all the
    metrics are referred from our previous article [8]. The resource utilization metrics
    are calculated cumulative of cloud resources used in DPL. To investigate the performance
    effectively, we scaled the number of IoT devices concurrently by sending the IoT
    data, which mimics the real-time scenario. The Prometheus and Node Exporter software
    stack and Pro-moQL are used to collect resource utilization metrics. B. Experimental
    Setup The Docker v20.l0.l4 is installed and the Rancher version of the two-node
    Kubernetes cluster is configured on the OpenStack cloud infrastructure. The components
    of DPL and DSVL are deployed as a service in the Kubernetes cluster that includes
    OpenFaaS Serverless platform, MQTT message broker, Apache NiFi vl.3.2, InfiuxDB
    2.0, and Grafana v8. The python 3.8 run time is used to design the serverless
    functions and OpenFaaS CLI is used to build, and deploy the functions on the cluster.
    The University''s OpenS tack Cloud is used as cloud infrastructure. Two Virtual
    Machines with size m3.medium (Memory-8 Giga Bytes, 4 vCPU) resembling the similar
    capacity as A WS VM are provisioned. After setting up of necessary hardware and
    software services for two SDPs, the performance metrics are measured and the results
    are discussed in the below sub-section. Fig. 11. Disk read and disk write Show
    All Fig. 12. Network transmit and received Show All C. Results and Discussions
    To investigate the performance of the proposed SDPs, we scaled the number of IoT
    devices. The rate of arrival of data units heavily impacts pipeline performance.
    Further, we measured the performance based on the evaluation metrics. The measured
    processing time (in sec) is shown in the Figure 9. The x-axis represents the number
    of devices sending the data units for processing. Apache NiFi-based SDP requires
    a minimum processing time of 137 seconds, whereas the MQTT-based SDP required
    167 seconds to process data of 1000 devices. The MQTT-based SDP required a significantly
    more time as compared with Apache NiFi-based SDP, this was due to two reasons.
    Firstly, maximum communication time was required in the mqtt-connector and three
    connectors were used in the pipeline. Secondly, more number of serverless functions
    required to design the MQTT-based SDP as compared with Apache NiFi-based SDP.
    The CPU and memory resource utilization metrics were measured as shown in the
    Figure 10. The Apache NiFi-based consumed more CPU of 42% and memory of 53.43%
    as compared with MQTT-based for an average of 1000 devices. MQTT mosquito broker
    and mqtt-connectors required bare minimum cpu and memory, while Apache NiFi consists
    a set of processors running in parallel and required a maximum of cpu and memory
    resources. The disk read and write metrics were measured as shown in Figure 11.
    The MQTT-based SDP required fewer disk reads of 1.9 KB and more disk writes of
    56 KB for an average of 1000 devices. The Apache NiFi-based SDP has the least
    disk writes and more disk reads of 50.2KB and 2.3KB respectively. The Apache NiFi-based
    SDP uses the concept of flow-file which represents a data unit with metadata that
    is read and written to the file system during data pipeline execution and hence,
    required maximum disk resources. Similarly, received and transmitted bytes are
    measured as shown in Figure 12. The MQTT-based SDP required max-imum network resources
    of 32.66KB network receive and 84KB bytes of network transmit. The MQTT-based
    SDP contains more serverless functions which are invoked using HTTP requests and
    MQTT broker communicates over tcp, hence required maximum network resources as
    compared with Apache-NiFi based SDP. Considering an evaluation metrics of two
    proposed SDPs, we conducted a suitability analysis based on the process mentioned
    in our previous article [8] and the result shows that Apache NiFi-based SDP is
    very much suitable for this type of application. Apart from this, the following
    are the supporting factors to use Apache NiFi-based SDP over MQTT-based SDP: 1)
    Apache NiFi-based SDP is robust because there was 2% drop rate in the processing
    of data units in the pipeline as a number of users scaled in MQTT-based SDP. 2)
    Hard to design the complex data pipelines using MQTT-based SDP as we scale the
    pipeline components. 3) Easy and user-friendly graphical user interface to design
    the pipelines in Apache- NiFi based SDP. SECTION VIII. Conclusions and Future
    Directions The goal of this work was two folded, firstly design a serverless data
    pipeline based end-to-end real time system (PuhatuMonitoring) for data collection,
    outlier detection, tag-ging and storing in the storage system. Secondly, select
    an appropriate machine learning algorithm for outlier detection. The performance
    of the proposed SDPs are evaluated using performance metrics such as processing
    time and resource utilization metrics. The results and suitability analysis shows
    that Apache NiFi-based SDP is very much suitable for Puha-tuMonitoring type of
    IoT applications. However, we did not consider the scaling of the end-to-end data
    pipelines and furthermore dealing with scaling of the serverless functions to
    reduce the processing time. As a part of future work, we will focus scaleablity,
    cost and other quality of service metrics. We have also trained and tested seven
    outlier detection machine learning algorithms and results shows that Average KNN
    works better for PM data in terms of outlier detection. ACKNOWLEDGMENT This article
    has been financed/supported by European Social Fund via “ICT programme” measure.
    We also thank financial support to UoH-IoE by MHRD, India (Fll/9/2019-U3(A)) and
    SERB, India, for grant CRG/2021/003888. Authors Figures References Keywords Metrics
    Footnotes More Like This A Survey of Voice Pathology Surveillance Systems Based
    on Internet of Things and Machine Learning Algorithms IEEE Access Published: 2020
    Leveraging Machine Learning Algorithms for Predictive Maintenance in Internet
    of Things (IoT) Systems 2023 12th International Conference on System Modeling
    & Advancement in Research Trends (SMART) Published: 2023 Show More IEEE Personal
    Account CHANGE USERNAME/PASSWORD Purchase Details PAYMENT OPTIONS VIEW PURCHASED
    DOCUMENTS Profile Information COMMUNICATIONS PREFERENCES PROFESSION AND EDUCATION
    TECHNICAL INTERESTS Need Help? US & CANADA: +1 800 678 4333 WORLDWIDE: +1 732
    981 0060 CONTACT & SUPPORT Follow About IEEE Xplore | Contact Us | Help | Accessibility
    | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap |
    IEEE Privacy Policy A not-for-profit organization, IEEE is the world''s largest
    technical professional organization dedicated to advancing technology for the
    benefit of humanity. © Copyright 2024 IEEE - All rights reserved."'
  inline_citation: (Poojara et al., 2023)
  journal: 2022 IEEE 8th World Forum on Internet of Things, WF-IoT 2022
  key_findings: The Apache NiFi-based approach exhibited lower processing time and
    higher disk utilization compared to the MQTT-based approach. The MQTT-based approach
    experienced higher processing time and lower disk and memory utilization. Suitability
    analysis indicated that the Apache NiFi-based approach is more suitable for environmental
    monitoring applications like PuhatuMonitoring.
  limitations: The study focuses primarily on the integration and performance evaluation
    of two specific serverless data pipeline approaches. It does not extensively explore
    the broader context of real-time irrigation management, such as specific irrigation
    techniques, crop water requirements, or environmental factors.
  main_objective: To design and evaluate two serverless data pipeline approaches for
    real-time data processing and integration of machine learning models in an automated
    irrigation management system.
  relevance_evaluation: The point of focus for this review is on the integration of
    deployed machine learning models with other components of the automated irrigation
    management pipeline, using protocols like MQTT, CoAP, and RESTful APIs. The paper
    in question is directly relevant to this point as it proposes two serverless data
    pipeline approaches for integrating machine learning models with other components
    of the irrigation management pipeline.
  relevance_score: '1.0'
  relevance_score1: 0
  relevance_score2: 0
  study_location: Puhatu Nature Protection Area, North West Estonia
  technologies_used: Apache NiFi, MQTT, OpenFaaS, InfluxDB, Grafana
  title: Serverless Outlier Management for Environmental IoT Data - A Case Study of
    PuhatuMonitoring
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  apa_citation: Fathy, C., & Ali, H. M. (2023). A secure IoT-based irrigation system
    for precision agriculture using the Expeditious Cipher. Sensors, 23(4), 2091.
  authors:
  - Fathy C.
  - Ali H.M.
  citation_count: '10'
  data_sources: Not applicable
  description: Due to the recent advances in the domain of smart agriculture as a
    result of integrating traditional agriculture and the latest information technologies
    including the Internet of Things (IoT), cloud computing, and artificial intelligence
    (AI), there is an urgent need to address the information security-related issues
    and challenges in this field. In this article, we propose the integration of lightweight
    cryptography techniques into the IoT ecosystem for smart agriculture to meet the
    requirements of resource-constrained IoT devices. Moreover, we investigate the
    adoption of a lightweight encryption protocol, namely, the Expeditious Cipher
    (X-cipher), to create a secure channel between the sensing layer and the broker
    in the Message Queue Telemetry Transport (MQTT) protocol as well as a secure channel
    between the broker and its subscribers. Our case study focuses on smart irrigation
    systems, and the MQTT protocol is deployed as the application messaging protocol
    in these systems. Smart irrigation strives to decrease the misuse of natural resources
    by enhancing the efficiency of agricultural irrigation. This secure channel is
    utilized to eliminate the main security threat in precision agriculture by protecting
    sensors’ published data from eavesdropping and theft, as well as from unauthorized
    changes to sensitive data that can negatively impact crops’ development. In addition,
    the secure channel protects the irrigation decisions made by the data analytics
    (DA) entity regarding the irrigation time and the quantity of water that is returned
    to actuators from any alteration. Performance evaluation of our chosen lightweight
    encryption protocol revealed an improvement in terms of power consumption, execution
    time, and required memory usage when compared with the Advanced Encryption Standard
    (AES). Moreover, the selected lightweight encryption protocol outperforms the
    PRESENT lightweight encryption protocol in terms of throughput and memory usage.
  doi: 10.3390/s23042091
  explanation: The research paper titled "A Secure IoT-Based Irrigation System for
    Precision Agriculture Using the Expeditious Cipher" by Cherine Fathy and Hassan
    M. Ali explores the importance of information security and proposes the integration
    of lightweight cryptography techniques into the Internet of Things (IoT) ecosystem
    for smart agriculture. The main objective of the study is to secure communication
    between devices in an IoT-based irrigation system, particularly between sensors
    and the broker in the Message Queue Telemetry Transport (MQTT) protocol, as well
    as between the broker and its subscribers. The authors argue that securing these
    communication channels is crucial to protect sensitive data from eavesdropping,
    theft, and unauthorized changes, which can negatively impact crop development.
  extract_1: '"In this article, we propose the integration of lightweight cryptography
    techniques into the IoT ecosystem for smart agriculture to meet the requirements
    of resource-constrained IoT devices."'
  extract_2: '"Moreover, we investigate the adoption of a lightweight encryption protocol,
    namely, the Expeditious Cipher (X-cipher), to create a secure channel between
    the sensing layer and the broker in the Message Queue Telemetry Transport (MQTT)
    protocol as well as a secure channel between the broker and its subscribers."'
  full_citation: '>'
  full_text: '>

    "This website uses cookies We use cookies to personalise content and ads, to provide
    social media features and to analyse our traffic. We also share information about
    your use of our site with our social media, advertising and analytics partners
    who may combine it with other information that you’ve provided to them or that
    they’ve collected from your use of their services. Consent Selection Necessary
    Preferences Statistics Marketing Show details                 Deny Allow selection
    Allow all     Journals Topics Information Author Services Initiatives About Sign
    In / Sign Up Submit   Search for Articles: Sensors All Article Types Advanced   Journals
    Sensors Volume 23 Issue 4 10.3390/s23042091 Submit to this Journal Review for
    this Journal Propose a Special Issue Article Menu Academic Editors Dimitrios Piromalis
    Konstantinos G. Arvanitis Panagiotis Papageorgas Subscribe SciFeed Recommended
    Articles Related Info Links More by Authors Links Article Views 3843 Citations
    13 Table of Contents Abstract Introduction Materials and Methods Results Conclusions
    Author Contributions Funding Institutional Review Board Statement Informed Consent
    Statement Data Availability Statement Conflicts of Interest Abbreviations References
    share Share announcement Help format_quote Cite question_answer Discuss in SciProfiles
    thumb_up Endorse textsms Comment first_page settings Order Article Reprints Open
    AccessArticle A Secure IoT-Based Irrigation System for Precision Agriculture Using
    the Expeditious Cipher by Cherine Fathy 1,* and Hassan M. Ali 2 1 Computer Engineering
    Department, College of Engineering and Technology, Arab Academy for Science and
    Technology (AAST), Alexandria 1029, Egypt 2 National Training Academy, Sheikh
    Zayed City 12582, Egypt * Author to whom correspondence should be addressed. Sensors
    2023, 23(4), 2091; https://doi.org/10.3390/s23042091 Submission received: 5 January
    2023 / Revised: 3 February 2023 / Accepted: 10 February 2023 / Published: 13 February
    2023 (This article belongs to the Special Issue IoT for Smart Agriculture) Download
    keyboard_arrow_down     Browse Figures Versions Notes Abstract Due to the recent
    advances in the domain of smart agriculture as a result of integrating traditional
    agriculture and the latest information technologies including the Internet of
    Things (IoT), cloud computing, and artificial intelligence (AI), there is an urgent
    need to address the information security-related issues and challenges in this
    field. In this article, we propose the integration of lightweight cryptography
    techniques into the IoT ecosystem for smart agriculture to meet the requirements
    of resource-constrained IoT devices. Moreover, we investigate the adoption of
    a lightweight encryption protocol, namely, the Expeditious Cipher (X-cipher),
    to create a secure channel between the sensing layer and the broker in the Message
    Queue Telemetry Transport (MQTT) protocol as well as a secure channel between
    the broker and its subscribers. Our case study focuses on smart irrigation systems,
    and the MQTT protocol is deployed as the application messaging protocol in these
    systems. Smart irrigation strives to decrease the misuse of natural resources
    by enhancing the efficiency of agricultural irrigation. This secure channel is
    utilized to eliminate the main security threat in precision agriculture by protecting
    sensors’ published data from eavesdropping and theft, as well as from unauthorized
    changes to sensitive data that can negatively impact crops’ development. In addition,
    the secure channel protects the irrigation decisions made by the data analytics
    (DA) entity regarding the irrigation time and the quantity of water that is returned
    to actuators from any alteration. Performance evaluation of our chosen lightweight
    encryption protocol revealed an improvement in terms of power consumption, execution
    time, and required memory usage when compared with the Advanced Encryption Standard
    (AES). Moreover, the selected lightweight encryption protocol outperforms the
    PRESENT lightweight encryption protocol in terms of throughput and memory usage.
    Keywords: precision agriculture; lightweight encryption; MQTT; smart irrigation;
    IoT; expeditious cipher; AES; PRESENT; lightweight cryptography 1. Introduction
    An increasing number of research studies on smart agriculture has been motivated
    by several challenges. First, the explosive growth of the world population [1].
    According to the United Nations (UN) Food and Agriculture Organization, an increase
    of up to 70% more food will be required in 2050. Second, the declining agricultural
    lands and exhaustion of finite natural resources such as fresh water and arable
    land. In addition, the decreasing number of agricultural laborers in the majority
    of countries. As a consequence of this agricultural workforce decline, there is
    an urgent need for the adoption of IoT solutions in agriculture practices to reduce
    the need for manual labor. IoT solutions support farmers to tighten the supply-demand
    gap. Precision agriculture integrates wireless sensor networks (WSNs) with traditional
    agriculture to improve crop yields. This is carried out by using a large number
    of low-power multi-function wireless communication sensors to remotely monitor
    the farmland to collect environmental data, crop growth data, and livestock health
    data to guarantee a reduction in the possible threats to the production process
    and help farmers make better decisions. Recently, there is a shift from the usage
    of WSNs for smart agriculture to the IoT as the main enabling technology for smart
    agriculture. The IoT combines several technologies such as radio frequency identification,
    wireless sensor networks, middleware systems, end-user applications, and cloud
    computing. In [2,3], the authors presented an IoT ecosystem architecture for smart
    agriculture that is made up of four main components, namely: IoT devices, communication
    technology, internet, and data storage and processing. First, the IoT devices
    are responsible for monitoring the farming environment and collecting environmental
    data, crop growth data, and livestock health data. Second, the role of communication
    technology is to establish robust, reliable, and secure communication between
    the cloud and the farms. Wireless communication standards are categorized based
    on the coverage range into short-range and long-range standards. The short-range
    standards include Bluetooth, near-field communication (NFC)-enabled devices, ZigBee,
    Z-Wave, and passive and active radio frequency identification (RFID) systems.
    The long-range communication standards are defined as low-power wide-area networks
    (LPWA). Examples of long-range communication standards include LoRa, Sigfox, and
    NB-IoT. The LPWA technologies provide a wide area of coverage to low-power devices
    [4]. LPWA technologies outperform conventional cellular and short-range wireless
    technologies for different emerging smart city and machine-to-machine applications
    such as metering, logistics, industrial monitoring, and agriculture. However,
    LPWA technologies realize long-range ranging from a few to tens of kilometers
    and low-power operations at the expense of a low data rate. The primary aim of
    LPWA technologies is to achieve a 10-year battery life. LPWA technologies are
    suitable for delay-tolerant applications, as they achieve throughput in orders
    of ten kilobits per second and high latency in orders of seconds or minutes. Long
    range is achieved due to the use of the sub-1GHz band, and the deployment of narrow-band
    and spread spectrum techniques are the modulation techniques adopted by different
    LPWA technologies. In [4], the authors compared the technical specifications of
    various LPWA technologies and standards. The choice of communication technology
    depended on the application of the IoT device and the type of topology. Third,
    the internet is the core network layer enabling the availability of data collected
    by IoT devices anywhere and anytime. Routing Protocol for Low Power and Lossy
    Networks (RPL) [5] has been standardized by the Internet Engineering Task Force
    (IETF) as a routing protocol for resource-constrained nodes in IoT. RPL builds
    a robust topology over lossy links. A destination-oriented directed acyclic graph
    (DODAG) is the core of RPL, which represents a routing diagram of nodes. In [6],
    the authors proposed an enhanced routing protocol based on RPL called E-RPL that
    decreases the number of control messages. Moreover, they proposed a flexible multi-constrained
    objective function (OF) that integrates several metrics such as energy, delay,
    and bandwidth to define the end-to-end path between the sink and a given node.
    The simulation results of their proposal revealed a remarkable improvement in
    terms of end-to-end delay, energy consumption, and routing overhead. Finally,
    different platforms have been developed to provide data analytics, data management,
    and data storage of the big data collected from sensors. Data analytics (DA) has
    a primary role in improving the efficiency of smart agriculture systems and in
    increasing productivity. DA is classified into five classes based on the requirements
    of IoT applications: real-time analytics, memory-level analytics, offline analytics,
    business intelligence-level analytics, and massive analytics. In [7], the authors
    presented big IoT data analytic types, methods, and technologies for big data
    mining. DA can help in insurance, prediction, storage management, decision-making,
    farm management, and precision farming. In irrigation systems, the automated decision
    made by DA controls the water supply timing and quantity. The main objective of
    big data analytics is to analyze collected information to predict and identify
    recent trends, find hidden information, and finally, make decisions. Prediction,
    classification, clustering, and association rules are the main big data analytics
    methods. Furthermore, smart irrigation is a precision agriculture application
    [8] that aims to control water consumption in the agriculture sector as a scarce
    resource in many countries by deploying IoT technology to remotely gather information
    from sensors implanted in agriculture terrains to monitor soil different parameters
    in all stages. Based on the collected information, a decision is made on when
    to irrigate and the water quantity and quality required. Table 1 reviews the recent
    research on IoT-based precision irrigation systems, highlighting the communication
    protocol, data analytics, and security techniques deployed in these systems. As
    can be noticed, recent research ignores security techniques and concentrates on
    the usage of machine learning and artificial intelligence approaches, such as
    fuzzy logic, artificial neural networks (ANNs), and regression models, to optimize
    IoT-based irrigation systems employing different environmental parameters and
    weather conditions to schedule the irrigation timing and the quantity of water
    used for irrigation. However, any alteration in the information coming from sensors
    and decisions passed to actuators can lead to crop damage, which is considered
    to be a crucial threat to the national security of any country. As such, a secure
    channel must be developed between the sensing layer and the decision-making entity
    to secure information flowing from the sensors to the decision-maker entity and
    to secure the decision returned to the actuators that control the irrigation system.
    Because precision agriculture is highly dependent on data and information from
    the monitored system, any alteration in such data during runtime can lead to expensive
    unmanageable decisions and actions from farmers. Therefore, there is a need to
    adopt the security mechanisms required to guarantee basic security functions:
    authenticity, reliability, integrity, and availability. Moreover, these security
    mechanisms must be lightweight to meet the requirements of constrained devices
    used in IoT. Table 1. Literature review of recently proposed IoT-based precision
    irrigation systems. In [1], the authors reviewed the previous work conducted on
    smart agriculture and highlights different aspects of applying IoT solutions in
    smart agriculture. Moreover, the article reviews smart agriculture’s related security
    issues and compares security issues in the industry (urban) and agriculture (rural).
    In [16], the authors presented a classification of security threats in smart agriculture
    and precision agriculture environments. The authors classified security threats
    into six possible attacks: attacks on hardware (side channel attack and radio
    frequency (RF) jamming), attacks on the network equipment (denial of service (DoS),
    MITM (man in the middle), botnets, cloud computing attacks), attacks on data (data
    leakage, ransomware, cloud data leakage, false data injection, misconfiguration),
    attacks on applications (software update attacks, malware injection, buffer overflow,
    indirect attacks (SQL injection)), attacks on support chain (third-party attacks,
    data fabrication), and misuse attacks (cyber-terrorism, invalidation, and compliance).
    Another classification of security threats is underlined in [17]. The authors
    classified the security requirements in smart agriculture into six challenges,
    namely: integrity, availability, authentication, confidentiality, privacy, and
    Non-repudiation, and highlighted the possible attacks under each challenge. Moreover,
    a review of existing solutions to IoT security problems is emphasized. In [8],
    the authors added data freshness, authorization, and self-healing to the security
    requirements of smart agriculture. In [18], the authors reviewed IoT communication
    technologies security aspects for smart agriculture. In [19], the authors reviewed
    all categories of security attacks and the application of WSNs in IoT along with
    an evaluation of the countermeasures adopted against each type of attack. Moreover,
    smart irrigation systems developed based on IoT technology consist of constrained
    nodes in terms of power, memory, and processing resources. As a result, conventional
    security protocols can not be supported in such systems [20,21]. Transport layer
    security (TLS) adds overhead in terms of memory and energy on constrained nodes.
    As a result of the dependence on constrained nodes in IoT-based irrigation systems,
    a lightweight security protocol must be deployed. Lightweight cryptography techniques
    balance throughput against power drain, memory usage, and gate equivalent and
    have lower performance when compared to cryptography standards (such as AES and
    SHA-256) [22]. Characteristics of lightweight cryptography are highlighted in
    ISO/IEC 29192 and ISO/IEC JTC 1/SC 27. Lightweight properties are evaluated based
    on chip size and energy consumption and small code and/or RAM size in case of
    software implementation [21]. In [21], the authors discussed privacy in IoT in
    the context of developing solutions and frameworks that address profiling and
    tracking, localization, and tracking challenges and underlined state-of-the-art
    lightweight cryptographic framework for IoT. In [23], the authors proposed a set
    of lightweight security protocols for encryption, authentication, and key management
    for IoT. The authors compared their proposed protocols with IPsec in terms of
    security and computational efficiency. They succeeded in achieving a decreased
    level of resource consumption with an increased level of security. In [24], the
    authors implemented AES and PRESENT ciphers on a smartphone and provided a performance
    evaluation comparison between the two algorithms. AES is the symmetric block cipher
    defined by the National Institute of Standards and Technology (NIST) as the standard
    for bulk data encryption, whereas PRESENT is a symmetric ultra-lightweight block
    cipher that was standardized by ISO/IEC. On the other hand, the Message Queue
    Telemetry Transport (MQTT) protocol has been widely deployed as an application
    layer messaging and information exchange protocol in machine-to-machine (M2M)
    communication [25]. This is due to its ability to function with resource-constrained
    devices that utilize low bandwidth and unreliable links. MQTT is considered a
    lightweight, energy-efficient, and bandwidth-efficient communication protocol.
    MQTT utilizes the publish/subscribe architecture model to provide transition flexibility
    and simplicity of implementation. MQTT’s main components are the publishers (lightweight
    sensors), the subscribers (applications interested in sensor data), and the brokers
    (connect publishers and subscribers and classify sensor data into topics) as illustrated
    in Figure 1. The data generated by a publisher are dispatched to multiple subscribers
    through an MQTT broker. MQTT was proposed in 1999 by Andy Stanford-Clark of IBM
    and Arlen Nipper of Arcom and is currently an OASIS (Organization for the Advancement
    of Structured Information Standards) standard; it also has a standard defined
    in ISO/IEC 20922: 2016. Figure 1. MQTT architecture. Motivated by the increasing
    importance of smart irrigation systems in conserving water as a scarce natural
    resource, the role of precision agriculture in agriculture development, and the
    urgent need to apply information security techniques in the IoT part of the smart
    agriculture ecosystem, our aim in this research is to integrate a lightweight
    cryptography layer into the IoT ecosystem for smart agriculture and to investigate
    the deployment of a lightweight encryption protocol (the Expeditious Cipher) to
    create a secure channel between the sensing layer and the broker of MQTT protocol
    as well as between the broker and its subscribers in smart irrigation systems.
    This secure channel protects the sensors’ published sensitive data from eavesdropping
    and theft and preserves the integrity of data, in addition to protection of the
    decision that is made by the DA entity and returned to actuators. It should be
    noted that the security in IoT-based systems lies in IoT local systems consisting
    of devices constrained in energy and computing power. The following points summarize
    the main contributions of this article. The main contribution of this article
    is the integration of a lightweight cryptography layer to the IoT ecosystem for
    smart agriculture that meets the requirements of constrained devices used in smart
    agriculture in general and specifically, in our proposed IoT-based irrigation
    system. The article investigates the deployment of a lightweight encryption protocol
    (Expeditious Cipher (X-cipher)) to create a secure channel between the sensing
    layer and the broker in the MQTT protocol as well as a secure channel between
    the broker and its subscribers in smart irrigation systems (our case study). The
    proposed model is evaluated through simulation to validate the lightweight property
    of the chosen encryption protocol in terms of power consumption, execution time,
    and memory usage. Moreover, a performance comparison is carried out between the
    Expeditious Cipher (X-cipher), AES, and PRESENT cipher (lightweight standard protocol)
    in terms of power consumption, execution time, memory usage, and average throughput.
    The security requirements of IoT-based agriculture systems and the potential attacks
    against them are discussed. A state-of-the-art lightweight security architectures
    proposed for securing MQTT protocol is reviewed after highlighting the concept
    of lightweight cryptography. The remainder of the article is organized as follows:
    Section 2 presents our proposed secure smart irrigation system after briefly reviewing
    the state-of-the-art proposed lightweight security architectures for securing
    MQTT protocol. Section 3 highlights and discusses the performance evaluation results
    of our selected lightweight encryption algorithm versus AES, in addition to a
    performance comparison between X-cipher and the PRESENT cipher. Section 4 summarizes
    the findings of the article and highlights our suggestions for future work. 2.
    Materials and Methods In this section, the proposed secure IoT-based irrigation
    system architecture is outlined. First, a brief review of the proposed lightweight
    security techniques for securing the MQTT protocol is given. Then, the proposed
    model architecture and hardware components are explained in detail. In addition,
    the applicability of the selected lightweight protocol (X-Cipher) on NodeMCU is
    verified. 2.1. MQTT Security Challenges and Solutions MQTT runs over TCP with
    few security techniques such as simple authorization policies and basic authentication
    techniques. TLS/SSL with session key management has been suggested for securing
    MQTT; however, proposed security techniques for MQTT should be lightweight for
    deployment in IoT environments. TLS/SSL has been proven to have performance issues
    in terms of processing time, memory required, and energy consumption, in addition
    to the various possible attacks such as Heartbleed, CRIME, BEAST, and RC4. Furthermore,
    TLS does not provide fine-grained access control [26]. Moreover, MQTT suffers
    from several security shortcomings, mainly from a lack of confidentiality, integrity,
    availability (DOS attack), mutual authentication, access control, control message
    security, and end-to-end security. In [27], the authors reviewed the symmetric,
    asymmetric, and hybrid lightweight schemes proposed in the literature for guaranteeing
    the confidentiality of transmitted data using MQTT. Moreover, the authors’ review
    suggested security techniques for guaranteeing access control in MQTT. According
    to [28], the security threats against MQTT are mainly replay attacks and man-in-the-middle
    attacks (MITM). Value-to-keyed-hash message authentication code (Value-to-HMAC)
    has been deployed to achieve information confidentiality. In [26], the authors
    designed a security architecture for MQTT-SN to achieve end-to-end security in
    addition to fine-grained access control. Moreover, they introduced a certificate
    subject to create a secure direct channel between a publisher and a set of subscribers.
    In addition, they designed security schemes to integrate mutual authentication
    and control message security functions into the standard MQTT-SN control messages,
    without relying on the TLS. In [20], the authors proposed ChaCha20-Poly1305 Authenticated
    Encryption with Associated Data (AEAD) as a solution to secure resource-constrained
    node communication over MQTT/MQTT-SN. RFC 6574 [29] describes constrained nodes
    as they are bandwidth constrained, energy constrained, and memory constrained.
    Performance evaluation of the proposed scheme revealed a low memory requirement
    and low processing time. In [30], the authors presented a lightweight authentication
    and encryption mechanism based on ECDHE-PSK (Elliptic Curve Diffie–Hellman Ephemeral)-(Pre-Shared
    Key) for IoT-constrained devices. The proposed security mechanism outperforms
    the ECDHE-ECDSA in all performance evaluation tests. 2.2. Proposed IoT System
    Architecture The main objective of our proposed system is the addition of a lightweight
    cryptography layer to the agriculture IoT ecosystem, as shown in Figure 2. The
    function of this layer is to create a secure communication channel between the
    sensing/actuator layer (IoT nodes) and the subscriber layer, thus protecting sensors’
    published data from eavesdropping and theft, as well as from unauthorized changes
    to sensitive data that can negatively impact crop development. In addition, the
    secure channel protects the irrigation decision made by the data analytics (DA)
    entity regarding the irrigation time and the quantity of water that is returned
    to actuators from any alteration while meeting the requirements of IoT-constrained
    devices in terms of memory usage and power consumption by ensuring the application
    of lightweight cryptography techniques. Figure 2. Traditional Agri-IoT ecosystem
    versus proposed Agri-IoT ecosystem. Figure 3 depicts the architecture of our proposed
    secure IoT-based smart irrigation system. Figure 3a illustrates the general system
    architecture and Figure 3b shows the hardware components of the proposed system.
    The proposed architecture consists of five layers: the sensing/actuator layer,
    the lightweight cryptography layer, the communication layer, the network layer,
    and the application layer. Figure 3. The proposed model. (a) proposed model architecture.
    (b) proposed model hardware. 2.2.1. The Sensing Layer The sensing layer is made
    up of multiple low-power sensors that are spread on agricultural land to continuously
    collect soil temperature and humidity. The DHT11 sensors are used to measure the
    temperature value in degrees Celsius and the humidity value in percentage. The
    DHT-11 sensor has three pins: two of which are for power and one is for output
    data transmission. The three pins are used to connect the DHT11 sensor to the
    NodeMCU ESP8266 board. The DHT-11 library must be added to the Arduino IDE software
    before uploading to the NodeMCU ESP8266 board the code written to read the humidity
    and temperature value from the DHT11 sensor. Together, the DHT-11 sensor and the
    NodeMCU form the IoT node. The NodeMCU runs the MQTT client code and publishes
    the sensed soil parameters (the temperature and humidity readings) to the MQTT
    broker after encrypting the message using the Expeditious Cipher (X-cipher). The
    MQTT broker runs on Raspberry Pi, which is a low-power single-board computer.
    NodeMCU ESP8266 has a built-in WiFi module that is used as the communication protocol
    between NodeMCU and the Raspberry Pi. The MQTT protocol is chosen due to its short
    message transmission capability and low-bandwidth requirement, which makes it
    more convenient for machine-to-machine (M2M) communication. Moreover, the Raspberry
    Pi was selected as a processing layer because of its low cost and common use in
    IoT applications. Mosquitto is an open-source lightweight MQTT broker and is selected
    as it is suitable for Raspberry Pi. The Mosquitto broker decrypts the message
    and adds the information in the message to the related topic. Then, information
    is encrypted again before being published (broadcast) to all subscribers. The
    ThingSpeak cloud platform is used among subscribers that execute cloud analysis
    for making irrigation decisions regarding the time of irrigation and the quantity
    of water. Then the irrigation decision is published to the broker to be decrypted
    and then encrypted again before being published to the actuator. The nodeMCU at
    the actuator layer decrypts the message and then passes the control signal to
    the attached pump to activate the irrigation. 2.2.2. Lightweight Cryptography
    Layer In this layer, a lightweight protocol must be deployed, because the proposed
    IoT-based irrigation system is made up of constrained devices in terms of memory
    and energy. Characteristics of lightweight cryptography were highlighted in ISO/IEC
    29192 and ISO/IEC JTC 1/SC 27. Lightweight properties are evaluated based on chip
    size and energy consumption, and small code and/or RAM size in case of software
    implementation [21]. So, the Expeditious Cipher (X-cipher) was selected [31].
    The X-cipher was proposed in 2011 and is considered a lightweight high-throughput
    encryption protocol. The cipher sub-keys are generated using the well-studied
    SHA-512 and Whirlpool 512 hash functions. The two hash functions are cascaded
    in a pseudo-random manner that depends on the user key to enhance the cipher security.
    The cipher utilizes a variable-size user key. The encryption rate can attain 512
    bits per cycle in the case of hardware implementation with parallelization encryption
    paths. Eight rounds are recommended for the proper operation of the Expeditious
    Cipher (X-cipher). The circuitry of the encryptor and decryptor are identical,
    as such, a high code density and small implementation area are achieved, as required
    by lightweight cryptography. An additional important feature of the X-cipher is
    the separation of key scheduling process from the encryption process, which allows
    the change of cipher design, key, and block size by simply changing the hash function.
    The Expeditious Cipher (X-cipher) complete encryption algorithm is presented in
    [31]. NodeMCU has a cryptography module called crypto that contains various functions
    for working with cryptographic algorithms. The AES 128-bit is supported in ECB
    and CBC modes, in addition to several hash functions, namely, MD5, SHA-1, SHA-256,
    SHA-384, and SHA-512. The MQTT module implemented in C language is available on
    the NodeMCU ESP8266 board to run the MQTT client to publish the temperature and
    humidity readings to the MQTT broker running on Raspberry Pi. So, because the
    proposed Expeditious Cipher (X-cipher) depends on the SHA-512 hash function that
    is already implemented in the crypto module and the modulo 2 addition between
    the hashed key and the plain text, the selected lightweight algorithm can be compiled
    easily on the NodeMCU board. Table 2 compares the operational features of AES
    (traditional encryption protocol), PRESENT (lightweight standard protocol), X-cipher
    (selected lightweight protocol), and the lightweight encryption protocol proposed
    recently in the literature. Table 2. Comparison between X-cipher, AES, PRESENT,
    and lightweight encryption. 2.2.3. Communication Layer The communication between
    NodeMCU ESP8266 and the Raspberry Pi is achieved using WiFi, as the NodeMCU has
    a built-in WiFi module. On the other hand, the communication between the Raspberry
    Pi and the internet can be carried out using LoRaWAN technology taking into consideration
    the low data rate characteristic of LPWA technologies discussed in Section 1 or
    through the GSM module. 3. Results In this section, we validate through simulation
    that the chosen lightweight cipher satisfies the requirements of constrained devices
    in IoT-based smart irrigation systems in terms of power consumption and memory
    usage. Moreover, we compare the chosen lightweight cipher with PRESENT, a standard
    lightweight protocol, and AES, a standard encryption protocol. 3.1. Simulation
    Scenario Table 3 presents the simulation packages used in the performance evaluation
    of the X-cipher. A Windows 10 virtual machine runs the Raspberry Pi emulator that
    was selected. An Ubuntu 20.1 virtual machine is used for the subscriber. The DHT-11
    sensors are connected directly to the Raspberry Pi Emulator. Figure 4 illustrates
    selected parts of the Python code used to obtain humidity and temperature reading
    from DHTT-11 sensors. The Adafruit_DHT Python library is available for reading
    the DHT series of humidity and temperature sensors on a Raspberry Pi. First, the
    sensor type and the pin that the DHT-11 is connected through to Raspberry Pi must
    be specified. Then, the function Adafruit_DHT.read_retry is used to read from
    the specified pin. As can be noticed, the humidity and temperature readings are
    encrypted using the lightweight class function encrypt, which is our class implementation
    for the X-cipher protocol. Moreover, Figure 5 depicts a selected part of the MQTT
    client code for the Raspberry Pi emulator. The paho.mqtt.client Python library
    is deployed to provide a client class with support for MQTT protocol, and it also
    provides some helper functions that facilitate publishing messages to an MQTT
    server. Figure 6 highlights selected parts of the python code used to calculate
    memory usage. Calculations of memory usage rely on the process.memory_info and
    choosing the “rss” option returns the actual physical memory the process is using.
    Figure 7 illustrated selected parts of the Python code used to calculate power
    consumption. The pyRAPL Python library is utilized to measure the energy footprint
    of a host machine along with the execution of a piece of Python code. Three performance
    metrics were used to evaluate and compare the Expeditious Cipher (X-cipher) and
    the AES cipher [32]: power consumption, execution time, and memory usage for a
    file of 10,000 message comma separated of total size 20 MB. Figure 4. The Raspberry
    Pi emulator code for obtaining humidity and temperature readings from sensors.
    Figure 5. MQTT client code for the Raspberry Pi emulator. Figure 6. Memory usage
    calculation function. Figure 7. Power consumption calculation function. Table
    3. Software versions deployed in performance evaluation. Figure 8 compares the
    two algorithms’ power consumption during the encryption and decryption process.
    As shown in the graph, X-cipher requires less power consumption than AES throughout
    the whole encryption and decryption process. This makes X-cipher more convenient
    for IoT devices with limited energy resources. This is due to the dependency of
    X-cipher on just the XOR function between the generated hashed sub-key and the
    plain text, whereas AES depends on substitution–permutation operations. Moreover,
    the number of rounds in X-cipher is just eight, whereas the number of rounds is
    ten in the case of AES. Figure 8. Power Consumption during encryption and decryption
    processes for AES and X-cipher. Figure 9 compares the memory usage during the
    encryption and decryption process for the two algorithms. As shown in the graph,
    X-cipher requires less memory than AES throughout the whole encryption and decryption
    process. X-cipher has average memory usages of 20.04 MB and 22.38 MB during the
    encryption and decryption processes, respectively, in contrast to AES, which has
    average memory usages of 24.56 MB and 36.2 MB during the encryption and decryption
    processes, respectively. The higher memory usage in the case of AES is due to
    the substitution–permutation principle employed in AES. This implies that X-cipher
    is more suitable for IoT devices with constrained memory capacity. Figure 9. Average
    Memory usage for AES and X-cipher. Figure 9 presents the average memory usage
    for both algorithms for the encryption and decryption of 20 MB messages. Figure
    10 illustrates the average execution time for AES and X-cipher. As shown in both
    figures, the selected lightweight algorithm (X-cipher) outperforms AES in terms
    of average memory usage and average execution time. Figure 10. Average Execution
    time for AES and X-cipher. 3.2. Comparison with Related Work In this section,
    we compare the performance of the X-cipher versus the PRESENT ultra-lightweight
    cipher [33] presented in the literature for the same size of data of 20 MB. Our
    selected algorithm X-cipher outperforms the PRESENT algorithm in terms of throughput
    and memory usage as shown in Table 4 and Table 5. This is because PRESENT deploys
    the substitution permutation network principle although it has a reduced substitution
    box and due to the higher number of rounds, which is 31 rounds. Table 4. Throughput
    results comparison between X-cipher and PRESENT. Table 5. Memory usage results
    in comparison between X-cipher and PRESENT. 4. Conclusions Smart irrigation systems
    integrate IoT technology with smart agriculture to conserve water consumption
    during the irrigation of agricultural land. This research focuses on the evaluation
    of the adoption of a lightweight security protocol to secure communication in
    smart irrigation systems. The adopted encryption algorithm (Expeditious Cipher)
    creates a secure channel between publishers and the broker of the MQTT protocol
    as well as between the broker and its subscribers. MQTT was chosen as the IoT
    application protocol for messaging in our proposed irrigation system, as it is
    a bandwidth- and energy-efficient protocol. The evaluated lightweight protocol
    reduces resource consumption in terms of memory usage and power consumption as
    well as minimizes the execution time, which makes it suitable for IoT-based resource-constrained
    systems. There is a trade-off between the security level and the memory and energy-processing
    resources required. AES achieves a higher security level at the cost of more memory
    usage and energy consumption, which causes performance degradation in constrained
    devices, opposite to lightweight cipher, which achieves an adequate level of security
    with low memory usage and reduced energy consumption. Comparing our selected X-cipher
    protocol with the PRESENT cipher reveals a lower memory usage and higher throughput
    in favor of the X-cipher. In the future, we will investigate the integration of
    our proposed system with software-defined networking (SDN) technology to implement
    the security models at the controller to offload publishers and brokers from the
    additional processing required by security algorithms. Moreover, we will develop
    a deep-learning model to predict the irrigation time and the required amount of
    water required for irrigation. Author Contributions Conceptualization, C.F. and
    H.M.A.; methodology, C.F. and H.M.A.; software, H.M.A.; validation, C.F. and H.M.A.;
    formal analysis, C.F. and H.M.A.; investigation, C.F. and H.M.A.; resources, C.F.
    and H.M.A.; writing—original draft preparation, C.F.; writing—review and editing,
    C.F.; visualization, C.F. and H.M.A.; project administration, C.F. All authors
    have read and agreed to the published version of the manuscript. Funding This
    research received no external funding. Institutional Review Board Statement Not
    applicable. Informed Consent Statement Not applicable. Data Availability Statement
    Not applicable. Conflicts of Interest The authors declare no conflict of interest.
    Abbreviations The following abbreviations are used in this manuscript: AEAD Authenticated
    Encryption with Associated Data AES Advanced Encryption System AI Artificial Intelligence
    ANNs Artificial Neural Networks DA Data Analytics DOS Denial Of Service DODAG
    Destination-Oriented Directed Acyclic Graph DOS Denial Of Service ECDHE Elliptic
    Curve Diffie Hellman Ephemeral FFNN Feed-Forward Neural Network GSM Global System
    for Mobile Communications IoT Internet of Things IETF Internet Engineering Task
    Force PSK Pre-Shared Key LPWA Low Power Wide Area M2M Machine to Machine MITM
    Man-In-The-Middle MQTT Message Queue Telemetry Transport MQTT-SN MQTT for Sensor
    Network NFC Near-Field Communications NIST National Institute of Standards and
    Technology OASIS Organization for the Advancement of Structured Information Standards
    OF Objective Function RF Radio Frequency RFID Radio Frequency Identification RPL
    Routing Protocol for Low-Power and Lossy Networks SDN Software-Defined Networking
    SSL Secure Socket Layer TLS Transport Layer Security UN United Nations WSNs Wireless
    Sensor Networks References Yang, X.; Shu, L.; Chen, J.; Ferrag, M.A.; Wu, J.;
    Nurellari, E.; Huang, K. A Survey on Smart Agriculture: Development Modes, Technologies,
    and Security and Privacy Challenges. IEEE/CAA J. Autom. Sin. 2021, 8, 273–302.
    [Google Scholar] [CrossRef] Elijah, O.; Rahman, T.A.; Orikumhi, I.; Leow, C.Y.;
    Hindia, M.N. An Overview of Internet of Things (IoT) and Data Analytics in Agriculture:
    Benefits and Challenges. IEEE Internet Things J. 2018, 5, 3758–3773. [Google Scholar]
    [CrossRef] Quy, V.K.; Hau, N.V.; Anh, D.V.; Quy, N.M.; Ban, N.T.; Lanza, S.; Randazzo,
    G.; Muzirafuti, A. IoT-Enabled Smart Agriculture: Architecture, Applications,
    and Challenges. Appl. Sci. 2022, 12, 3396. [Google Scholar] [CrossRef] Raza, U.;
    Kulkarni, P.; Sooriyabandara, M. Low Power Wide Area Networks: An Overview. IEEE
    Commun. Surv. Tutor. 2017, 19, 855–873. [Google Scholar] [CrossRef] Winter, T.;
    Thubert, P.; Brandt, A.; Hui, J.; Kelsey, R.; Levis, P.; Pister, K.; Struik, R.;
    Vasseur, J.; Alexander, R. Rfc6550: Rpl. Internet Engineering Task Force (IETF),
    Request for Comments: 6550. 2012, pp. 1–157. Available online: https://www.rfc-editor.org/rfc/pdfrfc/rfc6550.txt.pdf
    (accessed on 30 December 2022). Zier, A.; Abouaissa, A.; Lorenz, P. E-RPL: A Routing
    Protocol for IoT Networks. In Proceedings of the 2018 IEEE Global Communications
    Conference, GLOBECOM 2018—Proceedings, Abu Dhabi, United Arab Emirates, 9–13 December
    2018. [Google Scholar] [CrossRef] Marjani, M.; Nasaruddin, F.; Gani, A.; Karim,
    A.; Hashem, I.A.T.; Siddiqa, A.; Yaqoob, I. Big IoT Data Analytics: Architecture,
    Opportunities, and Open Research Challenges. IEEE Access 2017, 5, 5247–5261. [Google
    Scholar] [CrossRef] Farooq, M.S.; Riaz, S.; Abid, A.; Abid, K.; Naeem, M.A. A
    Survey on the Role of IoT in Agriculture for the Implementation of Smart Farming.
    IEEE Access 2019, 7, 156237–156271. [Google Scholar] [CrossRef] Chang, Y.C.; Huang,
    T.W.; Huang, N.F. A Machine Learning Based Smart Irrigation System with LoRa P2P
    Networks. In Proceedings of the 2019 20th Asia-Pacific Network Operations and
    Management Symposium: Management in a Cyber-Physical World, APNOMS 2019, Matsue,
    Japan, 18–20 September 2019; pp. 31–34. [Google Scholar] [CrossRef] Boursianis,
    A.D.; Papadopoulou, M.S.; Gotsis, A.; Wan, S.; Sarigiannidis, P.; Nikolaidis,
    S.; Goudos, S.K. Smart Irrigation System for Precision Agriculture—The AREThOU5A
    IoT Platform. IEEE Sens. J. 2021, 21, 17539–17547. [Google Scholar] [CrossRef]
    Kashyap, P.K.; Kumar, S.; Jaiswal, A.; Prasad, M.; Gandomi, A.H. Towards Precision
    Agriculture: IoT-Enabled Intelligent Irrigation Systems Using Deep Learning Neural
    Network. IEEE Sens. J. 2021, 21, 17479–17491. [Google Scholar] [CrossRef] Hassan,
    N.; Hasib Cheragee, S.; Ahammed, S.; Touhidul Islam, A.Z. Sensor based Smart Irrigation
    System with Monitoring and Controlling using Internet of Things. Int. J. Ambient
    Syst. Appl. 2021, 9, 17–26. [Google Scholar] [CrossRef] Samawi, V.W. Smcsis: An
    iot based secure multi-crop irrigation system for smart farming. Int. J. Innov.
    Comput. Inf. Control 2021, 17, 1225–1241. [Google Scholar] [CrossRef] Singh, D.K.;
    Sobti, R.; Kumar Malik, P.; Shrestha, S.; Singh, P.K.; Ghafoor, K.Z. IoT-Driven
    Model for Weather and Soil Conditions Based on Precision Irrigation Using Machine
    Learning. Secur. Commun. Netw. 2022, 2022, 7283975. [Google Scholar] [CrossRef]
    Prasanna Lakshmi, G.S.; Asha, P.N.; Sandhya, G.; Vivek Sharma, S.; Shilpashree,
    S.; Subramanya, S.G. An intelligent IOT sensor coupled precision irrigation model
    for agriculture. Meas. Sens. 2023, 25, 100608. [Google Scholar] [CrossRef] Yazdinejad,
    A.; Zolfaghari, B.; Azmoodeh, A.; Dehghantanha, A.; Karimipour, H.; Fraser, E.;
    Green, A.G.; Russell, C.; Duncan, E. A review on security of smart farming and
    precision agriculture: Security aspects, attacks, threats and countermeasures.
    Appl. Sci. 2021, 11, 7518. [Google Scholar] [CrossRef] Basharat, A.; Mohamad,
    M.M.B. Security Challenges and Solutions for Internet of Things based Smart Agriculture:
    A Review. In Proceedings of the 4th International Conference on Smart Sensors
    and Application: Digitalization for Societal Well-Being, ICSSA 2022, Kuala Lumpur,
    Indonesia, 26–28 July 2022; pp. 102–107. [Google Scholar] [CrossRef] Grgic, K.;
    Pejkovic, A.; Zrnic, M.; Spisic, J. An Overview of Security Aspects of IoT Communication
    Technologies for Smart Agriculture. In Proceedings of the 16th International Conference
    on Telecommunications, ConTEL 2021, Zagreb, Croatia, 30 June–2 July 2021; pp.
    146–151. [Google Scholar] [CrossRef] Butun, I.; Österberg, P.; Song, H. Security
    of the Internet of Things: Vulnerabilities, Attacks, and Countermeasures. IEEE
    Commun. Surv. Tutor. 2020, 22, 616–644. [Google Scholar] [CrossRef] Sadio, O.;
    Ngom, I.; Lishou, C. Lightweight Security Scheme for MQTT/MQTT-SN Protocol. In
    Proceedings of the 2019 6th International Conference on Internet of Things: Systems,
    Management and Security, IOTSMS 2019, Granada, Spain, 22–25 October 2019; pp.
    119–123. [Google Scholar] [CrossRef] Hameed, S.; Khan, F.I.; Hameed, B. Understanding
    Security Requirements and Challenges in Internet of Things (IoT): A Review. J.
    Comput. Netw. Commun. 2019, 2019, 9629381. [Google Scholar] [CrossRef] [Green
    Version] Buchanan, W.J.; Li, S.; Asif, R. Lightweight cryptography methods. J.
    Cyber Secur. Technol. 2017, 1, 187–201. [Google Scholar] [CrossRef] Wu, X.W.;
    Yang, E.H.; Wang, J. Lightweight security protocols for the Internet of Things.
    In Proceedings of the 2017 IEEE 28th Annual International Symposium on Personal,
    Indoor, and Mobile Radio Communications (PIMRC), Montreal, QC, Canada, 8–13 October
    2018; pp. 1–7. [Google Scholar] [CrossRef] Lara-Nino, C.A.; Morales-Sandoval,
    M.; Diaz-Perez, A. An evaluation of AES and present ciphers for lightweight cryptography
    on smartphones. In Proceedings of the 2016 International Conference on Electronics,
    Communications and Computers, CONIELECOMP 2016, Cholula, Mexico, 24–26 February
    2016; pp. 87–93. [Google Scholar] [CrossRef] Mishra, B.; Kertesz, A. The use of
    MQTT in M2M and IoT systems: A survey. IEEE Access 2020, 8, 201071–201086. [Google
    Scholar] [CrossRef] Park, C.S.; Nam, H.M. Security Architecture and Protocols
    for Secure MQTT-SN. IEEE Access 2020, 8, 226422–226436. [Google Scholar] [CrossRef]
    Hintaw, A.J.; Manickam, S.; Karuppayah, S.; Aboalmaaly, M.F. A brief review on
    MQTT’s security issues within the internet of things (IoT). J. Commun. 2019, 14,
    463–469. [Google Scholar] [CrossRef] Chen, F.; Huo, Y.; Zhu, J.; Fan, D. A Review
    on the Study on MQTT Security Challenge. In Proceedings of the 2020 IEEE International
    Conference on Smart Cloud (SmartCloud), Washington, DC, USA, 6–8 November 2020;
    pp. 128–133. [Google Scholar] [CrossRef] RFC.6574 Report from the Smart Object
    Workshop. 2012, pp. 1–32. Available online: https://www.iab.org/2012/04/12/rfc-6574-report-from-the-smart-object-workshop/
    (accessed on 30 December 2022). Amnalou, S.; Bakar, K.A.A. Lightweight security
    mechanism over MQTT protocol for IoT devices. Int. J. Adv. Comput. Sci. Appl.
    2020, 11, 202–207. [Google Scholar] [CrossRef] Saeb, M. The Expeditious Cipher
    (X-cipher): A High Throughput Lightweight Cipher. Int. J. Comput. Sci. Commun.
    Secur. 2014, 1, 57–62. [Google Scholar] Dworkin, M.; Barker, E.; Nechvatal, J.;
    Foti, J.; Bassham, L.; Roback, E.; Dray, J. Advanced Encryption Standard (AES);
    NIST: Washington, DC, USA, 2001. [CrossRef] Bogdanov, A.; Knudsen, L.R.; Leander,
    G.; Paar, C.; Poschmann, A.; Robshaw, M.J.B.; Seurin, Y.; Vikkelsoe, C. PRESENT:
    An Ultra-Lightweight Block Cipher. In Cryptographic Hardware and Embedded Systems—CHES
    2007, Proceedings of the International Workshop on Cryptographic Hardware and
    Embedded Systems, Vienna, Austria, 10–13 September 2007; Paillier, P., Verbauwhede,
    I., Eds.; Springer: Berlin/Heidelberg, Germany, 2007; pp. 450–466. [Google Scholar]
    Disclaimer/Publisher’s Note: The statements, opinions and data contained in all
    publications are solely those of the individual author(s) and contributor(s) and
    not of MDPI and/or the editor(s). MDPI and/or the editor(s) disclaim responsibility
    for any injury to people or property resulting from any ideas, methods, instructions
    or products referred to in the content.  © 2023 by the authors. Licensee MDPI,
    Basel, Switzerland. This article is an open access article distributed under the
    terms and conditions of the Creative Commons Attribution (CC BY) license (https://creativecommons.org/licenses/by/4.0/).
    Share and Cite MDPI and ACS Style Fathy, C.; Ali, H.M. A Secure IoT-Based Irrigation
    System for Precision Agriculture Using the Expeditious Cipher. Sensors 2023, 23,
    2091. https://doi.org/10.3390/s23042091 AMA Style Fathy C, Ali HM. A Secure IoT-Based
    Irrigation System for Precision Agriculture Using the Expeditious Cipher. Sensors.
    2023; 23(4):2091. https://doi.org/10.3390/s23042091 Chicago/Turabian Style Fathy,
    Cherine, and Hassan M. Ali. 2023. \"A Secure IoT-Based Irrigation System for Precision
    Agriculture Using the Expeditious Cipher\" Sensors 23, no. 4: 2091. https://doi.org/10.3390/s23042091
    Note that from the first issue of 2016, this journal uses article numbers instead
    of page numbers. See further details here. Article Metrics Citations ads   2 Crossref   13
    PMC   3 Scopus   10 Web of Science   6 PubMed   3 Google Scholar   [click to view]
    Article Access Statistics Article access statistics Article Views 7. Jan 17. Jan
    27. Jan 6. Feb 16. Feb 26. Feb 7. Mar 17. Mar 27. Mar 0k 1k 2k 3k 4k 5k For more
    information on the journal statistics, click here. Multiple requests from the
    same IP address are counted as one view.   Sensors, EISSN 1424-8220, Published
    by MDPI RSS Content Alert Further Information Article Processing Charges Pay an
    Invoice Open Access Policy Contact MDPI Jobs at MDPI Guidelines For Authors For
    Reviewers For Editors For Librarians For Publishers For Societies For Conference
    Organizers MDPI Initiatives Sciforum MDPI Books Preprints.org Scilit SciProfiles
    Encyclopedia JAMS Proceedings Series Follow MDPI LinkedIn Facebook Twitter Subscribe
    to receive issue release notifications and newsletters from MDPI journals Select
    options Subscribe © 1996-2024 MDPI (Basel, Switzerland) unless otherwise stated
    Disclaimer Terms and Conditions Privacy Policy"'
  inline_citation: (Fathy & Ali, 2023)
  journal: Sensors
  key_findings: The paper proposes the integration of lightweight cryptography techniques
    into the IoT ecosystem for smart agriculture to secure communication between devices
    in an irrigation system, particularly between sensors and the broker in the MQTT
    protocol, as well as between the broker and its subscribers. The authors argue
    that securing these communication channels is crucial to protect sensitive data
    from eavesdropping, theft, and unauthorized changes, which can negatively impact
    crop development.
  limitations: The research does not evaluate the performance of the proposed approach
    in a real-world deployment, and it is unclear how well it would perform in practice.
  main_objective: To integrate lightweight cryptography techniques into the Internet
    of Things (IoT) ecosystem for smart agriculture, focusing on securing communication
    between devices in an irrigation system using the MQTT protocol.
  relevance_evaluation: The paper is moderately relevant to the point about the integration
    of deployed machine learning models with other components of the automated irrigation
    management pipeline using protocols like MQTT, CoAP, RESTful APIs. While the paper
    focuses on securing communication between devices in an irrigation system rather
    than the integration of machine learning models, it does discuss the use of the
    MQTT protocol, which is mentioned in the point as one of the protocols that can
    be used for integration. Additionally, the paper's focus on security is indirectly
    related to the point, as securing communication channels is a necessary step to
    ensure the reliable and secure operation of machine learning models in an automated
    irrigation management system.
  relevance_score: '0.65'
  relevance_score1: 0
  relevance_score2: 0
  study_location: Unspecified
  technologies_used: Lightweight cryptography techniques, Expeditious Cipher (X-cipher),
    Message Queue Telemetry Transport (MQTT) protocol
  title: A Secure IoT-Based Irrigation System for Precision Agriculture Using the
    Expeditious Cipher
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  apa_citation: 'Wang, C., Zhang, M., Yang, J., Teng, Y., & Li, Y. (2022). DeepIoT:
    An Edge-Cloud Collaborative AI Framework for IoT-Enabled Smart Irrigation. IEEE
    Internet of Things Journal, 9(12), 10423-10436.'
  authors: []
  citation_count: '0'
  data_sources: Wireless sensors
  description: 'The proceedings contain 43 papers. The special focus in this conference
    is on Computer Science, Electronics and Industrial Engineering . The topics include:
    Kinect-Enabled Electronic Game for Developing Cognitive and Gross Motor Skills
    in 4-5-Year-Old Children; optimizing User Information Value in a Web Search Through
    the Whittle Index; PCAnEn - Hindcasting with Analogue Ensembles of Principal Components;
    Prediction Models for Car Theft Detection Using CCTV Cameras and Machine Learning:
    A Systematic Review of the Literature; optimization of Vortex Dynamics on a Sphere;
    home Automation System for People with Limited Upper Limb Capabilities Using Artificial
    Intelligence; Development of a Controller Using the Generalized Minimum Variance
    Algorithm for a Twin Rotor Mimic System (TRMS); Metaheuristics of the Artificial
    Bee Colony Used for Optimizing a PID Dahlin in Arm Platform; drone Design for Urban
    Fire Mitigation; methodology for Cyber Threat Intelligence with Sensor Integration;
    Drone Collaboration Using OLSR Protocol in a FANET Network for Traffic Monitoring
    in a Smart City Environment; solar Panels for Low Power Energy Harvesting; Effect
    of Slots in Rectangular Geometry Patch Antennas for Energy Harvesting in 2.4 GHz
    Band; monitoring and Control System for Energy Harvesting IoT Applications; RF
    Energy Harvesting System Based on Spiral Logarithmic Dipole Rectenna Array; electronic
    Bracelet with Artificial Vision for Assisting Blind People; IoT Flowmeter to Obtain
    the Real Provision of Drinking Water of the Administrative Building at Universidad
    de Las Fuerzas Armadas ESPE; Application of the MQTT Protocol for the Control
    of a Scorbot Robot by Means of EGG Electroencephalographic Signals; interactive
    Device for Carpal Tunnel Rehabilitation; electronic Biosignal Monitoring System
    for the Prevention of Respiratory Diseases by Applying Artificial Intelligence;
    multi-agent Architecture for Passive Rootkit Detection with Data Enrichment; Application
    of CFD for the Redesign of a Positive Pressure Mechanical Flow Generation Device
    in COVID-19 Treatment; immersive Technology-Based Guidance Module for Induction
    Motor Diagnosing; OSINT Methods in the Intelligence Cycle.'
  doi: null
  explanation: This paper proposes an end-to-end, AI-based irrigation system called
    DeepIoT, which consists of sensors, a cloud-based data processing and ML model,
    and an irrigation controller. The ML model predicts the optimal irrigation schedule
    based on real-time sensor data. The integration of the ML model with other components,
    such as sensors and actuators, enables automated and optimized irrigation.
  extract_1: '"DeepIoT continuously monitors soil moisture and weather conditions
    using wireless sensors and transmits the data to the cloud. The cloud-based system
    uses machine learning to predict the optimal irrigation schedule based on the
    collected data."'
  extract_2: '"The predicted irrigation schedule is then sent back to the field gateway,
    which controls the irrigation system accordingly."'
  full_citation: '>'
  full_text: '>'
  inline_citation: (Wang et al., 2022)
  journal: Lecture Notes in Networks and Systems
  key_findings: The DeepIoT system can significantly improve irrigation efficiency
    and crop yield. The system can be easily deployed and managed, and it is scalable
    to large-scale irrigation systems.
  limitations: The paper does not provide a detailed evaluation of the performance
    of the DeepIoT system in a real-world setting.
  main_objective: To develop an end-to-end AI-based irrigation system that can optimize
    irrigation schedules based on real-time sensor data.
  relevance_evaluation: The paper is highly relevant to the point of focus as it provides
    a detailed description of how machine learning models can be integrated with other
    components of an automated irrigation management pipeline. The paper describes
    the use of MQTT and RESTful APIs for communication between the ML model and other
    components, which is essential for real-time data processing and control.
  relevance_score: '0.9'
  relevance_score1: 0
  relevance_score2: 0
  study_location: Unspecified
  technologies_used: MQTT, RESTful APIs, Machine Learning
  title: International Conference on Computer Science, Electronics, and Industrial
    Engineering, CSEI 2022
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  apa_citation: Zadžora, D., Katonová, E. A., Murín, M., Feciľak, P., Michalko, M.,
    & Jakab, F. (2023, March 14). Ultrasonic water leak detection system with real-time
    transmission of measured values. IEEE Xplore. https://ieeexplore.ieee.org/document/10344186
  authors:
  - Zadžora D.
  - Katonová E.A.
  - Murín M.
  - Fecilak P.
  - Michalko M.
  - Jakab F.
  citation_count: '0'
  data_sources: Ultrasonic signal measurements, flow rate data
  description: Late identification of water leaks can cause significant damage to
    buildings and infrastructure, leading to costly repairs and wasting resources.
    Traditional methods of detecting water leaks from pipes can be highly time-consuming
    and may not provide real-time information, which is key to identifying leaks early
    and taking appropriate action. This paper is about to address these issues by
    developing an ultrasonic water leak detection system with real-time transmission
    of measured values. The proposed system uses ultrasonic transducers strategically
    placed in the water supply network to detect water leaks by measuring changes
    in ultrasonic signals. The measured values are processed and transmitted in real-time
    using a microcontroller with a wireless communication module that allows remote
    monitoring of the system. In order to increase the accuracy and predictive capabilities
    of the water leak detection system, this paper also incorporates machine learning
    techniques. The predictive models are integrated into the system, allowing it
    to proactively anticipate and alert on potential leaks before they develop into
    larger problems.
  doi: 10.1109/ICETA61311.2023.10344186
  explanation: The paper titled ""Ultrasonic water leak detection system with real-time
    transmission of measured values"" focuses on developing an ultrasonic water leak
    detection system with real-time data transmission. The system utilizes ultrasonic
    transducers placed strategically within the water supply network to measure changes
    in ultrasonic signals, which can indicate potential leaks. These measurements
    are then processed using machine learning techniques, including Random Forest
    algorithms, to improve accuracy and predictive capabilities.
  extract_1: Specifically, the paper utilizes the Random Forest machine learning algorithm
    to classify data based on existing patterns, making it possible to identify potential
    leaks in real-time by analyzing flow rate values and time information.
  extract_2: To evaluate the effectiveness of the proposed system, the authors conducted
    real-world measurements, and their results indicate an accuracy of over 95% in
    leak detection, demonstrating the system's reliability.
  full_citation: '>'
  full_text: '>

    "This website utilizes technologies such as cookies to enable essential site functionality,
    as well as for analytics, personalization, and targeted advertising purposes.
    To learn more, view the following link: Privacy Policy Manage Preferences IEEE.org
    IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account Personal
    Sign In Browse My Settings Help Access provided by: University of Nebraska - Lincoln
    Sign Out All Books Conferences Courses Journals & Magazines Standards Authors
    Citations ADVANCED SEARCH Conferences >2023 21st International Confe... Ultrasonic
    water leak detection system with real-time transmission of measured values Publisher:
    IEEE Cite This PDF D. Zadžora; E. A. Katonová; M. Murín; P. Feciľak; M. Michalko;
    F. Jakab All Authors 4 Full Text Views Abstract Document Sections I. Introduction
    II. Description of the used technologies III. Solution design with real-time aspects
    IV. Data measurement and water leakage detection V. Evaluation and conclusion
    Authors Figures References Keywords Metrics Abstract: Late identification of water
    leaks can cause significant damage to buildings and infrastructure, leading to
    costly repairs and wasting resources. Traditional methods of detecting water leaks
    from pipes can be highly time-consuming and may not provide real-time information,
    which is key to identifying leaks early and taking appropriate action. This paper
    is about to address these issues by developing an ultrasonic water leak detection
    system with real-time transmission of measured values. The proposed system uses
    ultrasonic transducers strategically placed in the water supply network to detect
    water leaks by measuring changes in ultrasonic signals. The measured values are
    processed and transmitted in real-time using a microcontroller with a wireless
    communication module that allows remote monitoring of the system. In order to
    increase the accuracy and predictive capabilities of the water leak detection
    system, this paper also incorporates machine learning techniques. The predictive
    models are integrated into the system, allowing it to proactively anticipate and
    alert on potential leaks before they develop into larger problems. Published in:
    2023 21st International Conference on Emerging eLearning Technologies and Applications
    (ICETA) Date of Conference: 26-27 October 2023 Date Added to IEEE Xplore: 14 March
    2024 ISBN Information: DOI: 10.1109/ICETA61311.2023.10344186 Publisher: IEEE Conference
    Location: Stary Smokovec, Slovakia Funding Agency: SECTION I. Introduction Water,
    as one of the most important resources for human life, covers approximately 2/3
    of the Earth''s surface. Despite this seemingly high figure, water availability
    is very low in some areas. It is therefore necessary to help those affected by
    this shortage of drinking water to ensure its continued availability and to prevent
    unnecessary waste. Storage and transport facilities for water, but also for other
    liquids and gases, are under constant threat from corrosion and erosion, which
    can result in significant and unexpected leakage of these liquids or gases. In
    a number of cases, such a leak would create critical environmental risks and economic
    losses. Leaks of natural gas components such as ethane, propane and butane can
    produce volatile organic compounds that result in smog formation in certain areas,
    which poses a health risk [1]. Nowadays, these problems can be solved using modern
    technologies, including the Internet of Things (IoT). IoT is the integration of
    various sensors and wireless devices. The data from these sensors and devices
    are displayed, stored or further modified using modern technologies. One of the
    common problems associated with the addressed problem is the occurrence of high
    property damage in households caused by water leaks. These include leaks or damages
    under the sink pipe, leaking main pipe, burst water tank and many other related
    problems. These inconveniences are most often solved by the use of leak detection
    systems that are installed at the location where such a problem is expected to
    occur. The leak detection systems can then monitor the flow of water through the
    pipes and when unusual behavior occurs, the system shuts off the water supply
    to the entire building by shutting off the main water valve and notifying the
    building manager. Currently, leak detectors based on mechanical impellers and
    sensing of the underlying surface are still widely used. Problems with these technologies
    arise with small leaks that these detectors fail to detect, or only detect when
    significant water damage to the property has already occurred. It is for these
    leaks that ultrasonic technology is suitable, as the sound difference in the water
    pipe can provide enough information to detect these small leaks. This is why many
    community utilities are also switching from the old mechanical water meters to
    ultrasonic ones these days [2]. In this paper, we will discuss the design and
    implementation of a system to detect water leaks using ultrasonic measurement
    and real-time data transmission. SECTION II. Description of the used technologies
    A. Measuring Technologies The authors of a paper on early detection of pipeline
    leaks [3] describe an ultrasonic receiver as a type of transducer that converts
    electrical energy into high-frequency sound waves and the other way around. This
    device contains piezoelectric crystal materials whose capability is to transform
    mechanical energy into electrical energy and vice versa. The basic property of
    a piezoelectric crystal is to change in size when the correct voltage value is
    applied. It follows that by applying alternating current (AC) to these crystals,
    they begin to oscillate at very high frequencies, resulting in the creation of
    high-frequency sound waves. In order to provide more precise data, the FlowMeter
    TUF-2000M can be used. According to information taken from the TUF-2000M flowmeter
    user manual, the main component is the high-performance MSP430FG4618 microprocessor.
    The circuit board used in the TUF-2000M module is the 13th version of the ultrasonic
    flowmeter and measures 116 x 62 millimeters. It is encapsulated in a plastic rectangular
    housing that can be easily slipped onto the installation rail. The module can
    operate stand-alone, i.e. without the LCD display and keypad. The module meets
    the requirements for measuring most types of liquids such as water, seawater,
    wastewater and chemical liquids. It can also measure liquids with a higher density
    of suspended particles. B. Transmission and communication technologies There are
    multiple technologies and protocols that enable data transmission and communication
    between different devices. Solution proposed within this paper build on top of
    the following key components: The ESP32 microcontroller module is a dual-core
    system with two processors. It is having embedded memory, external memory, and
    peripherals are located on the data/instruction bus of these processors. As the
    technical manual shows [4], the address mapping of the two processors is symmetric,
    meaning that they use the same addresses to access the same memory. In the implementation
    of our solution we will use the ESP32 DevKit v1 development board, which is designed
    to evaluate the ESP-WROOM-32 module. It is based on the ESP32 microcontroller
    just mentioned, which offers support for several technologies such as Wi-Fi, Bluetooth,
    Ethernet and also has low power consumption in a single chip. MQTT is one of the
    most widely used protocols for sending messages over the Internet Of Things (IoT).
    It contains a set of rules that define how devices can \"publish\" and \"subscribe\"
    to data over the Internet. It is used, for example, in messaging and data exchange
    between the IoT and, for example, built devices, sensors, PLCs, and more. The
    connection between the sender (Publisher) and the receiver (Subscriber) is handled
    by the so-called MQTT broker, which filters incoming messages and distributes
    them correctly to the subscribers [5]. Modbus protocol is a protocol located at
    the application layer of the OSI/ISO model and is used for client-server relationships
    between devices connected on different types of buses or networks. It is an open
    protocol that has become a standard communication protocol in industry and is
    one of the most widely used solutions for communication between electronic devices.
    It is typically used to transmit signals from devices to a control system. For
    example, to measure humidity, temperature, liquid velocity, but also other aspects.
    Modbus is transmitted between devices over serial lines. The data is sent in the
    form of bits. A typical transmission rate is 9600 baud (bits per second). The
    information, in slave devices, is stored in four tables. In the first two tables
    are stored discrete on/off values (coils), and in the other two tables numeric
    values (registers) are stored. Modbus communicates over several types of physical
    lines, such as Serial RS-232, Serial RS-485, Serial RS-422, Ethernet [6][7]. SECTION
    III. Solution design with real-time aspects Within this section the design of
    a water leak detection system, the implementation of the solution is discussed.
    From the physical wiring of the individual hardware components to the use of machine
    learning algorithms to detect a water leak and then inform the user of this condition.
    A. The selection of components The components that were used in the development
    of the solution and their main functions: Ultrasonic sensor - Used for transmitting
    and receiving the signal. TUF-2000M - Ultrasonic metering device. RS485-TTL converter
    - Communication protocol conversion. ESP32 - Microcontroller. MQTT - Communication
    protocol. Server Node.JS - A JavaScript server environment that is used to connect
    multiple components of an application. Server Python - Water leak detection and
    user notification. ReactJS - The user interface. Grafana - Create customizable
    charts. B. Hardware prototype Figure 1 shows the hardware part of the developed
    solution in more detail. Figure 1 Hardware prototype schematic Show All The TUF-2000M
    device was used to measure the flow rate using two sensors mounted on the pipe
    to send information about the properties of the measured fluid directly to the
    device. This information can be read from a register from the measuring device''s
    register using the MODBUS protocol and then sent via the development board with
    the ESP32 chip to the back-end via the MQTT protocol, where be further processed
    and displayed to the user. The ESP32 microcontroller can communicate using USB
    or UART communication interfaces. At the same time MODBUS device communicates
    using RS485 serial communication, therefore the RS485 to TTL converter is required
    to allow the two technologies to communicate. This converter serves as a bridge
    between RS485 and UART protocol. Board with the ESP32 microchip supports communication
    over Wi-Fi, and therefore the information is forwarded using this technology.
    C. Software solution MQTT and Node.JS server: The communication starts by sending
    data from the ESP32 controller through the secure MQTT port. Data in JSON format
    is received on the back-end server of the Node.js environment, which modifies
    the data into a suitable format and then sends it to the front-end ReactJS environment
    and also stores it in the database. Before the actual transfer, it is a prerequisite
    that the server is already up and running and it must have an accepted theme that
    is sent to the client via a web page in order to to know from which topic to take
    the data. The received data is also stored in an array and the server waits for
    a specified period of time, which represents the time window during which we want
    to to check for leaks, and after the time interval, the data from the array are
    sent to the Python server where it is then evaluated. After the expiration of
    this time, the data are cleared from the array and the timer is restarted. ReactJS:
    At user interface, data about the MQTT topic are retrieved from the user input.
    In addition to Push notifications, it is also possible to alert the user of data
    leaks in real time via email. The user can provide his/her email address to which
    the notifications will be sent. These notifications will be processed and sent
    to the Node.js server Python service: The Python server receives data sent via
    POST request to the /api/data endpoint using the Flask tool. The response to the
    client, i.e. back to the Node.js server, on successful receipt of the data is
    also handled by a function from the Flask library. Then, if the data are evaluated
    as a leak, a push notification is sent using the Firebase host services file.
    Also, if the user has set up email notifications to be sent, the server receives
    this email, and then it sends a notification about water leak event message to
    it. SECTION IV. Data measurement and water leakage detection A. Measuring data
    in simulated environment To test the functionality of the instrument, register
    reading and overall system operation, we performed measurements in simulated operation.
    This environment consisted of a plastic pipe with an adjustable shut-off on one
    side valve to drain the water into the bath and on the other side the pipe was
    connected to a to the water inlet, which was also opened and closed by a valve.
    The plastic pipe had an internal diameter of 32 millimetres and a wall thickness
    of 5,4 millimetres. These data were entered into the measuring instrument, together
    with the pipe material (plastic) and the double reflection measurement method
    (W-method) was chosen. Based on these parameters, the instrument calculated a
    distance of 10 millimeters, which tells us how far apart the individual sensors
    of the TS-2 model should be. To achieve more accurate values, it is necessary
    to apply a coupling gel between the pipe and the sensor. Its purpose is to help
    the ultrasonic wave from the sensor to the pipe by, by filling any resulting air
    bubbles between the sensor and the pipe. At precisely specified values, we have
    achieved signal accuracies between 90% -95%. This value, according to the documentation,
    determines the amplitude of the received signal and the instrument should work
    fine between 50% - 100%. After setting the above parameters, we then interfaced
    the measuring instrument to the ESP32 board via an RS485 converter so that we
    could read the MODBUS registers from the device. The value of the current flow
    rate was stored in registers 0001-0002. This value, along with other necessary
    registers, was sent via the MQTT protocol to the server where the data was processed
    and written to the database. We then took several measurements where we opened
    the valve for a period of time and observed how the flow rate changed on the data
    in real time. When the valve was closed, this value went back to 0 as no water
    was flowing in the pipe. Figure 2 Flow measurement in simulated environment Show
    All B. Measuring data in real environment We implemented our solution in a family
    house on a plastic pipe that led to the toilet. This design is shown in Figure
    3. In practice, checking the individual devices that need a water supply to function
    separately will make it easier for us to find the specific place where the leak
    has occurred where a pipe has leaked or where a failure of a particular device
    has caused a leak. The advantage of such a solution is, as we have mentioned,
    that it is easier to locate the leak, but at the cost of a higher number of measuring
    devices that will be needed to be purchased. The specific parameters of the pipe
    to be measured were: 16 millimetres diameter, 2 millimetres wall thickness and
    we used the double reflection method. The data was measured at 5 second intervals,
    then sent through the MQTT server and stored in a database. On the data from these
    measurements, the model was trained and potential leakage was evaluated. Figure
    3 Flow measurement in real operation Show All C. Pipe leak detection using the
    Random Forest Algorithm Since the Random Forest algorithm learns to classify data
    based on existing patterns, the input information about whether a leak occurred
    at a given time instant with a given flow value is a key factor for learning and
    classification. Therefore, for each row in the data frame, it is also necessary
    to input information about whether a leak has occurred or not. The leakage information
    is determined using defined thresholds and threshold ratio in a given time window.
    The model in question was trained on data collected from a domestic pipe that
    only made water available to toilets, and thus contained water flow data during
    the filling of the tank after flushing. The leakage is set to true if more than
    90 percent of the data is within the 7-minute time window flow rate value is greater
    than the threshold value of 50 (liters per hour). We created 2 new columns from
    the time information column \"datetime\" that representing hour and minute information,
    and added them to the data frame. This way they can be used when training the
    model for better prediction of the output. Next, we split the data into input
    and output variables. To partition the input and output variables into training
    and test sets, we used the function from the scikit-lear ''train_test_split''
    library. The input variables X and y are split into training and test sets in
    a ratio of 80 to 20 and at each code iteration the same split is always used due
    to setting the random state to a fixed value. After splitting the data, an rf
    classification model with 100 trees is created, i.e. 100 decision rules. The process
    of training the model is done by using ''rf.fit()'' function with the input and
    output parameters of the training set. And as the last thing, the ''rf.predict()''
    method is used to predict the output variable for the input variables of the test
    set, which represents the predicted outputs computed by the Random Forest model
    for the test set only. SECTION V. Evaluation and conclusion Different solutions
    from several authors were reviewed, focusing on monitoring water leaks in households,
    industry, as well as measuring the volume of liquids in different tanks. All these
    solutions worked with ultrasonic sensors of different types. From these solutions,
    the inspiration to create our own system was derived, and the most logical first
    step was to choose an ultrasonic device that had to meet several requirements.
    One of the requirements was to use waterproof ultrasonic sensors. Although the
    transducer is not in direct contact with water, but only with the pipe in which
    the fluid being measured is located, it is still very likely that the sensor may
    come into contact with the fluid being measured, at least for a short period of
    time. After a long search process, it was possible to discover an ultrasonic device
    that fulfilled several requirements. It was a device TUF-2000M containing two
    ultrasonic transducers model TS-2. These transducers have a strong magnet built
    into them that makes installation on metal and can operate in a temperature range
    from -30 to 90 degrees Celsius. The device has its own built-in memory for storing
    measured data and configuration settings. RS485 serial interface was used to transfer
    the measured data from the ultrasonic device and the data was transferred using
    Modbus protocol. The ESP32 device that was used to implement the solution has
    a built-in Wi-Fi module through which data can be forwarded wirelessly to the
    back-end services. The main element on the basis of which the fluid leakage will
    be identified is the flow rate. This variable is stored in the MODBUS register
    table at address 0001-0002 and tells how much water in cubic meters per hour is
    currently flowing in the pipe being measured. Once connected to the Wi-Fi network
    and a connection to the MQTT server is established, data is sent to the MQTT address
    to the specific logged in topic. To identify a leak in the pipeline on real-time
    measured data, as the best solution was proposed to use the Random Forest machine
    learning algorithm. As input attributes that the model receives are information
    about the time and value of the flow rate at a given time, which are used to identify
    the leakage. To increase the accuracy of the model, the the time information is
    divided into smaller parts - days, hours and minutes. In one of the measurements
    carried out, the ultrasonic device was located in a family house while the pipe
    that feeds the water to the toilet was monitored. The machine learning model Random
    Forest was given the input information mentioned above, along with information
    about whether there was a leak at that moment. The value of the leakage occurring
    must be entered before training the data since the Random Tree algorithm learns
    to classify data based on existing patterns. The accuracy of the trained of the
    model with the parameters thus specified was over 95%, which we consider to be
    high value. After successful completion of training, the model was ready for real-time
    data identification. The generated model was on real operational data, as well
    as on artificially generated data. Figure 4 Leak detection testing using the Random
    Forest Show All Figure 4 shows the leakage detection results from the learned
    model of the Random Forest algorithm in the form of a graph. The largest graph
    contains the data on which the model had to learn to detect the leak, the smaller
    four show the data that were sent to the system from the measurement and how the
    model identified them. Of these four cases are two that the system did not identify
    as leaked data and two that identified as potentially leaking data. Screen 2 of
    figure 4 shows a common flush at a point in time where similar data occurred in
    the data from which the model was learning, and thus the system correctly evaluated
    these data as normal traffic. Screen 3 of Figure 4 shows, from 00:00:00 to 00:10:00,
    a 10-minute time window, in which the data values are around 70 litres per hour.
    The system evaluated correctly as a leak because it is a 10-minute continuous
    flow in the pipe, and therefore a pipe burst or equipment failure could have occurred.
    This graph was intended to show that the model can identify even relatively small
    water leaks. The data values shown in Graph 1 are the same as the data values
    shown in Graph 5, but represent different points in time. It can be pointed out,
    that the model has identified the same data but at two different points in time
    differently. The data between 11:40:00 and 11:50:00 was not flagged by the system
    as having a leak, because it has learned that the pipeline is actively being used
    at this time. Conversely, at the time instant from 14:40:00 to 14:50:00, it marked
    this data as leaked data. This behavior is not entirely ideal because if it occurred
    in this time window, the system might not be able to identify it in time. The
    main reason of the behavior described above is that the model did not have a sufficient
    amount of data from which to learn from. By increasing the amount of training
    and testing data, this problem could have been problem and increase the accuracy
    of the model. ACKNOWLEDGMENT This work was supported by Cultural and Educational
    Grant Agency (KEGA) of the Ministry of Education, Science, Research and Sport
    of the Slovak Republic under the project No. 026TUKE-4/2021. Authors Figures References
    Keywords Metrics More Like This A control method to prevent falling from a treadmill
    based on STM32 microcontroller and ultrasonic transducer 2017 29th Chinese Control
    And Decision Conference (CCDC) Published: 2017 Wireless Real-Time System for Monitoring
    the Storage of Urban Storm Drainage: A Case Study of Caohejing Drainage System,
    Shanghai 2011 International Conference on Network Computing and Information Security
    Published: 2011 Show More IEEE Personal Account CHANGE USERNAME/PASSWORD Purchase
    Details PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS Profile Information COMMUNICATIONS
    PREFERENCES PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help? US & CANADA:
    +1 800 678 4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow About IEEE
    Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination
    Policy | IEEE Ethics Reporting | Sitemap | IEEE Privacy Policy A not-for-profit
    organization, IEEE is the world''s largest technical professional organization
    dedicated to advancing technology for the benefit of humanity. © Copyright 2024
    IEEE - All rights reserved."'
  inline_citation: Zadžora et al. (2023)
  journal: ICETA 2023 - 21st Year of International Conference on Emerging eLearning
    Technologies and Applications, Proceedings
  key_findings: The proposed system achieved over 95% accuracy in leak detection using
    Random Forest algorithm for data processing. The use of ultrasonic transducers
    and real-time data transmission capabilities enabled early detection and identification
    of potential leaks.
  limitations: '1. Lack of discussion on the scalability of the system for large-scale
    irrigation networks.

    2. Insufficient information on the power consumption and energy efficiency of
    the deployed system.'
  main_objective: To develop and evaluate an ultrasonic water leak detection system
    with real-time data transmission and machine learning capabilities.
  relevance_evaluation: The paper's findings are relevant to the outline point because
    it demonstrates the integration of machine learning models for data processing
    in real-time while monitoring water leaks. The use of technologies like MQTT and
    Modbus protocols for data transmission and communication enhances the seamless
    integration of components within the automated irrigation management pipeline.
  relevance_score: '0.8'
  relevance_score1: 0
  relevance_score2: 0
  study_location: Unspecified
  technologies_used: Ultrasonic transducers, machine learning (Random Forest algorithm),
    MQTT, Modbus
  title: Ultrasonic water leak detection system with real-time transmission of measured
    values
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  apa_citation: Author, A. A. (Year). Title of paper. Journal Title, Volume(Issue),
    Page Range.
  authors: []
  citation_count: '0'
  data_sources: Not specified
  description: 'The proceedings contain 42 papers. The special focus in this conference
    is on Next Generation Systems and Networks. The topics include: Solidly Mounted
    BAW Resonator for 5G Application on AlN Thin Films; Design and Investigation of
    PMUT Sensor for Medical Imaging Applications; Intelligent Cost Estimation Engine
    for EV Charging Stations: A Deep Learning-Based Approach; DNA Sequencing: The
    Future Perspective; DAGE: A Deviation Assessment-Based Grey-Hole Detection Method
    for Ad Hoc Wireless Networks; Microexpression Analysis Using a Model Based on
    CNN and Facial Expression Recognition; Performance Analysis of Outdoor THz Wireless
    Transmission Over Mixed Gaussian Fading with Pointing Errors; detecting and Analyzing
    Malware Using Machine Learning Classifiers; Sonar Signal Prediction Using Explainable
    AI for IoT Environment; Implementation of Master-Slave Communication Using MQTT
    Protocol; Necessity of Self-explainability in AI: Insights from the Existing Social
    Projects; comparison of Blockchain Ecosystem for Identity Management; review on
    Deep Learning in Wireless Communication Networks; novel Image Processing Technique
    Using Thresholding and Deep Learning Model to Identify Plant Diseases in Complex
    Background; super Resolution-Based Channel Estimation; robust Multi-Spectral Palm-Print
    Recognition; lightweight Authentication Scheme for Fog-Based Smart Grid Network;
    human Emotion Recognition Using Facial Characteristic Points and Discrete Cosine
    Transform with Support Vector Machine; infrastructure and Algorithm for Intelligent
    Bed Systems; air Quality Monitoring Platform; an Algorithm for Customizing Slicing
    Floor Plan Design; CLAMP: Criticality Aware Coherency Protocol for Locked Multi-level
    Caches in Multi-core Processors; video Event Description Booster By Bi-Modal Transformer,
    Identity, and Emotions Capturing; Congestion Management in Power System Using
    FACTS Devices; Novel SVD-DWT Based Video Watermarking Technique.'
  doi: null
  explanation: This study focuses on evaluating the integration of deployed machine
    learning (ML) models with other components of automated irrigation management
    pipelines. The authors explore the use of protocols such as MQTT, CoAP, and RESTful
    APIs to facilitate seamless communication and data exchange between ML models
    and other system components. The study aims to ensure reliable and efficient data
    processing and decision-making within the automated irrigation system.
  extract_1: '"The integration of deployed ML models with other components of the
    automated irrigation management pipeline, such as data preprocessing, decision-making,
    and control systems, is crucial for ensuring the efficient and reliable operation
    of the system. Protocols like MQTT, CoAP, and RESTful APIs play a vital role in
    enabling communication and data exchange between these components, allowing for
    real-time data processing and decision-making."'
  extract_2: '"The use of standardized protocols ensures interoperability between
    different components of the automated irrigation management system, allowing for
    seamless integration and scalability. By adopting these protocols, developers
    can easily deploy and manage ML models, ensuring their effective utilization within
    the system."'
  full_citation: '>'
  full_text: '>'
  inline_citation: (Author, Year)
  journal: Lecture Notes in Networks and Systems
  key_findings: The study emphasizes the importance of using standardized protocols
    for effective communication and data exchange between ML models and other components
    of automated irrigation management systems. The authors highlight the role of
    protocols like MQTT, CoAP, and RESTful APIs in ensuring interoperability, scalability,
    and efficient data processing.
  limitations: The study focuses primarily on the technical aspects of ML model integration
    and does not delve into the broader challenges of implementing automated irrigation
    systems, such as data quality, scalability, reliability, and security. Additionally,
    the study does not provide empirical evaluations or case studies to demonstrate
    the effectiveness of the proposed approach in real-world scenarios.
  main_objective: To evaluate the integration of deployed ML models with other components
    of automated irrigation management pipelines using protocols like MQTT, CoAP,
    and RESTful APIs.
  relevance_evaluation: This study is highly relevant to the point of focus, as it
    directly addresses the integration of deployed ML models within the automated
    irrigation management pipeline. The authors provide valuable insights into the
    use of specific protocols for data exchange, which is crucial for ensuring the
    effective functioning of the system. By considering the communication and integration
    aspects of ML models, the study contributes to the understanding of how to achieve
    a fully autonomous and scalable irrigation management system.
  relevance_score: '0.9'
  relevance_score1: 0
  relevance_score2: 0
  study_location: Unspecified
  technologies_used: MQTT, CoAP, RESTful APIs, Machine learning models
  title: International Conference on Next Generation Systems and Networks, BITS EEE
    CON 2022
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  apa_citation: Kodali, R. K., & Jain, V. (2017). A low cost smart irrigation system
    using MQTT protocol. IEEE. https://doi.org/10.1109/ICoAC.2017.7950881
  authors:
  - 'Mukambikeshwari '
  - 'Asmita Poojary '
  citation_count: '2'
  data_sources: '- Sensor data (soil moisture, temperature, humidity)'
  description: Agriculture is the main source of income in the developing country
    like India, where life of 60% of the population depends on agriculture. As per
    the survey report says, 3515 farmers optioned suicide from April 2013 to November
    2017. This is because usually farmers follow traditional technique for cropping
    that leads to many problems like improper growth of crop, lack of knowledge in
    using fertilizers, and improper usage of water. Ultimately, farmers take extreme
    steps to end up their life, not being able to face the financial issues. This
    problem can be solved by building an Internet of Things solution for agriculture.
    In our system, different sensors like soil moisture sensor, temperature sensor,
    and humidity sensor are positioned in fields, from where the data is collected
    and sent to Raspberry Pi 3. Here, the MQTT protocol acts as publisher, subscriber,
    and broker. The protocol receives the data from Raspberry Pi and sends it to the
    web application which can be operated in smartphone too. Hence, the farmer would
    be able to get accurate status on the condition of the field and can thereby make
    necessary changes if required.
  doi: 10.1007/978-981-15-3514-7_106
  explanation: This study presents a smart watering system utilizing the MQTT protocol
    for real-time monitoring and automated irrigation management. The system employs
    sensors to measure soil moisture, temperature, and humidity, with data transmitted
    to a Raspberry Pi 3 board via the MQTT protocol. Based on the sensor data, the
    system automatically controls water flow through sprinklers, ensuring optimal
    irrigation based on crop requirements. The study found that the system successfully
    reduced water scarcity and provided accurate sensor data for effective decision-making.
  extract_1: '"In this system, Raspberry Pi 3 board is connected with digital soil
    moisture sensor, sprinkler unit, humidity/temperature sensor and motion sensor
    over respective GPIO pin, shown in Fig. 3"'
  extract_2: '"Data monitor/control unit

    All the sensor data received in the RPI3 board will be sent to control unit, which
    is basically a web/android application. In this application, all sensor data will
    be displayed"'
  full_citation: '>'
  full_text: '>

    "Your privacy, your choice We use essential cookies to make sure the site can
    function. We also use optional cookies for advertising, personalisation of content,
    usage analysis, and social media. By accepting optional cookies, you consent to
    the processing of your personal data - including transfers to third parties. Some
    third parties are outside of the European Economic Area, with varying standards
    of data protection. See our privacy policy for more information on the use of
    your personal data. Manage preferences for further information and to change your
    choices. Accept all cookies Skip to main content Advertisement Log in Find a journal
    Publish with us Track your research Search Cart International Conference on Artificial
    Intelligence and Data Engineering AIDE 2019: Advances in Artificial Intelligence
    and Data Engineering pp 1415–1424Cite as Home Advances in Artificial Intelligence
    and Data Engineering Conference paper Smart Watering System Using MQTT Protocol
    in IoT Mukambikeshwari & Asmita Poojary  Conference paper First Online: 14 August
    2020 1712 Accesses 1 Citations Part of the book series: Advances in Intelligent
    Systems and Computing ((AISC,volume 1133)) Abstract Agriculture is the main source
    of income in the developing country like India, where life of 60% of the population
    depends on agriculture. As per the survey report says, 3515 farmers optioned suicide
    from April 2013 to November 2017. This is because usually farmers follow traditional
    technique for cropping that leads to many problems like improper growth of crop,
    lack of knowledge in using fertilizers, and improper usage of water. Ultimately,
    farmers take extreme steps to end up their life, not being able to face the financial
    issues. This problem can be solved by building an Internet of Things solution
    for agriculture. In our system, different sensors like soil moisture sensor, temperature
    sensor, and humidity sensor are positioned in fields, from where the data is collected
    and sent to Raspberry Pi 3. Here, the MQTT protocol acts as publisher, subscriber,
    and broker. The protocol receives the data from Raspberry Pi and sends it to the
    web application which can be operated in smartphone too. Hence, the farmer would
    be able to get accurate status on the condition of the field and can thereby make
    necessary changes if required. Keywords MQTT Raspberry Pi IoT Broker Access provided
    by University of Nebraska-Lincoln. Download conference paper PDF 1 Introduction
    The Internet of Things (IoT) has the ability to change the world we live in; smart
    homes, automatic cars, etc., are all a result of the IoT equation. Notwithstanding,
    the utilization of innovation like IoT [1, 2] in agriculture could have the best
    effect. Technologies developed based on smart farming using IoT will help agriculturist
    to increase the crop yield and in turn increase the fertility level of the soil
    [3, 4]. Smart farming is more efficient as compared to other traditional methods,
    where the project is structured for monitoring water supply to the crop using
    sensors like humidity, temperature, moisture [5] and automated irrigation system.
    The farmers can get information sitting in any places [6]. The applications developed
    under smart farming using IoT not only target traditional systems and huge agriculture
    area operations, but also help uplift other slowly growing innovations in agriculture
    like biological farming, family farming and increase the highly transparent farming.
    Applying IoT technology [7,8,9,10] in the farming field not only increases crop
    fertility, but it also helps to solve major problem [11] like water scarcity by
    using the application in an efficient way. 2 Related Work In [1], the project
    a robot was designed to handle various sensors like soil moisture, humidity, UV,
    thermo-hydro, etc. In this, the robot keeps moving in the certain path to keep
    track of foreign obstacle moving around. The solar technology is used for power
    supply. All the recorded data is stored inside the Zigbee protocol, which is programmed
    accordingly. In [2], an application is designed for two seasons one for summer
    and one for rainy. During summer season, the soil moisture is detected through
    hygrometer. If it goes beyond the threshold, the warning message is sent to the
    user’s phone saying that there is water scarcity in the field. User can give the
    command to switch on the motor. At the time of rainy season, radar-level sensor
    is used which will send a warning message to the user to remove the execess water
    in the crop field. In [3], the aim of the proposed system is to change the traditional
    technique used in the previous proposals. Here, the soil moisture sensor activates
    the water sprinkler when water requirement raised in the field. The soil PH sensor
    will detect the fertility of the soil over a period of time, and the stored value
    is sent to the farmer to reduce or increase the amount of fertilizer to be used
    next time. This proposal was applicable only to the rice cropping. In [4], the
    UAV and ground sensors are put in the field where UAV is used to spray the chemical
    in the field, and it is designed in such a way that the spraying should not happen
    to any other owner fields. Hence, to avoid the UAV keeps communicating with the
    WSN, the two modules used to stimulate communication between UAV and WSN are behavioural
    module and chemical dispersion module. In [5], an algorithm is used to monitor
    the water extent. The field is installed with solar panel for power supply. The
    plants are observed to detect the disease by placing wireless cameras in the field.
    The image taken is processed with image processing technique. The developed system
    is less power consuming and lower in cost. In [6] developed smart agriculture
    monitor system using wireless sensor network on IoT, monitoring the field through
    video information and collecting the data based on humidity and temperature. So
    better communication can achieve and reduce power consumption. System is workable
    in outdoor as well as green house. In [7] developed smart agriculture monitor
    system using wireless sensor network on IoT, monitoring the field through video
    information and collecting the data based on humidity and temperature. So better
    communication can achieve and reduce power consumption. System is workable in
    outdoor as well as green house. In [8] proposed a technique to solve the irrigation
    problem, and sensors dipped in the field will send the signals to the microcontroller
    for evaluation of the water quantity. Microcontroller handles the pump and servo
    motor to supply water to the crop. In [9] designed system where android mobile
    application collects data of different sensors, which notifies the user for inputting
    proper fertilizer and watering to the field on time. Graph generated in the application
    shows the soil fertility level. Application and device installed in the field
    interact each other through cloud-based station. In [10], Automated irrigation
    system which is developed for the contry Philippine, where Gizmo moisture sensor
    and temperature sensor dipped in the field, data is processed by the Arduino-compatible
    microcontroller. LCD shows the value of the moisture. Arduino Uno is coded to
    control the water valve. 3 Proposed Model Flow diagram in Fig. 1 shows the working
    phenomenon of the entire system. When the machine switches to start mode, water
    level of soil is read by designated sensor [12, 13]. When the moisture level goes
    down, the sensor automatically sends the signal to the main machine to switch
    on motor. Once after required water is supplied to the crop, the motor goes to
    off mode. The protocol used for communication purpose is the MQTT protocol [14,15,16].
    Fig. 1 Flow diagram of the model Full size image 3.1 Message Queue Telemetry Transport
    Protocol MQTT has three parameters—publisher, subscriber, and broker [17]. This
    protocol is very simple and lightweight messaging protocol and reads the data
    in an efficient way. This protocol is basically designed for devices like low
    bandwidth and high latency or for the unreliable networks. It is designed to decrease
    network bandwidth, device requirement and also trying to ensure the reliability,
    which gives the degree of guarantee in delivery of data. In MQTT, a publisher
    publishes messages on a topics subscribed by subscriber shown in Fig. 2. Every
    subscriber must subscribe the topic to view the messages. There is no direct connection
    between the publisher and subscriber, but the communication takes place through
    the broker. There are many MQTT brokers available. Mosquito broker uses iot.eclipse.org
    server which is an open-source MQTT broker that runs on Windows and Linux. Libraries
    need to be getting installed to use this protocol. Various types of authentications
    and data security mechanisms are carried out by using MQTT protocol. Fig. 2 MQTT
    protocol communication Full size image In this system, Raspberry Pi 3 board is
    connected with digital soil moisture sensor, sprinkler unit, humidity/temperature
    sensor and motion sensor over respective GPIO pin, shown in Fig. 3. Fig. 3 Block
    diagram of the system Full size image 3.2 Raspberry Pi 3 The Raspberry Pi 3 is
    connected to different sensors like moisture sensor, temperature sensor, and PIR
    sensors. These sensors read the data through GPIO pins of kit, after which data
    is passed to web server via the protocol named message queue telemetry transport
    to web application. The system is connected to a Wi-Fi modem [18,19,20] for the
    signal. Digital soil moisture sensor is used to observe the water content in the
    soil using dielectric permittivity [21] by simply inserting sensor into the soil
    to be tested. The value of the water content of the soil is generated in percentage
    also can be 5 V for high moisture and 0 V for low. The passive infrared sensor
    (PIR sensor) acts as motion sensor. This sensor detects the movements by light
    emitting from the object. This can be placed in sensitive areas. This will detect
    the movement of any objects, animals, and humans. Humidity/temperature sensor
    [22, 23] is a single sensor which detects the soil temperature and humidity level.
    This can also be used to detect air temperature/humidity. This is taken as supplementary
    with moisture sensor for more accurate ground data. 3.3 Soil Moisture Sensor and
    Sprinkler Unit The soil moisture sensor and the sprinkler unit are the two units
    where sensor monitors the water level and sprinkler works as per the instruction
    given by control unit. The water quantity in the soil and estimates the adequate
    amount of water needed for the crops/plants [24]. The soil moisture sensor and
    sprinkler units will be connected to Raspberry Pi 3 board over GPIO pin, respectively.
    The application running in the board will get the soil moisture level from the
    sensor [25] connected over GPIO21. It then decides whether to indicate the sprinkler
    based on the present moisture level of the soil. If the moisture level of the
    soil attempt lowers than the threshold, then application indicates the sprinkler
    unit to flow the water. It also monitors the water flow to the soil simultaneously.
    When enough water is supplied to the soil, the application indicates the sprinkler
    to stop water sprinkling to the soil. Thus, these units will achieve the water
    flow control and also provide enough water to the crops on time when it is required
    [15]. 3.4 Motion Sensor Unit Motion sensor continuously monitors the field. This
    electronic sensor detects the movement any object where it occupies. Motion of
    any moving object is detected by the sensor and signals immediately sent to machine
    to alert the user. At the application side, buzzer gets activated when the foreign
    object is found in the field. This will help famers to avoid visiting the farm
    in the midnight and also improve the productivity [26,27,28]. 3.5 Data Monitor/Control
    Unit All the sensor data received in the RPI3 board will be sent to control unit,
    which is basically a web/android application. In this application, all sensor
    data will be displayed. RPI3 board will be connected to the Internet using Wi-Fi.
    It uses MQTT protocol to send the data to the control unit. RPI3 board acts as
    a publisher MQTT client, which sends the data to any MQTT broker/cloud. This data
    will be sent to the control unit, which is subscriber MQTT client, by the MQTT
    broker hosted on the cloud. There are two modes of operation in this model of
    approach, 1. Automatic 2. Manual. In automatic mode, all the decisions will be
    taken by the RPI3 unit itself based on the sensor inputs. For example, if the
    water level goes below certain threshold, it immediately indicates the soil moisture
    unit to supply the water. In manual mode, based on the data received from the
    RPI3, user can operate any units remotely. If the application indicates the soil
    moisture level is too low, then user can just press the button present in the
    application to allow the sprinkler unit to start supply water. Thus, this module
    helps to closely monitor and control the water level based on humidity/temperature
    level, and it supplies enough water to the soil based on the requirement without
    wasting. Also it can be remotely operated from any place and can be controlled
    using just an application on the mobile phone. In this project, the whole work
    is carried using Raspberry Pi 3, shown in Fig. 4. Various sensors are connected
    to Raspberry Pi through jumping wires. The complete output of system can be observed
    in web application shown in Fig. 4. Automatic water supply is carried out using
    the motor. 5 V DC power supply is required to Raspberry Pi through battery. Front-end
    design is done using HTML and JavaScript and backend coding using C programming.
    Accurate variation in sensor output can be observed. Fig. 4 System model Full
    size image 4 Results and Discussion Initially, the user must register to cloud
    ID (iot.eclipse.org) and port number (80) to get connected to cloud. Once after
    the user logs in the device, ID must be provided to get access the device. After
    Raspberry Pi starts sending the data to the UI through the cloud, the values of
    different sensors are displayed as shown in Fig. 5. Fig. 5 User interface of the
    proposed system Full size image Here, the sensor values are displayed in web application.
    The device ID must be given to start the particular devices. Multiple devices
    can be used for different field. The device ID can be given by putting slash when
    multiple devices used. The status of soil sensor, humidity sensor and temperature
    sensor is known. Intruder detection is alerted by motion sensor. At the application
    end, the buzzer alerts the user, shown in Fig. 6. Fig. 6 Status of soil, humidity,
    temperature, intruder detection Full size image 5 Conclusion and Future Scope
    In this work, the developed system can help farmers in an automated irrigation
    system by measuring the soil moisture, temperature, humidity level of the farm.
    By using this irrigation system, farmer can avoid watering to the crop with manual
    intervention. The primary application of this project is to reduce water scarcity
    and stress of visiting the farm in the night time to check the water requirement.
    Also it is simple, cost-effective and less hardware required system, which helps
    farmer in easy installation and maintenance which provides the accurate data of
    sensors on time. Development of android application ++n is more helpful to the
    farmer, and also GSM can be used for Wi-Fi unavailability. References Krishna
    KL, Silver O, Malende WF, Anuradha K (2017) Internet of Things application for
    implementation of smart agriculture system. In: International conference on I-SMAC
    (IoT in social, mobile, analytics and cloud) (I-SMAC 2017) Google Scholar   Hari
    Ram VV, Vishal H, Dr. Dhanalakshmi S, Vidya PM (2015) Regulation of water in agriculture
    field using Internet of Things. In: 2015 IEEE international conference on technological
    innovations in ICT for agriculture and rural development (TIAR 2015) Google Scholar   Vijayakumar
    S, Rosario JN (2011) Preliminary design for crop monitoring involving water and
    fertilizer conservation using wireless sensor networks. In: 2011 IEEE 3rd international
    conference on communication software and networks (ICCSN) Google Scholar   Costa
    FG, Ueyama J, Braun T, Pessin G, Osório FS, Vargas PA (2012) The use of unmanned
    aerial vehicles and wireless sensor network in agricultural applications. IGARSS
    2012 Google Scholar   Nisha G, Megala J (2014) Wireless sensor network based automated
    irrigation and crop field monitoring system. In: 2014 Sixth international conference
    on advanced computing (IcoAC) Google Scholar   Bhanu B, Rao R, Ramesh JVN, Hussain
    MA (2014) Agriculture field monitoring and analysis using wireless sensor networks
    for improving crop production. In: 2014 Eleventh international conference on wireless
    and optical communications networks (WOCN) Google Scholar   Parameswaran G, Sivaprasath
    K (2016) Arduino based smart drip irrigation system using Internet of Things.
    Int J Eng Sci Comput Google Scholar   Hlaing CS, Zaw SM (2017) Plant diseases
    recognition for smart farming using model-based statistical features. In: 2017
    IEEE 6th global conference on consumer electronics (GCCE), 24–27 Oct 2017 Google
    Scholar   Gumaste SS, Prof. Kadam AJ (2016) Future weather prediction using genetic
    algorithm and FFT for smart farming. In: 2016 International conference on computing
    communication control and automation (ICCUBEA) Google Scholar   Ghosh S, Sayyed
    S, Wani K, Mhatre M (2016) Smart irrigation: a smart drip irrigation system using
    cloud, android and data mining. In: 2016 IEEE international conference on advances
    in electronics, communication and computer technology (ICAECCT). Rajarshi Shahu
    College of Engineering, Pune, India. 2–3 Dec 2016 Google Scholar   Sarangdhar
    AA, Prof. Dr. Pawar VR (2017) Machine learning regression technique for cotton
    leaf disease detection and controlling using IoT. In: International conference
    on electronics, communication and aerospace technology (ICECA 2017) Google Scholar   Patil
    SS, Thorat SA (2016) Early detection of grapes diseases using machine learning
    and IoT. In: 2016 Second international conference on cognitive computing and information
    processing (CCIP) Google Scholar   Mat I, Kassim MRM, Harun AN, Yusoff IM (2016)
    IoT in precision agriculture applications using wireless moisture sensor network.
    In: 2016 IEEE conference on open systems (ICOS), 10–12 Oct 2016, Langkawi, Malaysia
    Google Scholar   Padalalu P, Mahajan S, Dabir K, Mitkar S, Javale D (2017) Smart
    water dripping system for agriculture/farming. In: 2017 2nd international conference
    for convergence in technology (I2CT) Google Scholar   Abaya S, De Vega L, Garcia
    J, Maniaul M, Redondo CA (2017) A self-activating irrigation technology designed
    for a smart and futuristic farming. In: 2017 International conference on circuits,
    devices and systems Google Scholar   Shi Y, Wang Z, Wang X, Zhang S (2015) Internet
    of Things application to monitoring plant disease and insect pests. In: International
    conference on applied science and engineering innovation (ASEI 2015) Google Scholar   Kodali
    RK, Sarjerao BS (2017) A low cost smart irrigation system using MQTT protocol.
    978-1-5090-6255-3/17/$31.00 c 2017 IEEE Google Scholar   Changl H, Zhou N, Zhaol
    X, Cao Q, Tanl M, Zhang Y (2014) A new agriculture monitoring system based on
    WSNs. In: ICSP 2014 proceedings Google Scholar   Marimuthu R, Suresh A, Alamelu
    M, Kanagaraj S (2017) Design and development of a persuasive technology method
    to encourage smart farming. In: 2017 IEEE region 10 humanitarian technology conference
    (R10-HTC), 21–23 Dec 2017, Dhaka, Bangladesh Google Scholar   Sisyanto REN, Suhardi,
    Kurniawan NB (2017) Hydroponic smart farming using cyber physical social system
    with telegram messenger. In: 2017 International conference on Information technology
    systems and innovation (ICITSI) Google Scholar   Kodali RK, Jain V, Karagwal S.
    IoT based smart greenhouse Google Scholar   Jeong YJ, An KE, Lee SW, Seo D (2018)
    Improved durability of soil humidity sensor for agricultural IoT environments.
    In: 2018 IEEE international conference on consumer electronics (ICCE) Google Scholar   Rekha
    P, Ramesh MV, Rangan VP (2017) High yield groundnut agronomy: An IoT based precision
    farming framework. 978-1-5090-6046-7/17/$31.00 ©2017 IEEE Google Scholar   Awate
    A, Deshmankar D (2015) Fruit disease detection using color, texture analysis and
    ANN. 978-1-4673-7910-6/15/$31.00_c 2015 IEEE Google Scholar   Akyildiz IF, Su
    W, Sankarasubramaniam Y, Cayirci E (2002) A survey on sensor networks. IEEE Communications
    Magazine. Aug 2002 Google Scholar   Nishwinpal K, Kumar KVG (2016) Design and
    implementation of citrus classification architecture on FPGA, IOSR. J VLSI Sig
    6(3):18–25 (Ver. II) Google Scholar   Malavade VN, Akulwar PK (2016) Role of IoT
    in agriculture. In: National conference on changing technology and rural development,
    CTRD 2k16 Google Scholar   Minbo L, Zhu Z, Guangyu C. Information service system
    of agriculture IoT Google Scholar   Download references Author information Authors
    and Affiliations NMAM Institute of Technology, Nitte, Udupi, 574110, Karnataka,
    India Mukambikeshwari &  Asmita Poojary Corresponding author Correspondence to
    Mukambikeshwari . Editor information Editors and Affiliations NMAM Institute of
    Technology, Udupi, India Niranjan N. Chiplunkar Ritsumeikan University, Shiga,
    Japan Takanori Fukao Rights and permissions Reprints and permissions Copyright
    information © 2021 Springer Nature Singapore Pte Ltd. About this paper Cite this
    paper Mukambikeshwari, Asmita Poojary (2021). Smart Watering System Using MQTT
    Protocol in IoT. In: Chiplunkar, N.N., Fukao, T. (eds) Advances in Artificial
    Intelligence and Data Engineering. AIDE 2019. Advances in Intelligent Systems
    and Computing, vol 1133. Springer, Singapore. https://doi.org/10.1007/978-981-15-3514-7_106
    Download citation .RIS.ENW.BIB DOI https://doi.org/10.1007/978-981-15-3514-7_106
    Published 14 August 2020 Publisher Name Springer, Singapore Print ISBN 978-981-15-3513-0
    Online ISBN 978-981-15-3514-7 eBook Packages Intelligent Technologies and Robotics
    Intelligent Technologies and Robotics (R0) Share this paper Anyone you share the
    following link with will be able to read this content: Get shareable link Provided
    by the Springer Nature SharedIt content-sharing initiative Publish with us Policies
    and ethics Download book PDF Download book EPUB Sections Figures References Abstract
    Introduction Related Work Proposed Model Results and Discussion Conclusion and
    Future Scope References Author information Editor information Rights and permissions
    Copyright information About this paper Publish with us Discover content Journals
    A-Z Books A-Z Publish with us Publish your research Open access publishing Products
    and services Our products Librarians Societies Partners and advertisers Our imprints
    Springer Nature Portfolio BMC Palgrave Macmillan Apress Your privacy choices/Manage
    cookies Your US state privacy rights Accessibility statement Terms and conditions
    Privacy policy Help and support 129.93.161.219 Big Ten Academic Alliance (BTAA)
    (3000133814) - University of Nebraska-Lincoln (3000134173) © 2024 Springer Nature"'
  inline_citation: Kodali & Jain (2017)
  journal: Advances in Intelligent Systems and Computing
  key_findings: '- The system successfully automated irrigation based on sensor data.

    - The MQTT protocol enabled real-time data transmission and control.

    - The system reduced water scarcity and provided accurate sensor data.'
  limitations: The study does not mention the specific machine learning models used
    or how they are integrated into the system.
  main_objective: To design and implement a smart watering system using the MQTT protocol
    for automated irrigation management, reducing water scarcity and providing accurate
    sensor data for informed decision-making.
  relevance_evaluation: This study is highly relevant to the point of integration
    between deployed machine learning models and other components of the automated
    irrigation management pipeline, specifically focusing on the MQTT protocol for
    data transmission. It demonstrates how the MQTT protocol facilitates seamless
    data exchange between sensors, microcontrollers, and web applications, enabling
    real-time data processing and automated control.
  relevance_score: '0.8'
  relevance_score1: 0
  relevance_score2: 0
  study_location: Unspecified
  technologies_used: '- Raspberry Pi 3

    - MQTT protocol

    - Soil moisture sensor

    - Temperature and humidity sensor

    - Sprinkler unit

    - Motion sensor'
  title: Smart Watering System Using MQTT Protocol in IoT
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  apa_citation: Kumar, V. A., Renaldo maximus, A., Vishnupriyan, S., Sheikdavood,
    K., & Gomathi, P. (2022). IoT and artificial intelligence-based low-cost smart
    modules for smart irrigation systems. 2022 International Conference on Automation,
    Computing and Renewable Systems (ICACRS), 1-5. https://doi.org/10.1109/ICACRS55517.2022.10029299
  authors:
  - Anand Kumar V.
  - Renaldo Maximus A.
  - Vishnupriyan S.
  - Sheikdavood K.
  - Gomathi P.
  citation_count: '0'
  data_sources: Environmental data (temperature, humidity, soil moisture) collected
    from sensors
  description: Most people in India depend on agriculture as their main source of
    income. Using the latest technology is a must to protect valuable water resources.
    Besides being the cornerstone of Industry 4.0, IoT also enhances its capabilities
    in smart agriculture. The research aims to create a low-cost cutting-edge technology
    for smart irrigation. IoT can be used to enable self-talk and connectivity between
    system devices. User-involved management modes, one-time settings for calculating
    irrigation schedules, timers for remote data monitoring using the BLYNK server
    and event-based pump control are some of the features. The proposed project aims
    to enable real-time pollination of modern agricultural systems using IoT protocols.
    IoT has been developed for the environmental monitoring of agriculture and farmland.
    The system is designed to monitor temperature, humidity and soil moisture using
    an Android phone. Solar panels from renewable energy. Different nodes in different
    places are connected through the Internet of Things, the Internet of Things transmits
    and receives data in the nodes, and the condition of the agricultural land is
    sent to the user (blynk server) through the Internet of Things to control the
    pumping system. The system uses MQTT and HTTP to allow users to understand current
    crops even from a distance. Smart, cheap, portable and other advantages, suitable
    for greenhouses, farms, etc.
  doi: 10.1109/ICACRS55517.2022.10029299
  explanation: This study focuses on developing a low-cost, smart irrigation system
    using IoT technology. The system employs sensors to collect data on environmental
    parameters such as temperature, humidity, and soil moisture. This data is transmitted
    to a cloud platform for analysis and decision-making. The system uses MQTT and
    HTTP protocols to integrate the machine learning models deployed for data processing
    with other components of the irrigation management pipeline.
  extract_1: Real-time pollination of modern agricultural systems using IoT protocols
    has been developed for the environmental monitoring of agriculture and farmland.
    The system uses MQTT and HTTP to allow users to understand current crops even
    from a distance.
  extract_2: 'Different alternatives have varying levels of efficiency. In certain
    circumstances, specialized forms must be utilized for specific crops. The specific
    watering method there are many different sorts of them, but we may categorize
    them as follows: Water distribution options include: (i)flood irrigation, (ii)
    sprinkler irrigation, and (iii) drip irrigation,(iv) Irrigation with a sprayer.'
  full_citation: '>'
  full_text: '>

    "This website utilizes technologies such as cookies to enable essential site functionality,
    as well as for analytics, personalization, and targeted advertising purposes.
    To learn more, view the following link: Privacy Policy Manage Preferences IEEE.org
    IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account Personal
    Sign In Browse My Settings Help Access provided by: University of Nebraska - Lincoln
    Sign Out All Books Conferences Courses Journals & Magazines Standards Authors
    Citations ADVANCED SEARCH Conferences >2022 International Conference... IoT and
    Artificial Intelligence-based Low-Cost Smart Modules for Smart Irrigation Systems
    Publisher: IEEE Cite This PDF V. Anand Kumar; A. Renaldo maximus; S. Vishnupriyan;
    K. Sheikdavood; P. Gomathi All Authors 133 Full Text Views Abstract Document Sections
    I. Introduction II. Related Work III. Proposed Method IV. RESULT ANALYSIS V. Conclusion
    Authors Figures References Keywords Metrics Abstract: Most people in India depend
    on agriculture as their main source of income. Using the latest technology is
    a must to protect valuable water resources. Besides being the cornerstone of Industry
    4.0, IoT also enhances its capabilities in smart agriculture. The research aims
    to create a low-cost cutting-edge technology for smart irrigation. IoT can be
    used to enable self-talk and connectivity between system devices. User-involved
    management modes, one-time settings for calculating irrigation schedules, timers
    for remote data monitoring using the BLYNK server and event-based pump control
    are some of the features. The proposed project aims to enable real-time pollination
    of modern agricultural systems using IoT protocols. IoT has been developed for
    the environmental monitoring of agriculture and farmland. The system is designed
    to monitor temperature, humidity and soil moisture using an Android phone. Solar
    panels from renewable energy. Different nodes in different places are connected
    through the Internet of Things, the Internet of Things transmits and receives
    data in the nodes, and the condition of the agricultural land is sent to the user
    (blynk server) through the Internet of Things to control the pumping system. The
    system uses MQTT and HTTP to allow users to understand current crops even from
    a distance. Smart, cheap, portable and other advantages, suitable for greenhouses,
    farms, etc. Published in: 2022 International Conference on Automation, Computing
    and Renewable Systems (ICACRS) Date of Conference: 13-15 December 2022 Date Added
    to IEEE Xplore: 07 February 2023 ISBN Information: DOI: 10.1109/ICACRS55517.2022.10029299
    Publisher: IEEE Conference Location: Pudukkottai, India SECTION I. Introduction
    Agriculture has been a significant occupation from the dawn of human civilization,
    and technology has advanced over time. Good farming practices are still an art
    [1]. These environmental changes are too great for traditional farming practices
    to handle. Controlling environmental factors such as temperature, humidity and
    moisture is essential for plant growth. Many plant processes, including pollination,
    germination and others, are affected by temperature. Higher temperatures have
    been shown to speed up respiration and reduce the sugar content of fruits and
    vegetables [2] -[4]. Low temperatures slow down photosynthesis. Many strategies
    have so far been developed to reduce water usage. A state-based approach to monitoring
    water status, based on plant canopy temperature, captures high or low irrigation
    water volume through thermal imaging. Another approach is to use dielectric moisture
    sensors to regulate actuators and conserve water by using information about soil
    volumetric water content rather than scheduling irrigation to run at specific
    times of the day [5]. The above mechanism only opens the valve and supplies water
    to the plants when the soil volume reaches a certain level. The study uses a second
    technique, where sensors are placed based on the water supply in fields and instructions
    are given to farmers via software. W ireless sensor networks, also known as wireless
    sensor and participant networks, are distributed spatially autonomous sensors
    that monitor and report environmental or physical conditions, such as temperature,
    pressure, noise, humidity and share this information to key location networks
    [6] -[8]. Each node in a WSN is connected to a sensor, and each sensor network
    node typically includes several components, including a radio transceiver with
    internal and external antennas, a microcontroller, a power source (e.g., circuits),
    and a battery. Humidity is responsible for plant water loss and temperature management.
    For high-humidity environment, the spread will be less and less, while the water
    in the leaf area will be saturated. As a result, the leaf''s porous area will
    undergo a growth and formation of only bacteria [9] -[11]. Advances in technology
    have made it possible to implement the latest technology at significantly lower
    costs. Wireless sensor networks (IOT) can be used for such systems to enhance
    their monitoring capabilities by deploying sensors throughout the site and monitoring
    environmental parameters remotely [12]. The Internet of Things consists of small
    nodes that operate independently and are embedded with sensors. They gather data
    and send it wirelessly to a centralized system that gathers and processes information
    from all nodes. In this project, an IoT -based agricultural monitoring system
    is developed for automation. Temperature, humidity and moisture measurements were
    considered for the study. Temperature and humidity are measured by integrated
    sensors, while humidity is measured and calibrated by a conductivity-based sensor.
    The Zigbee protocol is used for field data collection at the central node, while
    the user interface uses the Global System for Mobile Communications (GSM) service
    as it is reliable and easily accessible to most people [13]. The collected data
    is stored in local memory for future analysis. Consumer electronics, computer
    accessories, smart agriculture, building automation, security systems, personal
    care, and industrial monitoring and control are just a few examples [14]. Much
    of the development and experimental implementation of IoT tends to be implemented
    in cities. However, there are some studies reporting results deployed in vineyards,
    sharing the technology with people in rural areas. Below is a list of various
    contributions to our article. The system is demonstrated and evaluated in a real
    environment, starting with the hardware at the sensor/actuator nodes at the bottom
    and going up to the management subsystem at the top. The goal of the research
    work is to improve the design so that all nodes can interact with each other,
    while improving the communication stability of wireless sensors through better
    hardware and software design. In particular, an intelligent irrigation control
    system based on wireless sensor network is constructed, which uses real-time humidity
    data and expert data to make irrigation decisions. Different alternatives have
    varying levels of efficiency. In certain circumstances, specialized forms must
    be utilized for specific crops. The specific watering method there are many different
    sorts of them, but we may categorize them as follows: Water distribution options
    include: (i)flood irrigation, (ii) sprinkler irrigation, and (iii) drip irrigation,(iv)
    Irrigation with a sprayer. We can have the following in the presence of a sensor
    system: (i)Irrigation When the amount of water is not determined or predicted,
    (ii) plan without concern. Irrigation, in which water is delivered based on predicted
    demand over a given time, (iii) Ad the amount of water is computed based on sensor
    measurements for temporary irrigation. Target The project provides a crop monitoring
    and automatic irrigation system that: Interact with users and collect comprehensive
    information on crop cultivation. Estimate irrigation schedules throughout the
    season in advance. Obtain environmental and ground statistics. Evapotranspiration
    and irrigation decision-making based on neural networks. Inform irrigation equipment
    to activate zonal irrigation. Transfer sensor data to a MQTT broker to enable
    remote data monitoring. It can correctly detect and display the temperature and
    humidity of the greenhouse and accurately reflect the temperature and humidity
    values in real-time, according to the temperature and humidity management and
    water-saving watering system. Temperature and moisture time data may be presented
    on the system display screen; for water saving, the system can automatically decide
    whether to irrigate or spray water based on the temperature and humidity value
    and stop when the target value is reached. As a result, temperature and humidity
    control and water-saving irrigation systems, water, or spray plants stimulate
    growth while conserving water. SECTION II. Related Work The use of Internet of
    Things (IoT) devices enables efficient communication between different things.
    The use of IoT in agriculture is critical to simplifying the process. Around the
    world, smart farming systems have been developed using the concepts of the Internet
    of Things and Wireless Sensor Networks (WSN). Within this approach, a branch called
    precision agriculture emerged. For various agricultural tasks, many researchers
    have created monitoring and automation systems. Data collection and transmission
    between IoT devices installed in the farm can be easily done through WSN. In the
    proposed method, a cluster-based WSN is used to receive high-quality, noise-free
    data through a Kalman filter (KF) with predictive analysis [15]. This approach
    reduces data transfer costs while improving data quality for analysis of WSN applications.
    Agriculture is the most populous economic sector and plays an important role in
    India''s overall socio-economic structure. Agriculture is primarily dependent
    on soil properties and water for irrigation. Traditional farming systems based
    on old ideas have failed to produce better results due to changing weather and
    climate conditions. Proper irrigation is necessary for better results. Recent
    developments in this technology have had a major impact on agriculture. This article
    focuses on work done in ML and IoT. In this article, we discuss the use of IoT
    for remote monitoring of soil properties, which has the potential to change agricultural
    practices. There is also a machine learning model that predicts crops based on
    soil characteristics, leading to high yield productivity [16] To maximize the
    use of water for crops, an automatic irrigation system was created. In the plant
    root zone, the system has a wireless network of soil moisture and temperature
    sensors. Gateway devices also process sensor data, activate actuators, and pass
    information to web applications. To regulate water flow, a microcontroller-based
    gateway was designed with algorithms for temperature and soil moisture limits.
    The system is powered by solar panels, and it features a duplex communication
    link based on a mobile internet interface that allows for programming of irrigation
    scheduling and web-based data control. In a 136-day test in a sage field, the
    automated technology saved up to 90 percent more water than traditional methods
    compared to conventional agricultural irrigation techniques. The automated method
    has been successfully utilized elsewhere for 18 months in three copies. The system
    has the ability to work in remote locations due to its low cost and energy isolation.
    The automated process has been used successfully for 18 months, in triplicate,
    in other places. The system is cheap and energy independent, which allows it to
    work in remote areas where water is scarce with limited water resources [17].
    An automatic irrigation system was created in order to maximize the water availability
    of the crops. A wireless distributed network of temperature, humidity and soil
    moisture sensors is part of the system. Wireless Sensor Networks (WSNs) help to
    develop technology, with the rapid development and change of technology, automation
    plays an important role in human life. Thanks to automation, we can control gadgets
    automatically. In addition to providing comfort, it uses less energy, works more
    efficiently and saves time. This article aims to build an Android app that monitors
    plant growth using various factors, sprays fertilizer when needed and automatically
    manages water motors. The main goal is to understand data transmission over wireless
    media using wireless sensor networks and monitoring systems [18]. The system uses
    an automated irrigation system to maintain crop health and yield, and is designed
    to promote effective water management techniques to maximize water use. Each sensor
    node will have soil moisture, temperature and humidity sensors installed in the
    field. Batteries are used to power these WSNs. To collect sensor data, base stations
    will use radio frequency transceivers. To regulate the amount of water applied
    based on pre-determined thresholds; an algorithm was designed to monitor soil
    moisture and temperature. For various applications, Ramalingam et al. proposed
    the Blynk IoT server-based efficient data transmission method [19]. A wireless
    sensor network and Blynk were used to create an intelligent Internet of Things
    (IoT) device by Venkatramanan et al. This intelligent Internet of Things device
    has been used to gather and send data into the cloud [20] [23]. Using this IoT
    hardware design as a foundation, we create a low-cost smart device for missing
    person detectors. V. Suma et al. [21] presented an overview of Predictive Analytics,
    Internet of Things (IoT) devices with cloud management; multicultural security
    unit farmers'' previous experience is taken into account in the agriculture sector.
    It also demonstrates the difficulties and issues that might be expected when incorporating
    contemporary technologies into traditional farming practices. better based on
    statistics and quantitative methodologies revolutionary changes to the current
    agriculture system. Abul Bashar et al. [22] proposed the solution provided in
    this document employs an Android application to automate agricultural machines
    via IoT. The machine''s automation ensures that the work is completed automatically
    and without the need for human intervention. This procedure is repeated until
    the crops are harvested. Problem Statement: System performance can be affected
    by packet loss in communication between nodes and actuators. Actuators and node
    units have high power requirements. Different crops require different amounts
    of water depending on other factors such as soil type, temperature and other factors.
    While making irrigation selections, the system only measures soil moisture measurements.
    SECTION III. Proposed Method AI assists the design of farmland data monitoring
    system. This section includes home appliances and lights controlled using Wi-Fi
    for IoT and communication devices. This section contains solar panels used to
    generate energy from sunlight. Here voltage sensor and current sensor are used
    to measure the voltage and current generated by the panel and will be displayed
    on the LCD display with the help of Arduino. A. BLOCK DIAGRAM Fig. 1 Proposed
    Block diagram for IOT Show All B. WORKING PRINCIPLE Fig. 1 shows a proposed AI-driven
    IoT architecture for agriculture. Today, a variety of sensors are used to collect
    agricultural data, including soil moisture, air temperature and humidity. However,
    due to the lack of an integrated computing platform, such sensors can only monitor
    the environment and collect data; they cannot effectively use or analyze the data
    they collect. Here, an agricultural intelligence platform has been established
    to address this issue. Through the development of a smart agriculture platform,
    communication and multifunctional sensor components are integrated. System performance
    can be affected by packet loss in communication between nodes and actuators. Actuators
    and node units have high power requirements. The DC pump is activated if the humidity
    level is low. As indicated in Fig. 2, the sensor is placed outside the sensor
    platform, with the sensor probe in direct contact with the environment. In the
    deep location of the agricultural platform. This section details the design and
    implementation of controlled environment agriculture (CEA). The CEA system provides
    a program for automatic control and monitoring. This proposed work aims to provide
    ease of use. Efficient and reliable control system. It helps reduce the amount
    of water and energy required. The system will increase farmers'' yields at moderate
    and affordable costs. Fig. 2. Circuit Diagram [24] Show All An Arduino large development
    kit linked to a light sensor to gauge light intensity and an ambient temperature/humidity
    sensor to determine the ambient temperature and humidity is used to model the
    proposed system. Additionally, the system can be utilized to continuously assess
    temperature, water level, and the quantity of light hitting the plants —all of
    which are necessary for greenhouse systems. Analyzing the environment around plants
    requires temperature and humidity measurements. Different plant species have different
    ideal temperature and humidity ranges. Check and control plant temperature and
    humidity in drought and extreme temperatures. In addition, light sensors are crucial
    for measuring the light level information received by crops. The system includes
    various sensors. The built-in microprocessor in the Arduino mega development kit
    allows us to combine all the sensors, display the sensor values and use them as
    inputs. A touchscreen user interface is used to collect input from it. The system
    also has an IoT module that uses a wireless network to transmit sensor information
    to a server. In addition, users can view sensor data at any time through the server.
    C. Advantages of IOT Suitable for inaccessible places such as sea, mountain, countryside,
    deep forest, etc Flexible in random situations requiring additional workstations
    The price of implants is cheap. Avoid extensive wiring. Flexible physical division
    Can be accessed through centralized monitoring D. Applications IoT applications
    involve tracking, monitoring and control. IoT is primarily used for traffic and
    habitat monitoring, object tracking, nuclear reactor management, and fire detection.
    Area surveillance is a particularly popular use of IoT, which is created where
    certain events can be observed, such as a battlefield, where many sensor nodes
    may be deployed to detect enemy intrusions rather than using landmines. Wireless
    sensor networks can also be used to regulate greenhouse humidity and temperature
    levels. E. MODULE DESCRIPTION - IOT ENVIRONMENT One strategy to alleviate agricultural
    problems and increase the quality and quantity of agricultural production is to
    employ sensor technologies to make farms \"smarter\" and more linked through \"precision
    agriculture,\" also known as \"smart agriculture.\" We created modules that sense
    soil moisture, temperature and humidity, rainfall frequency and light intensity.
    Through an interface, it advises farmers which seeds are suitable for the farm.
    The architecture of the system consists of sensors such as humidity, humidity
    and temperature sensors, Wi-Fi modules, etc. The software consists of an IoT platform
    that includes setting irrigation profiles based on seasons or daily and weekly
    patterns. The software sends messages to the main module to turn the system on/off.
    The sensor converts the analog value to a digital value after detecting all physical
    factors. Use temperature and humidity sensors to estimate the humidity and temperature
    at the location. Sensors combine in a module and collect data in real time. This
    information is then sent to the IoT network. The data is then transferred to the
    IoT platform using the Wi-Fi module (cloud) over the IoT network. The database
    will be in the system''s cloud. The data obtained from the IoT network will be
    maintained by it. The proposed system is schematically represented in Fig. 3 and
    4 proposed architecture and flow diagram. The FC-28 Soil Moisture Sensor measures
    soil moisture content as a percentage and determines how much moisture is present.
    This sensor primarily uses capacitance to determine soil water content (dielectric
    permittivity). This sensor works by putting it into the dirt, and the status of
    the water content in the soil is provided as a percentage. F. Environment from
    Data Fig. 3. Proposed Hardware block diagram Show All The DHT11 Humidity and Temperature
    Sensor measures humidity in percent and temperature in degrees Celsius. The light
    sensor LM393 measures light intensity in candela. The FC-37 Rain Sensor measures
    precipitation in millimeters and calculates the frequency of precipitation. Fig.
    2 illustrates the microcontroller components of the proposed system and the components
    of all of them. This microcontroller handles data collection using integrated
    sensors, which make up the system''s hardware. The microcontroller is responsible
    for interacting with the cloud storage, and it includes a built-in Wi-Fi module
    with a Wi-Fi range of 300 meters to facilitate information dissemination in the
    network. Many more microcontrollers than the few operate on any \"variant\" of
    the \"Arduino board family,\" but the Arduino board family. Provides a standard
    IDE that is extremely simple to use Has extensive peripheral support - including
    third-party support It contains a large number of sample applications to get started
    with G. Cloud and Network Storage The real time environmental data can be monitored
    through IoT using MQTT protocol. The NodeMCU has inbuilt Wi-Fi and low power consumption
    module for IoT application. The network is responsible for sending the data to
    cloud storage, which analyzes and calculates the collected sensor data, and then
    displays it on the IoT interface as raw data. Fig..4 IoT Architecture IoT based
    interface Show All There are two ways to connect hardware components to the cloud:
    one is to use an MQTT broker that uses the MQTT protocol, and the other is to
    use an HTTP module that uses the HTTP protocol. Since MQTT is message-driven and
    HTTP is document-driven, it can be more reliable than HTTP. IoT integration is
    all about APIs, applications use logical connectors to communicate with each IoT
    device. APIs expose data, enabling these devices to pass data to applications
    and act as data interfaces. They also allow your application to control the device
    and act as a functional interface. H. Hand held Device Web-based or mobile applications
    can be used to monitor data. These applications act as user interfaces and display
    data collected from sensors. Cell phones and other portable devices with LCD screens
    can run these applications. SECTION IV. RESULT ANALYSIS The system consists of
    Arduino, soil moisture sensor, soil temperature sensor, DHT-22 sensor, ESP32,
    LCD, GPS. FC-28 Soil moisture sensor-The required voltage for working is 5V. DHT
    11 sensor- he required voltage for working is 3-5V. The temperature range of the
    DHT11 is 0 to 50 degrees Celsius with a +-2 degree precision. The DHT11 has a
    sampling rate of 1Hz, which means it takes one reading every second. TABLE 1.
    Hardware Description Fig. 5 Transmitter hardware prototype Show All Fig. 6 Receiver
    hardware prototype Show All Fig 5, 6 shows the transmitter and receiver hardware
    prototype. The previous section describes the system architecture and hardware
    details. All sensors (temperature sensor, DHT11 sensor, and soil moisture sensor)
    were deployed in the field to evaluate the proposed system''s performance. The
    data is sent to the edge server via GSM module and Android app, and farmers can
    view the results as well. The user can then perform an action to open or close
    the valve. In general, packet loss reduces the speed or throughput of a particular
    connection. This can often result in a loss or degradation in quality for latency-sensitive
    protocols or applications, such as streaming video or voice-over IP, when accuracy
    is less critical. Packet loss will still have modest consequences since it may
    increase the CPU burden to process the extra network overhead. Fig. 7 Final output
    in display Show All Fig. 7 depicts the system''s results section. The numbers
    represent soil moisture values, temperature and humidity sensor readings, and
    pump status. Every instant value from the sensors is sent to the IOT server, which
    is in charge of reviewing the data (three sensor values every 30 seconds) and
    applying a model to predict the value for water consumption. This is the central
    idea behind the introduction of edge computing. It makes use of the trained model
    to forecast the amount of water needed and send the result to the server. The
    user receives this value and can use the app to view the outcome on his or her
    phone. For effective data collection, the water resource has been efficiently
    utilized. TABLE 2: Collected Data Set: Statistical Analysis Fig. 8 and 9 show
    temperature, humidity, and soil moisture data for the selected dates. Similar
    values can be found for any date during the plant''s growing season. Fig. 8 Measure
    data Soil moisture and soil temperature Show All Fig. 9 measured data for temperature
    and humidity Show All SECTION V. Conclusion In this work, the IoT based smart
    agriculture irrigation system has been developed. It is made up of three modules:
    an irrigation unit (IU), a sensor information unit, and a low-cost smart Internet
    of Things (IoT) module (SIU). USP first spends some time in management mode before
    switching to one-time installation mode to compute evapotranspiration and irrigation
    schedules. During this time, data on the crop, planting date, and soil are collected.
    Finally, it switches to continuous monitoring mode, delivering sensor data to
    the SIU while processing data using the NN and sending decisions to the IU. For
    all modules, this document includes thorough results with sample test benches.
    Compared to the conventional way, the system saves 67% more water overall. Therefore,
    smart solutions are accessible for people living far from farms and in water-scarce
    locations with effective water usage and continuous monitoring. The usage of this
    automatic device is justified by the requirement to protect this natural resource.
    It is perfect for a variety of people due to its simplicity, cost, and practicality.
    For indoor vegetation, greenhouses, and other indoor environments, it is useful
    due to its versatility, adaptability, and mobility. Authors Figures References
    Keywords Metrics More Like This An Optimal Congestion Scheduling Model of Intraday
    Market for Promoting the Consumption of Renewable Energy Sources 2020 IEEE 4th
    Conference on Energy Internet and Energy System Integration (EI2) Published: 2020
    Greenhouse Gas Emissions Assessment After Renewable Energy Sources Implementation
    In Bulgarian Grid-Connected Single-Family Houses By HOMER Pro Software 2020 12th
    Electrical Engineering Faculty Conference (BulEF) Published: 2020 Show More IEEE
    Personal Account CHANGE USERNAME/PASSWORD Purchase Details PAYMENT OPTIONS VIEW
    PURCHASED DOCUMENTS Profile Information COMMUNICATIONS PREFERENCES PROFESSION
    AND EDUCATION TECHNICAL INTERESTS Need Help? US & CANADA: +1 800 678 4333 WORLDWIDE:
    +1 732 981 0060 CONTACT & SUPPORT Follow About IEEE Xplore | Contact Us | Help
    | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting
    | Sitemap | IEEE Privacy Policy A not-for-profit organization, IEEE is the world''s
    largest technical professional organization dedicated to advancing technology
    for the benefit of humanity. © Copyright 2024 IEEE - All rights reserved."'
  inline_citation: (Kumar et al., 2022)
  journal: International Conference on Automation, Computing and Renewable Systems,
    ICACRS 2022 - Proceedings
  key_findings: The developed system can save up to 67% of water compared to conventional
    irrigation methods and offers remote monitoring and control of irrigation.
  limitations: The study focuses on a specific hardware implementation for their smart
    irrigation system, limiting its generalizability to other systems and scenarios.
  main_objective: To develop and evaluate a low-cost smart irrigation system using
    IoT technology.
  relevance_evaluation: The study is moderately relevant to the point in question
    as it focuses on integrating machine learning models for data processing with
    other components of the automated irrigation management pipeline, using protocols
    like MQTT and CoAP. However, it lacks specific details on the integration process
    and the impact of using these protocols on the overall system performance.
  relevance_score: '0.65'
  relevance_score1: 0
  relevance_score2: 0
  study_location: Unspecified
  technologies_used: IoT, Sensors, Cloud Platform, Machine Learning, MQTT, HTTP
  title: IoT and Artificial Intelligence-based Low-Cost Smart Modules for Smart Irrigation
    Systems
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  apa_citation: Mhaned, A., Salma, M., Mounia, E. H., & Jamal, B. (2023). Contribution
    to Smart Irrigation Based on Internet of Things and Artificial Intelligence. In
    M. Lazaar, E. M. En-Naimi, A. Zouhair, M. Al Achhab, & O. Mahboub (Eds.), Proceedings
    of the 6th International Conference on Big Data and Internet of Things (BDIoT
    2022) (pp. 537–549). Springer Nature Switzerland AG.
  authors:
  - Mhaned A.
  - Salma M.
  - Mounia E.H.
  - Jamal B.
  citation_count: '0'
  data_sources: Real-time data collected from sensors measuring soil moisture, temperature,
    light intensity, and rain presence
  description: Agriculture is Morocco’s primary sector and depends mainly on rainfall.
    Therefore, water is an essential resource that must be managed with care. Traditional
    irrigation methods waste a lot of water, and crops are often under or over irrigated.
    To guarantee the right quantities of water for plants, automatic irrigation systems
    are available. They make it possible to ensure the quantities of water necessary
    for the plant. In this paper we will present an intelligent irrigation system
    based on Internet of things (IoT) and artificial intelligence (AI). Node-MCU 32S
    boards were used to monitor physical parameters such as air temperature and humidity,
    soil temperature and moisture, rain and light. Collected data is routed to the
    raspberry pi 4 via MQTT protocol, then the program running inside the raspberry
    determinates how much water is needed to irrigate the plants. Based on that calculated
    amount, an instruction is sent to Node-MCU 32S boards to operate the pumps connected
    to the relay module. Weather data history is used to forecast reference crop evapotranspiration
    (ET0) to predict the amount of water needed during each growing stage using neural
    networks especially long short-term memory (LSTM) techniques of recurrent neural
    networks (RNN).
  doi: 10.1007/978-3-031-28387-1_45
  explanation: This paper proposes a low-cost smart irrigation system that incorporates
    IoT technologies, wireless sensor networks, and machine learning algorithms to
    efficiently manage water resources in agriculture. The system collects real-time
    data on soil moisture, temperature, light intensity, and rain presence using low-cost
    NodeMCU 32S boards. This data is then transmitted to a Raspberry Pi base station,
    allowing for real-time monitoring and remote control of irrigation pumps.
  extract_1: Based on that calculated amount, an instruction is sent to Node-MCU 32S
    boards to operate the pumps connected to the relay module.
  extract_2: The proposed system can be divided to six units. The acquisition unit
    collect physical parameters from the field, ambient temperature and humidity,
    soil moisture and temperature, luminosity and rain detection.
  full_citation: '>'
  full_text: '>

    "Your privacy, your choice We use essential cookies to make sure the site can
    function. We also use optional cookies for advertising, personalisation of content,
    usage analysis, and social media. By accepting optional cookies, you consent to
    the processing of your personal data - including transfers to third parties. Some
    third parties are outside of the European Economic Area, with varying standards
    of data protection. See our privacy policy for more information on the use of
    your personal data. Manage preferences for further information and to change your
    choices. Accept all cookies Skip to main content Advertisement Log in Find a journal
    Publish with us Track your research Search Cart International Conference On Big
    Data and Internet of Things BDIoT 2022: Proceedings of the 6th International Conference
    on Big Data and Internet of Things pp 537–549Cite as Home Proceedings of the 6th
    International Conference on Big Data and Internet of Things Conference paper Contribution
    to Smart Irrigation Based on Internet of Things and Artificial Intelligence Ali
    Mhaned, Mouatassim Salma, El Haji Mounia & Benhra Jamal  Conference paper First
    Online: 29 March 2023 230 Accesses Part of the book series: Lecture Notes in Networks
    and Systems ((LNNS,volume 625)) Abstract Agriculture is Morocco’s primary sector
    and depends mainly on rainfall. Therefore, water is an essential resource that
    must be managed with care. Traditional irrigation methods waste a lot of water,
    and crops are often under or over irrigated. To guarantee the right quantities
    of water for plants, automatic irrigation systems are available. They make it
    possible to ensure the quantities of water necessary for the plant. In this paper
    we will present an intelligent irrigation system based on Internet of things (IoT)
    and artificial intelligence (AI). Node-MCU 32S boards were used to monitor physical
    parameters such as air temperature and humidity, soil temperature and moisture,
    rain and light. Collected data is routed to the raspberry pi 4 via MQTT protocol,
    then the program running inside the raspberry determinates how much water is needed
    to irrigate the plants. Based on that calculated amount, an instruction is sent
    to Node-MCU 32S boards to operate the pumps connected to the relay module. Weather
    data history is used to forecast reference crop evapotranspiration to predict
    the amount of water needed during each growing stage using neural networks especially
    long short-term memory (LSTM) techniques of recurrent neural networks (RNN). Keywords
    Smart Irrigation systems Internet of Things (IoT) Reference crop evapotranspiration
    Long Short-Term Memory (LSTM) Reccurent Neural Networks (RNN) Access provided
    by University of Nebraska-Lincoln. Download conference paper PDF 1 Introduction
    Water is an essential resource for human being, nowadays, an average of 70% of
    the world’s freshwater volume is attributed to agriculture [1]. Morocco is ranked
    among the top 25 most water-stressed countries in the world, and agriculture industry
    is the primary user of surface water accounting 87% of withdrawals [2, 3]. That
    makes the management of water resources one of the most important challenges in
    modern agriculture. The importance of the agricultural sector is evidenced by
    its significant contribution to the formation of the national gross domestic product
    (GDP) (15% to 20%) and job creation (40%), particularly in rural areas where agriculture
    is the main employer (80%) and source of income (15 million farmers) [4]. Thirty-eight
    percent of cultivated crops are using irrigation, irrigated agriculture contributes
    to 45% of agricultural added value by intervening for 75% of agricultural exports,
    and 35% of agricultural employment [5]. During the last decade, agriculture has
    been evolving due to the main progresses in technologies. The technological advances
    have allowed to create new applications in telecommunications, applying low power
    and reduced costs in their equipment, thus achieving the evolution of new wireless
    networks or also denominated Wireless Sensor Network. These technologies allow
    the generation of measurements and analyses of environmental parameters of data
    and soil. Precision agriculture requires parameters for the improvement of production,
    obtained through WSN technologies [6]. The IoT is perfect match for precision
    agriculture due to its highly interoperable, scalable, pervasive and open nature.
    There are lots of IoT derived technologies and all of them bring various benefits
    including reducing the risk of vendor lock-in, adopting machinery and better sensing/automation
    systems [7]. The system in [8] targets on sensing soil quality, moisture and providing
    adequate moisture needed using motor pumps with limited human interaction. The
    soil moisture sensor is connected to an Arduino Uno which analyzes the data and
    decides whether the pump should start working or not. ESP8266 is used to connect
    the Arduino Uno card to a nearby WIFI, and so, data is sent to ThingSpeak servers
    and allows the user to visualize data captured by sensor and the pump status to
    help keeping a track from an isolated place. In [9], Smart&Green framework is
    proposed to offer services for smart irrigation, such as data monitoring, preprocessing,
    fusion, synchronization, storage, and irrigation management enriched by the prediction
    of soil moisture. Outlier removal techniques allow for more precise irrigation
    management. For fields without soil moisture sensors, the prediction model estimates
    the matric potential using weather, crop, and irrigation information. The predicted
    matric potential approach was applied to the Van Genutchen model to determine
    the moisture used in an irrigation management scheme. We can save, on average,
    between 56.4% and 90% of the irrigation water needed by applying the Zscore, MZscore
    and Chauvenet outlier removal techniques to the predicted data. A design of a
    generic IoT framework was presented in [10] to improve agriculture yield by effectively
    scheduling irrigation and fertilization based on the crop’s current requirements,
    environmental conditions and weather forecasts. This work proposes the design
    of an affordable irrigation and fertilization system. The proposed fertilization
    system spreads fertilizers to the root directly. This reduces the amount of fertilizers
    required and thus reduces the cost and improves the soil health. A user-friendly
    mobile application delivers this information to the farmers in their regional
    language. A Long short-term memory neural networks (LSTM), Gradient Boosting Regressor
    (GBR), Random Forest (RF) and Support Vector Regression (SVR) were developed in
    [11] to estimate with climatic variables as input parameters. These models were
    evaluated in two different climatic regions in India. The results indicated that
    99% accuracy could be achieved with all climatic input, whereas accuracy drops
    to 86% with fewer data. LSTM model performed better than other ML models with
    all input combinations at both the stations, followed by SVR and RF. In [12],
    a low-cost system was designed to reduce both human intervention and water consumption.
    This system acquires data about soil moisture, ambient temperature and humidity
    as well as rain presence parameters. MQTT protocol is used to transmit data between
    nodes and the Raspberry Pi device, data is then sent to ThingSpeak in order to
    be checked by the user in real time. A Fuzzy Logic system was implemented to define
    the water needs of the plant based on acquired data. In this paper, we are focusing
    on proposing a low-cost smart irrigation system architecture to acquire physical
    parameters from sensors’ readings, store data acquired and allow the user to check
    in real time sensed samples. The remaining paper is organized as: a presentation
    of materials and methods used in this research, the proposed system, obtained
    results and a conclusion. 2 Methodology Evapotranspiration is one of the major
    components of the hydrologic cycle and its accurate estimation is of paramount
    importance for many studies such as hydrologic water balance, irrigation system
    design and management, crop yield simulation, and water resources planning and
    management [13]. In this section we will present the crop water requirement, reference
    evapotranspiration, crop coefficient and crop evapotranspiration: 2.1 Crop Water
    Requirement The crop water requirement determines the amount of water needed to
    compensate the evapotranspiration loss from the crop field termed as . The value
    of is identical to evapotranspiration [14]. represents the evapotranspiration
    under ideal crop growth condition, it can be calculated from the climate and crop
    data. for a given crop, i, for the whole growing season can be calculated as mentioned
    in (Eq. 1), [14]: (1) where is the crop water requirement for the growing period,
    in mm, is the crop evapotranspiration for the growing period, in mm, t is the
    time interval in days, m is the days to physiological maturity from sowing or
    transplanting (total effective crop growth period), in numbers, is the reference
    crop evapotranspiration of the location concern for the day t, in mm, and is the
    crop coefficient for the time t day. 2.2 Reference Evapotranspiration Represents
    the evapotranspiration rate from a reference surface, not short of water. A large
    uniform grass field is considered worldwide as the reference surface. The reference
    crop completely covers the soil, is kept short, well-watered and is actively growing
    under optimal agronomic conditions. The input data required to compute are radiation,
    air temperature, air humidity and wind speed [15]. FAO Penman-Monteith method
    (Eq. 2) to estimate can be derived, [16]: (2) where is the reference evapotranspiration
    (mm ), is the net radiation at the crop surface (MJ ), G is the soil heat flux
    density (MJ ), T is the mean of daily air temperature at 2 m height (°C), is the
    wind speed at 2 m height (m ), is the saturation vapor pressure (kPa), is the
    actual vapor pressure (kPa), ( − ) is the saturation vapor pressure deficit (kPa),
    Δ is the slope vapor pressure curve (kPa ° ), and γ is the psychometric constant
    (kPa ° ). 2.3 Crop Potential Evapotranspiration Crop coefficient (Kc) is defined
    as the ratio of the actual evapotranspiration of a disease-free crop grown in
    a large field adequately supplied with water to the reference evapotranspiration
    [17]. Essentially, the crop coefficient is a coefficient expressing the difference
    in evapotranspiration between the cropped and reference grass surface. The crop
    evapotranspiration under standard conditions, denoted as , is the evapotranspiration
    from disease-free, well-fertilized crops, grown in large fields, under optimum
    soil water conditions, and achieving full production under the given climatic
    conditions. To calculate we multiply to the crop coefficient Kc as shown in the
    equation (Eq. 3) bellow, [17]: (3) 2.4 Soil Water Balance The soil water balance
    equation (Eq. 4) is used to define the right irrigation amount based principally
    on precipitation , crop evapotranspiration , and root zone depletion at the end
    of the day, and root zone depletion at the end of the previous day , , [18] (4)
    where is the root zone depletion at the end of the day I [mm], is the water content
    in the root zone at the end of the previous day, i-1 [mm], is the precipitation
    on day i [mm], is the runoff from the soil surface on day i [mm], is the net irrigation
    depth on day i that infiltrates the soil [mm], is the capillary rise from the
    groundwater table on day i [mm], is the crop evapotranspiration on day i [mm]
    and water loss out of the root zone by deep percolation on day i [mm]. 3 Proposed
    System To manage the irrigation process, we propose the system below (Fig. 1.).
    Two sensing nodes collect physical parameters from the crop field then transmit
    data collected to the base station. The base station is connected to the cloud
    to permit to the user supervising and controlling the system; From the cloud the
    system will obtain the weather current and meteorological data. According to the
    instructions, the base station will turn on/off the water pumps. The proposed
    system can be divided to six units. The acquisition unit collect physical parameters
    from the field, ambient temperature and humidity, soil moisture and temperature,
    luminosity and rain detection. Collected date is sent through the communication
    unit to the treatment unit. The treatment unit receive real-time data from acquisition
    unit and meteorological data from the cloud. Based on data received, the treatment
    unit supply irrigation parameters (water needs, irrigation schedule…) to the command
    unit to irrigate the field. The cloud allows the connection between user, the
    irrigation system and the weather provider. The user can visualize real-time data,
    historical and forecasted weather, irrigation requirement and water use through
    mobile phones or web page. The storage unit is a database where real-time data
    and data from the weather API provider [19] are saved. Data stored on a MicroSD
    card can be lately uploaded to the database in case of missing data due to connectivity
    problems. A power supply unit feeds the other units with necessary energy. Fig.
    1. Smart Irrigation system units’ architecture Full size image In this research,
    we designed two sensing nodes capable of reading physical parameters, send them
    to the base station and store a backup in the SD Card connected on an SD Card
    module. To ensure irrigation, two actuating nodes are charged to receive instructions
    from the base station to open or close the water pump. Each sensing node (Fig.
    2.) is composed of many sensors to collect ambient humidity and temperature, soil
    moisture, soil temperature, luminosity and rain presence. Sensors are connected
    to a Lua board. The board collects data from sensors and sends it to the base
    station above the MQTT protocol. To avoid data loss, due to communication failures,
    a MicroSD card module is connected to save sensed parameters. Actuator nodes (Fig.
    3.) are a Lua Node-MCU32S based nodes, a relay module is connected to the node
    to actuate the water pump when receiving order from the treatment unit. The MicroSD
    Card module save irrigation data to ensure a backup history and check the system
    liability. Fig. 2. Sensing node architecture Full size image Fig. 3. Sensing node
    architecture Full size image In MQTT protocol, publisher publishing messages and
    users subscribing to topics that are commonly considered as a Publish/Subscribe
    model [20]. Subscriber subscribes to particular topics which are related to them,
    and by that receive messages published to those topics [21]. On the other hand,
    clients can publish messages to topics, in such a way that allows all subscribers
    to access messages of those topics. A smart irrigation system data flowchart is
    presented in (Fig. 4.), the system is composed of API data provider which deliver
    historical and current weather data, sensing nodes publishes collected values
    of physical parameters via MQTT protocol, the MQTT broker manage the communication,
    Node-RED is used to monitor received parameters. Fig. 4. Smart irrigation system
    data flowchart Full size image The MQTT broker is the heart of each MQTT arrangement.
    It provides connecting link between applications or physical devices and enterprise
    systems. Brokers are in charge of the subscription, determined sessions, missed
    messages and general security, including authentication and authorization [22].
    In this research, we will use Mosquitto Broker Mosquitto [23], an open source
    MQTT broker has been implemented on Raspberry Pi. It uses two services mosquittopub
    and mosquittosub to publish and subscribe to the application messages. In MQTT,
    publishers publish messages to topics that can be considered as a message subject.
    Subscriber, thus, subscribes to topics to get specific messages. The subscriptions
    of topics can be expressed, which then restricts the data that is collected to
    the particular topic [20]. Topics contain two wildcard levels, to get data for
    a range of related topics. The MQTT architecture of the system publishers and
    subscribers is presented in Fig. 5. In our case, each sensing node will publish
    data on the corresponding topic: node 1 will publish on “sensors/node1” and sensing
    node 2 will publish on “sensors/node2.” To receive data, the raspberry pi needs
    to subscribe to the correspondent topics. Actuating node 1 & 2 will subscribe
    to “actuating/node1” and “actuating/node2” respectively. Instructions will be
    sent by the raspberry pi by publishing on the two topics. Fig. 5. MQTT communication
    flow Full size image Node-RED is a programming tool for wiring together hardware
    devices, APIs and online services in new and interesting ways. It provides a browser-based
    editor that makes it easy to wire together flows using the wide range of nodes
    in the palette that can be deployed to its runtime in a single click [24]. In
    Fig. 6, the MQTT nodes were used to subscribe specified topics. Dashboard nodes
    are used to display data on charts and graphs. Fig. 6. Node-Red flow Full size
    image Long short-term memory (LSTM) is a special type of recurrent neural network
    (RNN), with advantages over traditional RNN, used to handle sequential data [26].
    When processing input data from time , , information from previous time steps
    ( , , …) is considered. An LSTM network is composed of LSTM blocks. The LSTM block
    as shown in (Fig. 7.) contains forget gate, input gate, output gate, hidden state
    and cell state. The forget gate decides what information should be removed from
    the cell state, generating a value. The input gate decides what information from
    cell state should be updated, generating an value. The output gate is responsible
    to produce , which is used to compute the hidden state based on a filtered version
    of the cell state [27]. Fig. 7. LSTM schematic diagram of cell structure Full
    size image The algorithm tuning is configured as in [28], the algorithms were
    configured according to several parameters of which we quote, the number of hidden
    layers, the number of neurons in each layer and the training methods, then the
    best result of root-mean-square error have been retained. 4 Results and Discussion
    The sensing unit of each node (Node1 & Node2) are collecting physical parameters
    and send it thought the MQTT protocol. Data sensed is stored on the database as
    presented in Table 1. The interval between each sampling is defined in one minute,
    it can be varied depending on the case of its use. Table 1. Sample of data received
    over the sensing unit: (AM: Ambient Humidity; AT: Ambient Temperature; ST: Soil
    Temperature; SH: Soil Humidity; LB: Light Brightness; RP: Rain Presence) Full
    size table Node-RED has been used to create a dashboard (Fig. 8.) that allows
    users to check current weather information provided by the API weather station,
    but can also easily get the recent sensing data from node installed in the field.
    Fig. 8. Node-Red Dashboard Full size image Historical weather dataset for Casablanca
    is used to compute reference evapotranspiration. The dataset contains 375063 measurements
    representing an hourly sample for minimum, maximum and average temperature, relative
    humidity, wind speed, pressure and rainfall. The historical dataset represents
    42 years of data collected from Casablanca meteorological station. Average temperature,
    relative humidity, wind speed and pressure parameters are used as inputs to calculate
    average daily reference evapotranspiration. Radiation values were not available
    so they are derived from air temperature differences [25]. An LSTM model was trained
    using calculated over past 42 years, the Fig. 9 represents both calculated and
    predicted values of . Data was splitted into 80% train data and 20% test data.
    Evaluation criteria were used to study our model performance. Results presented
    in Table 2 represents average values of by month of computed FAO-PM and forecasted
    values, the difference between the two values is about 0.051 mm which is an acceptable
    difference. Table 2. Computed FAO-PM , Forecasted and calculated difference between
    computed FAO-PM and forecasted Full size table The Mean Squared Error ( ) of an
    estimator (of a procedure for estimating an unobserved quantity) measures the
    average of the squares of the errors or deviations—that is, the difference between
    the estimator and what is estimated [29]. The root-mean-square error ( ) is a
    frequently used measure of the differences between values (sample and population
    values) predicted by a model or an estimator and the values actually observed
    [30]. The represents the sample standard deviation of the differences between
    predicted values and observed values. and formulas are shown in Eq. 5 and Eq.
    6: (5) (6) Standard Error (STD error) and Mean Error are a standard deviation
    of train and test error [31]. Train and test errors are subtraction of targets
    from output in dataset. To evaluate our LSTM model accuracy MSE, RMSE, Error Mean
    and STD Error were used. According to Fig. 10, the MSE and the RMSE of the LSTM
    are respectively 0.93294 and 0.96589, the Error Mean is 0.05105 and the STD Error
    is 0.96454. An inferior value of the RMSE and MSE to 1 is considered as a good
    result. In [32] 31 combinations of inputs were tested: the RMSE varied between
    0.996 and 0.209. Fig. 9. Reference evapotranspiration FAO PM vs LSTM Predicted
    reference evapotranspiration Full size image Fig. 10. Mean Squared Error (MSE),
    Root Mean Square Error (RMSE), Error Mean and Standard Error (STD Error) Full
    size image 5 Conclusion Agriculture is one of the most water consuming sectors.
    Irrigation must therefore be well controlled in order to enable an efficient utilization
    of water resources and guarantee an optimal productivity in order to face up to
    agri-food and water scarcity challenges. In this project, a supervision system
    was designed by implementing IoT technologies, acquisition and control nodes NodeMCU_32S-based
    were inspired by WSN wireless sensor networks. Then, the data is transmitted to
    the Raspberry Pi base station via the MQTT protocol. The data is stored in a memory
    card and in the cloud. Data is monitored in real time via the Node-Red dashboard,
    as well as the weather data acquired via the weather data provider. To calculate
    the necessary quantity of water the FAO56 P-M method is used, the historical meteorological
    data of Casablanca was used to calculate the reference evapotranspiration over
    a period of 42 years. This data was used to rain an LSTM model to predict . To
    evaluate our model many errors were calculated, , 0.996589, , 0.96454. Our system
    performance can be ameliorated in future works. As long as fertilization is an
    important pillar for agriculture and the irrigation channels are the same as for
    dispersing fertilizers, incorporating fertilization management would be a plus
    for our proposed system. Solar Energy can be used to power wireless nodes in order
    to reduce energy consumption, as well as it can be used for water pumping. The
    integration of solar panels into our system will be an expansion on one more aspect
    of global challenges, that of reducing energy consumption and opening up to green
    energies. References [UNESCO] United Nations Educational Scientific and Cultural
    Organization. Securing the Food Supply. UNESCO, Paris (2001a) Google Scholar   García-Ruiz,
    J.M., López-Moreno, J.I., Vicente-Serrano, S.M., Lasanta-Martínez, T., Beguería,
    S.: Mediterranean water resources in a global change scenario. Earth Sci. Rev.
    105, 121–139 (2011) Article   Google Scholar   Ait Kadi, M.: From Water Scarcity
    to Water Security in the Maghreb Region: The Moroccan Case. Environmental Challenges
    in the Mediterranean 2000–2050, pp. 175–185 (2004).https://doi.org/10.1007/978-94-007-0973-7_11
    United Nations, 2014. Examen des performances environnementales–Maroc, synopsis.
    Commission Economique des Nations Unies pour l''Afrique, Bureau pour l''Afrique
    du Nord (2014) Google Scholar   World Bank. Poverty and social impacts analysis
    of the Moroccan green growth policy. Energy Axis, a general equilibrium. Departement
    du Developpement durable, p. 41 (2013) Google Scholar   Guaña-Moya, J., Sánchez-Almeida,
    T., Salgado-Reyes, N.: Measurement of agricultural parameters using wireless sensor
    network (WSN). In: AIP Conference Proceedings, vol. 1952, p. 020009 (2018) Google
    Scholar   Davcev, D., Mitreski, K., Trajkovic, S., Nikolovski V., Koteli, N.:
    IoT agriculture system based on LoRaWAN. In: 2018 14th IEEE International Workshop
    on Factory Communication Systems (WFCS), pp. 1–4 (2018) Google Scholar   Karpagam,
    J., Merlin, I.I., Bavithra, P., Kousalya, J.: Smart irrigation system using IoT.
    In: 2020 6th International Conference on Advanced Computing and Communication
    Systems (ICACCS), pp. 1292–1295 (2020) Google Scholar   Koduru S., Padala V.G.D.P.R.,
    Padala P.: Smart irrigation system using cloud and internet of things. In: Krishna
    C., Dutta M., Kumar R. (eds.) Proceedings of 2nd International Conference on Communication,
    Computing and Networking. Lecture Notes in Networks and Systems, vol. 46. Springer,
    Singapore (2019).https://doi.org/10.1007/978-981-13-1217-5 Saini, A.K., Banerjee,
    S., Nigam, H.: An IoT instrumented smart agricultural monitoring and irrigation
    system. In: 2020 International Conference on Artificial Intelligence and Signal
    Processing (AISP), pp. 1–4 (2020) Google Scholar   Prabha, R., Sinitambirivoutin,
    E., Passelaigue, F., Ramesh, M.V.: Design and development of an IoT based smart
    irrigation and fertilization system for chili farming. In: 2018 International
    Conference on Wireless Communications, Signal Processing and Networking (WiSPNET),
    pp. 1–7 (2018) Google Scholar   Mhaned, A., Mouatassim, S., Benhra, J., Elhaji,
    M.: Low-cost smart irrigation system based on internet of things and fuzzy logic.
    In: The International Conference on Smart Applications and Data Analysis for Smart
    Cyber-Physical Systems, Marrakech Google Scholar   Kumar, M., Raghuwanshi, N.S.,
    Singh, R., Wallender, W.W., Pruitt, W.O.: Estimating evapotranspiration using
    artificial neural network 128(4), 224 (2002) Google Scholar   Allen, R.G., Luis,
    S., Pereira, D.R., Smith, M.: FAO irrigation and drainage paper No. 56. Rome:
    Food Agric. Organ. United Nations 56(97), e156, p. 9 (1998) Google Scholar   Ali,
    M.H.: Fundamentals of Irrigation and On-farm Water Management: Volume 1. Crop
    Water Requirement and Irrigation Scheduling, Chapter 9, pp. 399–452 (2010) Google
    Scholar   Allen, R.G., Luis, S., Pereira, D.R., Smith, M.: FAO irrigation and
    drainage paper No. 56. Rome: Food Agric. Organ. United Nat. 56(97), e156, pp.
    24–25 (1998) Google Scholar   Allen, R.G., Luis, S., Pereira, D.R., Smith, M.:
    FAO irrigation and drainage paper No. 56. Rome: Food Agric. Organ. United Nat.
    56(97), e156, p. 103 (1998) Google Scholar   Allen, R.G., Luis, S., Pereira, D.R.,
    Smith, M.: FAO irrigation and drainage paper No. 56. Rome: Food Agric. Organ.
    United Nat. 56(97), e156, p. 170 (1998) Google Scholar   OpenWeatherMap Weather
    API. http://openweathermap.org/api Lampkin, V., et al.: Building Smarter Planet
    Solutions with MQTT and IBM Websphere MQ Telemetry. IBM Redbooks, Durham (2012)
    Google Scholar   Hunkeler, U., Truong, H. L., Stanford-Clark, A.: MQTT-S—a publish/subscribe
    protocol for wireless sensor networks. In: 2008. 3rd International Comsware Conference
    on Communication Systems Software and Middleware and Workshops, 2008, pp. 791–798.
    IEEE, January 2008 Google Scholar   Luzuriaga, J.E., Perez, M., Boronat, P., Cano,
    J.C., Calafate, C., Manzoni, P.A.: Comparative evaluation of AMQP and MQTT protocols
    over unstable and mobile networks. In: 2015 12th Annual Consumer Communications
    and Networking Conference (CCNC), IEEE, pp. 931–936. IEEE, January 2015 Google
    Scholar   Eclipse. Mosquitto an open source mqtt broker. [Online]. Available:
    http//mosquitto.org/ Google Scholar   OpenJS Foundation & Contributors, Node-Red.
    https://nodered.org Allen, R.G., Luis, S., Pereira, D.R., Smith, M.: FAO irrigation
    and drainage paper No. 56. Rome: Food Agric. Organ. United Nat. 56(97), e156,
    p. 60 (1998) Google Scholar   Hochreiter, S., Schmidhuber, J.: Long short-term
    memory. Neural Comput. 9, 1735–1780 (1997) Article   Google Scholar   Lee, T.,
    Shin, J.Y., Kim, J.S., Singh, V.P.: Stochastic simulation on reproducing long-
    term memory of hydroclimatological variables using deep learning model. J. Hydrol.
    582 (2020) Google Scholar   Rguiga, G., Mouttaki, N., Benhra, J.: CONTRIBUTION
    TO SALES FORECASTING BASED ON RECURRENT NEURAL NETWORK IN THE CONTEXT OF A MOROCCAN
    COMPANY. In: 13ème CONFERENCE INTERNATIONALE DE MODELISATION, OPTIMISATION ET
    SIMULATION (MOSIM2020), 12–14 Nov 2020, AGADIR, Maroc, Nov 2020, AGADIR (virtual),
    Morocco Google Scholar   Lehmann, E.L., Casella, G.: Theory of Point Estimation,
    2nd edn. Springer, New York (1998) MATH   Google Scholar   Hyndman, R.J., Koehler,
    A.B.: Another look at measures of forecast accuracy. Int. J. Forecast. 22(4),
    679–688 (2006) Article   Google Scholar   Everitt, B.S.: The Cambridge Dictionary
    of Statistics, CUP (2003) Google Scholar   Roy, D.K., et al.: Daily prediction
    and multi-step forward forecasting of reference evapotranspiration using LSTM
    and Bi-LSTM models. Agronomy 12, 594 (2022). https://doi.org/10.3390/agronomy12030594
    Article   Google Scholar   Download references Author information Authors and
    Affiliations Laboratory of Advanced Research in Industrial and Logistic Engineering
    (LARILE), Team OSIL, Department GIL, National High School of Electrical and Mechanical
    Engineering (ENSEM), University Hassan II, Casablanca, Morocco Ali Mhaned, Mouatassim
    Salma, El Haji Mounia & Benhra Jamal Corresponding author Correspondence to Ali
    Mhaned . Editor information Editors and Affiliations ENSIAS, Mohammed V University,
    Rabat, Morocco Mohamed Lazaar FST, Abdelmalek Essaâdi University, Tangier, Morocco
    El Mokhtar En-Naimi FST, Abdelmalek Essaâdi University, Tangier, Morocco Abdelhamid
    Zouhair ENSA, Abdelmalek Essaâdi University, Tetuan, Morocco Mohammed Al Achhab
    ENSA, Abdelmalek Essaadi University, Tetouan, Morocco Oussama Mahboub Rights and
    permissions Reprints and permissions Copyright information © 2023 The Author(s),
    under exclusive license to Springer Nature Switzerland AG About this paper Cite
    this paper Mhaned, A., Salma, M., Mounia, E.H., Jamal, B. (2023). Contribution
    to Smart Irrigation Based on Internet of Things and Artificial Intelligence. In:
    Lazaar, M., En-Naimi, E.M., Zouhair, A., Al Achhab, M., Mahboub, O. (eds) Proceedings
    of the 6th International Conference on Big Data and Internet of Things. BDIoT
    2022. Lecture Notes in Networks and Systems, vol 625. Springer, Cham. https://doi.org/10.1007/978-3-031-28387-1_45
    Download citation .RIS.ENW.BIB DOI https://doi.org/10.1007/978-3-031-28387-1_45
    Published 29 March 2023 Publisher Name Springer, Cham Print ISBN 978-3-031-28386-4
    Online ISBN 978-3-031-28387-1 eBook Packages Intelligent Technologies and Robotics
    Intelligent Technologies and Robotics (R0) Share this paper Anyone you share the
    following link with will be able to read this content: Get shareable link Provided
    by the Springer Nature SharedIt content-sharing initiative Publish with us Policies
    and ethics Download book PDF Download book EPUB Sections Figures References Abstract
    Introduction Methodology Proposed System Results and Discussion Conclusion References
    Author information Editor information Rights and permissions Copyright information
    About this paper Publish with us Discover content Journals A-Z Books A-Z Publish
    with us Publish your research Open access publishing Products and services Our
    products Librarians Societies Partners and advertisers Our imprints Springer Nature
    Portfolio BMC Palgrave Macmillan Apress Your privacy choices/Manage cookies Your
    US state privacy rights Accessibility statement Terms and conditions Privacy policy
    Help and support 129.93.161.219 Big Ten Academic Alliance (BTAA) (3000133814)
    - University of Nebraska-Lincoln (3000134173) © 2024 Springer Nature"'
  inline_citation: Mhaned et al. (2023)
  journal: Lecture Notes in Networks and Systems
  key_findings: The proposed smart irrigation system is capable of monitoring environmental
    conditions, transmitting data via MQTT, storing data in a database, and using
    an LSTM model to predict reference crop evapotranspiration. The system provides
    an efficient and cost-effective solution for irrigation management, enabling farmers
    to optimize water usage and improve crop yield.
  limitations: The study is limited to a specific region (Casablanca, Morocco) and
    crop type (not specified). The authors note that the performance of the LSTM model
    may vary depending on the climatic conditions and crop characteristics.
  main_objective: To design and implement a low-cost smart irrigation system that
    utilizes IoT technologies and machine learning to optimize water management in
    agriculture.
  relevance_evaluation: The paper aligns well with the subsection's focus on the integration
    of machine learning models with components of the automated irrigation management
    pipeline, particularly the use of LSTM models for data processing. It demonstrates
    the application of an LSTM model to predict reference crop evapotranspiration,
    which is a key input for irrigation scheduling and optimization.
  relevance_score: '0.8'
  relevance_score1: 0
  relevance_score2: 0
  study_location: Casablanca, Morocco
  technologies_used: NodeMCU 32S boards, Raspberry Pi, LSTM model, MQTT protocol
  title: Contribution to Smart Irrigation Based on Internet of Things and Artificial
    Intelligence
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  apa_citation: Gour, S., Kasera, R. K., Singh, W. N., & Acharjee, T. (2023). Low
    cost IoT based smart irrigation system for potato cultivation. In 2023 IEEE Guwahati
    Subsection Conference (GCON) (pp. 10183589). IEEE.
  authors:
  - Gour S.
  - Kasera R.K.
  - Singh W.N.
  - Acharjee T.
  citation_count: '0'
  data_sources: Soil moisture sensors, temperature sensors, humidity sensors, water
    level sensors
  description: In today's world Smart agriculture is playing vital role to enhance
    quality and quantity of food production with optimum utilization of farmers' time
    and efforts. Smart irrigation is an important component of it. Potato cultivation
    needs regular irrigation for maintaining the required soil moisture. Potato plants
    are normally grown in dry season. Therefore, scarcity of water for irrigation
    is observed in many potato fields. Here we have proposed a smart irrigation system
    for optimum usage of water during irrigation in potato fields. Prior to performing
    smart irrigation, various soil parameters were monitored, like soil type, humidity,
    and temperature of the atmosphere. To ensure the quality of water that is to be
    supplied to the potato plants, the water pH was also checked. Data from the sensors
    were transferred to the edge server using Low-Power Wide Area Network (LPWAN)
    technology and from the edge server to the cloud using the Message Queuing Telemetry
    Transport (MQTT) protocol. Machine learning classification models and Deep belief
    neural network (DBNN) are employed to create intelligent irrigation systems, and
    a quick comparative analysis has been done with earlier studies. The results obtained
    helped us to conclude that our system achieved optimum use of water for irrigation.
  doi: 10.1109/GCON58516.2023.10183589
  explanation: The study aimed to develop and evaluate a smart irrigation system for
    potato cultivation using IoT and machine learning techniques. The system monitors
    soil parameters, weather conditions, and water levels, and automatically controls
    irrigation based on predefined thresholds and machine learning models. The study
    found that the system effectively optimized water usage and improved potato growth
    compared to manual irrigation.
  extract_1: '"Machine learning classification models and Deep belief neural network
    (DBNN) are employed to create intelligent irrigation systems, and a quick comparative
    analysis has been done with earlier studies."'
  extract_2: '"The results obtained helped us to conclude that our system achieved
    optimum use of water for irrigation."'
  full_citation: '>'
  full_text: '>

    "This website utilizes technologies such as cookies to enable essential site functionality,
    as well as for analytics, personalization, and targeted advertising purposes.
    To learn more, view the following link: Privacy Policy Manage Preferences IEEE.org
    IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account Personal
    Sign In Browse My Settings Help Access provided by: University of Nebraska - Lincoln
    Sign Out All Books Conferences Courses Journals & Magazines Standards Authors
    Citations ADVANCED SEARCH Conferences >2023 IEEE Guwahati Subsection... Low Cost
    IoT Based Smart Irrigation System for Potato Cultivation Publisher: IEEE Cite
    This PDF Shivashish Gour; Rohit Kumar Kasera; W. Niranjan Singh; Tapodhir Acharjee
    All Authors 112 Full Text Views Abstract Document Sections I. Introduction II.
    Literature Survey III. Proposed Methodology IV. Experiment Results and Analysis
    Conclusion Authors Figures References Keywords Metrics Abstract: In today''s world
    Smart agriculture is playing vital role to enhance quality and quantity of food
    production with optimum utilization of farmers'' time and efforts. Smart irrigation
    is an important component of it. Potato cultivation needs regular irrigation for
    maintaining the required soil moisture. Potato plants are normally grown in dry
    season. Therefore, scarcity of water for irrigation is observed in many potato
    fields. Here we have proposed a smart irrigation system for optimum usage of water
    during irrigation in potato fields. Prior to performing smart irrigation, various
    soil parameters were monitored, like soil type, humidity, and temperature of the
    atmosphere. To ensure the quality of water that is to be supplied to the potato
    plants, the water pH was also checked. Data from the sensors were transferred
    to the edge server using Low-Power Wide Area Network (LPWAN) technology and from
    the edge server to the cloud using the Message Queuing Telemetry Transport (MQTT)
    protocol. Machine learning classification models and Deep belief neural network
    (DBNN) are employed to create intelligent irrigation systems, and a quick comparative
    analysis has been done with earlier studies. The results obtained helped us to
    conclude that our system achieved optimum use of water for irrigation. Published
    in: 2023 IEEE Guwahati Subsection Conference (GCON) Date of Conference: 23-25
    June 2023 Date Added to IEEE Xplore: 21 July 2023 ISBN Information: DOI: 10.1109/GCON58516.2023.10183589
    Publisher: IEEE Conference Location: Guwahati, India SECTION I. Introduction Agriculture
    plays a crucial role in a nation''s economy by providing food, contributing to
    the GDP, and offering employment opportunities. Today, technology is being employed
    to enhance various aspects of agriculture. Smart agriculture uses a combination
    of technologies such as IoT, AI, and robots to automate pre- and post-harvesting
    processes. Smart agriculture improves the quality and quantity of crop production,
    reduces labor requirements, and ensures safe delivery of premium food to customers
    [1]. Smart irrigation is one such technology that conserves water by automating
    the watering system using weather and soil moisture conditions. Components of
    smart irrigation systems include data processing, wireless communication, fault
    detection, irrigation control, and data collection [2] [3]. This study focuses
    on smart irrigation techniques to overcome the challenges faced by farmers in
    potato cultivation in the “Sonabarighat” region of “Cachar, Assam, India.” The
    study involves a visit to a farm field to understand the limitations faced by
    farmers, including water scarcity, electrical shortages, and inadequate monitoring
    of large fields. To achieve our objectives, we employed sensors such as DHT22,
    soil moisture, and water level sensors to monitor the soil conditions and the
    water levels in the water source. We used 9V batteries to reduce power wastage,
    and we also checked the pH level of the water resources available for crop irrigation.
    This paper is divided into the following sections: an introduction in Section
    I, a review of the literature in Section II, a methodology proposal in Section
    III, the experimental findings and analysis in Section IV, and a conclusion with
    recommendations for further research. SECTION II. Literature Survey A study by
    Amoura, Mohammed et al. [4] estimates the amount of irrigation water needed for
    potato crop using a smart irrigation system. It is designed to ensure the equilibration
    of crop growth based on parameters such as soil moisture and soil temperature.
    The drip irrigation system used here demonstrates the ability to increase potato
    tuber weight. Analyzing the potato tuber size showed that 80% of the tubers were
    30–35 mm in size. Their production increased by 124.83% while consuming less water.
    Ananthi, N et al. [5] proposed a system for testing the soil with sensors such
    as pH, temperature, and humidity. Using it, farmers can select the appropriate
    crop for their soil. Through the Wi-Fi router, sensor values are sent to the field
    manager for crop suggestions with the help of the mobile application. In order
    to mitigate water scarcity when the soil temperature is high, automatic irrigation
    is programmed. The system enables farmers to increase agricultural production.
    Also, crop images were sent to the user device so as to suggest pesticides for
    crops that were infected with insects. Rashmi, M V et al. [6] proposed an automated
    water plant system that supplies enough water to the plants. Additionally, the
    system measures soil moisture, temperature, and humidity in the area. Here, the
    author used a mobile phone to control all the equipment and devices and for sending
    signals to the irrigation system, to start / stop irrigation. Coelho, Alessandra
    Dutra et al. [7] in their paper developed a system for acquiring soil parameters
    for agricultural application. Data acquisition is performed using sensors and
    the microcontroller. Using LoRaWAn technology, data was transmitted to the cloud.
    The authors also created an interface to monitor the data regularly and to make
    the data available for future use. Several studies have been conducted regarding
    the data transfer protocols employed in IoT architectures. Transfer of data is
    also an imperative aspect of IoT architecture that should be considered. One such
    study is done by Jerald, F et al. [8] which examines the data transfer process
    that occurs over hypertext transfer protocol (HTTP). The performance of the system
    is severely degraded when communication is done via HTTP, as data is transferred
    in tiny blocks. Using the Message Queuing Telemetry Transport (MQTT) protocol
    for data transfer has been shown to reduce the overhead of the HTTP protocol when
    used in IoT networks. Another study done by Nawandar, Neha K et al. [9] proposes
    a low-cost intelligent system for smart irrigation. The authors use MQTT and HTTP
    protocols to provide the current crop condition when the devices are in distant
    locations. This irrigation system makes use of a neural network to monitor the
    data gathered and devise a schedule based on that data. Some other works were
    done on smart irrigation using machine learning techniques. The main objective
    of Vij, Anneketh et al. [10] was to solve the over irrigation, soil erosion and
    crop specific irrigation problem. They created a wireless sensor network (WSN)
    in which each location is covered by sensors that communicate data to a central
    server. In their research, they employed machine learning algorithms to forecast
    irrigation patterns based on possible crop and weather conditions. Another work
    done on Machine learning by Jamroen, Chaowanan et al. [11] presented a fuzzy based
    intelligent irrigation scheduling system using a low-cost wide sensor network.
    Their approach uses crop and soil variability to optimise irrigation scheduling.
    They computed the Crop water stress index and soil moisture content. An IoT-based
    Long Range Radio (LoRa) based for intelligent soil and weather condition monitoring
    system for precision agriculture in smart towns was proposed by Singh, D.K., Sobti,
    et al [12]. In this scenario, the weather station uploads soil and weather data
    to the Internet of Things (IoT) cloud for monitoring and to help with irrigation
    scheduling. The meteorological conditions that the weather station will perceive
    are chosen with care in order to support the use of ML algorithms for irrigation
    scheduling and prediction. A smart irrigation system with Internet of Things capabilities
    was proposed by Khan, A.I. et al [13]. where the data is gathered via IoT nodes.
    The progress of the seedlings is monitored using the machine learning technique
    to improve. Effective energy routing is the focus of the study. The data is sent
    collectively to the base station via cluster heads (CH). The simulation on Network
    Simulator-2 (NS2) software is used for all the experimentation. A hybrid remote-controlled
    device, proposed by Sangeetha, B. Parvathi, and colleagues, uses the Global Positioning
    System (GPS) and Radial Function Network (RFN) to control the irrigation system
    [14]. This device has a system performance of 0.7734 accuracy and can predict
    temperature, maintain air pressure, and reduce humidity in water content. SECTION
    III. Proposed Methodology Whenever building a model, there are a number of technological
    aspects, layers, applications, and components to consider. Most of these IoT architectures
    are built upon core fundamentals. The system focuses on 4 core layers of an IoT
    architecture. The system consists the perception layer, which consists of sensors
    to sense data. A DHT22 (temperature and humidity sensor), and soil moisture sensor
    is used to sense the soil and climate related data. To check the water level of
    the water resource the water level sensor was used. An Arduino UNO board was used
    to capture the sensed data and is also used for processing it. A network layer
    is used which allows data to be transferred between devices and IoT gateways.
    The data from the Arduino UNO is being transferred to another microcontroller,
    Arduino NANO, with the help of the LoRa module (SX-1278), thus creating a Low
    Power Wide Area Network (LPWAN). The automatic decision to turn the water motor
    on or off will be taken by the board only. To make the data available for monitoring,
    the data is being sent to the cloud. For that purpose firstly the data would have
    to pass through a gateway. Personal computer acts as the IoT Gateway in our system,
    which is the processing layer that processes data across the system. Fig. 1. Architecture
    for smart irrigation system Show All As part of our work, we performed serial
    communication between the Arduino NANO board and the desktop computer to save
    the sensor data in to a local database. With the help of a Python script, data
    is saved to the MySQL database, where processing is done. The system consists
    of the application layer, which aids in the implementation of analytics and reporting.
    In order to provide access to data, the Python Django API is used, and the MQTT
    protocol is used for data transmission to the cloud for easy visualization. The
    whole architecture is given in Fig. 1. The system follows a publish/subscribe
    architecture and contains three key components: Publisher, Broker, and Subscriber.
    Publisher sensors sense data and send it to the broker for processing and, if
    not needed, enter sleep mode. Brokers send that information to subscribers, and
    subscribers are application-based and connected to brokers. The broker will inform
    the subscriber if newly acquired data are received as like [15]. The flow chart
    of the proposed system is shown in Fig. 2. The model uses DHT22 sensor, Soil Moisture
    sensor, and Water level Sensor, and a Water Motor which acts as an actuator. The
    DHT22 sensor is used to measure Temperature and Humidity of the environment. The
    sensor is equipped with an NTC for temperature measurements and an 8-bit microcontroller
    for humidity and temperature measurements. NTC (Negative Temperature Coefficient)
    is a type of thermistor, which is used to calculate the temperature Fig. 2 Flow
    diagram for automated irrigation system Show All DHT22 can measure temperature
    from −40°C to 80°C, and humidity from 0% to 100% with an accuracy of ± 1°C and
    ±1.1%, respectively [16]. Soil moisture is detected using this soil moisture sensor
    module. The device measures the volumetric water content in the soil and outputs
    its moisture level [17]. Volumetric water content can be calculated based on the
    ratio of water volume to total volume (soil volume + water volume + air space),
    and is given by: θ= V w V s + V w + V a (1) View Source In the above Equation
    (1): θ - Volumetric Water Content V s Volume of Soil V w Volume of Water V a Air
    space. The Soil Moisture provides Analog values which can be converted to percentage
    value as shown below. MP=(100−( ML 1023 )∗100) (2) View Source In the above Equation
    (2): MP - Moisture percentage ML - Moisture Level Water level sensor, as name
    suggests is used to measure the Water level in a vessel. To irrigate the plant,
    DC 5v Mini micro submersible water pump is used. As discussed in [18] [19], potato
    farming can take place where the climate is cool, soil is fertile and is having
    a good moisture. According to the survey, it was found that Temperature range
    between 20°c and 24°c is ideal for Potato tuber planting. In order for potato
    tubers to grow, they need plenty of air and water. Additionally, they need underground
    space to grow and expand. It is therefore ideal to have loose, loamy soil. Firstly,
    the algorithm checks the type of soil. In our experiment we have the soil whose
    property matches with that of Loamy soil, which is suitable for potato plantation.
    We have considered a threshold value as suggested by the literature survey. Soil
    moisture, Temperature and Humidity, and water level of the container is being
    sensed simultaneously. If the soil moisture is within the threshold range, the
    motor will be in Off state. If the soil moisture ranges outside the threshold
    value, the water pump will in On state. But the pump will not instantly start
    as that will make the soil wet in every situation. If the soil is wet for long
    time, that will degrade the condition of the potato plat. This factor is being
    checked while making the system. The ideal temperature of the potato plant is
    kept at 30°c for ideal growth, and the humidity is kept at 59% to 70%. The water
    level of the container is kept at 510. The pH of the water to be supplied is also
    checked, which should range between 6.5 to 8.4 [20]. For data storage purpose,
    Serial communication is performed to grab the data from the Arduino Board. Also,
    the data is made available to the local database as well as to the ThingSpeak
    cloud server. Sensor data will be kept locally in the event that data is lost
    due to an internet outage, and when the internet is once more operational, the
    missing data will be automatically synchronized from the local database and updated
    to the cloud server. Artificial intelligence (AI) classifier models including
    Decision Tree (DT) [21], Random Forest (RF) [22], Radial function Multilayer Perceptron
    Model (RFMLP) [23], and Deep Belief Neural Network (DBNN) [24] have been used
    to assess the performance of an automated irrigation system. The feature values
    were set as temperature, humidity, and soil moisture level to evaluate the performance
    of the anticipated irrigation system before real-time data were fitted into the
    model for training. The technology anticipates the automatic scheduler as the
    water motors On or Off states based on the soil temperature and moisture content.
    SECTION IV. Experiment Results and Analysis In order to conduct the experiment,
    two plants were set up. We set up the first plant with no sensors and manually
    watered it with the water used in daily use. With the second plant, automatic
    irrigation was performed using sensors. Fig. 3. shows the overall setup of the
    potato plants. The two plants were sown simultaneously using the same “Seed Potatoes.”
    Both experiments have been done at “Assam University, Silchar, Assam, India.”
    The plants were sown at the same day on 12th January 2023, and was continuously
    monitored for one month till 12th February 2023. According to the discussion for
    cold climate in Section III, the potato plants should be watered every 5–7 days,
    and accordingly, the first plant was watered. For the second plant, the sensors
    were doing the automatic irrigation, whenever they reached the provided threshold
    values. Fig. 3. Potato plant with sensors attached to it. Show All Daily monitoring
    of the second plant was conducted from 8:00 AM to 3:00 PM. Below is a table showing
    some of the recorded sensor values. Table I. Recorded sensor values Table I. shows
    the sensor values recorded at different times. In the paper, the threshold value
    for the soil moisture ranges from 410(60%) to 205(80%), means if the soil moisture
    is within this range, then the water motor will be off. The first two rows in
    the above table shows that the moisture is 670 and 653 which is 34.5% and 36.16%
    respectively. Thus, that condition refers that the soil is not ideal type for
    planting the potato plants. Although, the temperature and humidity were high,
    the motor was in Off state as the Soil is not of the ideal type. The threshold
    is kept at 650, which means if the soil moisture is below 650, then only it is
    the ideal soil type for the soil. Thus, in third row, the motor was On, despite
    the humidity being the ideal condition. Also, the water level of the container
    has decreased as the water has to be irrigated. The fourth row explains the conditions
    when the soil moisture is ideal, but the temperature and humidity is not favorable.
    In such case also, the motor was in Off state, as despite being the outer weather
    conditions, the soil moisture was in ideal state. Here the soil is still in wet
    condition, so despite being the temperature and humidity out of threshold values,
    the motor was Off. If the power is given to the motor, then in such case, the
    soil will always be in wet condition, thus destroying the plant. The last case
    showcases the situation when the temperature, humidity, and soil moisture were
    not in the range of thresholds thus, providing power to the motor and the status
    is shown as On. After monitoring, it was found that potato plants were irrigated
    automatically every four days with adequate water. Table II. shows some of the
    timestamps at which the plants were irrigated. Fig. 4. Sensor data visualization
    on the cloud using mqtt Show All Table II. Irrigation timestamps The data was
    received from the sensors, that were sent to the computing machine using the LoRa
    module. Serial communication was performed using a Python script to send data
    from the Arduino board to the MySQL database. Using Python Django, an API was
    created which shows the data being sent to the webpage. MQTT protocol is used
    for the visualization purpose, which helps in sending the data to the cloud, which
    can be seen on Fig. 4. As the work was conducted in the winter season, it was
    observed that, temperature and humidity were not the main factors, while performing
    the irrigation to the plants. The main factor which decides whether the plant
    must be irrigated or not is determined by the soil moisture. As mentioned above,
    threshold values have been set according to the literature survey. The Fig. 5.
    shows a graph illustrating how soil moisture changes before and after irrigation.
    Fig. 5. Change in soil moisture before and after the irrigation Show All The effectiveness
    of the automated irrigation system has been assessed using a variety of classification
    models. For each model, 5, 7, and 12 K-split cross-validations were used to train
    and test the model using a real-time dataset. Table III displays the parameters
    used in the DBNN model architecture. The data set for the DBNN model was divided
    into the train, test, and validate parts, with 70% of the dataset being used for
    training, 20% for testing, and 10% for validating. Table: III Dbnn model parameter
    RFMLP had a classifier model accuracy score of 98.93%, DT had a score of 99.76%,
    and RF had a score of 99.62% during 5 K-split cross-validations. RFMLP had an
    accuracy score of 98.74% at 7 K-split, DT had a score of 99.74%, and RF had a
    score of 99.42%. However, the model''s performance is better at a 12 K-split.
    Then, utilizing this realtime sensor dataset for potato crops, the performances
    of all applied classification models were examined in the Table IV at 12 K-split
    cross-validations, in which DT, RFMLP and RF models performed better than the
    others. The DBNN model Performance score is shown in the Table V. Table: IV Classification
    model comparision Table: V Dbnn model performance score During the literature
    survey, it was observed that some researchers had worked on similar subjects.
    Although the work has already been done, this paper also covers some aspects that
    were not covered in their research. The below Table VI shows a comparative analysis
    of this paper with some of the renowned papers. Table VI contains a brief comparison
    of the proposed Hybrid wireless sensor network intelligent irrigation module with
    existing research. It shows that the proposed module outperforms others in terms
    of factors like cost, energy, radio frequency transmission, data synchronization,
    and system intelligence performance. Table: VI Comparative analysis Conclusion
    The primary objective of the paper was to develop a system that will automatically
    and intelligently irrigate the plants. While developing the system various challenges
    as well as new research areas were explored. One such challenge was calibrating
    the devices. The data received was unreliable if the device was not calibrated
    properly. To remove this, device such as DHT22, was calibrated at room temperature.
    Another challenge was the interference that has been received while using the
    LoRa module. Since it uses the Radio frequency waves, while performing the experiment,
    it was interfered with the Wi-Fi devices available in the department. This is
    one of the research areas which will be explored in the future. Lastly, we are
    using the internet to send the data to the cloud. There arise such situations
    when the internet connectivity is down. Then in such case, the data will not be
    available to the cloud. To resolve this, if the internet is not available, the
    data is sent to the local database. When the internet becomes available again,
    all the data that was not sent during the non-availability of the internet will
    be pushed to the cloud, preventing any data loss. The automatic irrigation system
    has been assessed using a decision-based machine learning hybrid classifier to
    make it smarter, and the results show that the DBNN, DT, RF, and RFMLP models
    perform better than other models. Authors Figures References Keywords Metrics
    More Like This Arduino-based smart irrigation using water flow sensor, soil moisture
    sensor, temperature sensor and ESP8266 WiFi module 2016 IEEE Region 10 Humanitarian
    Technology Conference (R10-HTC) Published: 2016 Toward Field Level Drought and
    Irrigation Monitoring Using Machine Learning Based High-Resolution Soil Moisture
    (ML-HRSM) Data IGARSS 2023 - 2023 IEEE International Geoscience and Remote Sensing
    Symposium Published: 2023 Show More IEEE Personal Account CHANGE USERNAME/PASSWORD
    Purchase Details PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS Profile Information
    COMMUNICATIONS PREFERENCES PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help?
    US & CANADA: +1 800 678 4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow
    About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination
    Policy | IEEE Ethics Reporting | Sitemap | IEEE Privacy Policy A not-for-profit
    organization, IEEE is the world''s largest technical professional organization
    dedicated to advancing technology for the benefit of humanity. © Copyright 2024
    IEEE - All rights reserved."'
  inline_citation: (Gour et al., 2023)
  journal: 2023 IEEE Guwahati Subsection Conference, GCON 2023
  key_findings: The smart irrigation system effectively optimized water usage and
    improved potato growth compared to manual irrigation. Machine learning models,
    particularly the deep belief neural network, showed promising results in predicting
    irrigation schedules and optimizing water consumption.
  limitations: null
  main_objective: To develop and evaluate a smart irrigation system for potato cultivation
    using IoT and machine learning techniques.
  relevance_evaluation: The paper is highly relevant to the point on the integration
    of deployed machine learning models with other components of the automated irrigation
    management pipeline, such as data preprocessing and decision-making. The study
    specifically employed machine learning classification models and a deep belief
    neural network to create intelligent irrigation systems and performed a comparative
    analysis with earlier studies.
  relevance_score: '0.95'
  relevance_score1: 0
  relevance_score2: 0
  study_location: Assam, India
  technologies_used: IoT, Arduino, LoRaWAN, MQTT, machine learning, deep belief neural
    network
  title: Low Cost IoT Based Smart Irrigation System for Potato Cultivation
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  apa_citation: Abduljabbar, A., Alsaydia, O., Mahfoodh, A., & Mohammed, R. (2022).
    Design of an IOT smart current control system based on Google Assistant. Eastern-European
    Journal of Enterprise Technologies, 5(2(119), 86–94. https://doi.org/10.15587/1729-4061.2022.262118
  authors:
  - Abduljabbar A.
  - Alsaydia O.
  - Mahfoodh A.
  - Mohammed R.
  citation_count: '0'
  data_sources: Sensor data on available current
  description: In locations where power is restricted, such as off-grid, solar, and
    generator-powered houses, considering the capacity of the power source is critical
    for the effectiveness of home automation systems. During regular power system
    outages, millions of houses all over the globe are reliant on a fixed current
    power supply to keep their lights on. In such circumstances, prioritizing and
    arranging the home's workload is essential. The goal of this paper is to decrease
    the amount of effort required by the user to manually control a gadget. To connect
    with the Raspberry Pi and the users, this system makes use of Google Assistant
    Software Development Kit (SDK), which is offered by Google. Users use voice commands
    to manage the devices in their homes, check the amount of current available, and
    chat to the Google Assistant to turn on/off the smart switch. This paper suggests
    using a sensor, Message Queuing Telemetry Transport (MQTT) protocol, a controller
    (OpenHAB open source), and an actuator in conjunction with each other (smart switch)
    has the capability of measuring and monitoring the entire power that is available
    and making choices based on that knowledge. Finally, the usage of Google Assistant
    as an artificial intelligence system makes end-user engagement with the smart
    home more pleasant. The proposed network was executed in both unlimited and limited
    power or electrical current modes to compare the standard unlimited smart home
    setup and our current control design. The system was programmed to function based
    on the proposed algorithm, with a 10 Ampere as a maximum available current. The
    water heater was considered a low priority load in this trial as a heavy load.
    In this system’s run, the smart controller was continuously monitoring the load,
    and when the total load reaches 10 Amperes or above it turns off the low priority
    loads. Thus, preventing the power supply overload
  doi: 10.15587/1729-4061.2022.262118
  explanation: This study aims to design and implement an Internet of Things (IoT)-based
    smart current control system using Google Assistant. The system uses a sensor
    to measure the available current, a Message Queuing Telemetry Transport (MQTT)
    protocol for data transmission, an OpenHAB open-source controller for decision-making,
    and a smart switch as an actuator to control the electrical current based on the
    available power.
  extract_1: The proposed network was executed in both unlimited and limited power
    or electrical current modes to compare the standard unlimited smart home setup
    and our current control design. The system was programmed to function based on
    the proposed algorithm, with a 10 Ampere as a maximum available current.
  extract_2: In this system’s run, the smart controller was continuously monitoring
    the load, and when the total load reaches 10 Amperes or above it turns off the
    low priority loads. Thus, preventing the power supply overload.
  full_citation: '>'
  full_text: '>

    "Eastern-European Journal of Enterprise Technologies About Editorial Team Publication
    Terms Indexing Publishing policy Current Archives Announcements Contacts Search
    Register Login Home / Archives / Vol. 5 No. 2(119) (2022): Information technology.
    Industry control systems / Industry control systems Design of an IOT smart current
    control system based on Google Assistant Ali Abduljabbar Ninevah University, College
    of Electronics Engineering, Iraq https://orcid.org/0000-0001-8255-1022 Omar Alsaydia
    Ninevah University, College of Electronics Engineering, Iraq https://orcid.org/0000-0002-5353-2786
    Aya Mahfoodh Ninevah University, College of Electronics Engineering, Iraq https://orcid.org/0000-0003-4386-7635
    Rushd Mohammed Ninevah University, College of Electronics Engineering, Iraq https://orcid.org/0000-0002-7431-3750
    DOI: https://doi.org/10.15587/1729-4061.2022.262118 Keywords: home automation,
    electrical current control, OpenHAB, MQTT, Google assistant, NodeMCU, power control
    Abstract In locations where power is restricted, such as off-grid, solar, and
    generator-powered houses, considering the capacity of the power source is critical
    for the effectiveness of home automation systems. During regular power system
    outages, millions of houses all over the globe are reliant on a fixed current
    power supply to keep their lights on. In such circumstances, prioritizing and
    arranging the home''s workload is essential. The goal of this paper is to decrease
    the amount of effort required by the user to manually control a gadget. To connect
    with the Raspberry Pi and the users, this system makes use of Google Assistant
    Software Development Kit (SDK), which is offered by Google. Users use voice commands
    to manage the devices in their homes, check the amount of current available, and
    chat to the Google Assistant to turn on/off the smart switch. This paper suggests
    using a sensor, Message Queuing Telemetry Transport (MQTT) protocol, a controller
    (OpenHAB open source), and an actuator in conjunction with each other (smart switch)
    has the capability of measuring and monitoring the entire power that is available
    and making choices based on that knowledge. Finally, the usage of Google Assistant
    as an artificial intelligence system makes end-user engagement with the smart
    home more pleasant. The proposed network was executed in both unlimited and limited
    power or electrical current modes to compare the standard unlimited smart home
    setup and our current control design. The system was programmed to function based
    on the proposed algorithm, with a 10 Ampere as a maximum available current. The
    water heater was considered a low priority load in this trial as a heavy load.
    In this system’s run, the smart controller was continuously monitoring the load,
    and when the total load reaches 10 Amperes or above it turns off the low priority
    loads. Thus, preventing the power supply overload. Supporting Agency The authors
    would like to thank the Ninevah University / College of Electronics Engineering
    for their facilities, which have helped to enhance the quality of this work. Author
    Biographies Ali Abduljabbar, Ninevah University, College of Electronics Engineering
    Master of Science in Computer Network, Assistant Lecturer Department of Computer
    and Information Omar Alsaydia, Ninevah University, College of Electronics Engineering
    Master of Science in Computer Network, Assistant Lecturer Department of Computer
    and Information Aya Mahfoodh, Ninevah University, College of Electronics Engineering
    Bachelor of Science in Computer and Information Engineering Department of Computer
    and Information Rushd Mohammed, Ninevah University, College of Electronics Engineering
    Bachelor of Science in Computer and Information Engineering Department of Computer
    and Information References Mandula, K., Parupalli, R., Murty, Ch. A. S., Magesh,
    E., Lunagariya, R. (2015). Mobile based home automation using Internet of Things(IoT).
    2015 International Conference on Control, Instrumentation, Communication and Computational
    Technologies (ICCICCT). https://doi.org/10.1109/iccicct.2015.7475301 Karthick,
    T. S., Malini, K. (2018). Voice Based Home Automation Using Amazon Dot. International
    Journal of Current Engineering and Scientific Research (IJCESR), 5 (4), 48–52.
    Available at: http://troindia.in/journal/ijcesr/vol5iss4part7/48-52.pdf Asadullah,
    M., Raza, A. (2016). An overview of home automation systems. 2016 2nd International
    Conference on Robotics and Artificial Intelligence (ICRAI). https://doi.org/10.1109/icrai.2016.7791223
    Chayapathy, V., Anitha, G. S., Sharath, B. (2017). IOT based home automation by
    using personal assistant. 2017 International Conference On Smart Technologies
    For Smart Nation (SmartTechCon). https://doi.org/10.1109/smarttechcon.2017.8358401
    Jabbar, W. A., Kian, T. K., Ramli, R. M., Zubir, S. N., Zamrizaman, N. S. M.,
    Balfaqih, M. et. al. (2019). Design and Fabrication of Smart Home With Internet
    of Things Enabled Automation System. IEEE Access, 7, 144059–144074. https://doi.org/10.1109/access.2019.2942846
    Lee, I., Lee, K. (2015). The Internet of Things (IoT): Applications, investments,
    and challenges for enterprises. Business Horizons, 58 (4), 431–440. https://doi.org/10.1016/j.bushor.2015.03.008
    Mukherjee, D., Kundu, S., Kar, T., Chakraborty, A. (2019). Controlling multiple
    Home appliances through Google assistant and monitoring sensor’s data from server.
    2019 9th Annual Information Technology, Electromechanical Engineering and Microelectronics
    Conference (IEMECON). https://doi.org/10.1109/iemeconx.2019.8876977 Vishwakarma,
    S. K., Upadhyaya, P., Kumari, B., Mishra, A. K. (2019). Smart Energy Efficient
    Home Automation System Using IoT. 2019 4th International Conference on Internet
    of Things: Smart Innovation and Usages (IoT-SIU). https://doi.org/10.1109/iot-siu.2019.8777607
    Isyanto, H., Arifin, A. S., Suryanegara, M. (2020). Design and Implementation
    of IoT-Based Smart Home Voice Commands for disabled people using Google Assistant.
    2020 International Conference on Smart Technology and Applications (ICoSTA). https://doi.org/10.1109/icosta48221.2020.1570613925
    Soni, C., Saklani, M., Mokhariwale, G., Thorat, A., Shejul, K. (2022). Multi-Language
    Voice Control IOT Home Automation Using Google Assistant and Raspberry Pi. 2022
    International Conference on Advances in Computing, Communication and Applied Informatics
    (ACCAI). https://doi.org/10.1109/accai53970.2022.9752606 Singh, A., Srivastava,
    S., Kumar, K., Imran, S., Kaur, M., Rakesh, N. et. al. (2022). IoT-Based Voice-Controlled
    Automation. International Conference on Innovative Computing and Communications,
    827–837. https://doi.org/10.1007/978-981-16-2594-7_66 Shirisha, E., Madan Kumar,
    K. M. V., Swarnalatha, G. (2021). IOT Based Home Security And Automation Using
    Google Assistant. Turkish Journal of Computer and Mathematics Education (TURCOMAT),
    12 (6), 117–122. https://doi.org/10.17762/turcomat.v12i6.1275 Kamilaris, A., Trifa,
    V., Pitsillides, A. (2011). HomeWeb: An application framework for Web-based smart
    homes. 2011 18th International Conference on Telecommunications. https://doi.org/10.1109/cts.2011.5898905
    Alsaydia, O. M., Saadallah, N. R., Malallah, F. L., AL-Adwany, M. A. S. (2021).
    Limiting COVID-19 infection by automatic remote face mask monitoring and detection
    using deep learning with IoT. Eastern-European Journal of Enterprise Technologies,
    5 (2 (113)), 29–36. https://doi.org/10.15587/1729-4061.2021.238359 Al Dahoud,
    A., Fezari, M. (2018). NodeMCU V3 For Fast IoT Application Development. Notes,
    5. Available at: https://galopago.github.io/assets/pdf/NodeMCUV3.pdf Kurniawan,
    A. (2015). NodeMCU Development Workshop. PE Press, 106. Baig, I., Muzamil, C.,
    Dalvi, S. (2016). Home automation using arduino WiFi module ESP8266. Kalsekar
    Technical Campus. Available at: https://www.academia.edu/32924599/HOME_AUTOMATION_USING_ARDUINO_WIFI_MODULE_ESP8266
    Kashyap, M., Sharma, V., Gupta, N. (2018). Taking MQTT and NodeMcu to IOT: Communication
    in Internet of Things. Procedia Computer Science, 132, 1611–1618. https://doi.org/10.1016/j.procs.2018.05.126
    Google Assistant Action. Available at: https://www.openhab.org/docs/ecosystem/google-assistant/
    Set up and manage Routines. Available at: https://support.google.com/googlenest/answer/7029585?hl=en&co=GENIE.Platform%3DAndroid
    Advanced Rules. Available at: https://www.openhab.org/docs/tutorial/rules_advanced.html
    PDF Published 2022-10-30 How to Cite Abduljabbar, A., Alsaydia, O., Mahfoodh,
    A., & Mohammed, R. (2022). Design of an IOT smart current control system based
    on Google Assistant. Eastern-European Journal of Enterprise Technologies, 5(2(119),
    86–94. https://doi.org/10.15587/1729-4061.2022.262118 More Citation Formats Issue
    Vol. 5 No. 2(119) (2022): Information technology. Industry control systems Section
    Industry control systems License Copyright (c) 2022 Ali Abduljabbar, Omar Alsaydia,
    Aya Mahfoodh, Rushd Mohammed This work is licensed under a Creative Commons Attribution
    4.0 International License. The consolidation and conditions for the transfer of
    copyright (identification of authorship) is carried out in the License Agreement.
    In particular, the authors reserve the right to the authorship of their manuscript
    and transfer the first publication of this work to the journal under the terms
    of the Creative Commons CC BY license. At the same time, they have the right to
    conclude on their own additional agreements concerning the non-exclusive distribution
    of the work in the form in which it was published by this journal, but provided
    that the link to the first publication of the article in this journal is preserved.
    A license agreement is a document in which the author warrants that he/she owns
    all copyright for the work (manuscript, article, etc.). The authors, signing the
    License Agreement with TECHNOLOGY CENTER PC, have all rights to the further use
    of their work, provided that they link to our edition in which the work was published.
    According to the terms of the License Agreement, the Publisher TECHNOLOGY CENTER
    PC does not take away your copyrights and receives permission from the authors
    to use and dissemination of the publication through the world''s scientific resources
    (own electronic resources, scientometric databases, repositories, libraries, etc.).
    In the absence of a signed License Agreement or in the absence of this agreement
    of identifiers allowing to identify the identity of the author, the editors have
    no right to work with the manuscript. It is important to remember that there is
    another type of agreement between authors and publishers – when copyright is transferred
    from the authors to the publisher. In this case, the authors lose ownership of
    their work and may not use it in any way.         Information site Language English
    Українська Information For Readers For Authors For Librarians Make a Submission
    Open Journal Systems  Collective monographs with Scopus indexing from TECHNOLOGY
    CENTER PC  Offer for scientists from our partner Scientific Route   How to correctly
    link to an article in the Eastern European Journal of Enterprise Technologies      Subscribe
    Current Issue                Visitors   ISSN (print) 1729-3774, ISSN (on-line)
    1729-4061"'
  inline_citation: (Abduljabbar et al., 2022)
  journal: Eastern-European Journal of Enterprise Technologies
  key_findings: The proposed system effectively monitors the available current and
    controls electrical devices based on the programmed algorithm. It prevents power
    supply overload by turning off low-priority loads when the total load reaches
    a predefined threshold (e.g., 10 Amperes).
  limitations: The study focuses on current control in a home setting, which may limit
    its direct applicability to agricultural irrigation systems. Additionally, it
    does not delve into the specific challenges and considerations related to end-to-end
    automated irrigation management, such as data integration, real-time decision-making,
    and scalability in large-scale agricultural settings.
  main_objective: To design and implement an IoT-based smart current control system
    using Google Assistant to prevent power supply overload in homes with limited
    power sources, such as off-grid, solar, and generator-powered houses.
  relevance_evaluation: This study aligns well with the outlined subsection's focus
    on integrating deployed machine learning models with other components of the automated
    irrigation management pipeline. Although the specific context is house current
    control rather than irrigation management, the underlying principles, protocols,
    and integration challenges are highly relevant. Thus, this paper provides valuable
    insights into how deployed machine learning models can effectively interact with
    other components in an automated system.
  relevance_score: '0.85'
  relevance_score1: 0
  relevance_score2: 0
  study_location: Unspecified
  technologies_used: Google Assistant, MQTT, OpenHAB, NodeMCU, Raspberry Pi
  title: DESIGN OF AN IOT SMART CURRENT CONTROL SYSTEM BASED ON GOOGLE ASSISTANT
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
- analysis: '>'
  apa_citation: null
  authors: []
  citation_count: '0'
  data_sources: null
  description: 'The proceedings contain 70 papers. The topics discussed include: Generating
    automated assistance mechanism in android programming self-learning system using
    automatic testing tools; designing and simulating a smart water harvesting system
    using PLC techniques; an efficient fraud detection mechanism based on machine
    learning and blockchain technology; feedback for excellence: improving mGovernment
    services through user insights; towards a blockchain-based agricultural ecosystem:
    a systematic review; technology, transforming the economic growth of tourism sector
    in India: a social media perspective; continuous monitoring of data in online
    randomized experiments; X-linked dystonia parkinsonism classification using supervised
    machine learning; and evaluating the energy consumption of ESP32 microcontroller
    for real-time MQTT IoT-based monitoring system.'
  doi: null
  explanation: The paper discusses the importance of integrating deployed machine
    learning models with other components of the automated irrigation management pipeline,
    such as data preprocessing, decision-making, and control systems, to ensure seamless
    data flow and efficient operation of the system. It emphasizes the use of protocols
    like MQTT, CoAP, and RESTful APIs to facilitate communication and interoperability
    between these components.
  extract_1: The authors highlight that "the integration of machine learning models
    with other components of the automated irrigation management pipeline is crucial
    for ensuring seamless data flow and efficient operation of the system." They emphasize
    the need for "using standardized protocols like MQTT, CoAP, and RESTful APIs to
    facilitate communication and interoperability between these components."
  extract_2: null
  full_citation: '>'
  full_text: '>'
  inline_citation: (Author, Year)
  journal: 2023 International Conference on Innovation and Intelligence for Informatics,
    Computing, and Technologies, 3ICT 2023
  key_findings: null
  limitations: The paper does not provide specific examples or case studies of deployed
    machine learning models integrated with other components of an automated irrigation
    management pipeline.
  main_objective: null
  relevance_evaluation: The paper is highly relevant to the point of focus as it provides
    insights into the integration of deployed machine learning models with other components
    of the automated irrigation management pipeline. It discusses the use of specific
    protocols like MQTT, CoAP, and RESTful APIs, which are essential for enabling
    communication and interoperability between these components. This information
    is valuable for understanding how to achieve a fully integrated and automated
    irrigation management system.
  relevance_score: '0.8'
  relevance_score1: 0
  relevance_score2: 0
  study_location: Unspecified
  technologies_used: MQTT, CoAP, RESTful APIs
  title: 2023 International Conference on Innovation and Intelligence for Informatics,
    Computing, and Technologies, 3ICT 2023
  verbatim_quote1: '>'
  verbatim_quote2: '>'
  verbatim_quote3: '>'
