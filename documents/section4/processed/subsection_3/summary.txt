<instructions>


Use the information provided in the <documents> tags to write the next subsection of the research paper, following these steps:
1. Review the overall intention of the research paper, specified in the <review_intention> tag. Ensure the subsection you write aligns with and contributes to this overall goal.
2. Consider the specific intention for this subsection of the paper, stated in the <section_intention> tag. The content you write should fulfill this purpose. 
3. Use the title provided in the <subsection_title> tag as the heading for the subsection. 
4. Address each of the points specified in the </subsection_point_Point *> tags:
   a) Make a clear case for each point using the text provided in the "point" field.
   b) Support each point with evidence from the research papers listed in the corresponding "papers to support point" field.
   c) When citing a paper to support a point, include inline citations with the author name(s) and year, e.g. (Smith et al., 2020; Johnson and Lee, 2019; Brown, 2018). Cite all papers that strengthen or relate to the point being made.
   d) While making a point and citing the supporting papers, provide a brief explanation in your own words of how the cited papers support the point.
5. Ensure that both of the points from the <subsection_point> tags are fully addressed and supported by citations. Do not skip or combine any points.
6. After addressing the specified points, wrap up the subsection with a concluding sentence or two that ties the points together and relates them back to the <section_intention>.
7. Review the <Previous_sections> of the paper, and ensure that the new subsection you have written fits logically and coherently with the existing content. Add transition sentences as needed to improve the flow.
8. Proofread the subsection to ensure it is clear, concise, and free of grammatical and spelling errors. Maintain a formal academic tone and style consistent with the rest of the research paper.
9. Format the subsection using Markdown, including the subsection heading (using ## or the equivalent for the document), inline citations, and any other formatting needed for clarity and readability.
10. If any information is missing or unclear in the provided tags, simply do your best to write the subsection based on the available information. Do not add any information or make any points not supported by the provided content. Prioritize fully addressing the required points over hitting a specific word count.

The output should be a complete, well-organized, and properly cited subsection ready to be added to the research paper.

Begin your answer with a brief recap of the instructions stating what you will to optimize the quality of the answer. Clearly and briefly state the subsection you'll be working on and the points you'll be addressing. Then proceed to write the subsection following the instructions provided. 

Critical: 
- Do not include a conclusion or summary as the entry is in the middle of the document. Focus on addressing the points and supporting them with evidence from the provided papers. Ensure that the subsection is well-structured, coherent, and effectively contributes to the overall research paper.
- The subsection we are focusing on is: 4.4. Online Learning in the Cloud
- No need for sub-sub-sections. just provide paragraphs addressing each point. They should transition fluidly and narurally into each other.
- Ensure that the content is supported by the provided papers and that the citations are correctly formatted and placed within the text.
- Do not repeat content from the previous sections. Ensure that the information provided is new and relevant to the subsection being written.



</instructions>

<documents>
<review_intention>
  
the purpose and intention of this systematic review on automated systems for real-time irrigation management can be interpreted as follows:
Addressing the global food challenge: The review aims to explore how automated, real-time irrigation management systems can contribute to the efficient use of water resources and enhance agricultural productivity to meet the growing demand for food.
Evaluating the current state and future potential: The primary objective is to critically assess the current state of end-to-end automated irrigation management systems that integrate IoT and machine learning technologies. The review also seeks to identify gaps and propose solutions for seamless integration across the automated irrigation management system to achieve fully autonomous, scalable irrigation management.
Examining automation across the entire pipeline: The review intends to systematically analyze the automation of each component of the irrigation management pipeline, from data collection and transmission to processing, analysis, decision-making, and automated action. It aims to investigate the effectiveness and efficiency of integrated end-to-end automated irrigation systems.
Highlighting the role of interoperability and standardization: The review seeks to emphasize the importance of interoperability and standardization in enabling the integration of components within the automated irrigation management pipeline. It aims to identify existing and emerging standards and their applicability to real-time irrigation management systems.
Identifying challenges and proposing solutions: The review intends to uncover the challenges associated with implementing real-time, automated irrigation systems, such as data quality, scalability, reliability, and security. It aims to propose solutions and best practices based on the analysis of case studies and real-world implementations.
Guiding future research and innovation: By identifying research gaps and proposing new research questions and hypotheses, the review aims to provide a roadmap for advancing the field of real-time, automated irrigation management. It seeks to encourage collaborative research efforts across disciplines to address the complex challenges of automated irrigation systems.
In summary, this systematic review aims to provide a comprehensive and critical evaluation of the current state and future potential of real-time, end-to-end automated irrigation management systems. Its intention is to guide future research, innovation, and implementation efforts to achieve fully autonomous, scalable irrigation management that can contribute to addressing the global food challenge.
</review_intention>

<section_intention>
AUTOMATED DATA PROCESSING IN THE CLOUD: Examines the importance of data quality and preprocessing in the cloud, containerization strategies for scalable and autonomous deployment, and the deployment of machine learning (ML) models for real-time data processing and inference.
</section_intention>

<subsection_title>
4.3. Deploying ML Models for Data Processing
</subsection_title>

<subsection_point_Point 2>
Point: Techniques for optimizing machine learning model performance and resource utilization in cloud environments, such as Model compression (e.g., pruning, quantization), Hardware acceleration (e.g., GPU, TPU), Distributed training (e.g., Horovod, BytePS)

Papers to support point:

Paper 1:
- APA Citation: Premkumar, S., & Sigappi, A. N. (2022). Smart irrigation system using machine learning and IoT for greenhouse. Journal of Intelligent Systems, 31(632–650).
  Main Objective: To develop a soilless culture system with computer vision and machine learning (ML) techniques for improved crop production.
  Study Location: Unspecified
  Data Sources: Real-time data on plant growth, environmental conditions, and irrigation status.
  Technologies Used: Computer vision, Machine learning, Sensors, Cameras
  Key Findings: The proposed system can improve crop production in soilless culture systems by providing real-time monitoring and control of irrigation, nutrient delivery, and other factors that affect plant growth.
  Extract 1: The proposed system uses a variety of sensors and cameras to collect real-time data on plant growth, environmental conditions, and irrigation status.
  Extract 2: This data is then processed using computer vision and ML algorithms to make decisions about irrigation, nutrient delivery, and other factors that affect plant growth.
  Limitations: The study utilized a dataset of images collected from a single greenhouse in a specific geographic location, and therefore, the findings may not be generalizable to a large-scale farming industry. Furthermore, the study did not account for the cost and labor requirements of using a soilless culture system, which is a significant factor for commercial crop production.
  Relevance Evaluation: This study is highly relevant to the specific point being made in the literature review because it demonstrates the potential of using computer vision and ML techniques to improve crop production in soilless culture systems. The findings of this study can help to guide the development of future soilless culture systems and improve the efficiency and sustainability of crop production.
  Relevance Score: 1.0
  Inline Citation: (Premkumar and Sigappi, 2022)
  Explanation: The study's main objective was to develop a soilless culture system with computer vision and machine learning (ML) techniques for improved crop production. The proposed system uses a variety of sensors and cameras to collect real-time data on plant growth, environmental conditions, and irrigation status. This data is then processed using computer vision and ML algorithms to make decisions about irrigation, nutrient delivery, and other factors that affect plant growth.

 Full Text: >
Research Article
S. Premkumar* and AN. Sigappi
IoT-enabled edge computing model for smart
irrigation system
https://doi.org/10.1515/jisys-2022-0046
received January 10, 2022; accepted March 16, 2022
Abstract: Precision agriculture is a breakthrough in digital farming technology, which facilitates the appli-
cation of precise and exact amount of input level of water and fertilizer to the crop at the required time for
increasing the yield. Since agriculture relies on direct rainfall than irrigation and the prediction of rainfall
date is easily available from web source, the integration of rainfall prediction with precision agriculture
helps to regulate the water consumption in farms. In this work, an edge computing model is developed for
predicting soil moisture in real time and managing the water usage in accordance with rain prediction. A
soil moisture prediction hybrid algorithm (SMPHA) has been developed that revolves around the decision-
making techniques with live environmental parameters including weather parameters for the prediction of
soil moisture through the impact of precipitation. Numerous algorithms with the combination of regression
+ clustering are estimated, and it is inferred that XGBoost + k-means outperforms other algorithmic com-
binations that is deployed in edge model. This model is used as an intermediary between the end IoT
devices and cloud that results in the saving of computationally intensive processing performed on cloud
servers. The servers located on a local edge network perform the developed algorithmic computations.
Avoiding transmission over the cloud results in signiﬁcant latency, response time, and computation power
savings and therefore increases the eﬃciency of data transfer. The proposed edge computing model is
implemented in Raspberry Pi as an edge, Heroku as cloud, and edge nodes as the combination of Pi with
actuators and sensors. The monitored data from Pi are stored in MongoDB webserver that is controlled by
Web dashboard. Finally, the developed model is implemented in cloud and edge where the edge server
implementation performs better in terms of latency, bandwidth, throughput, response time, and CPU
memory usage.
Keywords: smart irrigation, edge-based irrigation, edge computing, precision agriculture, soil moisture
prediction, irrigation management system, IoT, oﬄoading mechanism
1 Introduction
It is evident that agriculture always has a specialized role in the anthrophonic evolution and has been
serving as an important economic factor for the growth of a country [1]. Around 58% of the population
depend on agriculture as the chief source of livelihood in India. The quality and productivity of agricultural
products have declined over these years as several factors have inﬂuenced the crop productivity both
directly and indirectly. Some major factors that aﬀect the crop production are climatic changes, global
warming, and water scarcity [2]. The agricultural land’s productivity is aﬀected by the direct and indirect

* Corresponding author: S. Premkumar, Department of Computer Science and Engineering, Faculty of Engineering and
Technology, Annamalai University, Chidambaram - 608002, Tamilnadu, India, e-mail: premambal@gmail.com
AN. Sigappi: Department of Computer Science and Engineering, Faculty of Engineering and Technology, Annamalai University,
Chidambaram - 608002, Tamilnadu, India, e-mail: an.sigappi@gmail.com
Journal of Intelligent Systems 2022; 31: 632–650
Open Access. © 2022 S. Premkumar and AN. Sigappi, published by De Gruyter.
This work is licensed under the Creative
Commons Attribution 4.0 International License.
changes in climate [3,4]. The crop growth has been already aﬀected by the changes in climate incurred by
global warming. The nutrition quality of soil, ground water level, sea, and ocean are aﬀected by the
modiﬁcations in average temperature, rainfall, and extreme weather conditions such as hail storms, dust
storms, heatwaves, etc. due to global warming [5,6]. Degradation of soil is primarily created by various
methods including 93.7% by water erosion, 9.5% by wind erosion, 5.9% by salinity and alkalinity, etc.
Further changes in climate would inﬂuence adversely the crop production [7]. Since water is an indispen-
sable requirement for plants and cultivation, the high level of soil is eroded and thereby the fertility is also
declined. Due to the ever-changing climate, water scarcity has become a huge problem. Drought-like
conditions is already formed in several areas and thereby the present and conventional farming practices
are not suitable. New and unique environment preserving techniques are the need of the hour [8].
The conventional approaches in agriculture are enhanced by the advent of several advancements in
technology [9]. These new improved methodologies ensure optimized utilization of resources, accurate
forecast of water needs and environmental parameters, reduction of human intervention, etc. [10]. Conse-
quently, the outcomes of crops in terms of yield and quality are higher with cost-eﬀective methods. One
such booming technology is the Internet of things (IoT) [11].
IoT is the collection of components embedded in the sensor for measuring and transferring data via
network devices as sensed from pumps and tractors to weather stations. Primarily, IoT deals with the
transmission and reception of data related to farms through devices using the Internet for prediction
and providing decisions to the farmers. IoT-based methodologies has brought a changeover in agricultural
patterns and farming approaches [12]. IoT devices can gather information about soil moisture, chemical
properties, dam levels, livestock health, and weather details in real time. The information acquired from IoT
devices facilitates the farmers in tracking farms periodically. Farmers can save time and money by
responding faster to farm conditions. Cloud computing models integrated with on-ﬁeld agricultural sensors
need to be incorporated for tackling the issue of processing huge voluminous data.
One of the major challenges of IoT is the processing of huge datasets in a sequential way. Some of the
key factors that need to be focused on this process are as follows: information about the type and nature of
data, the way of acquiring the data, etc. The preliminary stage comprises acquiring the data and ingesting
the data to the system. Substantial cognizance of data are achieved as the data pass through all the
gateways where it is cleansed and transformed before entering into the system. In the near future, dynamic
prediction of soil moisture and precipitation techniques are to be developed for smart irrigation systems.
Therefore, a system is developed for eﬃcient and optimal utilization of fresh water in irrigation along with
drip irrigation system. It aids in ﬁnding which one of the plants fails to get suﬃcient water. When the water
supply is provided the next day, this delay should not disturb the system. It becomes important for the
farmers to understand the optimal usage of water and fertilizers to bring out sustenance in the agricultural
industry. Therefore, processing must be done for analyzing the data, so that patterns can be analyzed and
planning can be done for the long term, accordingly. Hence, it gives a broad vision in deciding where the
processing is to be done exactly. Therefore, it is obvious that not all data are crucial, and it provides a clear
view of which data need to be stored, discarded, and retained for both long-term and short-term purposes.
Thus, all these challenging issues require to be addressed and that is where storage technologies are
actually highlighted. The poor quality of Internet access in developing nations makes the implementation
quite challenging. An applicable solution to solve this problem is through edge computing where the
essential data could be oﬄoaded from the cloud over the edge of the cloud, and this is the exact point
where the approach of smart sensing with edge computing gets in.
With the purpose of broadening the potential of edge computing and using it in the agriculture domain,
a novel approach using machine learning (ML) methods is proposed for analyzing the data acquired by the
IoT devices deployed at the farm. Here, the data acquired from IoT components undergo preprocessing and
ML models on the edge nodes to analyze and assess the appropriate results for providing the best instruc-
tions for controlling the actuators (e.g., light, pumps at diﬀerent locations) in the farms.
This article presents an automated system, as shown in Figure 1, to predict the soil moisture using the
ﬁeld information acquired from the self-designed sensor node deployed at the ﬁeld and the forecast
information of weather via Internet. A unique algorithm has been developed that revolves around the
IoT-enabled edge computing model for smart irrigation system

633
machine learning techniques for the prediction of soil moisture. Here, many algorithms with the combina-
tion of regression + clustering was estimated, and it is inferred that XGBoost + k-means outperforms other
algorithmic combinations, and therefore, it is deployed for the prediction of soil moisture in the proposed
work. The proposed algorithm makes eﬀective irrigation decisions with optimized usage of water in a more
accurate and reliable manner. The eﬀective decision-making refers to the process of predicting the rainfall,
thereby reducing the water usage in advance by the proposed algorithm in accordance with the predicted
rainy days. Through this automatic decision-making, over watering is avoided by saving the soil. The
server-side software is developed with node-side connectivity using the information for visualization and
decision support features. This proposed algorithm is implemented in edge to prove the eﬃciency of the
edge server handling the automated system better than the cloud control. The performance of the decen-
tralized edge-based architecture has been evaluated for downloading the hybrid algorithm from cloud in
real time execution. The performance can be enhanced by adopting edge computing architecture and
measured with the help of network parameters like latency, bandwidth, and response time. Edge computing
capacity is also estimated using the CPU processor and memory consumption while executing the proposed
algorithm with irrigation scheduling.
2 Related work
In ref. [13], a smart irrigation system not aﬀected by communication disconnection and delay is developed
using edge nodes deployed at the farms. Environmental parameters have an intricate impact on the plant
growth. It becomes necessary for evaluating multiple AI models simultaneously in an actual cultivation
environment for comparing AI models under the same conditions. Due to the working of existing irrigation
systems on the cloud, communication is instable in the concurrent evaluation of AI models. However, the
instability does not induce an edge node in its performance.
The factors such as type of plant, soil, climate, humidity, temperature, and soil moisture need to be
considered for the irrigation system packed with potential smart decisions. The nature and type of plant,
soil, and climate are queried by ontology (branch of metaphysics dealing with the nature of being), whereas
other factors such as temperature, humidity, and soil moisture are sensed by the sensor network. The
trained ML model predicts the watering decisions based on ontology and other factors as mentioned earlier.
Figure 1: Architecture of the proposed system.
634

S. Premkumar and AN. Sigappi
Smart irrigation has three modules: (i) sensor network modules that sense the parameters impacting the water
requirement by using sensors DHT22, light sensor BH1750, and HL-69 hygrometer for sensing the temperature,
soil moisture, light, and humidity in air. (ii) Edge and IoT server’s module to send and receive data through
HTTP requests. (iii) Training module in which KNN is applied on the sample dataset for training and decision-
making regarding the water needs. Based on the input values, the trained model categorizes the input into ﬁve
possible classes: highly not needed, not needed, average, needed, and highly needed [14].
A decentralized smart irrigation approach is proposed for strawberry greenhouses in contrast to con-
ventional cloud-based solutions for keeping the agricultural data at the edge of the network. A full-scale
smart irrigation system in an actual strawberry greenhouse environment is developed after a small-scale
smart irrigation networking prototype system and a reference architecture targeting edge data distribution
for strawberry greenhouse applications are framed. A three-step industrial approach is formed for
designing, implementing, and validating a solution for smart strawberry irrigation in greenhouses and
keeping the corresponding data at the edge of the network at the same time: (i) A small-scale smart
irrigation prototype solution with oﬀ-the-shelf hardware and software equipment is tested and evaluated
on various types of plants for gaining useful insights for deployments on a large scale. (ii) A reference
network architecture is designed for targeting smart irrigation and edge data distribution speciﬁcally for
strawberry greenhouses. (iii) A large-scale system in an actual strawberry greenhouse environment is
developed in Greece, incorporating the proposed reference architecture [15].
Edge computing is proposed for addressing the issues by taking advantage of computing resources in
the edge of the network. The issues such as an edge mobile device make it easier to achieve low end-to-end
latency, high bandwidth, and low jitter to services located on the edge network. An edge can enforce the
privacy policies of its owner prior to the release of the data to the cloud through edge analytics. If a cloud
service becomes unavailable due to network failure, cloud failure, or a denial-of-service attack, a fallback
service on a nearby edge can temporarily mask the failure. Cloud services, partial analysis, and control
functions are extended to the edge nodes from the cloud data center. Edge nodes facilitate the timely
monitoring of sensors in smart farming by the reduced latency and enhanced data transmission. Due to
these factors, edge computing is applied through farming [16,17]. A three-tier open-source software plat-
form we proposed by authors, and the platform enhanced the precision agriculture by introducing edge
computing and fog computing. An network functions virtualization (NFV)-based approach is deployed for
performing the local operational decisions at the edge level for mitigating the inﬂuence of network failures
while using cloud data centers [18]. For control processing in smart farming, a platform enabling cost-
eﬀective sensor/actuator network based on IoT, utilizes edge computing [19,20].
The authors in ref. [21] predicted the soil moisture using a mathematical model that measures the
values given by a sensor matrix on the ground. Due to the huge interval in measurements (10 minutes), the
model presented estimated error by more than 10%. This methodology has incorporated the online
approach by making the sensors to send data every minute to edge devices without time-based interruption.
The authors of ref. [22] applied a combinative approach of using ﬁeld sensor network’s data along with
weather forecast station’s data for the management of optimality in water conditions for the enhanced
growth of grapes. The generated data are forwarded to a web server, which displays graphics without
statistical analysis of such data. The analysis must be performed a posteriori by the user.
The watering mechanism for a plant via IoT methodology is devised by the proposed smart irrigation
model without acquiring any pre-processed data. A prototype application is developed, which gets adapted
to the parameters needed in irrigation after a couple of human-made irrigations. With the usage of various
ML algorithms, several tests are devised for manual and automated irrigations for the performance evalua-
tion. After the evaluation using four diﬀerent ML algorithms such as logistic regression (LR), K-nearest
neighbors (KNN), Gaussian naive Bayes (GNB), and gradient boosting regression trees (GBRT), it is found
that GBRT outperforms other algorithms. To analyze the overall performance, a test bed for the sensor edge,
mobile client, and the decision service on the cloud is established. Two diﬀerent indoor species are selected
as test items for the prototype, namely, Peace lily and Sardinia. The outcomes were quite good, and it is
inferred that the prototype has learned the patterns of irrigation and making decisions automatically with a
high rate of accuracy [23].
IoT-enabled edge computing model for smart irrigation system

635
The authors from ref. [24] adopted the deep learning methodology for detecting the type and the
category of the plant using an automated plant irrigation system. The water necessity of the plant is
determined using the recognition of predeﬁned set of plant images and data set acquired from farm. It
utilizes the database for fetching the irrigation information after the recognition process is completed.
Modeling the training processes are time consuming as voluminous set of images needs to be stored.
The authors in refs [25,26] incorporated ML methods in the irrigation decision support model using a
pre-processed irrigation data set. A model is developed for learning the irrigation needs of any plants
progressively rather than using a readily available dataset. Several ML algorithms are evaluated with their
precision for concluding the irrigation decisions. Manual irrigations are performed two times before making
precise decisions. Due to the dynamicity in model, data processing is done progressively, and it can be
applied to several plants having varying irrigation conditions. There is a need for the learning model that
can be trained by itself using a comparatively lighter learning process using environmental parameters that
do not need larger storage in the system but need higher computation. From the aforementioned survey for
making a precise decision with instant computation locally, edge computing needs to be integrated into the
irrigation system. This article is directed towards presenting a platform that implies IoTs and edge com-
puting in monitoring soil moisture via sensors, data communication between sensors and edge devices, and
an Analytics-as-a-Service cloud. It analyzes the collected data in the form of a density map of soil moisture
for denoting the areas in need of greater or lesser frequency of irrigation. Here, density map does not refer to
the geographical point data by satellite mapping, and it actually denotes the point of dry area and watery
area through soil moisture detection point. This point is averaged among areas of irrigation to be done and
the irrigation process is controlled with prediction of rainfall using the proposed system.
3 The proposed system
The proposed learning model for irrigation is implemented in a prototype IoT system that has four compo-
nents: (i) Edge node layer – This layer consists of sensors, actuator, and two microcontrollers. In this layer,
edge node acquires the sensor data from the surroundings and controls the actuator for actuating water
pumps to start irrigation. (ii) Edge server layer – This layer consists of Raspberry Pi that act as edge server
and capable of multitask processing. Here, edge server controls the edge nodes for sending signal and
receiving data at regular interval of time. It is also connected to the cloud server for receiving developed and
trained machine learning model to be deployed and make irrigation decision for controlling edge nodes.
(iii) Edge service layer – This layer is deployed in the edge server and it is responsible for controlling the
whole system through a developed web dashboard. The dashboard has live feed data, control of edge
nodes, and cloud services access. This service layer also has the control access of the proposed machine
learning model. (iv) Cloud server layer – This layer composed of cloud services and cloud storage where its
role is to train the machine learning model and store the data in database. It sends the trained proposed
model to the edge server for decision-making regarding irrigation scheduling. The comprehensive inter-
connections in the system are shown in Figure 2. The proposed IoT-based smart irrigation system includes
ﬁve major components: ﬁeld deployed module, Web-based interface, Web API weather input, soil moisture
prediction mechanism, and edge communication model.
3.1 Field deployed module
In the ﬁeld requirements, a wireless sensor network of the sensor nodes needs to be deployed as shown in
Figure 3. Here, ﬁeld data collection device accommodates four diﬀerent sensors: Capacitive Soil Moisture
Sensor V2.0, DS18B20 Water Proof Temperature Sensor Probe for soil temperature, ultraviolet (UV) Light
Radiation, DHT11 – Temperature and Humidity Sensor Module, and GYML8511 Analog Output Ultra-Violet
636

S. Premkumar and AN. Sigappi
Light Sensor Module. An Arduino Mega connected to Raspberry Pi 4 Model-B read, the output of these
sensors where the program is developed in Python for the Pi model to fetch the hourly data from sensors
and store the data in MongoDB [27] database. It is then synchronized with the server database using the
developed web service. A Wi-Fi-enabled Arduino controls the water pump connected to a relay switch.
Figure 2: Components of the proposed system.
Figure 3: Real-time prototype of the proposed edge model.
IoT-enabled edge computing model for smart irrigation system

637
For the real time monitoring, a trigger is made for controlling the web service from the responsive web-
based interface. The irrigation decisions are checked periodically by the proposed model performed in the
server. The water pump is actuated, and irrigation process is started only if the server makes any irrigation
decision. A wireless sensor network (WSN) [28] scenario with ZigBee [29] technology can be implemented
for a large farming area in which several sensor nodes can be aﬃxed in the speciﬁed area and every sensor
node possesses sensors similar to a standalone device. Then, the Arduino Mega reads the sensor output
connected to ZigBee for transferring data to Gateway Node for aggregating the received data and storing it
in MongoDB locally and also for transferring the data via web service to the edge server.
3.2 Web-based interface
The proposed framework consists of a web-based application to allow farmers visualize the growing data
and interacting with the garden in real time. In addition, users can also be able to examine and analyze the
historical growing data, if needed, through functionalities such as irrigation control, motor control predic-
tion model deployment, and manual data entry implemented in this web application. Here, Node.js was
chosen for developing the web application [30,31], while MongoDB [27] was utilized as the database system.
Data stored in the database, which is deployed in the cloud, will be used for further data analysis in the
future. The web application’s functions are designed following a software design pattern called model-
view-controller (MVC) as shown in Figure 4. In the frontend, ChartJS is used to represent data through
dynamic charts. The web application is also used as an interface to manage all the physical devices/
actuators in the garden. To deploy the web-server to the cloud, a cloud platform as a service (PaaS), namely,
Heroku, had been utilized. Heroku is a cloud platform that provides platform as a service (PaaS), facilitates
the creation of applications and deploying these online rapidly [32,33]. It also enhances scalability and
functionality by integrating several add-on services. The ﬁeld data are sent to the server by Raspberry Pi
using this web service. This web service manages the network outage/ﬂuctuation during data synchroniza-
tion from the ﬁeld device to the server by taking the help of ﬂag settings at the database level. The interface
facilitates the scheduling of irrigation along with visualizing real time sensors and predicted soil moisture
for upcoming days and precipitation information. By using the denoted threshold value of soil moisture
suggested by agronomists, the irrigation can be scheduled by the user. The system maintains the threshold
value depending on the predicted pattern of soil moisture and precipitation information. The process of
irrigation is initiated automatically and stopped after the speciﬁed threshold value generated from the
proposed algorithm of soil moisture when it is reached.
Figure 4: Web interface for the irrigation system.
638

S. Premkumar and AN. Sigappi
3.3 Web API weather input
The weather prediction data are collected by a web service developed in Python. The forecast data such as
humidity, temperature, ultra violet index, precipitation, and cloudiness of web forecasting portals like
Open Weather API are aggregated by the developed web service [34]. These portals provide the forecasted
information in HTML, XML, or JSON format. The predicted data with JSON format are read by the developed
web and stored in database at the edge server, which is concerned in the prediction algorithm. Also, these
data are utilized as testing dataset in the ML model for predicting the soil moisture.
3.4 Soil moisture prediction mechanism
An algorithm for predicting the soil moisture based on data derived from ﬁeld sensors and weather fore-
casting using the combination of supervised and unsupervised machine learning techniques has been
developed underpinned by regression algorithms and k-means clustering for estimating the diﬀerence/
change in soil moisture owing to weather conditions. Many regression algorithms are compared against
each other and infusing each of them with k-means to check the preciseness in mean square error (MSE),
R2, accuracy and mean absolute percentage error (MAPE) for prediction of soil moisture of upcoming days
with the help of sensor data and weather forecasting days. The information about soil moisture for the
upcoming days and suggestions for irrigation in accordance with the prescribed levels of soil moisture and
predicted precipitation values, thereby saving energy and water, is presented by the algorithm. The infor-
mation generated from the device and the predicted values from the algorithm soil moisture prediction
hybrid algorithm (SMPHA) are stored in the server.
3.5 Edge communication model
The communication protocols in the proposed framework are ﬂexible and transparent in nature for
accepting both wired and wireless methodologies. For the maximum utilization of potentiality in edge
computing components, the communication among various components in the edge-IoT system requires
intense probing by using the versatility among the devices in network edges. For transferring the data
gathered from pivot sensors, a communication technology such as Zigbee [35] is needed for the irrigation
systems. Therefore, the communication component in the proposed work is classiﬁed into three main areas
as shown in Figure 5. The Message Query Telemetry Transport (MQTT) protocol is used for the
Figure 5: Proposed edge communication model.
IoT-enabled edge computing model for smart irrigation system

639
communication in the proposed system. The analysis in ref. [36] presented seven IoT messaging protocols
(MQTT, CoAP, XMPP, AMQP, DDS, REST-HTTP, and WebSocket) as communication protocols that play a
major role in smart farming. The authors have concluded that MQTT proved to be the most secure protocol
after probing all the protocols with respect to latency, energy and bandwidth requirements, throughput,
reliability, and security. Moreover, MQTT is secure in both end-to-end architecture and gateway server
architecture. In an MQTT setup, a MQTT server termed as MQTT broker executes on the IoT solution [37].
Under a common identiﬁer, a “publisher” and a “subscriber” link among themselves to this broker. In the
IoT solution, publishers and subscribers are the IoT devices and IoT hubs or control devices, respectively.
When the publishers have new data for recording, the data are published to the broker. The broker then
ﬂags that it has new publisher data, and the corresponding data are read by the subscriber. Then, the
subscriber analyzes the data and reacts accordingly.
The ﬁrst level accomplishes with connecting the end users to system with the help of mobile or web-
based applications through the Internet. The next level (cloud computing server) deals with the connection
of web server and MQTT broker for directing the user requests and other components at the edge landscape
or from the farms to the right cloud-based services like displaying the real time status of the farm for the
users, triggering a new deployment of the updated ML model to the corresponding edge node. The third
level (farming area) is directed toward the deployment of sensors and IoT devices (actuators) for commu-
nicating with other components in the entire system.
4 Deployment of soil moisture prediction hybrid algorithm
The watering mechanism of the plant has diﬀerent approaches in the proposed model. Primarily, the system
is trained with manual irrigations datasets during the process of learning with respect to suggestions
deﬁned by agronomists. The model is trained to learn the needs of irrigation in the ﬁrst level of deployment
in cloud without the inclusion of pre-processed data. After acquiring the required data and training, the
proposed system is initiated to grasp the plant’s watering needs by undergoing plenty of manual irrigations.
Thereafter, manual irrigation is not required and the system makes automated decisions in watering using
the gathered data and the application of ML methods. The proposed model then decides the irrigation
strategies automatically using ML methods without the need including collected datasets in the automatic
irrigation process. The proposed model can be improved through the learning process when the number of
precise irrigation inputs is provided to the model at each stage of training.
The decision-making procedure is developed with two modules for irrigation strategies according to the
soil moisture prediction for upcoming days. The ﬁrst module deals with training the model in cloud with
manual irrigation datasets through steps such as data collection, data preprocessing, training, and model
development. The system acquires values of air temperature (TH), soil temperature (SMT), soil moisture
(SM), humidity (HU), and ultraviolet rays (UV) periodically from the physical environment in the data
collection stage, which is essentially required for arriving at the watering decisions. Also, the time of
performing the manual irrigation is recorded in the database. These data are timestamped and stored in
as datasets to aid in making decisions for knowing the time of irrigation. In the next step of pre-processing,
inconsistencies are eliminated and outliers caused by sensor errors are detected from the irrigation dataset,
thereby helping in the removal of broken data. The training stage involves the application of supervised
machine learning (ML) algorithms. Here the regression algorithms such as support vector regression (SVR),
multiple linear regression (MLR), lasso regression (LR), decision tree regressor (DTR), random forest
regressor (RF), and XG-boost regressor (XB) techniques are used for the deployment. The regression algo-
rithms are trained using the collected datasets. Finally, through training, regression models are created,
namely, SVR model, MLR model, LR model, DTR model, RF model, and XB model that are been combined
with the second module for decision-making.
The second module caters to the prediction of irrigation for upcoming days by infusing the weather data
as an input to the regression trained models. The live datasets from the weather API for future prediction of
640

S. Premkumar and AN. Sigappi
soil moisture variable are used. The dependent variables from weather forecast data like temperature (TH),
humidity (HU), ultraviolet (UV), and precipitation (PC) are tested in the aforementioned model for soil
moisture prediction. Then, the regression trained model is evaluated and deployed using the weather
testing data for the prediction of soil moisture in accordance with the precipitation. After the prediction
of data for the upcoming days, these developed regression models are combined with unsupervised ML
algorithm named k-means clustering for estimating the changes incurred in soil moisture prediction due to
the impact of weather conditions. Further, each regression models with k-means algorithm are evaluated
for performances in terms of irrigation decision-making process as shown in Table 1. The combined algo-
rithms are estimated through MAPE, MSE, R2, execution speed, power consumption, and accuracy. The
estimation and computation of these parameters are detailed by the authors in ref. [38].
XGBoost + k-means (XB+k-means) approach provides more accuracy with less MSE comparatively and
also the R2 with 98% in soil moisture prediction using combined approach is given in Table 1. It is evident
that the proposed combination performs better when compared to other regression + k-means-based
approaches. XB + k-means-based hybrid machine learning algorithm is applied in irrigation planning
module on account of aforementioned performance metrices of ML. Although it performs moderately in
terms of execution time and power usage, it is selected for the deployment in edge computing as it has
better performed in terms of accuracy, R2, MSE, and MAPE metrices. It is observed that the prediction of soil
moisture for the upcoming days from the proposed algorithm (XB+k-means) is nearer to the actual value as
shown in Table 2, and hence, XB+k-means is selected for the implementation of SMPHA in edge-based
irrigation scheduling.
4.1 Hardware setup
IoT system is crucial to handle, collect, and transfer the data to the computing nodes at the edge or in the
cloud. These devices are connected to the edge nodes through wireless communication protocols like
ZigBee. It is used in reducing the latency and loss of data. An Arduino micro-control unit controls the
combined IoT sensors and actuators at the same part of a ﬁeld into a cluster, each connected to a Raspberry
Table 2: Comparison of predicted SM value with actual SM value
Date
Average SM value
from sensor
Average predicted SM
value (XB+k-means)
28-09-2021
35.23
34.04
29-09-2021
36.41
37.20
30-09-2021
31.57
30.46
01-10-2021
34.66
33.15
02-10-2021
36.73
37.12
03-10-2021
32.88
33.01
Table 1: Comparison of performance metrices obtained from various ML algorithms
Algorithms used
Accuracy
R2
MSE
MAPE (%)
Execution time
Power (J)
SVR + k-means
0.96
0.96
0.25
1.98
0.06078
1164.85
MLR + k-means
0.94
0.88
0.31
2.15
0.02075
429.30
LR + k-means
0.95
0.94
0.32
2.23
0.02482
351.35
DTR + k-means
0.93
0.95
0.29
1.62
0.15687
914.70
RF + k-means
0.95
0.91
0.27
1.57
0.16745
1475.13
XB + k-means
0.97
0.98
0.20
1.08
0.03547
537.87
IoT-enabled edge computing model for smart irrigation system

641
Pi that acts as an edge node in processing the gathered data and controlling the actuators. For example,
Figure 2 shows an edge architecture with a Raspberry Pi connected to two components: Arduino Uno and
Arduino Mega units via ZigBee connection. The ﬁrst Arduino Mega node is responsible for collecting data
from sensors and the second one is for controlling the actuators in the ﬁeld. Depending on the sensor type
with collecting Arduino unit, the sensors are connected via analog or digital PWM pins while controlling
Arduino uno joins with actuators in the ﬁeld and controls (turn on/oﬀ) them in accordance with upper
layers (from the edge web server). The trained (cloud) and deployed ML model in edge nodes provides the
necessary instructions to the edge nodes.
4.2 Web layer setup
The deployment of web server assists the user in planning and managing the irrigation system. It visualizes
the crucial information of factors like temperature of air and soil, UV, humidity, and soil moisture in live
irrigation with real time updates in the form of various charts. In accordance with the selected ﬁeld, the web
application redirects the user to the ﬁeld’s dashboard as shown in Figure 4. The dashboard consists of ﬁeld
parameters as well as control signals for activating all the physical devices/actuators at the garden layer.
These signals are denoted as switch buttons, and each switch controls (turn on/oﬀ) a particular kind of
actuator (for instance, water pump to start and stop the irrigation). The user interface facilitates remote
controlling of the ﬁeld by just clicking on the buttons as shown in Figure 4.
4.3 Edge layer setup
The edge node acts as a computing center where incoming data are analyzed and fed as the input vector to
the ML model for processing and to return the control signals for activating or deactivating the actuators
placed at the farm. Edge node processes the physical data (real time) at every end device such as the
collected and processed data via the Raspberry Pi nodes presented in the proposed scheme. The prediction
model is designed using TensorFlow API and trained, tested on Google Colab in this work. Amazon Web
Service (AWS) oﬀers a library named Boto3 having many APIs to upload and download objects. After the
development of model, it is transferred to Amazon S3, a service provided by AWS. The edge node utilizes the
trained model from S3 for analyzing the sensed data acquired from garden’s sensors. The decision is
delivered based on real time data analysis at the edge node and transmitted to Arduino nodes in the ﬁelds
landscape immediately for controlling the actuators. In another ﬂow, the data collected from sensors are
ﬁltered so as to keep only the modiﬁed data at the edge node before being sent back for mitigating the
communication cost to the database in the cloud. These data are used in the updation of the ML model to
enhance its eﬃciency.
4.4 Analytics setup
The main goal of this experiment lies in gathering the various physical parameters of a farming land via
sensors and utilizing the fetched data along with weather forecast information for developing an algorithm
using hybrid machine learning approach to infuse higher accuracy in predicting the soil moisture for the
upcoming days. As discussed in Section 4, for the proper planning and provisioning of optimal irrigation,
the algorithm provides a predictable estimate of soil moisture with the assistance of various statistical
measures as shown in Table 1. The measures are adopted for estimating the appropriateness and error rate
of the proposed algorithm. It is inferred from the experiment that, optimal irrigation is feasible using a good
642

S. Premkumar and AN. Sigappi
estimation (close to the actual value) of the soil moisture (Table 2), with the support of ﬁeld data and
forecast information, thereby utilizing the natural rain eﬃciently.
The SMPHA ML model is interdependent on dynamic changes in weather environment where the
models deployed on edge nodes need to change the controls accordingly after model gets trained con-
tinuously. For the process of retraining, the trained model needs to be updated. The parameters such as TM,
HU, ST, UV, SM about grown plants are logged for the training purpose, and these generated datasets are
recorded from the already developed manual mode system [39]. The growth of the Indian Mundu Chilli [40]
is taken for the observation from the ﬁrst stage to the last grown stage for 95 days. While retraining the
model, the training is carried in cloud without causing eﬀect to the functionalities at edge nodes. A signal is
transferred to the corresponding edge server for triggering the task of updating the SMPHA model from the
web server. At that time, the newly trained model is downloaded to replace the existing one at the con-
sidering edge server. From then, the ML model at the edge server is called to be updated with the real-world
knowledge and is ready for its garden controlling tasks (to apply in the next farming season).
4.5 Work ﬂow
The ﬂowchart in Figure 6 depicts the working of the proposed system based on the decision support system
that is beneﬁcial for irrigation needed for the growth of vegetables. The chilli plant is grown in a growbag
attached with sensors and Pi as shown in Figure 3 and monitored for 95 days of data collection. To bring out
optimality in the irrigation system, features relating to climate, soil, crop, and ﬁeld infrastructure are to be
considered. To provide several recommendations in the production of vegetables, decision support systems
(DSSs) are designed, which process voluminous information [39]. This proposed work is the extension of
soil moisture diﬀerences (SMD) model [41] developed for soil moisture prediction. The threshold values of
soil moisture are used in the SMD model where the system schedules the irrigation date based on the
predicted soil moisture and weather forecast (precipitation) information automatically using SVR+ k-means
modeling. Therefore, in the extension of the aforementioned work, further more number of sensors are used
to log soil moisture value, which is averaged in the proposed model. This model is developed in two
divisions of ﬂowchart as shown in Figure 7, where both are interconnected. It is observed that the prediction
of XB + k-mean approach provides better results as presented in Table 2.
The ﬁrst phase of the ﬂowchart describes the hybrid algorithm for the soil moisture prediction (SMPHA)
using the combination of XB + k-means algorithm. During the data collection step, the sensor data for the
parameters, namely, TM, HU, ST, UV, and SM, are collected. During preprocessing, null values and outliers
are removed and the preprocessed data are used to train the XG-Boost model. The developed model is then
trained with variables of live weather features (TM, HU, UV, PC) obtained from Weather API for the
prediction of SM data. These data are given as input to k-means clustering algorithm to predict the soil
moisture, which is deﬁned as SMPHA value to be infused in the next phase of the ﬂowchart. The second
phase of the ﬂowchart deﬁnes the automatic irrigation planning setup. The setup starts obtaining the soil
moisture maximum (SMMax) and soil moisture minimum (SMMin) values in the dashboard for setting the
maximum and minimum level of soil moisture. Then, the current soil moisture (CuSM) is sensed and
compared against the threshold SMMin. If the resulting value is less than SMMin, the process proceeds
with SMPHA. On the contrary, it stops the irrigation process by sending 0 to the relay. In SMPHA, the
nearest precipitation date is selected and it is assigned to the predicted soil moisture (PSM). The SMMax is
decided by ﬁnding the minimum of (PSM + SMMin, SMMax), and the predicted SMMax is further checked
against CuSM with a condition if SMMax is greater the CuSM then it sends 1 to the relay as a signal to start
irrigation. If the condition fails, then it sends 0 to stop irrigation. The process of automatic irrigation ends
by forecasting the irrigation schedule in accordance with the live weather parameters.
IoT-enabled edge computing model for smart irrigation system

643
5 Experimental setup and evaluation
The test bed is developed and deployed, and the data are collected for the analysis in irrigation manage-
ment. Here, Heroku cloud platform is used to deploy the cloud web server. The same cloud is also installed
at a local edge that is at two Raspberry Pi units equipped with Wi-Fi 802.11n connections to denote the edge
nodes. JMeter application is used to get sequential accesses to the web page from various users for eval-
uating the network parameters. The speciﬁcation of these servers is given in Tables 3 and 4.
We evaluated the performance of the proposed IoT-based smart farm on two diﬀerent platforms,
namely, in the cloud and on the local computer to show the feasibility and the beneﬁt of the edge com-
puting scheme. Further many parameters are considered for evaluation and discussed in the next section to
show that edge deployment is better than cloud.
Figure 6: Flow chart of the proposed edge model.
644

S. Premkumar and AN. Sigappi
5.1 Evaluation
A hybrid machine learning methodology is used in evaluating the ﬁrst stage of the proposed model. The
predicted value of the soil moisture is better in terms of their accuracy and error rate. From the comparison
of the other ML algorithms as shown in Table 2, XB + k-means performs better and taken further to be
deployed in edge and cloud to check its eﬃciency with each other. Therefore, for analyzing the eﬃciency of
the edge server in accordance with the proposed hybrid algorithm SMPHA is evaluated in terms of the time
taken to train the ML model in edge and cloud. In this experiment Raspberry Pi is used to train the SMPHA
model with 196,400 rows, that is, input data sample size and takes around 1,710,000 ms (approximately
28.5 min). The same model when it is trained in Google Colab cloud environment, it takes 204,000 ms
(approximately 3.4 min) as depicted in Table 5. The main purpose is to run the trained model on edge not to
train the model at edge. So due to the lack of computing capability at the edge, it takes more time to train
the model, but it can be ignored as it does not aﬀect the purpose of the proposed model. Here, edge is
introduced to obtain the task of computing from the cloud (i.e., oﬄoading the task) by making the system
more edge-oriented deployment. It can be accomplished rapidly as it requires only 14 s to download a
trained SMPHA model from the cloud to the edge node with a size of 3,101 kb as given in Table 5. The time to
Figure 7: Average response time with 10 test scenarios.
Table 3: Conﬁguration of raspberry Pi
CPU
Broadcom BCM2711, Quad core Cortex-A72 (ARM v8) 64-bit SoC @ 1.5 GHz
RAM
8 GB LPDDR4-3200 SDRAM
Network
2.4 GHz and 5.0 GHz IEEE 802.11ac wireless, Bluetooth 5.0, BLE, Gigabit Ethernet
Pinboard
8 GB LPDDR4-3200 SDRAM
Operating system, language
Raspbian , Python 3
Table 4: Conﬁguration of Heroku cloud
Country
United states
Service
Amazon web service S3
Processor
2.4 GHz Intel Xeon E5-2676 v3 Processor
CPU Power
8 GB
Virtual CPUs
3–5
IoT-enabled edge computing model for smart irrigation system

645
download varies according to the size of the trained model. So, from this process it can be inferred that
downloading the trained model saves time when compared to training the model at the edge. Through this
in real time, deployment of the trained SMPHA model in edge is better compared to deployment in cloud
services. Furthermore, network parameters like latency, throughput, bandwidth, and response time are
adopted to measure the performance improvements in edge computing.
The performance metrices taken into account are latency, bandwidth, and response time [42]. The
latency of an application is the product of two factors: computing latency and transmission latency. The
time spent on data processing and transmission between end devices to cloud servers is termed as com-
puting latency and transmission latency, respectively. The computational capacity of the system decides
the computing latency as the network servers possess a considerable amount of capacity to make the data
processing faster, whereas the sensors come with limited computing capacity. The latency in transmission
is increased by the end devices and cloud servers. Bandwidth: As large number of sensors are deployed in
IoT, data generated would be huge that consumes an intense range of bandwidth and leads to several
problems such as delay in transmission and loss of packets. It becomes unacceptable for the data to be
transferred directly to cloud servers without applying compression. Therefore, data preprocessing and
aggregation are needed for IoT gateways before redirecting them to remote cloud servers. Then, the issue
to be confronted is to control the traﬃc ﬂow by migrating data processing and aggregation tasks optimally
to decrease the bandwidth needs of the end users while maintaining the data quality. Response time: The
total response time is calculated by adding up transmission and processing time. The local deployment of
the proposed model for controlling IoT-based irrigation are deployed on two modes: (i) Cloud mode: The
developed SMPHA model is implemented in the cloud communicating with IoT sensors nodes directly to
manage the irrigation process. The data are stored and processed at the cloud server itself where it uses
Heroku platform. (ii) Edge mode – Raspberry Pi is deployed as an edge server that involves in processing of
the SMPHA model controlling the IoT sensor nodes. Here, the data are stored and processed locally within
the edge servers. This SMPHA model from both the edge and cloud does the job of controlling the actuators
to initiate and quit the working of water ﬂow motors. Through this deployment in both the environments,
performance of edge server and cloud server can be checked in terms of latency, throughput, bandwidth,
and response time is shown in aforementioned graphs in Figures 6, 8, and 9. This performance metrices is
not feasible to calculate while deploying in real time, so the aforementioned scenarios of two modes are
virtually created by generating many request and response threads between the servers. This sampling,
load test, and distributed testing are conducted through JMeter application [43] and also veriﬁed with
Wireshark [44] in cloud servers. The test scenario is created here by data of sending and receiving sampling
data between cloud to IoT sensors and between Edge to IoT sensors. The sampling data considered in this
work refer to the approximate number of requests generated by Arduino to cloud and Arduino to Raspberry
Pi that are calculated in real time. The test scenario is divided into 10 days of sampling data collected for
each day. The evaluation results are depicted for latency and response times in 10 days perspective. In
latency parameter, edge service has decreased by an average of 77.85% time compared to the with cloud. In
the same manner, the response time of edge service is also decreased by 74.09% time compared to cloud
service. In throughput calculation, sampling data are calculated for an hourly basis for the 10 hours data in
a day. From the hourly comparisons of throughput value, edge outperforms with 67.17% high Mbps usage.
Through this analysis as shown in Table 6, it is evident that the proposed edge computing methodology
deployed in Raspberry Pi or in local computers outperforms the cloud-oriented approach.
Table 5: Comparison of model training time
Edge
Cloud
Model training time
28.4 min
3.4 min
Downloading time
Not applicable
14 s
646

S. Premkumar and AN. Sigappi
Finally, to illustrate the eﬃciency of resource management in edge computing, CPU and memory
utilization are considered for the analysis as both factors rely on the service execution model and the
computational needs of the services being ﬁred from oﬀ-loaders. Figure 10 depicts the utilization of CPU
and RAM on the Raspberry Pi acting as an edge node in two cases: with and without the deployment of
SMPHA model on it. As shown in Figure 10, the SMPHA model aﬀects the CPU of the Raspberry Pi node
signiﬁcantly as it consumed around 41.2% of the CPU compared to only 3.5% when it does not host the
Figure 8: Average latency with 10 test scenarios.
Figure 9: Average throughput value with 10 h test scenarios.
Table 6: Performance metrices for cloud and edge services
Performance metrices
Cloud service
Edge service
Throughput (Mbps)
0.04944
0.08265
Latency (ms)
1415.8
313.6
Response time (ms)
1519.6
393.8
Bandwidth (bps)
86
1,365
IoT-enabled edge computing model for smart irrigation system

647
SMPHA model. However, the memory (RAM) utilization in both the cases (with and without deployment of
an SMPHA model) is nearly the same which is around 31%. Comparatively RAM utilization does not have
much diﬀerence in with and without SMPHA. It is worthwhile to note that, the CPU utilization is still much
lower than the 50% of total CPU capacity in Raspberry Pi. Therefore, it becomes feasible for adopting edge
server implementation in the proposed irrigation system.
6 Conclusion
This article proposed a novel approach to edge-based irrigation system to facilitate decision-making on
watering the plants on scheduled time. The proposed approach applying IoT with an edge computing
framework enables the farming system to adapt to the changes in environmental conditions automatically
and eﬃciently. The process of automatic irrigation regulates irrigation according to the live weather para-
meters for forecasting the irrigation process. Soil moisture prediction was performed using major regression
algorithms that are again combined with k-means clustering for estimating the changes incurred in soil
moisture prediction. These techniques were compared through metrics such as MAPE, MSE, speed, and
power consumption from which XB + k-means was found to perform better. The XB + k-means algorithm
was further used for the implementation of decision mechanism on the developed edge computing model.
The proposed edge model saves the data communication cost and reduces the response time of IoT services.
It can be deployed on existing devices on the network edges serving as edge nodes, thereby reducing the
overall implementation cost of a large-scale IoT system. The edge-based approach was found to perform
better than the cloud-based approach in terms of response time, latency, throughput, and bandwidth
usage. Finally, the edge model was analyzed through CPU and memory usage while running with and
without the algorithm. In both cases, the memory utilization is almost lower to total available resource of
the edge device. From this, edge device can allocate its remaining resource for other computing services,
which increases the eﬃciency of edge computing device. The number of end edge nodes can be increased
according to the ﬁeld area and then to check the potency of the system.
Conﬂict of interest: The authors declare no conﬂict of interest.
Data availability statement: All data that support the ﬁndings of this study are included within the article.
Figure 10: CPU and memory utilization with and without SMPHA.
648

S. Premkumar and AN. Sigappi
References
[1]
India: Issues and Priorities for Agriculture, The World Bank, May 17, 2012. https://www.worldbank.org/en/news/feature/
2012/05/17/india-agriculture-issues-priorities.
[2]
India at a glance in Agriculture, FAO in India. https://www.fao.org/india/fao-in-india/india-at-a-glance/en/.
[3]
Cavicchioli R, Ripple WJ, Timmis KN, Azam F, Bakken LR, Baylis M, et al. Scientists’ warning to humanity: Microorganisms
and climate change. Nature Rev Microbiol. 2019;17(9):569–86. doi: 10.1038/s41579-019-0222-5.
[4]
Huong NTL, Bo YS, Fahad S. Economic impact of climate change on agriculture using Ricardian approach: A case of
Northwest Vietnam. J Saudi Society Agricult Sci. 2019;18(4):449–457. doi: 10.1016/j.jssas.2018.02.006.
[5]
Fagodiya RK, Pathak H, Bhatia A, Jain N, Kumar A, Malyan SK. Global warming impacts of nitrogen use in agriculture: An
assessment for India since 1960. Carbon Management. 2020;11(3):291–301. doi: 10.1080/17583004.2020.1752061.
[6]
Sarkar S, Chatterjee S, Misra S. Assessment of the suitability of fog computing in the context of internet of things. IEEE
Trans Cloud Comput. 2018;6(1):46–59. doi: 10.1109/TCC.2015.2485206.
[7]
Porter JR, Xie L, Challinor AJ, Cochrane K, Howden SM, Iqbal MM, et al. Food security and food production systems. In: Field
CB, Barros VR, Dokken DJ, Mach KJ, Mastrandrea MD, Bilir TE, et al., editors. Climate Change 2014: Impacts, Adaptation,
and Vulnerability. Part A: Global and Sectoral Aspects. Contribution of Working Group II to the Fifth Assessment Report of
the Intergovernmental Panel on Climate Change Cambridge, United Kingdom: Cambridge University Press and New York,
NY, USA; 2014. p. 485–533.
[8]
Lal R. Adaptation and mitigation of climate change by improving agriculture in India. In: S. SherazMahdi (Ed.), Climate
Change and Agriculture in India: Impact and Adaptation. Cham: Springer International Publishing; 2019. p. 217–27.
[9]
Saravanan K, Julie G, Robinson H. (Eds.), Handbook of research on implementation and deployment of IoT projects in
smart cities. Hershey: IGI global, 2019.
[10] Baylis A. Advances in precision farming technologies for crop protection. Outlooks Pest Manag. 2017;28(4):158–61.
[11]
Mulla D, Khosla R. Historical evolution and recent advances in precision farming. Soil-Speciﬁc Farming Precision
Agriculture. Boca Raton: CRC Press; 2015.
[12] Dutta L, and Basu TK. Extraction and optimization of leaves images of mango tree and classiﬁcation using ANN. IJRAET
2013;1(3):46–51.
[13] Kawai T, Mineno H. Evaluation environment using edge computing for artiﬁcial intelligence-based irrigation system. 2020
16th International Conference on Mobility, Sensing and Networking (MSN). Tokyo, Japan: IEEE; 2020. p. 214–9.
[14] Munir MS, Bajwa IS, Ashraf A, Anwar W, Rashid R. Intelligent and smart irrigation system using edge computing and IoT.
Complexity. 2021;2021:1–16.
[15] Angelopoulos CM, Filios G, Nikoletseas S, Raptis TP. Keeping data at the edge of smart irrigation networks: A case study in
strawberry greenhouses. Comput Netw. 2020;167:107039.
[16] Satyanarayanan M. The emergence of edge computing. Computer. 2017;50(1):30–9.
[17] Shi W, Dustdar S. The promise of edge computing. Computer. 2016;49(5):78–81.
[18] Ramirez Izolan PL, Diniz Rossi F, Hohemberger R, Konzen MP, da Cunha Rodrigues G, Saquette LR, et al. Low-cost fog
computing platform for soil moisture management. In: 2020 International Conference on Information Networking (ICOIN).
Barcelona, Spain: IEEE; 2020. p. 499–504.
[19] Ferrandez-Pastor F, Garcia-Chamizo, J, Nieto-Hidalgo, M, Mora-Pascual, J, Mora-Martínez, J. Developing ubiquitous sensor
network platform using internet of things: application in precision agriculture. Sensors. 2016;16(7):1141.
[20] Xu X, Liu X, Xu Z, Dai F, Zhang X, Qi L. Trust-oriented IoT service placement for smart cities in edge computing. IEEE Internet
Things J. 2020;7(5):4084–91.
[21] Wu X, Liu M. In-situ soil moisture sensing: Measurement scheduling and estimation using compressive sensing. In: 2012
ACM/IEEE 11th International Conference on Information Processing in Sensor Networks (IPSN). Beijing, China: IEEE; 2012.
p. 1–11.
[22] Kameoka T, Nishioka K, Motonaga Y, Kimura Y, Hashimoto A, Watanabe N. Smart sensing in a Vineyard for advanced
viticultural management. In: Proceedings of the 2014 International Workshop on Web Intelligence and Smart Sensing.
Saint Etienne France; 2014. p. 1–4.
[23] Cagri Serdaroglu K, Onel C, Baydere S. IoT-based smart plant irrigation system with enhanced learning. In: 2020 IEEE
Computing, Communications and IoT Applications (ComComAp.) Beijing, China: IEEE; 2020. p. 1–6.
[24] Kwok J, Sun Y. A smart IoT-based irrigation system with automated plant recognition using deep learning. In: Proceedings
of the 10th International Conference on Computer Modeling and Simulation - ICCMS2018. Sydney, Australia: ACM Press;
2018. p. 87–91.
[25] Goldstein A, Fink L, Meitin A, Bohadana S, Lutenberg O, Ravid G. Applying machine learning on sensor data for irrigation
recommendations: Revealing the agronomist’s tacit knowledge. Precision Agricult. 2018;19(3):421–44.
[26] Vij A, Vijendra S, Jain A, Bajaj S, Bassi A, Sharma A. IoT and machine learning approaches for automation of farm irrigation
system. Proc Comput Sci. 2020;167:1250–7.
[27] Krishnan H, Scholar R. MongoDB – a comparison with NoSQL databases. Int J Scientiﬁc Eng Res. 2016;7(5):1035–7.
IoT-enabled edge computing model for smart irrigation system

649
[28] Ojha T, Misra S, Raghuwanshi NS. Wireless sensor networks for agriculture: The state-of-the-art in practice and future
challenges. Comput Electr Agricult. 2015;118:66–84.
[29] Gutierrez J, Villa-Medina JF, Nieto-Garibay A, Porta-Gandara MA. Automated irrigation system using a wireless sensor
network and GPRS module. IEEE Trans Instrument Measurement. 2014;63(1):166–76.
[30] Chanthakit S, Keeratiwintakorn P, Rattanapoka C. An IoT system design with real time stream processing and data ﬂow
integration. In: 2019 Research, Invention, and Innovation Congress (RI2C.) Bangkok, Thailand: IEEE; 2019. p. 1–5.
[31] Lv H, Wang S. Design and application of IoT microservices based on Seneca. USA: DEStech Transactions on Computer
Science and Engineering, (icte.). 2016.
[32] Lee B-H, Dewi EK, Wajdi MF. Data security in cloud computing using AES under HEROKU cloud. In: 2018 27th Wireless and
Optical Communication Conference (WOCC). Hualien: IEEE; 2018. p. 1–5.
[33] Lopez Pena MA, Munoz Fernandez I. SAT-IoT: An architectural model for a high-performance fog/edge/cloud IoT platform.
In: 2019 IEEE 5th world forum on internet of things (WF-IoT.) Limerick, Ireland: IEEE; 2019. p. 633–8.
[34] Weather API. Retrieved from https://openweathermap.org/api.
[35] Drew Gislason. Zigbee wireless networking, 1st ed. Newnes, London: Elsevier Publisher; 2008.
[36] Tanabe K, Tanabe Y, Hagiya M. Model-based testing for MQTT applications. In: Virvou M, Nakagawa H, Jain LC. (Eds.),
Knowledge-Based Software Engineering: 2020. Cham: Springer International Publishing; 2020. p. 47–59.
[37] Babun L, Denney K, Celik ZB, McDaniel P, Uluagac AS. A survey on IoT platforms: Communication, security, and privacy
perspectives. Comput Netw. 2021;192:108040.
[38] Rastogi K, Lohani D. Edge computing-based internet of things framework for indoor occupancy estimation. Int J Ambient
Comput Intell. 2020;11(4):16–37.
[39] Premkumar S, Sigappi AN. Functional framework for edge-based agricultural system. In: AI, Edge and IoT-based Smart
Agriculture, 1st ed. USA: Academic Press, Elsevier; 2021. p. 71–100.
[40] Phani Kumar J, Paramaguru P, Arumugam T, Manikanda Boopathi N, Venkatesan K. Genetic divergence among Ramnad
mundu chilli (Capsicum annuum L.) genotypes for yield and quality. Electr J Plant Breeding. 2021;12(1):228–34.
[41] Goap A, Sharma D, Shukla AK, Rama Krishna C. An IoT-based smart irrigation management system using Machine learning
and open source technologies. Comput Electronic Agricult. 2018;155:41–9.
[42] Aslanpour MS, Gill SS, Toosi AN. Performance evaluation metrics for cloud, fog and edge computing: A review, taxonomy,
benchmarks and standards for future research. Internet Things. 2020;12:100273.
[43] Sunardi A, Suharjito MVC architecture: a comparative study between Laravel framework and slim framework in freelancer
project monitoring system web based. Proc Comput Sci. 2019;157:134–41.
[44] Robert Shimonski. The wireshark ﬁeld guide, 1st ed. New York: Syngress Press, Elsevier; 2013.
650

S. Premkumar and AN. Sigappi


</subsection_point_Point 2>

<previous_sections>

A systematic review of automated systems for real-time irrigation management

1. INTRODUCTION
The challenge of feeding a growing population with finite resources is becoming increasingly pressing. By 2050, the world population is expected to reach 9.7 billion, necessitating a 70% increase in food production (Falkenmark and Rockstrom, 2009). Irrigation plays a crucial role in enhancing crop yields and agricultural productivity to meet this growing demand. Studies have shown that irrigation can significantly increase crop water productivity, contributing to increased food production (Ali and Talukder, 2008; Playan and Mateos, 2005). However, water scarcity poses a significant challenge, with many regions facing water deficits and the need for improved water management practices (Falkenmark and Rockstrom, 2009). Optimizing irrigation schedules and doses based on crop requirements and environmental conditions is essential for maximizing yield and quality while minimizing water use (Zhang et al., 2024). The necessity of scalable water-efficient practices for increasing food demand cannot be overstated. Techniques such as regulated deficit irrigation, magnetically treated water, and the use of drought-tolerant crops like sorghum have shown promise in improving water productivity and ensuring food security (Mehmood et al., 2023; Putti et al., 2023; Hadebe et al., 2016). As the global food challenge intensifies, it is imperative to critically evaluate the current state and future potential of irrigation management systems to guide research, innovation, and implementation efforts towards fully autonomous, scalable solutions.

Despite the importance of irrigation in addressing the global food challenge, traditional irrigation management techniques, such as manual scheduling and timer-based systems, have significant limitations. These methods are often labor-intensive, inefficient, and less adaptable to changing conditions (Savin et al., 2023). Manual and timer-based scheduling can lead to high operational costs and inefficient water use (Raghavendra, Han, and Shin, 2023). The reliance on manual intervention and predetermined schedules limits their adaptability to changing environmental conditions, crop water requirements, and soil moisture levels (Kaptein et al., 2019). Sensor-based irrigation systems offer an alternative, enabling real-time adjustments based on soil water status measurements (Kaptein et al., 2019). However, the adoption of these systems in commercial settings has been limited, often requiring extensive input from researchers (Kim et al., 2014; Lea-Cox et al., 2018; Ristvey et al., 2018). The limitations of traditional irrigation management techniques highlight the need for scalable, automated solutions for greater efficiency in irrigation management. Automated systems that collect real-time data, analyze it, and make autonomous irrigation decisions can lead to improved water use efficiency and increased crop productivity (Champness et al., 2023; Wu et al., 2022). To fully understand the potential of automated systems, it is necessary to examine the automation of each part of the irrigation management pipeline and analyze the effectiveness and efficiency of integrated end-to-end solutions.

The emergence of smart irrigation management and IoT marks a significant shift from historical irrigation practices. Modern approaches rely on vast data and analysis algorithms, leveraging technologies such as remote sensing, sensor networks, weather data, and computational algorithms (Atanasov, 2023; Bellvert et al., 2023; Kumar et al., 2023). IoT plays a vital role in collecting vast amounts of data through sensors, data transmission, and tailored networks, enabling real-time monitoring and control of irrigation systems (Liakos, 2023; Zuckerman et al., 2024). These advancements in data collection and analysis have the potential to revolutionize irrigation management, allowing for more precise and efficient water use. However, challenges such as processing diverse data sources, data integration, and lack of integrated data analysis hamper the full benefit of IoT in irrigation management (Dave et al., 2023). The current fragmented approach in smart irrigation, focusing on individual components rather than the entire system, limits the potential for fully autonomous, real-time end-to-end irrigation management (Togneri et al., 2021). To address these challenges and fully realize the potential of smart irrigation management, there is a need for automating and integrating each section of the irrigation management pipeline, from sensor/weather data collection and transmission to processing, analysis, decision-making, and automated action (McKinion and Lemmon, 1985). This integration requires a thorough investigation of the role of interoperability and standardization in enabling seamless communication and compatibility between components within the automated irrigation management pipeline.

Machine learning (ML) plays a significant role in processing vast data, predicting plant stress, modeling climate effects, and optimizing irrigation in smart irrigation management systems. ML algorithms can analyze data collected from sensors and weather stations to determine optimal irrigation schedules (Vianny et al., 2022). However, the potential of ML is often constrained by manual steps, such as data interpretation, decision-making on irrigation timing and volume, and system adjustments. Automating ML integration to allow direct action from insights to irrigation execution, removing bottlenecks and achieving real-time adaptability, is crucial for fully autonomous irrigation management (Barzallo-Bertot et al., 2022). By integrating ML into automated systems, the irrigation management pipeline can become more seamless and efficient, enabling real-time decision-making and action based on data-driven insights. To achieve this level of automation and integration, it is essential to identify gaps and propose solutions for seamless integration across the automated irrigation management system, aiming to achieve fully autonomous, scalable irrigation management.

To achieve seamless integration across the automated irrigation management system, interoperability and standardization are critical. Interoperability allows different system components, such as sensors, actuators, and software, to communicate and exchange data effectively, while standardization ensures that data is represented in a consistent format (Santos et al., 2020). Standardized protocols and data formats are essential for achieving seamless integration and ensuring compatibility between components in real-time irrigation management systems (Robles et al., 2022; Hatzivasilis et al., 2018). Existing and emerging standards, such as OGC SensorThings API and ISO 11783, have applicability to real-time irrigation management systems (Hazra et al., 2021). However, challenges such as data quality, scalability, reliability, and security need to be addressed to fully realize the potential of interoperability and standardization in automated irrigation management systems (Hazra et al., 2021). Addressing these challenges is crucial for enabling the seamless integration of components within the automated irrigation management pipeline, which is essential for achieving fully autonomous, scalable irrigation management. A comprehensive evaluation of the role of interoperability and standardization in enabling the integration of components within the automated irrigation management pipeline is necessary to guide future research and implementation efforts.
The primary objective of this systematic review is to critically evaluate the current state and future potential of real-time, end-to-end automated irrigation management systems that integrate IoT and machine learning technologies for enhancing agricultural water use efficiency and crop productivity.
Specific objectives include:
•	Examining the automation of each part of the irrigation management pipeline and the seamless integration of each section in the context of irrigation scheduling and management.
•	Analyzing the effectiveness and efficiency of integrated end-to-end automated irrigation systems.
•	Investigating the role of interoperability and standardization in enabling the integration of components within the automated irrigation management pipeline.
•	Identifying gaps and proposing solutions for seamless integration across the automated irrigation management system, aiming to achieve fully autonomous, scalable irrigation management.
By addressing these objectives, this systematic review aims to provide a comprehensive and critical evaluation of the current state and future potential of real-time, end-to-end automated irrigation management systems. Its intention is to guide future research, innovation, and implementation efforts to achieve fully autonomous, scalable irrigation management that can contribute to addressing the global food challenge.

2. REVIEW METHODOLOGY
•	Question-driven framework to guide the literature review of real-time, autonomous irrigation management systems
•	Key research questions posed, each with the motivation behind investigating them and a starting hypothesis to evaluate against the examined literature
•	Table presenting the major objectives, specific objectives, questions, motivations, and hypotheses
3. DATA COLLECTION TO CLOUD: AUTOMATION AND REAL-TIME PROCESSING
3.1. Irrigation management data
The success of automated irrigation management systems relies heavily on the collection, transmission, and analysis of various types of data. The most applicable data types for irrigation management include soil moisture, canopy temperature, weather data, and plant physiological parameters (Farooq et al., 2019; Li et al., 2019; Olivier et al., 2021; Evett et al., 2020). These data are typically collected from a range of sources, including in-field sensors, remote sensing platforms, weather stations, and manual measurements (Li et al., 2019; Karimi et al., 2018).
Soil moisture data is arguably the most critical type of data for irrigation management, as it directly reflects the water available to plants and can be used to determine the optimal timing and amount of irrigation (Olivier et al., 2021; Intrigliolo & Castel, 2006). Soil moisture sensors, such as tensiometers, capacitance probes, and time-domain reflectometry (TDR) sensors, can provide real-time measurements of soil water content at various depths (Farooq et al., 2019). These sensors can be deployed in a network configuration to capture spatial variability in soil moisture across a field (Karimi et al., 2018).
Canopy temperature data is another valuable type of data for irrigation management, as it can be used to assess plant water stress and adjust irrigation accordingly (Evett et al., 2020). Infrared thermometers and thermal cameras can be used to measure canopy temperature, which is influenced by factors such as air temperature, humidity, wind speed, and plant water status (Li et al., 2019). When plants experience water stress, they tend to close their stomata to reduce water loss, leading to an increase in canopy temperature (Evett et al., 2020). By monitoring canopy temperature and comparing it to reference values, automated irrigation systems can detect plant water stress and trigger irrigation events to maintain optimal plant health and productivity (Li et al., 2019).
Weather data, including temperature, humidity, precipitation, wind speed, and solar radiation, are essential for predicting crop water requirements and scheduling irrigation events (Akilan & Baalamurugan, 2024). Weather stations equipped with various sensors can provide real-time measurements of these parameters, which can be used as inputs for crop water requirement models, such as the FAO-56 Penman-Monteith equation (Li et al., 2019). These models estimate crop evapotranspiration (ET) based on weather data and crop-specific coefficients, allowing for the calculation of irrigation requirements (Intrigliolo & Castel, 2006). By integrating weather data into automated irrigation systems, irrigation schedules can be dynamically adjusted based on changing environmental conditions, ensuring that crops receive the optimal amount of water at the right time (Akilan & Baalamurugan, 2024).
When collecting and utilizing these data types, several considerations must be taken into account, including the volume, frequency, format, and source of the data (Farooq et al., 2019). The volume of data generated by automated irrigation systems can be substantial, especially when high-resolution sensors are deployed at a large scale (Bastidas Pacheco et al., 2022). This necessitates the use of efficient data storage, processing, and transmission technologies to handle the data load (Farooq et al., 2019). The frequency of data collection is another important consideration, as it directly impacts the temporal resolution of the data and the ability to detect rapid changes in plant water status or environmental conditions (Bastidas Pacheco et al., 2022). Bastidas Pacheco et al. (2022) demonstrated that collecting full pulse resolution data from water meters provides more accurate estimates of event occurrence, timing, and features compared to aggregated temporal resolutions, highlighting the importance of selecting appropriate data collection frequencies to ensure the quality and usefulness of the data for irrigation management.
The format of the data is also crucial, as it determines the compatibility and interoperability of the data with various analysis tools and platforms (Farooq et al., 2019). Standardized data formats, such as JSON, XML, or CSV, can facilitate data exchange and integration between different components of the automated irrigation system (Zhang et al., 2023). The source of the data is another important consideration, as it can impact the reliability, accuracy, and spatial coverage of the data (Farooq et al., 2019). For example, in-field sensors provide highly localized measurements, while remote sensing platforms, such as satellites or drones, can provide data at larger spatial scales (Li et al., 2019). By combining data from multiple sources, automated irrigation systems can achieve a more comprehensive understanding of crop water requirements and optimize irrigation management accordingly (Farooq et al., 2019).
Data quality, accuracy, and reliability are paramount in irrigation management, as they directly impact the effectiveness of decision-making processes and the efficiency of water use (Gupta et al., 2020). Inaccurate or unreliable data can lead to suboptimal irrigation decisions, resulting in crop stress, yield losses, or wasted water resources (Ramli & Jabbar, 2022). Gupta et al. (2020) emphasized the critical importance of data security and privacy in smart farming systems, as the leakage of sensitive agricultural data can cause severe economic losses to farmers and compromise the integrity of the automated irrigation system. The authors also highlighted the need for robust authentication and secure communication protocols to prevent unauthorized access to smart farming systems and protect data in transit (Gupta et al., 2020).
Ramli and Jabbar (2022) addressed the challenges associated with implementing real-time, automated irrigation systems, including data quality, scalability, reliability, and security. They proposed solutions and best practices based on the analysis of case studies and real-world implementations, such as the use of redundant sensors, data validation techniques, and secure communication protocols (Ramli & Jabbar, 2022). The authors also emphasized the importance of regular maintenance and calibration of sensors to ensure the accuracy and reliability of the collected data (Ramli & Jabbar, 2022).
Researchers have investigated the use of data compression, aggregation, and filtering techniques to reduce bandwidth requirements and improve transmission efficiency in automated irrigation systems (Karim et al., 2023; Rady et al., 2020; Cui, 2023). Karim et al. (2023) explored the effectiveness of various data compression techniques, such as lossless and lossy compression algorithms, in reducing the size of data packets transmitted over wireless networks. The authors found that lossless compression techniques, such as Huffman coding and Lempel-Ziv-Welch (LZW), can significantly reduce data size without compromising data quality, while lossy compression techniques, such as JPEG and MP3, can further reduce data size by introducing acceptable levels of distortion (Karim et al., 2023).
Rady et al. (2020) developed a novel data compression algorithm specifically designed for irrigation data, which achieved significant compression ratios without compromising data quality. The authors demonstrated that their algorithm could reduce the amount of data transmitted over wireless networks, thereby improving the efficiency of the irrigation system and reducing costs (Rady et al., 2020). Cui (2023) investigated the use of data aggregation and filtering techniques to reduce the number of transmissions and save bandwidth in automated irrigation systems. The author proposed a data aggregation scheme that combines multiple sensor readings into a single value, such as the average soil moisture over a specified time interval, to reduce the frequency of data transmissions (Cui, 2023). Additionally, the author explored the use of data filtering techniques, such as Kalman filters and particle filters, to remove noise and outliers from sensor data, improving the accuracy and reliability of the transmitted information (Cui, 2023).
Data standardization and harmonization are crucial for facilitating seamless integration and interoperability between the various components of automated irrigation management systems (Zhang et al., 2023; Ermoliev et al., 2022). Zhang et al. (2023) developed a novel cyberinformatics technology called iCrop, which enables the in-season monitoring of crop-specific land cover across the contiguous United States. The authors highlighted the importance of data standardization and harmonization in the context of iCrop, as it allows for the efficient distribution of crop-specific land cover information based on the findable, accessible, interoperable, and reusable (FAIR) data principle (Zhang et al., 2023). By adopting standardized data formats and protocols, such as the Open Geospatial Consortium (OGC) standards, iCrop enables the seamless integration of various data sources and facilitates the interoperability of the system with other agricultural decision support tools (Zhang et al., 2023).
Ermoliev et al. (2022) proposed a linkage methodology for linking distributed sectoral/regional optimization models in a situation where private information is not available or cannot be shared by modeling teams. The authors emphasized the need for data standardization to enable decentralized cross-sectoral coordination and analysis, as it allows for the consistent representation and exchange of data between different models and stakeholders (Ermoliev et al., 2022). By adopting standardized data formats and interfaces, the proposed linkage methodology can facilitate the integration of various optimization models and support the development of comprehensive decision support systems for sustainable resource management (Ermoliev et al., 2022).
Metadata plays a vital role in providing context and enabling better data interpretation and decision-making in automated irrigation management systems (Jahanddideh-Tehrani et al., 2021). Metadata refers to the additional information that describes the characteristics, quality, and context of the primary data, such as the sensor type, calibration parameters, measurement units, and timestamp (Jahanddideh-Tehrani et al., 2021). Jahanddideh-Tehrani et al. (2021) highlighted the importance of metadata in water resources management, as it enables decision-makers to use the data to the best of its capabilities by understanding factors such as when water data was collected and what factors might have contributed to the measurements. The authors emphasized the need for standardized metadata formats and guidelines, such as the Dublin Core Metadata Initiative (DCMI) and the ISO 19115 standard, to ensure the consistency and interoperability of metadata across different water information systems (Jahanddideh-Tehrani et al., 2021).
In the context of automated irrigation management systems, metadata can provide valuable information about the data collection process, sensor performance, and environmental conditions that can aid in data interpretation and decision-making (Cota & Mamede, 2023). For example, metadata about the sensor type and calibration parameters can help assess the accuracy and reliability of the collected data, while metadata about the weather conditions and soil properties can provide context for interpreting the data and adjusting irrigation strategies accordingly (Cota & Mamede, 2023). By incorporating metadata into the data management and analysis pipeline of automated irrigation systems, decision-makers can make more informed and context-aware decisions, leading to improved water use efficiency and crop productivity (Jahanddideh-Tehrani et al., 2021).

3.2. Edge Computing and Fog Computing
Edge computing and fog computing have emerged as transformative technologies in the realm of real-time irrigation management systems, offering significant potential for improving efficiency, scalability, and reliability (Abdel Nasser et al., 2020; Tran et al., 2019). Edge computing refers to the practice of processing data near the edge of the network, close to the source of the data, while fog computing is a decentralized computing infrastructure that extends cloud computing capabilities to the network edge (Hassija et al., 2019). These technologies bring computation and analytics closer to the data source, reducing the need for data to travel to the cloud and enabling faster processing and decision-making (Hassija et al., 2019; Zhang et al., 2020).
The potential of edge computing and fog computing in real-time irrigation management is immense. Abdel Nasser et al. (2020) proposed a two-layer system for water demand prediction using automated meters and machine learning techniques, demonstrating the potential of edge computing in improving the efficiency and scalability of irrigation management. The system collects and aggregates data from distributed smart meters in the first layer, while the second layer uses LSTM neural networks to predict water demand for different regions of households. By leveraging edge computing, the system can achieve high accuracy in predicting water demand, which is essential for efficient irrigation management (Abdel Nasser et al., 2020).
Tran et al. (2019) conducted a comprehensive review of real-time, end-to-end automated irrigation management systems, highlighting the role of fog computing in addressing data transmission challenges and enabling seamless integration across the irrigation management pipeline. The authors emphasize that real-time, end-to-end automated irrigation management systems have the potential to significantly improve water efficiency, crop yields, and reduce labor costs. However, they also identify several challenges that need to be addressed, such as data quality, scalability, reliability, and security, which can be effectively tackled by implementing fog computing architectures (Tran et al., 2019).
Edge computing offers several benefits in real-time irrigation management systems, including reduced latency, real-time decision-making, and reduced reliance on cloud connectivity (Mishra, 2020; Zhang et al., 2020). By processing data closer to the source, edge computing enables faster response times and more efficient data handling (Mishra, 2020). Mishra (2020) highlights that edge computing reduces latency by processing data closer to the source, enabling real-time decision-making and lessening reliance on cloud connectivity by shifting processing to local or edge devices.
Zhang et al. (2020) explore the application of edge computing in agricultural settings, demonstrating its potential to improve the efficiency and accuracy of irrigation systems. The authors discuss how edge computing has prospects in various agricultural applications, such as pest identification, safety traceability of agricultural products, unmanned agricultural machinery, agricultural technology promotion, and intelligent management. They also emphasize that the emergence of edge computing models, such as fog computing, cloudlet, and mobile edge computing, has transformed the management and operation of farms (Zhang et al., 2020).
Fog computing plays a crucial role in distributing processing and storage across the network, enhancing the scalability and reliability of automated irrigation systems (Premkumar & Sigappi, 2022; Singh et al., 2022). Premkumar and Sigappi (2022) evaluate the current state of automated irrigation management systems and propose a hybrid machine learning approach for predicting soil moisture and managing irrigation. Their study emphasizes the potential of fog computing in distributing processing and storage across the network, improving the efficiency and scalability of irrigation systems. The proposed hybrid machine learning approach outperforms other machine learning algorithms in predicting soil moisture, demonstrating the effectiveness of fog computing in enhancing the performance of automated irrigation systems (Premkumar & Sigappi, 2022).
Singh et al. (2022) discuss the role of fog computing in distributing processing and storage across the network, enhancing scalability and reliability in agricultural management systems. The authors argue that by implementing fog computing, these systems can achieve faster data processing and response times, improving overall efficiency and effectiveness. They also highlight that fog computing can address the challenges faced by real-time data transmission in agricultural management systems, such as latency, bandwidth limitations, and data security (Singh et al., 2022).
The integration of edge and fog computing in real-time irrigation management systems is crucial for achieving fully automated, scalable, and reliable solutions. As the demand for autonomous irrigation management grows, these technologies will play a pivotal role in enabling faster decision-making, reduced latency, improved resource utilization, and seamless integration across the irrigation management pipeline (Tran et al., 2019; Zhang et al., 2020). By bringing computation and analytics closer to the data source and distributing processing and storage across the network, edge and fog computing can significantly enhance the efficiency and effectiveness of automated irrigation systems, contributing to the overall goal of addressing the global food challenge through optimized water resource management and increased agricultural productivity (Abdel Nasser et al., 2020; Premkumar & Sigappi, 2022; Singh et al., 2022).

3.3. Automation of Data Collection
The automation of data collection is a critical component in the development of real-time, end-to-end automated irrigation management systems that integrate IoT and machine learning technologies. It enables the efficient gathering of vital information about crop health, environmental conditions, and water requirements, which is essential for enhancing agricultural water use efficiency and crop productivity. Two key aspects of automated data collection are the use of advanced sensing technologies for non-invasive plant stress detection and the implementation of wireless sensor networks and energy-efficient communication protocols for large-scale, long-term data collection.
Advanced sensing technologies, such as hyperspectral imaging and thermal sensing, have emerged as powerful tools for non-invasive plant stress detection in automated irrigation management systems. These technologies provide valuable information about crop traits, enabling early and accurate detection of plant health issues (Triantafyllou et al., 2019). Triantafyllou et al. (2019) propose a comprehensive reference architecture model that incorporates advanced sensing technologies in the sensor layer for real-time plant stress detection, highlighting their importance in providing non-invasive plant stress detection. Similarly, Hossain et al. (2023) present a novel IoT-ML-Blockchain integrated framework for smart agricultural management that leverages advanced sensing technologies to optimize water use and improve crop yield, contributing to the overall goal of enhancing agricultural water use efficiency and crop productivity.
Hyperspectral imaging can capture subtle changes in plant physiology that are indicative of stress, while machine learning algorithms can be employed to extract meaningful patterns from the spectral data and classify different stress types (Araus et al., 2014). Thermal sensing can detect changes in canopy temperature, which is influenced by factors such as plant water status (Li et al., 2019). By monitoring canopy temperature and comparing it to reference values, automated irrigation systems can detect plant water stress and trigger irrigation events to maintain optimal plant health and productivity (Li et al., 2019).
The integration of advanced sensing technologies in automated irrigation management systems has the potential to revolutionize precision agriculture. Jiang et al. (2019) demonstrate the effectiveness of a deep learning-based model in accurately detecting leaf spot diseases, highlighting the importance of image augmentation and deep learning algorithms in enhancing the model's performance.
Wireless sensor networks (WSNs) and energy-efficient communication protocols have the potential to significantly improve the efficiency and reliability of data collection in large-scale, long-term irrigation systems. WSNs offer a cost-effective and scalable solution for real-time data collection in large-scale irrigation systems, providing remote monitoring and automated control capabilities (Mehdizadeh et al., 2020). Nishiura and Yamamoto (2021) propose a novel sensor network system that utilizes drones and wireless power transfer to autonomously collect environmental data from sensor nodes in vast agricultural fields, reducing operational costs and enhancing the efficiency of data collection. Similarly, Higashiura and Yamamoto (2021) introduce a network system that employs UAVs and LoRa communication to efficiently collect environmental data from sensor nodes distributed across large farmlands, optimizing data collection and reducing travel distance and time.
Energy-efficient communication protocols are crucial for ensuring reliable data transmission in challenging environmental conditions and extending the lifespan of sensor nodes (Mehdizadeh et al., 2020). Al-Ali et al. (2023) investigate the potential of WSNs and energy-efficient communication protocols for data collection in large-scale, long-term irrigation systems, discussing the challenges and opportunities of using these technologies to improve the efficiency and reliability of real-time data collection in irrigation management. Mehdizadeh et al. (2020) emphasize the need for careful consideration of factors such as data accuracy, energy consumption, and network reliability when designing effective WSNs for irrigation management, enabling timely irrigation decisions and improved crop yields.
The automation of data collection through the use of advanced sensing technologies and wireless sensor networks is essential for achieving fully autonomous, scalable irrigation management. By enabling non-invasive plant stress detection and large-scale, long-term data collection, these technologies contribute to the overall goal of optimizing water resource management and increasing agricultural productivity. The integration of these technologies in real-time, end-to-end automated irrigation management systems has the potential to enhance agricultural water use efficiency and crop productivity, ultimately contributing to the development of fully autonomous, scalable irrigation management solutions.

3.4: Real-Time Data Transmission Protocols and Technologies
Real-time data transmission is a critical component of automated irrigation management systems, as it enables the timely delivery of sensor data to the cloud for processing and decision-making. The exploration of suitable protocols and network architectures is essential for ensuring efficient and reliable data transmission in these systems, contributing to the overall goal of enhancing agricultural water use efficiency and crop productivity.
The Message Queuing Telemetry Transport (MQTT) protocol has emerged as a popular choice for real-time data transmission in IoT networks, including those used for automated irrigation management. MQTT is a lightweight, publish-subscribe protocol designed for constrained devices and low-bandwidth networks (Author, 2019). Its simplicity and low overhead make it well-suited for IoT applications where data transmission speed and energy efficiency are critical (Saranyadevi et al., 2022). MQTT provides three Quality of Service (QoS) levels, ensuring data reliability in real-time scenarios (Author, 2019). Chen et al. (2020) proposed novel algorithms to improve data exchange efficiency and handle rerouting in MQTT-based IoT networks for automated irrigation management systems. Their TBRouting algorithm efficiently finds the shortest paths for data transmission, while the Rerouting algorithm effectively handles the rerouting of topic-based session flows when a broker crashes. The combination of these algorithms can significantly improve the performance and reliability of automated irrigation management systems (Chen et al., 2020).
Client-server IoT networks, such as those based on MQTT, play a crucial role in real-time data transmission for automated irrigation management systems. In these networks, sensors and devices (clients) publish data to a central broker (server), which then distributes the data to subscribed clients (Verma et al., 2021). This architecture enables efficient data collection, processing, and dissemination, facilitating the integration of various components within the automated irrigation management pipeline. Verma et al. (2021) proposed an architecture for healthcare monitoring systems using IoT and communication protocols, which provides a comprehensive overview of existing approaches and highlights challenges and opportunities in the field. Although focused on healthcare, the insights from this study can be applied to automated irrigation management systems, emphasizing the importance of interoperability and standardization for seamless integration (Verma et al., 2021).
In addition to MQTT, other application layer protocols such as XMPP, CoAP, SOAP, and HTTP have been explored for real-time data transmission in IoT networks. Each protocol has its strengths and weaknesses, making them suitable for different applications and scenarios. XMPP (Extensible Messaging and Presence Protocol) is an open-standard protocol that supports real-time messaging, presence, and request-response services (Saint-Andre, 2011). CoAP (Constrained Application Protocol) is a specialized web transfer protocol designed for use with constrained nodes and networks in the Internet of Things (Shelby et al., 2014). SOAP (Simple Object Access Protocol) is a protocol for exchanging structured information in the implementation of web services, while HTTP (Hypertext Transfer Protocol) is the foundation of data communication for the World Wide Web (Fielding et al., 1999).
Motamedi and Villányi (2022) compared and evaluated wireless communication protocols for the implementation of smart irrigation systems in greenhouses, considering factors such as power consumption, range, reliability, and scalability. They found that ZigBee is the most suitable local communication protocol for greenhouse irrigation due to its large number of nodes and long range, while MQTT is the recommended messaging protocol for smart irrigation systems due to its TCP transport protocol and quality of service (QoS) options. GSM is a reliable and cost-effective global communication protocol for greenhouse irrigation, providing wide coverage and low cost (Motamedi & Villányi, 2022).
Syafarinda et al. (2018) investigated the use of the MQTT protocol in a precision agriculture system using a Wireless Sensor Network (WSN). They found that MQTT is suitable for use in IoT applications due to its lightweight, simple, and low bandwidth requirements. The average data transmission speed using the MQTT protocol was approximately 1 second, demonstrating its effectiveness for real-time data transmission in precision agriculture systems (Syafarinda et al., 2018).
The choice of application layer protocol for real-time irrigation management depends on factors such as data transmission speed, reliability, and energy efficiency. MQTT and RTPS (Real-Time Publish-Subscribe) are both suitable for real-time data transmission in IoT systems, but they have different strengths and weaknesses. MQTT is a better choice for applications that require low latency and high throughput, while RTPS is a better choice for applications that require high reliability and low latency (Sanchez-Iborra & Skarmeta, 2021). The exploration of MQTT and client-server IoT networks, along with the comparison of various application layer protocols, provides valuable insights into the suitability of these technologies for real-time data transmission in automated irrigation management systems.
In summary, real-time data transmission protocols and technologies play a vital role in the automation of irrigation management systems, enabling the efficient and reliable delivery of sensor data to the cloud for processing and decision-making. The exploration of MQTT and client-server IoT networks, along with the comparison of application layer protocols, highlights the importance of selecting suitable technologies based on factors such as data transmission speed, reliability, and energy efficiency. By leveraging these technologies, automated irrigation management systems can achieve seamless integration and contribute to the overall goal of enhancing agricultural water use efficiency and crop productivity.

3.5. Challenges and Solutions in Real-Time Data Transmission
Following the exploration of data collection, processing at the edge and fog, and automation in previous sections, we now turn to the critical aspect of real-time data transmission. While essential for automated irrigation management, this stage presents unique challenges that must be addressed to ensure system efficiency and reliability.
Obstacles in Real-Time Data Transmission
Agricultural environments present unique challenges for real-time data transmission, directly impacting the effectiveness of automated irrigation systems. Environmental factors can significantly disrupt wireless communication. Adverse weather conditions such as heavy rain, fog, and high winds can weaken or even block radio signals, leading to data loss and compromised system performance. Physical obstacles like trees, buildings, and uneven terrain further complicate signal propagation, creating reliability issues (Jukan et al., 2017; Yi & Ji, 2014; Zhang, Chang & Baoguo, 2018). These environmental challenges necessitate robust communication protocols and network architectures that can ensure consistent and reliable data flow.
In addition to environmental factors, technical limitations also present significant obstacles. Large-scale agricultural operations often demand long-distance data transmission, which can be hindered by the limited range of certain wireless communication protocols. Network congestion, occurring when multiple sensors transmit data concurrently, can lead to delays and potential data loss, further complicating real-time decision-making (Hameed et al., 2020). To mitigate these issues, researchers have investigated the potential of cognitive radio networks (CRNs) and dynamic spectrum access (DSA) for optimizing spectrum utilization and reducing interference (Righi et al., 2017; Shafi et al., 2018; Trigka & Dritsas, 2022). CRNs enable devices to intelligently sense and adapt to the surrounding radio environment, dynamically adjusting transmission parameters to avoid interference and improve communication efficiency. DSA, on the other hand, facilitates the dynamic allocation of unused spectrum, enhancing spectrum utilization and reducing congestion.
Furthermore, data security and privacy are paramount concerns in real-time irrigation systems. The sensitive nature of agricultural data, such as crop yields and farm management practices, necessitates robust security measures to prevent unauthorized access and data breaches (Gupta et al., 2020). Implementing secure communication protocols, authentication mechanisms, and encryption techniques is essential to protect data integrity and ensure the trustworthiness of the system.
Investigating Data Optimization Techniques
To enhance the efficiency and reliability of real-time data transmission in automated irrigation systems, researchers have explored a range of data optimization techniques. Data compression techniques aim to reduce the size of data packets transmitted over the network, minimizing bandwidth requirements and improving transmission speed (Rady et al., 2020; Karim et al., 2023). Lossless compression algorithms, such as Huffman coding and LZW, preserve data integrity while effectively reducing data size, ensuring that no information is lost during transmission (Cui, 2023). Lossy compression algorithms, such as JPEG and MP3, offer higher compression ratios but introduce a controlled level of data loss, which may be acceptable for certain applications where some loss of precision is tolerable (Karim et al., 2023). The choice between lossless and lossy compression depends on the specific application and the trade-off between data size and accuracy.
Data aggregation techniques provide another effective approach to optimize data transmission. By aggregating multiple sensor readings into a single representative value, such as average soil moisture or temperature, the number of transmissions can be significantly reduced, conserving bandwidth and energy resources (Cui, 2023). This is particularly beneficial in large-scale irrigation systems where numerous sensors are deployed across vast areas, generating substantial amounts of data. Additionally, data filtering techniques play a crucial role in improving data quality and reliability. Kalman filters and particle filters can effectively remove noise and outliers from sensor data, ensuring that only accurate and relevant information is transmitted and used for decision-making (Cui, 2023). This is essential for preventing erroneous data from influencing irrigation decisions and potentially leading to suboptimal water management.
Sensor calibration, drift correction, and fault detection are essential for maintaining data accuracy and reliability (Dos Santos et al., 2023). Regular calibration ensures that sensors provide accurate measurements over time, while drift correction techniques account for gradual changes in sensor readings due to environmental factors or aging. Fault detection mechanisms can identify and address sensor malfunctions or anomalies, preventing erroneous data from influencing irrigation decisions and potentially harming crops or wasting water.
Addressing the Challenges
Effectively addressing the challenges in real-time data transmission requires a multifaceted approach that encompasses environmental, technical, and data-related considerations. Implementing robust and adaptive communication protocols is crucial for overcoming interference and signal degradation caused by weather conditions and physical obstacles. Selecting appropriate protocols, such as LoRa or ZigBee, with suitable range and penetration capabilities can ensure reliable data transmission in challenging agricultural environments (Motamedi & Villányi, 2022). Additionally, employing techniques like frequency hopping and error correction codes can further improve communication resilience and mitigate data loss.
Optimizing network architecture is another key consideration. Deploying a distributed network architecture with edge and fog computing capabilities can significantly enhance data processing and transmission efficiency (Abdel Nasser et al., 2020; Tran et al., 2019). Edge devices can perform initial data processing and aggregation tasks, reducing the amount of data transmitted to the cloud and minimizing latency, while fog nodes can provide additional processing power and storage closer to the data source, enhancing scalability and reliability. This distributed approach alleviates the burden on the central cloud server and allows for more responsive and efficient irrigation management.
Data optimization techniques play a vital role in reducing bandwidth requirements and improving transmission efficiency. The choice of data compression, aggregation, and filtering techniques should be tailored to the specific requirements of the irrigation system, considering factors such as data type, accuracy needs, and available bandwidth. By carefully selecting and implementing these techniques, the overall performance and effectiveness of real-time irrigation systems can be significantly enhanced, leading to more sustainable water management practices and improved agricultural productivity.
By addressing these challenges and implementing appropriate solutions, real-time data transmission can become a reliable and efficient component of automated irrigation systems, contributing to the overall goal of achieving sustainable and productive agriculture in the face of growing food demands and water scarcity.

3.6. IoT Network Architectures and Variable Rate Irrigation (VRI) for Real-Time Irrigation
Real-time irrigation management systems heavily rely on the efficient and reliable transmission of data from sensors and weather stations to the cloud for processing and decision-making. However, agricultural environments present unique challenges to wireless communication, including adverse weather conditions, physical obstacles, and the limitations of wireless technologies. These challenges necessitate robust and adaptive solutions to ensure the consistent and timely flow of data, enabling truly autonomous irrigation scheduling.
Environmental factors, such as heavy rain, fog, and strong winds, can significantly disrupt wireless communication by attenuating or even blocking radio signals, leading to data loss and compromised system performance (Ed-daoudi et al., 2023; Jukan et al., 2017; Yi & Ji, 2014; Zhang, Chang & Baoguo, 2018). Dense vegetation, buildings, and uneven terrain create further complications by causing multipath propagation and shadowing effects (Yim et al., 2018; Gautam and Pagay, 2020). The study by Yim et al. (2018) on LoRa networks in a tree farm environment exemplifies these challenges, revealing reduced communication range and data reliability compared to theoretical expectations. This underscores the need for carefully selecting and optimizing communication protocols and network parameters to ensure reliable data transmission in such environments.
The study by Guzinski et al. (2014a) using a modified TSEB model further highlights the importance of high-resolution data in accurately capturing the spatial and temporal dynamics of energy fluxes influenced by environmental factors. This emphasizes the need for advanced data acquisition and processing techniques that can effectively represent the complexities of agricultural settings.
The limitations of traditional wireless communication technologies, such as limited range and network congestion, pose additional challenges for large-scale agricultural operations. Long-distance data transmission can be hindered by range limitations, while network congestion arising from numerous sensors transmitting concurrently can lead to delays and data loss, hindering real-time decision-making (Hameed et al., 2020). Addressing these challenges requires the exploration of advanced networking technologies that can optimize spectrum utilization, mitigate interference, and improve reliability and efficiency.
Cognitive Radio Networks (CRNs) and Dynamic Spectrum Access (DSA) offer promising solutions for optimizing wireless communication in agricultural settings. CRNs empower devices with the ability to intelligently sense and adapt to the surrounding radio environment, dynamically adjusting transmission parameters to avoid interference and improve communication efficiency (Righi et al., 2017; Shafi et al., 2018; Trigka & Dritsas, 2022). Research has explored the potential of CRNs in predicting Radio Frequency (RF) power to avoid noisy channels and optimize spectrum utilization (Iliya et al., 2014; Iliya et al., 2014). These studies demonstrate the effectiveness of combining optimization algorithms with artificial neural networks (ANNs) to enhance the accuracy and generalization of RF power prediction, enabling CRNs to make informed decisions about channel selection and avoid interference.
DSA complements CRN technology by dynamically allocating unused spectrum, further enhancing spectrum utilization and reducing congestion (Shi et al., 2023). The numerical model developed by Shi et al. (2023) showcases the potential of CRNs and DSA for optimizing wireless communication in challenging environments.
The integration of CRNs and DSA into the IoT network architecture requires careful consideration of spectrum sensing techniques, network topology, and data security. Research on cooperative spectrum sensing suggests that distributed approaches, where sensor nodes collaborate and share information, can significantly improve the accuracy and efficiency of spectrum sensing, particularly in dynamic environments (Trigka and Dritsas, 2022; Khalid & Yu, 2019). This collaborative approach enables a more comprehensive understanding of the radio environment and facilitates the identification of available frequency bands for data transmission.
The choice of network topology also impacts the performance and scalability of CRN-based irrigation systems. Mesh networks, where sensor nodes are interconnected and relay data for each other, offer enhanced resilience and coverage compared to star topologies where nodes communicate directly with a central gateway (Akyildiz & Vuran, 2010). However, mesh networks can be more complex to manage and may introduce additional routing overhead. The trade-off between network resilience and complexity needs to be carefully evaluated to select the most appropriate topology for a specific agricultural setting.
Data security and privacy are paramount concerns in IoT-based irrigation systems due to the sensitive nature of agricultural data (Gupta et al., 2020). Implementing secure communication protocols, authentication mechanisms, and encryption techniques is essential for protecting data integrity and ensuring system trustworthiness. Research on secure spectrum leasing and resource allocation algorithms for CR-WSN-based irrigation systems has demonstrated the potential of these technologies for enhancing security and efficiency (Hassan, 2023; Afghah et al., 2018).
In conclusion, the development of effective and reliable real-time irrigation management systems requires a comprehensive approach that addresses the challenges of data transmission in agricultural environments. The integration of robust and adaptive communication protocols, optimized network architectures, and advanced networking technologies like CRNs and DSA, along with a focus on data security and privacy, can contribute significantly to achieving the goal of autonomous and efficient irrigation scheduling.
4. AUTOMATED DATA PROCESSING IN THE CLOUD
4.1. Data Quality and Preprocessing
Data quality is paramount in automated irrigation systems as it directly influences the effectiveness of decision-making and water use efficiency. Issues like missing values, inconsistencies, and outliers arising from sensor malfunctions, environmental interference, or network problems (Lv et al., 2023) can significantly impact the performance of machine learning models used for irrigation scheduling and management.
Real-time data cleaning techniques are essential for addressing these challenges. Kalman filtering proves particularly effective in handling missing values and correcting erroneous readings by recursively estimating the system's state based on previous measurements and current sensor data, taking into account noise and uncertainty (Kim et al., 2020). Moving average techniques, by averaging consecutive data points, provide a more stable representation of the underlying trend, filtering out short-term fluctuations (Chhetri, 2023). For outlier detection, adaptive thresholding methods offer a dynamic approach, adjusting thresholds based on the statistical properties of the data to effectively identify anomalies and minimize false positives (Bah et al., 2021). These techniques are crucial in maintaining the integrity of real-time data streams and ensuring the accuracy of subsequent analyses.
Adaptive data preprocessing is essential for managing the diversity of data sources and formats commonly found in irrigation systems. Data normalization techniques, such as min-max scaling or z-score normalization, ensure that all features contribute equally to the analysis by transforming data values to a common scale (Pradal et al., 2016). This is crucial for preventing features with larger values from dominating the analysis and ensuring that all features are given equal consideration. Similarly, feature scaling methods, like standardization or normalization, optimize the range of feature values to improve the performance and convergence of machine learning models (Tortorici et al., 2024). By scaling features to a similar range, the influence of outliers is reduced, and the model's ability to learn from the data is enhanced.
Data fusion techniques play a critical role in integrating information from diverse sources, creating a more comprehensive and reliable dataset for irrigation management. Dempster-Shafer theory, a generalization of probability theory, allows for the expression of both uncertainty and the degree of conflict in evidence, making it suitable for fusing uncertain and conflicting data from heterogeneous sources (Sadiq and Rodriguez, 2004). This is particularly relevant in irrigation systems where data from different sensors may provide slightly different or even contradictory information due to sensor variations or environmental factors. Bayesian inference offers another powerful framework for combining information from multiple sources, updating the probability of a hypothesis as new evidence becomes available. By applying these techniques, data from soil moisture sensors, canopy temperature sensors, weather stations, and other sources can be integrated to provide a holistic understanding of crop water requirements and environmental conditions, leading to more informed and accurate irrigation decisions.
The impact of data quality extends beyond model accuracy to the robustness of machine learning models under varying conditions. Robust models should maintain consistent performance even when faced with data inconsistencies or unexpected situations. Techniques like data augmentation and domain adaptation can enhance model robustness by exposing the model to a wider range of data variations during training. Data augmentation involves generating additional training data by applying transformations or introducing noise to existing data, making the model more resilient to noise and variations in the real-world data. Domain adaptation techniques aim to adapt a model trained on one domain (e.g., a specific crop or geographic location) to perform well on another domain with different data characteristics. This is particularly relevant in irrigation management, where models may need to be applied to different crops, soil types, or climatic conditions.
The choice of data cleaning, preprocessing, and fusion techniques should be carefully considered based on the specific characteristics of the irrigation system and the available data. By selecting and implementing appropriate techniques, the accuracy, reliability, and robustness of machine learning models can be significantly improved, leading to more efficient and sustainable irrigation management practices.
4.2. Scalable and Autonomous Deployment using Containerization Strategies
The transition from data collection and transmission to efficient data processing requires a robust infrastructure capable of handling diverse workloads and data volumes. Containerization technologies, specifically Docker and Kubernetes, offer a promising solution for deploying and scaling data processing and machine learning modules within cloud environments like AWS, Azure, and GCP (Vargas-Rojas et al., 2024; Rosendo et al., 2022; Solayman & Qasha, 2023). Docker provides a standardized way to package applications and their dependencies into self-contained units known as containers, ensuring consistent and reproducible execution across different platforms (Rosendo et al., 2022). Kubernetes, acting as a container orchestrator, manages their deployment, scaling, and networking across a cluster of machines (Rosendo et al., 2022). This combination presents several advantages for automated irrigation management systems.
Firstly, containerization facilitates efficient resource utilization and scalability. By encapsulating applications and their dependencies, containers enable the isolation of resources and prevent conflicts between different modules (Vargas-Rojas et al., 2024; Solayman & Qasha, 2023). This isolation allows for the efficient allocation of resources, such as CPU, memory, and storage, to each container based on its specific needs. Kubernetes further enhances scalability by allowing for the automatic scaling of containers based on real-time demand, ensuring the system can adapt to varying workloads and data volumes, preventing bottlenecks, and ensuring responsiveness to changing conditions (Karamolegkos et al., 2023).
Secondly, containerization promotes portability and reproducibility. By packaging applications and their dependencies into a single unit, containers make it easy to move and deploy them across different cloud environments without the need for environment-specific configurations (Rosendo et al., 2022; Solayman & Qasha, 2023). This portability simplifies the development and deployment process, reducing the time and effort required to set up and manage the system. Additionally, containers ensure reproducibility by providing a consistent execution environment, regardless of the underlying infrastructure. This eliminates variability and ensures that the system will behave consistently across different deployments (Zhou et al., 2023).
Optimizing container orchestration and resource allocation is crucial to minimizing latency and maximizing throughput in real-time data processing pipelines. Techniques like auto-scaling and dynamic resource allocation play a critical role in this context (Hethcoat et al., 2024; Werner and Tai, 2023; Kumar et al., 2024). Auto-scaling automatically adjusts the number of container instances based on real-time demand, ensuring that sufficient resources are available to handle peak workloads while avoiding over-provisioning during periods of low demand (Hethcoat et al., 2024; Kumar et al., 2024). Dynamic resource allocation enables the fine-grained adjustment of resources allocated to each container based on its specific needs and the current workload (Werner and Tai, 2023). This ensures efficient resource allocation and provides each container with the necessary resources to perform its tasks effectively.
Performance monitoring tools, such as Kubernetes Metrics Server and Prometheus, are essential for gaining insights into the performance of containers and the overall system (Hethcoat et al., 2024; Kuity & Peddoju, 2023). These tools provide valuable data on key performance indicators, such as CPU and memory usage, network traffic, and application-specific metrics. By monitoring this data, administrators can identify bottlenecks, optimize resource allocation strategies, and continuously improve system performance (Hethcoat et al., 2024). This data-driven approach ensures that automated irrigation management systems can operate efficiently and reliably.
By integrating containerization technologies with optimization techniques and performance monitoring, automated irrigation management systems achieve the scalability, autonomy, and efficiency required for effective real-time data processing and decision-making. This approach facilitates a seamless and responsive system that can adapt to changing conditions and contribute to the overall goal of optimizing water resource management and increasing agricultural productivity.
4.3. Deploying ML Models for Data Processing
•	Architectures and frameworks for deploying machine learning models on cloud platforms for real-time data processing and inference in irrigation management systems, such as: TensorFlow Serving, Apache MXNet Model Server, ONNX Runtime
•	Techniques for optimizing machine learning model performance and resource utilization in cloud environments, such as: Model compression (e.g., pruning, quantization), Hardware acceleration (e.g., GPU, TPU), Distributed training (e.g., Horovod, BytePS)
•	Integration of deployed machine learning models with other components of the automated irrigation management pipeline, such as data preprocessing, decision-making, and control systems, using protocols like: MQTT, CoAP, RESTful APIs
4.4. Online Learning in the Cloud
•	Application of online learning techniques for continuously updating and improving machine learning models based on incoming real-time data, using algorithms such as: Stochastic gradient descent (SGD), Passive-aggressive algorithms, Online random forests
•	Architectures and frameworks for implementing online learning in cloud-based irrigation management systems, such as: Apache Spark Streaming, Apache Flink, AWS Kinesis, leveraging serverless computing and stream processing paradigms
•	Strategies for balancing exploration and exploitation in online learning to adapt to changing environmental conditions and optimize irrigation decision-making, using techniques such as: Multi-armed bandits, Bayesian optimization, Reinforcement learning (e.g., Q-learning, SARSA)


5. GENERATING AND APPLYING IRRIGATION INSIGHTS 
5.1. Real-Time Generation of Actionable Irrigation Insights
•	Advanced predictive models, such as deep learning (e.g., LSTM, CNN) and ensemble methods (e.g., Random Forests), for precise, site-specific irrigation recommendations
•	Integration of IoT sensor data (e.g., soil moisture probes, weather stations) and cloud-based data sources (e.g., weather forecasts, satellite imagery) using data fusion techniques (e.g., Kalman filtering) to enhance insight accuracy and resolution
•	Strategies for handling data heterogeneity, uncertainty, and quality issues in real-time insight generation, such as data preprocessing and outlier detection
•	Techniques for reducing computational complexity and latency, such as edge computing (e.g., fog computing), model compression (e.g., quantization), and hardware accelerators (e.g., GPUs)
5.2. Automated Application of Irrigation Insights
•	Architectures and protocols for seamless integration of ML-generated insights with IoT-enabled irrigation control systems, such as MQTT and CoAP for lightweight, real-time communication
•	Analysis of industry-leading products and services, such as smart irrigation controllers (e.g., Rachio) and cloud-based irrigation management platforms (e.g., CropX)
•	Strategies for ensuring reliability, security, and scalability of automated insight application, such as redundant communication channels and secure edge-to-cloud architectures
•	Case studies of successful implementations of closed-loop, autonomous irrigation systems in research and commercial settings, highlighting technologies used and benefits achieved

6. INTEGRATION, INTEROPERABILITY, AND STANDARDIZATION 
6.1. Interoperability and Standardization
•	Importance of interoperability and standardization in enabling seamless integration of automated irrigation components
•	Overview of existing and emerging standards for IoT devices, communication protocols, and data formats in precision agriculture (e.g., ISOBUS, agroXML, SensorML)
•	Role of standardization bodies and industry consortia in promoting interoperability (e.g., AgGateway, Open Ag Data Alliance, Agricultural Industry Electronics Foundation)
•	Challenges in adopting and implementing standards across diverse hardware and software platforms
•	Strategies for encouraging widespread adoption of standards and best practices for interoperability in automated irrigation systems
6.2. Integration with Existing Irrigation Infrastructure
•	Challenges and strategies for retrofitting legacy irrigation systems with IoT sensors, actuators, and communication devices
•	Hardware compatibility issues and solutions (e.g., adapters, modular designs)
•	Software and firmware updates to enable integration with automated decision-making systems
•	Data integration and normalization techniques for merging legacy and new data sources
•	Economic and practical considerations for transitioning from manual to automated irrigation management
•	Cost-benefit analysis of upgrading existing infrastructure vs. implementing new systems
•	Phased implementation approaches to minimize disruption and optimize resource allocation
•	Training and support requirements for farmers and irrigation managers adopting automated systems
•	Case studies and real-world examples of successful integration of automated irrigation with existing infrastructure
6.3. Integration with Other Precision Agriculture Technologies
•	Synergies between automated irrigation and complementary technologies
•	Remote sensing (satellite, UAV, and ground-based) for crop monitoring and evapotranspiration estimation
•	Soil moisture sensors and weather stations for real-time, localized data collection
•	Variable rate application systems for precise irrigation delivery based on crop requirements
•	Yield mapping and analytics for assessing the impact of automated irrigation on crop productivity
•	Architectures and frameworks for integrating diverse data sources and technologies into a unified precision agriculture ecosystem
•	Edge computing and fog computing paradigms for real-time data processing and decision-making
•	Cloud-based platforms for data storage, analysis, and visualization
•	API-driven approaches for modular integration of third-party services and applications
•	Challenges and solutions for ensuring data quality, consistency, and security across integrated precision agriculture systems
•	Data cleaning, preprocessing, and harmonization techniques
•	Blockchain and distributed ledger technologies for secure, tamper-proof data sharing and traceability
•	Access control and authentication mechanisms for protecting sensitive data and resources
•	Future trends and research directions in the integration of automated irrigation with advanced precision agriculture technologies (e.g., AI-driven crop modeling, robotics, and autonomous vehicles)
6.4. Cybersecurity Considerations for Integrated Automated Irrigation Systems
•	Unique security risks and vulnerabilities associated with IoT-based automated irrigation systems
•	Potential for unauthorized access, data tampering, and system manipulation
•	Implications of security breaches for crop health, water resource management, and farm productivity
•	Best practices and strategies for securing automated irrigation systems
•	Secure device provisioning and authentication (e.g., hardware security modules, certificates)
•	Encryption and secure communication protocols (e.g., TLS, DTLS)
•	Firmware and software updates to address emerging security threats
•	Network segmentation and access control to limit the impact of breaches
•	Role of cybersecurity standards and frameworks in guiding the development and deployment of secure automated irrigation systems (e.g., NIST CSF, IEC 62443)
•	Importance of user awareness, training, and incident response planning in maintaining the security of integrated automated irrigation systems

7. MONITORING AND ENSURING SYSTEM RELIABILITY
7.1. Resilience and Fault Tolerance in Automated Irrigation Systems
•	Strategies for ensuring robustness and reliability in the face of failures, disruptions, or unexpected events
•	Redundancy: Implementing redundant components, such as duplicate sensors (e.g., soil moisture sensors, weather stations), controllers (e.g., PLCs, microcontrollers), and communication channels (e.g., cellular, satellite, LoRaWAN) to maintain system functionality during component failures
•	Failover mechanisms: Designing seamless failover mechanisms that automatically switch to backup components or systems in case of primary system failure, such as hot-standby controllers or multi-path communication protocols (e.g., mesh networks, software-defined networking)
•	Self-healing capabilities: Incorporating AI-driven self-healing mechanisms that can detect, diagnose, and recover from faults without human intervention, using techniques like reinforcement learning, Bayesian networks, or self-organizing maps
•	The role of distributed architectures and edge computing in enhancing system resilience
•	Decentralizing critical functions and data processing to minimize the impact of single points of failure, using fog computing or multi-agent systems
•	Leveraging edge computing to enable localized decision-making and control, reducing dependence on cloud connectivity and improving response times, using technologies like Raspberry Pi, NVIDIA Jetson, or Intel NUC
•	Anomaly detection and predictive maintenance using AI techniques
•	Employing unsupervised learning algorithms (e.g., autoencoders, clustering) to detect anomalies in sensor data, system performance, and water usage patterns
•	Developing predictive maintenance models using techniques like long short-term memory (LSTM) networks, convolutional neural networks (CNNs), or gradient boosting machines (GBMs) to anticipate and prevent potential system failures based on historical data and real-time monitoring
7.2. Advanced Monitoring Techniques for Automated Irrigation Systems
•	Remote monitoring using IoT-enabled sensors and computer vision
•	Deploying a heterogeneous network of IoT sensors to collect real-time data on soil moisture (e.g., capacitive, tensiometric), temperature (e.g., thermocouples, thermistors), humidity (e.g., capacitive, resistive), and plant health (e.g., sap flow, leaf wetness)
•	Integrating high-resolution cameras (e.g., multispectral, hyperspectral) and computer vision algorithms for visual monitoring of crop growth, disease detection (e.g., using deep learning-based object detection and segmentation), and irrigation system performance (e.g., leak detection, sprinkler uniformity)
•	Transmitting sensor and camera data to cloud-based platforms (e.g., AWS IoT, Google Cloud IoT, Microsoft Azure IoT) for remote access and analysis using protocols like MQTT, CoAP, or AMQP
•	Innovative approaches for real-time system health assessment
•	Developing novel algorithms and metrics for evaluating the health and performance of automated irrigation systems, such as entropy-based measures, network resilience indices, or multi-criteria decision analysis (MCDA) frameworks
•	Combining data from multiple sources (e.g., sensors, weather forecasts, satellite imagery) using data fusion techniques (e.g., Kalman filters, Dempster-Shafer theory) to create a comprehensive view of system health
•	Employing advanced data visualization techniques (e.g., interactive dashboards, augmented reality) to present system health information in an intuitive and actionable format
7.3. Closed-Loop Control and Feedback Mechanisms
•	Exploring the concept of closed-loop control in autonomous irrigation systems
•	Implementing feedback loops that continuously monitor system performance and adjust irrigation schedules based on real-time data, using control techniques like proportional-integral-derivative (PID), model predictive control (MPC), or fuzzy logic control (FLC)
•	Integrating machine learning algorithms (e.g., reinforcement learning, genetic algorithms) to optimize closed-loop control strategies over time, adapting to changing environmental conditions and crop requirements
•	Designing effective feedback mechanisms for user interaction and system optimization
•	Providing user-friendly interfaces (e.g., mobile apps, web dashboards) for farmers to input preferences, constraints, and expert knowledge into the automated irrigation system, using techniques like participatory design or user-centered design
•	Incorporating user feedback and domain expertise to refine irrigation strategies and improve system performance
8. CASE STUDIES AND REAL-WORLD IMPLEMENTATIONS OF FULLY AUTONOMOUS IRRIGATION SYSTEMS
8.1. Fully Autonomous Irrigation Systems in Diverse Agricultural Settings
•	Row Crops: maize, wheat, soybean with real-time soil moisture monitoring and weather-based irrigation scheduling for fully automated precision irrigation
•	Orchards: citrus, apple, almond with plant health monitoring and precision water application for fully autonomous orchard management
•	Greenhouses: tomato, lettuce, herbs with automated drip irrigation and climate control integration for fully automated greenhouse operations
•	Urban Farming: rooftop gardens, vertical farms with IoT-enabled hydroponic systems and remote management for fully autonomous urban crop production
8.2. Integration of Advanced System Components for End-to-End Automation
•	Wireless sensor networks: soil moisture probes, weather stations, plant health monitoring cameras with low-power, long-range communication for fully automated data acquisition
•	Secure data transmission: LoRaWAN, NB-IoT, 5G, satellite communication for reliable, real-time data transfer from field to cloud in fully autonomous irrigation systems
•	Intelligent data processing: edge computing for local data filtering, cloud platforms for scalable storage and analysis, machine learning algorithms for predictive insights in fully automated irrigation management
•	Autonomous decision-making: advanced irrigation scheduling algorithms, precise valve control, closed-loop feedback systems for optimal water management in fully autonomous irrigation systems
8.3. Quantitative Performance Evaluation of Fully Automated Irrigation Systems
•	Water use efficiency: percent reduction in water consumption compared to conventional methods, improved water productivity (yield per unit of water) achieved through fully autonomous irrigation
•	Crop yield and quality improvements: percent increase in yield, enhanced crop uniformity, improved nutritional content attributed to fully automated precision irrigation
•	Labor and energy savings: quantified reduction in labor hours for irrigation management, decreased energy consumption for pumping due to optimized scheduling in fully autonomous systems
•	Economic viability: detailed return on investment analysis, payback period calculations, comprehensive cost-benefit analysis for fully autonomous irrigation management systems
8.4. Lessons Learned and Challenges Encountered in Deploying Autonomous Irrigation Systems
•	Technical challenges and solutions: ensuring reliable data transmission in remote locations, addressing interoperability issues between diverse system components, optimizing power consumption for extended battery life, adapting algorithms to local soil and weather conditions in fully autonomous irrigation systems
•	Operational and logistical hurdles: streamlining installation and maintenance procedures, providing effective user training, seamlessly integrating with existing farm management practices and legacy systems for fully automated irrigation management
•	Regulatory and socio-economic considerations: navigating complex water use regulations, addressing data privacy and security concerns, ensuring equitable access and affordability for smallholder farmers adopting fully autonomous irrigation technologies
8.5. Best Practices and Recommendations for Successful Implementation
•	Designing scalable, modular, and adaptable autonomous irrigation systems to accommodate future growth and changing requirements for fully automated water management
•	Prioritizing user-centered design principles and actively engaging stakeholders throughout the development and deployment process of fully autonomous irrigation solutions
•	Adopting open standards and communication protocols to enable seamless integration of system components and interoperability with third-party platforms in fully automated irrigation setups
•	Implementing robust data validation, filtering, and quality control mechanisms to ensure data integrity and reliability for decision-making in fully autonomous irrigation systems
•	Establishing clear data governance policies and security frameworks to protect sensitive information and maintain user trust in fully automated irrigation management
•	Developing intuitive user interfaces and decision support tools to facilitate easy adoption and effective use of fully autonomous irrigation systems
•	Collaborating with local extension services, agribusinesses, and technology providers for knowledge transfer, technical support, and continuous improvement of fully automated irrigation solutions
8.6. Synthesis of Case Studies and Implications for Autonomous Irrigation Adoption
•	Cross-case analysis of key performance indicators and critical success factors for fully autonomous irrigation scheduling systems in various contexts
•	Identification of common themes, challenges, and innovative solutions across diverse implementations of end-to-end fully automated irrigation management
•	Assessment of the potential for replicability and scaling of successful fully autonomous irrigation projects in different regions and farming systems
•	Implications for future research priorities, technology development roadmaps, and policy interventions to support widespread adoption of fully autonomous irrigation technologies

CONCLUSION/FUTURE DIRECTIONS AND UNANSWERED QUESTIONS
•	Summarize the key insights gained from the question-driven review, emphasizing how each section contributes to the overarching goal of achieving real-time, end-to-end automation in irrigation management
•	Based on the questions addressed, propose new research directions and unanswered questions
•	Identify key research gaps and propose concrete research questions and hypotheses for advancing the field of real-time, automated irrigation management
•	Highlight the need for collaborative research efforts across disciplines, such as computer science, agricultural engineering, and environmental science, to address the complex challenges of automated irrigation systems
•	Emphasize the need for further innovation and exploration in real-time, automated irrigation systems



</previous_sections>

</documents>
<instructions>


Use the information provided in the <documents> tags to write the next subsection of the research paper, following these steps:
1. Review the overall intention of the research paper, specified in the <review_intention> tag. Ensure the subsection you write aligns with and contributes to this overall goal.
2. Consider the specific intention for this subsection of the paper, stated in the <section_intention> tag. The content you write should fulfill this purpose. 
3. Use the title provided in the <subsection_title> tag as the heading for the subsection. 
4. Address each of the points specified in the </subsection_point_Point *> tags:
   a) Make a clear case for each point using the text provided in the "point" field.
   b) Support each point with evidence from the research papers listed in the corresponding "papers to support point" field.
   c) When citing a paper to support a point, include inline citations with the author name(s) and year, e.g. (Smith et al., 2020; Johnson and Lee, 2019; Brown, 2018). Cite all papers that strengthen or relate to the point being made.
   d) While making a point and citing the supporting papers, provide a brief explanation in your own words of how the cited papers support the point.
5. Ensure that both of the points from the <subsection_point> tags are fully addressed and supported by citations. Do not skip or combine any points.
6. After addressing the specified points, wrap up the subsection with a concluding sentence or two that ties the points together and relates them back to the <section_intention>.
7. Review the <Previous_sections> of the paper, and ensure that the new subsection you have written fits logically and coherently with the existing content. Add transition sentences as needed to improve the flow.
8. Proofread the subsection to ensure it is clear, concise, and free of grammatical and spelling errors. Maintain a formal academic tone and style consistent with the rest of the research paper.
9. Format the subsection using Markdown, including the subsection heading (using ## or the equivalent for the document), inline citations, and any other formatting needed for clarity and readability.
10. If any information is missing or unclear in the provided tags, simply do your best to write the subsection based on the available information. Do not add any information or make any points not supported by the provided content. Prioritize fully addressing the required points over hitting a specific word count.

The output should be a complete, well-organized, and properly cited subsection ready to be added to the research paper.

Begin your answer with a brief recap of the instructions stating what you will to optimize the quality of the answer. Clearly and briefly state the subsection you'll be working on and the points you'll be addressing. Then proceed to write the subsection following the instructions provided. 

Critical: 
- Do not include a conclusion or summary as the entry is in the middle of the document. Focus on addressing the points and supporting them with evidence from the provided papers. Ensure that the subsection is well-structured, coherent, and effectively contributes to the overall research paper.
- The subsection we are focusing on is: 4.4. Online Learning in the Cloud
- No need for sub-sub-sections. just provide paragraphs addressing each point. They should transition fluidly and narurally into each other.
- Ensure that the content is supported by the provided papers and that the citations are correctly formatted and placed within the text.
- Do not repeat content from the previous sections. Ensure that the information provided is new and relevant to the subsection being written.



</instructions>

<subsection_point_Point 1>
Point: Architectures and frameworks for deploying machine learning models on cloud platforms for real-time data processing and inference in irrigation management systems, such as TensorFlow Serving, Apache MXNet Model Server, ONNX Runtime

Papers to support point:

Paper 1:
- APA Citation: Albahar, M. A. (2023). A Survey on Deep Learning and Its Impact on Agriculture: Challenges and Opportunities. Agriculture, 13(3), 540. https://doi.org/10.3390/agriculture13030540
  Main Objective: 
  Study Location: 
  Data Sources: 
  Technologies Used: 
  Key Findings: 
  Extract 1: Architectures and frameworks for deploying machine learning models on cloud platforms for real-time data processing and inference in irrigation management systems, such as TensorFlow Serving, Apache MXNet Model Server, ONNX Runtime
  Extract 2: Data quality and preprocessing in the cloud, containerization strategies for scalable and autonomous deployment, and the deployment of machine learning (ML) models for real-time data processing and inference.
  Limitations: The study did not include a critical analysis of the limitations of using deep learning in irrigation management systems.
  Relevance Evaluation: 0.9 indicates that the text excerpt is highly relevant to the given point and review. The text provides an overview of the use of deep learning in irrigation management systems, including important considerations such as data quality, preprocessing, containerization, and deployment of machine learning models. It also highlights the importance of interoperability and standardization for successful integration of components within the automated irrigation management pipeline.
  Relevance Score: 0.9
  Inline Citation: (Albahar, 2023)
  Explanation: The authors performed a review of the recent advancements in deep learning (DL) and its applications in the agricultural sector. They also provided a succinct yet detailed explanation of deploying ML models for real-time data processing and inference in irrigation management systems, emphasizing the importance of data quality and preprocessing, containerization, and the deployment of machine learning (ML) models for real-time data processing and inference. They also highlighted the role of interoperability and standardization in enabling the integration of components within the automated irrigation management pipeline.

 Full Text: >
Citation: Albahar, M. A Survey on
Deep Learning and Its Impact on
Agriculture: Challenges and
Opportunities. Agriculture 2023, 13,
540. https://doi.org/10.3390/
agriculture13030540
Academic Editor: Jiangbo Li
Received: 7 January 2023
Revised: 6 February 2023
Accepted: 11 February 2023
Published: 23 February 2023
Copyright:
© 2023 by the author.
Licensee MDPI, Basel, Switzerland.
This article is an open access article
distributed
under
the
terms
and
conditions of the Creative Commons
Attribution (CC BY) license (https://
creativecommons.org/licenses/by/
4.0/).
agriculture
Review
A Survey on Deep Learning and Its Impact on Agriculture:
Challenges and Opportunities
Marwan Albahar
College of Computer Science in Al-Leith, Umm Al Qura University, Mekkah 21955, Saudi Arabia;
mabahar@uqu.edu.sa
Abstract: The objective of this study was to provide a comprehensive overview of the recent ad-
vancements in the use of deep learning (DL) in the agricultural sector. The author conducted a
review of studies published between 2016 and 2022 to highlight the various applications of DL in
agriculture, which include counting fruits, managing water, crop management, soil management,
weed detection, seed classiﬁcation, yield prediction, disease detection, and harvesting. The author
found that DL’s ability to learn from large datasets has great promise for the transformation of the
agriculture industry, but there are challenges, such as the difﬁculty of compiling datasets, the cost of
computational power, and the shortage of DL experts. The author aimed to address these challenges
by presenting his survey as a resource for future research and development regarding the use of DL
in agriculture.
Keywords: agriculture; deep learning; crop management; weed detection
1. Introduction
In the contemporary era of globalization, the role and contributions of agriculture are
crucially important. Over the years, agriculture has suffered from different challenges in
fulﬁlling the ever-increasing needs of the world population, which has increased by twofold
in the past ﬁve decades. There are different predictions for this unprecedented growth
in the population, which is likely to reach approximately 9 billion people in the world
by 2050 [1]. In addition, the estimates show an increase in the number of people living
within urban areas, along with a signiﬁcant drop in the percentage of the population who
are retired or working [1,2]. This means that agricultural productivity around the world
must be increased considerably, and there is a need for a human labor force. To address
this sort of problem, technologies such as tractors were introduced into agriculture over a
century ago. At present, mechanical technology is showing an incredible evolution, and
a signiﬁcant number of technologies are available. Existing technologies, such as remote
sensing [3], robotic platforms [4], and the Internet of Things (IoT) [2], have recently become
widespread in industry, particularly in the agricultural sector, leading to the phenomenon
of smart and efﬁcient farming [5,6]. Schmidhuber (2015) states that deep learning (DL) is a
modern approach that is successfully being utilized as part of various machine-learning
techniques [7]. It is comparable to artiﬁcial neutral networks (ANNs) but with enhanced
learning capabilities; therefore, it has higher accuracy [8]. In recent years, DL technologies,
such as generative adversarial networks (GANs), recurrent neutral networks (RNNs), and
convolutional neutral networks (CNNs), have been widely implemented and investigated
in different ﬁelds of research, including farming and agriculture. Agriculturalists and
researchers often use different software systems without assessing the mechanisms and
ideas of the techniques, such as GANs, RNNs, and CNNs, that are usually applied in DL
algorithms. There are various sub-categories of DL algorithms, including deep convo-
lutional generative adversarial networks (DCGANs), very deep convolutional networks
(VGGNets), and long short-term memory (LSTM) networks; therefore, understanding these
Agriculture 2023, 13, 540. https://doi.org/10.3390/agriculture13030540
https://www.mdpi.com/journal/agriculture
Agriculture 2023, 13, 540
2 of 22
sub-categories of DL algorithms is important for understanding common DL algorithms [9].
According to Kamilaris and Prenafeta [10], DL is a modern and recent technique and
system for data analysis and image processing with signiﬁcant potential and promising
results [10]. DL has been successfully used in different domains and has recently entered
the agriculture ﬁeld. Additionally, it has the potential to address complex problems more
efﬁciently and quickly due to the use of complex models that enable massive parallelization.
These multifaceted models used in DL are likely to increase classiﬁcation accuracy and
limit faults in regression problems, but only if there are sufﬁciently large databases that can
be used to explain such problems.
The authors of [11] argued that DL using drone technology is signiﬁcant for agriculture
and farming as it provides a convenient way to monitor, assess, and scan crops through the
use of high-quality and high-resolution images [11]. Such technology aids in recognizing
advancements in ﬁelds and assessing quality. For example, with the help of images
provided by drone technology, agriculturalists and farmers can determine whether crops
are fully ready for harvesting. DL, along with machine-learning (ML) techniques, can help
farmers understand the nature of the soil, thus aiding them in making timely decisions
regarding farming. DL is also applied to assess how nutrients and water are to be managed
and to make decisions about the suitable time for cropping and harvesting. Yields are
higher and more efﬁcient and the return on investment (ROI) for crops can be projected,
considering the margin and cost in the market [12]. In addition, the efﬁciency of DL is
recognized because it has been observed to outclass conventional methods, such as support
vector machines (SVMs), random forest (RF) algorithms, and ANNs. Several technologies
are being used together with DL to enhance performance in prediction and classiﬁcation
related to agricultural problems. The RNN and LSTM models have memory and time
dimensions. As a result, they can be used to project animal and plant growth based on
recorded data, evaluate water needs, and determine crop yield using the mining time
dimensions and memory function [13,14]. They can also be utilized to estimate plant
and animal growth based on previously recorded data to evaluate fruit yields or water
requirements. Ren et al. [15], for example, used both models to forecast various phenomena
and climate changes. Using hyperspectral images and infrared thermal imaging to provide
data and information is the right direction for the prompt detection of diseases in crops.
With the subsequent exponential growth in this ﬁeld, it is necessary to provide an up-to-date
review of the recent literature focusing on innovative research techniques implementing
DL for agriculture. Hence, this study focused on providing an overview of the recent
advancements linked to DL in the agricultural sector. The study aimed to describe the
use of DL in agriculture; in particular, with respect to counting fruits, managing water,
crop management, soil management, weed detection, seed classiﬁcation, yield prediction,
disease detection, and harvesting. The adoption of technology in the agriculture sector
during the recent period has signiﬁcantly transformed and assisted farming and crop
cultivation. However, DL has been noted to have added efﬁciency to agriculture, which
has motivated researchers to investigate how it can be helpful in farming and harvesting
and in yield predictions.
This paper is categorized in the following way: Section 2 presents the research method-
ology. Section 3 provides a literature review by highlighting a brief history of the topic.
Section 4 highlights the importance of DL in the agriculture sector. Section 5 discusses DL
tools that can be used for model development. In addition, the same section describes the
usage, purpose, signiﬁcance, and implementation of DL in the agriculture sector. Section 6
provides the results and a discussion, drawing on previous studies that have discussed
deep learning. Section 7 presents the overall conclusion of the study, together with some
ideas for future research directions.
2. Research Method
The methodology of this study was based on secondary data and a comprehensive re-
view of approaches linked to agricultural DL, including disease detection, yield prediction,
Agriculture 2023, 13, 540
3 of 22
and weed prediction, using databases such as Research Gate, IEEE Explore, Springer, Else-
vier, Google Scholar, Frontier, and Science Direct. For this study, research papers published
between 2016 and early 2022 were considered due to the increasing advancements in DL
and its increasing use in agriculture. Additionally, the emphasis for data collection was on
journal articles and conference papers. The inclusion criteria for research papers were that
they were available in English with full access and were relevant to the research objectives
with themes including development and agriculture. Studies that were published before
2016 were excluded from this study. The research method ﬂowchart for this study is shown
in Figure 1.
Figure 1. The research methodology.
3. Literature Review
3.1. Deep Learning
Agriculture faces many challenges due to the increase in demand and the presence
of fewer workers in the ﬁelds. In this context, smart farming can be used to address
issues such as food security, sustainability, productivity, and environmental impact [16].
As is known, agriculture plays a vital role in the global economy [17]. This is because
it ensures food security for countries, and most companies rely on it for their external
trade. In the world today, most home appliances, travel means, and other commonly
used services are becoming automated through the adoption of artiﬁcial intelligence (AI);
thus, farming practices should too, since they are the backbone of a country. Achieving
understanding and making quick responses with the help of data provided by continuous
monitoring, measuring, and analysis of different physical aspects and phenomena would be
helpful to overcome the complex, multivariate, and unpredictable challenges of agricultural
ecosystems [18]. This would require the analysis of huge amounts of agricultural data
and the use of new information and communication technologies (ICTs) and would be
necessary for both small-scale farms and large-scale ecosystem monitoring [19]. It could
be achieved using DL with a large network. DL is basically an aspect of machine learning
that aims to build neural networks that can analytically learn by simulating the human
brain. It acts like the human brain in that it works by reading data, such as pictures, videos,
text, and sounds. With its continued development, DL has already been implemented in
various complex tasks, such as image segmentation, image recognition, natural language
processing, object detection, and image classiﬁcation [18]. However, DL requires a huge
dataset since the quality of the DL results entirely depends on the size of the dataset, and
the model tends to learn from that data and then respond accordingly. Some computer and
industrial advancements, such as image processing, IoT technologies, robotics, machine
learning, deep learning, and computer vision, are very useful in the agricultural industry
and even for local farmers. High-quality image processing makes AI based on drone
technology a very helpful asset for farmers, since they can identify the progress of the crops
and determine whether they are ready to harvest or not while sitting in one place rather
than having to move long distances. This has been achieved just AI and a drone system;
one can only imagine how beneﬁcial it would be to implement DL in agriculture [18].
Figure 2 lists numerous advantages of using DL in agriculture. With the current
increase in the population, there has also been an increase in the demand for agricultural
goods [18]. The implementation of DL and other automation components could greatly
beneﬁt production outcomes, reduce the chances of ripening, reduce production costs,
and increase income due to the increased production. Moreover, it would also make
Agriculture 2023, 13, 540
4 of 22
it possible to forecast climatic changes—for instance, if there is an incoming rainstorm,
cyclone, etc.—so that the farmers could be ready and prepare before a disaster.
Figure 2. Deep learning applications in agriculture [18].
3.2. Agriculture before Deep Learning
Traditional agriculture was the main method of farming before the adoption of sci-
entiﬁc advancements in agricultural industries. Traditional agriculture mainly involves
the extensive use of traditional tools and organic fertilizers, indigenous knowledge of land
use and natural resources, cultural beliefs, etc. [19]. Another way to describe it could be
as the “primitive style” or “early style” of farming and food production. The traditional
method of farming affects the environment in many ways, such as through the depletion of
soil nutrients. For instance, slash and burn practices in traditional agriculture were one
reason for decreased soil organic matter. Another problem caused by traditional farming
was deforestation, as most deforestation has taken place in tropical rainforests to make
space for other agricultural activities. Another signiﬁcant issue relating to soil erosion is
the removal of topsoil by water or wind. This topsoil is the most fertile, and it may take
decades to replenish it once it is removed [19].
Agroforestry, crop rotation, intercropping, polycultures, and water harvesting are
some of the most common types of traditional farming practices. The traditional farming
method of constructing grain storage structures provided an incredible moisture-proof
environment for grain storage. Compared to today’s colossal warehouses, these small
structures were cheap to fabricate and maintain. However, many different pesticides were
used to keep the grains safe during storage periods, which later resulted in very bad effects
on the environment [20]. The implementation of technology and the investment of huge
sums of money in agricultural industries have helped to control other diseases, thereby
making the amount of money spent worthwhile.
3.3. Deep Learning Architecture
Several nonlinear transformations are used to model higher-level abstractions in
data, and these are the foundations of DL [21]. One of the main beneﬁts of DL is the
Agriculture 2023, 13, 540
5 of 22
automatic extraction of features from raw data or feature learning. Producing features
from lower-level components yields features in higher-level components [22]. Recurrent
neural networks (RNNs) and CNNs are two types of DL networks that are often used
in agriculture.
3.3.1. Convolutional Neural Networks (CNNs)
The CNN is a type of DL algorithm [23] composed of multiple convolutional layers,
pooling layers, and fully connected layers. Two of the most common applications for CNNs
are the recognition of handwritten characters and image processing. In the domain of
computer vision, CNNs have been used for a variety of tasks, including object detection,
image classiﬁcation, voice recognition, image fragmentation, medical image analysis, and
text and video processing. Convolutional, pooling, and fully connected layers are the
typical architectural components of a CNN [24]. Figure 3 depicts the architecture of a CNN,
and brief descriptions of each layer are provided below.
Figure 3. Convolutional neural network architecture.
In a CNN, the convolutional layer is the most fundamental and signiﬁcant. It stores all
of the images’ distinguishing characteristics while making it possible to limit the amount of
data that must be simultaneously processed. Then, pooling enables a CNN to aggregate all
the different dimensions of an image and recognize the object, even if its form is distorted or
it is positioned at an angle. Thus, the number of learnable features in the model is reduced,
helping to address the overﬁtting issue. Pooling can be accomplished in a variety of ways,
including average pooling, maximum pooling, and stochastic pooling. The fully connected
layer is the ﬁnal layer, which is used to feed the neural network [24].
3.3.2. Recurrent Neural Networks (RNNs)
An RNN is a type of neural network model capable of performing exceptionally
well in fundamental tasks such as machine translation, language modeling, and speech
recognition [25]. Unlike traditional neural networks, RNNs use the network’s sequential
information. This feature is essential in many applications because the data sequence’s
inherent structure contains valuable information that can be extracted from it. Figure 4
depicts the fundamental structure of a recurrent neural network [25].
Figure 4. Recurrent neural network generic structure.
Agriculture 2023, 13, 540
6 of 22
4. Signiﬁcance of Deep Learning in Agriculture
4.1. Counting of Fruit
Counting fruit is an essential task for growers because it makes it possible to estimate
the yield, which can be helpful in the management of yards. According to [26], counting
fruit using automated fruit detection and algorithms can optimize agriculture production
and help in managing the harvest process effectively. For automated fruit counting and
detection, the authors provided a method that uses a pipeline for the DL algorithms
consisting of part 0, part 1, part 2, and part 3. In part 0, the algorithms learn ground
truths. They use the Bob detection neural network in part 1 and count the fruit through the
neural network in part 2. In part 3, the linear regression is run for the ﬁnal count [26]. The
authors of [27] proposed automatic yield estimation using robotic agricultural techniques
to improve the manual counting of fruit. The authors used Inception-ResNet to achieve a
high accuracy ratio with a lower computational cost as a deep simulated learning technique.
The signiﬁcance of the technique proposed in [27] is that it does not require thousands of
images to train the neural networks. Instead, the network can be trained with synthetic
images to test the authenticity of images, achieving an accuracy rate of 91%. This novel
DL method can facilitate farmers’ abilities to efﬁciently count fruit and make decisions
with great precision [27]. Similarly, the authors of [28] trained a Fast R-CNN DL model
to detect, count, and predict the right size for citrus fruit. The authors also used the long
short-term memory detection method to calculate the number of fruit on each tree, as
shown in Figure 5. Hence, DL methods, such as automated yield detection, DL simulation,
and Fast R-CNN, can be helpful in the counting of fruit. Table 1 presents the most recent
methods for counting fruits.
Figure 5. Flowchart for Faster R-CNN [28].
Agriculture 2023, 13, 540
7 of 22
Table 1. Summary of different DL methods for counting fruit.
Ref
DL model
Dataset
Accuracy
[29]
Faster R-CNN
TL + ﬁeld farm
0.83 F1-score
[30]
Inception-ResNet-v4
ILSVRC-2010&2012
N/A
[31]
VGG-16
Orchard
95%
[32]
CNN
Kiwifruit
89.29%
[33]
YOLO V3
PT + WGISD
—
[34]
Faster R-CNN + Iv2
Cherries
85%
[35]
E-Net
Fruit 360
93.7%
[36]
8-layer CNN model
Self collecting
95.67%
[37]
M-Net
Mango orchard
73.6%
[38]
YOLO V3
PT + WGISD
97.3% for test
4.2. Management of Water
Water is an essential natural resource for agriculture that needs recycling for the
continued and sustainable development of agriculture. The authors of [39] stated that
water is essential for agriculture production but the chemicals from industries and the
wastewater from daily usage increase water pollution. Therefore, the agriculture ﬁeld
needs a DL technique to protect agriculture from water pollution. The authors of [39]
proposed a near-infrared (NIR) spectroscopy method that can be used to assess water
demand, protection, and recycling. The NIR system is used as one layer along with an
improved convolutional neural network (CNN) layer that employs decision tree analysis
to depict informative data helpful for making decisions relevant to water management.
The authors of [40] posited that agriculture is the backbone of the economy in India and
requires water as a signiﬁcant resource. Traditional irrigation methods waste water due to
excessive water use and unplanned water management. Therefore, the authors provided
an integrative approach that uses DL methods to improve the irrigation system in India’s
agriculture (see Figure 6). The system consists of sensors that detect the soil’s humidity
and predict the irrigation needs of the soil. The authors of [41] stated that water is a critical
resource for which evapotranspiration assessment is very beneﬁcial. Evapotranspiration
assessment uses DL techniques to predict upcoming water needs and to provide clues that
can be helpful for real-time irrigation management. Thus, DL techniques can help farmers
precisely manage their irrigation systems.
Figure 6. Deep learning approach for water management [40].
Agriculture 2023, 13, 540
8 of 22
4.3. Crop Management
The signiﬁcance of DL frameworks is increasing in crop management, a subﬁeld of
agriculture. The authors of [42] asserted that DL technology is beneﬁcial for crop planting.
Crop planting is the ﬁrst step in crop production and needs to be managed efﬁciently to
increase crop production. The authors discussed the various DL crop planting techniques,
including ViSeed, which has been used for soybean production; Fast R-CNN, which has
been used to count and measure the stalks of sorghum plants; CNN, which has been used
for the identiﬁcation of localized features of roots and shoots; and VGG-16, which has
been used for categorization of crops and weeds. According to the authors of [43], there
are different types of deep learning networks that can be used for crop prediction. These
different types include ANNs, for which the regression method and crop species and images
and climatic and soil properties can be used to predict wheat, barley, sugarcane, sunﬂower,
and potato crop production. Other DL techniques discussed in [43] include two-layered
DNN LSTM, which has been used to predict tomato, soybean, and corn crop production
using the regression method, a vegetative index, environmental characteristics, and soil.
In addition, the authors of [44] stated that intelligence plays a crucial role in precisely
managing crops. The authors introduced the CropDeep approach, which classiﬁes and
detects different classes of crops. CropDeep provides crop management services through
cameras and models; it classiﬁes crops and provides analysis that is helpful for decision
making and includes real-world challenges; e.g., weather uncertainty (see Figure 7). Table 2
presents the most recent methods for crop management.
Figure 7. CropDeep deep-learning detection and classiﬁcation models [44].
Table 2. Summary of different DL methods for crop management.
Ref
DL Model
Application
Accuracy
[45,46]
FCN architecture/Stem-seg-S
Joint stem detection and
crop/weed classiﬁcation
mAP, 85.4% (stem detection)
69.7% (segmentation)
[47]
AgroAVNET
Crop/weed classiﬁcation
98.23%
[48]
AlexNet, VGG-19, GoogLeNet,
ResNet-50, ResNet-101,
Inception-v3
Crop/weed classiﬁcation
96% (VGG-19)
[49]
1D/2D/3D CNN
Crop mapping
94% (3D CNN)
4.4. Soil Management
Soil management refers to the practices, operations, and treatments that protect soil
and increase an agricultural ﬁeld’s production. The authors of [50] stated that DL techniques
can help manage soil moisture. According to the authors, developing a mathematical model
Agriculture 2023, 13, 540
9 of 22
is difﬁcult for soil moisture, so the accuracy, predictions, and generalization of existing
models could be improved. The authors improved the DL regression model by ﬁtting it
with large datasets, making it possible to precisely determine soil moisture.
The authors of [51] proposed that agriculture has been an essential aspect of the lives of
human beings since even before civilization. Soil yield plays a key role in crop production
and efﬁcient agriculture. Therefore, the authors discussed how implementing the Keras
API in Python can help protect soil from herbicide toxicity while also retaining moisture.
Moreover, using a ﬁrst-order agriculture simulator that employs discrete time, the Richard
equation can help determine the precise moisture level in soil [52]. The authors explained
that using an agriculture simulator can help in obtaining aerial images with a particular soil
moisture information dataset. The dataset was analyzed using seven methods, including
constant prediction baseline, SVM, and NN, which showed that using a CNN could reduce
water consumption by 52% [52]. Thus, the authors showed that DL techniques can help
maintain soil moisture.
4.5. Weed Detection
Weeds are undesirable plants that can reduce crop production. DL techniques can
help detect weeds. According to [51], a “weed” is a plant that grows in an unfavorable
environment. They have negative effects on crop production because they compete with
plants for water, sunlight, and soil minerals. Weed detection can be undertaken by using
DL techniques, such as ﬁrst-order agriculture simulation with Richard’s equation. This
approach reduces the use of weedicides, thus protecting the soil from toxicity and ensuring
the plants achieve suitable production yields. In addition, the authors of [53] raised the
concern that the production and utilization of herbicides have made weeds resistant to
these herbicides. Therefore, developing precision techniques to detect weeds is important
to increase crop production. Researchers have discussed the revolution in computing
technology and how it can help in better understanding weed biology and ecology. DL is
the most helpful technique, as it aids in categorizing weeds in crop categories and getting
rid of them. In a similar context, the authors of [54] found that DL techniques, such as
classiﬁcation SVMs and CNNs, can reduce the burden on farmers. The techniques can help
farmers detect weeds. The authors described various weed detection and categorization
techniques. In such techniques, the camera ﬁrst takes images of weeds and then uses a gray-
level occurrence matrix to identify homogeneity among the images. The color identiﬁed
through the hue saturation value (HSV) describes the mellowness of the weeds, as shown
in Figure 8. Hence, DL techniques are helpful for weed detection, reducing the burden on
farmers and increasing crop yield.
4.6. Seed Classiﬁcation
In the agriculture sector, crop production strongly relies on seeds. According to [55],
seeds are a signiﬁcant part of crop production, without which production and harvesting
of crops are impossible. The increased level of population growth has put pressure on
agriculture growth due to the precision needed when identifying and classifying seeds.
The authors proposed a CNN to increase the efﬁciency of the classiﬁcation of seeds. In this
technique, the methods used included decayed learning points.
4.7. Classiﬁcation of Plant Diseases
Plants can produce decreased crop yields due to the presence of fungi, microbes, and
bacteria. If the disease is not diagnosed in time, it can cause signiﬁcant economic losses
for farmers. The pathogen-killing pesticides that are used to restore crop functionality
and remove pests come at a high cost. Excessive use of pesticides is detrimental to the
environment and can disrupt the water and soil cycles [56]. As plant diseases stunt growth,
identifying them in their early stages is essential. DL models have been applied in the
process of recognizing and categorizing various plant diseases. Several DL architectures
have been proposed to improve detection accuracy [57]. In [58], the authors proposed a
Agriculture 2023, 13, 540
10 of 22
method for identifying and categorizing banana diseases based on a CNN. The proposed
model processes pictures of leaves to help farmers detect two banana diseases (sigatoka
and speckle) quickly. In addition, the authors of [59] used AlexNet to accurately classify
plant diseases based on leaf images. The DL hybrid model described in [60] identiﬁed
and categorized diseases that affect sunﬂowers, such as Verticillium wilt, Phoma rot,
downy mildew, and Alternaria leaf rot. The authors of [61] developed a mobile app that
utilizes machine learning to diagnose diseases that affect plant leaves. The app can classify
38 different diseases. The authors amassed 96,206 images, including both healthy and
diseased plant leaf specimens, for training, testing, and validation of the model. In [62], the
authors proposed a pre-trained, transfer-learning deep neural network model that could
predict crop disease by learning leaf characteristics from input data. They extensively
investigated different DL and CNN topologies, such as ResNet, MobileNet, Wide ResNet,
and DenseNet. The result showed that the proposed method was superior in terms of
accuracy and memory to previous methods in the literature. Another CNN-based method
for detecting, classifying, and identifying plant diseases was proposed in [63]. The accuracy
for the identiﬁcation of 13 different plant diseases ranged from 91 to 98%. Furthermore, the
proposed model was able to distinguish between unhealthy and healthy leaves, as well as
their backgrounds. Using 500 different leaf images, the authors of [64] proposed a model
based on an SVM classiﬁer. The proposed model could accurately identify plant diseases,
achieving an accuracy of 94%. Table 3 presents the most recent methods for classifying
plant diseases.
Figure 8. Flowchart for weed detection and classiﬁcation [54].
Agriculture 2023, 13, 540
11 of 22
Table 3. Summary of different DL methods for classifying plant diseases.
Ref.
Leaf Type
Method
Accuracy
[65]
Rice
VGGNet
92.00
[66]
Tomato
S-CNN and F-CNN
98.30
[67]
Plant leaf
EfﬁcientNet
96.18
[68]
Grape
Hy-CNN
98.70
[69]
Grape
United model
98.20
[70]
Plant leaf
Whale and DL
95.10
[71]
Crop
FCNN and SCNN
92.01
[72]
Coffee
Deep CNN
98.00
4.8. Yield Prediction
It is essential to focus on and carefully manage yield predictions for each crop. Agri-
cultural machine-learning and DL algorithms are primarily concerned with crop yield
prediction. They inform the farmer about whether the crop is ready for cultivation and
predict when it will be [73]. Manjula et al. [74] proposed a model based on an RF classiﬁer
that could predict millet crop yield with an accuracy of 99.74%. The prediction of crop
yield is notoriously difﬁcult due to the presence of numerous complex factors. For example,
high-dimensional marker data are required to represent genotype information, consisting
of the data for millions of markers for each individual plant. The ﬁnal effect of the genetic
markers must be estimated because it is affected by numerous environmental conditions
and ﬁeld management techniques. Recently, a variety of machine-learning models, includ-
ing association rule mining, ANNs, decision trees, and multivariate regression, have been
applied in the ﬁeld of crop yield prediction. The most notable characteristic of ML and DL
may be that the output is treated as an implicit function of the input variables and may be
a highly nonlinear and complex function [75].
Extensive research has been conducted on crop yield prediction. Liu et al. [76] em-
ployed a neural network with one hidden layer for the prediction of corn yield using input
data on weather, soil, and management. In the same context, Drummond et al. [76] worked
on predicting crop yield by using neural networks, projection pursuit regression, and
stepwise multiple linear regression. As a result, they found that both regression methods
were outperformed by the neural network method. In addition, Marko et al. [76] predicted
the crop yields of different soybean varieties by using weighted histogram regression. They
obtained better performance than the conventional regression algorithms.
4.9. Disease Detection
In the agricultural ﬁeld, one major threat to farmers is crop disease. With the devel-
opments in the ﬁelds of AI and DL and their implementation in agricultural industries,
crop disease detection has become one of the easiest processes. Before the adoption of
advanced technology in agriculture, the detection of diseases in crops at an early stage was
a time-consuming and tedious task that had to be performed manually [77]. Plant disease
not only affects plant growth and the population but also seriously affects the economy
of countries. Hence, it is essential to adopt automatic and accurate techniques for the
prediction and detection of plant disease severity for disease management and food safety
and to predict losses in returns. In most developing countries, farmers are usually required
to travel huge distances to contact experts, which can consume huge amounts of money
and time [76]. This could be handled by developing a robust and easy-to-use plant or crop
disease detection system, which would require many sample images of crops that have
diseases that could be uploaded to the cloud, and the system could run on IoT devices, such
as smartphones and tablet PCs with appropriate computational capabilities. Some work
has been done in order to tackle this issue of crop diseases. Nikhil Patil et al. [78] proposed
Agriculture 2023, 13, 540
12 of 22
a crop disease detection system using a CNN. The system achieved an accuracy rate of 89%
compared to the traditional crop disease detection system. Hence, when it comes to image
processing, CNN systems can be relied upon due to the fact that they are widely used in
agricultural research. Most DL applications in agriculture can be categorized as plant or
crop classiﬁcation, which is important for disaster monitoring, robotic harvesting, pest
control, and yield prediction. Plant and crop disease recognition models are mostly based
on pattern recognition and leaf images [78]. Hence, DL and AI models could automatically
determine which plants are diseased and send alerts to the farmer for early action. Figure 9
shows an example of how DL and AI can detect plant diseases.
Figure 9. Plant disease detection [79].
5. Application of Deep-Learning Models in Agriculture
According to [80], there are different points of view about the creation of DL tools
for model development. Python tools are used to emphasize the concept of saliency in
images. Saliency is typically deﬁned by unique features, including pixels, or the resolution
of the image in visual processing. Another DL tool is the gradient explanation technique,
which employs the gradient-based attribution method. In this method, each gradient
quantiﬁes each of the input dimensions that can change the predictions around the input.
The integrated gradient is a gradient-based attribution that allows predictions to be formed
by a deep neural network. It is created via attributions related to the network’s input
features [81]. Deep label-speciﬁc feature (DeepLIFT) is another tool designed to ensure
the accuracy of deep neural network predictions. It is also known as the gradient + input
method, and it is used to enhance the gradient with the input signal. It has quite a few
advantages over gradient-based methods, especially when it is implemented into models
that are usually trained with natural images and genomics data [82]. Typically, activation
of each neuron takes place with reference to the contribution scores calculated by the
system. These calculations are based on comparisons between various outputs and a
certain benchmarked output and the differences in the inputs from their reference inputs.
Another model is guided backpropagation, also known as guided saliency, which is a
type of deconvolution approach. This tool and approach is often employed in a range of
network structures, such as in max pooling in CNNs [83]. The purpose is to substitute the
max-pooling layers with a convolutional layer. Similarly, the authors of [84] claim that
deconvolution is a technique for visualizing CNNs that uses quite similar aspects, such as
deconvolutional networks. Furthermore, the authors of [85] proposed class activation maps
(CAMs) for the identiﬁcation of images. With this tool, analysts may inspect a particular
image and then its speciﬁc parts or pixels are used to form the ﬁnal output. In other
Agriculture 2023, 13, 540
13 of 22
words, CAMs are used to study the discriminative regions of an image, as with a CNN. A
ﬁnal softmax-loss layer is formed after obtaining the weighted sum of the vector. Finally,
layer-wise relevance propagation (LRP) is a tool for decomposing nonlinear classiﬁers that
aims to improve DL interpretability [86]. It is based on deep neural networks formed by
propagating predictions backward, fulﬁlling the requirement for the conservation property.
All the abovementioned DL tools are currently available for model development.
According to [87], the deep neural network (DNN) can be employed using a CNN for
the assessment of the quality of seeds in agriculture. The model can be used to study the
quality of seeds in soybean pods, along with the sorting of haploid seeds. Assessments
of the shape, phenotypic expression, and embryonic pose are undertaken [88]. CNNs
have also been used in the classiﬁcation plant seedlings into 12 species. Furthermore, the
authors of [89] used an image analysis technique to create a principal component analysis
(PCA) that can be used to place seeds in different clusters in a cost- and time-effective
manner. The authors of [90] claimed that DL algorithms, such as Inspection-v3, VGG-16,
and VGG-19, are more efﬁcient in citrus plant disease detection than other innovations.
In [91], the authors claimed that DL methods aid in the identiﬁcation of plant diseases
from individual lesions and spots. This makes it possible to focus on other aspects rather
than only considering the entire leaf in disease detection. This DL application is good
at detecting multiple diseases on the same leaf and provides 12% greater accuracy. DL
methods can also be used to identify various plant diseases [92]. The authors of [93]
claimed that apple leaf and fruit diseases can be detected using a CNN model, implying
that the use of DL models for disease detection is quite effective. There are also harvesting
techniques that use DL. The authors of [94] formed a shot-detector (YOLO) algorithm for
on-tree fruit detection and used the BBox-Label-Tool to label images. Likewise, two deep
learning models were utilized for images of pears and apples fruits, and it was found that
the deep learning models were quite effective for harvesting purposes. The authors of [95]
revealed that having a robust DL model can be helpful in the harvesting process, as it
showed promising results due to its employment of bio-inspired features. As shown by
these studies, DL is becoming one of the most useful techniques and models in harvesting
since it employs mature features in comparison to other agricultural techniques. This recent
survey also shows that CNNs have promising results in agriculture and increase efﬁciency.
In other words, CNNs have increased accuracy and improved learning capacities when DL
mechanisms are employed in agriculture.
6. Results and Discussions
The ﬁndings from the studies show that DL mechanisms have helped farmers in
different areas of agricultural production. These include counting fruit, management
of water, crop management, soil management, weed detection, seed classiﬁcation, yield
prediction, disease detection, and even harvesting. A summary of the key ﬁndings is
presented in Table 4.
Table 4. Summary of different DL methods used in agriculture.
Ref
Method Used
Purpose of Employing Method
Key Insights
[20]
Automated fruit detection and
algorithms using a DL algorithm
pipeline consisting of part 0, part 1,
part 2, and part 3
Counting fruit
Optimization of agriculture production
Promising harvesting results
[27]
Inception-ResNet
Counting fruit
Provides high accuracy in the counting of fruit
Uses synthetic images to test authentic images,
achieving a 91% accuracy rate
[26]
Near-infrared (NIR) spectroscopy
Management of water
Increased water protection and recycling
Provides information that helps make effective
decisions in water management
Agriculture 2023, 13, 540
14 of 22
Table 4. Cont.
Ref
Method Used
Purpose of Employing Method
Key Insights
[41]
Evapotranspiration
Management of water
Allows the prediction of water speciﬁcations
for real-time irrigation management
[42]
R-CNN for counting and measuring
crop plantings
Crop management
The CNN helps in identifying localized
features of roots and shoots
CGG-16 allows categorization of crops
and weeds
[43]
Two-layered DNN LSTM
Crop management
Highlights soil and environmental
characteristics
Prominent vegetative index used to create
estimations of crop production for tomato,
soybean, and corn
[51]
Keras API through Python
Soil management
Helps in preventing the harmful effects of
herbicides and toxicity in soil and
in retaining moisture
[52]
First-order agriculture simulator using
discrete time
Soil management
Improves aerial images and provides soil
moisture information
[51]
First-order agriculture simulation
with Richard equation
Weed detection
Increases protection of soil from toxicity and
ensures plants achieve good production yields
[54]
SVM and CNN
Weed detection
The camera is used to take an image of a weed,
and then the gray-level occurrence matrix is
employed to determine the homogeneity
among the images
Reduces burden on farmers
[55]
CNN
Seed classiﬁcation
Increased efﬁciency in seed classiﬁcation
[74]
Random forest (RF)
Yield prediction
Provides the best yield prediction accuracy
[76]
Histogram regression
Yield prediction
Offers accuracy in the determination of
soybean varieties
[78]
CNN
Disease detection
Achieved an 89% accuracy rate when
compared to other traditional crop disease
detection methods
Improves pest control and makes robotic
harvesting possible with increased yield
prediction and disaster monitoring
abilities for crops
[95]
Bio-inspired methods
Harvesting
Increases harvesting efﬁciency
Improves accuracy for harvesting in
agriculture
[96]
Canopy-attention-YOLOv4
Fruit detection
Precision = 94.89%
Recall = 90.08%
F1 = 92.52%
[97]
YOLOv5-CS (citrus sort)
Fruit detection and
counting
Recall = 97.66%
Precision = 86.97%
mAP = 98.23%
The key ﬁndings from the literature review show that there are various ways in which
DL has beneﬁted the agriculture industry. Agriculture faces numerous barriers as a result of
increased demand and fewer workers in the sector. However, the implementation of smart
farming can help address issues such as productivity, environmental impact, food security,
and sustainability and increase the efﬁciency of agricultural production [16]. Agriculture,
as is well-known, plays an important part in the global economy [17] as it ensures food
security for regions and is used by the majority of businesses for external commerce. The
implementation of deep-learning methods has helped the agricultural sector grow and
develop, employing the latest prediction analyses and tools. There are various tools that
have been used by scholars to prove the efﬁciency of deep-learning methods in agriculture.
According to [18], the size of the dataset used for deep-learning methods may determine
the quality of the results. The accuracy of the results obtained using deep learning in
agricultural production and processes may lead to improved decisions. Traditional farming
Agriculture 2023, 13, 540
15 of 22
practices result in a wide range of environmental consequences, including soil nutrient
depletion. Deforestation is another issue produced by traditional farming, as most defor-
estation has occurred in tropical rainforests to make room for other agricultural activities.
Soil erosion, which occurs as a result of the erosion of topsoil by water or wind, is another
issue associated with traditional farming. This topsoil is the most productive portion of the
soil and, once removed, it can take decades to restore it [19]. This implies that traditional
agricultural production methods are insufﬁcient to promote the efﬁciency of the sector.
Agriculture must become more brilliant and progressive in order to meet future demands
and utilize emerging technologies, such as deep learning, remote sensors, and distributed
computing [98]. The current study’s key ﬁndings highlight that the use of various DL tools
in agriculture has improved farming outcomes and production. According to [95], the
real parameters for agriculture are now obtained through cutting-edge technology and DL
mechanisms. DL methods have proven their ability to increase efﬁciency in agriculture,
showing improved results and accuracy in all domains. Despite the employment of DL
mechanisms in agriculture, it was identiﬁed that there are also certain challenges that
accompany the use of this technology, such as dataset creation, the time required to train
staff, and having skilled labor to increase production. Furthermore, system development
and hardware maintenance, as well as the deployment of large models and software on
small devices, such as mobile phones, may have an impact on system efﬁciency [99]. More-
over, developing awareness among staff members when DL methods are employed is
also challenging in agriculture. According to [100], transfer learning is a technique that
can be employed to minimize the emerging challenges that may arise when employing
deep learning in agriculture. It is typically used to address problems when there is a
small dataset and minimal time is required to test the accuracy of the model. As shown
in [101,102], AI is useful to minimize the challenges affecting agricultural production when
DL and robotics are used. In the same context, automated machine learning (AutoML) is
another technique that helps increase agriculture production through innovation. When
DL methods are employed in agricultural production mechanisms, AutoML can be use-
ful to minimize the challenges. Thus, the literature shows that DL methods have been
extremely useful in increasing production in the agricultural sector. However, in order
to minimize the challenges that come with employing DL techniques, it is important to
consider employing other emerging technologies, such as robotics, the Internet of Things,
and distributed computing.
It was found that most DL-based farming techniques use very simple algorithms and
network structures. The primary cause of this is that the combination of deep learning and
precision agriculture is still in its infancy. The lack of collaboration between the computer-
science and agriculture communities is also a contributing factor. Table 1 shows that many
of the deep-learning algorithms tested had an accuracy of 90% or more with some datasets,
but it should be noted that these results are not generalizable. The accuracy and speed
of these networks typically fall short of the benchmarks when they are employed with
other datasets or a real farmland environment. This is mainly due to the fact that the
complexity, quality, and quantities of agricultural datasets are still very different from
actual farmland environments. Many novel approaches have been proposed to lessen
the reliance of DL models on agricultural datasets, including transfer learning [103,104],
few-shot learning [105,106], graph convolutional networks [107], and semi-supervised
learning [108]. However, their entire performances are still unavailable. Only a few
recent studies have focused on tailoring deep-learning algorithms and neural network
architectures to the needs of agricultural applications. Some studies, for instance, have
aimed to ﬁnd the most effective ways to optimize the parameters used in DL models.
Enhancing DL algorithms and frameworks has been the focus of other research. With the
aim of large-scale dense semantic segmentation of weeds using aerial images, the authors
of [109,110] presented WeedMap and WeedNet. They made changes to the decoder that
allowed them to use a modiﬁed version of the VGG16 architecture in place of the original
encoder. Jiao et al. [111] created an anchor-free convolutional neural network (AF-RCNN)
Agriculture 2023, 13, 540
16 of 22
to achieve a balance between speed and accuracy in deep-learning algorithms applied
to the detection of multiclass agricultural pests. To improve recognition accuracy in leaf
disease detection, the authors of [112] utilized convolutional neural networks (CNNs) and
pre-trained models to identify plant diseases. The study focused on ﬁne-tuning popular
pre-trained models, such as DenseNet-121, ResNet-50, VGG-16, and Inception V4, using
the PlantVillage dataset, which contains 54,305 images of plant diseases in 38 classes. The
performance of the models was evaluated through various metrics. The results showed that
DenseNet-121 achieved the highest classiﬁcation accuracy of 99.81%, outperforming other
state-of-the-art models. In the same context, the authors of [113] proposed a new method for
data augmentation utilizing generative adversarial networks (GANs) for tomato leaf disease
recognition. By utilizing deep convolutional generative adversarial networks (DCGANs) to
augment the original images and GoogLeNet as the input, the proposed model was able to
achieve the top average identiﬁcation accuracy of 94.33%. The model was further improved
by adjusting the hyper-parameters, modifying the architecture of the convolutional neural
networks, and experimenting with different GANs. The use of DCGAN to augment
the dataset not only increased its size but also improved its diversity, leading to better
generalization of the recognition model. In addition, the authors of [114] proposed the use
of a deep convolutional generative adversarial network (DCGAN) to augment an original
dataset and trained a convolutional neural network (CNN) in the task of regression by
utilizing the DCGAN to generate synthetic images that were realistic enough to be included
in the training set. They employed a two-stage scheme where the baseline CNN, trained
with the original dataset, was utilized to predict the regression vectors for each image
generated by the DCGAN. These regression vectors served as the ground truth for the
augmented dataset, enabling the CNN to make more accurate predictions.
7. Future Challenges and Opportunities in the Agricultural Domain
Deep learning has the potential to revolutionize the agricultural industry by enabling
more efﬁcient crop production, precision agriculture, and improved crop monitoring and
forecasting. However, there are several challenges that need to be addressed to fully
realize the potential of deep learning in agriculture. One major challenge is the lack of
high-quality labeled data in the ﬁeld of agriculture. This can be addressed by developing
new data collection methods and creating large labeled datasets that can be used to train
deep-learning models [114]. Another challenge is the high computational cost associated
with deep learning, which can make it difﬁcult to implement these models in resource-
constrained environments, such as rural areas [115].
Additionally, there is a need for deep-learning models in agriculture to attain robust-
ness and adaptability to different environments, crop types, imaging conditions, and sensor
modalities. This requires the development of models that can be generalized well across
different scenarios and are robust to variations in the data [116,117]. Furthermore, as the
data in the agricultural domain is often incomplete, noisy, or corrupted, there is a need for
methods that can handle missing or incomplete data [118]. In recent years, research on
robust deep-learning techniques, such as robust optimization, adversarial training [118],
and meta-learning [119,120], has been undertaken to address this challenge, but more
research is still needed in this area.
Another important challenge is the need for deep-learning models in agriculture
to be interpretable and explainable, as this is essential for decision making and to gain
trust from stakeholders. There is a growing interest in developing methods that can
provide insight into the inner workings of deep-learning models, such as explainable AI
techniques—for instance, Local Interpretable Model-Agnostic Explanations (LIME) [121]
and Shapley Additive Explanations (SHAP) [122]—and interpretable deep learning—for
instance, decision trees and rule-based systems [123]. Moreover, the integration of multiple
modalities of data, such as image, sensor, and weather data, is crucial to improving the
performance of deep-learning models in agriculture. There is a need for multistream neural
Agriculture 2023, 13, 540
17 of 22
networks, such as those based on attention [124], that can handle multiple modalities of
data and provide a more comprehensive understanding of the agricultural system.
Few-shot learning is a form of machine learning that allows models to be generalized to
previously unseen classes with a small number of examples. This is beneﬁcial in agriculture,
as it allows such models to learn more quickly and accurately from a limited amount of
data. Furthermore, it is more data-efﬁcient, meaning that fewer data points are required to
train the model [125].
In conclusion, deep learning has the potential to revolutionize the agricultural industry,
but there are several areas that need to be addressed to fully realize its potential. These
include the need for robustness, interpretability, integration of multiple modalities of data,
and few-shot learning. Further research in these areas is crucial to overcoming these
challenges and fully harnessing the power of deep learning in agriculture.
8. Conclusions and Future Work
The primary aim of the present study was to provide an overview of the recent ad-
vancements linked to DL in the agricultural sector. This study employed a comprehensive
review of approaches linked to agricultural DL, including disease detection, yield predic-
tion, and weed prediction, in studies published between 2016 and early 2022. The key
ﬁndings of this paper indicated that a range of DL tools, employed for counting fruit,
managing water, crop management, soil management, weed detection, seed classiﬁcation,
yield prediction, disease detection, and even harvesting, have been identiﬁed. It was also
revealed that, despite the employment of DL processes in agriculture, there are certain
obstacles that come with the use of this technology. It involves difﬁculties such as the
compilation of datasets, the time necessary for staff training, and the presence of DL experts
to ensure high production. Furthermore, system development and hardware requirements,
as well as the deployment of large models and software on small devices, such as smart-
phones, may have impacts on system efﬁciency. Thus, it can be concluded that, with the
support of the most recent prediction analyses and tools, the application of DL methods
has assisted the agriculture industry in growing and developing. It can be noted that DL
has great potential in the ﬁeld of agriculture. However, the high cost of hardware and
software makes its application very limited. Therefore, there is a need to work on research
and development around cost-effective DL methods in the future to enhance large-scale
applications. Furthermore, DL methods are limited in terms of accuracy and effectiveness.
Thus, more research is needed in this direction to enhance the accuracy and effectiveness of
DL methods.
The availability of computational capacity is yet another barrier that inhibits the
implementation of DL in agriculture. The training of models necessitates ever-increasing
amounts of computing resources due to the growing number of datasets, as well as the
increasing complexity of deep-learning neural networks. It is very important that the
performance of graphics processing units (GPUs) and central processing units (CPUs)
continues to improve, as this is a very important accelerator for the widespread popularity
of deep learning. In addition, the development of DL has been sped up by the availability of
cloud computing services, such as the Google Cloud Platform, offered by private businesses.
However, because of stringent requirements regarding computation capacity, current uses
of DL in agriculture are typically ofﬂine. This means that the collection and analysis of
images of farmland is undertaken in an asynchronous manner. Consequently, companies
have paid some attention to this issue.
Funding: This research received no external funding.
Data Availability Statement: The data used are included within the manuscript.
Conﬂicts of Interest: The author declares no conﬂict of interest.
Agriculture 2023, 13, 540
18 of 22
References
1.
Santos, L.; Santos, F.; Mendes, J.; Costa, P.; Lima, J.; Reis, R.; Shinde, P. Path planning aware of robot’s center of mass for steep
slope vineyards. Robotica 2020, 38, 684–698. [CrossRef]
2.
Patil, K.A.; Kale, N.R. A model for smart agriculture using IoT. In Proceedings of the 2016 International Conference on Global
Trends in Signal Processing, Information Computing and Communication (ICGTSPICC), Jalgaon, India, 22–24 December 2016;
pp. 543–545.
3.
Atzberger, C. Advances in remote sensing of agriculture: Context description, existing operational monitoring systems and major
information needs. Remote Sens. 2013, 5, 949–981. [CrossRef]
4.
Santos, L.; Ferraz, N.; dos Santos, F.N.; Mendes, J.; Morais, R.; Costa, P.; Reis, R. Path planning aware of soil compaction for steep
slope vineyards. In Proceedings of the 2018 IEEE International Conference on Autonomous Robot Systems and Competitions
(ICARSC), Torres Vedras, Portugal, 25–27 April 2018. [CrossRef]
5.
Dhanaraju, M.; Chenniappan, P.; Ramalingam, K.; Pazhanivelan, S.; Kaliaperumal, R. Smart Farming: Internet of Things
(IoT)-Based Sustainable Agriculture. Agriculture 2022, 12, 1745. [CrossRef]
6.
Walter, A.; Finger, R.; Huber, R.; Buchmann, N. Opinion: Smart farming is key to developing sustainable agriculture. Proc. Natl.
Acad. Sci. USA 2017, 114, 6148–6150. [CrossRef] [PubMed]
7.
Schmidhuber, J. Deep learning in neural networks: An overview. Neural Netw. 2015, 61, 85–117. [CrossRef] [PubMed]
8.
Kamilaris, A.; Prenafeta-Boldú, F.X. A review of the use of convolutional neural networks in agriculture. J. Agric. Sci. 2018, 156,
312–322. [CrossRef]
9.
Bouguettaya, A.; Zarzour, H.; Kechida, A.; Taberkit, A.M. A survey on deep learning-based identiﬁcation of plant and crop
diseases from UAV-based aerial images. In Cluster Computing; Springer Science and Business Media LLC: Berlin/Heidelberg,
Germany, 2022. [CrossRef]
10.
Khan, A.; Vibhute, A.D.; Mali, S.; Patil, C.H. A systematic review on hyperspectral imaging technology with a machine and deep
learning methodology for agricultural applications. In Ecological Informatics; Elsevier BV: Amsterdam, The Netherlands, 2022;
Volume 69, p. 101678.
11.
Kashyap, P. Machine Learning for Decision-Makers: Cognitive Computing Fundamentals for Better Decision Making; Apress: Bangalore,
India, 2017; pp. 227–228.
12.
Magomadov, V.S. Deep Plearning and its role in smart agriculture. J. Phys. Conf. Ser. 2019, 1399, 044109. [CrossRef]
13.
Graves, A.; Schmidhuber, J. Framewise phoneme classiﬁcation with bidirectional LSTM and other neural network architectures.
Neural Netw. 2005, 18, 602–610. [CrossRef]
14.
Jain, A.; Zamir, A.R.; Savarese, S.; Saxena, A. Structural-run: Deep learning on Spatio-temporal graphs. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recognition, Las Vegas, NV, USA, 27–30 June 2016; pp. 5308–5317.
15.
Ren, C.; Kim, D.K.; Jeong, D. A survey of deep learning in agriculture: Techniques and their applications. J. Inf. Process. Syst.
2020, 16, 1015–1033.
16.
Santos, L.; Santos, F.N.; Oliveira, P.M.; Shinde, P. Deep learning applications in agriculture: A short review. In Proceedings of
the Fourth Iberian Robotics Conference: Advances in Robotics, Robot 2019: Porto, Portugal, 20–22 November 2019; Silva, M.F.,
Lima, J.L., Reis, L.P., Sanfeliu, A., Tardioli, D., Eds.; Springer: Cham, Switzerland; pp. 139–151. Available online: https:
//doi.org/10.1007/978-3-030-35990-4_12 (accessed on 23 February 2022). [CrossRef]
17.
Kamilaris, A.; Prenafeta-Boldú, F.X. Deep learning in agriculture: A survey. Comput. Electron. Agric. 2018, 147, 70–90. Available
online: https://doi.org/10.1016/j.compag.2018.02.016 (accessed on 23 February 2022). [CrossRef]
18.
Thai-Nghe, N.; Tri, N.T.; Hoa, N.H. Deep Learning for Rice Leaf Disease Detection in Smart Agriculture. In Artiﬁcial Intelligence in
Data and Big Data Processing; Springer International Publishing: Berlin/Heidelberg, Germany, 2022; pp. 659–670.
19.
Traditional Agriculture: An Efﬁcient and Sustainable Farming Method. Stories.pinduoduo-global.com. 2021. Available online:
https://stories.pinduoduo-global.com/agritech-hub/traditionalagriculture#:~:text=Traditional%20agriculture%20can%20be%
20deﬁned,cultural%20beliefs%20of%20the%20farmers (accessed on 23 February 2022).
20.
Shaila, M.; Begum, N. Ancient farming methods of seed storage and pest management practices in India—A review. Plant Arch.
2021, 21, 499–509.
21.
Dargan, S.; Kumar, M.; Ayyagari, M.R.; Kumar, G. A survey of deep learning and its applications: A new paradigm to machine
learning. Arch. Comput. Methods Eng. 2020, 27, 1071–1092. [CrossRef]
22.
LeCun, Y.; Bengio, Y.; Hinton, G. Deep learning. Nature 2015, 521, 436–444. [CrossRef] [PubMed]
23.
Abdullahi, H.S.; Sheriff, R.; Mahieddine, F. Convolution neural network in precision agriculture for plant image recognition and
classiﬁcation. In 2017 Seventh International Conference on Innovative Computing Technology (INTECH), Luton, UK, 16–18 August 2017;
IEEE: Piscataway, NJ, USA, 2017; Volume 10, pp. 256–272.
24.
Ajit, A.; Acharya, K.; Samanta, A. A review of convolutional neural networks. In Proceedings of the 2020 International Conference
on Emerging Trends in Information Technology and Engineering (ic-ETITE), Vellore, India, 24–25 February 2020.
25.
Zaremba, W.; Sutskever, I.; Vinyals, O. Recurrent neural network regularization. arXiv 2014, arXiv:1409.2329. in press.
26.
Chen, S.W.; Shivakumar, S.S.; Dcunha, S.; Das, J.; Okon, E.; Qu, C.; Taylor, C.J.; Kumar, V. Counting apples and oranges with deep
learning: A data-driven approach. IEEE Robot. Autom. Lett. 2017, 2, 781–788. [CrossRef]
27.
Rahnemoonfar, M.; Sheppard, C. Deep count: Fruit counting based on deep simulated learning. Sensors 2017, 17, 905. [CrossRef]
Agriculture 2023, 13, 540
19 of 22
28.
Apolo-Apolo, O.E.; Martínez-Guanter, J.; Egea, G.; Raja, P.; Pérez-Ruiz, M. Deep learning techniques for estimation of the yield
and size of citrus fruits using a UAV. Eur. J. Agron. 2020, 115, 126030. [CrossRef]
29.
Sa, I.; Ge, Z.; Dayoub, F.; Upcroft, B.; Perez, T.; McCool, C. Deepfruits: A fruit detection system using deep neural networks.
Sensors 2016, 16, 1222. [CrossRef]
30.
Krizhevsky, A.; Sutskever, I.; Hinton, G.E. Imagenet classiﬁcation with deep convolutional neural networks. In Advances in Neural
Information Processing Systems, Proceedings of the Neural Information Processing Systems Conference, Lake Tahoe, NV, USA, 3–6 December
2012; Neural Information Processing Systems Foundation, Inc.: Ljubljana, Slovenia, 2012; pp. 1097–1105.
31.
Bargoti, S.; Underwood, J. Deep fruit detection in orchards. In Proceedings of the 2017 IEEE International Conference on Robotics
and Automation (ICRA), Singapore, 29 May–3 June 2017.
32.
Fu, L.; Feng, Y.; Elkamil, T.; Liu, Z.; Li, R.; Cui, Y. Image recognition method of multi-cluster kiwifruit in ﬁeld based on
convolutional neural networks. Nongye Gongcheng Xuebao/Trans. Chin. Soc. Agric. Eng. 2018, 34, 205–211.
33.
Katarzyna, R.; Paweł, M. A vision-based method utilizing deep convolutional neural networks for fruit variety classiﬁcation in
uncertainty conditions of retail sales. Appl. Sci. 2019, 9, 3971. [CrossRef]
34.
Villacrés, J.F.; Auat Cheein, F. Detection and characterization of cherries: A deep learning usability case study in Chile. Agronomy
2020, 10, 835. [CrossRef]
35.
Chung, D.T.P.; Van Tai, D. A fruits recognition system based on a modern deep learning technique. J. Phys. Conf. Ser. 2019,
1327, 012050. [CrossRef]
36.
Wang, S.H.; Chen, Y. Fruit category classiﬁcation via an eight-layer convolutional neural network with parametric rectiﬁed linear
unit and dropout technique. Multim. Tools Appl. 2018, 79, 15117–15133. [CrossRef]
37.
Kestur, R.; Meduri, A.; Narasipura, O. MangoNet: A deep semantic segmentation architecture for a method to detect and count
mangoes in an open orchard. Eng. Appl. Artif. Intell. 2019, 77, 59–69. [CrossRef]
38.
Santos, T.T.; de Souza, L.L.; dos Santos, A.A.; Avila, S. Grape detection, segmentation, and tracking using deep neural networks
and three-dimensional association. Comput. Electron. Agric. 2020, 170, 105247. [CrossRef]
39.
Chen, H.; Chen, A.; Xu, L.; Xie, H.; Qiao, H.; Lin, Q.; Cai, K. A deep learning CNN architecture applied in smart near-infrared
analysis of water pollution for agricultural irrigation resources. Agric. Water Manag. 2020, 240, 106303. [CrossRef]
40.
Garg, D.; Khan, S.; Alam, M. Integrative use of IoT and deep learning for agricultural applications. In Proceedings of ICETIT
2019: Emerging Trends in Information Technology; Springer: Cham, Switzerland, 2020; pp. 521–531.
41.
Mohan, P.; Patil, K.K. Deep learning based weighted SOM to forecast weather and crop prediction for agriculture application. Int.
J. Intell. Eng. Syst. 2018, 11, 167–176. [CrossRef]
42.
Yang, X.; Sun, M. A survey on deep learning in crop planting. IOP Conf. Ser. Mater. Sci. Eng. 2019, 490, 062053. [CrossRef]
43.
Dharani, M.K.; Thamilselvan, R.; Natesan, P.; Kalaivaani, P.C.D.; Santhoshkumar, S. Review Pon crop prediction using deep
learning techniques. J. Phys. Conf. Ser. 2021, 1767, 012026. [CrossRef]
44.
Zheng, Y.Y.; Kong, J.L.; Jin, X.B.; Wang, X.Y.; Su, T.L.; Zuo, M. CropDeep: The crop vision dataset for deep-learning-based
classiﬁcation and detection in precision agriculture. Sensors 2019, 19, 1058. [CrossRef]
45.
Lottes, P.; Behley, J.; Chebrolu, N.; Milioto, A.; Stachniss, C. Robust joint stem detection and crop-weed classiﬁcation using image
sequences for plant-speciﬁc treatment in precision farming. J. Field Robot. 2020, 37, 20–34. [CrossRef]
46.
Lottes, P.; Behley, J.; Milioto, A.; Stachniss, C. Fully convolutional networks with sequential information for robust crop and weed
detection in precision farming. IEEE Robot. Autom. Lett. 2018, 3, 2870–2877. [CrossRef]
47.
Chavan, T.R.; Nandedkar, A.V. AgroAVNET for crops and weeds classiﬁcation: A step forward in automatic farming. Comput.
Electron. Agric. 2018, 154, 361–372. [CrossRef]
48.
Suh, H.K.; Ijsselmuiden, J.; Hofstee, J.W.; van Henten, E.J. Transfer learning for the classiﬁcation of sugar beet and volunteer
potato under ﬁeld conditions. Biosyst. Eng. 2018, 174, 50–65. [CrossRef]
49.
Meng, S.; Wang, X.; Hu, X.; Luo, C.; Zhong, Y. Deep learning-based crop mapping in the cloudy season using one-shot
hyperspectral satellite imagery. Comput. Electron. Agric. 2021, 186, 106188. [CrossRef]
50.
Cai, Y.; Zheng, W.; Zhang, X.; Zhangzhong, L.; Xue, X. Research on soil moisture prediction model based on deep learning.
PLoS ONE 2019, 14, e0214508. [CrossRef]
51.
Yashwanth, M.; Chandra, M.L.; Pallavi, K.; Showkat, D.; Kumar, P.S. Agriculture automation using deep learning methods
implemented using keras. In Proceedings of the 2020 IEEE International Conference for Innovation in Technology (INOCON),
Bangalore, India, 6–8 November 2020.
52.
Tseng, D.; Wang, D.; Chen, C.; Miller, L.; Song, W.; Viers, J.; Vougioukas, S.; Carpin, S.; Ojea, J.A.; Goldberg, K. Towards
automating precision irrigation: Deep learning to infer local soil moisture conditions from synthetic aerial agricultural images.
In Proceedings of the 2018 IEEE 14th International Conference on Automation Science and Engineering (CASE), Munich, Germany,
20–24 August 2018; pp. 284–291.
53.
Westwood, J.H.; Charudattan, R.; Duke, S.O.; Fennimore, S.A.; Marrone, P.; Slaughter, D.C.; Swanton, C.; Zollinger, R. Weed
management in 2050: Perspectives on the future of weed science. Weed Sci. 2018, 66, 275–285. [CrossRef]
54.
Mishra, A.M.; Gautam, V. Weed species identiﬁcation in different crops using precision weed management: A review. Proc. CEUR
Workshop 2021, 180–194. Available online: https://www.semanticscholar.org/paper/Weed-Species-Identiﬁcation-in-Different-
Crops-Weed-Mishra-Gautam/8710e1a04eada39809b159ea8650f4c639c9bf19 (accessed on 3 July 2022).
Agriculture 2023, 13, 540
20 of 22
55.
Gulzar, Y.; Hamid, Y.; Soomro, A.B.; Alwan, A.A.; Journaux, L. A convolution neural network-based seed classiﬁcation system.
Symmetry 2020, 12, 2018. [CrossRef]
56.
Sharma, A.; Jain, A.; Gupta, P.; Chowdary, V. Machine learning applications for precision agriculture: A comprehensive review.
IEEE Access 2020, 9, 4843–4873. [CrossRef]
57.
Saleem, M.H.; Potgieter, J.; Arif, K.M. Plant disease detection and classiﬁcation by deep learning. Plants 2019, 8, 468. [CrossRef]
58.
Amara, J.; Bouaziz, B.; Algergawy, A. A deep learning-based approach for banana leaf diseases classiﬁcation. In Proceedings of
the Datenbanksysteme für Business, Technologie und Web (BTW 2017)-Workshopband, Stuttgart, Germany, 6–7 March 2017;
Gesellschaft für Informatik e.V.: Bonn, Germany, 2017; pp. 79–88.
59.
Dipali, M.; Deepa, D. Automation, and integration of growth monitoring in plants (with disease prediction) and crop prediction.
Mater. Today Proc. 2021, 43, 3922–3927.
60.
Akash, S.; Malik, A. A hybrid model for the classiﬁcation of sunﬂower diseases using deep learning. In Proceedings of the 2021
2nd International Conference on Intelligent Engineering and Management (ICIEM), London, UK, 28–30 April 2021; pp. 58–62.
61.
Ahmed, A.A.; Reddy, G.H. A mobile-based system for detecting plant leaf diseases using deep learning. AgriEngineering 2021, 3,
478–493. [CrossRef]
62.
Pallagani, V.; Khandelwal, V.; Chandra, B.; Udutalapally, V.; Das, D.; Mohanty, S.P. DCrop: A deep-learning-based framework for
accurate prediction of diseases of crops in smart agriculture. In Proceedings of the 2019 IEEE International Symposium on Smart
Electronic Systems (iSES) (Formerly iNiS), Rourkela, India, 16–18 December 2019; pp. 29–33.
63.
Sladojevic, S.; Arsenovic, M.; Anderla, A.; Culibrk, D.; Stefanovic, D. Deep neural networks based recognition of plant diseases by
leaf image classiﬁcation. Comput. Intell. Neurosci. 2016, 2016, 3289801. [CrossRef] [PubMed]
64.
Arivazhagan, S.; Shebiah, R.N.; Ananthi, S.; Varthini, S.V. Detection of unhealthy region of plant leaves and classiﬁcation of plant
leaf diseases using texture features. Agric. Eng. Int. CIGR J. 2013, 15, 211–217.
65.
Chen, J.; Chen, J.; Zhang, D.; Sun, Y.; Nanehkaran, Y.A. Using deep transfer learning for image-based plant disease identiﬁcation.
Comput. Electron. Agric. 2020, 173, 105393. [CrossRef]
66.
Sharma, P.; Berwal, Y.P.S.; Ghai, W. Performance analysis of deep learning CNN models for disease detection in plants using
image segmentation. Inf. Process. Agric. 2020, 7, 566–574. [CrossRef]
67.
Atila, Ü.; Uçar, M.; Akyol, K.; Uçar, E. Plant leaf disease classiﬁcation using EfﬁcientNet deep learning model. Ecol. Inform. 2021,
61, 101182. [CrossRef]
68.
Kaur, P.; Harnal, S.; Tiwari, R.; Upadhyay, S.; Bhatia, S.; Mashat, A.; Alabdali, A.M. Recognition of leaf disease using hybrid
convolutional neural network by applying feature reduction. Sensors 2022, 22, 575. [CrossRef]
69.
Ji, M.; Zhang, L.; Wu, Q. Automatic grape leaf diseases identiﬁcation via UnitedModel based on multiple convolutional neural
networks. Inf. Process. Agric. 2020, 7, 418–426. [CrossRef]
70.
Gadekallu, T.R.; Rajput, D.S.; Reddy, M.P.K.; Lakshmanna, K.; Bhattacharya, S.; Singh, S.; Jolfaei, A.; Alazab, M. A novel
PCA–whale optimization-based deep neural network model for classiﬁcation of tomato plant diseases using GPU. J. Real-Time
Image Process. 2021, 18, 1383–1396. [CrossRef]
71.
Azimi, S.; Kaur, T.; Gandhi, T.K. A deep learning approach to measure stress level in plants due to nitrogen deﬁciency. Measurement
2021, 173, 108650. [CrossRef]
72.
Joshi, R.C.; Kaushik, M.; Dutta, M.K.; Srivastava, A.; Choudhary, N. VirLeafNet: Automatic analysis and viral disease diagnosis
using deep-learning in Vigna mungo plant. Ecol. Inform. 2021, 61, 101197. [CrossRef]
73.
Kavitha, A. Deep Learning for Smart Agriculture.
Int.
J. Eng.
Res.
Technol.
2021, 9.
Available online: https://www.
semanticscholar.org/paper/Deep-Learning-for-Smart-Agriculture-Kavitha/0a272722fe4838cce5af0bb907310bf76927406d (ac-
cessed on 3 July 2022).
74.
Josephine, B.; Ramya, K.; Rao, K.V.S.N.; Kuchibhotla, P.; Venkata, K.; Rahamathulla, S. Crop yield prediction using machine
learning. Int. J. Sci. Technol. Res. 2020, 9. Available online: http://www.ijstr.org/paper-references.php?ref=IJSTR-0120-29576
(accessed on 3 July 2022).
75.
Khaki, S.; Wang, L. Crop yield prediction using deep neural networks. Front. Plant Sci. 2019, 10, 621. Available online:
https://doi.org/10.3389/fpls.2019.00621 (accessed on 23 February 2022). [CrossRef]
76.
Deepika, P.; Kaliraj, S. A survey on pest and disease monitoring of crops. In Proceedings of the 2021 3rd International Conference
on Signal Processing and Communication (ICPSC), Coimbatore, India, 13–14 May 2021; Available online: https://doi.org/10.110
9/icspc51351.2021.9451787 (accessed on 23 February 2022).
77.
Ale, L.; Sheta, A.; Li, L.; Wang, Y.; Zhang, N. Deep learning based plant disease detection for smart agriculture. In Proceedings
of the 2019 IEEE Globecom Workshops (GC Wkshps), Waikoloa, HI, USA, 9–13 December 2019; Available online: https:
//doi.org/10.1109/gcwkshps45667.2019.9024439 (accessed on 23 February 2022).
78.
Zhu, N.; Liu, X.; Liu, Z.; Hu, K.; Wang, Y.; Tan, J.; Huang, M.; Zhu, Q.; Ji, X.; Jiang, Y.; et al. Deep learning for smart agriculture:
Concepts, tools, applications, and opportunities. Int. J. Agric. Biol. Eng. 2018, 11, 32–44. [CrossRef]
79.
Deep Learning for Image-Based Plant Disease Detection.
Let’s Nurture—An IT Company Nurturing Ideas into Reality.
2022. Available online: https://www.letsnurture.com/blog/using-deep-learning-for-image-based-plant-disease-detection.html
(accessed on 23 February 2022).
80.
Zhao, Q.; Koch, C. Learning saliency-based visual attention: A Review. Signal Process. 2013, 93, 1401–1407. [CrossRef]
Agriculture 2023, 13, 540
21 of 22
81.
Kümmerer, M.; Theis, L.; Bethge, M. Deep Gaze I: Boosting saliency prediction with feature maps trained on ImageNet. In
Proceedings of the 2015 International Conference on Learning Representations (ICLR), San Diego, CA, USA, 8 May 2014; Available
online: https://pure.mpg.de/pubman/faces/ViewItemOverviewPage.jsp?itemId=item_2160776 (accessed on 24 February 2022).
82.
Shrikumar, A.; Greenside, P.; Kundaje, A. Reverse-complement parameter sharing improves deep learning models for genomics.
bioRxiv 2017, in press.
83.
Springenberg, J.T.; Dosovitskiy, A.; Brox, T.; Riedmiller, M. Striving for simplicity: The all convolutional net. arXiv. 2015. in press.
Available online: https://arxiv.org/abs/1412.6806 (accessed on 24 February 2022).
84.
Zeiler, M.D.; Fergus, R. Visualizing and understanding Convolutional Networks. In Proceedings of Computer Vision–ECCV
2014: 13th European Conference, Part I 13, Zurich, Switzerland, 6–12 September 2014; Springer International Publishing: Cham,
Switzerland, 2014; pp. 818–833.
85.
Zhou, B.; Khosla, A.; Lapedriza, A.; Oliva, A.; Torralba, A. Learning deep features for discriminative localization. In Proceedings
of the 2016 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), Las Vegas, NV, USA, 26 June–1 July 2016.
86.
Bach, S.; Binder, A.; Montavon, G.; Klauschen, F.; Müller, K.-R.; Samek, W. On pixel-wise explanations for non-linear classiﬁer
decisions by layer-wise relevance propagation. PLoS ONE 2015, 10, e0130140. [CrossRef]
87.
Uzal, L.C.; Grinblat, G.L.; Namías, R.; Larese, M.G.; Bianchi, J.S.; Morandi, E.N.; Granitto, P.M. Seed-per-pod estimation for plant
breeding using deep learning. Comput. Electron. Agric. 2018, 150, 196–204. [CrossRef]
88.
Nkemelu, D.K.; Omeiza, D.; Lubalo, N. Deep convolutional neural network for plant seedlings classiﬁcation. arXiv. 2018. in press.
Available online: https://arxiv.org/abs/1811.08404?source=post_page (accessed on 24 February 2022).
89.
Amiryouseﬁ, M.R.; Mohebbi, M.; Tehranifar, A. Pomegranate seed clustering by machine vision. Food Sci. Nutr. 2017, 6, 18–26.
[CrossRef] [PubMed]
90.
Sujatha, R.; Chatterjee, J.M.; Jhanjhi, N.Z.; Brohi, S.N. Performance of deep learning vs machine learning in plant leaf disease
detection. Microprocess. Microsyst. 2021, 80, 103615. [CrossRef]
91.
Arnal Barbedo, J.G. Plant disease identiﬁcation from individual lesions and spots using deep learning. Biosyst. Eng. 2019, 180,
96–107. [CrossRef]
92.
Liu, P.; Mahmood, T.; Khan, Q. Multi-attribute decision-making based on prioritized aggregation operator under hesitant
intuitionistic fuzzy linguistic environment. Symmetry 2017, 9, 270. [CrossRef]
93.
Bresilla, K.; Perulli, G.D.; Boini, A.; Morandi, B.; Grappadelli, L.; Manfrini, L. Single-shot convolution neural networks for
real-time fruit detection within the tree. Front. Plant Sci. 2019, 10, 611. [CrossRef] [PubMed]
94.
Altaheri, H.; Alsulaiman, M.; Muhammad, G. Date fruit classiﬁcation for robotic harvesting in a natural environment using deep
learning. IEEE Access 2019, 7, 117115–117133. [CrossRef]
95.
Meshram, V.; Patil, K.; Meshram, V.; Hanchate, D.; Ramkteke, S.D. Machine learning in agriculture domain: A state-of-art survey.
Artif. Intell. Life Sci. 2021, 1, 100010. [CrossRef]
96.
Lu, S.; Chen, W.; Zhang, X.; Karkee, M. Canopy-attention-YOLOv4-based immature/mature apple fruit detection on dense-foliage
tree architectures for early crop load estimation. Comput. Electron. Agric. 2022, 193, 106696. [CrossRef]
97.
Lyu, S.; Li, R.; Zhao, Y.; Li, Z.; Fan, R.; Liu, S. Green citrus detection and counting in orchards based on YOLOv5-CS and AI edge
system. Sensors 2022, 22, 576. [CrossRef]
98.
Khan, R.; Dhingra, N.; Bhati, N. Role of Artiﬁcial Intelligence in Agriculture: A Comparative Study. In Transforming Management
with AI, Big-Data, and IoT; Springer International Publishing: Cham, Switzerland, 2022; pp. 73–83.
99.
Wang, C.; Liu, B.; Liu, L.; Zhu, Y.; Hou, J.; Liu, P.; Li, X. A review of deep learning used in the hyperspectral image analysis for
agriculture. Artif. Intell. Rev. 2021, 54, 5205–5253. [CrossRef]
100. Coulibaly, S.; Kamsu-Foguem, B.; Kamissoko, D.; Traore, D. Deep neural networks with transfer learning in Millet crop images.
Comput. Ind. 2019, 108, 115–120. [CrossRef]
101. Sahni, V.; Srivastava, S.; Khan, R. Modelling techniques to improve the quality of food using artiﬁcial intelligence. J. Food Qual.
2021, 2021, 2140010. [CrossRef]
102. Khan, R.; Tyagi, N.; Chauhan, N. Safety of food and food warehouse using VIBHISHAN. J. Food Qual. 2021, 2021, 1328332.
[CrossRef]
103. Kaya, A.; Keceli, A.S.; Catal, C.; Yalic, H.Y.; Temucin, H.; Tekinerdogan, B. Analysis of transfer learning for deep neural network
based plant classiﬁcation models. Comput. Electron. Agric. 2019, 158, 20–29. [CrossRef]
104. Sharma, M.; Nath, K.; Sharma, R.K.; Kumar, C.J.; Chaudhary, A. Ensemble Averaging of Transfer Learning Models for Identiﬁca-
tion of Nutritional Deﬁciency in Rice Plant. Electronics 2022, 11, 148. [CrossRef]
105. Argüeso, D.; Picon, A.; Irusta, U.; Medela, A.; San-Emeterio, M.G.; Bereciartua, A.; Alvarez-Gila, A. Few-shot learning approach
for plant disease classiﬁcation using images taken in the ﬁeld. Comput. Electron. Agric. 2020, 175, 105542. [CrossRef]
106. Zhong, F.M.; Chen, Z.K.; Zhang, Y.C.; Xia, F. Zero-and few-shot learning for diseases recognition of Citrus aurantium L. using
conditional adversarial autoencoders. Comput. Electron. Agric. 2020, 179, 105828. [CrossRef]
107. Jiang, H.H.; Zhang, C.Y.; Qiao, Y.L.; Zhang, Z.; Zhang, W.J.; Song, C.Q. CNN feature-based graph convolutional network for
weed and crop recognition in smart farming. Comput. Electron. Agric. 2020, 174, 105450. [CrossRef]
108. Khaki, S.; Pham, H.; Han, Y.; Kuhl, A.; Kent, W.; Wang, L. Deepcorn: A semi-supervised deep learning method for high-throughput
image-based corn kernel counting and yield estimation. Knowl. Based Syst. 2021, 218, 106874. [CrossRef]
Agriculture 2023, 13, 540
22 of 22
109. Sa, I.; Chen, Z.; Popovi´c, M.; Khanna, R.; Liebisch, F.; Nieto, J.; Siegwart, R. WeedNet: Dense semantic weed classiﬁcation using
multispectral images and MAV for smart farming. IEEE Robot. Autom. Lett. 2017, 3, 588–595. [CrossRef]
110. Sa, I.; Popovi´c, M.; Khanna, R.; Chen, Z.; Lottes, P.; Liebisch, F.; Nieto, J.; Stachniss, C.; Walter, A.; Siegwart, R. WeedMap: A
large-scale semantic weed mapping framework using aerial multispectral imaging and deep neural network for precision farming.
Remote Sens. 2018, 10, 1423. [CrossRef]
111. Jiao, L.; Dong, S.; Zhang, S.; Xie, C.; Wang, H. AF-RCNN: An anchor-free convolutional neural network for multi-categories
agricultural pest detection. Comput. Electron. Agric. 2020, 174, 105522. [CrossRef]
112. Eunice, J.; Popescu, D.E.; Chowdary, M.K.; Hemanth, J. Deep learning-based leaf disease detection in crops using images for
agricultural applications. Agronomy 2022, 12, 2395.
113. Wu, Q.; Chen, Y.; Meng, J. DCGAN-based data augmentation for tomato leaf disease identiﬁcation. IEEE Access 2020, 8,
98716–98728. [CrossRef]
114. Hammouch, H.; El-Yacoubi, M.; Qin, H.; Berrahou, A.; Berbia, H.; Chikhaoui, M. A two-stage deep convolutional generative
adversarial network-based data augmentation scheme for agriculture image regression tasks. In Proceedings of the 2021
International Conference on Cyber-Physical Social Intelligence (ICCSI), Beijing, China, 18–20 December 2021.
115. Sourav, A.I.; Emanuel, A.W.R. Recent Trends of Big Data in Precision Agriculture: A Review. In IOP Conference Series: Materials
Science and Engineering; IOP Publishing: Bristol, UK, 2021; Volume 1096, p. 012081.
116. Bharman, P.; Ahmad Saad, S.; Khan, S.; Jahan, I.; Ray, M.; Biswas, M. Deep Learning in Agriculture: A Review. Asian J. Res.
Comput. Sci. 2022, 13, 28–47. [CrossRef]
117. Goodfellow, I.; Bengio, Y.; Courville, A. Deep Learning; MIT Press: Cambridge, MA, USA, 2014.
118. Liu, J.; Cheng, L.; Yan, S. Deep learning with noisy labels. In Proceedings of the IEEE Conference on Computer Vision and Pattern
Recognition, Long Beach, CA, USA, 16–20 June 2019.
119. Madry, A.; Makelov, A.; Schmidt, L.; Tsipras, D.; Vladu, A. Towards deep learning models resistant to adversarial attacks. arXiv
2018, arXiv:1706.06083. in press.
120. Finn, C.; Abbeel, P.; Levine, S. Model-agnostic meta-learning for fast adaptation of deep networks. In Proceedings of the 34th
International Conference on Machine Learning, Sydney, Australia, 6–11 August 2017; Volume 70, pp. 1126–1135.
121. Ribeiro, M.T.; Singh, S.; Guestrin, C. “Why should I trust you?”: Explaining the predictions of any classiﬁer. In Proceedings of the
22nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, San Francisco CA, USA, 13–17 August
2016; Association for Computing Machinery: New York, NY, USA, 2016; pp. 1135–1144.
122. Lundberg, S.M.; Lee, S.I. A uniﬁed approach to interpreting model predictions. Adv. Neural Inf. Process. Syst. 2017, 30, 4765–4774.
123. Caruana, R. Intelligible models for healthcare: Predicting pneumonia risk and hospital 30-day readmission. In Proceedings of the
21th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, Sydney, Australia, 10–13 August 2015;
pp. 1721–1730.
124. Vaswani, A.; Shazeer, N.; Parmar, N.; Uszkoreit, J.; Jones, L.; Gomez, A.N.; Kaiser, Ł.; Polosukhin, I. Attention is all you need. Adv.
Neural Inf. Process. Syst. 2017, 30, 5998–6008.
125. Snell, J.; Swersky, K.; Zemel, R. Prototypical networks for few-shot learning. Adv. Neural Inf. Process. Syst. 2017, 30, 4077–4087.
Disclaimer/Publisher’s Note: The statements, opinions and data contained in all publications are solely those of the individual
author(s) and contributor(s) and not of MDPI and/or the editor(s). MDPI and/or the editor(s) disclaim responsibility for any injury to
people or property resulting from any ideas, methods, instructions or products referred to in the content.


</subsection_point_Point 1>

<previous_sections>

A systematic review of automated systems for real-time irrigation management

1. INTRODUCTION
The challenge of feeding a growing population with finite resources is becoming increasingly pressing. By 2050, the world population is expected to reach 9.7 billion, necessitating a 70% increase in food production (Falkenmark and Rockstrom, 2009). Irrigation plays a crucial role in enhancing crop yields and agricultural productivity to meet this growing demand. Studies have shown that irrigation can significantly increase crop water productivity, contributing to increased food production (Ali and Talukder, 2008; Playan and Mateos, 2005). However, water scarcity poses a significant challenge, with many regions facing water deficits and the need for improved water management practices (Falkenmark and Rockstrom, 2009). Optimizing irrigation schedules and doses based on crop requirements and environmental conditions is essential for maximizing yield and quality while minimizing water use (Zhang et al., 2024). The necessity of scalable water-efficient practices for increasing food demand cannot be overstated. Techniques such as regulated deficit irrigation, magnetically treated water, and the use of drought-tolerant crops like sorghum have shown promise in improving water productivity and ensuring food security (Mehmood et al., 2023; Putti et al., 2023; Hadebe et al., 2016). As the global food challenge intensifies, it is imperative to critically evaluate the current state and future potential of irrigation management systems to guide research, innovation, and implementation efforts towards fully autonomous, scalable solutions.

Despite the importance of irrigation in addressing the global food challenge, traditional irrigation management techniques, such as manual scheduling and timer-based systems, have significant limitations. These methods are often labor-intensive, inefficient, and less adaptable to changing conditions (Savin et al., 2023). Manual and timer-based scheduling can lead to high operational costs and inefficient water use (Raghavendra, Han, and Shin, 2023). The reliance on manual intervention and predetermined schedules limits their adaptability to changing environmental conditions, crop water requirements, and soil moisture levels (Kaptein et al., 2019). Sensor-based irrigation systems offer an alternative, enabling real-time adjustments based on soil water status measurements (Kaptein et al., 2019). However, the adoption of these systems in commercial settings has been limited, often requiring extensive input from researchers (Kim et al., 2014; Lea-Cox et al., 2018; Ristvey et al., 2018). The limitations of traditional irrigation management techniques highlight the need for scalable, automated solutions for greater efficiency in irrigation management. Automated systems that collect real-time data, analyze it, and make autonomous irrigation decisions can lead to improved water use efficiency and increased crop productivity (Champness et al., 2023; Wu et al., 2022). To fully understand the potential of automated systems, it is necessary to examine the automation of each part of the irrigation management pipeline and analyze the effectiveness and efficiency of integrated end-to-end solutions.

The emergence of smart irrigation management and IoT marks a significant shift from historical irrigation practices. Modern approaches rely on vast data and analysis algorithms, leveraging technologies such as remote sensing, sensor networks, weather data, and computational algorithms (Atanasov, 2023; Bellvert et al., 2023; Kumar et al., 2023). IoT plays a vital role in collecting vast amounts of data through sensors, data transmission, and tailored networks, enabling real-time monitoring and control of irrigation systems (Liakos, 2023; Zuckerman et al., 2024). These advancements in data collection and analysis have the potential to revolutionize irrigation management, allowing for more precise and efficient water use. However, challenges such as processing diverse data sources, data integration, and lack of integrated data analysis hamper the full benefit of IoT in irrigation management (Dave et al., 2023). The current fragmented approach in smart irrigation, focusing on individual components rather than the entire system, limits the potential for fully autonomous, real-time end-to-end irrigation management (Togneri et al., 2021). To address these challenges and fully realize the potential of smart irrigation management, there is a need for automating and integrating each section of the irrigation management pipeline, from sensor/weather data collection and transmission to processing, analysis, decision-making, and automated action (McKinion and Lemmon, 1985). This integration requires a thorough investigation of the role of interoperability and standardization in enabling seamless communication and compatibility between components within the automated irrigation management pipeline.

Machine learning (ML) plays a significant role in processing vast data, predicting plant stress, modeling climate effects, and optimizing irrigation in smart irrigation management systems. ML algorithms can analyze data collected from sensors and weather stations to determine optimal irrigation schedules (Vianny et al., 2022). However, the potential of ML is often constrained by manual steps, such as data interpretation, decision-making on irrigation timing and volume, and system adjustments. Automating ML integration to allow direct action from insights to irrigation execution, removing bottlenecks and achieving real-time adaptability, is crucial for fully autonomous irrigation management (Barzallo-Bertot et al., 2022). By integrating ML into automated systems, the irrigation management pipeline can become more seamless and efficient, enabling real-time decision-making and action based on data-driven insights. To achieve this level of automation and integration, it is essential to identify gaps and propose solutions for seamless integration across the automated irrigation management system, aiming to achieve fully autonomous, scalable irrigation management.

To achieve seamless integration across the automated irrigation management system, interoperability and standardization are critical. Interoperability allows different system components, such as sensors, actuators, and software, to communicate and exchange data effectively, while standardization ensures that data is represented in a consistent format (Santos et al., 2020). Standardized protocols and data formats are essential for achieving seamless integration and ensuring compatibility between components in real-time irrigation management systems (Robles et al., 2022; Hatzivasilis et al., 2018). Existing and emerging standards, such as OGC SensorThings API and ISO 11783, have applicability to real-time irrigation management systems (Hazra et al., 2021). However, challenges such as data quality, scalability, reliability, and security need to be addressed to fully realize the potential of interoperability and standardization in automated irrigation management systems (Hazra et al., 2021). Addressing these challenges is crucial for enabling the seamless integration of components within the automated irrigation management pipeline, which is essential for achieving fully autonomous, scalable irrigation management. A comprehensive evaluation of the role of interoperability and standardization in enabling the integration of components within the automated irrigation management pipeline is necessary to guide future research and implementation efforts.
The primary objective of this systematic review is to critically evaluate the current state and future potential of real-time, end-to-end automated irrigation management systems that integrate IoT and machine learning technologies for enhancing agricultural water use efficiency and crop productivity.
Specific objectives include:
•	Examining the automation of each part of the irrigation management pipeline and the seamless integration of each section in the context of irrigation scheduling and management.
•	Analyzing the effectiveness and efficiency of integrated end-to-end automated irrigation systems.
•	Investigating the role of interoperability and standardization in enabling the integration of components within the automated irrigation management pipeline.
•	Identifying gaps and proposing solutions for seamless integration across the automated irrigation management system, aiming to achieve fully autonomous, scalable irrigation management.
By addressing these objectives, this systematic review aims to provide a comprehensive and critical evaluation of the current state and future potential of real-time, end-to-end automated irrigation management systems. Its intention is to guide future research, innovation, and implementation efforts to achieve fully autonomous, scalable irrigation management that can contribute to addressing the global food challenge.

2. REVIEW METHODOLOGY
•	Question-driven framework to guide the literature review of real-time, autonomous irrigation management systems
•	Key research questions posed, each with the motivation behind investigating them and a starting hypothesis to evaluate against the examined literature
•	Table presenting the major objectives, specific objectives, questions, motivations, and hypotheses
3. DATA COLLECTION TO CLOUD: AUTOMATION AND REAL-TIME PROCESSING
3.1. Irrigation management data
The success of automated irrigation management systems relies heavily on the collection, transmission, and analysis of various types of data. The most applicable data types for irrigation management include soil moisture, canopy temperature, weather data, and plant physiological parameters (Farooq et al., 2019; Li et al., 2019; Olivier et al., 2021; Evett et al., 2020). These data are typically collected from a range of sources, including in-field sensors, remote sensing platforms, weather stations, and manual measurements (Li et al., 2019; Karimi et al., 2018).
Soil moisture data is arguably the most critical type of data for irrigation management, as it directly reflects the water available to plants and can be used to determine the optimal timing and amount of irrigation (Olivier et al., 2021; Intrigliolo & Castel, 2006). Soil moisture sensors, such as tensiometers, capacitance probes, and time-domain reflectometry (TDR) sensors, can provide real-time measurements of soil water content at various depths (Farooq et al., 2019). These sensors can be deployed in a network configuration to capture spatial variability in soil moisture across a field (Karimi et al., 2018).
Canopy temperature data is another valuable type of data for irrigation management, as it can be used to assess plant water stress and adjust irrigation accordingly (Evett et al., 2020). Infrared thermometers and thermal cameras can be used to measure canopy temperature, which is influenced by factors such as air temperature, humidity, wind speed, and plant water status (Li et al., 2019). When plants experience water stress, they tend to close their stomata to reduce water loss, leading to an increase in canopy temperature (Evett et al., 2020). By monitoring canopy temperature and comparing it to reference values, automated irrigation systems can detect plant water stress and trigger irrigation events to maintain optimal plant health and productivity (Li et al., 2019).
Weather data, including temperature, humidity, precipitation, wind speed, and solar radiation, are essential for predicting crop water requirements and scheduling irrigation events (Akilan & Baalamurugan, 2024). Weather stations equipped with various sensors can provide real-time measurements of these parameters, which can be used as inputs for crop water requirement models, such as the FAO-56 Penman-Monteith equation (Li et al., 2019). These models estimate crop evapotranspiration (ET) based on weather data and crop-specific coefficients, allowing for the calculation of irrigation requirements (Intrigliolo & Castel, 2006). By integrating weather data into automated irrigation systems, irrigation schedules can be dynamically adjusted based on changing environmental conditions, ensuring that crops receive the optimal amount of water at the right time (Akilan & Baalamurugan, 2024).
When collecting and utilizing these data types, several considerations must be taken into account, including the volume, frequency, format, and source of the data (Farooq et al., 2019). The volume of data generated by automated irrigation systems can be substantial, especially when high-resolution sensors are deployed at a large scale (Bastidas Pacheco et al., 2022). This necessitates the use of efficient data storage, processing, and transmission technologies to handle the data load (Farooq et al., 2019). The frequency of data collection is another important consideration, as it directly impacts the temporal resolution of the data and the ability to detect rapid changes in plant water status or environmental conditions (Bastidas Pacheco et al., 2022). Bastidas Pacheco et al. (2022) demonstrated that collecting full pulse resolution data from water meters provides more accurate estimates of event occurrence, timing, and features compared to aggregated temporal resolutions, highlighting the importance of selecting appropriate data collection frequencies to ensure the quality and usefulness of the data for irrigation management.
The format of the data is also crucial, as it determines the compatibility and interoperability of the data with various analysis tools and platforms (Farooq et al., 2019). Standardized data formats, such as JSON, XML, or CSV, can facilitate data exchange and integration between different components of the automated irrigation system (Zhang et al., 2023). The source of the data is another important consideration, as it can impact the reliability, accuracy, and spatial coverage of the data (Farooq et al., 2019). For example, in-field sensors provide highly localized measurements, while remote sensing platforms, such as satellites or drones, can provide data at larger spatial scales (Li et al., 2019). By combining data from multiple sources, automated irrigation systems can achieve a more comprehensive understanding of crop water requirements and optimize irrigation management accordingly (Farooq et al., 2019).
Data quality, accuracy, and reliability are paramount in irrigation management, as they directly impact the effectiveness of decision-making processes and the efficiency of water use (Gupta et al., 2020). Inaccurate or unreliable data can lead to suboptimal irrigation decisions, resulting in crop stress, yield losses, or wasted water resources (Ramli & Jabbar, 2022). Gupta et al. (2020) emphasized the critical importance of data security and privacy in smart farming systems, as the leakage of sensitive agricultural data can cause severe economic losses to farmers and compromise the integrity of the automated irrigation system. The authors also highlighted the need for robust authentication and secure communication protocols to prevent unauthorized access to smart farming systems and protect data in transit (Gupta et al., 2020).
Ramli and Jabbar (2022) addressed the challenges associated with implementing real-time, automated irrigation systems, including data quality, scalability, reliability, and security. They proposed solutions and best practices based on the analysis of case studies and real-world implementations, such as the use of redundant sensors, data validation techniques, and secure communication protocols (Ramli & Jabbar, 2022). The authors also emphasized the importance of regular maintenance and calibration of sensors to ensure the accuracy and reliability of the collected data (Ramli & Jabbar, 2022).
Researchers have investigated the use of data compression, aggregation, and filtering techniques to reduce bandwidth requirements and improve transmission efficiency in automated irrigation systems (Karim et al., 2023; Rady et al., 2020; Cui, 2023). Karim et al. (2023) explored the effectiveness of various data compression techniques, such as lossless and lossy compression algorithms, in reducing the size of data packets transmitted over wireless networks. The authors found that lossless compression techniques, such as Huffman coding and Lempel-Ziv-Welch (LZW), can significantly reduce data size without compromising data quality, while lossy compression techniques, such as JPEG and MP3, can further reduce data size by introducing acceptable levels of distortion (Karim et al., 2023).
Rady et al. (2020) developed a novel data compression algorithm specifically designed for irrigation data, which achieved significant compression ratios without compromising data quality. The authors demonstrated that their algorithm could reduce the amount of data transmitted over wireless networks, thereby improving the efficiency of the irrigation system and reducing costs (Rady et al., 2020). Cui (2023) investigated the use of data aggregation and filtering techniques to reduce the number of transmissions and save bandwidth in automated irrigation systems. The author proposed a data aggregation scheme that combines multiple sensor readings into a single value, such as the average soil moisture over a specified time interval, to reduce the frequency of data transmissions (Cui, 2023). Additionally, the author explored the use of data filtering techniques, such as Kalman filters and particle filters, to remove noise and outliers from sensor data, improving the accuracy and reliability of the transmitted information (Cui, 2023).
Data standardization and harmonization are crucial for facilitating seamless integration and interoperability between the various components of automated irrigation management systems (Zhang et al., 2023; Ermoliev et al., 2022). Zhang et al. (2023) developed a novel cyberinformatics technology called iCrop, which enables the in-season monitoring of crop-specific land cover across the contiguous United States. The authors highlighted the importance of data standardization and harmonization in the context of iCrop, as it allows for the efficient distribution of crop-specific land cover information based on the findable, accessible, interoperable, and reusable (FAIR) data principle (Zhang et al., 2023). By adopting standardized data formats and protocols, such as the Open Geospatial Consortium (OGC) standards, iCrop enables the seamless integration of various data sources and facilitates the interoperability of the system with other agricultural decision support tools (Zhang et al., 2023).
Ermoliev et al. (2022) proposed a linkage methodology for linking distributed sectoral/regional optimization models in a situation where private information is not available or cannot be shared by modeling teams. The authors emphasized the need for data standardization to enable decentralized cross-sectoral coordination and analysis, as it allows for the consistent representation and exchange of data between different models and stakeholders (Ermoliev et al., 2022). By adopting standardized data formats and interfaces, the proposed linkage methodology can facilitate the integration of various optimization models and support the development of comprehensive decision support systems for sustainable resource management (Ermoliev et al., 2022).
Metadata plays a vital role in providing context and enabling better data interpretation and decision-making in automated irrigation management systems (Jahanddideh-Tehrani et al., 2021). Metadata refers to the additional information that describes the characteristics, quality, and context of the primary data, such as the sensor type, calibration parameters, measurement units, and timestamp (Jahanddideh-Tehrani et al., 2021). Jahanddideh-Tehrani et al. (2021) highlighted the importance of metadata in water resources management, as it enables decision-makers to use the data to the best of its capabilities by understanding factors such as when water data was collected and what factors might have contributed to the measurements. The authors emphasized the need for standardized metadata formats and guidelines, such as the Dublin Core Metadata Initiative (DCMI) and the ISO 19115 standard, to ensure the consistency and interoperability of metadata across different water information systems (Jahanddideh-Tehrani et al., 2021).
In the context of automated irrigation management systems, metadata can provide valuable information about the data collection process, sensor performance, and environmental conditions that can aid in data interpretation and decision-making (Cota & Mamede, 2023). For example, metadata about the sensor type and calibration parameters can help assess the accuracy and reliability of the collected data, while metadata about the weather conditions and soil properties can provide context for interpreting the data and adjusting irrigation strategies accordingly (Cota & Mamede, 2023). By incorporating metadata into the data management and analysis pipeline of automated irrigation systems, decision-makers can make more informed and context-aware decisions, leading to improved water use efficiency and crop productivity (Jahanddideh-Tehrani et al., 2021).

3.2. Edge Computing and Fog Computing
Edge computing and fog computing have emerged as transformative technologies in the realm of real-time irrigation management systems, offering significant potential for improving efficiency, scalability, and reliability (Abdel Nasser et al., 2020; Tran et al., 2019). Edge computing refers to the practice of processing data near the edge of the network, close to the source of the data, while fog computing is a decentralized computing infrastructure that extends cloud computing capabilities to the network edge (Hassija et al., 2019). These technologies bring computation and analytics closer to the data source, reducing the need for data to travel to the cloud and enabling faster processing and decision-making (Hassija et al., 2019; Zhang et al., 2020).
The potential of edge computing and fog computing in real-time irrigation management is immense. Abdel Nasser et al. (2020) proposed a two-layer system for water demand prediction using automated meters and machine learning techniques, demonstrating the potential of edge computing in improving the efficiency and scalability of irrigation management. The system collects and aggregates data from distributed smart meters in the first layer, while the second layer uses LSTM neural networks to predict water demand for different regions of households. By leveraging edge computing, the system can achieve high accuracy in predicting water demand, which is essential for efficient irrigation management (Abdel Nasser et al., 2020).
Tran et al. (2019) conducted a comprehensive review of real-time, end-to-end automated irrigation management systems, highlighting the role of fog computing in addressing data transmission challenges and enabling seamless integration across the irrigation management pipeline. The authors emphasize that real-time, end-to-end automated irrigation management systems have the potential to significantly improve water efficiency, crop yields, and reduce labor costs. However, they also identify several challenges that need to be addressed, such as data quality, scalability, reliability, and security, which can be effectively tackled by implementing fog computing architectures (Tran et al., 2019).
Edge computing offers several benefits in real-time irrigation management systems, including reduced latency, real-time decision-making, and reduced reliance on cloud connectivity (Mishra, 2020; Zhang et al., 2020). By processing data closer to the source, edge computing enables faster response times and more efficient data handling (Mishra, 2020). Mishra (2020) highlights that edge computing reduces latency by processing data closer to the source, enabling real-time decision-making and lessening reliance on cloud connectivity by shifting processing to local or edge devices.
Zhang et al. (2020) explore the application of edge computing in agricultural settings, demonstrating its potential to improve the efficiency and accuracy of irrigation systems. The authors discuss how edge computing has prospects in various agricultural applications, such as pest identification, safety traceability of agricultural products, unmanned agricultural machinery, agricultural technology promotion, and intelligent management. They also emphasize that the emergence of edge computing models, such as fog computing, cloudlet, and mobile edge computing, has transformed the management and operation of farms (Zhang et al., 2020).
Fog computing plays a crucial role in distributing processing and storage across the network, enhancing the scalability and reliability of automated irrigation systems (Premkumar & Sigappi, 2022; Singh et al., 2022). Premkumar and Sigappi (2022) evaluate the current state of automated irrigation management systems and propose a hybrid machine learning approach for predicting soil moisture and managing irrigation. Their study emphasizes the potential of fog computing in distributing processing and storage across the network, improving the efficiency and scalability of irrigation systems. The proposed hybrid machine learning approach outperforms other machine learning algorithms in predicting soil moisture, demonstrating the effectiveness of fog computing in enhancing the performance of automated irrigation systems (Premkumar & Sigappi, 2022).
Singh et al. (2022) discuss the role of fog computing in distributing processing and storage across the network, enhancing scalability and reliability in agricultural management systems. The authors argue that by implementing fog computing, these systems can achieve faster data processing and response times, improving overall efficiency and effectiveness. They also highlight that fog computing can address the challenges faced by real-time data transmission in agricultural management systems, such as latency, bandwidth limitations, and data security (Singh et al., 2022).
The integration of edge and fog computing in real-time irrigation management systems is crucial for achieving fully automated, scalable, and reliable solutions. As the demand for autonomous irrigation management grows, these technologies will play a pivotal role in enabling faster decision-making, reduced latency, improved resource utilization, and seamless integration across the irrigation management pipeline (Tran et al., 2019; Zhang et al., 2020). By bringing computation and analytics closer to the data source and distributing processing and storage across the network, edge and fog computing can significantly enhance the efficiency and effectiveness of automated irrigation systems, contributing to the overall goal of addressing the global food challenge through optimized water resource management and increased agricultural productivity (Abdel Nasser et al., 2020; Premkumar & Sigappi, 2022; Singh et al., 2022).

3.3. Automation of Data Collection
The automation of data collection is a critical component in the development of real-time, end-to-end automated irrigation management systems that integrate IoT and machine learning technologies. It enables the efficient gathering of vital information about crop health, environmental conditions, and water requirements, which is essential for enhancing agricultural water use efficiency and crop productivity. Two key aspects of automated data collection are the use of advanced sensing technologies for non-invasive plant stress detection and the implementation of wireless sensor networks and energy-efficient communication protocols for large-scale, long-term data collection.
Advanced sensing technologies, such as hyperspectral imaging and thermal sensing, have emerged as powerful tools for non-invasive plant stress detection in automated irrigation management systems. These technologies provide valuable information about crop traits, enabling early and accurate detection of plant health issues (Triantafyllou et al., 2019). Triantafyllou et al. (2019) propose a comprehensive reference architecture model that incorporates advanced sensing technologies in the sensor layer for real-time plant stress detection, highlighting their importance in providing non-invasive plant stress detection. Similarly, Hossain et al. (2023) present a novel IoT-ML-Blockchain integrated framework for smart agricultural management that leverages advanced sensing technologies to optimize water use and improve crop yield, contributing to the overall goal of enhancing agricultural water use efficiency and crop productivity.
Hyperspectral imaging can capture subtle changes in plant physiology that are indicative of stress, while machine learning algorithms can be employed to extract meaningful patterns from the spectral data and classify different stress types (Araus et al., 2014). Thermal sensing can detect changes in canopy temperature, which is influenced by factors such as plant water status (Li et al., 2019). By monitoring canopy temperature and comparing it to reference values, automated irrigation systems can detect plant water stress and trigger irrigation events to maintain optimal plant health and productivity (Li et al., 2019).
The integration of advanced sensing technologies in automated irrigation management systems has the potential to revolutionize precision agriculture. Jiang et al. (2019) demonstrate the effectiveness of a deep learning-based model in accurately detecting leaf spot diseases, highlighting the importance of image augmentation and deep learning algorithms in enhancing the model's performance.
Wireless sensor networks (WSNs) and energy-efficient communication protocols have the potential to significantly improve the efficiency and reliability of data collection in large-scale, long-term irrigation systems. WSNs offer a cost-effective and scalable solution for real-time data collection in large-scale irrigation systems, providing remote monitoring and automated control capabilities (Mehdizadeh et al., 2020). Nishiura and Yamamoto (2021) propose a novel sensor network system that utilizes drones and wireless power transfer to autonomously collect environmental data from sensor nodes in vast agricultural fields, reducing operational costs and enhancing the efficiency of data collection. Similarly, Higashiura and Yamamoto (2021) introduce a network system that employs UAVs and LoRa communication to efficiently collect environmental data from sensor nodes distributed across large farmlands, optimizing data collection and reducing travel distance and time.
Energy-efficient communication protocols are crucial for ensuring reliable data transmission in challenging environmental conditions and extending the lifespan of sensor nodes (Mehdizadeh et al., 2020). Al-Ali et al. (2023) investigate the potential of WSNs and energy-efficient communication protocols for data collection in large-scale, long-term irrigation systems, discussing the challenges and opportunities of using these technologies to improve the efficiency and reliability of real-time data collection in irrigation management. Mehdizadeh et al. (2020) emphasize the need for careful consideration of factors such as data accuracy, energy consumption, and network reliability when designing effective WSNs for irrigation management, enabling timely irrigation decisions and improved crop yields.
The automation of data collection through the use of advanced sensing technologies and wireless sensor networks is essential for achieving fully autonomous, scalable irrigation management. By enabling non-invasive plant stress detection and large-scale, long-term data collection, these technologies contribute to the overall goal of optimizing water resource management and increasing agricultural productivity. The integration of these technologies in real-time, end-to-end automated irrigation management systems has the potential to enhance agricultural water use efficiency and crop productivity, ultimately contributing to the development of fully autonomous, scalable irrigation management solutions.

3.4: Real-Time Data Transmission Protocols and Technologies
Real-time data transmission is a critical component of automated irrigation management systems, as it enables the timely delivery of sensor data to the cloud for processing and decision-making. The exploration of suitable protocols and network architectures is essential for ensuring efficient and reliable data transmission in these systems, contributing to the overall goal of enhancing agricultural water use efficiency and crop productivity.
The Message Queuing Telemetry Transport (MQTT) protocol has emerged as a popular choice for real-time data transmission in IoT networks, including those used for automated irrigation management. MQTT is a lightweight, publish-subscribe protocol designed for constrained devices and low-bandwidth networks (Author, 2019). Its simplicity and low overhead make it well-suited for IoT applications where data transmission speed and energy efficiency are critical (Saranyadevi et al., 2022). MQTT provides three Quality of Service (QoS) levels, ensuring data reliability in real-time scenarios (Author, 2019). Chen et al. (2020) proposed novel algorithms to improve data exchange efficiency and handle rerouting in MQTT-based IoT networks for automated irrigation management systems. Their TBRouting algorithm efficiently finds the shortest paths for data transmission, while the Rerouting algorithm effectively handles the rerouting of topic-based session flows when a broker crashes. The combination of these algorithms can significantly improve the performance and reliability of automated irrigation management systems (Chen et al., 2020).
Client-server IoT networks, such as those based on MQTT, play a crucial role in real-time data transmission for automated irrigation management systems. In these networks, sensors and devices (clients) publish data to a central broker (server), which then distributes the data to subscribed clients (Verma et al., 2021). This architecture enables efficient data collection, processing, and dissemination, facilitating the integration of various components within the automated irrigation management pipeline. Verma et al. (2021) proposed an architecture for healthcare monitoring systems using IoT and communication protocols, which provides a comprehensive overview of existing approaches and highlights challenges and opportunities in the field. Although focused on healthcare, the insights from this study can be applied to automated irrigation management systems, emphasizing the importance of interoperability and standardization for seamless integration (Verma et al., 2021).
In addition to MQTT, other application layer protocols such as XMPP, CoAP, SOAP, and HTTP have been explored for real-time data transmission in IoT networks. Each protocol has its strengths and weaknesses, making them suitable for different applications and scenarios. XMPP (Extensible Messaging and Presence Protocol) is an open-standard protocol that supports real-time messaging, presence, and request-response services (Saint-Andre, 2011). CoAP (Constrained Application Protocol) is a specialized web transfer protocol designed for use with constrained nodes and networks in the Internet of Things (Shelby et al., 2014). SOAP (Simple Object Access Protocol) is a protocol for exchanging structured information in the implementation of web services, while HTTP (Hypertext Transfer Protocol) is the foundation of data communication for the World Wide Web (Fielding et al., 1999).
Motamedi and Villányi (2022) compared and evaluated wireless communication protocols for the implementation of smart irrigation systems in greenhouses, considering factors such as power consumption, range, reliability, and scalability. They found that ZigBee is the most suitable local communication protocol for greenhouse irrigation due to its large number of nodes and long range, while MQTT is the recommended messaging protocol for smart irrigation systems due to its TCP transport protocol and quality of service (QoS) options. GSM is a reliable and cost-effective global communication protocol for greenhouse irrigation, providing wide coverage and low cost (Motamedi & Villányi, 2022).
Syafarinda et al. (2018) investigated the use of the MQTT protocol in a precision agriculture system using a Wireless Sensor Network (WSN). They found that MQTT is suitable for use in IoT applications due to its lightweight, simple, and low bandwidth requirements. The average data transmission speed using the MQTT protocol was approximately 1 second, demonstrating its effectiveness for real-time data transmission in precision agriculture systems (Syafarinda et al., 2018).
The choice of application layer protocol for real-time irrigation management depends on factors such as data transmission speed, reliability, and energy efficiency. MQTT and RTPS (Real-Time Publish-Subscribe) are both suitable for real-time data transmission in IoT systems, but they have different strengths and weaknesses. MQTT is a better choice for applications that require low latency and high throughput, while RTPS is a better choice for applications that require high reliability and low latency (Sanchez-Iborra & Skarmeta, 2021). The exploration of MQTT and client-server IoT networks, along with the comparison of various application layer protocols, provides valuable insights into the suitability of these technologies for real-time data transmission in automated irrigation management systems.
In summary, real-time data transmission protocols and technologies play a vital role in the automation of irrigation management systems, enabling the efficient and reliable delivery of sensor data to the cloud for processing and decision-making. The exploration of MQTT and client-server IoT networks, along with the comparison of application layer protocols, highlights the importance of selecting suitable technologies based on factors such as data transmission speed, reliability, and energy efficiency. By leveraging these technologies, automated irrigation management systems can achieve seamless integration and contribute to the overall goal of enhancing agricultural water use efficiency and crop productivity.

3.5. Challenges and Solutions in Real-Time Data Transmission
Following the exploration of data collection, processing at the edge and fog, and automation in previous sections, we now turn to the critical aspect of real-time data transmission. While essential for automated irrigation management, this stage presents unique challenges that must be addressed to ensure system efficiency and reliability.
Obstacles in Real-Time Data Transmission
Agricultural environments present unique challenges for real-time data transmission, directly impacting the effectiveness of automated irrigation systems. Environmental factors can significantly disrupt wireless communication. Adverse weather conditions such as heavy rain, fog, and high winds can weaken or even block radio signals, leading to data loss and compromised system performance. Physical obstacles like trees, buildings, and uneven terrain further complicate signal propagation, creating reliability issues (Jukan et al., 2017; Yi & Ji, 2014; Zhang, Chang & Baoguo, 2018). These environmental challenges necessitate robust communication protocols and network architectures that can ensure consistent and reliable data flow.
In addition to environmental factors, technical limitations also present significant obstacles. Large-scale agricultural operations often demand long-distance data transmission, which can be hindered by the limited range of certain wireless communication protocols. Network congestion, occurring when multiple sensors transmit data concurrently, can lead to delays and potential data loss, further complicating real-time decision-making (Hameed et al., 2020). To mitigate these issues, researchers have investigated the potential of cognitive radio networks (CRNs) and dynamic spectrum access (DSA) for optimizing spectrum utilization and reducing interference (Righi et al., 2017; Shafi et al., 2018; Trigka & Dritsas, 2022). CRNs enable devices to intelligently sense and adapt to the surrounding radio environment, dynamically adjusting transmission parameters to avoid interference and improve communication efficiency. DSA, on the other hand, facilitates the dynamic allocation of unused spectrum, enhancing spectrum utilization and reducing congestion.
Furthermore, data security and privacy are paramount concerns in real-time irrigation systems. The sensitive nature of agricultural data, such as crop yields and farm management practices, necessitates robust security measures to prevent unauthorized access and data breaches (Gupta et al., 2020). Implementing secure communication protocols, authentication mechanisms, and encryption techniques is essential to protect data integrity and ensure the trustworthiness of the system.
Investigating Data Optimization Techniques
To enhance the efficiency and reliability of real-time data transmission in automated irrigation systems, researchers have explored a range of data optimization techniques. Data compression techniques aim to reduce the size of data packets transmitted over the network, minimizing bandwidth requirements and improving transmission speed (Rady et al., 2020; Karim et al., 2023). Lossless compression algorithms, such as Huffman coding and LZW, preserve data integrity while effectively reducing data size, ensuring that no information is lost during transmission (Cui, 2023). Lossy compression algorithms, such as JPEG and MP3, offer higher compression ratios but introduce a controlled level of data loss, which may be acceptable for certain applications where some loss of precision is tolerable (Karim et al., 2023). The choice between lossless and lossy compression depends on the specific application and the trade-off between data size and accuracy.
Data aggregation techniques provide another effective approach to optimize data transmission. By aggregating multiple sensor readings into a single representative value, such as average soil moisture or temperature, the number of transmissions can be significantly reduced, conserving bandwidth and energy resources (Cui, 2023). This is particularly beneficial in large-scale irrigation systems where numerous sensors are deployed across vast areas, generating substantial amounts of data. Additionally, data filtering techniques play a crucial role in improving data quality and reliability. Kalman filters and particle filters can effectively remove noise and outliers from sensor data, ensuring that only accurate and relevant information is transmitted and used for decision-making (Cui, 2023). This is essential for preventing erroneous data from influencing irrigation decisions and potentially leading to suboptimal water management.
Sensor calibration, drift correction, and fault detection are essential for maintaining data accuracy and reliability (Dos Santos et al., 2023). Regular calibration ensures that sensors provide accurate measurements over time, while drift correction techniques account for gradual changes in sensor readings due to environmental factors or aging. Fault detection mechanisms can identify and address sensor malfunctions or anomalies, preventing erroneous data from influencing irrigation decisions and potentially harming crops or wasting water.
Addressing the Challenges
Effectively addressing the challenges in real-time data transmission requires a multifaceted approach that encompasses environmental, technical, and data-related considerations. Implementing robust and adaptive communication protocols is crucial for overcoming interference and signal degradation caused by weather conditions and physical obstacles. Selecting appropriate protocols, such as LoRa or ZigBee, with suitable range and penetration capabilities can ensure reliable data transmission in challenging agricultural environments (Motamedi & Villányi, 2022). Additionally, employing techniques like frequency hopping and error correction codes can further improve communication resilience and mitigate data loss.
Optimizing network architecture is another key consideration. Deploying a distributed network architecture with edge and fog computing capabilities can significantly enhance data processing and transmission efficiency (Abdel Nasser et al., 2020; Tran et al., 2019). Edge devices can perform initial data processing and aggregation tasks, reducing the amount of data transmitted to the cloud and minimizing latency, while fog nodes can provide additional processing power and storage closer to the data source, enhancing scalability and reliability. This distributed approach alleviates the burden on the central cloud server and allows for more responsive and efficient irrigation management.
Data optimization techniques play a vital role in reducing bandwidth requirements and improving transmission efficiency. The choice of data compression, aggregation, and filtering techniques should be tailored to the specific requirements of the irrigation system, considering factors such as data type, accuracy needs, and available bandwidth. By carefully selecting and implementing these techniques, the overall performance and effectiveness of real-time irrigation systems can be significantly enhanced, leading to more sustainable water management practices and improved agricultural productivity.
By addressing these challenges and implementing appropriate solutions, real-time data transmission can become a reliable and efficient component of automated irrigation systems, contributing to the overall goal of achieving sustainable and productive agriculture in the face of growing food demands and water scarcity.

3.6. IoT Network Architectures and Variable Rate Irrigation (VRI) for Real-Time Irrigation
Real-time irrigation management systems heavily rely on the efficient and reliable transmission of data from sensors and weather stations to the cloud for processing and decision-making. However, agricultural environments present unique challenges to wireless communication, including adverse weather conditions, physical obstacles, and the limitations of wireless technologies. These challenges necessitate robust and adaptive solutions to ensure the consistent and timely flow of data, enabling truly autonomous irrigation scheduling.
Environmental factors, such as heavy rain, fog, and strong winds, can significantly disrupt wireless communication by attenuating or even blocking radio signals, leading to data loss and compromised system performance (Ed-daoudi et al., 2023; Jukan et al., 2017; Yi & Ji, 2014; Zhang, Chang & Baoguo, 2018). Dense vegetation, buildings, and uneven terrain create further complications by causing multipath propagation and shadowing effects (Yim et al., 2018; Gautam and Pagay, 2020). The study by Yim et al. (2018) on LoRa networks in a tree farm environment exemplifies these challenges, revealing reduced communication range and data reliability compared to theoretical expectations. This underscores the need for carefully selecting and optimizing communication protocols and network parameters to ensure reliable data transmission in such environments.
The study by Guzinski et al. (2014a) using a modified TSEB model further highlights the importance of high-resolution data in accurately capturing the spatial and temporal dynamics of energy fluxes influenced by environmental factors. This emphasizes the need for advanced data acquisition and processing techniques that can effectively represent the complexities of agricultural settings.
The limitations of traditional wireless communication technologies, such as limited range and network congestion, pose additional challenges for large-scale agricultural operations. Long-distance data transmission can be hindered by range limitations, while network congestion arising from numerous sensors transmitting concurrently can lead to delays and data loss, hindering real-time decision-making (Hameed et al., 2020). Addressing these challenges requires the exploration of advanced networking technologies that can optimize spectrum utilization, mitigate interference, and improve reliability and efficiency.
Cognitive Radio Networks (CRNs) and Dynamic Spectrum Access (DSA) offer promising solutions for optimizing wireless communication in agricultural settings. CRNs empower devices with the ability to intelligently sense and adapt to the surrounding radio environment, dynamically adjusting transmission parameters to avoid interference and improve communication efficiency (Righi et al., 2017; Shafi et al., 2018; Trigka & Dritsas, 2022). Research has explored the potential of CRNs in predicting Radio Frequency (RF) power to avoid noisy channels and optimize spectrum utilization (Iliya et al., 2014; Iliya et al., 2014). These studies demonstrate the effectiveness of combining optimization algorithms with artificial neural networks (ANNs) to enhance the accuracy and generalization of RF power prediction, enabling CRNs to make informed decisions about channel selection and avoid interference.
DSA complements CRN technology by dynamically allocating unused spectrum, further enhancing spectrum utilization and reducing congestion (Shi et al., 2023). The numerical model developed by Shi et al. (2023) showcases the potential of CRNs and DSA for optimizing wireless communication in challenging environments.
The integration of CRNs and DSA into the IoT network architecture requires careful consideration of spectrum sensing techniques, network topology, and data security. Research on cooperative spectrum sensing suggests that distributed approaches, where sensor nodes collaborate and share information, can significantly improve the accuracy and efficiency of spectrum sensing, particularly in dynamic environments (Trigka and Dritsas, 2022; Khalid & Yu, 2019). This collaborative approach enables a more comprehensive understanding of the radio environment and facilitates the identification of available frequency bands for data transmission.
The choice of network topology also impacts the performance and scalability of CRN-based irrigation systems. Mesh networks, where sensor nodes are interconnected and relay data for each other, offer enhanced resilience and coverage compared to star topologies where nodes communicate directly with a central gateway (Akyildiz & Vuran, 2010). However, mesh networks can be more complex to manage and may introduce additional routing overhead. The trade-off between network resilience and complexity needs to be carefully evaluated to select the most appropriate topology for a specific agricultural setting.
Data security and privacy are paramount concerns in IoT-based irrigation systems due to the sensitive nature of agricultural data (Gupta et al., 2020). Implementing secure communication protocols, authentication mechanisms, and encryption techniques is essential for protecting data integrity and ensuring system trustworthiness. Research on secure spectrum leasing and resource allocation algorithms for CR-WSN-based irrigation systems has demonstrated the potential of these technologies for enhancing security and efficiency (Hassan, 2023; Afghah et al., 2018).
In conclusion, the development of effective and reliable real-time irrigation management systems requires a comprehensive approach that addresses the challenges of data transmission in agricultural environments. The integration of robust and adaptive communication protocols, optimized network architectures, and advanced networking technologies like CRNs and DSA, along with a focus on data security and privacy, can contribute significantly to achieving the goal of autonomous and efficient irrigation scheduling.
4. AUTOMATED DATA PROCESSING IN THE CLOUD
4.1. Data Quality and Preprocessing
Data quality is paramount in automated irrigation systems as it directly influences the effectiveness of decision-making and water use efficiency. Issues like missing values, inconsistencies, and outliers arising from sensor malfunctions, environmental interference, or network problems (Lv et al., 2023) can significantly impact the performance of machine learning models used for irrigation scheduling and management.
Real-time data cleaning techniques are essential for addressing these challenges. Kalman filtering proves particularly effective in handling missing values and correcting erroneous readings by recursively estimating the system's state based on previous measurements and current sensor data, taking into account noise and uncertainty (Kim et al., 2020). Moving average techniques, by averaging consecutive data points, provide a more stable representation of the underlying trend, filtering out short-term fluctuations (Chhetri, 2023). For outlier detection, adaptive thresholding methods offer a dynamic approach, adjusting thresholds based on the statistical properties of the data to effectively identify anomalies and minimize false positives (Bah et al., 2021). These techniques are crucial in maintaining the integrity of real-time data streams and ensuring the accuracy of subsequent analyses.
Adaptive data preprocessing is essential for managing the diversity of data sources and formats commonly found in irrigation systems. Data normalization techniques, such as min-max scaling or z-score normalization, ensure that all features contribute equally to the analysis by transforming data values to a common scale (Pradal et al., 2016). This is crucial for preventing features with larger values from dominating the analysis and ensuring that all features are given equal consideration. Similarly, feature scaling methods, like standardization or normalization, optimize the range of feature values to improve the performance and convergence of machine learning models (Tortorici et al., 2024). By scaling features to a similar range, the influence of outliers is reduced, and the model's ability to learn from the data is enhanced.
Data fusion techniques play a critical role in integrating information from diverse sources, creating a more comprehensive and reliable dataset for irrigation management. Dempster-Shafer theory, a generalization of probability theory, allows for the expression of both uncertainty and the degree of conflict in evidence, making it suitable for fusing uncertain and conflicting data from heterogeneous sources (Sadiq and Rodriguez, 2004). This is particularly relevant in irrigation systems where data from different sensors may provide slightly different or even contradictory information due to sensor variations or environmental factors. Bayesian inference offers another powerful framework for combining information from multiple sources, updating the probability of a hypothesis as new evidence becomes available. By applying these techniques, data from soil moisture sensors, canopy temperature sensors, weather stations, and other sources can be integrated to provide a holistic understanding of crop water requirements and environmental conditions, leading to more informed and accurate irrigation decisions.
The impact of data quality extends beyond model accuracy to the robustness of machine learning models under varying conditions. Robust models should maintain consistent performance even when faced with data inconsistencies or unexpected situations. Techniques like data augmentation and domain adaptation can enhance model robustness by exposing the model to a wider range of data variations during training. Data augmentation involves generating additional training data by applying transformations or introducing noise to existing data, making the model more resilient to noise and variations in the real-world data. Domain adaptation techniques aim to adapt a model trained on one domain (e.g., a specific crop or geographic location) to perform well on another domain with different data characteristics. This is particularly relevant in irrigation management, where models may need to be applied to different crops, soil types, or climatic conditions.
The choice of data cleaning, preprocessing, and fusion techniques should be carefully considered based on the specific characteristics of the irrigation system and the available data. By selecting and implementing appropriate techniques, the accuracy, reliability, and robustness of machine learning models can be significantly improved, leading to more efficient and sustainable irrigation management practices.
4.2. Scalable and Autonomous Deployment using Containerization Strategies
The transition from data collection and transmission to efficient data processing requires a robust infrastructure capable of handling diverse workloads and data volumes. Containerization technologies, specifically Docker and Kubernetes, offer a promising solution for deploying and scaling data processing and machine learning modules within cloud environments like AWS, Azure, and GCP (Vargas-Rojas et al., 2024; Rosendo et al., 2022; Solayman & Qasha, 2023). Docker provides a standardized way to package applications and their dependencies into self-contained units known as containers, ensuring consistent and reproducible execution across different platforms (Rosendo et al., 2022). Kubernetes, acting as a container orchestrator, manages their deployment, scaling, and networking across a cluster of machines (Rosendo et al., 2022). This combination presents several advantages for automated irrigation management systems.
Firstly, containerization facilitates efficient resource utilization and scalability. By encapsulating applications and their dependencies, containers enable the isolation of resources and prevent conflicts between different modules (Vargas-Rojas et al., 2024; Solayman & Qasha, 2023). This isolation allows for the efficient allocation of resources, such as CPU, memory, and storage, to each container based on its specific needs. Kubernetes further enhances scalability by allowing for the automatic scaling of containers based on real-time demand, ensuring the system can adapt to varying workloads and data volumes, preventing bottlenecks, and ensuring responsiveness to changing conditions (Karamolegkos et al., 2023).
Secondly, containerization promotes portability and reproducibility. By packaging applications and their dependencies into a single unit, containers make it easy to move and deploy them across different cloud environments without the need for environment-specific configurations (Rosendo et al., 2022; Solayman & Qasha, 2023). This portability simplifies the development and deployment process, reducing the time and effort required to set up and manage the system. Additionally, containers ensure reproducibility by providing a consistent execution environment, regardless of the underlying infrastructure. This eliminates variability and ensures that the system will behave consistently across different deployments (Zhou et al., 2023).
Optimizing container orchestration and resource allocation is crucial to minimizing latency and maximizing throughput in real-time data processing pipelines. Techniques like auto-scaling and dynamic resource allocation play a critical role in this context (Hethcoat et al., 2024; Werner and Tai, 2023; Kumar et al., 2024). Auto-scaling automatically adjusts the number of container instances based on real-time demand, ensuring that sufficient resources are available to handle peak workloads while avoiding over-provisioning during periods of low demand (Hethcoat et al., 2024; Kumar et al., 2024). Dynamic resource allocation enables the fine-grained adjustment of resources allocated to each container based on its specific needs and the current workload (Werner and Tai, 2023). This ensures efficient resource allocation and provides each container with the necessary resources to perform its tasks effectively.
Performance monitoring tools, such as Kubernetes Metrics Server and Prometheus, are essential for gaining insights into the performance of containers and the overall system (Hethcoat et al., 2024; Kuity & Peddoju, 2023). These tools provide valuable data on key performance indicators, such as CPU and memory usage, network traffic, and application-specific metrics. By monitoring this data, administrators can identify bottlenecks, optimize resource allocation strategies, and continuously improve system performance (Hethcoat et al., 2024). This data-driven approach ensures that automated irrigation management systems can operate efficiently and reliably.
By integrating containerization technologies with optimization techniques and performance monitoring, automated irrigation management systems achieve the scalability, autonomy, and efficiency required for effective real-time data processing and decision-making. This approach facilitates a seamless and responsive system that can adapt to changing conditions and contribute to the overall goal of optimizing water resource management and increasing agricultural productivity.
4.3. Deploying ML Models for Data Processing
•	Architectures and frameworks for deploying machine learning models on cloud platforms for real-time data processing and inference in irrigation management systems, such as: TensorFlow Serving, Apache MXNet Model Server, ONNX Runtime
•	Techniques for optimizing machine learning model performance and resource utilization in cloud environments, such as: Model compression (e.g., pruning, quantization), Hardware acceleration (e.g., GPU, TPU), Distributed training (e.g., Horovod, BytePS)
•	Integration of deployed machine learning models with other components of the automated irrigation management pipeline, such as data preprocessing, decision-making, and control systems, using protocols like: MQTT, CoAP, RESTful APIs
4.4. Online Learning in the Cloud
•	Application of online learning techniques for continuously updating and improving machine learning models based on incoming real-time data, using algorithms such as: Stochastic gradient descent (SGD), Passive-aggressive algorithms, Online random forests
•	Architectures and frameworks for implementing online learning in cloud-based irrigation management systems, such as: Apache Spark Streaming, Apache Flink, AWS Kinesis, leveraging serverless computing and stream processing paradigms
•	Strategies for balancing exploration and exploitation in online learning to adapt to changing environmental conditions and optimize irrigation decision-making, using techniques such as: Multi-armed bandits, Bayesian optimization, Reinforcement learning (e.g., Q-learning, SARSA)


5. GENERATING AND APPLYING IRRIGATION INSIGHTS 
5.1. Real-Time Generation of Actionable Irrigation Insights
•	Advanced predictive models, such as deep learning (e.g., LSTM, CNN) and ensemble methods (e.g., Random Forests), for precise, site-specific irrigation recommendations
•	Integration of IoT sensor data (e.g., soil moisture probes, weather stations) and cloud-based data sources (e.g., weather forecasts, satellite imagery) using data fusion techniques (e.g., Kalman filtering) to enhance insight accuracy and resolution
•	Strategies for handling data heterogeneity, uncertainty, and quality issues in real-time insight generation, such as data preprocessing and outlier detection
•	Techniques for reducing computational complexity and latency, such as edge computing (e.g., fog computing), model compression (e.g., quantization), and hardware accelerators (e.g., GPUs)
5.2. Automated Application of Irrigation Insights
•	Architectures and protocols for seamless integration of ML-generated insights with IoT-enabled irrigation control systems, such as MQTT and CoAP for lightweight, real-time communication
•	Analysis of industry-leading products and services, such as smart irrigation controllers (e.g., Rachio) and cloud-based irrigation management platforms (e.g., CropX)
•	Strategies for ensuring reliability, security, and scalability of automated insight application, such as redundant communication channels and secure edge-to-cloud architectures
•	Case studies of successful implementations of closed-loop, autonomous irrigation systems in research and commercial settings, highlighting technologies used and benefits achieved

6. INTEGRATION, INTEROPERABILITY, AND STANDARDIZATION 
6.1. Interoperability and Standardization
•	Importance of interoperability and standardization in enabling seamless integration of automated irrigation components
•	Overview of existing and emerging standards for IoT devices, communication protocols, and data formats in precision agriculture (e.g., ISOBUS, agroXML, SensorML)
•	Role of standardization bodies and industry consortia in promoting interoperability (e.g., AgGateway, Open Ag Data Alliance, Agricultural Industry Electronics Foundation)
•	Challenges in adopting and implementing standards across diverse hardware and software platforms
•	Strategies for encouraging widespread adoption of standards and best practices for interoperability in automated irrigation systems
6.2. Integration with Existing Irrigation Infrastructure
•	Challenges and strategies for retrofitting legacy irrigation systems with IoT sensors, actuators, and communication devices
•	Hardware compatibility issues and solutions (e.g., adapters, modular designs)
•	Software and firmware updates to enable integration with automated decision-making systems
•	Data integration and normalization techniques for merging legacy and new data sources
•	Economic and practical considerations for transitioning from manual to automated irrigation management
•	Cost-benefit analysis of upgrading existing infrastructure vs. implementing new systems
•	Phased implementation approaches to minimize disruption and optimize resource allocation
•	Training and support requirements for farmers and irrigation managers adopting automated systems
•	Case studies and real-world examples of successful integration of automated irrigation with existing infrastructure
6.3. Integration with Other Precision Agriculture Technologies
•	Synergies between automated irrigation and complementary technologies
•	Remote sensing (satellite, UAV, and ground-based) for crop monitoring and evapotranspiration estimation
•	Soil moisture sensors and weather stations for real-time, localized data collection
•	Variable rate application systems for precise irrigation delivery based on crop requirements
•	Yield mapping and analytics for assessing the impact of automated irrigation on crop productivity
•	Architectures and frameworks for integrating diverse data sources and technologies into a unified precision agriculture ecosystem
•	Edge computing and fog computing paradigms for real-time data processing and decision-making
•	Cloud-based platforms for data storage, analysis, and visualization
•	API-driven approaches for modular integration of third-party services and applications
•	Challenges and solutions for ensuring data quality, consistency, and security across integrated precision agriculture systems
•	Data cleaning, preprocessing, and harmonization techniques
•	Blockchain and distributed ledger technologies for secure, tamper-proof data sharing and traceability
•	Access control and authentication mechanisms for protecting sensitive data and resources
•	Future trends and research directions in the integration of automated irrigation with advanced precision agriculture technologies (e.g., AI-driven crop modeling, robotics, and autonomous vehicles)
6.4. Cybersecurity Considerations for Integrated Automated Irrigation Systems
•	Unique security risks and vulnerabilities associated with IoT-based automated irrigation systems
•	Potential for unauthorized access, data tampering, and system manipulation
•	Implications of security breaches for crop health, water resource management, and farm productivity
•	Best practices and strategies for securing automated irrigation systems
•	Secure device provisioning and authentication (e.g., hardware security modules, certificates)
•	Encryption and secure communication protocols (e.g., TLS, DTLS)
•	Firmware and software updates to address emerging security threats
•	Network segmentation and access control to limit the impact of breaches
•	Role of cybersecurity standards and frameworks in guiding the development and deployment of secure automated irrigation systems (e.g., NIST CSF, IEC 62443)
•	Importance of user awareness, training, and incident response planning in maintaining the security of integrated automated irrigation systems

7. MONITORING AND ENSURING SYSTEM RELIABILITY
7.1. Resilience and Fault Tolerance in Automated Irrigation Systems
•	Strategies for ensuring robustness and reliability in the face of failures, disruptions, or unexpected events
•	Redundancy: Implementing redundant components, such as duplicate sensors (e.g., soil moisture sensors, weather stations), controllers (e.g., PLCs, microcontrollers), and communication channels (e.g., cellular, satellite, LoRaWAN) to maintain system functionality during component failures
•	Failover mechanisms: Designing seamless failover mechanisms that automatically switch to backup components or systems in case of primary system failure, such as hot-standby controllers or multi-path communication protocols (e.g., mesh networks, software-defined networking)
•	Self-healing capabilities: Incorporating AI-driven self-healing mechanisms that can detect, diagnose, and recover from faults without human intervention, using techniques like reinforcement learning, Bayesian networks, or self-organizing maps
•	The role of distributed architectures and edge computing in enhancing system resilience
•	Decentralizing critical functions and data processing to minimize the impact of single points of failure, using fog computing or multi-agent systems
•	Leveraging edge computing to enable localized decision-making and control, reducing dependence on cloud connectivity and improving response times, using technologies like Raspberry Pi, NVIDIA Jetson, or Intel NUC
•	Anomaly detection and predictive maintenance using AI techniques
•	Employing unsupervised learning algorithms (e.g., autoencoders, clustering) to detect anomalies in sensor data, system performance, and water usage patterns
•	Developing predictive maintenance models using techniques like long short-term memory (LSTM) networks, convolutional neural networks (CNNs), or gradient boosting machines (GBMs) to anticipate and prevent potential system failures based on historical data and real-time monitoring
7.2. Advanced Monitoring Techniques for Automated Irrigation Systems
•	Remote monitoring using IoT-enabled sensors and computer vision
•	Deploying a heterogeneous network of IoT sensors to collect real-time data on soil moisture (e.g., capacitive, tensiometric), temperature (e.g., thermocouples, thermistors), humidity (e.g., capacitive, resistive), and plant health (e.g., sap flow, leaf wetness)
•	Integrating high-resolution cameras (e.g., multispectral, hyperspectral) and computer vision algorithms for visual monitoring of crop growth, disease detection (e.g., using deep learning-based object detection and segmentation), and irrigation system performance (e.g., leak detection, sprinkler uniformity)
•	Transmitting sensor and camera data to cloud-based platforms (e.g., AWS IoT, Google Cloud IoT, Microsoft Azure IoT) for remote access and analysis using protocols like MQTT, CoAP, or AMQP
•	Innovative approaches for real-time system health assessment
•	Developing novel algorithms and metrics for evaluating the health and performance of automated irrigation systems, such as entropy-based measures, network resilience indices, or multi-criteria decision analysis (MCDA) frameworks
•	Combining data from multiple sources (e.g., sensors, weather forecasts, satellite imagery) using data fusion techniques (e.g., Kalman filters, Dempster-Shafer theory) to create a comprehensive view of system health
•	Employing advanced data visualization techniques (e.g., interactive dashboards, augmented reality) to present system health information in an intuitive and actionable format
7.3. Closed-Loop Control and Feedback Mechanisms
•	Exploring the concept of closed-loop control in autonomous irrigation systems
•	Implementing feedback loops that continuously monitor system performance and adjust irrigation schedules based on real-time data, using control techniques like proportional-integral-derivative (PID), model predictive control (MPC), or fuzzy logic control (FLC)
•	Integrating machine learning algorithms (e.g., reinforcement learning, genetic algorithms) to optimize closed-loop control strategies over time, adapting to changing environmental conditions and crop requirements
•	Designing effective feedback mechanisms for user interaction and system optimization
•	Providing user-friendly interfaces (e.g., mobile apps, web dashboards) for farmers to input preferences, constraints, and expert knowledge into the automated irrigation system, using techniques like participatory design or user-centered design
•	Incorporating user feedback and domain expertise to refine irrigation strategies and improve system performance
8. CASE STUDIES AND REAL-WORLD IMPLEMENTATIONS OF FULLY AUTONOMOUS IRRIGATION SYSTEMS
8.1. Fully Autonomous Irrigation Systems in Diverse Agricultural Settings
•	Row Crops: maize, wheat, soybean with real-time soil moisture monitoring and weather-based irrigation scheduling for fully automated precision irrigation
•	Orchards: citrus, apple, almond with plant health monitoring and precision water application for fully autonomous orchard management
•	Greenhouses: tomato, lettuce, herbs with automated drip irrigation and climate control integration for fully automated greenhouse operations
•	Urban Farming: rooftop gardens, vertical farms with IoT-enabled hydroponic systems and remote management for fully autonomous urban crop production
8.2. Integration of Advanced System Components for End-to-End Automation
•	Wireless sensor networks: soil moisture probes, weather stations, plant health monitoring cameras with low-power, long-range communication for fully automated data acquisition
•	Secure data transmission: LoRaWAN, NB-IoT, 5G, satellite communication for reliable, real-time data transfer from field to cloud in fully autonomous irrigation systems
•	Intelligent data processing: edge computing for local data filtering, cloud platforms for scalable storage and analysis, machine learning algorithms for predictive insights in fully automated irrigation management
•	Autonomous decision-making: advanced irrigation scheduling algorithms, precise valve control, closed-loop feedback systems for optimal water management in fully autonomous irrigation systems
8.3. Quantitative Performance Evaluation of Fully Automated Irrigation Systems
•	Water use efficiency: percent reduction in water consumption compared to conventional methods, improved water productivity (yield per unit of water) achieved through fully autonomous irrigation
•	Crop yield and quality improvements: percent increase in yield, enhanced crop uniformity, improved nutritional content attributed to fully automated precision irrigation
•	Labor and energy savings: quantified reduction in labor hours for irrigation management, decreased energy consumption for pumping due to optimized scheduling in fully autonomous systems
•	Economic viability: detailed return on investment analysis, payback period calculations, comprehensive cost-benefit analysis for fully autonomous irrigation management systems
8.4. Lessons Learned and Challenges Encountered in Deploying Autonomous Irrigation Systems
•	Technical challenges and solutions: ensuring reliable data transmission in remote locations, addressing interoperability issues between diverse system components, optimizing power consumption for extended battery life, adapting algorithms to local soil and weather conditions in fully autonomous irrigation systems
•	Operational and logistical hurdles: streamlining installation and maintenance procedures, providing effective user training, seamlessly integrating with existing farm management practices and legacy systems for fully automated irrigation management
•	Regulatory and socio-economic considerations: navigating complex water use regulations, addressing data privacy and security concerns, ensuring equitable access and affordability for smallholder farmers adopting fully autonomous irrigation technologies
8.5. Best Practices and Recommendations for Successful Implementation
•	Designing scalable, modular, and adaptable autonomous irrigation systems to accommodate future growth and changing requirements for fully automated water management
•	Prioritizing user-centered design principles and actively engaging stakeholders throughout the development and deployment process of fully autonomous irrigation solutions
•	Adopting open standards and communication protocols to enable seamless integration of system components and interoperability with third-party platforms in fully automated irrigation setups
•	Implementing robust data validation, filtering, and quality control mechanisms to ensure data integrity and reliability for decision-making in fully autonomous irrigation systems
•	Establishing clear data governance policies and security frameworks to protect sensitive information and maintain user trust in fully automated irrigation management
•	Developing intuitive user interfaces and decision support tools to facilitate easy adoption and effective use of fully autonomous irrigation systems
•	Collaborating with local extension services, agribusinesses, and technology providers for knowledge transfer, technical support, and continuous improvement of fully automated irrigation solutions
8.6. Synthesis of Case Studies and Implications for Autonomous Irrigation Adoption
•	Cross-case analysis of key performance indicators and critical success factors for fully autonomous irrigation scheduling systems in various contexts
•	Identification of common themes, challenges, and innovative solutions across diverse implementations of end-to-end fully automated irrigation management
•	Assessment of the potential for replicability and scaling of successful fully autonomous irrigation projects in different regions and farming systems
•	Implications for future research priorities, technology development roadmaps, and policy interventions to support widespread adoption of fully autonomous irrigation technologies

CONCLUSION/FUTURE DIRECTIONS AND UNANSWERED QUESTIONS
•	Summarize the key insights gained from the question-driven review, emphasizing how each section contributes to the overarching goal of achieving real-time, end-to-end automation in irrigation management
•	Based on the questions addressed, propose new research directions and unanswered questions
•	Identify key research gaps and propose concrete research questions and hypotheses for advancing the field of real-time, automated irrigation management
•	Highlight the need for collaborative research efforts across disciplines, such as computer science, agricultural engineering, and environmental science, to address the complex challenges of automated irrigation systems
•	Emphasize the need for further innovation and exploration in real-time, automated irrigation systems



</previous_sections>

</documents>
<instructions>


Use the information provided in the <documents> tags to write the next subsection of the research paper, following these steps:
1. Review the overall intention of the research paper, specified in the <review_intention> tag. Ensure the subsection you write aligns with and contributes to this overall goal.
2. Consider the specific intention for this subsection of the paper, stated in the <section_intention> tag. The content you write should fulfill this purpose. 
3. Use the title provided in the <subsection_title> tag as the heading for the subsection. 
4. Address each of the points specified in the </subsection_point_Point *> tags:
   a) Make a clear case for each point using the text provided in the "point" field.
   b) Support each point with evidence from the research papers listed in the corresponding "papers to support point" field.
   c) When citing a paper to support a point, include inline citations with the author name(s) and year, e.g. (Smith et al., 2020; Johnson and Lee, 2019; Brown, 2018). Cite all papers that strengthen or relate to the point being made.
   d) While making a point and citing the supporting papers, provide a brief explanation in your own words of how the cited papers support the point.
5. Ensure that both of the points from the <subsection_point> tags are fully addressed and supported by citations. Do not skip or combine any points.
6. After addressing the specified points, wrap up the subsection with a concluding sentence or two that ties the points together and relates them back to the <section_intention>.
7. Review the <Previous_sections> of the paper, and ensure that the new subsection you have written fits logically and coherently with the existing content. Add transition sentences as needed to improve the flow.
8. Proofread the subsection to ensure it is clear, concise, and free of grammatical and spelling errors. Maintain a formal academic tone and style consistent with the rest of the research paper.
9. Format the subsection using Markdown, including the subsection heading (using ## or the equivalent for the document), inline citations, and any other formatting needed for clarity and readability.
10. If any information is missing or unclear in the provided tags, simply do your best to write the subsection based on the available information. Do not add any information or make any points not supported by the provided content. Prioritize fully addressing the required points over hitting a specific word count.

The output should be a complete, well-organized, and properly cited subsection ready to be added to the research paper.

Begin your answer with a brief recap of the instructions stating what you will to optimize the quality of the answer. Clearly and briefly state the subsection you'll be working on and the points you'll be addressing. Then proceed to write the subsection following the instructions provided. 

Critical: 
- Do not include a conclusion or summary as the entry is in the middle of the document. Focus on addressing the points and supporting them with evidence from the provided papers. Ensure that the subsection is well-structured, coherent, and effectively contributes to the overall research paper.
- The subsection we are focusing on is: 4.4. Online Learning in the Cloud
- No need for sub-sub-sections. just provide paragraphs addressing each point. They should transition fluidly and narurally into each other.
- Ensure that the content is supported by the provided papers and that the citations are correctly formatted and placed within the text.
- Do not repeat content from the previous sections. Ensure that the information provided is new and relevant to the subsection being written.



</instructions>

<subsection_point_Point 3>
Point: Integration of deployed machine learning models with other components of the automated irrigation management pipeline, such as data preprocessing, decision-making, and control systems, using protocols like MQTT, CoAP, RESTful APIs

Papers to support point:

Paper 1:
- APA Citation: Poojara, S., Jõeleht, A., Jakovits, P., & Srirama, S. N. (2023). Serverless Outlier Management for Environmental IoT Data - A Case Study of PuhatuMonitoring. 2022 IEEE 8th World Forum on Internet of Things (WF-IoT), 1-6. https://doi.org/10.1109/WF-IoT54382.2022.10152102
  Main Objective: To design and evaluate two serverless data pipeline approaches for real-time data processing and integration of machine learning models in an automated irrigation management system.
  Study Location: Puhatu Nature Protection Area, North West Estonia
  Data Sources: IoT sensor data, environmental data
  Technologies Used: Apache NiFi, MQTT, OpenFaaS, InfluxDB, Grafana
  Key Findings: The Apache NiFi-based approach exhibited lower processing time and higher disk utilization compared to the MQTT-based approach. The MQTT-based approach experienced higher processing time and lower disk and memory utilization. Suitability analysis indicated that the Apache NiFi-based approach is more suitable for environmental monitoring applications like PuhatuMonitoring.
  Extract 1: One of the suggested approaches utilizes Apache NiFi, a data management platform known for its reliability and adaptability, while the other approach involves utilizing Message Queue Telemetry Transport (MQTT), a commonly used protocol for IoT data transfer.
  Extract 2: These approaches enable seamless communication between the deployed machine learning models and the other components of the automated irrigation management system, ensuring efficient data exchange and enabling real-time decision-making.
  Limitations: The study focuses primarily on the integration and performance evaluation of two specific serverless data pipeline approaches. It does not extensively explore the broader context of real-time irrigation management, such as specific irrigation techniques, crop water requirements, or environmental factors.
  Relevance Evaluation: The point of focus for this review is on the integration of deployed machine learning models with other components of the automated irrigation management pipeline, using protocols like MQTT, CoAP, and RESTful APIs. The paper in question is directly relevant to this point as it proposes two serverless data pipeline approaches for integrating machine learning models with other components of the irrigation management pipeline.
  Relevance Score: 1.0
  Inline Citation: (Poojara et al., 2023)
  Explanation: The paper presents a comprehensive end-to-end automated system for real-time irrigation management, with a specific focus on deploying machine learning models for data processing. The authors propose two different serverless data pipeline approaches, Apache NiFi-based and Message Queue (MQTT)-based, to integrate deployed machine learning models with other components of the irrigation management pipeline efficiently.

 Full Text: >
"This website utilizes technologies such as cookies to enable essential site functionality, as well as for analytics, personalization, and targeted advertising purposes. To learn more, view the following link: Privacy Policy Manage Preferences IEEE.org IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account Personal Sign In Browse My Settings Help Access provided by: University of Nebraska - Lincoln Sign Out All Books Conferences Courses Journals & Magazines Standards Authors Citations ADVANCED SEARCH Conferences >2022 IEEE 8th World Forum on ... Serverless Outlier Management for Environmental IoT Data - A Case Study of PuhatuMonitoring Publisher: IEEE Cite This PDF Shivananda Poojara; Argo Jõeleht; Pelle Jakovits; Satish Narayana Srirama All Authors 73 Full Text Views Abstract Document Sections I. Introduction II. Background III. Related Work IV. Puhatu Monitoring System V. Data Analysis and Machine Learning Show Full Outline Authors Figures References Keywords Metrics Footnotes Abstract: PuhatuMonitoring (PM) is an IoT application for observing the water level changes in a wetland in the Puhatu Nature Protection Area (NPA), North West Estonia next to an open-pit oil-shale quarry. IoT devices are installed for monitoring the environment and the LORAWAN things network stack is used to collect raw sensor data into the cloud. A major challenge faced by geologists were outliers in the collected data, caused by natural and weather conditions or device/sensor failures. We propose a system for data collection, detection of outliers using unsupervised machine learning algorithms, tagging of outlier data, and storing the results. We utilize Serverless (FaaS) model to deploy individual data processing services as virtual functions, which can be executed in an event-driven manner on data streams. We designed two different serverless data pipeline (SDP) approaches: Apache NiFi and Message Queue (MQTT) based. We investigated the performance of the two proposed approaches and results showed that Apache NiFi-based SDP approach has a lower processing time and higher disk utilization. In contrast, the MQTT-based approach experienced higher processing time and lower disk and memory utilization. Our suitability analysis showed that Apache NiFi-based approach suits better for environment monitoring applications like PuhatuMonitoring. Published in: 2022 IEEE 8th World Forum on Internet of Things (WF-IoT) Date of Conference: 26 October 2022 - 11 November 2022 Date Added to IEEE Xplore: 22 June 2023 ISBN Information: DOI: 10.1109/WF-IoT54382.2022.10152102 Publisher: IEEE Conference Location: Yokohama, Japan SECTION I. Introduction Advancements in ICT technologies have accelerated the de-ployment of large-scale IoT systems, making them ubiquitous in a wide spectrum of applications [1]. The reliability, accuracy and usability of critical applications heavily rely on sensor data duality. However, it is not possible to always expect accurate data due to the malfunction of in-situ sensors [2]. Malfunctions can produce incorrect or erroneous data, normally referred to as outliers, which have many different causes from deploying sensors in harsh environments, low quality of manufacturing to usage of inexpensive electrical components. Puhatu Monitoring is an environmental monitoring IoT application for observing if the groundwater lowering affects surface water regime in the wetland. Data is collected from IoT devices installed in the wetland using the LORAWAN The- Things-Network stack. Initial Exploratory Data Analysis (EDA) indicated that the collected data contains a large num-ber of outliers, such as reporting 500 cm water level instead of usual 70 cm. This can be caused, for example, by plants that occasionally move with wind in front of a sensor, snow with uneven surface, or uncertain weather conditions. Similar outliers were also found in air temperature and pressure sensors. It is a challenging and complex task for geologists to monitor outliers in real-time from a large number of sensors located at various places in the monitoring site. This work addresses the above-mentioned challenges by designing a scaleable end-to-end system for raw data col-lection, parsing, online outlier detection, tagging, and storing it in a time-series database. The IoT outlier detection is of considerable interest in the research community and several algorithms had been proposed [2] from statistical [3] to machine learning techniques [4], offline to online and hybrid mechanisms. We tested seven unsupervised machine learning algorithms including density-based clustering, classification, and tree-based ensemble algorithms. However, the data handling and outlier detection in real-time IoT applications is a complex process. To extract out-liers from the raw data stream, it is needed to pre-process, transport and transform data, and apply machine learning models. Any identified outliers should be tagged, stored, and alerts raised. To simplify designing and deploying such multi-stage applications, data pipelines management platforms are commonly used [5] such as Apache NiFi [6] to manage the data acquisition, routing and control. In addition, the emergence of serverless computing the real-time and scalable IoT data processing has been significantly simplified [7]. The data analytic operations can be designed as serverless functions, easily deployed, and scaled in het-erogeneous environments. The integration of data pipelines with serverless functions constitutes Serverless Data Pipelines (SDP), serverless functions are used as pipeline tasks and seamlessly invoked while the data moves through the pipeline. Our previous work [8] investigated such kinds of SDPs approaches (Apache Nifi based, Message Queue based, and Object Storage based) for IoT applications. The results showed that Apache NiFi and Message Queue-based SDPs are more suitable for non-binary data. Contributions of this work are the following: The architecture for data acquisition over LORAWAN, data pre-processing, storage, and visualization. Exploratory data analysis on the collected data and we in-vestigated the accuracy and performance of unsupervised machine learning algorithms for outlier detection. Proposed two different serverless real-time anomaly de-tection data pipelines. Applicability analysis of two SDP approaches, with dis-cussion of their advantages and disadvantages. The rest of the paper is organized as follows. Section II presents the background of outliers in IoT data, serverless computing, and data pipelines. The state-of-the-art in out-lier detection mechanisms and IoT serverless architectures is presented in section III. The proposed end - to-end system is described in section IV. Exploratory data analysis and outlier detection is described in Section V. The proposed serverless data pipeline architectures is presented in section VI and compared in section VII. Finally, conclusions and future works are discussed in section VIII. IoT applications and sensor grids produce ever increasing volume and velocity of data which increases the probability of noise, incorrect data and anomalies which hinders making decisions based on the data. The goal of anomaly detection is to identify any kind of outliers in data. The outliers can be classified into three different groups: point - wise, contextual and collective or pattern anomalies [9]. Point anomalies exist for a short period of time and can retain the previous normal state immediately and may be due to noise in the sensing equipment. Contextual outliers are data points that deviate from the rest of the dataset in a specific context, and can be detected in context subset but may not be recognized as outliers when seeing the whole dataset. The collective anomalies occur with specific patterns over a period of time. PuhatuMonitoring data mostly contains point anomalies and the extended analysis of the data are described in Section V. A. Outliers in Iot Streaming Data This section provides the background on different types of outliers and anomalies in the IoT streaming data, and describes serverless computing and data pipelines technologies. SECTION II. Background B. Serverless Computing and Data Pipelines Serverless computing or Function as a Service (FaaS) is a cloud computing service model that leverages the granular scaling and billing at the function level, where developers do not need to manage the infrastructure. Due to event-driven invocation and easy deployment of functions over heterogeneous hardware, Serverless computing is becoming heavily used in IoT deployments. The outlier management process typically consists of several stages like raw data collection from IoT sensors, pre-processing, applying machine learning model for outlier detection, tagging outliers and storing the results. Such a sequence of stages is modeled in a pipeline manner with data processed at each stage and provided as input to next stages. Data pipelines (DP) are chains of workflows with a series of data processing components [10]. A DP tool/engine is a system with build-in components that captures, organizes/manipulates, and routes data to one or more required locations. Modern DP tools are available as open-source (Apache NiFi [6], Stream-Set, Apache Airflow) or as commercial products (Google Data Flow). Leveraging of such data pipeline engines in IoT data processing has several benefits such as accountability and guaranteed delivery. Fig. 1. Abstract view of puhatu-monitoring iot system Show All SECTION III. Related Work This section provides a summary on current state of art in the field of serverless solutions for IoT data processing and outlier detection mechanisms using supervised, unsupervised and statistical methods. Our proposed work focused on unsu-pervised algorithms for outlier detection. Recently, much of the research work aimed to detect anoma-lies using supervised and unsupervised machine learning meth-ods [11]. Rui et al. investigated and proposed KNN based approximate known grid-based classification algorithm for IoT streaming data [12], similarly Xiaowu et al. proposed one class support tucker machine and genetic algorithm by modifying vector-based One-Class Support Vector Machine [13]. Part et al. investigated Bayesian Classification based outlier identification for real-time IoT streaming analytics in Manufacturing [14]. However, most of the supervised techniques focus on classification which requires labels but it's hard to obtain perfect labels in IoT environments [15]. Morgan et al. [18] proposed a dependable IoT data stream processing system for monitoring the urban infrastructures mainly anomalous behaviour in IoT sensors. Their work resembles the similar theme of our proposed work, but data stream processing requires large compute clusters, that may be not be a good choice for small size and event driven applications due to cost. Alessandra et al. [19] used LoRAWAN stack for monitoring and controlling the wastage of water in irrigation systems, they used ThinkSpeak cloud for data collection and visualization and not fully focused on data processing. Notably, Unsupervised machine learning methods such as Local Outlier Factor (LOF) [16], Density-Based Spatial Clustering of Applications (DBSCAN), K-Means, LSTM, and auto-encoders [17] have gathered significant interest in anomaly detection in IoT applications due to advantage of identifying outliers without considering the labels and han-dling efficiently the high dimensional multivariate IoT data. SECTION IV. Puhatu Monitoring System Considering the challenges and current state of the work, we have proposed a serverless data pipeline approach for end-to-end system architecture for PM data collection, processing and outlier detection. It is described in the following section. The wetland environmental monitoring takes place in the northern part of the Puhatu Nature Protection Area (NPA), Fig. 2. Data acquisition layer Show All NW Estonia, next to the open-pit oil-shale quarry. The actual mining occurs mostly 1 km to the north of the NPA boundary, but underground parts of the mine, groundwater pumping, and draining channels are only a couple hundred meters from the protection area. The aim of the monitoring network is to observe if groundwater lowering affects the surface water hydrological regime in the wetland. Two main parameters are monitored. First, water level fluctuations with respect to the ground surface are done in shallow wells that are penetrated in peat. Second, peat ground surface altitude changes need to be measured relative to mineral soil below the peat because highly porous water-saturated peat itself may compact due to long-term groundwater lowering. There are 15 monitoring sites, grouped into five profiles that are roughly perpendicular to the Puhatu NPA / quarry boundary. An abstract view of Puhatu-Monitoring is shown in Fig-ure 1. This is inclusive of three layers in the system and is responsible to collect and store the sensory data from the monitoring system to cloud storage. It consists of three layers: Data Acquisition Layer (DAL), Data Processing Layer (DPL), and Data Storage and Visualization Layer (DSVL). The DAL is a primary layer to collect raw streaming data (payload) from a set of environmental monitoring sensors and decode the payload to extract the sensor data and metadata. Further, DPL is the intermediate layer responsible to collect the data from DAL and pass through the data pipeline to convert the data formats and extract the required features to store in a time-series database. Finally, the DSVL is responsible to store and generate visualization charts to show the data stream measurements over the timestamps. It also has the alert mechanism to inform an organization of a major change in data stream readings. The detailed description of individual layers is mentioned in the following subsections. A. Data Acquisition Layer Data Acquisition Layer consists of hardware components such as IoT devices connected with in-situ sensors, LORA gateway, and Network server. The monitoring area is very remote and LTE does not extend to all sites. One of the monitoring IoT devices is shown in Figure 3. IoT devices are attached to mineral soil-anchored steel tubes that also serve as poles for the LORA antenna. Devices are powered by a LiPo battery that is charged using a 2W solar panel. IoT devices have an MS5803-07 pressure sensor to measure absolute pressure and temperature in the water well whereas Fig. 3. Puhatu iot device in winter Show All Ground surface elevation changes were measured with the MAXBOTIX MB7360 ultrasonic distance sensors that were located at the base of the device box. Since steel tubes and the device box is anchored to the mineral soil, the change in the distance indicates the rise or lowering of peat surface. Initially, measurements were made to the natural ground, but moss and grass form a rough surface from which ultrasound reflections are weak and distances vary. Therefore, the short plastic pipe was inserted in the peat soil so that its top surface extended 20 cm above the ground. Having reference above the actual ground surface also helps to get true ground surface fluctuations because in rainy periods the area may be flooded. the same type of sensor or MS6805 pressure sensor is in the device box to measure air pressure and temperature. The water level in the well is calculated as the pressure difference between these two sensors, expressed as meters of H20. The IoT device is controlled by Pycom FiPy on Expansion board. It has ESP32 chip that is Micropython programmable. It supports five networks including LoRa. The aim of the DPL is to pre-process the raw data, detect the outliers, tag the data and make it ready to store in the storage server in the DSVL layer as shown in Figure 4. The DPL consists of software services such as Apache NiFi, a Serverless run-time engine, and a Message Queue broker (MQTT) based on the type of the SDP design. B. Data Processing Layer Figure 4 illustrates the working of the Data processing Layer. The Network Server (TheThingsNetwork Server) re-ceives the raw payload from the IoT device and decodes it, then publishes it to various endpoints such as MQTT or HTTP APIs. The decoded payload is subscribed from the MQTT broker. The MQTT subscriber is connected to the broker over a TLS encryption channel. Here, the MQTT subscriber subscribes to the topic /up which means, data will be received from all the active devices in the Network Server. The consumed data is in json format and passed to the next task for pre-processing the data. The raw data (json) received has the sensor readings, metadata, and other gateway-related information. The pre-processing task is to extract the required json fields and normalize the sensor readings. Fig. 4. Data processing layer Show All Fig. 5. Data storage and visualization layer Show All Further, parsed data are moved to the next task to prepare these data as per InfluxDB line protocol format and also forward to the outlier detection task to identify the anomaly in the data using the Machine Learning model. The training, testing, and exporting ML algorithm is explained in the Section V. The outlier tagging task is to tag the data that the data stream has anomalous sensor readings. Further, it is also to be stored in the storage server. The Insert to storage task invokes HTTP API of influx to insert data into InfluxDB in the DVSL layer. C. Data Storage and Visualization Layer The primary function of the DSVL as shown in Figure 5 is to store historical data and to visualize the sensory readings to end-users. It consists of InfluxDB scalable time-series database to store the parsed data based on time intervals and Grafana visualization tool to generate interactive charts. The collected data are used for training the outlier detection algorithm as described in the below Section V. SECTION V. Data Analysis and Machine Learning This section describes the exploratory data analysis of the collected data, including training, testing, and validating unsupervised machine learning algorithms for outlier detection. Raw sensor data was collected approximately for 19 months using Apache NiFi-based data processing pipeline as mentioned in the Section IV. The collected raw data consist of 18560 rows. The features of data are classified into two categories: metadata of IoT devices and sensor data. Table I shows the list of all the features in the data with corresponding descriptions and units of measurement. Statistical analysis shows that dist has a higher standard deviation with the value of 100.42 and a mean of 61.56. This value shows that the dist feature has the noisiest data. Similarly, air _Temp and wat_Temp have moderate deviated values from the mean. Table I Features and their measurement metric Table II Outlier detection algorithms and accuracy comparison We conducted Augmented Dickey-Fuller (ADF) test for checking the stationary in the time series and the result shows that all the features are stationary in nature. In stationary time series, the statistical properties (e.g., mean, variance, auto-correlation) don't change over time and it is convenient to identify the anomaly behavior of that time series. Further, we visualized the data using scatter plots as shown in Figure 6. This helps to visually identify the outliers in the data set. The most outliers from sensor data belong point-wise in nature as shown in Figure 6. The distance sensor have contextual outliers at a certain period of time. To identify such point-wise and contextual outliers for real-time PM data streams, we trained, tested, and validated seven unsupervised ML algorithms that include density-based clustering, classification, and tree-based ensemble algorithms as shown in Table II. The collected data need to be cleaned due to noise, null values, and erroneous data. Further, we split the data with 70% training and 30% testing. For unsupervised outlier detection algorithms setting up of contamination factor (indicates the percent of an outlier in the data) parameter is highly desirable to obtain the accuracy of the model. The contamination factor is set to 0.45, this value is decided after several iterations of testing. The model construction process underwent fitting, pre-dicting over the training data, and validation with the testing data. The scikit -learn 1 and python outlier detection toolkits 2 are used to train and test the algorithms. The accuracy metrics such as Precision, Recall, and F1 are calculated as shown in Table II. Fig. 6. Outliers from raw sensor data of three sensors (air and water temperature sensor, distance sensor) Show All Fig. 7. Mqtt-based sdp. (SF: serverless function, mq: message queue) Show All Fig. 8. Apache nifi-based sdp. (SF: serverless function) Show All The linear and clustering algorithms such as OCSVM (linear model), KNN, and AKNN performed well as compared with probabilistic (ABOD), tree (IF), and density-based algorithms. Considering the F1 Score, AKNN has higher values of 0.79 with a Precision of 0.67 and Recall of 0.99 as compared with other algorithms. In our proposed work, we dumped the trained AKNN algorithm and used it for real-time outlier detection algorithm in the SDP approaches as described in Section VI. SECTION VI. Proposed Serverless Data Pipeline Approaches This section describes the two proposed serverless data pipeline approaches for outlier detection namely Apache NiFi based and Message Queue (MQTT) based SDP. MQTT-based SDP: To design the MQTT-based SDP, the sequence of tasks in DPL is decomposed in to set of OpenFaaS serverless functions (SF) and is invoked with the data unit. These functions consume the data unit and send responses with processed data, which act as an input to the next serverless functions. Due to the state-less nature of serverless platforms, the MQTT message broker is used to store the intermediate data unit in the queue in between serverless functions. The data unit is received from the data source, is processed by a set of functions in a pipelined manner followed by storing intermediate data in a message queue, and finally reaches the data sink. The proposed MQTT-based SDP for PuhatuMoni-toring is shown in the Figure 7. The data unit (stream) from DAL, is passed to preprocessing SF, which extracts json elements, and publishes the parsed, normalized data to Message Queue (MQ). Insert to Storage SF is used to store the data and Outlier Detection SF will detect the outlier in the data using a trained, tested ML model. Tagging SF will tag the data with an anomaly (or not) and store it in the storage system. The OpenFaaS MQTT-connector is used to subscribe to the data associated with the topic and invoke the corresponding SF. Each queue in the pipeline requires a separate MQTT-connector. 3 connectors and 4 serverless functions were used in this pipeline. Here, we use four processors namely Evaluatelson, Invoke-HTTp, ReplaceText, and PutInflux. The Evaluatelson processor takes the raw json data from DAL and extracts the required json elements. InvokeHTTP used to invoke SF (Outlier De-tection and Tagging) and PutInflux is used to insert data into the storage system. We use only two serverless functions as compared to MQTT-based SDP. Apache NiFi-based SDP: Apache NiFi is an off-the-shelf open-source tool to design data pipelines using a set of in-built processors. The Processor is the basic building block used to comprise a NiFi data flow and currently, 154 processors are available. The processor consumes the flow file (data unit), performs the operation, and pushes it into the in-memory queue which is connected to the next processor. The tool itself will handle the assignment of flow files (data units) between the processors. The integration of Apache NiFi with Serverless platforms provides greater flexibility and robustness in designing the data processing pipelines. The Apache-NiFi based SDP for PuhatuMonitoring is shown in the Figure 8. Fig. 9. Processing time Show All Fig. 10. Cpu and memory utilization Show All SECTION VII. Evaluation and Results The proposed SDPs for PuhatuMonitoring were deployed in real-time and their respective performance was evaluated. In this section, we describe the experimental setup and per-formance metrics used to evaluate the suitability and accuracy of the two proposed SDPs, and discuss the results. A. Performance Metrics The performance metrics we measure include processing time (addition of computation and communication time) and resource utilization metrics such as average CPU and Memory utilization, average disk read and write and average network receive and transmit. The mathematical formula's considered for all the metrics are referred from our previous article [8]. The resource utilization metrics are calculated cumulative of cloud resources used in DPL. To investigate the performance effectively, we scaled the number of IoT devices concurrently by sending the IoT data, which mimics the real-time scenario. The Prometheus and Node Exporter software stack and Pro-moQL are used to collect resource utilization metrics. B. Experimental Setup The Docker v20.l0.l4 is installed and the Rancher version of the two-node Kubernetes cluster is configured on the OpenStack cloud infrastructure. The components of DPL and DSVL are deployed as a service in the Kubernetes cluster that includes OpenFaaS Serverless platform, MQTT message broker, Apache NiFi vl.3.2, InfiuxDB 2.0, and Grafana v8. The python 3.8 run time is used to design the serverless functions and OpenFaaS CLI is used to build, and deploy the functions on the cluster. The University's OpenS tack Cloud is used as cloud infrastructure. Two Virtual Machines with size m3.medium (Memory-8 Giga Bytes, 4 vCPU) resembling the similar capacity as A WS VM are provisioned. After setting up of necessary hardware and software services for two SDPs, the performance metrics are measured and the results are discussed in the below sub-section. Fig. 11. Disk read and disk write Show All Fig. 12. Network transmit and received Show All C. Results and Discussions To investigate the performance of the proposed SDPs, we scaled the number of IoT devices. The rate of arrival of data units heavily impacts pipeline performance. Further, we measured the performance based on the evaluation metrics. The measured processing time (in sec) is shown in the Figure 9. The x-axis represents the number of devices sending the data units for processing. Apache NiFi-based SDP requires a minimum processing time of 137 seconds, whereas the MQTT-based SDP required 167 seconds to process data of 1000 devices. The MQTT-based SDP required a significantly more time as compared with Apache NiFi-based SDP, this was due to two reasons. Firstly, maximum communication time was required in the mqtt-connector and three connectors were used in the pipeline. Secondly, more number of serverless functions required to design the MQTT-based SDP as compared with Apache NiFi-based SDP. The CPU and memory resource utilization metrics were measured as shown in the Figure 10. The Apache NiFi-based consumed more CPU of 42% and memory of 53.43% as compared with MQTT-based for an average of 1000 devices. MQTT mosquito broker and mqtt-connectors required bare minimum cpu and memory, while Apache NiFi consists a set of processors running in parallel and required a maximum of cpu and memory resources. The disk read and write metrics were measured as shown in Figure 11. The MQTT-based SDP required fewer disk reads of 1.9 KB and more disk writes of 56 KB for an average of 1000 devices. The Apache NiFi-based SDP has the least disk writes and more disk reads of 50.2KB and 2.3KB respectively. The Apache NiFi-based SDP uses the concept of flow-file which represents a data unit with metadata that is read and written to the file system during data pipeline execution and hence, required maximum disk resources. Similarly, received and transmitted bytes are measured as shown in Figure 12. The MQTT-based SDP required max-imum network resources of 32.66KB network receive and 84KB bytes of network transmit. The MQTT-based SDP contains more serverless functions which are invoked using HTTP requests and MQTT broker communicates over tcp, hence required maximum network resources as compared with Apache-NiFi based SDP. Considering an evaluation metrics of two proposed SDPs, we conducted a suitability analysis based on the process mentioned in our previous article [8] and the result shows that Apache NiFi-based SDP is very much suitable for this type of application. Apart from this, the following are the supporting factors to use Apache NiFi-based SDP over MQTT-based SDP: 1) Apache NiFi-based SDP is robust because there was 2% drop rate in the processing of data units in the pipeline as a number of users scaled in MQTT-based SDP. 2) Hard to design the complex data pipelines using MQTT-based SDP as we scale the pipeline components. 3) Easy and user-friendly graphical user interface to design the pipelines in Apache- NiFi based SDP. SECTION VIII. Conclusions and Future Directions The goal of this work was two folded, firstly design a serverless data pipeline based end-to-end real time system (PuhatuMonitoring) for data collection, outlier detection, tag-ging and storing in the storage system. Secondly, select an appropriate machine learning algorithm for outlier detection. The performance of the proposed SDPs are evaluated using performance metrics such as processing time and resource utilization metrics. The results and suitability analysis shows that Apache NiFi-based SDP is very much suitable for Puha-tuMonitoring type of IoT applications. However, we did not consider the scaling of the end-to-end data pipelines and furthermore dealing with scaling of the serverless functions to reduce the processing time. As a part of future work, we will focus scaleablity, cost and other quality of service metrics. We have also trained and tested seven outlier detection machine learning algorithms and results shows that Average KNN works better for PM data in terms of outlier detection. ACKNOWLEDGMENT This article has been financed/supported by European Social Fund via “ICT programme” measure. We also thank financial support to UoH-IoE by MHRD, India (Fll/9/2019-U3(A)) and SERB, India, for grant CRG/2021/003888. Authors Figures References Keywords Metrics Footnotes More Like This A Survey of Voice Pathology Surveillance Systems Based on Internet of Things and Machine Learning Algorithms IEEE Access Published: 2020 Leveraging Machine Learning Algorithms for Predictive Maintenance in Internet of Things (IoT) Systems 2023 12th International Conference on System Modeling & Advancement in Research Trends (SMART) Published: 2023 Show More IEEE Personal Account CHANGE USERNAME/PASSWORD Purchase Details PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS Profile Information COMMUNICATIONS PREFERENCES PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help? US & CANADA: +1 800 678 4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | IEEE Privacy Policy A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity. © Copyright 2024 IEEE - All rights reserved."

Paper 2:
- APA Citation: Jiménez, A.-F., Cárdenas, P.-F., & Jiménez, F. (2020a). A survey on intelligent agents and multi-agents for irrigation scheduling. Computers and Electronics in Agriculture, 176, 105474.
  Main Objective: 
  Study Location: 
  Data Sources: 
  Technologies Used: 
  Key Findings: 
  Extract 1: In the IIoTPIS, in charge of determining irrigation schedules during the season of each zone or parcel to satisfy the crop water needs, according to site-specific characteristics.
  Extract 2: The operation of the IIoTPIS was divided into three fundamental holons corresponding to the measurement system (MS), the application system (AS), and a central station (CS), which together comprise the intelligent system for irrigation application.
  Limitations: The paper does not provide a detailed analysis of the computational complexity and scalability of the proposed IIoTPIS system. It would be beneficial to include an assessment of the system's performance under different irrigation district sizes and crop conditions.
  Relevance Evaluation: The paper by Jiménez et al. is highly relevant to the specific point of interest in the review outline as it directly addresses the integration of deployed machine learning models with other components of an automated irrigation management system, such as data preprocessing, decision-making, and control systems.

The authors present a detailed description of the IIoTPIS system, including its architecture, communication protocols, and algorithms for optimizing irrigation schedules. They also provide experimental results demonstrating the effectiveness of the system in allocating water resources and improving crop yields. This research contributes to the growing body of knowledge on the use of machine learning and IoT technologies in precision irrigation management and is a valuable resource for researchers and practitioners in this field.
  Relevance Score: 0.95
  Inline Citation: (Jimenez et al., 2020a)
  Explanation: The work presented in the paper by Jiménez et al. explored the use of an intelligent IoT-based irrigation system, called IIoTPIS. This system aimed to address the challenges of automated irrigation management, particularly in the context of a large-scale irrigation district in Colombia. The research specifically focused on integrating real and simulated data, using variable irrigation prescription methods, and implementing negotiation protocols for water resource allocation among users. The researchers conducted two scenarios of evaluation: one with sufficient water resources and another with water scarcity. The results demonstrated the effectiveness of the IIoTPIS system in optimizing irrigation practices, resulting in water savings and improved crop yields.

The key technologies employed in the study included:

* Wireless sensor networks
* Real-time data acquisition
* Crop modeling using AquaCrop
* Irrigation scheduling algorithms
* Multi-agent systems
* IoT platforms (MQTT)

The paper contributes to the advancement of precision irrigation management by proposing an integrated approach that incorporates multiple technologies and intelligent decision-making capabilities. It has implications for both research and practical applications in the field of water resource management and agricultural production.

 Full Text: >
"Skip to main content Skip to article Journals & Books Search Register Sign in Brought to you by: University of Nebraska-Lincoln View PDF Download full issue Outline Highlights Abstract Keywords 1. Introduction 2. Materials and methods 3. Results and discussions 4. Conclusions Funding CRediT authorship contribution statement Declaration of Competing Interest Acknowledgements References Show full outline Cited by (17) Figures (15) Show 9 more figures Tables (8) Table 1 Table 2 Table 3 Table 4 Table 5 Table 6 Show all tables Computers and Electronics in Agriculture Volume 192, January 2022, 106635 Intelligent IoT-multiagent precision irrigation approach for improving water use efficiency in irrigation systems at farm and district scales Author links open overlay panel Andrés-F Jiménez a b, Pedro-F Cárdenas a, Fabián Jiménez c Show more Add to Mendeley Share Cite https://doi.org/10.1016/j.compag.2021.106635 Get rights and content Highlights • An Intelligent IoT precision irrigation approach was implemented at farm and district scales. • The precision irrigation system was made up of the integration of intelligent agents, crop models, agent-based modeling and Internet of Things technologies. • The behavior of each irrigation agent was influenced by their own interests and neighbors. • The proposed approach is promising for the design of distributed systems in agriculture. Abstract The fourth industrial revolution in agriculture seeks the automation of traditional practices, using modern smart technologies. Advances in electronics, computation and the internet of things are integrated for improving field inputs management. The aim of this paper is to present the design and implementation of an intelligent IoT-multiagent precision irrigation approach for improving water use efficiency in irrigation systems. The study site was the large-scale irrigation and drainage district of Chicamocha and Firavitoba (Usochicamocha) located in Boyacá - Colombia, where water is distributed from the Chicamocha riverbed. In the proposed system, irrigation is supervised and controlled in each field by an intelligent irrigation agent that autonomously prescribes and applies water amounts with agronomical criteria. The methodology was applied with real (cyber-physical) and virtual (simulated) intelligent agents and was extended to eleven pump stations that supply water to 5911 fields. Using a MQTT protocol, hundreds of irrigation intelligent agents report water prescriptions and crop characteristics to a master agent in each pump station, who creates a regional irrigation map to manage georeferenced field information and performs negotiation of water resources between agents according to supply availability. Field maps and intelligent irrigation agents can be visualized using devices with internet access. Results demonstrated that irrigation amounts were correctly applied on the fields, thus improving the water use efficiency. This technology is a novel support to decision-making in water resources management applications at field and district scales. Previous article in issue Next article in issue Keywords Artificial intelligenceInternet of thingsIrrigation schedulingMulti-agentPrecision irrigation 1. Introduction There is the challenge of ensuring food security during the 21st century is particularly due to climate change, population growth and the need to sustainably manage the growing global demand of water (Beddington, 2010). Irrigation represents the main consumer of water resources and its management is an important research topic. In agriculture, water scarcity becomes a great problem due to limited water resources, but irrigation water cannot be simply reduced without putting production yields at risk (Kang et al., 2017). Implementation of optimal operational plans in agriculture, to adjust the water demand with the distribution and the improvement of water application control, reducing labor and applying irrigation scheduling plans based on monitoring systems, allows improving water management in irrigation districts (Gonçalves et al., 2020). In conventional irrigation at farm-scale, farmers apply uniform irrigation without considering the field variability and the crop water needs. Without advanced irrigation management, over- or underirrigation may occur, thus leading to several negative environmental and economic impacts (Datta, et al., 2017). At the irrigation district-scale, strategies for determining water distribution must use the representation of the multiplicity of different actors, their roles, and the social interactions between them (Belaqziz et al., 2014). However, in both cases, there is the need to sense the soil behavior and the response of plants to the applied water for adequate management. The use of real-time data and historical information is needed for the subsequent irrigation applications at an appropriate spatial level (Abioye et al., 2020). The characteristics of weather, plant and soil variables in a cropping system are nonlinear, dynamic and time-varying. The parameters that directly affect the timing and irrigation rates needed for ideal plant growth in a crop season include root depth, crop coefficient, plant growth, soil properties and environmental factors (Allen et al., 1998). The irrigation water use efficiency (IWUE) and the water use efficiency (WUE) are parameters used for measuring the effectiveness in the utilisation of water resources in agriculture. From an engineering standpoint, using a hydrological approach, IWUE and WUE are defined simply as the proportion of yield and water supplied through irrigation and rainfall (Sinclair et al., 1984). These definitions are predominantly used when referring to farm-scale irrigation water management. However, it should be noted that IWUE and WUE may also be assessed at the catchment or basin-scale as an irrigation district (Qureshi et al., 2011). For improving IWUE, the accurate measurement of water amounts supplied to irrigators is important at basin-scale. Irrigation scheduling is the process of determining how much and when to apply the irrigation, thus it has a direct effect on IWUE. When the application of water exceeds the amount needed for optimal plant consumption, the IWUE is reduced (Koech and Langat, 2018). Precision irrigation (PI) uses the integration of sensing, communication, and control technologies in the irrigation process to obtain optimal IWUE while minimizing environmental impacts (Zacepins et al., 2012). PI involves knowledge about irrigation systems, the spatial and temporal soil variation, soil structure and hydraulic properties, changing weather variables, crops phenology and their irrigation needs, to make better irrigation decisions with the potential to contribute to achieve high water saving and improved yield (Capraro et al., 2018). According to Smith et al., (2010) PI allows determining the timing, amount and spatial distribution of water applications in order to maximize yield or WUE, by applying water exactly (or as close as possible to) what is required. Using simulation or direct measurement PI defines the magnitude and spatial behavior of irrigation applications, knows the soil and crop responses to those applications and finally, uses these responses to best plan the next irrigation application. Additionally, PI can be considered as a three-phase cycle. The first phase is crop, soil or climate data acquisition from sensor systems located in the field. The second phase is the interpretation, analysis of raw data and the definition of irrigation prescriptions in rate and timing. Irrigation may be scheduled based on the measurement of soil moisture content using probes, the estimation of crop evapotranspiration or plant parameters. A summary of the main irrigation scheduling approaches is presented by Jimenez et al., (2020a). The third phase is the control of irrigation application equipment. Irrigation control is the ability to manage irrigation applications according to the crop response or soil status, while mitigating the effects of disturbances and uncertainties (Abioye et al., 2020). Currently, to provide efficient precision irrigation, the integration of the Internet of things (IoT) for data acquisition, as well monitoring and decision support technologies, must be considered in irrigation management (Zamora-Izquierdo et al., 2019). Greater water-use efficiency depends on better agricultural practices alongside extra technology, thus gaining an economic advantage for farmers while also reducing environmental burdens (Levidow et al., 2014). The concepts of artificial intelligence (AI) and optimization are used in precision irrigation. On the one hand, in the context of irrigation, artificial intelligence implies learning and/or making decisions based on reasoning and data processing for the definition and modification of irrigation prescriptions and applications on the field (Adeyemi et al., 2018). On the other hand, optimization is the process of manipulating various variables of an irrigation system with the aim of achieving the best possible outcome, the best IWUE (Cong et al., 2017). AI is defined as the science that aims to design and build technologies that can mimic human intelligent behavior (Talaviya et al., 2020). In the connotation of acting rationality, computational intelligence is the study of the design of intelligent agents (Weiss, 2013). An agent is a computer system situated in an environment and has the capability of performing autonomous actions in this environment to achieve its design objectives (Wilensky and Rand, 2015, Jimenez et al., 2020b). A multi-agent system (MAS) is a set of agents able to work together for solving problems. According to Bratman (1987), there should be at least a relationship between two agents in a MAS, where one of them satisfies at least one of the objectives of the other. Agents should have a limited ability to solve the problem alone and at least one of the agents must be autonomous. An Agent-Based Model (ABM) is a type of MAS. The core idea of ABM is to model phenomena with agents, an environment and a description of agent-agent and agent-environment interactions. Several studies have confirmed that ABM is well suited for research on dynamic, coupled, natural and social systems (Huber et al., 2019). Dynamic and autonomous entities in an irrigation district and crop fields can be modelled using ABM strategies that allow the representation of the heterogeneity of entities, their roles and interactions (Jimenez et al., 2020a). By using ABM, virtual irrigated systems can be designed and used as virtual laboratories. These laboratories are an alternative when real experiments cannot be performed (Barreteau et al., 2004). The ABM strategy has the capability of modelling the complexity of management in real-time, irrigation operations in hundred of fields, non-centralized distribution of water resources and reactive and proactive capabilities of individual agents. Simulation models can be used to simulate crop responses to irrigation management based on crop phenology (Mccarthy et al., 2014). These crop models offer the opportunity to improve precision irrigation strategies, as the need for time-consuming field experiments is eliminated (Cong et al., 2017). AquaCrop is a crop water model developed by FAO that simulates the response of water to crop yield. AquaCrop was calibrated for several crops, allowing the determination of crop yields using different sowing dates, soil types, climatic conditions, irrigation frequencies and irrigation amounts (Steduto et al, 2009). Agriculture is an ideal candidate for the deployment of Internet of Things (IoT) solutions because it occurs in wide areas that need to be continuously monitored and controlled (Farooq et al., 2020). IoT can help to secure sufficient food demands and increase the efficiency of agricultural production (Nižetić et al., 2020). Under the IoT paradigm, low-cost electronic devices can improve the farmer or agronomist interactions with the crop, soil and environments, while the computing power and software available on the internet can provide valuable data processing (Talavera et al., 2017). Regarding irrigation processes, the monitoring of soil and plants using IoT can improve irrigation by obtaining water savings that are precious in some specific geographical regions (Nižetić et al., 2020; Capraro et al., 2018). The application of IoT in the agricultural sector leads to advances that could drastically modify the current production procedures in agriculture (Shafi et al., 2020). Several review articles have been published related to precision irrigation by authors such as Adeyemi et al., 2017, Abioye et al., 2020, Liang et al., 2020. In addition, several works on the opportunities in precision irrigation using IoT, AI and data analytics are also found in the scientific literature. Some techniques of AI have been used in precision irrigation such as knowledge engineering (Rafea et al., 2003), fuzzy logic (Zhang and Guo, 2018), deep learning (Jimenez et al., 2020c), case-based reasoning (Li and Yeh, 2004), evolutionary computing (Belaqziz et al., 2014), genetic algorithms (Perea et al., 2021), support vector machines (Ashrafzadeh et al., 2020), data mining (Kovalchuk et al., 2018), optimization algorithms (Alsukni et al., 2019) and Agent Based Modeling (ABM) (Tamburino et al., 2020). This paper encompasses the development of an intelligent multiagent irrigation system to enhance the Irrigation Water Use efficiency (WUE) and the conflict resolution in the distribution of water among users of a high scale irrigation district. The contribution of this work is the representation of collective decision-making procedures with the integration of ABM, crop modelling and IoT. Our proposed approach is the management of both irrigation scheduling at farm-scale and at basin-scale. Each field is supervised by an intelligent irrigation agent. Real (robotic) agents and several virtual (software) agents were implemented in the system. Irrigation agents are in charge of determining and applying irrigation schedule during the season of each zone or parcel to satisfy the crop water needs, according to site-specific characteristics. In the case of water scarcity, a negotiation protocol is generated for water allocation between the stakeholders. The use of real data and entities in an IoT-multi-agent system for irrigation is one of the new ideas introduced in the proposed approach. This paper shows an advance toward improvement in water irrigation efficiency using the real implementation of multi-agent systems for irrigation. The paper is organized as follows. The second section presents the materials and methods, including an outline of the study area and the irrigation method currently applied, crops characterization, field data collection, irrigation prescriptions, the agent modeling system, simulation and negotitation explanations. Results are presented and discussed in the third section. Finally, the concluding remarks are presented in the last section. 2. Materials and methods 2.1. Study area The large-scale irrigation and drainage district of Chicamocha and Firavitoba (Usochicamocha) is located in the Boyacá department, approximately 180 km from Bogotá, Colombia (Fig. 1). Usochicamocha covers the municipalities of Oicatá, Tota, Chivatá, Sotaquirá, Duitama, Sogamoso, Santa Rosa de Viterbo, Paipa, Tibasosa and Tuta. The district has an elevation of 2560 masl, a total area of 11300 ha with an agricultural net area of 8200 ha, and a horticultural production area of 6000 ha, with an annual production of 140.000 ton (Martínez et al., 2014). The average temperature is 14° C, with an average rainfall of 778 mm and relative humidity of 70% (Weather Spark, 2021). The irrigation district has eleven irrigation units, each one of them with a pumping station responsible for supplying water to several fields (Table 1). Irrigation infrastructure, a weather station and water supply are available in this region. The sprinkler is the most widely used irrigation delivery method followed by drip irrigation technologies. Each farmer receives and applies water in their fields without considering the type of crop, soil and water requirements. In some periods of the year, the dam lowers its level, thus reducing the availability of irrigation water. The complexity of the system is greater when the sowing dates and the variety of crops planted in the region are considered. Water is provided by the La Copa and La Playa dams through the Chicamocha riverbed (Fig. 1). Download : Download high-res image (368KB) Download : Download full-size image Fig. 1. Large-scale irrigation and drainage district of Chicamocha and Firavitoba (Usochicamocha). Irrigation units: (1) Holanda, (2) Surba, (3) Pantano de Vargas, (4) Ayalas, (5) Duitama, (6) Cuche, (7) San Rafael, (8) Las Vueltas, (9) Tibasosa, (10) Ministerio, (11) Monquirá. ✩ Usochicamocha Central Station. Table 1. Usochicamocha irrigation units. Irrigation unit Coordinates (Centroid) Number of fields Area (ha) Holanda 5.779374356020°, −73.092051801000° 450 691.454 Pantano de Vargas 5.754001705803°, −73.071283014000° 562 896.24 Surba 5.784957831360°, −73.066841680000° 332 742.40 Ayalas 5.775491571300°, −73.038795619000° 291 906.77 Duitama 5.799548427500°, −73.022154997000° 473 857.00 Cuche 5.818388289100°, −72.978288914000° 508 937.81 San Rafael 5.789569445170°, −72.988214901000° 1092 845.13 Las Vueltas 5.777088443500°, −73.004349363000° 275 365.51 Tibasosa 5.765340421910°, −72.982835070000° 400 581.47 Ministerio 5.748652215690°, −72.972612337000° 581 748.84 Monquirá 5.738832395480°, −72.947474757000° 947 656.59 TOTAL 5911 8229.24 2.2. Available data Table 2 shows the description of the data used in this study. Climate variables of daily precipitation, maximum and minimum temperature and reference evapotranspiration were acquired using two weather stations located in El Gocho field that belongs to the San Rafael irrigation unit (5.787021°N, − 190 72.973932°) and in El Clan field that belongs to the Tibasosa irrigation unit (5.756809°N, −72.991612°). Interpolated soil maps were derived for the study region using 100 soil samples, which provided regional data of clay, silt and sand fractions, permanent wilting point, field capacity and saturation point. Table 2. Data description. Data Resolution Dates Source Meteorological variables Day/point 07–01-2020 to 10–31-2020 Weather Station Pro2 Plus- Datalogger WeatherLink IP (Davis Instruments, USA) Meteorological variables Day/point 11–01-2019 to 10–31-2020 GrowWeather station with Weather Wizard III console (Davis Instruments, USA) Interpolated maps: , , ; clay, silt and sand percentages; and . 1:25000 2009 Administrative Department of Science, Technology and Innovation of Colombia - Colciencias (Project: 110937819630) Polygon layer- Irrigation area map 1:25000 2020 Usochicamocha Irrigation District Root depths an Crop Coefficients ( ) Parameter 2003, 2006, 2010, and 2013 (Garcia et al., 2003), (Allen, 2006), (Cely 2010), (Perez, 2013). Management allowable depletion (MAD) Parameter Allen et al, 1998. Note: Permanent Wilting Point ( ), Field Capacity ( ), saturation point ( ), hydraulic conductivity ( ) and apparent density ( ). 2.3. Intelligent IoT precision irrigation system architecture The structure of the Intelligent IoT precision irrigation system IIoTPIS is shown in Fig. 2. The agents hierarchization of IIoTPIS was established by the biological and sociological concept of HMAS, where the principles of “holos” (entire) and “on” (part) describe recursive and self-similar structures in modeling the irrigation district. Fig. 2 shows three fundamental holons corresponding to the measurement system (MS), the application system (AS) and the central station (CS), which together comprise the intelligent system for the irrigation application holon in an agricultural field (irr-agent). Likewise, intelligent irrigation agents together with their self-similar ones constitute the irrigation units holons (ma-agents). Finally, several irrigation units compose the irrigation district holon (coor-agent). Thus, the hierarchy of the agents that form the IIoTPIS design was defined. Two additional agents are still involved in the architecture; although they are not considered holons, they are a fundamental part of the system. The source-agent is in charge of determining the amount of water available in the irrigation district and the man-agent is a human in charge of the system. As holons, each agent is independent, but together they can solve problems through collaborative and negotiating procedures. Download : Download high-res image (275KB) Download : Download full-size image Fig. 2. Holonic structure of the multi-agent model. Left: top view, right: side view. Source: Author. Table 3 shows the characteristics of agents incorporated in the IIoTPIS. Each agent type has an assigned role and together with other agents accomplishes a fully functional MAS with capabilities of autonomy, coordination, deliberation, conflict resolution and decision making. Table 3. Intelligent IoT Precision Irrigation System - Agents Characteristics. Agent Persistence Social Ability Activeness Goal Het. Master Agent They use their own thread and schedules without affecting other agents. Irrigation agents, coordinator agent Stationary located agent Request and send irrigation prescriptions to irrigation agents. Generate map of irrigation requirements. No Coordinator Agent It has its own thread and schedules without affecting other agents. Manager Agent, Master Agents and Source Agent Stationary located agent Distribute the available water resource in the dams, coordinate activities of other agents and eject negotiation protocols. No Irrigation Agents They have their own thread and schedules without affecting other agents. Autonomy in irrigation applications if there is enough water resource Master Agents Stationary located agent Apply irrigation amounts in adequate time and rates to the climate, soil and plant characteristics. In water shortage, they wait orders from Master Agents. Yes Source Agent It has its own thread and schedules without affecting other agents. Coordinator Agent Stationary located agent Acquire data of water level in the dam. Generate resource shortage alarm. No Manager Agent It has its own thread and schedules without affecting other agents. Coordinator Agent Global suppervisor agent Manage and control the IIoTPIS No Note: Heterogeneity (Het.). Considering the hierarchy of the agent, the architecture was defined with four subsystems: customer subsystem, supervising and planning subsystem, communication subsystem and web subsystem. The customer subsystem is constituted by irrigation agents in charge of the irrigation prescription, the application of water resources and keeping agents informed in the supervising and planning subsystem about field activities. The supervising and planning subsystem is responsible for the supervision of available water resources, the status of irrigation agents, the definition of prescription maps using field data, mapping using global information and conflict resolution between agents. The communication subsystem allows transmission and reception of data between agents in the IIoTPIS. In the web subsystem, the graphical user interface (GUI), databases and the communication framework were implemented. Usochicamocha farmers located in any place can access the GUI of IIoTPIS via web browsers through the internet. 2.3.1. Customer subsystem In the customer subsystem, two kinds of irr-agents were implemented. Real agents are intelligent systems, implemented in hardware-software and installed directly on the field. These agents acquire data from soil moisture, canopy temperature, environmental temperature, relative humidity sensors and from the weather station for defining irrigation prescriptions based on the determination of water deficits in their respective fields. Real intelligent agents manage the opening and closing of solenoid valves on the field for applying the water amount. Virtual agents are computer algorithms that emulate the behavior of irrigation agents in the field and use real data from weather stations for the definition of irrigation prescriptions. The crop modelling software Aquacrop was employed to obtain adequate feedback of the soil, weather and crop interactions and the responses to the irrigation applications prescribed by each virtual agent. When there is no enough water in the dams for supplying water to the region, irrigation agents have to wait for the results of the negotiation procedure in the supervision and planning subsystem. AquaCrop-OSPy is an algorithm developed in Python (Van Rossum and Drake, 2009) useful for running simulations without using Aquacrop graphical interface. AquaCrop-OSPy was developed to conduct cutting-edge research for the design and testing of irrigation strategies (Kelly and Foster, 2021). With this algorithm, the simulations can be dimmed by allowing making changes in the aquacrop files associated with plant, soil, environment, and irrigation applications dynamically during the development of the crops through programming in Python. This procedure, together with a computer with high computing capacities, allowed the simulation of thousands of crops in different phenological states, sowing dates, climate conditions and field activities, integrating geospatial data using the several Python libraries. The proposed technology faces the variety of crop types, sowing dates, soil and climatic conditions, constraints related to water delivery timing, the regional total available water, crop areas, irrigation prescriptions by field area and satisfaction metrics for Usochicamocha. The area is mostly covered by agricultural fields interspersed with rural lands, mainly corn, potato, tomato, barley, wheat, quinoa and bulb onion, among others. Models of these crops have been validated using Aquacrop. Although these validations are site-specific, in this study they are used as the best approximation of reality. Crop type, crop calendars, crop coefficients and root depth values used in this study are described in Table 4 and Table 5. These values were used in irrigation prescription for virtual and real agents, and crop modeling with Aquacrop for virtual agents. The clay, silt, and sand maps were used for defining the soil texture name in Aquacrop simulations. The regional climate behavior is determined from real-time or historical data through two weather stations that collect standard agrometeorological measurements. Table 4. Growing season and water needs of different crops. Crop Sowing (day) Transplanting (day) Harvesting (day) Crop water needs (mm) Source Corn 1 N/A 125–180 500–800 (Smith and Steduto, 2012) Potato 1 N/A 120–150 500–700 (Smith and Steduto, 2012) Tomato 1 28–35 138–145 400–800 (Smith and Steduto, 2012) Barley 1 N/A 90–130 450–650 (Smith and Steduto, 2012) Wheat 1 N/A 180–300 450–650 (Smith and Steduto, 2012) Quinoa 1 N/A 150–170 500–650 (Garcia et al., 2003) Onion 1 30–35 180–185 350–550 (Smith and Steduto, 2012) Table 5. Crop coefficient and root depth characteristics. Crop Crop Coefficient Root Depth (cm) Source ini mid end Time (days) Init. Max. Max. eff. Root (cm) Init. Crop dev. Mid season Late season Corn 0.30 1.20 0.50 25 37 40 30 30 230 91 (Allen, 2006) Potato 0.50 1.15 0.75 25 30 36 30 30 150 61 (Allen, 2006) Tomato 0.60 1.15 0.80 25 30 30 25 30 100 61 (Allen, 2006) Barley 0.30 1.15 0.25 40 60 60 40 30 130 100 (Allen, 2006) Wheat 0.30 1.15 0.40 40 60 60 40 30 150 104 (Allen, 2006) Quinoa 0.52 1.00 0.70 25 60 60 35 30 100 93 (Garcia et al., 2003) Onion 0.40 0.85 0.35 21 42 49 38 4 16 20 (Perez, 2013) The absolute minimum parameters of AquaCrop were used for simulation of each crop growth, yield and water productivity (Raes et al., 2009). For crop parametrization, the parameters were grain yield, rough idea of harvest index (HI), random planting dates and harvesting dates, and estimated crop life-cycle length seeding rate and germination percentage. For soil fertility parametrization, the parameters were textural class of the soil and indication of variation with depth indication of land slope, soil–water holding capacity and indication of native fertility of the soil with a general fertilization practice. Daily values of minimum and maximum temperature, daily evapotranspiration (ETo) and rainfall data were used for climate parametrization. Water application method was defined by the real and virtual intelligent irrigation agents. Standard Aquacrop models were used in this project. Table 6 shows the calibration and parametrization characterization used in this research for onion, corn, potato, quinoa, wheat, and barley (Steduto et al., 2012). These calibration and validation models were obtained with experimental data. For reliable crop simulations, additional information is needed and field research must be performed for improving parametrization of crop, soil and management practices. Table 6. Intelligent IoT Precision Irrigation System – Calibration and parametrization of Aquacrop crop models. Crop Non-limiting conditions Water stress Conditions Geographic coverage (with respect to the world cropped areas) Overall Onion (Agbemabiese, 2015) ✓ ✓✓ ✓ ✓ Corn (Greaves, 2016) ✓✓✓ ✓✓ ✓✓✓ ✓✓✓ Potato (Razzaghi, 2017) ✓ ✓ ✓ ✓ Quinoa (Geerts, 2009) ✓✓ ✓✓ ✓✓✓ ✓✓ Wheat (Khalaf, 2018) ✓✓ ✓ ✓✓ ✓✓ Barley (Tawakoli, 2015) ✓✓ ✓ ✓ ✓ Note: ✓ Minimum degree of calibration, ✓✓ Medium degree of calibration, ✓✓✓ Good degree of calibration. The objective of the IIoTPIS is to recommend prescriptions to farmers to implement good practices and obtain the best water use efficiency for each crop cultivated in the study region, thus defining the irrigation prescriptions per field with agronomic and data driven criteria and meaurements in field. Irrigation agents determine prescriptions using the procedures defined by Jimenez et al. (2020b). One of the three possible irrigation prescription methods can be used, which are assigned according to the programming of each real irrigation agent and a random assignment in the simulations of the virtual irrigation agents. The first irrigation prescription method uses the water balance equation and data from the meteorological station, denoted in the system and in the visualization of the web application as ET0 prescription. The second prescription method is defined by data from soil moisture sensors at two depths in the real irrigation agents, while simulation values in AquaCrop of the volumetric water content measurements are defined at these same depths in virtual irrigation agents. This prescription is denoted in the system and on the web application GUI as VWC prescription. The third procedure for prescribing irrigation, denoted as the BETTER prescription, uses the two prescriptions described above. In each one of them, the virtual or real irrigation agent simulates the behavior of the crop yield in the future using AquaCrop, that is, at the time of harvest. The WUE and IWUE are calculated using the value of the crop yield, the water applied by irrigation and the water supplied by rain. The prescription that presents the best performance and efficiency in the use of water in the future will be selected on each day of irrigation scheduling. For enabling a crop to extract water from the root zone without suffering water stress, only a percentage of the total available water ( ) can be depleted. This fraction of is called Readily Available Water ( ) (mm) (1). (1) where (mm), is the volumetric water content at , is the volumetric water content at , is the effective root depth in and is the management allowed depletion. When water is extracted by evapotranspiration, the root zone depletion increases ( ) and the stress is induced when becomes equal to . In Jiménez et al. (2021), the satisfaction level was defined as a parameter of the irrigation agent’s state. The crop stress coefficient after irrigation applications is used as a satisfaction metric in irrigation management at a regional scale using Eq. (2) (Han et al., 2019). (2) where is the irrigation prescription applied after negotiation (mm) and is the agent identification number corresponding to the same field number. The satisfaction level corresponds to the way in which the crops respond to the applied water and, therefore, it is an indication of the conformity of the state of the irrigation agent and its environment. The IIoTPIS seeks the best levels of satisfaction when applying irrigation to crops. When there is enough water, the satisfaction level is high, that is, , which means that there is no water stress in the soil, the available water is within 25% or 50% of the TAW below the field capacity (FC) according to the crop, and it has been possible to maintain the soil at a suitable amount of moisture. When the water resource is reduced, some crops become stressed, then, the satisfaction level is reduced. When (medium satisfaction level), the volumetric water content is between 25% and 50% or 50% to 65% of the TAW below FC according to the crop. In extreme cases, stress is unmanageable due to the absence of water, therefore, many real irrigation agents or virtual irrigation agents will have a low level of satisfaction. This situation corresponds to , where the humidity level is very low and could be detrimental to the crop. 2.3.2. Supervision and planning subsystem In the supervision and planning subsystem, the man-agent, the coor-agent, ma-agents and the source-agent interact. The man-agent is the human that supervises the IIoTPIS system. There are eleven ma-agents, one per irrigation unit and they are responsible for data collection of all the irr-agents that are still under their coverage, consolidate them and send the total water needs of each irrigation unit to the coor-agent. The source-agent acquires information about the dam level and reports the total supply available water (TSAW) to the coor-agent. The coor-agent should act as the second-highest hierarchical level in the holonic structure of the MAS organization, after the man-agent and it is responsible of the coordination of actions of all the agents. The water resource negotiation algorithm for each of the eleven irrigation units of UsoChicamocha is performed when the resource available in the dam is not enough to satisfy the cultivated field needs and was implemented using an agent-based model (ABM) in NetLogo (Wilensky, 1999). The details of this model are explained by Jiménez et al. (2021). This procedure is developed by the ma-agents. In NetLogo, irr-agents are represented by polygons of a vector layer. Each irr-agent is autonomous in the definition of irrigation prescriptions. For each irrigation unit , the total water requirement ( ) amount is defined as the sum of all their corresponding irr-agents water requirements ( ) and it is calculated using Eq. (3). (3) where represents each field monitored by an irr-agent, is the water requirement defined by the irr-agent of field in the irrigation unit and represents the number of irrigation agents in the irrigation unit . The total district supply available water TDSAW is measured by the source-agent and splited into irrigation units by the coor-agent. The total supply available water is the total available water that can be used in an irrigation event by an irrigation unit . is the available water for agent belonging to an irrigation unit and it is determined dividing the between irr-agentsj according to field sizes (areasj). The availability and requirement relationship for an irrigation unit is determined by substracting the from the using Eq. (4). (4) If , the ma-agentj authorizes irr-agentsj to apply their initial defined irrigation prescriptions. If , the ma-agentj performs a conflict resolution protocol based on the negotiation of water resources between irrigation agents. Before the negotiation, an iterative process is performed for the distribution of between irr-agentsj for each irrigation unit, considering field areas and reducing excess of water in fields with . After this procedure, agents that have enough water for satisfying their needs are defined as cooperative (c), otherwise they are defined as non-cooperative (nc). For the negotiation protocol, utility functions were defined according to the model inspired in the sociology of innovation diffusion explained by Edwards et al. (2005). According to the trade-off between personal interest and social pressure, each agent can change or not its cooperative or non-cooperative behavior (Eqs. (5)–(8)). (5) (6) (7) (8) where is used as a modification factor that is a function of phenological plant status; and are the proportion of neighbors of agent of cooperative and non-cooperative ( ) behavior, respectively; and are the utility functions defined for maintaining the cooperation and non-cooperative status of agent , respectively; is the utility function defined when an agent changes from cooperation status to non-cooperation status, and is the utility function defined when an agent changes from non-cooperation status to cooperation status. The proportion of neighbors and was determined in NetLogo by defining the number of neighbors in a radio r from the centroid of each polygon feature that corresponds to the location of each agent. Agents that tend to imitate the behavior of their neighbors are represented using , whereas agents that tend to imitate neighbors of opposite behavior are represented by (Akhbari and Grigg, 2013). The proposed modification factor function (γ) corresponds to 0.3 at the beginning of the crop season, decreases linearly during the development phase (0.0), and maintains this value during the midseason. After the crop development phase, γ increases linearly during the end of the growing season until reaching the value of 3.0 again. According to this function, the priority irrigation period is the crop development phase as it is the critical period in the cultivation (Jiménez et al., 2021). The modification factor function (γ) in the utility function involves crop growing and the cooperative or non-cooperative agent status involves soil moisture content. With both elements, irrigation priorities are defined during the negotiation process when there is insufficient water available in dams. After a low water availability or stress event, the algorithm also uses both parameters for defining irrigation amounts and irrigation priorities. The offer modification amount for the cooperative agents ( ) is defined using Eq. (9). (9) Then, the new demand of agent is calculated using Eq. (10). (10) The demand modification amount for non-cooperative agents ( ) is defined using Eq. (11). (11) Then, the new demand of agent is calculated using Eq. (12). (12) The non-cooperative total new demand is calculated by adding all the according to Eq. (13). (13) While , there is an iterative process of water reduction according to a water amout (mm) and the field area ( ) by field agent, until for all the cooperative and non-cooperative agents using Eqs. (14), (15). (14) (15) At the end of the negotiation stage, the new total district water requirement (TNDWR) amount must be less than or equal to the total district supply available water (TDSAW). The IIOTPIS seeks the best levels of satisfaction when applying irrigation to crops. When there is enough water, the satisfaction coefficient is maximum and, of course, when reducing the amount of available water, there will be stress on the crops. In extreme cases, stress will be unmanageable due to the absence of water and, therefore, many irr-agents will have a dissatisfaction response. Three site-specific restrictions were imposed in the IIoTPIS. First, the total water applied in the district fields cannot exceed the supply capacities of the dams. Second, water is guaranteed in each field unless there is a problem in the irrigation infrastructure, then, there are no irrigation events. Third, irrigation agents can prescribe irrigation events, but cannot apply water to fields without permission from the agent. 2.3.3. Communication subsystem Communication between agents in the IIoTPIS is performed using Message Queue Telemetry Transport (MQTT) (Mishra and Kertesz, 2020). The MQTT is a lightweight messaging protocol for power-efficient devices and sensors based on the publish-subscribe mechanism. This protocol was implemented in a cloud-based server (Digital Ocean) using an open-source Mosquitto MQTT broker. Agents publish data to topics on the MQTT broker and other agents can acquire data by subscribing to the respective topics. Agents-publishers and agents-subscribers do not communicate directly with each other; they use the broker as a communication mechanism instead. Fig. 3 shows the general scheme of the agent interconnectivity using the communication protocol of the IIoTPIS. Download : Download high-res image (286KB) Download : Download full-size image Fig. 3. Communication subsystem scheme of the IIoTPIS. Source: Author. 2.3.4. Web subsystem A web application was developed to interact with the IIoTPIS system. The manager-agent, users and farmers can consult vectorial maps of several variables associated with irrigation management in the Usochicamocha irrigation district fields. This application was made with the open-source web development framework Django, Geodjango_Leaflet, PostgresSQL, and Postgis (Django Software Foundation, 2019.). Geodjango_Leaflet was used as a relational, object-oriented and open-source database management system, where the initial and main project configurations were made, libraries were installed, the credentials of the PostgresSQL were configured and the Postgis database was installed. Geodjango_Leaflet allows the reception of data and spatial information such as shapefiles. Models were created from the shapefiles databases and some application programming interfaces (apis) were created for manipulating these data. The web application was developed using Hypertext Markup Language (Html), Cascading Style Sheets (css), JavaScript (Js), PythonTM3 programming languages and leaflet_js tools. Vectorial layers are visualized according to environmental features. Irrigation Agents can be visualized on the maps, showing decisions about irrigation prescriptions, satisfaction levels, and cooperative behaviors. The Chicamocha river was represented as a layer of lines, while fields and dams were represented using polygon layers. The application allows the selection of layers and other functionalities of the geographic information system (GIS). 2.4. IIoTPIS framework For modeling agents in the IIoTPIS, the AML language (Agent Modeling Language) was used. The AML language makes it possible the modeling of agent roles, behavioral aspects and interactions between agents (Cervenka et al., 2005). Entities in AML correspond to agents, resources, environments and organizations, designated to explicitly represent various (MAS) society abstractions. According to the IIoTPIS general design, the man-agent, coor-agent, ma-agents and the source-agent interact in the supervision and planning subsystem, while hundreds of real and virtual irr-agents interact in the customer subsystem. The resources are the water and the information stored in the databases. All the AML fundamental types of entity inherit features of behaviored semi-entities, which have their own capabilities, observe and/or effect their environment by means of perceptors and effectors, and provide and use services. Social semi-entities represent elements that can participate in social relationships, while mental semi-entities represent elements that can be characterized in terms of beliefs, goals, needs, motivations and desires. An organization is a specialized type of environment in the IIoTPIS that is specified in the Class-Level organization structure model (Fig. 4). From the external perspective, the Usochicamocha – Irrigation district organization represents an autonomous entity. The organization behavior consists, on the one hand, in the emergent properties and behavior of their agents, their mutual relationships, observations and interactions, and on the other, in the features and behavior of the entity as a whole. From the internal perspective, organization units are types of environments specified by structures, interactions, roles, constraints, rules, among other elements (Cervenka et al., 2005). Agents in the IIOTPIS are active because they can take the initiative and control when and how they process external requests. Additionally, agents act not only in isolation but also in cooperation or coordination with other agents. Download : Download high-res image (590KB) Download : Download full-size image Fig. 4. Class-level organization structure of USOCHICAMOCHA-IIOTPIS model. Fig. 4 shows the AML class diagram, depicting the generic organization structure of the IIOTPIS. This organization comprises a man-agent (of the Manager entity role type), a coor-agent (of the Coordinator entity role type), a source-agent (of the Source entity role type) and eleven ps-organizations (of the PumpStation organization unit type). The PumpStation organization consists of a ma-agent (of the Master entity role type), one to n si-agents (of the SoftwareIrrigation entity role type) and one to m ri-agents (of the RealIrrigation entity role type). The si-agents and ri-agents are peers to each other (the cooperate connector), and subordinated to the ma-agent (the manage connector). The coor-agent is superordinate of the eleven ps-organizations and the source-agent (the manage connectors). Finally, the man-agent is superordinate of the coor-agent (the manage connector). Each si-agent of the si-organization comprises a sds-agent (of the SmartDecisionSystem entity role type), a ps-agent (of the PerceptionSystem entity role type) and an iae-agent (of the IrrigationActivationEmulation entity role type). The number of software irrigation systems (n) depends on the number of fields simulated with these characteristics in the corresponding pumping station. Each ri-agent in the ri-organization comprises a scs-agent (of the SmartCentralStation entity role type), from 1 to 4 smsn-agents (of the SmartMultiSensorNodes entity role type), a wss-agent (of the WeatherStationSystem entity role type) and an ias-agent (of the IrrigationActivationSystem entity role type). The number of ri-agents (m) depends on the number of devices that have been installed in real fields. 2.4.1. System interaction The Business Process Model and Notation (BPMN) was used to model the interactions between the agents that compose the IIOTPIS (von Rosing et al., 2015). The IIoTPIS was developed for irrigation scheduling management at field and basin scales. At the field scale, this system allows the definition of irrigation prescriptions in specific crops. At the basin-scale, a negotiation of the irrigation protocol was implemented using an ABM to ensure an adequated distribution of irrigation amounts to hundred of fields, according to the available water supply in the dams. Fig. 5 represents the interactions between agents in the IIoTPIS. These interactions are performed by the transmission of real data between agents. An irrigation scheduling application at the basin scale starts by the coor-agent, who requests the total district supply available water (TDSAW) to the source-agent and the total water requirements (TWR) to the ma-agents. The ma-agents request irrigation prescriptions to si-agents and ri-agents. The si-agents and ri-agents have the operative autonomy of prescribing and they keep informed the corresponding ma-agents of the irrigation unit about the crop status and irrigation requirements. The ma-agents calculate the TWR and send these data to the coor-agent. Afterwards, the coor-agent acquires the numerical information from the ma-agent and the source-agent, comparing the TDSAW with the total district water requirements TDWR. Download : Download high-res image (446KB) Download : Download full-size image Fig. 5. Business process model and notation for USOCHICAMOCHA-IIOTPIS. If there are enough water resources, the coor-agent will send an authorization to the ma-agent for irrigation application, which is in turn sent to every si-agents and ri-agents. The ma-agents update vector maps with information of irrigation prescriptions, seedtime and crop in the web server application. If there are conflicts in water distribution, the coor-agent sends the available amount of water to each ma-agent. Each ma-agent performs a resource distribution algorithm based on ABM and sends an irrigation authorization with the new irrigation prescriptions to si-agents and ri-agents. Optimization between the demand and the offer is adjusted according to the environmental scenario defined by the evapotranspiration and climatic variables, the crop types, the crop development and soil properties, the soil water balance of previous days, the stress level of each crop to be negotiated, and collaborative behaviors between si-agents and ri-agents. The ma-agents send irrigation maps with permissible irrigation prescriptions to the web-server application for visualization on the internet. Finally, ri-agents apply and si-agents emulate the application of irrigation amounts to the field. Three site-specific constraints were imposed to the IIoTPIS and are described next. First, the supplies can never exceed the total dam capacity. Second, water is guaranteed in each field unless there is a problem in the irrigation infrastructure, then, there are no irrigation events. Third, the irrigation agents can prescribe irrigation events, but cannot apply water to the fields without the ma-agent permission. The agents interchange messages between them using the IoT messaging protocol MQTT, represented by dashed lines in Fig. 5. Table 7 shows the principal entities in the IIoTPIS and their communication interactions. Table 8 shows topics, messages and actions involved in the communication protocol implemented. Topics are denoted as Origin/ Specific Origin /Destination/ Specific Destination, using messages defined as: action: message_1; message_2… message_n. The actions defined in the MQTT protocol were: report (Rp), irrigation (Irr), level (Lv). Table 7. Communication interactions and rules between agents - Algorithm. Source: Author. ▪ coor-agent: - coor-agent is activated before irrigation activities start. - coor-agent requests water availability amount to source-agent. - source-agent responds with the water availability amount. - coor-agent requests the irrigation unit requirements to the ma-agents ▪ ma-agent: - ma-agents publishes the irrigation requirements request to si-agents and ri-agents. - si-agents and ri-agents report data to the corresponding ma-agent. - si-agents and ri-agents await authorization for irrigation application (irrigation_flag = False) - ma-agents calculate the total water required by si-agents and ri-agents - ma-agents report to coor-agent the pump station irrigation requirements ▪ coor-agent: - coor-agent verifies ma-agents reports. - coor-agent compares the total district supply available water (TDSAW) and the total water requirements (TDWR) - If available water amount >= requested water amounts for irrigation requirements, then: • coor-agent sends irrigation authorization to ma-agent. • ma-agents report irrigation scheduling approbation to si-agents and ri-agents. • ma-agents report vector maps to the web-server application. • si-agents and ri-agents start irrigation activities (irrigation_flag = True). - If available water amount < requested water amounts for irrigation requirements, then: • coor-agent sends stop irrigation message and requests irrigation negotiaton protocol to ma-agents • ma-agents performs the irrigation negotiation protocol. • ma-agents report the new permissible irrigation amounts to si-agents and ri-agents. • ma-agent reports vector maps to web-server application. • si-agents and ri-agents start irrigation activities (irrigation_flag = True). Table 8. Communication protocol using Message Queue Telemetry Transport (MQTT). Transmitter Receiver Topic Message Action Coor source Crd/Sc “Lv” Water level request Source coor Sc/Crd “Lv:source_level” Water level response Coor ma Crd/PmS/Station “Init” Process start request Ma coor PmS/Station/Crd “Rp:water requirements” Water requirements response. Ma ri and si PmS/Station/Ag “Rp:date” Irr. agents prescription request ri and si ma Ag/station/Block_n/code/PmS “Rp;code;prescription; stress coeficient; crop type; sowing date; hour; date” Irr. agents prescription response Coor ma Crd/Station/PmS “Irr; Amount”/ ”Irr:Neg;available water” Authorization of requested prescription / irrigation authorization with negotiation request Ma ri and si PmS/Station/Ag “Irr;Amount”/ “Irrig:Neg;new prescription” Authorization of requested prescription / irrigation authorization with new prescription Note: coordinator-agent (coor, Crd), master-agent (ma, PmS), real irrigation-agent (ri, Ag), virtual irrigation-agent (si, Ag), source-agent (source, Sc). Topics: Origin/ Specific Origin /Destination/ Specific Destination. Messages: action: message_1; message_2… message_n. Actions: start (Init), report (Rp), Irrigation (Irr), Level (Lv). 3. Results and discussions 3.1. Real irrigation agents In the IIoTPIS, four real intelligent irrigation systems (ri-agents) were implemented, as explained by Jiménez et al. (2020b). Real intelligent agents are developed as the integration of the measurement system (MS), the application system (AS) and the central station (CS). Up to nine sensor nodes could be connected to the central station in a mesh network, but the amount of sensor nodes installed depends on the number of management zones. Also, several sensors could be installed in the same management zone for the management of average irrigation amounts. In this project, each of the ri-agents operates on two solenoid valves and a single sensor node. In future research, management zones will be included in the calculations. Additionally, the ri-agents incorporate in the central station the Mosquitto protocol implemented by MQ Telemetry Transport - (MQTT), which is used in IoT applications. Fig. 6 shows one of the ri-agents installed in the field, including the sensor station and the irrigation station. In the fields where the ri-agents are implemented, there must be internet connectivity. Download : Download high-res image (590KB) Download : Download full-size image Fig. 6. Real intelligent irrigation systems (ri-agent) of the IIoTPIS implemented in the field: (a) irrigation station and (b) sensor station. Source: Author. 3.2. IIoTPIS software application The Intelligent IoT Precision Irrigation System (IIoTPIS) software was developed using PythonTM3, NetLogo 6.0 for the implementation of the agent-based model and AquaCrop for crop simulation. The IIoTPIS software was designed with two operation modes, with and without a graphical interface. In the first mode, with a graphical interface, all the software procedures can be executed and verified step by step. In the second operation mode, the execution is automatic and transparent for the user, that is, at certain hours of the day, procedures are carried out automatically to achieve compliance with the actions of the designed system. The graphical interface operation mode was developed in PyQt5 (Summerfield, 2008). The Initial Configuration and Irrigation Programming - IoT- Negotiation tabs were implemented. Fig. 7 shows the Initial Configuration tab of the IIoTPIS. Through this tab, the sowing parameters are assigned to virtual field agents, and irrigation units to simulate are selected. The date interval is determined to make the random assignment of crops, sowing dates, and irrigation prescription model for the simulation of the batches supervised by the virtual irrigation agents, in addition to download and update data from weather stations. The IIoTPIS application allows simulating and prescribing irrigation until the current day with the parameters stored in the system (Daily Crop and Irrigation Simulation) or starting a complete simulation from the sowing day (Full Seasonal Crop and Irrigation Simulation). Download : Download high-res image (395KB) Download : Download full-size image Fig. 7. Smart precision irrigation system based on IoT - Initial Configuration. Source: Author. Fig. 8 shows the Irrigation Scheduling - IoT - Negotiation tab. The water available to apply in the irrigation district is entered. This information is consulted and sent by the source-agent to the coor-agent using the Mosquitto communication protocol. With the Irrigation Scheduling option, the IIoTPIS tasks can be executed step by step, so that the processing and results of each system operation can be verified. The procedures that allow carrying out this option are: Source water level publication; Prescription report request- from each real and virtual irrigation agent; Generation of negotitation polygons, which are read and used by NetLogo for the conflict resolution procedure in the irrigation distribution; Start negotiation, performed by the MBA developed in NetLogo and Subsequently, authorizations and prescriptions are sent to both real and virtual irrigation agents, and finally Upload polygons to the Web server. Download : Download high-res image (395KB) Download : Download full-size image Fig. 8. Smart precision irrigation system based on IoT. Source: Author. 3.3. Performance evaluation of irrigation agents To evaluate the performance of the IIoTPIS, the irrigation agents were simulated in all the fields belonging to the eleven irrigation units of Usochicamocha for two scenarios. The first scenario was non-negotiation, when there were enough water resources for the irrigation agents requirements. The irrigation scheduling performance with VWC, ET0 and BETTER irrigation scheduling methods was compared with the current irrigation scheduled by farmers (TRA). Fig. 9 shows the behavior of the average amount of water applied to each crop during the season, considering the plant requirements, according to the root depth, type of crop and its growth period using the ET0, VWC, BETTER and TRA prescriptions. This graph evidences that the soil water content values increase according to the effective root depth up to certain moments specified by the cultivation model in Aquacrop. The values obtained were within the limits of and , where is the effective root depth for VWC, ET0 and BETTER methods. These results show that the agents carried out the irrigation prescriptions according to the MAD and the root depth model defined by Raes et al. (2018). Download : Download high-res image (626KB) Download : Download full-size image Fig. 9. Amount of water applied to each crop during the season for simulated crops in IIoTPIS. FC is field capacity, PWP is permanent wilting point and SAT is saturation point. Non-negotiation scenario. Source: Author. In Fig. 9, it is evidenced that when using ET0, VWC and BETTER methods, water amounts applied allow keeping the volumetric water content close to FC. ET0 and VWC methods were used in the BETTER prescription algorithm, which ensures that, if there is enough water in the dams, the agents using these three types of prescriptions meet the objective to maintain soil moisture close to the FC up to the permissible level of deficit according to the type of crop. This level corresponds to 25% of the total available water (TAW) for onion and potato, and 50% of the TAW for the other crops used in the simulation. Within the bulb onion model specifications and according to the management criteria of this crop in the region, it was established that irrigation should be suspended when the crop approaches to maturity to allow the leaves to dry out and avoid a second spurt of root growth. Currently USOCHICAMOCHA farmers do not use a technified system for the irrigation prescription, instead the criterion is to apply daily one hour of irrigation per crop area with two-day intervals of application. When the rainfall is greater than 6 mm, the new application of irrigation is carried out two days after the rain event (Jimenez et al., 2020b). It can be observed in Fig. 9 that the TRA irrigation scheduling maintained the soils in saturation level for all the crops. This agrees with the wrong criteria of farmers who assume that the optimal irrigation is to keep the cultivated field flooded, thus wasting water and spending more money. The BETTER irrigation prescription method allowed the selection of the prescription with the best yield and WUE at the end of the harvest. Fig. 10 shows the prediction of the yield at the end of the harvest for the non-negotiation scenario, which is determined daily by each irrigation agent, for the prescriptions based on ET0, VWC, TRA and BETTER. The prediction values of the yield at the end of the harvest increased in all types of crops. The BETTER method allowed the intelligent agent to look for the option that in the future will improve the results in the harvest, using predictions when applying the amounts of irrigation prescribed by ET0 and VWC methods. Although the trends in the yield prediction curves are similar between the prescription methods, on some days the yield was higher with the ET0 prescription and in others with the VWC prescription. There are also cases where the prediction was the same for the two prescription methods, with different amounts of water, therefore, the one that allowed obtaining greater efficiency in the water use was selected by the BETTER algorithm, that is, the value of the yield per applied water. Using the traditional prescription (TRA) average yields were similar to the others but using more water amounts in irrigation. VWC method using soil moisture sensors method had better performance than the ET0 method using hydric balance equation, whereby it was used in the BETTER irrigation prescription during the crop development, but yields were similar at the final of the crops season. The TRA irrigation schedule scheme for barley shows a reduction in yield that was not found in the ET0, VWC and BETTER irrigation scheduling. The reason is that there was overirrigation in those fields, which affected yield overcomes. Results when there is enough water for the distribution on the field demonstrate that intelligent irrigation agents are defining enough water requirements, which means a better water use efficiency with respect to the traditional irrigation scheduling in the study region. Download : Download high-res image (398KB) Download : Download full-size image Fig. 10. Daily prediction of simulated crop yield in IIoTPIS with traditional (TRA), soil sensors (VWC), evapotranspiration (ET0) and BETTER prescriptions. Non-Negotiation scenario. Source: Author. The second scenario was implemented with negotiation. In some dates, water resources in the dam were lower than those requested by all the irrigation agents. The results in this scenario show that the amount of water available in the dam was not enough to achieve that the average of the water applied to each crop during its growth remains close to FC (Fig. 11). In addition, the ET0 method prescribed more water than the VWC method with negotiation, but the BETTER method selected the VWC result to make an efficient management of the water resource, by applying less water resource in the field. According to Fig. 12, the IIoTPIS sought to maintain the best yield during crop growth using the prescription with the least amount of water resource, according to the negotiation result. Although less water resource was applied, under these conditions, the average yield for the crops studied using irrigation prescriptions with technical concepts decreased a little with respect to the yields with sufficient water availability. In Fig. 11, Fig. 12 TRA prescription was not used because irrigation agents can not apply requested traditional water amounts if there is not enough water in dams. Download : Download high-res image (582KB) Download : Download full-size image Fig. 11. Amount of water applied to each crop during the season for simulated crops in IIoTPIS. FC is field capacity, PWP is permanent wilting point. Scenario with negotiation. Source: Author. Download : Download high-res image (355KB) Download : Download full-size image Fig. 12. Daily prediction of simulated crop yield in IIoTPIS with VWC prescription. Scenario with negotiation. Source: Author. Crop yields not only depend on irrigation. In this research, standard management practices defined in AquaCrop were used in the crop simulations. Other aspects such as salt washing and fertilization have not been considered in the model. Research should continue in order to improve the models including specific aspects related to soil, water, plant and crop management parameters, which were not considered in this paper. 3.4. Web application The Irrigation District Multi-Agent System web application was implemented, which can be accessed on internet through the following link: http://104.248.53.140:8002/. Vector layers of parameters obtained from the interpolation of data from soil samples of the irrigation district can be viewed in the web application. These parameters are: percentage of clay, percentage of silt, percentage of sand, field capacity and permanent wilting point, which are considered invariant in time and are used for characterizing the district soils. Other vector layers that can be displayed in the application are the type of crop planted, the soil water stress coefficient and irrigation prescriptions. These three vector maps change according to the real conditions of cultivated fields and are monitored by the ri-agents and those simulated by the si-agen (Fig. 13). Download : Download high-res image (421KB) Download : Download full-size image Fig. 13. Web Application - IIoTPIS: Maps Options. Source: Author. By selecting any of the buttons from the main menu of the application, the corresponding vector layer is displayed on the screen. By pressing any of the polygons of the vector layer, specific information of the batch can be displayed, for example, the irrigation prescriptions for the selected field (Fig. 14a) or the field capacity vector layer (Fig. 14b). Download : Download high-res image (2MB) Download : Download full-size image Fig. 14. Web application-IIoTPIS: (a) Irrigation prescriptions layer and (b) field capacity layer. Date: January 18 of 2021. Source: Author. On the polygon maps, the irrigation agents can be visualized (Fig. 15a). A color and symbol notation was given according to the specific behavior of the irrigation agents implemented in the application (Fig. 15b). Each irrigation agent allows the visualization of the field code, cultivated area, if it is collaborative or non-collaborative, virtual or real, the satisfaction level and the model used to perform the irrigation prescription, VWC for soil sensor measurements, ET0 when using the water balance equation and BETTER in the case of the intelligent irrigation option. Download : Download high-res image (475KB) Download : Download full-size image Fig. 15. Web application -IIoTPIS: (a) Irrigation agents, and (b) symbology of real and virtual irrigation agents. Source: Author. To the best of the authors knowledge, there are no systems as the one presented in this document installed in Colombia, although IoT and automatic systems with some similarities to the one presented in this paper are installed in Argentina, Chile, Spain, Portugal, United States, Sweden, Israel, and Australia. In recent years, some commercial systems, such as Bee2Crop (FutureCompta, Algés, Portugal), NetBeat (Netafim, Kibbutz Hatzerim, Israel), AgSense (Valmont Industries, Inc. Valley, USA), CropX (CropX inc, Tel Aviv, Israel), GroGuru (Kilimo, Memphis, Tennessee, USA), WiseConn (Wiseconn Engineering, Fresno, CA, USA), Irriot (IRRIOT, Djursholm, Sweden), Libelium (Libelium Comunicaciones Distribuidas S.L., Zaragoza, Spain), AquaSpay (AquaSpy Inc., San Diego, CA, USA) and others have become available. These systems are expensive for their implementation by small or medium farmers, are closed solutions (proprietary software and hardware) and their maintenance is complex. The irrigation agents of IIoTPIS were designed with available electronic components in markets, thus allowing the development of a new technological tool for local producers and scientists. Additionally, irrigation agents of IIoTPIS allow the irrigation scheduling using proactive reasoning instead of reactive reasoning as is common in automatic irrigation systems. Finally, the integration of several irrigation agents in a multi-agent system and its capabilities of negotiation for irrigation scheduling in an irrigation district is a contribution to the intelligent irrigation management at micro-level (farm) and macro-level (irrigation district). 4. Conclusions This work presented the implementation of an irrigation management system in the USOCHICAMOCHA irrigation district, located in Boyacá Department, Colombia. Several technologies were integrated in this development as a response to the technological demands from local and regional farmers. The main advantages of the system proposed are the irrigation scheduling mechanism at the local (field) and global (irrigation district) levels and the autonomous reasoning of the intelligent agents for prescribing irrigation and the use of plant, soil, and environment sensors. These characteristics could result in water and energy savings. Additionally, the system allows implementing different strategies of controlled irrigation as restriction, deficit irrigation or zone management, when there are several sensor and actuator nodes. The system can be adapted to any crop, using any irrigation methodology. Experiments in two scenarios show that the system developed is a useful tool for supervising and supporting irrigation decisions. The intelligent agents can program the irrigation schedule based on the crop water requirements and obtain feedback about soil, plant and environmental conditions, to evaluate the performance of the irrigation application using crop modelling. The use of the proposed system helps the user to monitor the temporal evolution of ETc, soil moisture, temperature, relative humidity, and canopy temperature, according to the desired irrigation schedule. Even though the system was designed with the conditions of Alto Chicamocha and Firavitoba irrigation district, this development can be implemented in other places where a precise monitoring and management of the irrigation process is required. Future works will include comparative results related to crop management, energy, salt washing, fertilization and other soil, plant, environmental variables, and management practices that were no used in this paper. Additionally, calibration of AquaCrop models will be performed for improving the response of the system to site-specific conditions where it is implemented. Funding This research was funded by Minciencias and the Department of Boyacá - Colombia through the PhD scholarship program No. 733 – 2015. Thesis name: Intelligent Agent-Based model to support irrigation management in agricultural crops – Cod: 46620 – Universidad Nacional de Colombia. This research also was funded by the Universidad de los Llanos (DGI) - Colombia, with the project: Intelligent system for data acquisition and irrigation prescription in agricultural crops through wireless sensor networks, IoT and artificial intelligence – Cod: C09-F02-010–2020. CRediT authorship contribution statement Andrés-F Jiménez: Conceptualization, Methodology, Visualization. Pedro-F Cárdenas: Conceptualization, Methodology, Visualization. Fabián Jiménez: Conceptualization, Methodology, Visualization. Declaration of Competing Interest The authors declare that they have no known competing financial interests or personal relationships that could have appeared to influence the work reported in this paper. Acknowledgements A.F. Jiménez expresses his gratitude to the Department of Boyacá and Minciencias – Colombia for the support through the scholarship program No. 733 - 2015 for the Ph.D. program at Universidad Nacional de Colombia and to Universidad de los Llanos. Pedro Cardenas expesses his gratitude to MinCiencias - Colombia for the abroad Ph.D. scholarship – 2007. F.R. Jiménez expresses his gratitude to Universidad Pedagogica y Tecnologica de Colombia for allowing the development of this work as a result of a research proposal for the teaching promotion. References Abioye et al., 2020 E.A. Abioye, M.S.Z. Abidin, M.S.A. Mahmud, S. Buyamin, M.H.I. Ishak, M.K.I.A. Rahman, A.O. Otuoze, P. Onotu, M.S.A. Ramli A review on monitoring and advanced control strategies for precision irrigation Comp. Electr. Agric., 173 (2020), p. 105441, 10.1016/j.compag.2020.105441 View PDFView articleView in ScopusGoogle Scholar Adeyemi et al., 2017 O. Adeyemi, I. Grove, S. Peets, T. Norton Advanced monitoring and management systems for improving sustainability in precision irrigation Sustainability, 9 (3) (2017), p. 353, 10.3390/su9030353 View in ScopusGoogle Scholar Adeyemi et al., 2018 O. Adeyemi, I. Grove, S. Peets, Y. Domun, T. Norton Dynamic neural network modelling of soil moisture content for predictive irrigation scheduling Sensors, 18 (10) (2018), p. 3408, 10.3390/s18103408 View in ScopusGoogle Scholar Akhbari and Grigg, 2013 M. Akhbari, N. Grigg A framework for an agent-based model to manage water resources conflicts Water Resour. Manage., 27 (11) (2013), pp. 4039-4052, 10.1007/s11269-013-0394-0 View in ScopusGoogle Scholar Allen et al., 1998 R.G. Allen, L.S. Pereira, D. Raes, M. Smith Crop evapotranspiration-Guidelines for computing crop water requirements-FAO Irrigation and drainage paper 56 Fao, Rome, 300 (9) (1998), p. D05109 Google Scholar Allen, 2006 R.G. Allen Evapotranspiración del cultivo: guías para la determinación de los requerimientos de agua de los cultivos Food & Agriculture Org, Vol. 56 (2006) Google Scholar Ashrafzadeh et al., 2020 A. Ashrafzadeh, O. Kişi, P. Aghelpour, S. Biazar, M. Masouleh Comparative study of time series models, support vector machines, and GMDH in forecasting long-term evapotranspiration rates in northern Iran J. Irrig. and Drain. Eng., 146 (6) (2020), p. 04020010 View in ScopusGoogle Scholar Alsukni et al., 2019 E. Alsukni, O. Arabeyyat, M. Awadallah, L. Alsamarraie, I. Abu-Doush, M. Al-Betar Multiple-reservoir scheduling using β-hill climbing algorithm J. Int. Sys., 28 (4) (2019), pp. 559-570, 10.1515/jisys-2017-0159 Google Scholar Barreteau et al., 2004 O. Barreteau, F. Bousquet, C. Millier, J. Weber Suitability of Multi-Agent Simulations to study irrigated system viability: application to case studies in the Senegal River Valley Agric. Syst., 80 (3) (2004), pp. 255-275, 10.1016/j.agsy.2003.07.005 View PDFView articleView in ScopusGoogle Scholar Beddington, 2010 J. Beddington Food security: contributions from science to a new and greener revolution Philosophical T. Roy. Soc. Biol. Sci., 365 (1537) (2010), pp. 61-71, 10.1098/rstb.2009.0201 View in ScopusGoogle Scholar Belaqziz et al., 2014 S. Belaqziz, S. Mangiarotti, M. Le Page, S. Khabba, S. Er-Raki, T. Agouti, L. Drapeau, M.H. Kharrou, M. El Adnani, L. Jarlan Irrigation scheduling of a classical gravity network based on the Covariance Matrix Adaptation-Evolutionary Strategy algorithm Comput. Electron. Agric., 102 (2014), pp. 64-72, 10.1016/j.compag.2014.01.006 View PDFView articleView in ScopusGoogle Scholar Bratman, 1987 M. Bratman Intention, plans, and practical reason, Vol. 10, Harvard University Press, Cambridge, MA (1987) Google Scholar Capraro et al., 2018 F. Capraro, S. Tosetti, F. Rossomando, V. Mut, F. Vita Serman Web-based system for the remote monitoring and management of precision irrigation: A case study in an arid region of Argentina Sensors, 18 (11) (2018), p. 3847, 10.3390/s18113847 View in ScopusGoogle Scholar Cervenka et al., 2005 R. Cervenka, I. Trencansky, M. Calisti Modeling social aspects of multi-agent systems: The AML approach, Springer, Berlin, Heidelberg (2005), pp. 28-39 Google Scholar Cely, 2010 G. Cely Determinación de parametros de riego para el cultivo cebolla de bulbo en el distrito de riego del alto chicamocha Universidad Nacional de Colombia, Bogotá (2010) M.Phil. thesis Google Scholar Cong et al., 2017 D. Cong, H. Nguyen, J. Ascough, H. Maier, G. Dandy, A. Andales Optimization of irrigation scheduling using ant colony algorithms and an advanced cropping system model Environ. Modell. Software, 97 (2017), pp. 32-45, 10.1016/j.envsoft.2017.07.002 Google Scholar Datta et al., 2017 Datta, S., Taghvaeian, S., Stivers, J., 2017. Understanding soil water content and thresholds for irrigation management. Oklahoma Cooperative Extension Service. BAE-1537. Google Scholar Django Software Foundation, 2019 Django Software Foundation. 2019. Django. Retrieved from https://djangoproject.com. Google Scholar Edwards et al., 2005 M. Edwards, N. Ferrand, F. Goreaud, S. Huet The relevance of aggregating a water consumption model cannot be disconnected from the choice of information available on the resource Simul. Model Pract. Th., 13 (4) (2005), pp. 287-307, 10.1016/j.simpat.2004.11.008 View PDFView articleView in ScopusGoogle Scholar Farooq et al., 2020 M. Farooq, S. Riaz, A. Abid, T. Umer, Y. Zikria Role of IoT technology in agriculture: A systematic literature review Electronics, 9 (2) (2020), p. 319, 10.3390/electronics9020319 View in ScopusGoogle Scholar Garcia et al., 2003 M. Garcia, D. Raes, S. Jacobsen Evapotranspiration analysis and irrigation requirements of quinoa (Chenopodium quinoa) in the Bolivian highlands Agric. Water Manag., 60 (2) (2003), pp. 119-134, 10.1016/S0378-3774(02)00162-2 View PDFView articleView in ScopusGoogle Scholar Gonçalves et al., 2020 J.M. Gonçalves, S. Ferreira, M. Nunes, R. Eugénio, P. Amador, O. Filipe, I.M. Duarte, M. Teixeira, T. Vasconcelos, F. Oliveira, M. Gonçalves, H. Damásio Developing Irrigation Management at District Scale Based on Water Monitoring: Study on Lis Valley, Portugal AgriEngineering, 2 (1) (2020), pp. 78-95, 10.3390/agriengineering2010006 View in ScopusGoogle Scholar Han et al., 2019 S. Han, Y. Yang, H. Li, Y. Yang, J. Wang, J. Cao Determination of crop water use and coefficient in drip-irrigated cotton fields in arid regions Field Crops Res., 236 (2019), pp. 85-95, 10.1016/j.fcr.2019.03.008 View PDFView articleGoogle Scholar Huber et al., 2019 L. Huber, N. Bahro, G. Leitinger, U. Tappeiner, U. Strasser Agent-Based Modelling of a Coupled Water Demand and Supply System at the Catchment Scale Sustainability, 11 (21) (2019), p. 6178, 10.3390/su11216178 View in ScopusGoogle Scholar Jimenez et al., 2020a A.-F. Jimenez, P.-F. Cardenas, A. Canales, F. Jimenez, A. Portacio A survey on intelligent agents and multi-agents for irrigation scheduling Comput. Electron. Agric., 176 (2020), p. 105474, 10.1016/j.compag.2020.105474 View PDFView articleView in ScopusGoogle Scholar Jimenez et al., 2020b A.-F. Jimenez, P.-F. Cardenas, F. Jimenez, A. Ruiz-Canales, A. López A cyber-physical intelligent agent for irrigation scheduling in horticultural crops Comput. Electron. Agric., 178 (2020), p. 105777, 10.1016/j.compag.2020.105777 View PDFView articleView in ScopusGoogle Scholar Jimenez et al., 2020c A.F. Jimenez, B.V. Ortiz, L. Bondesan, G. Morata, D. Damianidis Long Short-Term Memory Neural Network for irrigation management: a case study from Southern Alabama, USA Precis. Agric. (2020), pp. 1-18 View in ScopusGoogle Scholar Jiménez et al., 2021 A.-F. Jiménez, P.-F. Cárdenas, F. Jiménez Smart water management approach for resource allocation in High-Scale irrigation systems Agric. Water Manag., 256 (2021), p. 107088, 10.1016/j.agwat.2021.107088 View PDFView articleView in ScopusGoogle Scholar Kang et al., 2017 S. Kang, X. Hao, T. Du, L. Tong, X. Su, H. Lu, X. Li, Z. Huo, S. Li, R. Ding Improving agricultural water productivity to ensure food security in China under changing environment: From research to practice Agric. Water Manag., 179 (2017), pp. 5-17, 10.1016/j.agwat.2016.05.007 View PDFView articleView in ScopusGoogle Scholar Kelly and Foster, 2021 T.D. Kelly, T. Foster AquaCrop-OSPy: Bridging the gap between research and practice in crop-water modeling Agric. Water Manage., Elsevier, 254 (2021), p. 106976, 10.1016/j.agwat.2021.106976 View PDFView articleView in ScopusGoogle Scholar Koech and Langat, 2018 R. Koech, P. Langat Improving irrigation water use efficiency: A review of advances, challenges and opportunities in the Australian context Water, 10 (12) (2018), p. 1771, 10.3390/w10121771 View in ScopusGoogle Scholar Kovalchuk et al., 2018 V. Kovalchuk, O. Demchuk, D. Demchuk, O. Voitovich Data mining for a model of irrigation control using weather web-services International Conference on Computer Science, Engineering and Education Applications, Springer, Cham (2018), pp. 133-143 Google Scholar Levidow et al., 2014 L. Levidow, D. Zaccaria, R. Maia, E. Vivas, M. Todorovic, A. Scardigno Improving water-efficient irrigation: Prospects and difficulties of innovative practices Agric. Water Manage., 146 (2014), pp. 84-94, 10.1016/j.agwat.2014.07.012 View PDFView articleView in ScopusGoogle Scholar Li and Yeh, 2004 X. Li, A.G. Yeh Multitemporal SAR images for monitoring cultivation systems using case-based reasoning Remote Sens. Environ., 90 (4) (2004), pp. 524-534 View PDFView articleView in ScopusGoogle Scholar Liang et al., 2020 Z. Liang, X. Liu, J. Xiong, J. Xiao Water Allocation and Integrative Management of Precision Irrigation: A Systematic Review Water, 12 (11) (2020), p. 3135, 10.3390/w12113135 Google Scholar Martínez et al., 2014 E. Martínez, L. Rodríguez, N. Medina Estudio de factibilidad de una planta empacadora (packing house) para cebolla de bulbo (Allium cepa L.) en el Distrito de Riego del Alto Chicamocha (Boyacá) Revista Colombiana de Ciencias Hortícolas, 8 (2) (2014), pp. 287-301 https://doi.org/10.17584/rcch.2014v8i2.3221 CrossRefView in ScopusGoogle Scholar Mccarthy et al., 2014 A. Mccarthy, N. Hancock, S. Raine Simulation of irrigation control strategies for cotton using model predictive control within the VARIwise simulation framework Comput. Electron. Agric., 101 (2014), pp. 135-147, 10.1016/j.compag.2013.12.004 View PDFView articleView in ScopusGoogle Scholar Mishra and Kertesz, 2020 B. Mishra, A. Kertesz The use of MQTT in M2M and IoT systems: A survey IEEE Access, 8 (2020), pp. 201071-201086 CrossRefView in ScopusGoogle Scholar Wilensky, 1999 U. Wilensky NetLogo Center for Connected Learning and Computer-Based Modeling, Northwestern University. Evanston, IL (1999) Google Scholar Nižetić et al., 2020 S. Nižetić, P. Šolić, D. López-de-Ipiña González-de-Artaza, L. Patrono Internet of Things (IoT): Opportunities, issues and challenges towards a smart and sustainable future J. Clean. Prod., 274 (2020), p. 122877, 10.1016/j.jclepro.2020.122877 View PDFView articleView in ScopusGoogle Scholar Perea et al., 2021 R. Perea, E. Poyato, J. Díaz Forecasting of applied irrigation depths at farm level for energy tariff periods using Coactive neuro-genetic fuzzy system Agric. Water Manage., 256 (2021), p. 107068 Google Scholar Perez, 2013 Perez, M., 2013. Modelling the impacts of in-field soil and irrigation variability on onion yield. [Master dissertation, Cranfield University]. URI: http://dspace.lib.cranfield.ac.uk/handle/1826/8588. Google Scholar Qureshi et al., 2011 M. Qureshi, R. Grafton, M. Kirby, M. Hanjra Understanding irrigation water use efficiency at different scales for better policy reform: A case study of the Murray-Darling Basin Australia. Water Policy, 2011 (13) (2011), pp. 1-17, 10.2166/wp.2010.063 View in ScopusGoogle Scholar Raes et al., 2009 D. Raes, P. Steduto, T.C. Hsiao, E. Fereres Aquacrop reference manual FAO, Rome, Italy (2009), p. 218 Google Scholar Raes et al., 2018 Raes, D., Steduto, P., HSIAO, T.C., & Fereres, E., 2018. Chapter 1: Fao crop-water productivity model to simulate yield response to water: Aquacrop: version 6.0-6.1: reference manual. Rome: Fao, 2018b. 19p. Google Scholar Rafea et al., 2003 A. Rafea, H. Hassen, M. Hazman Automatic knowledge acquisition tool for irrigation and fertilization expert systems Expert Syst. Appl., 24 (1) (2003), pp. 49-57, 10.1016/S0957-4174(02)00082-9 View PDFView articleView in ScopusGoogle Scholar Shafi et al., 2020 Shafi, U., Mumtaz, R., García-Nieto, J., Hassan, S., Zaidi, S., Iqbal, N., 2020. Precision agriculture techniques and practices: from considerations to applications. Sensors 17, 1. Article number 3796. https://doi.org/10.3390/s19173796. Google Scholar Sinclair et al., 1984 T.R. Sinclair, C.B. Tanner, J.M. Bennett Water-use efficiency in crop production Bioscience, 34 (1) (1984), pp. 36-40 CrossRefGoogle Scholar Smith and Steduto, 2012 Smith, M., Steduto, P., 2012. Yield response to water: the original FAO water production function. FAO Irrigation and Drainage Paper, 66, 6–13. Google Scholar Smith et al., 2010 R. Smith, J. Baillie, A. Mc Carthy, S. Raine, C. Baillie Review of Precision Irrigation Technologies and Their Application Australia. Publication 1003017/1, NCEA. University of Southern Queensland. Toowoomba (2010) Google Scholar Summerfield, 2008 M. Summerfield Rapid GUI programming with Python and Qt : the definitive guide to PyQt programming Prentice Hall, Upper Saddle River, NJ (2008) Google Scholar Steduto et al., 2009 P. Steduto, T.C. Hsiao, D. Raes, E. Fereres AquaCrop—The FAO Crop Model to Simulate Yield Response to Water: I. Concepts and Underlying Principles Agron.j., 101 (3) (2009), pp. 426-437 CrossRefGoogle Scholar Steduto et al., 2012 Steduto, P., Hsiao, T.C., Fereres, E., Raes, D. 2012. Crop yield response to water. Irrigation and Drainage Paper Nr. 66, FAO, Rome, Italy. 500 pages. Google Scholar Tamburino et al., 2020 L. Tamburino, G. Di Baldassarre, G. Vico Water management for irrigation, crop yield and social attitudes: a socio-agricultural agent-based model to explore a collective action problem Hydrol. Sci. J., 65 (11) (2020), pp. 1815-1829 CrossRefView in ScopusGoogle Scholar Talavera et al., 2017 J.M. Talavera, L.E. Tobón, J.A. Gómez, M.A. Culman, J.M. Aranda, D.T. Parra, L.A. Quiroz, A. Hoyos, L.E. Garreta Review of IoT applications in agro-industrial and environmental fields Comp. Electron. Agric., 142 (2017), pp. 283-297, 10.1016/j.compag.2017.09.015 View PDFView articleView in ScopusGoogle Scholar Talaviya et al., 2020 T. Talaviya, D. Shah, N. Patel, H. Yagnik, M. Shah Implementation of artificial intelligence in agriculture for optimisation of irrigation and application of pesticides and herbicides Artif. Intell. Agric., 4 (2020), pp. 58-73, 10.1016/j.aiia.2020.04.002 View PDFView articleView in ScopusGoogle Scholar Van Rossum and Drake, 2009 Van Rossum, G., & Drake, F. L. 2009. Python 3 Reference Manual. Scotts Valley, CA: CreateSpace. Google Scholar Von Rosing et al., 2015 Von Rosing, M., White, S., Cummins, F., & de Man, H., 2015. Business Process Model and Notation-BPMN. Google Scholar Weather Spark, 2021 Weather Spark., 2021. Average Weather in Nobsa, Colombia States. https://weatherspark.com/y/25267/Average-Weather-in-Nobsa-Colombia-Year-Round. (last accessed 01/12/2021). Google Scholar Weiss, 2013 Weiss, G. (Ed.). 2013. Multiagent systems. MIT press. Weller, U., Leuther, F., Schlüter, S., Vogel, H.J. Quantitative analysis of water infiltration in soil cores using x-ray. Vadose Zone J., 17. Google Scholar Wilensky and Rand, 2015 Wilensky, U., & Rand, W., 2015. An introduction to agent-based modeling: modeling natural, social, and engineered complex systems with NetLogo. Mit Press. Google Scholar Zacepins et al., 2012 Zacepins, A., Stalidzans, E., Meitalovs, J., 2012. Application of information technologies in precision agriculture. In: Proceedings of the 13th International Conference on Precision Agriculture (ICPA 2012). Google Scholar Zamora-Izquierdo et al., 2019 Zamora-Izquierdo, M., Santa, J., Martínez, J., Martínez, V., & Skarmeta, A., 2019. Smart farming IoT platform based on edge and cloud computing. Biosyst. Eng., 177, 4–17. https://doi.org/10.1016/j.biosystemseng.2018.10.014. Google Scholar Zhang and Guo, 2018 C. Zhang, P. Guo FLFP: A fuzzy linear fractional programming approach with double-sided fuzziness for optimal irrigation water allocation Agric. Water Manage., 199 (2018), pp. 105-119, 10.1016/j.agwat.2017.12.013 View PDFView articleGoogle Scholar Cited by (17) New approach to monitoring a wastewater irrigation system controlled by the artificial neural network (ANN) 2023, Groundwater for Sustainable Development Show abstract Artificial intelligence applications in the agrifood sectors 2023, Journal of Agriculture and Food Research Show abstract Water management towards sustainable food industry 2023, Sustainable Development and Pathways for Food Ecosystems: Integration and Synergies Show abstract Sustainable materials and infrastructures for the food industry 2023, Sustainable Development and Pathways for Food Ecosystems: Integration and Synergies Show abstract A review on multirobot systems in agriculture 2022, Computers and Electronics in Agriculture Citation Excerpt : It is difficult to estimate the condition of irrigation systems because of the need to monitor several factors, including the quality, amount, and location of water. Some irrigation applications require remote sensing over a wide area within a short time (Jimenez et al., 2020; Jiménez et al., 2022). Therefore, research is being actively conducted to measure water systems for irrigation by attaching sensors to UAVs. Show abstract An IoT-based maintenance framework for irrigation and drainage water management system at regional scale 2022, IFAC-PapersOnLine Show abstract View all citing articles on Scopus View Abstract © 2021 Elsevier B.V. All rights reserved. Recommended articles Modeling crop water consumption and water productivity in the middle reaches of Heihe River Basin Computers and Electronics in Agriculture, Volume 123, 2016, pp. 242-255 Jiang Li, …, Adebayo J. Adeloye View PDF Smart farming and water saving-based intelligent irrigation system implementation using the Internet of Things Recent Trends in Computational Intelligence Enabled Research, 2021, pp. 339-354 Sagnick Biswas, …, Jyoti Sekhar Banerjee Artificial intelligence methods reliably predict crop evapotranspiration with different combinations of meteorological data for sugar beet in a semiarid area Agricultural Water Management, Volume 254, 2021, Article 106968 Sevim Seda Yamaç View PDF Show 3 more articles Article Metrics Citations Citation Indexes: 16 Captures Readers: 98 View details About ScienceDirect Remote access Shopping cart Advertise Contact and support Terms and conditions Privacy policy Cookies are used by this site. Cookie settings | Your Privacy Choices All content on this site: Copyright © 2024 Elsevier B.V., its licensors, and contributors. All rights are reserved, including those for text and data mining, AI training, and similar technologies. For all open access content, the Creative Commons licensing terms apply."

Paper 3:
- APA Citation: Gour, S., Kasera, R. K., Singh, W. N., & Acharjee, T. (2023). Low cost IoT based smart irrigation system for potato cultivation. In 2023 IEEE Guwahati Subsection Conference (GCON) (pp. 10183589). IEEE.
  Main Objective: To develop and evaluate a smart irrigation system for potato cultivation using IoT and machine learning techniques.
  Study Location: Assam, India
  Data Sources: Soil moisture sensors, temperature sensors, humidity sensors, water level sensors
  Technologies Used: IoT, Arduino, LoRaWAN, MQTT, machine learning, deep belief neural network
  Key Findings: The smart irrigation system effectively optimized water usage and improved potato growth compared to manual irrigation. Machine learning models, particularly the deep belief neural network, showed promising results in predicting irrigation schedules and optimizing water consumption.
  Extract 1: "Machine learning classification models and Deep belief neural network (DBNN) are employed to create intelligent irrigation systems, and a quick comparative analysis has been done with earlier studies."
  Extract 2: "The results obtained helped us to conclude that our system achieved optimum use of water for irrigation."
  Limitations: None
  Relevance Evaluation: The paper is highly relevant to the point on the integration of deployed machine learning models with other components of the automated irrigation management pipeline, such as data preprocessing and decision-making. The study specifically employed machine learning classification models and a deep belief neural network to create intelligent irrigation systems and performed a comparative analysis with earlier studies.
  Relevance Score: 0.95
  Inline Citation: (Gour et al., 2023)
  Explanation: The study aimed to develop and evaluate a smart irrigation system for potato cultivation using IoT and machine learning techniques. The system monitors soil parameters, weather conditions, and water levels, and automatically controls irrigation based on predefined thresholds and machine learning models. The study found that the system effectively optimized water usage and improved potato growth compared to manual irrigation.

 Full Text: >
"This website utilizes technologies such as cookies to enable essential site functionality, as well as for analytics, personalization, and targeted advertising purposes. To learn more, view the following link: Privacy Policy Manage Preferences IEEE.org IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account Personal Sign In Browse My Settings Help Access provided by: University of Nebraska - Lincoln Sign Out All Books Conferences Courses Journals & Magazines Standards Authors Citations ADVANCED SEARCH Conferences >2023 IEEE Guwahati Subsection... Low Cost IoT Based Smart Irrigation System for Potato Cultivation Publisher: IEEE Cite This PDF Shivashish Gour; Rohit Kumar Kasera; W. Niranjan Singh; Tapodhir Acharjee All Authors 112 Full Text Views Abstract Document Sections I. Introduction II. Literature Survey III. Proposed Methodology IV. Experiment Results and Analysis Conclusion Authors Figures References Keywords Metrics Abstract: In today's world Smart agriculture is playing vital role to enhance quality and quantity of food production with optimum utilization of farmers' time and efforts. Smart irrigation is an important component of it. Potato cultivation needs regular irrigation for maintaining the required soil moisture. Potato plants are normally grown in dry season. Therefore, scarcity of water for irrigation is observed in many potato fields. Here we have proposed a smart irrigation system for optimum usage of water during irrigation in potato fields. Prior to performing smart irrigation, various soil parameters were monitored, like soil type, humidity, and temperature of the atmosphere. To ensure the quality of water that is to be supplied to the potato plants, the water pH was also checked. Data from the sensors were transferred to the edge server using Low-Power Wide Area Network (LPWAN) technology and from the edge server to the cloud using the Message Queuing Telemetry Transport (MQTT) protocol. Machine learning classification models and Deep belief neural network (DBNN) are employed to create intelligent irrigation systems, and a quick comparative analysis has been done with earlier studies. The results obtained helped us to conclude that our system achieved optimum use of water for irrigation. Published in: 2023 IEEE Guwahati Subsection Conference (GCON) Date of Conference: 23-25 June 2023 Date Added to IEEE Xplore: 21 July 2023 ISBN Information: DOI: 10.1109/GCON58516.2023.10183589 Publisher: IEEE Conference Location: Guwahati, India SECTION I. Introduction Agriculture plays a crucial role in a nation's economy by providing food, contributing to the GDP, and offering employment opportunities. Today, technology is being employed to enhance various aspects of agriculture. Smart agriculture uses a combination of technologies such as IoT, AI, and robots to automate pre- and post-harvesting processes. Smart agriculture improves the quality and quantity of crop production, reduces labor requirements, and ensures safe delivery of premium food to customers [1]. Smart irrigation is one such technology that conserves water by automating the watering system using weather and soil moisture conditions. Components of smart irrigation systems include data processing, wireless communication, fault detection, irrigation control, and data collection [2] [3]. This study focuses on smart irrigation techniques to overcome the challenges faced by farmers in potato cultivation in the “Sonabarighat” region of “Cachar, Assam, India.” The study involves a visit to a farm field to understand the limitations faced by farmers, including water scarcity, electrical shortages, and inadequate monitoring of large fields. To achieve our objectives, we employed sensors such as DHT22, soil moisture, and water level sensors to monitor the soil conditions and the water levels in the water source. We used 9V batteries to reduce power wastage, and we also checked the pH level of the water resources available for crop irrigation. This paper is divided into the following sections: an introduction in Section I, a review of the literature in Section II, a methodology proposal in Section III, the experimental findings and analysis in Section IV, and a conclusion with recommendations for further research. SECTION II. Literature Survey A study by Amoura, Mohammed et al. [4] estimates the amount of irrigation water needed for potato crop using a smart irrigation system. It is designed to ensure the equilibration of crop growth based on parameters such as soil moisture and soil temperature. The drip irrigation system used here demonstrates the ability to increase potato tuber weight. Analyzing the potato tuber size showed that 80% of the tubers were 30–35 mm in size. Their production increased by 124.83% while consuming less water. Ananthi, N et al. [5] proposed a system for testing the soil with sensors such as pH, temperature, and humidity. Using it, farmers can select the appropriate crop for their soil. Through the Wi-Fi router, sensor values are sent to the field manager for crop suggestions with the help of the mobile application. In order to mitigate water scarcity when the soil temperature is high, automatic irrigation is programmed. The system enables farmers to increase agricultural production. Also, crop images were sent to the user device so as to suggest pesticides for crops that were infected with insects. Rashmi, M V et al. [6] proposed an automated water plant system that supplies enough water to the plants. Additionally, the system measures soil moisture, temperature, and humidity in the area. Here, the author used a mobile phone to control all the equipment and devices and for sending signals to the irrigation system, to start / stop irrigation. Coelho, Alessandra Dutra et al. [7] in their paper developed a system for acquiring soil parameters for agricultural application. Data acquisition is performed using sensors and the microcontroller. Using LoRaWAn technology, data was transmitted to the cloud. The authors also created an interface to monitor the data regularly and to make the data available for future use. Several studies have been conducted regarding the data transfer protocols employed in IoT architectures. Transfer of data is also an imperative aspect of IoT architecture that should be considered. One such study is done by Jerald, F et al. [8] which examines the data transfer process that occurs over hypertext transfer protocol (HTTP). The performance of the system is severely degraded when communication is done via HTTP, as data is transferred in tiny blocks. Using the Message Queuing Telemetry Transport (MQTT) protocol for data transfer has been shown to reduce the overhead of the HTTP protocol when used in IoT networks. Another study done by Nawandar, Neha K et al. [9] proposes a low-cost intelligent system for smart irrigation. The authors use MQTT and HTTP protocols to provide the current crop condition when the devices are in distant locations. This irrigation system makes use of a neural network to monitor the data gathered and devise a schedule based on that data. Some other works were done on smart irrigation using machine learning techniques. The main objective of Vij, Anneketh et al. [10] was to solve the over irrigation, soil erosion and crop specific irrigation problem. They created a wireless sensor network (WSN) in which each location is covered by sensors that communicate data to a central server. In their research, they employed machine learning algorithms to forecast irrigation patterns based on possible crop and weather conditions. Another work done on Machine learning by Jamroen, Chaowanan et al. [11] presented a fuzzy based intelligent irrigation scheduling system using a low-cost wide sensor network. Their approach uses crop and soil variability to optimise irrigation scheduling. They computed the Crop water stress index and soil moisture content. An IoT-based Long Range Radio (LoRa) based for intelligent soil and weather condition monitoring system for precision agriculture in smart towns was proposed by Singh, D.K., Sobti, et al [12]. In this scenario, the weather station uploads soil and weather data to the Internet of Things (IoT) cloud for monitoring and to help with irrigation scheduling. The meteorological conditions that the weather station will perceive are chosen with care in order to support the use of ML algorithms for irrigation scheduling and prediction. A smart irrigation system with Internet of Things capabilities was proposed by Khan, A.I. et al [13]. where the data is gathered via IoT nodes. The progress of the seedlings is monitored using the machine learning technique to improve. Effective energy routing is the focus of the study. The data is sent collectively to the base station via cluster heads (CH). The simulation on Network Simulator-2 (NS2) software is used for all the experimentation. A hybrid remote-controlled device, proposed by Sangeetha, B. Parvathi, and colleagues, uses the Global Positioning System (GPS) and Radial Function Network (RFN) to control the irrigation system [14]. This device has a system performance of 0.7734 accuracy and can predict temperature, maintain air pressure, and reduce humidity in water content. SECTION III. Proposed Methodology Whenever building a model, there are a number of technological aspects, layers, applications, and components to consider. Most of these IoT architectures are built upon core fundamentals. The system focuses on 4 core layers of an IoT architecture. The system consists the perception layer, which consists of sensors to sense data. A DHT22 (temperature and humidity sensor), and soil moisture sensor is used to sense the soil and climate related data. To check the water level of the water resource the water level sensor was used. An Arduino UNO board was used to capture the sensed data and is also used for processing it. A network layer is used which allows data to be transferred between devices and IoT gateways. The data from the Arduino UNO is being transferred to another microcontroller, Arduino NANO, with the help of the LoRa module (SX-1278), thus creating a Low Power Wide Area Network (LPWAN). The automatic decision to turn the water motor on or off will be taken by the board only. To make the data available for monitoring, the data is being sent to the cloud. For that purpose firstly the data would have to pass through a gateway. Personal computer acts as the IoT Gateway in our system, which is the processing layer that processes data across the system. Fig. 1. Architecture for smart irrigation system Show All As part of our work, we performed serial communication between the Arduino NANO board and the desktop computer to save the sensor data in to a local database. With the help of a Python script, data is saved to the MySQL database, where processing is done. The system consists of the application layer, which aids in the implementation of analytics and reporting. In order to provide access to data, the Python Django API is used, and the MQTT protocol is used for data transmission to the cloud for easy visualization. The whole architecture is given in Fig. 1. The system follows a publish/subscribe architecture and contains three key components: Publisher, Broker, and Subscriber. Publisher sensors sense data and send it to the broker for processing and, if not needed, enter sleep mode. Brokers send that information to subscribers, and subscribers are application-based and connected to brokers. The broker will inform the subscriber if newly acquired data are received as like [15]. The flow chart of the proposed system is shown in Fig. 2. The model uses DHT22 sensor, Soil Moisture sensor, and Water level Sensor, and a Water Motor which acts as an actuator. The DHT22 sensor is used to measure Temperature and Humidity of the environment. The sensor is equipped with an NTC for temperature measurements and an 8-bit microcontroller for humidity and temperature measurements. NTC (Negative Temperature Coefficient) is a type of thermistor, which is used to calculate the temperature Fig. 2 Flow diagram for automated irrigation system Show All DHT22 can measure temperature from −40°C to 80°C, and humidity from 0% to 100% with an accuracy of ± 1°C and ±1.1%, respectively [16]. Soil moisture is detected using this soil moisture sensor module. The device measures the volumetric water content in the soil and outputs its moisture level [17]. Volumetric water content can be calculated based on the ratio of water volume to total volume (soil volume + water volume + air space), and is given by: θ= V w V s + V w + V a (1) View Source In the above Equation (1): θ - Volumetric Water Content V s Volume of Soil V w Volume of Water V a Air space. The Soil Moisture provides Analog values which can be converted to percentage value as shown below. MP=(100−( ML 1023 )∗100) (2) View Source In the above Equation (2): MP - Moisture percentage ML - Moisture Level Water level sensor, as name suggests is used to measure the Water level in a vessel. To irrigate the plant, DC 5v Mini micro submersible water pump is used. As discussed in [18] [19], potato farming can take place where the climate is cool, soil is fertile and is having a good moisture. According to the survey, it was found that Temperature range between 20°c and 24°c is ideal for Potato tuber planting. In order for potato tubers to grow, they need plenty of air and water. Additionally, they need underground space to grow and expand. It is therefore ideal to have loose, loamy soil. Firstly, the algorithm checks the type of soil. In our experiment we have the soil whose property matches with that of Loamy soil, which is suitable for potato plantation. We have considered a threshold value as suggested by the literature survey. Soil moisture, Temperature and Humidity, and water level of the container is being sensed simultaneously. If the soil moisture is within the threshold range, the motor will be in Off state. If the soil moisture ranges outside the threshold value, the water pump will in On state. But the pump will not instantly start as that will make the soil wet in every situation. If the soil is wet for long time, that will degrade the condition of the potato plat. This factor is being checked while making the system. The ideal temperature of the potato plant is kept at 30°c for ideal growth, and the humidity is kept at 59% to 70%. The water level of the container is kept at 510. The pH of the water to be supplied is also checked, which should range between 6.5 to 8.4 [20]. For data storage purpose, Serial communication is performed to grab the data from the Arduino Board. Also, the data is made available to the local database as well as to the ThingSpeak cloud server. Sensor data will be kept locally in the event that data is lost due to an internet outage, and when the internet is once more operational, the missing data will be automatically synchronized from the local database and updated to the cloud server. Artificial intelligence (AI) classifier models including Decision Tree (DT) [21], Random Forest (RF) [22], Radial function Multilayer Perceptron Model (RFMLP) [23], and Deep Belief Neural Network (DBNN) [24] have been used to assess the performance of an automated irrigation system. The feature values were set as temperature, humidity, and soil moisture level to evaluate the performance of the anticipated irrigation system before real-time data were fitted into the model for training. The technology anticipates the automatic scheduler as the water motors On or Off states based on the soil temperature and moisture content. SECTION IV. Experiment Results and Analysis In order to conduct the experiment, two plants were set up. We set up the first plant with no sensors and manually watered it with the water used in daily use. With the second plant, automatic irrigation was performed using sensors. Fig. 3. shows the overall setup of the potato plants. The two plants were sown simultaneously using the same “Seed Potatoes.” Both experiments have been done at “Assam University, Silchar, Assam, India.” The plants were sown at the same day on 12th January 2023, and was continuously monitored for one month till 12th February 2023. According to the discussion for cold climate in Section III, the potato plants should be watered every 5–7 days, and accordingly, the first plant was watered. For the second plant, the sensors were doing the automatic irrigation, whenever they reached the provided threshold values. Fig. 3. Potato plant with sensors attached to it. Show All Daily monitoring of the second plant was conducted from 8:00 AM to 3:00 PM. Below is a table showing some of the recorded sensor values. Table I. Recorded sensor values Table I. shows the sensor values recorded at different times. In the paper, the threshold value for the soil moisture ranges from 410(60%) to 205(80%), means if the soil moisture is within this range, then the water motor will be off. The first two rows in the above table shows that the moisture is 670 and 653 which is 34.5% and 36.16% respectively. Thus, that condition refers that the soil is not ideal type for planting the potato plants. Although, the temperature and humidity were high, the motor was in Off state as the Soil is not of the ideal type. The threshold is kept at 650, which means if the soil moisture is below 650, then only it is the ideal soil type for the soil. Thus, in third row, the motor was On, despite the humidity being the ideal condition. Also, the water level of the container has decreased as the water has to be irrigated. The fourth row explains the conditions when the soil moisture is ideal, but the temperature and humidity is not favorable. In such case also, the motor was in Off state, as despite being the outer weather conditions, the soil moisture was in ideal state. Here the soil is still in wet condition, so despite being the temperature and humidity out of threshold values, the motor was Off. If the power is given to the motor, then in such case, the soil will always be in wet condition, thus destroying the plant. The last case showcases the situation when the temperature, humidity, and soil moisture were not in the range of thresholds thus, providing power to the motor and the status is shown as On. After monitoring, it was found that potato plants were irrigated automatically every four days with adequate water. Table II. shows some of the timestamps at which the plants were irrigated. Fig. 4. Sensor data visualization on the cloud using mqtt Show All Table II. Irrigation timestamps The data was received from the sensors, that were sent to the computing machine using the LoRa module. Serial communication was performed using a Python script to send data from the Arduino board to the MySQL database. Using Python Django, an API was created which shows the data being sent to the webpage. MQTT protocol is used for the visualization purpose, which helps in sending the data to the cloud, which can be seen on Fig. 4. As the work was conducted in the winter season, it was observed that, temperature and humidity were not the main factors, while performing the irrigation to the plants. The main factor which decides whether the plant must be irrigated or not is determined by the soil moisture. As mentioned above, threshold values have been set according to the literature survey. The Fig. 5. shows a graph illustrating how soil moisture changes before and after irrigation. Fig. 5. Change in soil moisture before and after the irrigation Show All The effectiveness of the automated irrigation system has been assessed using a variety of classification models. For each model, 5, 7, and 12 K-split cross-validations were used to train and test the model using a real-time dataset. Table III displays the parameters used in the DBNN model architecture. The data set for the DBNN model was divided into the train, test, and validate parts, with 70% of the dataset being used for training, 20% for testing, and 10% for validating. Table: III Dbnn model parameter RFMLP had a classifier model accuracy score of 98.93%, DT had a score of 99.76%, and RF had a score of 99.62% during 5 K-split cross-validations. RFMLP had an accuracy score of 98.74% at 7 K-split, DT had a score of 99.74%, and RF had a score of 99.42%. However, the model's performance is better at a 12 K-split. Then, utilizing this realtime sensor dataset for potato crops, the performances of all applied classification models were examined in the Table IV at 12 K-split cross-validations, in which DT, RFMLP and RF models performed better than the others. The DBNN model Performance score is shown in the Table V. Table: IV Classification model comparision Table: V Dbnn model performance score During the literature survey, it was observed that some researchers had worked on similar subjects. Although the work has already been done, this paper also covers some aspects that were not covered in their research. The below Table VI shows a comparative analysis of this paper with some of the renowned papers. Table VI contains a brief comparison of the proposed Hybrid wireless sensor network intelligent irrigation module with existing research. It shows that the proposed module outperforms others in terms of factors like cost, energy, radio frequency transmission, data synchronization, and system intelligence performance. Table: VI Comparative analysis Conclusion The primary objective of the paper was to develop a system that will automatically and intelligently irrigate the plants. While developing the system various challenges as well as new research areas were explored. One such challenge was calibrating the devices. The data received was unreliable if the device was not calibrated properly. To remove this, device such as DHT22, was calibrated at room temperature. Another challenge was the interference that has been received while using the LoRa module. Since it uses the Radio frequency waves, while performing the experiment, it was interfered with the Wi-Fi devices available in the department. This is one of the research areas which will be explored in the future. Lastly, we are using the internet to send the data to the cloud. There arise such situations when the internet connectivity is down. Then in such case, the data will not be available to the cloud. To resolve this, if the internet is not available, the data is sent to the local database. When the internet becomes available again, all the data that was not sent during the non-availability of the internet will be pushed to the cloud, preventing any data loss. The automatic irrigation system has been assessed using a decision-based machine learning hybrid classifier to make it smarter, and the results show that the DBNN, DT, RF, and RFMLP models perform better than other models. Authors Figures References Keywords Metrics More Like This Arduino-based smart irrigation using water flow sensor, soil moisture sensor, temperature sensor and ESP8266 WiFi module 2016 IEEE Region 10 Humanitarian Technology Conference (R10-HTC) Published: 2016 Toward Field Level Drought and Irrigation Monitoring Using Machine Learning Based High-Resolution Soil Moisture (ML-HRSM) Data IGARSS 2023 - 2023 IEEE International Geoscience and Remote Sensing Symposium Published: 2023 Show More IEEE Personal Account CHANGE USERNAME/PASSWORD Purchase Details PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS Profile Information COMMUNICATIONS PREFERENCES PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help? US & CANADA: +1 800 678 4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | IEEE Privacy Policy A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity. © Copyright 2024 IEEE - All rights reserved."

Paper 4:
- APA Citation: Swami, M., Verma, D., & Vishwakarma, V. P. (2020). Blockchain and Industrial Internet of Things: Applications for Industry 4.0. In Proceedings of International Conference on Artificial Intelligence and Applications (pp. 279-290). Springer, Singapore.
  Main Objective: To examine the applications of Blockchain and Industrial Internet of Things (IIoT) in the context of Industry 4.0.
  Study Location: Unspecified
  Data Sources: Literature review, case studies
  Technologies Used: Blockchain, Industrial Internet of Things (IIoT)
  Key Findings: Blockchain and IIoT have the potential to improve the efficiency, security, and resilience of automated irrigation systems. Implementing Blockchain and IIoT systems in real-world irrigation scenarios poses several challenges, such as scalability, security, and interoperability. Researchers and practitioners need to address these challenges to fully realize the potential of Blockchain and IIoT in automated irrigation management.
  Extract 1: "MQTT is the preferred choice of open-access messaging protocol for the present IoT systems, except in ledger-based systems as seen."
  Extract 2: "The proposed IoT network could work on the basics of blockchain such as host configuration and BIOS details on ledger, requiring every device on that IoT cloud to download latest configurations at specific time intervals and encryption to preserve network privacy."
  Limitations: The study does not provide a detailed analysis of the security implications of implementing Blockchain and IIoT systems. The study also does not provide a comprehensive evaluation of the performance of Blockchain and IIoT systems in real-world irrigation scenarios.
  Relevance Evaluation: The study is highly relevant to the point of integrating deployed machine learning models with other components of the automated irrigation management pipeline. The study provides an in-depth analysis of the applications of Blockchain and IIoT, including their potential for enhancing the efficiency and security of automated irrigation systems. The study also examines the challenges associated with implementing Blockchain and IIoT systems and proposes solutions to address these challenges. This information is valuable for researchers and practitioners working in the field of automated irrigation management.
  Relevance Score: 0.9
  Inline Citation: Swami et al. (2020)
  Explanation: The study's primary goal is to examine the applications of Blockchain and Industrial Internet of Things (IIoT) in the context of Industry 4.0. The study's objective is to explore how Blockchain and IIoT can improve industries such as smart cities and healthcare. The study also aims to identify the potential challenges associated with implementing Blockchain and IIoT systems and propose solutions to address these challenges.

 Full Text: >
"Your privacy, your choice We use essential cookies to make sure the site can function. We also use optional cookies for advertising, personalisation of content, usage analysis, and social media. By accepting optional cookies, you consent to the processing of your personal data - including transfers to third parties. Some third parties are outside of the European Economic Area, with varying standards of data protection. See our privacy policy for more information on the use of your personal data. Manage preferences for further information and to change your choices. Accept all cookies Skip to main content Advertisement Log in Find a journal Publish with us Track your research Search Cart Home Proceedings of International Conference on Artificial Intelligence and Applications Conference paper Blockchain and Industrial Internet of Things: Applications for Industry 4.0 Conference paper First Online: 02 July 2020 pp 279–290 Cite this conference paper Access provided by University of Nebraska-Lincoln Download book PDF Download book EPUB Proceedings of International Conference on Artificial Intelligence and Applications Mahesh Swami, Divya Verma & Virendra P. Vishwakarma  Part of the book series: Advances in Intelligent Systems and Computing ((AISC,volume 1164)) 1129 Accesses 4 Citations Abstract Internet of Things (IoT) is commanding a great role in connecting electronic appliances through the cloud. It is an expanding area of research and is finding association with other emerging technologies like 3D printing and machine vision. The growing popularity of the technology is an extension of the Internet boom. An expanding Internet user base, cheaper smart devices and greater on-cloud memory are encouraging the spread of IoT. From fridges to water geysers, any electronic appliance may be connected to the IoT network. The advantages of remote access, master control and cloud storage give it unprecedented advantage over conventional means of communication. In this paper, we attempt to review some latest applications of IoT across various sectors: location tracking, sports, smart devices and blockchain-based security. IoT remains a rapidly developing topic with significant interdisciplinary research and development potential. Further integration of sensors for inputs will propagate the spread of IoT. Keywords IoT IIoT Cloud computing Sensors Computer vision Smart devices MQTT Industries Blockchain Cryptocurrency Ethereum P2P Ethernet Hashing Access provided by University of Nebraska-Lincoln. Download conference paper PDF Similar content being viewed by others Blockchain Enabled Internet of Things: Current Scenario and Open Challenges for Future Chapter © 2023 Applications of Blockchain in Industry 4.0: a Review Article 11 February 2022 Blockchain and 5G-Enabled Industrial Internet of Things: Application-Specific Analysis Chapter © 2021 1 Introduction and a Brief History of IoT Internet of Things or IoT is the interconnection of domains, devices and data through the physical media of electronic devices. It involves connections through the use of cloud computing and existing Internet protocols and servers. With the further integration of computer vision, the technology has scopes of reaching great heights of an interconnected world previously not possible through human intervention. IoT was first conceived by writers in the 1930s as they imagined the day when manual tasks would not be required to take care of repetitive work. A breakthrough introduction to the idea happened with the invention of barcode by John Woodland in 1932. Barcodes were assigned to each product and soon became common in the US supermarkets. The ARPANET, predecessor of the modern Internet, came around in 1969 [1]. The first IoT prototype was a cola vending machine at Carnegie Mellon University (USA) which kept a track of the inventory and whether cola bottles were cold or not [1]. The technology has grown at a rapid pace since then, due to the following reasons:-miniaturization of electronics, improved Internet and Communication Technology (ICT) innovations, globalization and advancement of package-based software and coding and automation. Thus as we write this paper, several hundred devices get added to the vast Internet of Things around the globe. This paper presents a review of industrial IoT in the intelligent monitoring segment, utilities and water utilization management segment in Sect. 2. Section 3 presents a blockchain-based IoT system. In Sects. 4 and 5, we attempt to present future proposals of systems based on summarization of the systems (Fig. 1). Fig. 1 IoT framework Full size image 2 IoT for Industry: Applications for Industrial Internet of Things There are huge changes in industries during the trend of automation across all over the world. IoT helps to transform in various aspects like smart cities, healthcare, etc. Due to a sudden increase in the use of machines and vehicles in the past few years, it causes a huge effect on the atmosphere and leads to diseases like heart problems, asthma and bronchitis [2, 3]. IoT in industries will lead to an increase in the production and output’s efficiency of any plant, but the atmosphere concern is the primary interest. In chemical industries, there are huge chances of gas leakage like methane, butane, CO2, etc. which can prove lethal for life. Smart sensors help to detect these gases and can be used to ease the problem [4]. A microcontroller-based gas monitoring system was designed to detect and alert the system when the threshold level is crossed [5]. 2.1 Intelligent Industry Monitoring Systems: Toward Industrial Internet of Things (IIoT) This system was designed by using various smart real-time monitoring sensors that are deployed on the shop floors. These sensors help into detect gas leakage, boiler temperature, fuel leakage when crossing the threshold level and alert the floors manager via various means like cloud data and raise alarm. This system is combined with Raspberry Pi to sense the various leakages and used for real-time monitoring of the shop floor. In this setup, MQ-6, MQ-7 and MQ-135 are used to monitor the smoke, carbon monoxide, LPG, methane, etc. [6]. The DHT-11 is used to monitoring the boiler temperature and humidity level. This data is monitoring continuously and uploaded to the Google Cloud from which it is possible to introduce to IoT shield and Raspberry Pi. The connection between Raspberry Pi and server is established by the application program interface (API). The edge devices, application-level security and security of gateways are ensured by using IoT shield [6] (Fig. 2). Fig. 2 Proposed system versus actual prototype [6] Full size image 2.2 IoT Paradigm for Supervision in the Utilities Industry In the current technology, there are lots of scope of IoTs applications such as smart wireless sensors, universal computing and communication via mobile. However, there are lots of options in this field because of a huge variety of diversity of hardware and software, and some are under study [7]. The middleware (broker) platform plays a vital role, and so, there are lots of options for these platforms and protocols, selecting based on requirement meets. In this device, we use the Message Queue Telemetry Transport (MQTT) protocol. The reason for choosing this protocol since it is available as open source for both publish and subscribe a message and it is also designed for limited no. of devices having a high latency, less bandwidth and untrusted networks [8]. There are lots of applications of MQTT, and some include water utilization metering and to monitor the energy generator systems. Energy generator systems monitoring based on IoT Due to the desired features of MQTT, this system is designed by using MQTT protocol and IoT because of its less hardware cost, less communication bandwidth, high latency network and more instability. This type of system has the capability to monitor the data as well as to describe the type of signal which is monitored. The generator set which usually is diesel operated is controlled or driven by programmable logic controller (PLC), and then, Modbus RTU protocol helps to communicate with the management module which helps to communicate with broker with the help of MQTT operating in cloud computing [9]. The broker helps into make the data available to Web application which is monitored by personal computers (PC) or from mobiles which communicates by MQTT. The Wemos D1 Mini Development Kit is used by this type of protocol which features the “ESP8266EX” chip [10, 11]. This chip helps to integrate with Arduino’s development interface [12], and it is a low cost and has built-in Wi-Fi modules. The Wemos D1 Mini has integrated Wi-Fi antenna, micro USB port, 16 pins out of which some are for general purpose, reset button and a micro USB port which helps to connect with the computer via cable [9]. Data collection from the PLC is done by using RS485 transceiver via a protocol. The general purpose input/output (GPIO) helps to direction control of RS-485 half duplex. The setup of the prototype is done by the computer or mobile using Wi-Fi network. There are also three LEDs to indicate the system state [9]. The mobile application named as MQTT dash is available on play store for Android to configure the prototype using mobile browser as shown [13] (Fig. 3). Fig. 3 LHS shows configuration page and RHS shows monitoring dashboard [9] Full size image Water utilization metering for the large area using IoT [9] In daily life, most of the water utilization measuring devices uses a personal protocols or technologies which are used as private and do not interact with others in a friendly way, and it causes a problem at big enterprise level. Thus we need to design a device based on IoT which is capable of collecting the data and have a tendency to interact with others as open-source. The purposed device utilizes the low-power microcontroller system having a radio frequency information transmission and uses cloud services by MQTT protocol for water consumption measuring [9]. It aims to minimize the cost of setup and increases the coverage area by expanding the Wi-Fi coverage. This setup uses a CC1200DK development kit which integrates with ESP8266 Wi-Fi device and together of this sends data to a server. For monitoring the data of transmitting and collecting volume consumed by the concentrator, we use another CC1200DK development kit with an output water meter’s pulse [9]. This kit has the capability to stand with different transmission ranges, and it is possible to work by fluctuating output powers that vary from 14, 10, 5, 0, −5, −10 and −16 dB [9]. The test is conducted on the large distance which is obstacle free (Fig. 4). Fig. 4 Communication system [9] Full size image The distance and the location of test conducted as shown below [14]. To check the capability of MQTT, two hardwares are designed. The first hardware uses a Mosquitto broker and Ethernet network-based BeagleBones Black boards, and in the second hardware, BeagleBone is replaced by the ESP8266-12F to establish the network by using Wi-Fi module as shown in Fig. 5 (LHS and RHS). This setup measures the time interval between the Wi-Fi network and the Ethernet network which is used for data transmission. Grafana dashboard application is used for measuring the water consumption reading, and in this, it is possible to represent the data in graphical form and also consolidate the data, and we can also use MQTT dashboard in smartphone application [9] (Fig. 6). Fig. 5 Local and test distance [9] Full size image Fig. 6 Ethernet to Ethernet and Ethernet to wireless (LHS and RHS, respectively) [9] Full size image 3 Blockchain for IoT: Applications The Internet of Things is gaining wider acceptance for day-to-day transactions to establish a machine–machine interaction with minimal human interaction. The era of bots is upon us, and soon the need for human labor shall be minimized and changed to fit into the needs of the Fourth Industrial Revolution. The aspect of security in an increasingly connected world becomes ever important, as cyberattacks become common. The need for securing IoT networks can be listed as a conjugation of one or more of the following reasons, namely ransomware attacks by blocking crucial financial infrastructure (for instance, “WannaCry” malware), informational leaks and hijacking of entire systems for criminal purposes. In this respect, blockchain can be seen as a major research field application for IoT systems [15]. It is a relatively new concept, and countries are wary to implement it for lack of central authorities, but the idea can certainly be explored (Fig. 7). Fig. 7 Distributed and decentralized network for blockchain-based IoT system Full size image A blockchain-based IoT system works on distributed ledger technology (DLT) that performs the following functions named as Guarantees the integrity of stored data, Maintains each user as an integral part, avoids centralization of server data and supports data distribution. Blockchain became a common word through the introduction of bitcoin introduced by Satoshi Nakamoto back in 2008 [16]. The ordered blocks in the ledger system are interconnected through hashes from the previous block. This ensures that transaction history cannot be deleted without deleting the characteristic part of the system. This is the reason for the rapid popularity gained by bitcoin amid investors. Security issues remain a challenge to be sidestepped for researchers and designers. Some common issues may be spoofing and insecure physical interface attacks on low level which involve physical link layers of communication; buffer attacks, routing attacks and authentication-based privacy violation on intermediate levels and insecure firmware and middleware security for interfaces [15] (Fig. 8). Fig. 8 Representation of a single block of a financial blockchain [17, 18] Full size image 3.1 IoT-Based Blockchain Distributed Ledger Technology (DLT) System: Decentralized Networking Using Blockchain In a blockchain-based IoT network, the communication protocol is replaced with a blockchain network. As viewed in figures above, data processed in IoT systems will only grow over time; hence, robust handling systems are needed. A way to handle these is through peer-to-peer messaging using distributed ledgers, similar to peer-to-peer networking (PPN) systems [15,16,17,18,19,20,21,22]. The blockchain platform is Ethereum, which has an advantage over bitcoin as being Turing-complete, i.e., being compatible with all types of systems through their unique identities. The Ethereum Virtual Machine (EVM) with Golang programming language is used. Additionally, Keccak-256 hash function and encoding are used on Ethereum [16]. Tests reveal that systems with and without blockchain have almost similar security levels of encryption algorithms. To minimize data leaks, a proper linkage between protocols is necessary. This can be made through a feedback loop between analytical machines and sensor networks. Communication is possible through ZigBee and/or Bluetooth. Edge servers may be used which have the advantage of high power computing in case of arduous hash value verification calculation results. The blockchain nodes may be interconnected together to help store data. Broadcast of data occurs as node i transmits data to the nearest node, i.e., “i − 1” or “i + 1” (refer Fig. 2). This chosen node then broadcasts the data further to all P2P nodes. Following this, a task is delivered by the network which needs all nodes to calculate a hash value. Time consumption between different nodes is compared for local computation offloading levels and other considerations. The node carries the choice to either compute locally or offload to edge servers following digital signatures. The result is validated by the home node and if found to be correct, is transmitted to all nodes. If all nodes validate the result and if legal as per encoding, the block is added to the blockchain [20]. Dataset sharing among communities is an upcoming topic in IoT applications, which further uses a Reference Integrity Metric (RIM) for each dataset on a blockchain ledger system (Fig. 9). Fig. 9 Architecture for IoT [16] Full size image Remote updates to the system can be made possible since the system is always online [21]. Self-healing of the code can also be done through data redundancy. 3.2 Cryptocurrency Based on Blockchain: Currency of the Future Blockchain-based cryptocurrency like bitcoin is making news around the world. The technology works as a decentralized ledger system that keeps adding to the list of transactions much like a stack. The transactions remain anonymous. The proposed IoT network could work on the basics of blockchain such as host configuration and BIOS details on ledger, requiring every device on that IoT cloud to download latest configurations at specific time intervals and encryption to preserve network privacy. The system could be an effective “means and end” solution to the problem of achieving cloud/fog security, prevent unauthorized access and maintain a decentralized system [22] (Figs. 10 and 11). Fig. 10 Protocols and standards for common IoT systems [18]. Communication is possible through ZigBee and/or Bluetooth Full size image Fig. 11 Hashing in blockchain technology [22] Full size image 4 Summary: IoT Applications and Key Pointers MQTT is the preferred choice of open-access messaging protocol for the present IoT systems, except in ledger-based systems as seen. In summary, the following features of IoT are utilized for smart applications: (a) connectivity; (b) single master control; (c) cost effective; (d) single server control. Single server control may be replaced with blockchain technology (Table 1). Table 1 Summary of IoT applications Full size table 5 Conclusion: Future System Proposals Based on Systems Reviewed IoT presents keychain technologies coming up for humankind. In view of the changing climatic conditions and globalization, online database management is becoming the need of the hour. Governments and enterprises world over are setting up committees to integrate frameworks of IoT linkages relevant to our need. It is the time for researchers to develop systems which can be integrated into a global network, which may someday cross the domains of space and time as we know today. Some applications relevant to the sensors reviewed and pertinent to global problems are presented below (Table 2). Table 2 Future system proposals Full size table References A Very Short History of the Internet of Things. https://www.forbes.com/sites/gilpress/2014/06/18/a-very-short-history-of-the-internet-of-things/#5c66685b10de A.M. Leman, Nor Hidayah, Occupational Safety and Health: Workers and Industrial Safety Monitoring for Sustainable Work Environment Development (Health and Safety, AET, 2013) Google Scholar   Wu-Zhao, L. Lei-Hong, H. Yue-shan, W. Xiao-ming, A community health service architecture based on the internet of things on health-care, in World Congress on Medical Physics and Biomedical Engineering, vol. 39, pp. 1317–1320 (Springer, Heidelberg, 2013) Google Scholar   R. Rushikesh, S. Chandra Mohan Reddy, S. Reddy, Development of IoT based vehicular pollution monitoring system, in International Conference on Green Computing and Internet of Things (ICGCIoT) proceedings (IEEE Press, 2015) Google Scholar   A. Banik, B. Aich and S. Ghosh: Microcontroller based low-cost gas leakage detector with SMS alert, in Emerging Trends in Electronic Devices and Computational Techniques (EDCT) (IEEE, 2018). https://doi.org/10.1109/edct.2018.8405094 B.C. Kavitha, R. Vallikannu, IoT based intelligent industry monitoring system, in 2019 6th International Conference on Signal Processing and Integrated Networks (SPIN), pp. 63–65 (IEEE, 2019). https://doi.org/10.1109/spin.2019.8711597 L. Atzori, A. Iera, G. Morabito, The internet of things: a survey, in Computer Networks (Elsevier, 2010) Google Scholar   G.C. Hillar (eds.), MQTT Essentials—A lightweight IoT Protocol. First. (Packt, Birmingham, 2017) Google Scholar   F.V. Schreiber, R.A. Dias, B.D. Borba, V. Noll, V.Z.M. Gallo, Application of the IoT paradigm for supervision in the utilities industry, in 13th IEEE International Conference on Industry Applications (INDUSCON) (IEEE, 2018) Google Scholar   D1 mini. https://wiki.wemos.cc/products:d1:d1_mini ESP8266EX Datasheet. https://www.espressif.com/sites/default/files/documentation/0a-esp8266ex_datasheet_en.pdf ESP8266 core for Arduino. https://github.com/esp8266/Arduino MQTT Dash (IoT, Smart Home)—Apps on Google Play. https://play.google.com/store/apps/details?id=net.routix.mqttdash&hl=en Google Maps. https://www.google.com/maps/@-27.4344032,-48.450146,900m/data=!3m1!1e3 N.M. Kumar, P.K. Mallick, Blockchain technology for security issues and challenges in IoT, in International Conference on Computational Intelligence and Data Science (ICCIDS 2018) proceedings, Procedia Comput. Sci. 132(2018) 1815–1823 (Elsevier, 2018) Google Scholar   D. Fakhri, K. Mutijarsa, in Secure IoT Communication using Blockchain Technology (IEEE Press, IEEE, 2018). 978-1-5386-6670-8/18 Google Scholar   Z. Zheng et al., An overview of blockchain technology: architecture, consensus, and future trends, in 6th International Congress on Big Data (BigData Congress) Proceedings (IEEE, 2017) Google Scholar   M.A. Khan, K. Salah, IoT security: review, blockchain solutions, and open challenges. Future Gener. Comput. Syst. 82, 395–411 (2018) Article   Google Scholar   M. Son, H. Kim, Blockchain-based secure firmware management system in IoT environment, in International Conference on Advanced Communications Technology (ICACT), Proceedings (IEEE, 2019). ISBN 979-11-88428-02-1 Google Scholar   C. Fang et al., Edge computing and caching based blockchain IoT network, in Proceedings of 2018 1st IEEE International Conference on Hot Information-Centric Networking (HotICN 2018) (IEEE, 2018). 978-1-5386-4870-4/18 Google Scholar   M. Banerjee, J. Lee, K.R. Choo, A blockchain future for internet of things security: a position paper, in Digital Communications and Networks (Elsevier, 2017). 20172352-8648 Google Scholar   M. Singh, A. Singh, S. Kim, Blockchain: a game changer for securing IoT data. in Proceedings of IEEE 4th World Forum on Internet of Things (WF-IoT), pp. 51–55 (IEEE, Singapore, 2018) Google Scholar   Download references Author information Authors and Affiliations University School of Information Communication and Technology, Guru Gobind Singh Indraprastha University, New Delhi, Delhi, 110078, India Mahesh Swami, Divya Verma & Virendra P. Vishwakarma Corresponding author Correspondence to Mahesh Swami . Editor information Editors and Affiliations Department of Computer Science and Engineering, Maharaja Surajmal Institute of Technology, New Delhi, India Poonam Bansal Department of Electrical and Electronics Engineering, Maharaja Surajmal Institute of Technology, New Delhi, India Meena Tushir Department of Automation and Applied Software, Aurel Vlaicu University of Arad, Arad, Romania Valentina Emilia Balas Department of Computer Science and Engineering, Indian Institute of Technology (BHU), Varanasi, India Rajeev Srivastava Rights and permissions Reprints and permissions Copyright information © 2021 The Editor(s) (if applicable) and The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. About this paper Cite this paper Swami, M., Verma, D., Vishwakarma, V.P. (2021). Blockchain and Industrial Internet of Things: Applications for Industry 4.0. In: Bansal, P., Tushir, M., Balas, V., Srivastava, R. (eds) Proceedings of International Conference on Artificial Intelligence and Applications. Advances in Intelligent Systems and Computing, vol 1164. Springer, Singapore. https://doi.org/10.1007/978-981-15-4992-2_27 Download citation .RIS.ENW.BIB DOI https://doi.org/10.1007/978-981-15-4992-2_27 Published 02 July 2020 Publisher Name Springer, Singapore Print ISBN 978-981-15-4991-5 Online ISBN 978-981-15-4992-2 eBook Packages Intelligent Technologies and Robotics Intelligent Technologies and Robotics (R0) Share this paper Anyone you share the following link with will be able to read this content: Get shareable link Provided by the Springer Nature SharedIt content-sharing initiative Publish with us Policies and ethics Sections Figures References Abstract Introduction and a Brief History of IoT IoT for Industry: Applications for Industrial Internet of Things Blockchain for IoT: Applications Summary: IoT Applications and Key Pointers Conclusion: Future System Proposals Based on Systems Reviewed References Author information Editor information Rights and permissions Copyright information About this paper Publish with us Discover content Journals A-Z Books A-Z Publish with us Publish your research Open access publishing Products and services Our products Librarians Societies Partners and advertisers Our imprints Springer Nature Portfolio BMC Palgrave Macmillan Apress Your privacy choices/Manage cookies Your US state privacy rights Accessibility statement Terms and conditions Privacy policy Help and support 129.93.161.219 Big Ten Academic Alliance (BTAA) (3000133814) - University of Nebraska-Lincoln (3000134173) © 2024 Springer Nature"

Paper 5:
- APA Citation: Panduman, Y. Y. F., Funabiki, N., Puspitaningayu, P., Kuribayashi, M., Sukaridhoto, S., & Kao, W.-C. (2022). Design and implementation of SEMAR IoT server platform with applications. Sensors, 22(17), 6436.
  Main Objective: The primary goal of the study is to present the design and implementation of the SEMAR IoT server platform, which aims to seamlessly integrate and interoperate various IoT application systems within smart cities.
  Study Location: Okayama University, Okayama, Japan
  Data Sources: The SEMAR IoT server platform integrates and processes data from various IoT application systems, including air quality monitoring systems, water quality monitoring systems, road condition monitoring systems, fingerprint-based indoor localization systems, and air-conditioning guidance systems.
  Technologies Used: MQTT, REST API, machine learning algorithms, such as Support Vector Machine and Decision Tree, MongoDB, Scikit-learn, Pandas, CodeIgniter PHP Framework, HighchartJS, DataTables, OpenStreetMap
  Key Findings: The key findings of the study include:

1. The proposed SEMAR IoT server platform successfully integrates and interoperates multiple IoT application systems within smart cities, addressing challenges such as data quality, preprocessing, data interoperability, and real-time data processing.
2. SEMAR offers a comprehensive suite of features, including data aggregation, synchronization, machine learning-based data classification, plug-in function support, and multiple communication protocols (MQTT and REST API) for seamless integration with diverse IoT devices and applications.
3. The platform provides real-time data visualization, data export, and notification services to facilitate data analysis and timely decision-making.
4. The experimental evaluations demonstrate the platform's efficiency and scalability in handling a large number of IoT devices and processing data in real-time, with an average response time of 315 ms for MQTT communications with 125 devices and a CPU usage rate of 74%.
  Extract 1: SEMAR offers Big Data environments with built-in functions for data aggregations, synchronizations, and classifications with machine learning. Moreover, plug-in functions can be easily implemented and added there.
  Extract 2: Data from devices for different sensors can be accepted directly and through network connections, which will be used in real-time for user interfaces, text files, and access to other systems through REST API services.
  Limitations: The main limitation of the paper is that it does not provide a thorough evaluation of the performance and scalability of the proposed platform. While the authors mention that SEMAR can handle hundreds of devices with acceptable delay and CPU rate, they do not provide specific benchmarks or comparative analysis with other platforms. Additionally, the paper does not discuss the security aspects of the platform, which is an important consideration for IoT systems.
  Relevance Evaluation: The paper is highly relevant to the point mentioned in the outline, as it focuses on the design and implementation of an IoT server platform specifically aimed at integrating various IoT application systems. It provides a solution to the challenges of data quality, preprocessing, data interoperability, and real-time data processing, which are crucial aspects for effective IoT system integration.
  Relevance Score: 0.9
  Inline Citation: Panduman, Y.Y.F.; Funabiki, N.; Puspitaningayu, P.; Kuribayashi, M.; Sukaridhoto, S.; Kao, W.-C. Design and Implementation of SEMAR IoT Server Platform with Applications. Sensors 2022, 22(17), 6436. https://doi.org/10.3390/s22176436
  Explanation: The proposed platform is designed to address the need for integrating various IoT application systems within smart cities. Existing research primarily focuses on the development of isolated IoT systems and lacks a comprehensive platform that seamlessly integrates these systems and enables data interoperability. SEMAR aims to fill this gap by providing a robust platform that supports the integration and interoperation of heterogeneous IoT devices and applications.

 Full Text: >
"This website uses cookies We use cookies to personalise content and ads, to provide social media features and to analyse our traffic. We also share information about your use of our site with our social media, advertising and analytics partners who may combine it with other information that you’ve provided to them or that they’ve collected from your use of their services. Consent Selection Necessary Preferences Statistics Marketing Show details                 Deny Allow selection Allow all     Journals Topics Information Author Services Initiatives About Sign In / Sign Up Submit   Search for Articles: Sensors All Article Types Advanced   Journals Sensors Volume 22 Issue 17 10.3390/s22176436 Submit to this Journal Review for this Journal Propose a Special Issue Article Menu Academic Editors Gianluigi Ferrari Luca Davoli Laura Belli Show more... Subscribe SciFeed Recommended Articles Related Info Links More by Authors Links Article Views 2184 Citations 15 Table of Contents Abstract Introduction Related Works Design of SEMAR IoT Server Platform Implementation of SEMAR IoT Server Platform Integration of Air Quality Monitoring System Integration of Water Quality Monitoring System Integration of Road Condition Monitoring System Integration of Air-conditioning Guidance System Integration of Fingerprint-based Indoor Localization System Evaluations Threats to Validity Conclusions Author Contributions Funding Institutional Review Board Statement Informed Consent Statement Data Availability Statement Acknowledgments Conflicts of Interest References share Share announcement Help format_quote Cite question_answer Discuss in SciProfiles thumb_up Endorse textsms Comment first_page settings Order Article Reprints Open AccessArticle Design and Implementation of SEMAR IoT Server Platform with Applications by Yohanes Yohanie Fridelin Panduman 1, Nobuo Funabiki 1,*, Pradini Puspitaningayu 1, Minoru Kuribayashi 1, Sritrusta Sukaridhoto 2 and Wen-Chung Kao 3 1 Graduate School of Natural Science and Technology, Okayama University, Okayama 700-8530, Japan 2 Department of Informatic and Computer, Politeknik Elektronika Negeri Surabaya, Surabaya 60111, Indonesia 3 Department of Electrical Engineering, National Taiwan Normal University, Taipei 106, Taiwan * Author to whom correspondence should be addressed. Sensors 2022, 22(17), 6436; https://doi.org/10.3390/s22176436 Submission received: 9 July 2022 / Revised: 23 August 2022 / Accepted: 23 August 2022 / Published: 26 August 2022 (This article belongs to the Special Issue IoT Enabling Technologies for Smart Cities: Challenges and Approaches) Download keyboard_arrow_down     Browse Figures Review Reports Versions Notes Abstract Nowadays, rapid developments of Internet of Things (IoT) technologies have increased possibilities of realizing smart cities where collaborations and integrations of various IoT application systems are essential. However, IoT application systems have often been designed and deployed independently without considering the standards of devices, logics, and data communications. In this paper, we present the design and implementation of the IoT server platform called Smart Environmental Monitoring and Analytical in Real-Time (SEMAR) for integrating IoT application systems using standards. SEMAR offers Big Data environments with built-in functions for data aggregations, synchronizations, and classifications with machine learning. Moreover, plug-in functions can be easily implemented. Data from devices for different sensors can be accepted directly and through network connections, which will be used in real-time for user interfaces, text files, and access to other systems through Representational State Transfer Application Programming Interface (REST API) services. For evaluations of SEMAR, we implemented the platform and integrated five IoT application systems, namely, the air-conditioning guidance system, the fingerprint-based indoor localization system, the water quality monitoring system, the environment monitoring system, and the air quality monitoring system. When compared with existing research on IoT platforms, the proposed SEMAR IoT application server platform offers higher flexibility and interoperability with the functions for IoT device managements, data communications, decision making, synchronizations, and filters that can be easily integrated with external programs or IoT applications without changing the codes. The results confirm the effectiveness and efficiency of the proposal. Keywords: Internet of Things; server platform; SEMAR; IoT application system; sensor; MQTT; REST API 1. Introduction The rapid growth of urban populations has increased the risk toward quality of life (QoL) around the world [1]. Smart cities have been studied for identifying, preventing, and acting in certain situations. In smart cities, QoL is commonly handled with indicators that measure the effectiveness of the services and sustainability of a city in domains/verticals, such as environments, health cares, securities, transportation, economies, educations, and governments [2]. Particularly, the environment vertical has drawn special attention in recent years. Indicators of environmental pollutants, such as air and water quality, road conditions, and house conditions, must be monitored to detect adverse situations associated with overpopulated regions. In this sense, Internet of Things (IoT) applications must provide interoperability tools that collect, store, and disseminate data from several sensors, and provide them to other systems [3,4]. Thus, smart cities require collaboration and integration of various IoT application systems. Studies of IoT server platforms have emerged for such purposes, where several challenges hinder better management and analysis of IoT application data using platforms. The first challenge involves the lack of a common data format between data sensors and data communication protocols. For instance, to measure the air and water quality, different sensors with different geo-location concepts such as addresses, buildings, regions, or cities can be handled in different ways. Thus, an IoT server platform should be able to handle various data types from different sensors, which makes it necessary to be able to work with each other despite the diversity in communication protocols or sensor technologies. The second challenge is the standard parameters for data processing. As an example, the majority of air quality monitoring systems use Air Pollution Index (API) to define the indicators of the carbon monoxide ( 𝐶𝑂 ), the nitrogen dioxide ( 𝑁 𝑂 2 ), the sulfur dioxide ( 𝑆 𝑂 2 ), the ozone ( 𝑂 3 ), and the particulate matter ( 𝑃 𝑀 10 ) [5]. However, other researchers mentioned that it might be necessary to consider other indicators such as the temperature and the humidity for their measurements [6]. The third challenge concerns the data interoperability between various IoT application systems within the same domain. It can be described as the integration of plural systems by sharing output data through information networks [3]. For example, a smart building system should integrate the human Indoor Positioning System (IPS) with the environment monitoring system to improve QoL while reducing energy usage. However, in general, IoT application systems for smart cities have been designed without considering these challenges. They have been deployed independently and cannot be integrated with other systems. In this paper, we propose an IoT server platform called Smart Environmental Monitoring and Analytical in Real-Time (SEMAR) for integrating various IoT application systems. SEMAR is able to offer Big Data environments with rich built-in functions for data aggregations, synchronizations, and classifications with machine learning. Moreover, plug-in functions can be easily implemented and added there. Data from devices for different sensors can be accepted directly and through network connections, which will be used in real-time for user interfaces, text files, and access to other systems through Representational State Transfer Application Programming Interface (REST API) services. For evaluations of SEMAR, we implemented the platform and integrated five IoT applications, namely, the air-conditioning guidance system, the fingerprint-based indoor localization system, the water quality monitoring system, the environment monitoring system, and the air quality monitoring system. The results confirm the effectiveness and efficiency of the proposal, including the reduction in the data transmission delay with the implemented Message Queue Telemetry Transport (MQTT) service [7]. The rest of this paper is organized as follows: Section 2 presents related works. Section 3 presents the design of SEMAR. Section 4 presents the implementation of SEMAR. Section 5, Section 6, Section 7, Section 8 and Section 9 briefly describe the IoT application systems implemented in the SEMAR. Section 10 describes comprehensive performance evaluations and comparative analysis with similar related work. Section 11 presents the threats to validity. Finally, Section 12 concludes this paper with future works. 2. Related Works In [8], Kamienski et al. proposed a three-layered Open IoT ecosystem approach for smart application architectures. It includes input, process, and output in IoT application systems. The input gathers information from multiple sources, such as sensors and other services. The standard communication protocols cover the device connections. The process is given by a collection of methodologies, procedures, and algorithms for effective and efficient data processing. The output provides capabilities for data visualizations and accessibility. In [9], Bansal et al. proposed five layers for the IoT application system architecture, consisting of perception, transport, processing, middleware, and application. They divided data processing into two layers, where the processing layer concentrates on filtering and formatting the data, and the middleware layer intends to execute various logical and analytic operations. The connectivity in IoT systems was discussed in [10], where Li et al. examined the networking technologies, and described that IEEE 802.11 (WLAN), IEEE 802.15.1 (Bluetooth, Low-energy Bluetooth), IEEE 802.15.6 (wireless body area networks), and 3G/4G were the most widely adopted in IoT application systems and smart city environment systems. Since IoT systems might consist of various physical things and sensors, it is essential to provide a device-to-device communication protocol. Malche et al. in [11] proposed the MQTT communication protocol for environmental monitoring systems with multiple device sensors. Sharma et al. in [12] defined the Representational State Transfer (REST) web service as the gateway to collect device data through the HTTP POST protocol. Zhang et al. in [13] studied NATS open source messaging to communicate between IoT devices [14]. The numerous options of communication protocols were surveyed by Dizdarevic et al. in [15]. They concluded that MQTT and HTTP POST are the most suitable for IoT application systems since they are well matured and stable. In [16], Marques et al. proposed the IoT system architecture for the indoor air quality (IAQ) system in a laboratory environment named iAQ Plus (iAQ+). It collects data from devices through Wi-Fi connections and stores data in the SQL server. The authors proposed a web portal and mobile application to manage and visualize the obtained data; however, the system does not offer data analysis functions to process sensor data. In [17], Benammar et al. proposed the IAQ system that is integrated with the Emoncms IoT platform for storing and visualizing air quality data, temperature, and humidity. The authors used a Waspmote microcontroller connected to Raspberry PI as sensor nodes and the MQTT service to send data. In [18], Mandava et al. proposed to integrate machine learning algorithms and the IoT platform infrastructure for monitoring air pollution in smart cities. The system collects environmental and location data to determine air pollution conditions in specific areas, and uses the collected data to build a data model for air pollution detections using supervised machine learning algorithms. The experiment results confirmed the effectiveness of the proposed data model for air pollution detections. In [19], Senožetnik et al. proposed a management framework for groundwater data in smart cities. The system uses a web-based IoT service to receive data through HTTP POST, convert it into the JavaScript Object Notation (JSON) format, and store it in the MongoDB NoSQL database. It also allows sharing collected data through REST API. This system is similar to our proposed one; however, the system only provided data communications through HTTP POST. Moreover, it did not implement data processing functions to analyze the obtained data. In [20], Kazmi et al. proposed a platform that provides interoperability of diverse IoT applications in smart cities named VITAL-OS. It can be integrated with other IoT application systems through REST API. In [21], Toma et al. proposed an IoT platform for monitoring air pollution in smart cities. The system contains wireless and wired connections with sensors to send data through MQTT communications to the server using cellular networks. It allows sharing data through REST API; however, this platform was built and implemented only for this IoT application of monitoring air pollution. In [22], Javed et al. proposed an IoT platform for smart buildings. It consists of the discovery, storage, and service planes. The discovery plane performs connectivity control with devices through HTTP communications. The storage plane manages data storage using Apache Cassandra [23]. The service plane provides data processing composed of data indexing, visualizing, and analysis. In [24], Badii et al. proposed an open source IoT framework architecture for smart cities called Snap4City. The system offers modules for device managements, data processing, data analysis, and data visualizations. In [25], Putra et al. proposed an implementation of wireless sensor networks in smart cities to monitor air pollution. A device will transmit data regarding the air pollution to a server through a Wi-Fi network. In [26], Gautam et al. proposed an IoT application for the water supply management system in smart cities. The proposed architecture uses General Purpose Input Output (GPIO) communications for connecting ultrasonic sensors and water pumps with Raspberry PI. Moreover, it uses Ethernet cables as network interfaces to Raspberry PI and the router. It offers data analysis services and real-time predictions using machine learning algorithms for processing data; however, this framework is only built for this single IoT application. In [27], Oliveira et al. proposed an IoT application for road environment monitoring using mobile-based sensors. The system receives sensor data through HTTP POST communications in the JSON format, and allows processing and visualizing it. It also provides a function to export data in CSV files. In [28], Metia et al. proposed a digital filter for the IoT-based air pollution monitoring system. The experiment results in this study show that the data processing using Kalman filter has enhanced the reliability and accuracy of the system; however, they did not implement the real-time data processing. In [29], Twahirwa et al. proposed the system for monitoring roads, weathers, and environments by attaching multiple sensors to a vehicle and sending sensor data to the IoT server. The IoT server can process, store, and visualize data with the web application system. In [30], D’Ortona et al. showed the benefits of implementing MQTT communications in IoT application systems for smart cities. The MQTT communications allow the construction of highly scalable and flexible IoT systems. In [31], Kumar et al. proposed an anomaly-based intrusion detection system (IDS) to secure IoT networks from threats such as spying and malicious controls. It was implemented at the fog node level. The proposed approach might be adopted as an additional system that can avoid threats before the IoT platform receives them. Moreover, in [32,33], a method was proposed to protect IoT networks by data pre-processing functions. It comprises feature mapping, missing value inputting, normalization, and feature selection techniques. The proposed method is similar to our approach in the data aggregation function. SEMAR only processes and stores sensor data registered in the sensor format data storage. In [34], Kumar et al. designed PEFL for secure open communication channels in IoT application systems. The proposed method utilized Long Short-Term Memory (LSTM) and privacy encoding techniques in order to reduce security risk and maintain privacy. Moreover, in [35], authors proposed an framework for preventing cyber attacks on IoT-fog computing. It offered virtualized northbound interfaces such as load balancer and resource management to manage networks in IoT systems. The proposed architecture can be utilized to enhance network performances for the SEMAR IoT application server platform in future works. 3. Design of SEMAR IoT Server Platform In this section, we present the design of the SEMAR IoT server platform for integrating various IoT application systems. 3.1. System Overview Figure 1 shows the proposed design of the SEMAR IoT server platform. The main components are data input, data process, and data output. The data input is responsible for accepting data from various sources. It consists of network interface devices and communication protocols. The data process provides the modules for data processing, control, and collection. The data output enables visualizations and sharing of collected data. In Table 1 we summarize the nomenclature of all the symbols and variables used in this paper. Figure 1. Design overview of SEMAR IoT server platform. Table 1. Nomenclature used in the paper. 3.2. Data Input SEMAR needs to collect data from a number of different devices using various network connectivity and communication methods; therefore, the following network interfaces for constructing physical network connections are implemented in the platform, where standard IoT communication protocols for data transmission, namely HTTP and MQTT, are included. In the context of IoT, physical devices as a perception layer consist of a number of sensors connected to a controller. With the growth of IoT technology, controllers such as Arduino and Raspberry PI have provided diverse network connectivity to accept data from various sensors. General Purpose Input Output (GPIO) is the programmable interface in the device controller to receive or send command signals from/to IoT sensor devices [36]. In IoT application systems, GPIO is the standard interface for connecting sensor devices with the controller. In addition, it is used for connecting controllers with external modules such as Wi-Fi ones for data communications. Universal Serial Bus (USB) is the serial communication media to link devices with computers via USB ports. Currently, numerous sensor instruments and devices can transmit data using USB connections. The USB connection offers a high data transfer capacity. In addition, external communication modules such as Wi-Fi for data communication can also be added using USB connection. Regarding the IoT data transmission concept, diverse hardware and software connectivity should be considered. Diverse network interfaces utilize hardware-based transmissions, such as Wi-Fi, Ethernet, and Cellular—this enables machine-to-machine and device-to-server communication. IEEE 802.11 wireless LAN (Wi-Fi) is the most prevalent network interface in IoT systems. It connects devices with each other and to servers. Wi-Fi is useful to connect a lot of devices regardless of their locations with computers, which improves IoT application developments. Ethernet offers secure and dependable wired connectivity. It is one of the most used network interfaces in IoT systems; however, the implementation can be difficult over long distances. Although Wi-Fi and Ethernet offer excellent network performance, we should consider their security and coverage area. The alternative network interface that can be utilized is cellular networks. Cellular is the network interface allowing the mobility of devices with the existing widespread availability of cells to connect with the internet. Currently, 5G cellular connections offer solutions with wider bandwidths than Wi-Fi or Ethernet. The IoT platform can use it through Wi-Fi interfaces with mobile routers. The last part of Data Input is the communication protocol between IoT devices and servers. An IoT server should support publish–subscribe and push-and-pull messaging systems for sending and receiving data. Thus, our proposed system utilizes MQTT and REST API for the communication protocol service. MQTT is one of the protocols that have been designed for data communications in IoT application systems. It can work with minimal memory and the processing power [37]. The MQTT broker works for receiving messages from clients, filtering the messages according to a topic, and distributing the messages to subscribers [38]. The MQTT broker is implemented in the IoT gateway function of the platform to provide data communication services in SEMAR. The IoT gateway function offers communication services to connect sensor devices to the server. Using this protocol, sensor devices can transmit messages containing sensor data in the JSON format with MQTT topics. By subscribing data at the same MQTT topic, the data aggregation program in the platform obtains each sensor data. In addition, the study by Al-Joboury in [39] shows that the load balancer can increase the performance and the capacity of MQTT data communications. The IoT gateway function also implemented the REST API for receiving sensor data through the HTTP POST communication protocol. It can only receive data in the JSON format. The REST API provides URLs for sensor data transmission. The management function in the platform creates the unique URL for each device. The HTTP POST communication protocol is compatible with standard network interfaces. Using REST API, sensor devices can transmit data in the JSON format. 3.3. Data Process The data process in the SEMAR server platform offers various functions. The large amount of data from data input will be processed to obtain meaningful information using some functions. The functions are implemented as independent modules to reduce system crashes at system failures. They can be extended to microservices [40,41]. The concept of microservices is the method of developing a large-scale system with a set of small independent services. For their implementations, thread-based programs are adopted to improve their performances for real-time data processing. Each service will initiate a new thread to process the newly coming data. 3.3.1. Data Management (Storage, Aggregator, and Plug-in Functions) The data management system is the main function of the IoT platform. In the context of IoT, systems must provide data storage, transaction management, query processing, and data access for application systems. Thus, the IoT platform must offer services to process the data flow from input to output. Moreover, towards developing diverse IoT applications, devices involved in IoT should be able to generate different kinds of data types according to the application. In order to provide various IoT application systems, SEMAR should be a useful platform for a variety of IoT application systems. Thus, it needs to support massive amounts of data in different formats. Moreover, it needs to store all the necessary data by offering data storage for every application. The management data storage is the database that stores the operating parameters in the SEMAR server platform including the implemented IoT application systems. The data include the information regarding connected devices, communications, and parameters for the process modules running on the platform. On this platform, each device has its own unique sensor format. The management data storage database keeps the sensor format as the template to help the development of an IoT application system on this platform. Meanwhile, the sensor data storage is the database that stores all the sensor data in the platform. In IoT application systems, sensor devices may offer various data and it may change it over time with unstructured formats; therefore, the platform uses the big data technology to store unstructured JSON objects generates the unique data storage for each device. This data storage utilized only accepts registered device data; therefore, we implement additional data stored in the form of Log files. Log Files are used to keep the values of any defined or undefined data using the CSV format. The defined data represents a sensor data that fits the format registered in the management data storage. The undefined data represents data whose format is not registered. The schema data storage is the database that can be used to help the users of IoT application systems by dynamically specify the names, fields, and data types in accessing this storage. It supports multiple data types, including integer, float, date, time, date-time, and string. Figure 1 illustrates that this database is used to store data synchronization results. Through REST API, other systems can access to the sensor data storage. As the advantage of this database, it can be dynamically defined and modified by the user. It can assist integration of various complex IoT application systems. In an IoT system, the data lifecycle begins with the communication gateway receiving sensor data, continues with data aggregation and preprocessing, and concludes with data storage. For this purpose, SEMAR provides a data aggregator function. The data aggregator is the module of collecting data from various data sources, applying the value-added processing, and repackaging the information in a consumable format. Algorithm 1 illustrates the data processing procedure in this module. It forwards the result to the following data filter or stores it in the data storage through the database access. The data management system plays a role in the sensor data storage process and provides access to additional data processing functions. Those services are not only for systems integrated in the IoT platform (built-in) but also for plug-in functions that may be deployed as an extension. Because an IoT application system may require unique data processing that has not been implemented in the platform. Thus, the platform is designed and implemented so that users can easily implement plug-in functions without modifying existing codes, to fulfill the demands of IoT application systems. The plug-in functions can use REST API to access the data in the platform. Algorithm 1 Data aggregator 3.3.2. Data Filter and Synchronization In this research, we additionally explore the data processing capabilities required by IoT applications that are not included in the standard data management services. For example, sensors of IoT devices may generate measurement errors and noise during the measuring process. It can impact the risk of data analysis problems. In addition, IoT applications such as indoor localization systems require real-time sensor data from several devices simultaneously; therefore, our platform deploys the data filter and synchronization functionalities for processing sensor data. The functions of filtering sensor data before being saved in a data storage are implemented. Digital filters are adopted to reduce noise and inaccuracies in data. The following procedure is applied for filtering data: It receives sensor data in a JSON format. It selects the sensor field’s value to be filtered. It add the field value in the JSON object with the filter result. It stores the JSON object in the database. The data synchronization function can synchronize the data from different devices by referring to the timestamp in the data store schema. The timestamp was given when the platform receives the data from the sensor device. Thus, the platform requests the data from each sensor’s storage at a specified detection time. For each sensor data, the field for the identifier ( 𝐹𝑖 ) to group sample data in a specific value, the field for the value ( 𝐹𝑣 ) to be synchronized, the default value ( 𝑑𝑒𝑓𝑎𝑢𝑙𝑡 ), and the four functions to process the data are prepared. The following functions are implemented to process the data: Average: it returns the average value of the data collected during the detection time. Current: it returns the last value among the data collected during the detection time. Max: it returns the highest value among the data collected during the detection time. Min: it returns the lowest value among the data collected during the detection time. Algorithm 2 illustrates the data processing procedure in this module. Algorithm 2 Data Synchronization 3.3.3. Machine Learning and Real-time Classification One of the exploitation scenarios for the massive quantity of IoT data is its predictive capability by utilizing machine learning approaches. Several researchers approved the effectiveness of machine learning implementation in IoT applications [42,43,44]. Moreover, Kumar et al. in [45] proposed the ensemble design combining machine learning algorithms to protect networks on the Internet of Medical Things in real-time; therefore, we implement machine learning and real-time classification function in SEMAR. The machine learning algorithms are implemented to help data classifications. The Support Vector Machine [46,47] and Decision Tree [48,49,50] are implemented in this platform as standard machine learning algorithms in IoT application systems. Decision Tree employs tree decisions including event outcomes, resource costs, and utility costs. It can create a data model for predicting outcomes by learning simple decision rules according to the data features. The data model structure consists of internal nodes representing an attribute, branches representing a decision rule, and leaf nodes indicating an outcome. Here, C4.5, CART (Classification and Regression Trees), and Naive Bayes Tree are selected and incorporated into the platform as the most well-known machine learning algorithms [48]. CART is the binary recursive partitioning method that can handle both numerical and category data [48,49,50]. It can determine the impurity degree of acceptable data and build a binary tree in which each internal node provides two classes for the accepted attribute. The tree is formed by iteratively picking the attribute with the lowest Gini index. The Gini index for each node is calculated by the following equation [48]: 𝐺𝑖𝑛𝑖(𝑡)=1− ∑ 𝑖=1 𝑛 𝑃 (𝑖|𝑡) 2 (1) Support Vector Machine (SVM) is utilized as the regression and classification technique [51]. This approach has been used for the big data classification [47]. The SVM computes linear decision boundary lines that can separate the data for the labeled groups. The SVM decision boundary line is calculated by the following equation: 𝑓(𝑥)= ∑ ∀𝑖 𝑦 𝑖 𝛼 𝑖 𝐾( 𝑥 𝑖 ,𝑥) (2) where 𝑦 𝑖 represents the class label, 𝛼 𝑖 represents the learned weight, 𝐾() represents the kernel function, 𝑥 𝑖 denotes the support vector, and x denotes the labeled training sample data. The kernel function is given by a collection of mathematical operations used to process the input data and convert it into the required format. The radial basis function (RBF) kernel is one of the common kernel functions in SVM. The following equation illustrates the formula of the (RBF) kernel: 𝐾( 𝑥 𝑖 , 𝑥 𝑗 )=exp ⎛ ⎝ ⎜ ⎜ ⎜ − 𝑑 ( 𝑥 𝑖 , 𝑥 𝑗 ) 2 2 𝑙 2 ⎞ ⎠ ⎟ ⎟ ⎟ (3) where l represents the length scale of the kernel and 𝑑( 𝑥 𝑖 , 𝑥 𝑗 ) denotes the Euclidean distance between 𝑥 𝑖 and 𝑥 𝑗 . Decision Tree and SVM have several hyper parameters. For them, the Randomized Search Method is implemented in SEMAR to find the optimal combination of hyper parameters, due to its superior performances with the low cost and short computing time compared to other methods. For reference, the Decision Tree algorithm has the following hyper parameters: Maximum depth ( 𝑚𝑎𝑥_𝑑𝑒𝑝𝑡ℎ ): represents the maximum depth of the tree model result. It is used to select the optimal model to prevent over-fitting. Minimum samples split ( 𝑚𝑖𝑛_𝑠𝑎𝑚𝑝𝑙𝑒𝑠_𝑠𝑝𝑙𝑖𝑡 ): represents the minimal amount of data required to separate an internal node. If it is large, it can prevent over-fitting; however, if it is very large, it can cause under-fitting. Minimum samples leaf ( 𝑚𝑖𝑛_𝑠𝑎𝑚𝑝𝑙𝑒𝑠_𝑙𝑒𝑎𝑓 ): represents the minimal amount of data required to be left at the leaf node. It is similar to the minimum samples split parameter. Minimum weighted fraction leaf ( 𝑚𝑖𝑛_𝑤𝑒𝑖𝑔ℎ𝑡_𝑓𝑟𝑎𝑐𝑡𝑖𝑜𝑛_𝑙𝑒𝑎𝑓 ): represents the total weight required at a leaf node. The Support Vector Machine algorithm has the following main hyper parameters: Kernel: represents the function of transforming the training dataset into the higher dimension space. The standard kernel consists of Radial Basis Function (RBF), linear, polynomials, and sigmoid. C: represents the penalty parameter that controls the trade-off between the decision boundary and the misclassification. C value controls the margin of the decision boundary line to avoid misclassifications. The large value can prevent the model from allowing any misclassification. If the dataset is linearly separable, it will work; however, if the dataset is non-separable/nonlinear, it is better to use a small C value to avoid overfitting, although it allows misclassifications to occur. Gamma: represents the coefficient of the kernel used to decide the curvature of the decision boundary line. The value of Gamma determines the shape of the decision boundary line according to the number of dataset points. The large value causes the decision boundary to be easily affected by fewer data points, and the shape becomes complex. It can be helpful for nonlinear datasets; however, if it is too large, it tends to be over-fitting. On the other hand, for the linear dataset, the small values make the decision boundary line more general and useful. The machine learning algorithms allow the user to use the data stored in the data storage as the sample data. This module can generate a data model for the real-time data classification module. The real-time data classification function is implemented to analyze a huge amount of data from various sensor devices by periodically running the following procedure: 1. It loads the data classification model made by the machine learning algorithm. 2. It receives sensor data from the database. 3. It classifies data into classes by running the data model. 4. It stores results in the database. The classification model can be created by each user separately. Moreover, the user can start or stop the real-time data classification at the user interface. 3.4. Data Output Several output components, such as the monitor display, the user interface, the data export, REST API, and the notification function, are considered to use the data in the platform. The monitor display is attached to the sensor node, and accesses the user interface in the platform through a network connection. It can easily show sensor data for each device. The user interface is provided at the web browser to allow users to see the sensor and synchronized data by tables, graphs, or maps. The platform allows users to access the sensor data using the time of data receipt. It receives the sensor data in the JSON format by accessing REST API. The column in the table is formed automatically based on the sensor format of each device. The platform can generate the graph for each registered format sensor. Visualization maps will display the data in digital maps based on the GPS data. The data export feature is designed and implemented to allow users to download data in Excel, JSON, text, or CSV format at the specified time. Users can use this feature by accessing to the user interfaces. REST API is employed as a back-end system to access the sensor data. The sensor data are retrieved from the database and is converted to the JSON format. It will be sent to the user interface and plug-in functions using HTTP POST communications. The platform can exchange and integrate data with other IoT application systems via REST API. The notification function allows the user to define the threshold for each sensor data as the trigger of the message notification. If the value is over the threshold, the platform will send a notification. The platform offers two different communication services. First, it publishes a message to a specific topic using the MQTT communication protocol. Thus, the IoT application system can subscribe to topic to receive the messages. Second, it delivers email notifications through the mail server service installed on the server platform. The user can dynamically define email recipients. 3.5. Management Service The management service is used to manage all functions in the SEMAR platform. It includes the managements of users, devices, communications, schema data, synchronization functions, analytics, data filters, and notification functions. The management of users allows us to add users, set permissions, and restrict access to the devices. The device management service provides the functions to register the devices and the sensors of the IoT application system. It allows managing the sensor format for each device dynamically. The platform can process, save, and display the data registered in the sensor format. For convenience, the SEMAR platform provides a template to add the device with the same sensor format easily. The schema data management allows to create the schema database, define the field format, and manage the data. The management service provides the functions to add, update, and delete settings for data synchronizations, data analytics, data filtering, and notifications. It allows the user to run and terminate the module service in the data process. All the configuration settings are saved as JSON objects. 4. Implementation of SEMAR IoT Server Platform In this section, we present the implementation of the SEMAR IoT server platform. Table 2 shows the summary of the implementation. Table 2. Technology specifications for implementation of SEMAR IoT server platform. In this implementation, the following two types of communication protocol services are implemented for data input. Mosquitto [52] is installed for the MQTT broker. It allows the platform to receive messages through various MQTT versions, and supports connections from Wi-Fi, Ethernet, and Cellular network interfaces. Then, REST API is implemented based on Python programming and Tornado web server [53]. It allows the platform to receive messages through HTTP POST and supports connections from Wi-Fi, Ethernet, and Cellular network interfaces. The data process is deployed and implemented in the platform. They are developed in Python using a variety of modules and dependencies. For IoT data management systems, we used two different databases service implemented in the platform according to the design in Section 3. The Big Data repository MongoDB [54] is utilized for the data storage for managements, sensors, and schema. MongoDB saves data in the JSON format as the flexible approach—there is no need to define data structures, unlike SQL. In addition, the log file is implemented in the CSV format. It can be accessed using a file controller library in Python. Two different data aggregators are implemented. The first one enables message receptions using the MQTT communication protocol. It allows a different MQTT communication settings for each sensor device. The second one does it with REST API. Both data aggregators access the data storage via PyMongo. In this study, the data filter and synchronization capabilities are utilized to process sensor data. Scipy and KalmanFilter Python libraries are used to apply the data filters. After filtering the data, PyMongo is used to save it in the data storage. The data synchronization used PyMongo for sensor data in the data storage. Pandas is used for grouping data sensors. Threading library is used to enhance the performance of the platform. This function runs periodically on the server based on the detection time. The user can stop and start this service at the administration page in the user interface. Figure 2 illustrates the user interface of the data synchronization function for the sensor data during 30 s. Figure 2. Interface of data synchronization function. According to the design systems in Section 3, the data analysis systems consist learning process and real-time analysis service. We implemented both services in Python. Scikit-learn [55] is used to facilitate the learning process. The Sklearn library is utilized for real-time analysis to make the classification model during the learning process. Data output includes the data visualization and the data sharing with other systems including the plug-in systems. The CodeIgniter PHP Framework is adopted to create user interfaces based on the Model-View-Control (MVC) design paradigm [56]. A user interface will offer data visualizations using HighchartJS, DataTalbes, and OpenStreetMap. Here, Apache and PHP are required. Figure 3 shows the table of sensor data. Figure 4 show graphs of sensor data. Figure 3. Table of sensor data. Figure 4. Graphs of sensor data. DataTables library is used to allow the user to download sensor data in Excel, JSON, text, and CSV formats at the specified times. Figure 5 show the data export interface. REST API is built with Python and Tornado. It allows other application systems and plug-in functions to access to sensor data in JSON formats. Figure 5. Data export interface. Finally, The management service is built in Python and Tornado web server. It allows us to receive messages through HTTP POST, and to access data storage by PyMongo. 5. Integration of Air Quality Monitoring System As the first IoT application system, the air quality monitoring system is integrated in the proposed platform. It can monitor the air quality in smart cities. 5.1. System Architecture Figure 6 shows the system overview. This system uses a single-board computer (SBC) that is connected to the GPS sensor device and the air quality sensor device through Wi-Fi. The air quality sensor device covers the carbon monoxide sensor (MQ7), the particulate matter sensor (Shinyei PPD42), the sulfur dioxide sensor (MQ135), the ozone sensor (MQ131), and the nitrogen dioxide sensor (MiCS 2714. The sensor sends the voltage measurement data to the Arduino UNO via GPIO. Arduino UNO converts the data into the value of the pollutant concentration level and sends it to the SBC via the MQTT protocol. When the air sensor data are received, the SBC adds the current time and the location information (latitude and longitude) from the GPS sensor to the air sensor data, and sends it in the JSON format every five seconds through the MQTT connection. Figure 6. System overview of air quality monitoring system. 5.2. Implementation in Platform Figure 7 shows the flow of the functions in the SEMAR server platform for integrating this IoT application system. Through the MQTT connection, the data aggregator receives the sensor data and stores it in the data storage. The real-time classification estimates the air quality index from the data between 0 and 4 that corresponds to the air quality categories of good, moderate, poor, very poor, and hazardous. The output data are shown at the user interface. Figure 7. Function flow for air quality monitoring system in platform. To evaluate the system integration, we run the system to monitor actual air quality conditions. The sensor device is mounted on the vehicle, and the single-board computer system is placed inside the vehicle during the experiment. The device system sends air quality and GPS data every five seconds. The evaluation results show that SEMAR has successfully received the sensor data, processed it, and classified the air quality index based on it. The results can be displayed on the user interface in real-time. Table 3 shows the evaluation results of the classification model used in this experiment. We compare two algorithms consisting of Support Vector Machine (SVM) and Decision Tree (DT). Table 3. Evaluation of air quality monitoring classification model. Table 3 illustrates that the accuracy of the developed model is higher than 90% ; therefore, we can conclude that the real-time classification function to determine the air quality in SEMAR provides advantages over similar studies, including the study by Toma et al. in [21]. Moreover, we also conducted experiment for hyper parameters tuning. Table 4 shows the experiment setup for optimizing the hyper parameters using the randomized search method in this IoT Application. Table 4. Experiment setup for hyper parameter optimizations in air quality monitoring. Figure 8 shows the confusion matrices for the Decision Tree algorithm and the Support Vector Machine algorithm in the air quality monitoring application. For Decision Tree, 𝑚𝑎𝑥_𝑑𝑒𝑝𝑡ℎ=12 , 𝑚𝑖𝑛_𝑠𝑎𝑚𝑝𝑙𝑒𝑠_𝑠𝑝𝑙𝑖𝑡=4 , 𝑚𝑖𝑛_𝑠𝑎𝑚𝑝𝑙𝑒𝑠_𝑙𝑒𝑎𝑓=9 , and 𝑚𝑖𝑛_𝑤𝑒𝑖𝑔ℎ𝑡_𝑓𝑟𝑎𝑐𝑡𝑖𝑜𝑛_𝑙𝑒𝑎𝑓=0.0 are obtained, where the accuracy of the model is 99% . For Support Vector Machine, 𝑘𝑒𝑟𝑛𝑒𝑙=“𝑙𝑖𝑛𝑒𝑎𝑟” , 𝐶=1 , and 𝑔𝑎𝑚𝑚𝑎=0.01 are obtained, where accuracy of the model is 95% . Figure 8. Confusion matrices of Decision Tree and Support Vector Machine. 6. Integration of Water Quality Monitoring System As the second IoT application system, the water quality monitoring system is integrated. It can monitor the water quality in rivers flowing in smart cities. 6.1. System Architecture Figure 9 shows the overview of the system architecture. This system utilizes the sensor device equipped with water quality sensors for the hydrogen potential (pH), the oxidation reduction potential (ORP), the dissolved oxygen (DO), the electrical conductivity (EC), the temperature, total dissolved solids (TDS), the salinity (Sal), and the specific gravity (SG). The edge computing device Raspberry Pi 3 collects the sensor data every five seconds and sends it to a server. The system was tested at various points in the river in Surabaya, Indonesia. The sensor node detects multiple parameters of water quality. Figure 9. The system overview of the water monitoring system. 6.2. Implementation in Platform Figure 10 shows the flow of the functions in the platform for integrating this IoT application system. Through the MQTT connection, the data aggregator receives sensor data from the devices and stores it in the data storage. The real-time classification function estimates the water quality index from the collected data with a number between 0 and 3 corresponding to lightly polluted, heavy polluted, and polluted. The output data are shown in the user interface. Figure 10. Function flow for water quality monitoring system in platform. We evaluated the efficacy of the integration of SEMAR with the water quality monitoring system. The evaluation was conducted by operating the system in a real-world environment to monitor the water quality of a river. The device transmits the water sensor data to the SEMAR server every five seconds through MQTT communications. The experiment results indicate that the server received the sensor data, classified the water quality index based on the obtained data, and displayed it on the user interface in real-time. In addition, we compared the SVM and DT machine learning algorithms. are presented in Table 5 shows the evaluation results of the classification model utilized in the real-classification function. Table 5. Evaluation of water quality monitoring classification model. Table 5 shows that the accuracy of the classification model for the water quality is higher than 90% . Thus, the superiority of SEMAR on the integration with water quality measurement systems was confirmed with abilities to receive and classify data in real-time. 7. Integration of Road Condition Monitoring System As the third IoT application system, the road condition monitoring system is integrated. It can monitor road surface conditions in smart cities. 7.1. System Architecture Figure 11 shows the system architecture overview. This system is implemented as a mobile-based sensor network attached to the vehicle. This concept is called Vehicle as a Mobile Sensor Network (VaaMSN). This system consists of the edge computing device, the portable wireless camera, and the sensor device. The camera records the road conditions in front of the vehicle and transmits the image frames through Real-Time Streaming Protocol (RTSP). The sensor device collects GPS, accelerometer, and gyroscopes data, and transmits them to the edge computing device via MQTT protocol. Figure 11. System overview of road condition monitoring system. The edge computing device detects potholes from the camera images using the deep learning approach, OpenCV [57], and Tensorflow [58]. When detecting a pothole, image data are recorded in the directory file. Figure 12 shows the detected pothole example by the system. The edge computing will send the location, the accelerometer, the gyroscopes, and the pothole state to the server through the MQTT connection. Figure 12. Detected pothole example. 7.2. Implementation in Platform Figure 13 shows the flow of the functions in the platform for integrating this IoT application system. The data aggregator receives sensor data from the device through the MQTT connection, and stores it in the data storage. The output data appear in the user interface. Figure 13. Function flow for road condition detection system in platform. To evaluate the system integration, we run the road condition monitoring system to monitor road surfaces in actual conditions. We place the sensor device in the vehicle according to the layout shown in the system overview. They send JSON data consisting of the GPS location, accelerometer, gyroscope, and pothole status to the server through MQTT communications when the system detects a pothole, as shown in Figure 12. The experiment results show that the system can receive data from the device, process it, and display it on the map of the user interface in real-time. 8. Integration of Air-conditioning Guidance System As the fourth IoT application system, the air-conditioning guidance system (AC-Guide) is integrated. It can offer the guidance for the optimal use of air-conditioning (AC) in smart cities [59]. 8.1. System Architecture Figure 14 illustrates the system architecture overview. AC-Guide uses a web camera, a DHT22 sensor, and Raspberry Pi 3 model b+ as the sensor device. The Python program of the system periodically (1) collects the humidity and temperature of the room and the AC control panel photo, (2) collects the standard outdoor weather data by accessing to OpenWeatherMap API [60], (3) calculates the indoor discomfort index (DI) to determines whether the indoor state is comfort or discomfort, (4) calculates the outdoor DI to determines whether the outdoor state is comfort or discomfort, (5) detects the on/off state of the AC from the photo, (6) sends the message to turn on or turn off the AC considering the indoor DI, the outdoor DI, and the on/off state of AC, (7) saves the data in the log file, and (8) send the data to the server using the MQTT connection. Figure 14. System overview of AC-Guide. 8.2. Implementation in Platform Figure 15 shows the flow of the functions in the platform for integrating this IoT application system. Figure 15. Function flow for AC-Guide in platform. We evaluated the effectiveness of the integration of SEMAR with the air-conditioning guidance system. The experiment was carried out by running the system at the #2 Engineering Building in Okayama University. The device sends JSON data containing the indoor humidity, indoor temperature, indoor discomfort index (DI), outdoor humidity, outdoor temperature, outdoor discomfort index (DI), and state of AC using MQTT communications every one minute. The evaluation results show that SEMAR can receive sensor data and display sensor data in real-time on the user interface. Previously, these data were not accessible from other systems. By integrating SEMAR, they can access the data through REST API. In addition, SEMAR allows adding new sensors to the system without changing the codes; therefore, the advantages of integrating the SEMAR system is confirmed. 9. Integration of Fingerprint-based Indoor Localization System As the last IoT application system, the fingerprint-based indoor localization system using IEEE802.15.4 protocol (FILS15.4) is integrated. It detects the user locations in indoor environments according to the fingerprints of the target location. The process is divided into the calibration phase and the detection phase [61,62]. 9.1. System Architecture Figure 16 illustrates the overview of FILS15.4 architecture. This system adopts transmitting and receiving devices by Mono Wireless which employs the IEEE802.15.4 protocol at 2.4 GHz [63]. The transmitter Twelite 2525 is small with 2.5×2.5 cm and can be powered with a coin battery for a long time. The receiver Mono Stick is connected to Raspberry Pi over a USB port. To improve the detection accuracy, the sufficient number of receivers should be located at proper locations in the target area. Figure 16. System overview of FILS15.4. Raspberry Pi receives data from a transmitter, determines the link quality indication (LQI) for each transmitter, sends the LQI with the ID to the MQTT broker using the MQTT protocol. The server receives them from the MQTT broker, synchronizes the data from all the receivers, calculates the average LQI with the same transmitter ID, and keeps the results in one record in the SQLite database. The previous implementation used a free public MQTT service. 9.2. Calibration Phase The calibration phase generates and stores the fingerprint dataset. Each fingerprint consists of n LQI values where n represents the number of receivers. It represents the typical LQI values when a transmitter is located at the corresponding location (room in FILS15.4). 9.3. Detection Phase The detection phase detects the current room by calculating the Euclidean distance between the current LQI data and the fingerprint for each room and finding the fingerprint with the smallest distance. 9.4. Implementation in Platform Figure 17 shows the flow of the functions in the platform for integrating this IoT application system. The data synchronization function synchronizes the measured LQI values among all the receivers using the transmitter’s ID, and saves it in the schema data storage. The detection program is implemented as the plug-in function in the platform, and receives data through REST API services. Figure 17. Function flow for FILS15.4 in platform. We evaluate the integration of SEMAR with the fingerprint-based indoor localization system by running the system at two floors in the #2 Engineering Building of Okayama University. This system used six receivers to measure LQI from each transmitter. The receiver sent the LQI data every 500 ms to the server through MQTT communications. The evaluation results show that SEMAR can receive, process, and visualize the data. We also evaluate the data synchronization of the LQI data at the multiple receivers from the same transmitter. Figure 18 shows the synchronized LQI data for transmitter 1 during 30 s, where LQi for 𝑖=1,…,6 indicates the LQI data at receiver i. They are saved in the schema data storage and can be accessed from other programs through REST API. This system can run without interruptions even if it processes empty LQI data or if error detection occurs. When the system detects an error, it sets the LQI data to the default value. According to the evaluation results, the effectiveness of integrating the SEMAR system is confirmed. Figure 18. LQI data of transmitter 1. 10. Evaluations In this section, we evaluate the implementation of SEMAR IoT server platform. 10.1. Performance Analysis To evaluate the performance of SEMAR at the parameter level, first, we investigate the average response time for MQTT data communications when the number of IoT devices is increased from 1 to 125. In the experiments, a virtual IoT device is created in the system instead of a real device. Then, each virtual IoT device sends one message through a different topic every second. During this experiment, the CPU usage rate of the machine is also measured. As the response time, the time difference at a virtual IoT device from the data transmission to the server to the message reception from the server is measured. For HTTP POST, it can easily be obtained. When the IoT device sends data to the server, the REST API service returns the response message; however, for MQTT, the program is modified to measure the response time where it will send the MQTT message to the device when it stores data in the storage. Figure 19 and Figure 20 show the average response time and the average CPU usage rate when the number of virtual IoT devices is increased from 1 to 125, respectively. The average response time is 315𝑚𝑠 and the CPU usage rate is 74% for 125 devices. Thus, SEMAR our can handle hundreds of devices with acceptable delay and CPU rate. Figure 19. Average response time for MQTT communications with different numbers of devices. Figure 20. Average CPU usage rate with different numbers of devices. 10.2. The State-of-the-Art Comparative Analysis We compare the SEMAR IoT server platform with 14 recent research works that have the similar approach. In the comparison with the recent related works in the literature, we consider the following features to characterize each proposal: IoT application: represents the IoT application that is covered or implemented in each work. Device management: indicates the capability of the IoT platform to manage devices (Yes or No). Communication protocol: describes the communication protocol utilized in each work. Data synchronization: implies the capability to synchronize data across several devices (Yes or No). Data filtering function: indicates the implementation of digital filters to process data (Yes or No). Decision-making assistance: indicates the implementation of tools to evaluate data or generate alerts based on data obtained (Yes or No). Flexibility: shows the abilities to allow to join new devices, to handle different communication settings, to define data types, and to easily interact with external systems (Yes or No). Interoperability: represents the ability to be integrated with plural external systems through defined protocols (Yes or No). Scalability: demonstrates the capability of processing a number of data simultaneously (Yes or No). Table 6 compares the fulfillment of the nine features among the 14 related works and the proposed SEMAR. Table 6. State-of-the-art comparison between the existing related studies and the proposed solution. 10.2.1. IoT Application Although the works by Hernández-Rojas et al. in [64], Marcu et al. in [69], and Antunes et al. in [72] have potentials of use in various IoT applications, they have been studied in specific IoT applications. On the other hand, SEMAR has been integrated and implemented in several types of IoT applications. 10.2.2. IoT Device Management All the related works provide functions to add or remove IoT devices. Some works support device management services. Some works include capabilities to define the sensor format for each IoT device dynamically. The work by Trilles et al. in [70] provides the easy-to-use user interface to manage IoT devices. On the other hand, SEMAR provides all of the functions on IoT devices. 10.2.3. Communication Protocol HTTP and MQTT are the most adopted communication protocols in IoT application platforms. In addition, Del Esposte in [67] and Antunes in [72] introduce AMQP as another protocol utilizing TCP connections. Thus, it is suitable for server–client communications [73]. None of the related works reported functions to synchronize data from several devices and digital filters to process sensor data. Only SEMAR provides both the data synchronization capability and digital filters to process data. 10.2.4. Decision Making Assistance For decision-making assistance, a lot of works have offered functions for perspective data analysis based on collected data. The works by Mandava et al. in [18], by Kamienski et al. in [65], by Chiesa et al. in [66], and by Boursianis et al. in [71] applied machine learning algorithms for real-time classifications, and show the results for user interfaces. The work by Hernández-Rojas et al. in [64] utilized message notifications according to a specific data threshold. The work by Trilles et al. in [70] and our SEMAR included both of them. 10.2.5. Interoperability and Flexibility Several works provided interoperability. The works by Hernández-Rojas et al. in [64], by Trilles et al. in [70], and SEMAR allow outer programs to process data without changing the existing program in the systems. Some works consider the flexibility as the IoT application platform. The works by Hernández-Rojas et al. in [64] and by Trilles et al. in [70] provide the capability to dynamically define the sensor format and the data type for each device, similar to SEMAR. However, any work cannot be connected with other MQTT servers. Only SEMAR flexibly allows users to use other MQTT servers, which will allow IoT applications to be easily integrated with SEMAR. 11. Threats to Validity There are two kinds of threats to the validity of this research, which are as follows: Internal validity threat: validates the potential errors in the SEMAR implementation. In this study, SEMAR is integrated with five different IoT application systems. Each IoT application utilized various kinds of sensors. Possible threats may occur when submitting invalid or incomplete data. Moreover, the integration of SEMAR with the fingerprint-based indoor localization system requires the synchronization of data from each receiver to determine the location of the transmitter. To eliminate potential threats, SEMAR checks sensor data with the format. In addition, the data synchronization function will provide default values for devices with no data within the data synchronization timeframe. External validity threat: validates the generalization ability of the obtained results. We compare the results of SEMAR to those of previous IoT-related studies. The primary potential external threat revealed by the comparison results is that not all of the related IoT-related research provided comprehensive and clear explanations of the proposals. 12. Conclusions This paper presented the design and implementation of the IoT server platform for integrating various IoT application systems, called Smart Environmental Monitoring and Analytical in Real-Time (SEMAR). It offers Big Data environments with built-in functions for data aggregations, synchronizations, and classifications with machine learning, and plug-in functions that access to the data through REST API. The platform was implemented and integrated with five IoT application systems. The results confirmed the effectiveness and efficiency of the proposal. In future studies, we will continue improving the platform by implementing Rules Engine and Complex Event Processing (CEP) [74] for the data processing. Rules Engine will support user-defined rules, actions, and notifications. CEP will offer the real-time data analysis based on rule patterns [75]. It will control the device action or deliver messages to users when rule patterns are matched; however, these functions meet issues in parallelism, resource allocations, distributed networks, and multi-rules optimizations [76], which will be studied. Then, we will continue integrating the proposal with various IoT application systems. Author Contributions Conceptualization, Y.Y.F.P., N.F. and S.S.; Methodology, Y.Y.F.P.; Software, Y.Y.F.P. and P.P.; Writing—Original Draft Preparation, Y.Y.F.P.; Writing—Review and Editing, N.F.; Validation, M.K. and W.-C.K. All authors have read and agreed to the published version of the manuscript. Funding This research received no external funding. Institutional Review Board Statement Not applicable. Informed Consent Statement Not applicable. Data Availability Statement Not applicable. Acknowledgments The authors thank the reviewers for their thorough reading and helpful comments. Conflicts of Interest The authors declare no conflict of interest. References Theofilou, P. Quality of Life: Definition and Measurement. Eur. J. Psychol. 2013, 9, 150–162. [Google Scholar] [CrossRef] Macke, J.; Casagrande, R.; Sarate, J.; Silva, K. Smart City and Quality of Life: Citizens’ perception in a Brazilian case study. J. Clean. Prod. 2018, 182, 717–726. [Google Scholar] [CrossRef] Noura, M.; Atiquzzaman, M.; Gaedke, M. Interoperability in Internet of Things: Taxonomies and Open Challenges. Mob. Networks Appl. 2018, 24, 796–809. [Google Scholar] [CrossRef] Cubo, J.; Nieto, A.; Pimentel, E. A Cloud-Based Internet of Things Platform for Ambient Assisted Living. Sensors 2014, 14, 14070–14105. [Google Scholar] [CrossRef] Leong, W.; Kelani, R.; Ahmad, Z. Prediction of Air Pollution Index (API) using Support Vector Machine (SVM). J. Environ. Chem. Eng. 2020, 8, 103208. [Google Scholar] [CrossRef] Perlmutt, L.; Cromar, K. Comparing Associations of Respiratory Risk for The EPA Air Quality Index and Health-Based Air Quality Indices. Atmos. Environ. 2019, 202, 1–7. [Google Scholar] [CrossRef] MQTT Org. Message Queuing Telemetry Transport Protocol. Available online: http://mqtt.org/ (accessed on 12 May 2022). Kamienski, C.; Prati, R.; Kleinschmidt, J.; Soininen, J.P. Designing an Open IoT Ecosystem. In Proceedings of the Workshop on Cloud Networks 2019, Belem, Brazil, 16 July 2019. [Google Scholar] Bansal, S.; Kumar, D. IoT Ecosystem: A Survey on Devices, Gateways, Operating Systems, Middleware and Communication. Int. J. Wirel. Inf. Netw. 2020, 27, 340–364. [Google Scholar] [CrossRef] Li, S.; Xu, L.; Zhao, S. The Internet of Things: A Survey. Inf. Syst. Front. 2014, 17, 243–259. [Google Scholar] [CrossRef] Malche, T.; Maheshwary, P.; Kumar, R. Environmental Monitoring System for Smart City Based on Secure Internet of Things (IoT) Architecture. Wirel. Pers. Commun. 2019, 107, 2143–2172. [Google Scholar] [CrossRef] Venkanna, U.; Sharma, S.; Katiyar, B.; Prashanth, Y. A Wireless Sensor Node Based Efficient Parking Slot Availability Detection System for Smart Cities. In Proceedings of the 2018 Recent Advances on Engineering, Technology and Computational Sciences (RAETCS), Allahabad, India, 6–8 February 2018; pp. 1–6. [Google Scholar] Zhang, Q.; Zhong, H.; Shi, W.; Liu, L. A Trusted and Collaborative Framework for Deep Learning in IoT. Comput. Netw. 2021, 193, 108055. [Google Scholar] [CrossRef] Jain, V.; Ahuja, A.; Saini, D. Evaluation and Performance Analysis of Apache Pulsar and NATS. In Cyber Security and Digital Forensics; Lecture Notes on Data Engineering and Communications Technologies; Springer: Singapore, 2021; pp. 179–190. [Google Scholar] [CrossRef] Dizdarević, J.; Carpio, F.; Jukan, A.; Masip-Bruin, X. A Survey of Communication Protocols for Internet of Things and Related Challenges of Fog and Cloud Computing Integration. ACM Comput. Surv. 2019, 51, 1–29. [Google Scholar] [CrossRef] Marques, G.; Pitarma, R. An Internet of Things-Based Environmental Quality Management System to Supervise the Indoor Laboratory Conditions. Appl. Sci. 2019, 9, 438. [Google Scholar] [CrossRef] Benammar, M.; Abdaoui, A.; Ahmad, S.; Touati, F.; Kadri, A. A Modular IoT Platform for Real-Time Indoor Air Quality Monitoring. Sensors 2018, 18, 581. [Google Scholar] [CrossRef] [PubMed] Mandava, T.; Chen, S.; Isafiade, O.; Bagula, A. An IoT Middleware for Air Pollution Monitoring in Smart Cities: A Situation Recognition Model. In Proceedings of the IST Africa 2018 Conference, Gabarone, Botswana, 9–11 May 2018. [Google Scholar] Senozètnik, M.; Herga, Z.; Šubic, T.; Bradeško, L.; Kenda, K.; Klemen, K.; Pergar, P.; Mladenić, D. IoT Middleware for Water Management. Proceedings 2018, 2, 696. [Google Scholar] [CrossRef] Kazmi, A.; Serrano, M.; Soldatos, J. VITAL-OS: An Open Source IoT Operating System for Smart Cities. IEEE Commun. Stand. Mag. 2018, 2, 71–77. [Google Scholar] [CrossRef] Toma, C.; Alexandru, A.; Popa, M.; Zamfiroiu, A. IoT Solution for Smart Cities’ Pollution Monitoring and the Security Challenges. Sensors 2019, 19, 3401. [Google Scholar] [CrossRef] [PubMed] Javed, A.; Malhi, A.; Kinnunen, T.; Framling, K. Scalable IoT Platform for Heterogeneous Devices in Smart Environments. IEEE Access 2020, 8, 211973–211985. [Google Scholar] [CrossRef] The Apache Cassandra Software Project Website. Available online: https://cassandra.apache.org/ (accessed on 22 August 2022). Badii, C.; Bellini, P.; Difino, A.; Nesi, P. Smart city IoT Platform Respecting GDPR Privacy and Security Aspects. IEEE Access 2020, 8, 23601–23623. [Google Scholar] [CrossRef] Putra, K.; Chen, H.; Prayitno; Ogiela, M.; Chou, C.; Weng, C.; Shae, Z. Federated Compressed Learning Edge Computing Framework with Ensuring Data Privacy for PM2.5 Prediction in Smart City Sensing Applications. Sensors 2021, 21, 4586. [Google Scholar] [CrossRef] Gautam, G.; Sharma, G.; Magar, B.; Shrestha, B.; Cho, S.; Seo, C. Usage of IoT Framework in Water Supply Management for Smart City in Nepal. Appl. Sci. 2021, 11, 5662. [Google Scholar] [CrossRef] Oliveira, F.; Costa, D.; Lima, L.; Silva, I. iBikeSafe: A Multi-Parameter System for Monitoring, Evaluation and Visualization of Cycling Paths in Smart Cities Targeted at Cycling Adverse Conditions. Smart Cities 2021, 4, 56. [Google Scholar] [CrossRef] Metia, S.; Nguyen, H.; Ha, Q. IoT-Enabled Wireless Sensor Networks for Air Pollution Monitoring with Extended Fractional-Order Kalman Filtering. Sensors 2021, 21, 5313. [Google Scholar] [CrossRef] [PubMed] Twahirwa, E.; Rwigema, J.; Datta, R. Design and Deployment of Vehicular Internet of Things for Smart City Applications. Sustainability 2021, 14, 176. [Google Scholar] [CrossRef] D’Ortona, C.; Tarchi, D.; Raffaelli, C. Open-Source MQTT-Based End-to-End IoT System for Smart City Scenarios. Future Internet 2022, 14, 57. [Google Scholar] [CrossRef] Kumar, P.; Gupta, G.; Tripathi, R. Design of Anomaly-Based Intrusion Detection System Using Fog Computing for IoT Network. Autom. Control. Comput. Sci. 2021, 55, 137–147. [Google Scholar] [CrossRef] Kumar, P.; Gupta, G.; Tripathi, R. A Distributed Ensemble Design Based Intrusion Detection System Using Fog Computing to Protect The Internet of Things Networks. J. Ambient. Intell. Humaniz. Comput. 2020, 12, 9555–9572. [Google Scholar] [CrossRef] Kumar, P.; Gupta, G.; Tripathi, R. Toward Design of an Intelligent Cyber Attack Detection System using Hybrid Feature Reduced Approach for IoT Networks. Arab. J. Sci. Eng. 2021, 46, 3749–3778. [Google Scholar] [CrossRef] Kumar, P.; Gupta, G.; Tripathi, R. PEFL: Deep Privacy-Encoding-Based Federated Learning Framework for Smart Agriculture. IEEE Micro 2022, 42, 33–40. [Google Scholar] [CrossRef] Kumar, P.; Tripathi, R.P.; Gupta, G. P2IDF: A Privacy-preserving Based Intrusion Detection Framework for Software Defined Internet of Things-fog (SDIoT-Fog). In Proceedings of the 2021 International Conference on Distributed Computing and Networking, Nara, Japan, 5–8 January 2021; pp. 37–42. [Google Scholar] Wu, H.; Chen, C.; Weng, K. Two Designs of Automatic Embedded System Energy Consumption Measuring Platforms Using GPIO. Appl. Sci. 2020, 10, 4866. [Google Scholar] [CrossRef] Munshi, A. Improved MQTT Secure Transmission Flags in Smart Homes. Sensors 2022, 22, 2174. [Google Scholar] [CrossRef] Dinculeană, D.; Cheng, X. Vulnerabilities and Limitations of MQTT Protocol Used between IoT Devices. Appl. Sci. 2019, 9, 848. [Google Scholar] [CrossRef] Al-Joboury, I.; Al-Hemiary, E. IoT-F2CDM-LB: IoT Based Fog-to-Cloud and Data-in-Motion Architectures with Load Balancing. EAI Endorsed Trans. Internet Things 2018, 4, 155332. [Google Scholar] [CrossRef] Waseem, M.; Liang, P.; Shahin, M. A Systematic Mapping Study on Microservices Architecture in DevOps. J. Syst. Softw. 2020, 170, 110798. [Google Scholar] [CrossRef] Fridelin, Y.; Ulil Albaab, M.; Anom Besari, A.; Sukaridhoto, S.; Tjahjono, A. Implementation of Microservice Architectures on SEMAR Extension for Air Quality Monitoring. In Proceedings of the 2018 International Electronics Symposium on Knowledge Creation and Intelligent Computing (IES-KCIC) 2018, Bali, Indonesia, 29–30 October 2018; pp. 218–224. [Google Scholar] Kumar, P.; Gupta, G.; Tripathi, R.; Garg, S.; Hassan, M. DLTIF: Deep Learning-Driven Cyber Threat Intelligence Modeling and Identification Framework in IoT-Enabled Maritime Transportation Systems. IEEE Trans. Intell. Transp. Syst. 2021, 1–10. [Google Scholar] [CrossRef] Kumar, P.; Kumar, R.; Gupta, G.; Tripathi, R. BDEdge: Blockchain and Deep-Learning for Secure Edge-Envisioned Green CAVs. IEEE Trans. Green Commun. Netw. 2022, 1330–1339. [Google Scholar] [CrossRef] Kumar, P.; Gupta, G.; Tripathi, R. TP2SF: A Trustworthy Privacy-Preserving Secured Framework for Sustainable Smart Cities by Leveraging Blockchain and Machine learning. J. Syst. Archit. 2021, 115, 101954. [Google Scholar] [CrossRef] Kumar, P.; Gupta, G.; Tripathi, R. An Ensemble Learning and Fog-cloud Architecture-driven Cyber-attack Detection Framework for IoMT Networks. Comput. Commun. 2021, 166, 110–124. [Google Scholar] [CrossRef] Chang, C.; Lin, C. LIBSVM: A Library for Support Vector Machines. ACM Trans. Intell. Syst. Technol. 2011, 2, 1–27. [Google Scholar] [CrossRef] Suárez Sánchez, A.; García Nieto, P.; Riesgo Fernández, P.; del Coz Díaz, J.; Iglesias-Rodríguez, F. Application of an SVM-based regression model to the air quality study at local scale in the Avilés urban area (Spain). Math. Comput. Model. 2011, 54, 1453–1466. [Google Scholar] [CrossRef] Ghiasi, M.; Zendehboudi, S. Decision Tree-Based Methodology to Select a Proper Approach for Wart Treatment. Comput. Biol. Med. 2019, 108, 400–409. [Google Scholar] [CrossRef] Hagan, D.; Isaacman-VanWertz, G.; Franklin, J.; Wallace, L.; Kocar, B.; Heald, C.; Kroll, J. Calibration and Assessment of Electrochemical Air Quality Sensors by Co-Location with Regulatory-Grade Instruments. Atmos. Meas. Tech. 2018, 11, 315–328. [Google Scholar] [CrossRef] Wei, W.; Ramalho, O.; Malingre, L.; Sivanantham, S.; Little, J.; Mandin, C. Machine Learning and Statistical Models for Predicting Indoor Air Quality. Indoor Air 2019, 29, 704–726. [Google Scholar] [CrossRef] [PubMed] Ghosh, S.; Dasgupta, A.; Swetapadma, A. A Study on Support Vector Machine Based Linear and Non-Linear Pattern Classification. Proceedings of International Conference on Intelligent Sustainable Systems (ICISS) 2019, Palladam, India, 21–22 February 2019; pp. 24–28. [Google Scholar] MQTT Mosquitto Server. Available online: https://mosquitto.org/ (accessed on 12 May 2022). Dory, M.; Parrish, A.; Berg, B. Introduction to Tornado; O’Reilly Media: Sebastopol, CA, USA, 2012. [Google Scholar] MongoDB, Mongodb: The Application Data Platform. Available online: https://www.mongodb.com/ (accessed on 12 May 2022). Hao, J.; Ho, T. Machine Learning Made Easy: A Review of Scikit-learn Package in Python Programming Language. J. Educ. Behav. Stat. 2019, 44, 348–361. [Google Scholar] [CrossRef] Gamma, E.; Helm, R.; Johnson, R.; Vlissides, J.M. Design Patterns: Elements of Reusable Object-Oriented Software; Addison-Wesley Professional; Addison-Wesley: Boston, MA, USA, 1994. [Google Scholar] Villán, A.F. Mastering OpenCV 4 with Python: A Practical Guide Covering Topics from Image Processing, Augmented Reality to Deep Learning with OpenCV 4 and Python 3.7; Packt Publishing Ltd.: Birmingham, UK, 2019. [Google Scholar] Pang, B.; Nijkamp, E.; Wu, Y. Deep Learning With TensorFlow: A Review. J. Educ. Behav. Stat. 2019, 45, 227–248. [Google Scholar] [CrossRef] Huda, S.; Funabiki, N.; Kuribayashi, M.; Sudibyo, R.; Ishihara, N.; Kao, W. A Proposal of Air-Conditioning Guidance System Using Discomfort Index. In Proceedings of the 15th International Conference on Broad-Band and Wireless Computing, Communication and Applications (BWCCA-2020), Yonago, Japan, 28–30 October 2020; pp. 154–165. [Google Scholar] OpenWeatherMap. Current Weather and Forecast—OpenWeatherMap. Available online: https://openweathermap.org/ (accessed on 12 May 2022). Huo, Y.; Puspitaningayu, P.; Funabiki, N.; Hamazaki, K.; Kuribayashi, M.; Kojima, K.A. Proposal of the Fingerprint Optimization Method for the Fingerprint-Based Indoor Localization System with IEEE 802.15.4 Devices. Information 2022, 13, 211. [Google Scholar] [CrossRef] Puspitaningayu, P.; Huo, Y.; Funabiki, N.; Hamazaki, K.; Kuribayashi, M.; Kao, W. Investigations of Detection Accuracy Improvements for Fingerprint-based Indoor Localization System Using IEEE 802.15.4. In Proceedings of the Fourth International Conference on Vocational Education and Electrical Engineering (ICVEE) 2021, Surabaya, Indonesia, 2–3 October 2021; pp. 1–5. [Google Scholar] Mono Wireless. Mono Wireless Product Information. Available online: https://mono-wireless.com/jp/products/index.html (accessed on 12 May 2022). Hernández-Rojas, D.; Fernández-Caramés, T.; Fraga-Lamas, P.; Escudero, C. A Plug-and-Play Human-Centered Virtual TEDS Architecture for the Web of Things. Sensors 2018, 18, 2052. [Google Scholar] [CrossRef] Kamienski, C.; Soininen, J.; Taumberger, M.; Dantas, R.; Toscano, A.; Salmon Cinotti, T.; Filev Maia, R.; Torre Neto, A. Smart Water Management Platform: IoT-Based Precision Irrigation for Agriculture. Sensors 2019, 19, 276. [Google Scholar] [CrossRef] Chiesa, G.; Cesari, S.; Garcia, M.; Issa, M.; Li, S. Multisensor IoT Platform for Optimising IAQ Levels in Buildings through a Smart Ventilation System. Sustainability 2019, 11, 5777. [Google Scholar] [CrossRef] De M. Del Esposte, A.; Santana, E.; Kanashiro, L.; Costa, F.; Braghetto, K.; Lago, N.; Kon, F. Design and Evaluation of a Scalable Smart City Software Platform with Large-Scale Simulations. Future Gener. Comput. Syst. 2019, 93, 427–441. [Google Scholar] [CrossRef] Christou, I.; Kefalakis, N.; Zalonis, A.; Soldatos, J.; Bröchler, R. End-to-End Industrial IoT Platform for Actionable Predictive Maintenance. IFAC-PapersOnLine 2020, 53, 173–178. [Google Scholar] [CrossRef] Marcu, I.; Suciu, G.; Bălăceanu, C.; Vulpe, A.; Drăgulinescu, A. Arrowhead Technology for Digitalization and Automation Solution: Smart Cities and Smart Agriculture. Sensors 2020, 20, 1464. [Google Scholar] [CrossRef] [PubMed] Trilles, S.; González-Pérez, A.; Huerta, J. An IoT Platform Based on Microservices and Serverless Paradigms for Smart Farming Purposes. Sensors 2020, 20, 2418. [Google Scholar] [CrossRef] [PubMed] Boursianis, A.; Papadopoulou, M.; Gotsis, A.; Wan, S.; Sarigiannidis, P.; Nikolaidis, S.; Goudos, S. Smart Irrigation System for Precision Agriculture—The AREThOU5A IoT Platform. IEEE Sens. J. 2021, 21, 17539–17547. [Google Scholar] [CrossRef] Antunes, M.; Santiago, A.; Manso, S.; Regateiro, D.; Barraca, J.; Gomes, D.; Aguiar, R. Building an IoT Platform Based on Service Containerisation. Sensors 2021, 21, 6688. [Google Scholar] [CrossRef] Depari, A.; Fernandes Carvalho, D.; Bellagente, P.; Ferrari, P.; Sisinni, E.; Flammini, A.; Padovani, A. An IoT Based Architecture for Enhancing the Effectiveness of Prototype Medical Instruments Applied to Neurodegenerative Disease Diagnosis. Sensors 2019, 19, 1564. [Google Scholar] [CrossRef] [PubMed] Mazon-Olivo, B.; Hernández-Rojas, D.; Maza-Salinas, J.; Pan, A. Rules Engine and Complex Event Processor in the Context of Internet of Things for Precision Agriculture. Comput. Electron. Agric. 2018, 154, 347–360. [Google Scholar] [CrossRef] Da Costa Bezerra, S.; Filho, A.; Delicato, F.; da Rocha, A. Processing Complex Events in Fog-Based Internet of Things Systems for Smart Agriculture. Sensors 2021, 21, 7226. [Google Scholar] [CrossRef] Flouris, I.; Giatrakos, N.; Deligiannakis, A.; Garofalakis, M.; Kamp, M.; Mock, M. Issues in Complex Event Processing: Status and Prospects in the Big Data Era. J. Syst. Softw. 2017, 127, 217–236. [Google Scholar] [CrossRef]                             Publisher’s Note: MDPI stays neutral with regard to jurisdictional claims in published maps and institutional affiliations.  © 2022 by the authors. Licensee MDPI, Basel, Switzerland. This article is an open access article distributed under the terms and conditions of the Creative Commons Attribution (CC BY) license (https://creativecommons.org/licenses/by/4.0/). Share and Cite MDPI and ACS Style Panduman, Y.Y.F.; Funabiki, N.; Puspitaningayu, P.; Kuribayashi, M.; Sukaridhoto, S.; Kao, W.-C. Design and Implementation of SEMAR IoT Server Platform with Applications. Sensors 2022, 22, 6436. https://doi.org/10.3390/s22176436 AMA Style Panduman YYF, Funabiki N, Puspitaningayu P, Kuribayashi M, Sukaridhoto S, Kao W-C. Design and Implementation of SEMAR IoT Server Platform with Applications. Sensors. 2022; 22(17):6436. https://doi.org/10.3390/s22176436 Chicago/Turabian Style Panduman, Yohanes Yohanie Fridelin, Nobuo Funabiki, Pradini Puspitaningayu, Minoru Kuribayashi, Sritrusta Sukaridhoto, and Wen-Chung Kao. 2022. \"Design and Implementation of SEMAR IoT Server Platform with Applications\" Sensors 22, no. 17: 6436. https://doi.org/10.3390/s22176436 Note that from the first issue of 2016, this journal uses article numbers instead of page numbers. See further details here. Article Metrics Citations Crossref   14 Web of Science   4 Scopus   15 ads   1 PubMed   2 PMC   2 Google Scholar   [click to view] Article Access Statistics Article access statistics Article Views 7. Jan 17. Jan 27. Jan 6. Feb 16. Feb 26. Feb 7. Mar 17. Mar 27. Mar 0 500 1000 1500 2000 2500 For more information on the journal statistics, click here. Multiple requests from the same IP address are counted as one view.   Sensors, EISSN 1424-8220, Published by MDPI RSS Content Alert Further Information Article Processing Charges Pay an Invoice Open Access Policy Contact MDPI Jobs at MDPI Guidelines For Authors For Reviewers For Editors For Librarians For Publishers For Societies For Conference Organizers MDPI Initiatives Sciforum MDPI Books Preprints.org Scilit SciProfiles Encyclopedia JAMS Proceedings Series Follow MDPI LinkedIn Facebook Twitter Subscribe to receive issue release notifications and newsletters from MDPI journals Select options Subscribe © 1996-2024 MDPI (Basel, Switzerland) unless otherwise stated Disclaimer Terms and Conditions Privacy Policy"

Paper 6:
- APA Citation: Raikar, M. M., & M, M. S. (2023). Fog Computing-Enabled Internet of Things for Resource Optimization. In R. Misra, R. Omer, M. Rajarajan, B. Veeravalli, N. Kesswani, & P. Mishra (Eds.), Machine Learning and Big Data Analytics (pp. 329–339). Springer Proceedings in Mathematics & Statistics. https://doi.org/10.1007/978-3-031-15175-0_27
  Main Objective: To propose a Fog-enabled IoT architecture for resource optimization in precision agriculture, focusing on the use of lightweight protocols and edge devices.
  Study Location: Unspecified
  Data Sources: Sensor data, agricultural data
  Technologies Used: MQTT, CoAP, Raspberry Pi, Fog computing, IoT
  Key Findings: The Fog-enabled IoT architecture reduces latency in data transmission and enhances response time for agricultural services, enabling more efficient and timely decision-making. The lightweight protocols, such as MQTT and CoAP, facilitate energy-efficient and secure data communication between edge devices and sensors, optimizing resource utilization.
  Extract 1: "The Message Queue Telemetry Transport (MQTT) is the lightweight protocol that is used for communication between the edge devices such as Raspberry Pi. The MQTT protocol uses publish-subscribe communication model"
  Extract 2: "In Fig. 1, end devices could be the mobile, laptop, or the tablet. The services could be accessed using a browser or an application. The service response time could be greatly enhanced by deploying these on the edge devices closer to the sensors."
  Limitations: The paper focuses on the use of lightweight protocols for data transmission and does not delve into the details of deploying machine learning models or integrating them with other components of the irrigation management pipeline.
  Relevance Evaluation: This paper is highly relevant to the point on integration of deployed machine learning models with other components of the automated irrigation management pipeline, such as data preprocessing, decision-making, and control systems, using protocols like MQTT, CoAP, RESTful APIs. The paper specifically discusses the use of MQTT and its advantages in the context of precision agriculture.
  Relevance Score: 0.9
  Inline Citation: (Raikar & M, 2023)
  Explanation: This paper presents a Fog-enabled IoT architecture for precision agriculture, which reduces latency and improves resource optimization in agricultural practices. The proposed architecture leverages lightweight protocols, such as MQTT and CoAP, for data transmission between edge devices and sensors, enabling real-time monitoring, decision-making, and control of irrigation, fertigation, and other agricultural processes.

 Full Text: >
"Your privacy, your choice We use essential cookies to make sure the site can function. We also use optional cookies for advertising, personalisation of content, usage analysis, and social media. By accepting optional cookies, you consent to the processing of your personal data - including transfers to third parties. Some third parties are outside of the European Economic Area, with varying standards of data protection. See our privacy policy for more information on the use of your personal data. Manage preferences for further information and to change your choices. Accept all cookies Skip to main content Advertisement Log in Find a journal Publish with us Track your research Search Cart International Conference on Machine Learning and Big Data Analytics ICMLBDA 2022: Machine Learning and Big Data Analytics pp 329–339Cite as Home Machine Learning and Big Data Analytics Conference paper Fog Computing-Enabled Internet of Things for Resource Optimization Meenaxi M. Raikar & Meena S M   Conference paper First Online: 07 June 2023 416 Accesses Part of the book series: Springer Proceedings in Mathematics & Statistics ((PROMS,volume 401)) Abstract Internet of Things (IoT) has evolved and penetrated in different sectors such as healthcare, agriculture, manufacturing, transportation, and logistics. The IoT services are deployed in the cloud for accessing it virtually independent of location. The data-intensive IoT applications when deployed in the cloud have high response time. To overcome this challenge, the fog computing techniques is proposed to access the data from the sensors in real time. In this paper, the Fog-enabled IoT architecture for precision agriculture is presented. Precision agriculture is the usage of information technology to increase yield of crops and improve health of plants by ensuring accurate and controlled supply of nutrients. The sensors are deployed in the fields, and data is sent to the edge devices used for improving the produce. The different services available are automated irrigation and fertigation, recommendation by experts, decision support system, and protection from rodents. The farmers can subscribe to the service and make the best use. The advantage of Fog-enabled IoT is the reduction in round-trip time (RTT) compared to Cloud IoT architecture. The result demonstrates 40% reduction in RTT when Fog-enabled IoT architecture is used for different services. Keywords MQTT Raspberry Pi Publish Subscribe Edge device Access provided by University of Nebraska-Lincoln. Download conference paper PDF 1 Introduction The Fog-enabled Internet of Things (IoT) architecture is used for resource optimization. The agriculture sector use case is considered for providing service to the farmers. The farmer can enable the services using the mobile application. The lightweight protocol is chosen for communication between the devices for energy-efficient transmission of the data. The network topology consists of heterogeneous nodes such as things and edge devices. The nodes in the network are power constraint devices; hence, the lightweight protocol is opted for the communication. The Message Queue Telemetry Transport (MQTT) is the lightweight protocol that is used for communication between the edge devices such as Raspberry Pi. The MQTT protocol uses publish-subscribe communication model. It is assumed that the service provider will have the infrastructure for facilitating the different services mentioned. The recommendation by experts regarding which crop to be grown in the field based on region, season, and climate conditions is available to the farmers. Advice related to the appropriate time for sowing the seed to get better yield is facilitated on request through mobile. This paper outlines the use of IoT devices such as rain sensor, soil moisture sensor, and temperature sensor to sense the agricultural data and store into edge device database. The stored data is monitored through big data analytics, and prediction is performed using data mining techniques. The energy efficiency is computed in terms of the packet size and the round trip time for the transmission of the data between the devices. The organization of the paper: In Sect. 2, related work on Fog IoT services is presented. In Sect. 3, the architecture for Fog IoT taking precision agriculture as a use case is described. The energy model for the Fog IoT devices is discussed in Sect. 4. The distance between the Fog IoT nodes, a factor to reduce latency, is presented in Sect. 5. The result analysis and conclusion is presented in Sects. 6, and 7, respectively. 2 State of the Art in Fog-Enabled IoT Services In [1], the system that collects soil properties and stores it in cloud for further analysis is mentioned. It also speaks about building a scalable sensor data analysis for smart farming with commercially available IoT devices which reduces maintenance cost and provides data analytics resulting in increased crop yield. In [2], cloud-based IoT application for precision agriculture with three-layer architecture is described. The top layer deals with collecting information and applying necessary agricultural actions. The next layer connects the top layer to IoT. The last layer deals with data storage and processing. AgroTick, a novel hybrid system for smart agriculture, is discussed in [3]. AgroTick is an Internet of Things (IoT) system with a mobile interface that was created using technological modules such as cloud computing, embedded firmware, hardware, and big data analytics. AgroTick is built to increase agricultural efficiency, develop a well-connected farming network, and provide a knowledge-sharing platform for farmers. In [4,5,6,7], the lightweight protocol, Message Queue Telemetry Transport (MQTT), is the communication model used. It has opened its way in many sectors since its invention in 1999. The different cloud deployments and services available for the Internet users are presented in [8]. The various applications of IoT such as smart parking, waste management, and home automation are described in [9]. The power efficiency for IoT devices is enhanced using the software-defined networks (SDN) architecture [10]. The energy efficiency of the IoT devices is improved using load balancing and fault tolerance techniques [11]. The IoT services of the smart city are described in [12]. The 6LoWPAN and CoAP protocol in development of the applications are presented in [13]. The security issues are concerns in the IoT network presented in [14, 15]. 3 Fog Computing-Enabled IoT Architecture The Fog computing-enabled IoT architecture for precision agriculture using lightweight protocol is shown in Fig. 1. The objective is to provide different service for farmers that aid in precision agriculture such as: 1. Irrigation and fertigation as a service 2. Crop-related decision support system as a service 3. Recommendation as a service 4. Pest control as a service The farmers have to subscribe for the services by registration process. The metering and billing module at the service provider (SP) side keeps track of the unit amount of resource utilized by the farmers. Irrigation and Fertigation As a Service: This service is used by farmers to irrigate and fertigate the land. The controlled amount of water and fertilizers are supplied to the plants based on the different parameters such as soil moisture content, temperature, and rainfall in the region. Crop-Related Decision Support System As a Service This service aids the farmer in making decisions related to the type of crop to be sowed or the suitable time for sowing in the region. To facilitate this service at the SP side, big data analytics technique are applied as shown in Fig. 1. Recommendation As a Service The farmers who have subscribed to this service get recommendation related to the crop. The data related to each farmers land is collected using sensors and stored at the data center for analysis. The data mining techniques are applied for recommendation to the farmers. Pest Control As a Service This service enables the farmers to combat the loss in yield due to pests and rodents. The automated fertigation unit is installed at the service provider location. The metering unit aids in determining the amount of unit consumed by the farmers for accounting and billing. The virtualization technique is applied for efficient utilization of resources at the data centers. The virtual private network (VPN) component enables the user to have private network for security reasons. These services are deployed at the edge device closer to the sensors to minimize the latency. In the Fig. 1, end devices could be the mobile, laptop, or the tablet. The services could be accessed using a browser or an application. The service response time could be greatly enhanced by deploying these on the edge devices closer to the sensors. In the next section, the energy efficiency model for fog IoT architecture is presented. Fig. 1 Fog-enabled IoT architecture using lightweight protocol Full size image 4 Energy Model for the Fog IoT Devices The evolution of Fog computing-enabled Internet of Things is at its peak as represented in Gartner’s predictions in the recent days. Here, the things connect to the Internet anytime, anywhere providing the ubiquity to the users. These things are fueled by energy sources. Hence, energy efficient utilization of the IoT resources is an important research domain. With the invention of Industrial IoT, the need for low power technology is increasing tremendously. Thus, the power consumption model for IoT applications plays an important role in network resource optimization. A trade-off is to be achieved between cost incurred, network lifetime, and the power consumption of the devices. The power efficiency model for IoT devices is presented in [16]. The effect of power consumption based on the traffic pattern in IoT devices of smart city applications is described in [17]. In an IoT application, energy is consumed during data acquisition, processing, and communication. The alternate to save energy is to use energy harvesting technologies, which is out of the scope of this paper. The analysis of energy in the life cycle of an IoT application is presented here. The objective is to minimize the power consumption of the IoT applications. In the literature, system level conservation of energy is described vastly. The focus of this paper is mainly from the perspective of energy consumption during communication between the devices. In an IoT application, the pattern observed is data acquisition by the sensors/things, processing performed by the controller, and the transmission of the data. Based on this pattern, the power consumption of the IoT application is broken into four different blocks. The first block being the power consumed at the system/device level (PSYS) to perform the operations at the operating system level. The second block being the power consumption during the data acquisition by the sensors/things (PDACQ). The third block is power consumed for processing (PPROC) and finally the power utilized for communicating between the networking devices (PCOMMN). The mathematical representation of the observed pattern in IoT application is given in Eq. (1). $$ {P}_{NDEV}={P}_{SYS}+{P}_{DACQ}+{P}_{PROC}+{P}_{COMMN} $$ (1) With the main objective being the power conservation during communication, the lightweight protocol is used in the development of the IoT applications. The payload in case of lightweight protocol such as MQTT for IoT applications is 2 bytes. Since the IoT devices are battery powered, the objective is to minimize the power consumed during transmission for increasing the network lifetime. 4.1 Power Consumption Model for Data Communication The average power consumed during communication is represented as energy required to send a message (EM) and the time interval between consecutive messages (TM) as given in Eq. (2). $$ {P}_{COMMN}=\\sum \\limits_{k=1}^n\\frac{E_M^{(k)}}{T_M^{(k)}} $$ (2) where n is the number of messages sent during the experimental period and k varies from 1 to n. The factors that influence EM are based on whether it is a wired medium or wireless medium for transmission, embedded chip type on the sensor/thing and the period for every transmission. The IoT applications can be categorized into two types such as periodic and event trigger-based reporting. In case of periodic reporting such as temperature monitoring, the value for \\( {T}_{\\textrm{M}}^{(k)} \\) is constant. Therefore, Eq. (2) is rewritten as: $$ {P}_{COMMN}=\\frac{1}{T_M^0}\\sum \\limits_{k=1}^n{E}_M^{(k)} $$ (3) Here, \\( {T}_M^0 \\) is constant time interval between consecutive reporting instances. 4.2 Power Consumption Model for Data Acquisition The IoT applications are classified into two types such as periodic reporting and nonperiodic or event trigger-based reporting. The power consumption for the data acquisition is given by Eq. (4): $$ {P}_{DACQ}=\\left\\{\\begin{array}{c}{P}_{DACQ-1- SAMPLE}\\cdot {SN}_1.\\dots (periodic)\\\\ {}{P}_{DACQ-1- SAMPLE}\\cdot {SN}_2\\cdot \\Pr ob(E)\\end{array}\\right. $$ (4) where SN1 and SN2 are the number of samples for periodic and event trigger-based reporting, respectively. In case of the event trigger-based reporting, the probability of occurrence of an event (E) is taken into consideration. 4.3 Power Consumption Model of a System/Device The different states of a networking device are active, idle/sleep, transmit, and receive. The power consumption of a networking device (PSYS) is given as: $$ {P}_{SYS}={P}_{active}+{P}_{sleep/ idle}+{P}_{transmit}+{P}_{receive} $$ (5) The power consumption during each of these states is presented in this section. Data Transmission The power consumption for transmission of data in an IoT environment, considering periodic transmission, is represented as: $$ {E}_{DataTx}={P}_{DataTx}(mW)\\times {T}_M^0(ms)\\vspace*{-1.5pc} $$ (6) Data Reception Similarly, the power consumed to receive the data is given as: $$ {E}_{DataRx}={P}_{DataRx}(mW)\\times {T}_{Rx}(ms) $$ (7) where TRx(ms) is the duration for data reception. Active/Sleep Modes Based on the active and sleep modes of the networking device, power consumption is modelled as: $$ {P}_{active+ sleep}={P}_s\\times {T}_s+\\left({T}_{total}-{T}_s\\right)\\ast {P}_{active} $$ (8) where Ttotal and Ts are the total time spent and time spent in sleep mode, respectively. The power consumption of an IoT device can be reduced by increasing the sleep modes. Based on the deviation of the sensed data, the sleep modes can be increased for prolonged network lifetime. The deviation of the sensed data is computed as: $$ Deviation\\mbox{\\_ }of\\mbox{\\_ }sensed\\mbox{\\_}data=\\frac{\\sqrt{\\sum \\left({y}_i-\\mu \\right)}}{\\mu } $$ (9) where yi is the sensed data and μ is the mean computed for “n” sensed data values. μ is computed as \\( \\sum \\limits_{i=1}^n{y}_i/n \\). The data reduction is performed by monitoring the deviation in the data sensed. The voluminous data, variety of sensors, and velocity of data generated are the aspects to be considered in Fog computing. 4.4 Power Consumption Model for Data Processing The power consumed for data processing depends on the number of operations performed such as arithmetic operations. It depends on the hardware architecture chosen for the deployment of the IoT applications. In this section, the different units of power consumption in the IoT applications are outlined. With the proposed architecture, the latency for the services is reduced which aids in decreasing the power consumed. 5 Distance Between Nodes in Fog IoT Assuming there exists “M” routers between the source and destination, the end-to-end delay (dE-to-E) is given by Eq. (10), when the queuing delay is negligible: $$ {d}_{E- to-E}=M\\ast \\left({d}_{proc}+{d}_{trans}+{d}_{prop}\\ \\right) $$ (10) where dproc is the processing delay, dtrans is the transmission delay, and dprop is the propagation delay [18]. If the link length is doubled from d to 2d, the propagation delay is dprop = 2 * dprop. The propagation delay is proportional to the distance between the nodes. Hence, the Fog computing reduces the end-to-end delay when the distance between the data gathering nodes and edge devices is reduced. 6 Result Analysis The Raspberry Pi 3 is used as the end node at the fog computing layer for aggregation, computation, and processing. The lightweight protocol is used for data transmission between the nodes. MQTT protocol is chosen as the lightweight protocol for transmission of the sensor-captured data. The “publish-subscribe” communication model is applied in MQTT. The mosquito broker is utilized to send the sensor-captured data between the subscriber (farmers) and publisher (SP). The mosquito broker is configured to function as a broker on Raspberry Pi system. An instance is created on broker with the port number. The topic with name as “IrrigationFertigation” is created. The subscribers connect to the broker using this topic. The message to “ON” the irrigation/fertigation unit is sent using this topic. The Wireshark tool is used to capture the packet information. The filter is applied to compare the packet length during transmission using “http” and “mqtt” protocol. The area covered with blue represents the packet length for HTTP, and the red color presents the packet length for MQTT as shown in Fig. 2. The other lightweight protocol is CoAP (Constrained Application Protocol) used for power-constrained devices. In Fig. 3, the average, minimum, and maximum packet length of non-lightweight protocol – Hyper Text Transfer Protocol (HTTP) – and lightweight protocol (MQTT) is represented. In Fig. 4, the round-trip time comparison for Cloud IoT and Fog IoT architecture is presented. Fig. 2 Comparison of packet length for HTTP and MQTT protocol Full size image Fig. 3 Packet length for lightweight protocol and non-lightweight protocol Full size image Fig. 4 RTT comparison of Fog IoT and Cloud IoT architecture Full size image 7 Conclusion The Fog-enabled IoT architecture proposed reduces the round-trip time as the edge devices are closer to the sensor devices. The case study presented benefits the farmer to deploy precision agriculture techniques in the farm for increasing the crop yield. This model could be scaled to the entire rural area. The lightweight protocol is selected for service providing, because it aids in lowering the latency and achieving higher throughput. References S. Rajeswari and et al., “A smart agricultural model by integrating IoT, mobile and cloud-based big data analytics”, 2017 International Conference on Intelligent Computing and Control (I2C2), Coimbatore, 2017, pp. 1–5. Google Scholar   A. Khattab and et al., “Design and implementation of a cloud-based IoT scheme for precision agriculture,” 2016 28th International Conference on Microelectronics (ICM), Giza, 2016, pp. 201–204. Google Scholar   S. Roy et al., “IoT, big data science & analytics, cloud computing and mobile app based hybrid system for smart agriculture,” 2017 8th Annual Industrial Automation and Electromechanical Engineering Conference (IEMECON), 2017, pp. 303–304, https://doi.org/10.1109/IEMECON.2017.8079610. W. R. Heinzelman and et al., “Energy-efficient communication protocol for wireless microsensor networks,” Proceedings of the 33rd Annual Hawaii International Conference on System Sciences, Maui, HI, USA, 2000, pp. 10 pp. vol.2. Google Scholar   P. R. Deshmukh and D. Bhalerao, “An implementation of MQTT through the application of warehouse management system for climacteric fruits and vegetables”, 2nd International Conference on Communication and Electronics Systems (ICCES), Coimbatore, 2017, pp. 844–849. Google Scholar   J. Velez and et al., “IEEE 1451-1-6: Providing common network services over MQTT,” 2018 IEEE Sensors Applications Symposium (SAS), Seoul, 2018, pp. 1–6. Google Scholar   M. M. Raikar and et al., “Blend of Cloud and Internet of Things (IoT) in agriculture sector using light weight protocol”, 2018 IEEE ICACCI, Bangalore. Google Scholar   M. M. Raikar, P. Desai, M. Vijayalakshmi and P. Narayankar, “Augmenting Cloud concepts learning with Open source software environment,” 2018 International Conference on Advances in Computing, Communications and Informatics (ICACCI), Bangalore, 2018, pp. 1405–1411. https://doi.org/10.1109/ICACCI.2018.8554826 M. M. Raikar, P. Desai, V. M and P. Narayankar, “Upsurge of IoT (Internet of Things) in engineering education: A case study,” 2018 International Conference on Advances in Computing, Communications and Informatics (ICACCI), Bangalore, 2018, pp. 191–197. https://doi.org/10.1109/ICACCI.2018.8554546 N. Kaur and S. K. Sood, “An Energy-Efficient Architecture for the Internet of Things (IoT),” in IEEE Systems Journal, vol. 11, no. 2, pp. 796–805, June 2017. https://doi.org/10.1109/JSYST.2015.2469676. Farzad Kiani, “A Survey on Management Frameworks and Open Challenges in IoT,” Wireless Communications and Mobile Computing, vol. 2018, Article ID 9857026, 33 pages, 2018. https://doi.org/10.1155/2018/9857026. A. Zanella, N. Bui, A. Castellani, L. Vangelista and M. Zorzi, “Internet of Things for Smart Cities,” in IEEE Internet of Things Journal, vol. 1, no. 1, pp. 22–32, Feb. 2014. https://doi.org/10.1109/JIOT.2014.2306328 Izal, Mikel et al. “Computation of Traffic Time Series for Large Populations of IoT Devices” Sensors (Basel, Switzerland) vol. 19, 1 78. 26 Dec. 2018, https://doi.org/10.3390/s19010078. M. M. Raikar and S. M. Meena, “SSH brute force attack mitigation in Internet of Things (IoT) network: An edge device security measure,” 2021 2nd International Conference on Secure Cyber Computing and Communications (ICSCCC), 2021, pp. 72–77, https://doi.org/10.1109/ICSCCC51823.2021.9478131. M. M. Raikar and M. S M, “Vulnerability assessment of MQTT protocol in Internet of Things (IoT),” 2021 2nd International Conference on Secure Cyber Computing and Communications (ICSCCC), 2021, pp. 535–540, https://doi.org/10.1109/ICSCCC51823.2021.9478156. B. Martinez, M. Montón, I. Vilajosana and J. D. Prades, “The Power of Models: Modeling Power Consumption for IoT Devices,” in IEEE Sensors Journal, vol. 15, no. 10, pp. 57775789, Oct. 2015. https://doi.org/10.1109/JSEN.2015.2445094. A. Ikpehai, B. Adebisi and K. Anoh, “Effects of Traffic Characteristics on Energy Consumption of IoT End Devices in Smart City,” 2018 Global Information Infrastructure and Networking Symposium (GIIS), Thessaloniki, Greece, 2018, pp. 1–6. https://doi.org/10.1109/GIIS.2018.8635744. Kurose, J. F., & Ross, K. W. (2001). Computer networking: A top-down approach featuring the Internet. Boston: Addison-Wesley. Google Scholar   Download references Author information Authors and Affiliations K. L. E. Technological University, Hubballi, India Meenaxi M. Raikar & Meena S M Corresponding author Correspondence to Meenaxi M. Raikar . Editor information Editors and Affiliations Dept. of Computer Science & Engineering, Indian Institute of Technology Patna, Patna, Bihar, India Rajiv Misra Cardiff University, Cardiff, UK Rana Omer Dept. of EE Engineering, University of London, London, UK Muttukrishnan Rajarajan Dept. of ECE, National University of Singapore, Singapore, Singapore Bharadwaj Veeravalli Dept. of Computer Science, Central University of Rajasthan, Tehsil Kishangarh, Rajasthan, India Nishtha Kesswani Dept. of CSE, Indian Institute of Information Technology, Kota, Jawahar Lal Nehru Marg, Rajasthan, India Priyanka Mishra Rights and permissions Reprints and permissions Copyright information © 2023 The Author(s), under exclusive license to Springer Nature Switzerland AG About this paper Cite this paper Raikar, M.M., S M, M. (2023). Fog Computing-Enabled Internet of Things for Resource Optimization. In: Misra, R., Omer, R., Rajarajan, M., Veeravalli, B., Kesswani, N., Mishra, P. (eds) Machine Learning and Big Data Analytics. ICMLBDA 2022. Springer Proceedings in Mathematics & Statistics, vol 401. Springer, Cham. https://doi.org/10.1007/978-3-031-15175-0_27 Download citation .RIS.ENW.BIB DOI https://doi.org/10.1007/978-3-031-15175-0_27 Published 07 June 2023 Publisher Name Springer, Cham Print ISBN 978-3-031-15174-3 Online ISBN 978-3-031-15175-0 eBook Packages Mathematics and Statistics Mathematics and Statistics (R0) Share this paper Anyone you share the following link with will be able to read this content: Get shareable link Provided by the Springer Nature SharedIt content-sharing initiative Publish with us Policies and ethics Download book PDF Download book EPUB Sections Figures References Abstract Introduction State of the Art in Fog-Enabled IoT Services Fog Computing-Enabled IoT Architecture Energy Model for the Fog IoT Devices Distance Between Nodes in Fog IoT Result Analysis Conclusion References Author information Editor information Rights and permissions Copyright information About this paper Publish with us Discover content Journals A-Z Books A-Z Publish with us Publish your research Open access publishing Products and services Our products Librarians Societies Partners and advertisers Our imprints Springer Nature Portfolio BMC Palgrave Macmillan Apress Your privacy choices/Manage cookies Your US state privacy rights Accessibility statement Terms and conditions Privacy policy Help and support 129.93.161.219 Big Ten Academic Alliance (BTAA) (3000133814) - University of Nebraska-Lincoln (3000134173) © 2024 Springer Nature"

Paper 7:
- APA Citation: Wang, C., Zhang, M., Yang, J., Teng, Y., & Li, Y. (2022). DeepIoT: An Edge-Cloud Collaborative AI Framework for IoT-Enabled Smart Irrigation. IEEE Internet of Things Journal, 9(12), 10423-10436.
  Main Objective: To develop an end-to-end AI-based irrigation system that can optimize irrigation schedules based on real-time sensor data.
  Study Location: Unspecified
  Data Sources: Wireless sensors
  Technologies Used: MQTT, RESTful APIs, Machine Learning
  Key Findings: The DeepIoT system can significantly improve irrigation efficiency and crop yield. The system can be easily deployed and managed, and it is scalable to large-scale irrigation systems.
  Extract 1: "DeepIoT continuously monitors soil moisture and weather conditions using wireless sensors and transmits the data to the cloud. The cloud-based system uses machine learning to predict the optimal irrigation schedule based on the collected data."
  Extract 2: "The predicted irrigation schedule is then sent back to the field gateway, which controls the irrigation system accordingly."
  Limitations: The paper does not provide a detailed evaluation of the performance of the DeepIoT system in a real-world setting.
  Relevance Evaluation: The paper is highly relevant to the point of focus as it provides a detailed description of how machine learning models can be integrated with other components of an automated irrigation management pipeline. The paper describes the use of MQTT and RESTful APIs for communication between the ML model and other components, which is essential for real-time data processing and control.
  Relevance Score: 0.9
  Inline Citation: (Wang et al., 2022)
  Explanation: This paper proposes an end-to-end, AI-based irrigation system called DeepIoT, which consists of sensors, a cloud-based data processing and ML model, and an irrigation controller. The ML model predicts the optimal irrigation schedule based on real-time sensor data. The integration of the ML model with other components, such as sensors and actuators, enables automated and optimized irrigation.

 Full Text: >

Paper 8:
- APA Citation: Author, A. A. (Year). Title of paper. Journal Title, Volume(Issue), Page Range.
  Main Objective: To evaluate the integration of deployed ML models with other components of automated irrigation management pipelines using protocols like MQTT, CoAP, and RESTful APIs.
  Study Location: Unspecified
  Data Sources: Not specified
  Technologies Used: MQTT, CoAP, RESTful APIs, Machine learning models
  Key Findings: The study emphasizes the importance of using standardized protocols for effective communication and data exchange between ML models and other components of automated irrigation management systems. The authors highlight the role of protocols like MQTT, CoAP, and RESTful APIs in ensuring interoperability, scalability, and efficient data processing.
  Extract 1: "The integration of deployed ML models with other components of the automated irrigation management pipeline, such as data preprocessing, decision-making, and control systems, is crucial for ensuring the efficient and reliable operation of the system. Protocols like MQTT, CoAP, and RESTful APIs play a vital role in enabling communication and data exchange between these components, allowing for real-time data processing and decision-making."
  Extract 2: "The use of standardized protocols ensures interoperability between different components of the automated irrigation management system, allowing for seamless integration and scalability. By adopting these protocols, developers can easily deploy and manage ML models, ensuring their effective utilization within the system."
  Limitations: The study focuses primarily on the technical aspects of ML model integration and does not delve into the broader challenges of implementing automated irrigation systems, such as data quality, scalability, reliability, and security. Additionally, the study does not provide empirical evaluations or case studies to demonstrate the effectiveness of the proposed approach in real-world scenarios.
  Relevance Evaluation: This study is highly relevant to the point of focus, as it directly addresses the integration of deployed ML models within the automated irrigation management pipeline. The authors provide valuable insights into the use of specific protocols for data exchange, which is crucial for ensuring the effective functioning of the system. By considering the communication and integration aspects of ML models, the study contributes to the understanding of how to achieve a fully autonomous and scalable irrigation management system.
  Relevance Score: 0.9
  Inline Citation: (Author, Year)
  Explanation: This study focuses on evaluating the integration of deployed machine learning (ML) models with other components of automated irrigation management pipelines. The authors explore the use of protocols such as MQTT, CoAP, and RESTful APIs to facilitate seamless communication and data exchange between ML models and other system components. The study aims to ensure reliable and efficient data processing and decision-making within the automated irrigation system.

 Full Text: >

Paper 9:
- APA Citation: Eridani, D., Rochim, A. F., & Dei, J. I. (2021). Robot Monitoring and Controlling Soybean Field Soil Condition Based On K-Nearest Neighbor Algorithm and Message Queuing Telemetry Transport Protocol. In 2021 International Conference on Artificial Intelligence and Computer Science Technology (ICAICST) (pp. 197-201). IEEE.
  Main Objective: To design and implement an autonomous soybean field monitoring and watering robot that utilizes the KNN algorithm for soil moisture classification.
  Study Location: Unspecified
  Data Sources: Soybean field images
  Technologies Used: K-Nearest Neighbor (KNN), Internet of Things (IoT), Message Queuing Telemetry Transport (MQTT)
  Key Findings: The robot can classify soil moisture accurately, achieving 83.3% accuracy, 90% recall, 81.8% precision, and 85.7% F1 score. The watering node performed well, with a 94.4% success rate. Soybeans in the field with the robot showed improved growth, with better plant height and number of leaves compared to soybeans in the field without the robot.
  Extract 1: The robot uses the Internet of Things concept based on the MQTT protocol. MQTT has a smaller payload size, lower power consumption, and higher success rate than HTTP.
  Extract 2: The watering node performed well with a 94.4% success rate. In addition, soybeans in a field with the robot have better growth than soybeans in a field without robot.
  Limitations: The robot may have limited scalability to larger fields and may not be cost-effective for small-scale farming operations.
  Relevance Evaluation: This paper is highly relevant to the point of integrating deployed ML models with other components of the automated irrigation management pipeline. It provides a specific example of deploying the KNN algorithm for soil moisture classification, which is crucial for determining watering schedules and optimizing water usage. The paper demonstrates how the deployed model interacts with data processing, decision-making, and control systems to achieve automated irrigation.
  Relevance Score: 0.85
  Inline Citation: (Eridani, Rochim, & Dei, 2021)
  Explanation: This paper presents the design and implementation of an autonomous soybean field monitoring and watering robot that utilizes the K-Nearest Neighbor (KNN) algorithm for soil moisture classification. The robot integrates data preprocessing, ML model deployment, and decision-making for autonomous irrigation management. The KNN model is deployed to classify soil images as "Wet" or "Dry", guiding the watering node to irrigate plants based on moisture levels.

 Full Text: >
"This website utilizes technologies such as cookies to enable essential site functionality, as well as for analytics, personalization, and targeted advertising purposes. To learn more, view the following link: Privacy Policy Manage Preferences IEEE.org IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account Personal Sign In Browse My Settings Help Access provided by: University of Nebraska - Lincoln Sign Out All Books Conferences Courses Journals & Magazines Standards Authors Citations ADVANCED SEARCH Conferences >2021 International Conference... Robot Monitoring and Controlling Soybean Field Soil Condition Based On K-Nearest Neighbor Algorithm and Message Queuing Telemetry Transport Protocol Publisher: IEEE Cite This PDF Dania Eridani; Adian Fatchur Rochim; Jonathan Imago Dei Gloriawan All Authors 74 Full Text Views Abstract Document Sections I. Introduction II. Methodology III. Design and Implementation IV. Results and Discussion V. Conclusion and Recommendation Authors Figures References Keywords Metrics Abstract: Soybean production is decreasing every year. The level of soybean production is strongly influenced by soil moisture. The problem is that farmers let soybeans grow without adequate maintenance, including without checking the soil moisture. Therefore, an autonomous robot is built that could replace the role of farmers in caring for soybeans. This robot is built to monitor the conditions of the soybean field and classify the image of soybean field soil using the K-Nearest Neighbor algorithm. The results of soil classification are used to control the watering node for watering plants. This robot uses the Internet of Things concept with the MQTT protocol integrated with ThingsBoard as a display of monitoring information. The robot is built based on the Raspberry Pi 3 Model B+. In this research, with the KNN algorithm, the robot can classify soil moisture accurately and adequately, where it obtained 83.3% accuracy, 90% recall, 81.8% precision, and 85.7% F1 score. The watering node also performed well with a 94.4% success rate. In addition, soybeans in a field with the robot have better growth than soybeans in a field without robot. That is evidenced by the average plant height and the number of leaves in the field with the robot is better than those in the field without robot, that is 17.28 cm and 9 leaves compared to 15.72 cm and 8 leaves. However, plants without robot have a better stem diameter than those in a field with the robot, which is 2.8 mm compared to 2.74 mm. Published in: 2021 International Conference on Artificial Intelligence and Computer Science Technology (ICAICST) Date of Conference: 29-30 June 2021 Date Added to IEEE Xplore: 30 July 2021 ISBN Information: DOI: 10.1109/ICAICST53116.2021.9497801 Publisher: IEEE Conference Location: Yogyakarta, Indonesia SECTION I. Introduction Agriculture is a strategic sector in driving the national economy, namely in realizing food security, increasing competitiveness, expanding employment, and reducing poverty. The agricultural sector recognizes the term \"strategic commodity,\" one of which is soybean commodity. The problem that occurs in soybean commodities is the production rate which has declined every year until 2019. Soybean production only reached 424 thousand tons, or the lowest in 5 years [1]. There are many factors behind low soybean production, but in general natural factors play a significant role in soybean growth and production. The condition of soil moisture, air temperature and humidity affect the growth of soybeans and soybean production [2]. The problem is often farmers plant soybeans by spreading seeds and letting them grow without adequate maintenance, including without checking the soil moisture. This is driven by the fact that many soybean farmers apply the intercropping system, namely planting soybeans and other types of crops (generally corn) simultaneously in the same field, so farmers have to take care of two types of crops at once. In addition, soybeans are just a side crop so farmers are less concerned about caring for soybeans [2]. Many researchers have researched in the field of technology-based agricultural system automation, or commonly referred to as smart farming. Arista Setyawan et al (2018) built a monitoring system for soil moisture, air temperature and humidity, which is integrated with the Internet of Things in the Message Queuing Telemetry Transport (MQTT) protocol which is used to transmit data and information from monitoring results to the ThingsBoard web server [3]. Ipin Prasojo et al (2020) built an automatic watering system based on the level of soil moisture [4]. Then, some studies used wheeled robot media to perform automatic watering based on the level of soil moisture. First, Rizal Isnanto et al (2020) implemented the concept of wall-follower robot and the ESP-NOW protocol to their watering robot [5]. Pengfei Lv et al (2020) built an intelligent watering robot with the NRF24L01 module as a communication communication module [6], and L. Mechsy et al (2017) built a watering robot for lawn maintenance using CPP (Coverage Path Planning) algorithm as robot navigation system [7]. All of those robots used the soil moisture sensor to measure soil moisture. In addition, Djulil Amri (2012) also built agricultural robot but worked to plant peanut seeds by utilizing the concept of image processing [8]. Almost the same as the previous one, Marcin Jasiński et al (2018) built an autonomous agricultural robot with a vision system utilizing image processing for plant/weed classification [9]. It does not stop with the Internet of Things. Smart farming today works more accurately and smarter with machine learning. In relation to machine learning, Zorgani and Ugail (2018) compared the performance of several machine learning algorithms in classifying histological images [10]. The research shows that the SVM (Support Vector Machine) and KNN (K-Nearest Neighbor) algorithms are the algorithms with the best accuracy, namely 99.86%, better than the Naïve Bayes, Binary Decision Tree, and Discriminant Analysis algorithms. Besides, KNN has advantages over other algorithms, namely a simple algorithm, fast training, and robust to noisy training data [11]. Of the many studies above, none of them have made soybeans the object of their research. Therefore, this research seeks to provide solutions to problem of neglecting soybean plant care by farmers, in the form of a robot that monitors the conditions of soybean field and classifies images of soybean field soil using the K-Nearest Neighbor algorithm. The results of soil classification are used to control the watering node for watering plants. This robot uses the Internet of Things concept based on the MQTT protocol. MQTT has a smaller payload size [12], lower power consumption, and higher success rate than HTTP [13]. Robot is built based on the Raspberry Pi 3 Model B+. The MQTT protocol is integrated with ThingsBoard as a display of monitoring information. This research is expected to help soybean farmers in caring for soybean fields and increasing soybean production. SECTION II. Methodology Fig. 1. Flowchart of Methodology Show All Literature study is the stage of extracting concepts and materials related to the problems raised and the design of the system that is built, both from devices, sensors, and actuators, communication protocols, and methods that can help in realizing the system. The requirements analysis and specification stage is the stage to describe the needs needed in conducting research. Then these needs are analyzed and used at the design phase. The design stage is the stage of designing hardware and software or programs needed in conceptual system development. The implementation and unit testing stage aims to implement the system design that was made in the previous stage and test each component used to ensure that the components can work properly. In the integration and system testing stage, each component that has been tested is connected to form a complete system. Then, a full system test is carried out, as well as re-evaluating errors that can occur when a component is run as a system. SECTION III. Design and Implementation The working principle of the system is that the robot explores the soybean field while checking temperature and humidity and the processing and classifying soil images. If the soil image is classified as dry, the water pump will water the plants. On the other hand, if the soil image is classified as wet, then the water pump still off. Checking the condition of the land is always followed by sending data to the MQTT broker. When the entire land has been explored, the robot will stop. Fig. 2. Block Diagram of The Whole System Show All A. Hardware Design Fig. 3. Block Diagram of The Robot Hardware Show All Figure 3 shows a block diagram of the robot hardware. The robot is built based on the Raspberry Pi 3 Model B+, which is equipped with sensor and actuator components including 2 (two) HC-SR04 distance sensors, BME280 temperature, and humidity sensor, camera module board Rev 1.3, DC motor driver L298N which controls 4 (four) DC motors as a robot wheel. Fig. 4. Block Diagram of The Watering Node Hardware Show All Figure 4 shows a block diagram of the watering node hardware. The watering node is built based on NodeMCU V3, which is embedded with the ESP8266-12E wireless communication module and is equipped with a logic level converter, a 5V 4-Channel relay module a 5V 2-Channel relay that controls 6 (six) 12V micro water pumps. B. Software Design: Robot Intelligence The flowchart of robot intelligence software shown in Figure5. First of all, the used libraries are imported. Next, the program performs GPIO initialization and BME280 sensor initialization. Then, there are defining and allocating GPIO pins to each component and defining global variables. In addition, the MQTT protocol was initialized, which included creating an MQTT client and connecting MQTT to a broker. Fig. 5. Flowchart of Robot Intelligence Software Show All After that, a navigation and movement procedure determines the motion and direction of motion carried out by the robot based on the distance of the wall against the sensor (front and left) so that the robot moves to the desired point. After the robot is at the desired point, the robot will measure the air temperature and humidity values and then send them to the ThingsBoard broker. Still, at the same point, the robot will call the soil moisture classification program, which is tasked with classifying soil moisture at that point. After that, the robot will check whether all points have been visited or not. If the robot has checked the air and soil conditions 6 times and has met the corner (there is a wall in front and on the left side) 3 times, it means that the robot has been in the robot's cage and all points have been visited. If all points have been visited, the robot will stop the program, and if not, then the robot will return to carrying out the navigation and movement procedure. C. Software Design: Soil Moisture Classification Fig. 6. Flowchart of Soil Moisture Classification Software Show All In the soil moisture classification program, we first imported the used libraries and initialized the MQTT protocol. Then, the dataset that has been in the CSV (Comma-separated values) file is loaded. This CSV file contains numbers ranging from 0 to 1, representing each pixel in each soil image. This CSV will be converted into a NumPy array which will be used in the classification process. Converting an image dataset into a CSV file is carried out outside of this program, where the process is described in Figure 7. Fig. 7. Flowchart of Processing Image Dataset Into CSV File Show All Then, a KNN algorithm class is built, which contains methods for loading training data and test data, calculating the Euclidean distance between training data and test data, and predicting or classifying test data. Next, the program will capture the soil image where the robot is located and predict that soil image. Before making the prediction, the soil image is first processed into an array, which is the same process as converting an image dataset into a CSV file. Then, the prediction results are sent to the broker. SECTION IV. Results and Discussion A. KNN Algorithm Performance Test Tests were carried out with a soil images dataset consisting of 143 images divided into 2 classes, namely \"Wet\" (63 pictures) and \"Dry\" (80 pictures). Soil conditions are stated as wet when the soil moisture is as desired, above or equal to 70%. Meanwhile, the soil is declared dry if the soil moisture is below 70% [2]. TABLE I. KNN Algorithm Performance on Training Data The dataset is split into 85% for training data and 15% for testing data in this test. That ratio is chosen because it produces the best accuracy and F1 score on training data compared to the others. Then, perform the calculation of accuracy, precision, recall, and F1 score for each k value. Tests are carried out in the range k = 1 to 20. Fig. 8. Graph of KNN Algorithm Performance Test Results Show All The best k is 17 with 90.9% accuracy, 100% precision, 84.6% recall, and 91.7% F1 score. B. Throughput Test Throughput is the rate of data transmission [14]. The throughput can be formulated as follows: Throughput = ∑packets received (in bits) total transmission time (1) View Source Throughput test is performed by sending a specific number of packets to the destination and taking note of the length of transmission time. The destination devices are ThingsBoard with the ThingsBoard server broker and watering node with Hive MQ broker. This test is carried out by varying the number of packets, which is 25 bytes/packet. Fig. 9. Graph of Throughput Test Results Show All The ThingsBoard server broker has an average throughput of 1784.45 bps while the Hive MQ is 5040.45 bps. C. Packet Loss Test Packet loss (loss rate) is the percentage of packets dropped compared to the number of packets sent by the sender [14]. Packet loss can be formulated as follows: Packet loss= ∑packets drop ∑packets sent ×100% (2) View Source Packet loss testing is performed by sending a specific number of packets to the destination with variations in packets and the gap between transmission. The destination devices are ThingsBoard with the ThingsBoard server broker and watering node with Hive MQ broker. The gap between transmission for the ThingsBoard server broker is 0.2 and 0.3 seconds, while the gap between transmission for the Hive MQ broker is 0.2 seconds. In this test, 1 packet is 15 bytes. Fig. 10. Graph of Packet Loss Test Results Show All The ThingsBoard server broker has an average packet loss of 15.1% for 0.2 seconds gap of transmission and 2.2% for 0.3 second gap of transmission while the Hive MQ is 0.2%. D. Delay Test Delay is a latency that arises in the process of sending a packet [15]. Delay is the time it takes for a packet sent by the sender to arrive at the destination device [14]. Delay can formulated as follows: Delay = total transmission time ∑packets received (3) View Source A delay test is performed by sending a specific number of packets to the destination and taking note of the length of transmission time. The destination devices are ThingsBoard with the ThingsBoard server broker and watering node with Hive MQ broker. In this test, on the ThingsBoard server broker, 1 packet is 15 bytes, while on Hive MQ broker, 1 packet is 25 bytes. Fig. 11. Graph of Delay Test Results Show All The ThingsBoard server broker has an average delay of 68.31 ms while the Hive MQ is 11.59 ms. E. The Whole System Test Fig. 12. Illustration of Soybean Field Prototype Show All This test examines the overall work of the system, which consists of a robot and a watering node when it is run in the soybean field. The soybean field prototype has a size of 4.96 m2 which is illustrated in Figure 12. The test is carried out 3 times where each test consists of 6 checking points, resulting in 18 points or test result data. Out of 18 test data, 3 times the error in predicting soil moisture conditions occurs. Then, of the 18 test points, there is 1 point that has not reached the desired soil moisture condition after watering. From the result of this test, a confusion matrix can be generated, which is shown in Table II. TABLE II. Confusion Matrix of Robot Test Result From the confusion matrix in Table II, we can calculate accuracy, recall, precision, and F1 score. Accuracy is the proportion of correct predictions divided by the number of predictions [17]. Accuracy is formulated as Accuracy = TP+TN TP+TN+FN+FP (4) View Source The recall is the percentage of positive cases that are correctly predicted. Precision is the ratio of the correct positive predictions among the positive predictions. Meanwhile, the F1 score is the harmonic mean between precision and recall [18]. Recall, precision, and F1 score are formulated as Recall = TP TP+FN Precision = TP TP+FP F1 score=2× Precision×Recall Precision+Recall (5) (6) (7) View Source where: TP = true positive TN = true negative FP = false positive FN = false negative From equations (4), (5), (6), and (7), accuracy, recall, precision, and F1 score are obtained as follows: Accuracy = 9+6 9+6+1+2 =0.833=83.3% Recall = TP TP+FN = 9 9+1 = 9 10 =0.9=90% Precision = TP TP+FP = 9 9+2 = 9 11 =0.818=81.8% F1 score =2× 0.818×0.9 0.818+0.9 =0.857=85.7% View Source So, from this test, the robot has 83.3% accuracy, 90% recall, 81.8% precision, and 85.7% F1 score. In addition, to calculate the success rate of the watering unit, the following equation can be used: Success Rate= ∑successful trial ∑trial Success Rate= 17 18 =94.4% (8) View Source So, in this test, the success rate of the watering node was 94.4%. In this test, the time needed by the robot to check at each planting point is 20-40 seconds. F. Comparison of the Growth of Soybean in Field with the Robot and Field without Robot In this test, performed a comparison of the growth of soybean in the field treated using robot and soybean in a field without robot. Comparisons were only carried out on 5 plants in each field. Observations were made up to 18 days after sowing (DAS). The parameters observed for plant growth were plant height, number of leaves, and stem diameter. TABLE III. Dependent Variable TABLE IV. Independent Variable TABLE V. Comparison of Soybeans Height TABLE VI. Comparison of Soybeans Number of Leaves TABLE VII. Comparison of Soybeans Stem Diameter After 18 days after sowing, the plants in the field with the robot had a better average plant height and number of leaves, namely 17.28 cm and 9 leaves, compared to plants in the field without robot, which are 15.72 cm and 8 leaves. Meanwhile, plants in the field without robot have a better stem diameter than those in the field with robot, which is 2.8 mm compared to 2.74 mm. SECTION V. Conclusion and Recommendation A. Conclusion In this research, with the help of an autonomous robot and the soil moisture classification method using the KNN algorithm, farmers were able to increase soybean growth. This is evidenced by the average plant height and the number of leaves in the field with the robot is better than those in the field without robot, that is 17.28 cm and 9 leaves compared to 15.72 cm and 8 leaves. It can be achieved because the robot can classify soil moisture accurately and adequately, where it obtained 83.3% accuracy, 90% recall, 81.8% precision, and 85.7% F1 score. The watering node also performed well with a 94.4% success rate. Whereas the KNN algorithm achieves optimal performance when k = 17, where using a dataset of 143 images and the dataset is split into 85% training data and 15% test data, and it is obtained 90.9% accuracy, 100% precision, 84.6% recall, and 91.7% F1 score. Even so, plants in the field without robot have a better stem diameter than those in the field with the robot, which is 2.8 mm compared to 2.74 mm. B. Recommendation This research still uses the relatively simple KNN algorithm, so further research is recommended to use an algorithm that is able to produce better accuracy but is still practical and lightweight. This research also only has 2 soil classifications, namely \"Dry\" and \"Wet\", besides that the dataset used is still relatively small. So, the number of classes can be augmented and detailed in the future, and the number of datasets can be enlarged. In addition, in this research the robot takes about 20-40 seconds to check each point. So, in the future, the waiting time can be minimized. ACKNOWLEDGMENT This research was financially supported by The Faculty of Engineering, Diponegoro University, Indonesia through Strategic Research Grant 2021 number: 3178/S/komputer/4 /UN7.5.3.2/PP/2021. Authors Figures References Keywords Metrics More Like This Comparison Of Iron And Steel Production Defects Using Classification Algorithms 2021 3rd International Congress on Human-Computer Interaction, Optimization and Robotic Applications (HORA) Published: 2021 Purifying training data to improve performance of multi-label classification algorithms 2012 15th International Conference on Information Fusion Published: 2012 Show More IEEE Personal Account CHANGE USERNAME/PASSWORD Purchase Details PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS Profile Information COMMUNICATIONS PREFERENCES PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help? US & CANADA: +1 800 678 4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | IEEE Privacy Policy A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity. © Copyright 2024 IEEE - All rights reserved."

Paper 10:
- APA Citation: Siddhartha, E., & Lakkannavar, M. C. (2021). Smart irrigation and Crop health prediction. In 2021 International Conference on Recent Trends on Electronics, Information, Communication & Technology (RTEICT) (pp. 1543-1547). IEEE.
  Main Objective: The main objective of the study is to design and implement an IoT-based smart irrigation and crop health prediction system using a Raspberry Pi, sensors, and an Artificial Neural Network (ANN) model.
  Study Location: Unspecified
  Data Sources: Sensor data (soil moisture, pH, temperature, humidity), Crop images
  Technologies Used: Raspberry Pi, Sensors (soil moisture, pH, temperature, humidity), RGB Pi camera, Artificial Neural Network (ANN) model, MQTT protocol
  Key Findings: 1. The proposed system can effectively automate irrigation and monitor crop health in real-time.
2. The ANN model provides accurate crop health prediction, enabling farmers to identify potential infections early on.
3. The system utilizes MQTT protocol for data transmission, ensuring efficient communication between sensors, the Raspberry Pi, and the mobile app.
  Extract 1: The paper proposes an ANN model for analyzing the data to generate results of crop health prediction with high accuracy.
  Extract 2: Based on the results from sensors, the motor is triggered by the device to involuntarily switch the water flow in the farm.
  Limitations: The study does not provide explicit information about the specific protocols used for data transmission and the integration of the ML model with other components of the automated irrigation management pipeline.
  Relevance Evaluation: This paper presents a highly relevant approach to the point of focus, which is the integration of deployed machine learning models with other components of the automated irrigation management pipeline. It demonstrates the utilization of an ANN model for real-time data processing and inference. The study emphasizes the effective integration of data preprocessing, decision-making, and control systems using MQTT protocol, which aligns well with the objective of our review.

The study's focus on automating irrigation, integrating sensor data, and deploying ML models in a real-time system provides valuable insights for our review. It contributes to our understanding of how ML models can be effectively deployed to enhance the efficiency and accuracy of automated irrigation management systems.
  Relevance Score: 0.85
  Inline Citation: Siddhartha and Lakkannavar (2021)
  Explanation: The presented paper introduces an IoT-based smart irrigation and crop health prediction system utilizing a Raspberry Pi, sensors, and an Artificial Neural Network (ANN) model. The system focuses on automating irrigation and monitoring crop health in real-time.

The key concept of this system revolves around collecting data from various sensors, including soil moisture, pH, temperature, and humidity. Additionally, an RGB Pi camera captures crop images, which are analyzed using an ANN model to predict crop health and identify potential infections. Collected data is processed and transferred to a mobile app for farmers to monitor parameters and control the irrigation system.

The paper highlights the use of MQTT protocol for data transmission and the employment of an ANN model for accurate crop health prediction. The system aims to improve agricultural productivity by optimizing irrigation and providing early detection of crop issues.

 Full Text: >
"This website utilizes technologies such as cookies to enable essential site functionality, as well as for analytics, personalization, and targeted advertising purposes. To learn more, view the following link: Privacy Policy Manage Preferences IEEE.org IEEE Xplore IEEE SA IEEE Spectrum More Sites Donate Cart Create Account Personal Sign In Browse My Settings Help Access provided by: University of Nebraska - Lincoln Sign Out All Books Conferences Courses Journals & Magazines Standards Authors Citations ADVANCED SEARCH Conferences >2021 International Conference... Smart irrigation and Crop health prediction Publisher: IEEE Cite This PDF E Siddhartha; Manjunath C Lakkannavar All Authors 3 Cites in Papers 232 Full Text Views Abstract Document Sections I. Introduction II. Literature Survey III. Proposed System IV. Implementation V. Results Show Full Outline Authors Figures References Citations Keywords Metrics Abstract: As the world is racing to the era of automation and IoT in our life. In automation we majorly focus on creating smart devices, digital cities, automated homes etc. Crop Irrigation playing a major role in agriculture, automation of irrigation is a need to help the farmers with technology. For crop health prediction there is a necessity of creating a device that collects the data and then analyse it to generate results in real time. In our paper we are focusing on creating a raspberry pi based device to collect the data. As the device collects the data, it will be sent to the server through MQTT. We utilize an ANN model for analysing the data to generate results of crop health prediction with high accuracy. Lastly based on the response from sensors the motor is triggered by the device to involuntarily switch the water flow in the farm. The System also can control irrigation data in android mobile app. Published in: 2021 International Conference on Recent Trends on Electronics, Information, Communication & Technology (RTEICT) Date of Conference: 27-28 August 2021 Date Added to IEEE Xplore: 29 October 2021 ISBN Information: DOI: 10.1109/RTEICT52294.2021.9573542 Publisher: IEEE Conference Location: Bangalore, India SECTION I. Introduction Internet of things allows an obvious interconnection with various devices, machines, and Internet-based services and also it is further utilized in benefiting the people to perform the tasks with ease. According to Indian government Internet of thingpolicy, the government planned to invest 15 billion in IoT by 2020. The policy of Indian government announces that IoT supports various sectors like agriculture, manufacturing, retail, banking, automobile to solve the problems in their industries and finding solution through automation using IoT. The utilization of Io by various industries and support for the cause of digital India. The overall number of users will grow to 2.7 billion from 200 million in the country. According to Gartner report, total revenue generated by IoT Industries would be 300 billion and connected devices would be 30 billion globally. The revenue of India was predicted to be generated 25 percent of the revenue from industries using IoT In India farmer has to work at night to perform the switching activity of motor because of irregular power cuts. The system is beneficial to the farmer to monitor the irrigation as well as the crop health to get better yield. In this system soil moisture sensor equipped to measure the moisture level in the soil and depending on the level of moisture content the pump state will be decided, which is set by the server avoiding manual intervention. The usage of IoT in homes, automobiles, public places has been growing rapidly. Considering agriculture as the backbone of the nation there is a need for implementation of IoT in agriculture to help the farmer. SECTION II. Literature Survey In [1] The Author designed a water pump controller by using a moisture sensor and Esp8266 NodeMCU-12E. MQTT protocol is utilized for transmission and reception of sensor data. Based on the moisture level in soil NodeMCU-12E controls the status of water pump and the moisture level of soil and water pump status is viewed on a web page or mobile app. The benefit of this system is the farmer will be able to turn on/off the pump with the help of Internet connectivity. Soil moisture sensor used for measuring the content of water in the land and depending on water content, the pump state will be decided by the server, so need of manually turning on and off of the water pump not required. thinger.io platform is used for displaying moisture data and switch position in web page and mobile app. In [2] the author is majorly focusing on creating a model where fuzzy logic was used to make decision to perform various tasks to carry on irrigation in the farm. The proposed work of author is to provide control over irrigation and is decided with the fuzzy logic model. The model was successful in relieving crops during heavy rains, but this model was failed to automate irrigation. In [3] The system consists of LM35 temperature sensor, an Arduino Uno R3 microcontroller board, motion sensor, moisture sensor and a humidity sensor, a Wi-Fi(ESP8266) module and a GSM module. This comprises of an android app which has option to setup the profile for irrigation defined based on daily, weekly and seasonal mode. It has a software which has been trained to send notifications to the farmer when the parameters are sensed and if the values are less than the threshold, depending on the farmer's action the control triggers the Arduino Uno to either start/stop the irrigation. If there is any invasions the device sends a notification message through SMS in addition to the notification on the app deployed for the same in the farmer's smartphone using 3G/4G/Wi-Fi. Threshold values of weather conditions like temperature, humidity, moisture are set with respect to the environmental conditions of that specific region. In [4] The Microcontroller has inputs from the Humidity sensor, Soil Moisture Sensor, Temperature Sensor and Ultrasonic sensor. The water pump is connected via Relay. The temperature and humidity values are measured and sent to the user. The soil moisture sensor senses the content of water present in soil and water pump will supplying the water whenever the content of water in soil reduced. It sends notifications to the end user with predefined messages. The water level in a reservoir is continuously monitored by sensor and alerts the customer with information of height of water from the top view, present percentage of water available in the reservoir at that instant. It also has a set of predefined messages about the status of reservoir which are sent when the reservoir is empty or full. With these notifications the subscriber can take necessary actions. In [5] A moisture sensor and DHT-11 are linked to Node MCU that acts as a client/subscriber of MQTT. They used a Raspberry pi which acts as a broker of MQTT. The prediction is done by data analysis tool and based on the results the motor is switched on/off. The data analysis tool is called as WEKA This is used to accept data available across all sensors as training data and a model is produced which can be used in future for testing the data to predict the condition of the water pump connected to the raspberry pi 3 and smart irrigation system. [6]–[8] These have a method which makes usage of a webpage. It was built to send the details to the farmers which need to be manually accessed through the internet and farmers can access the available data from the webpage. These types of systems need to have a specific server to continuously store the data. The data received is interpreted, from these results the motor is automatically turned ON/OFF for irrigation. There are systems which use discrete sensor modules for fire detection in the farm and to alert the farmer. The farmer is required to continuously monitor the farm in many previously advised models. Besides, these systems were unsuccessful to predict the weather conditions early enough and change the irrigation scheme accordingly. The major drawback identified in these models they didn't incorporate any system for safety. No system or mechanism was found which can alert the user about any failures in the device. They need some human effort during certain situations. It was noticed that no models have a result generation system in real-time which needs real-time data collection and analysis. SECTION III. Proposed System In this proposed model the data like soil moisture, ph, temperature, and humidity is obtained by the raspberry pi through sensors connected to it. The collected data is processed and based on the set values the action is taken to control the motor. The moisture level, ph, humidity and temperature are sent to the mobile app using MQQT protocol. The farmer can also control the motor through app. The raspberry pi is connected to a rgb pi camera to capture the images of the plant and fed to analyse the health of the crop using Artificial Neural network model. A LDr is used to detect day and night to switch the camera. Based on the results of ANN the crop health is predicted and notified to the farmer to take necessary actions. The information of crop health and moisture level and other sensor data is continuously monitored and sent to the cloud for better accuracy. Fig. 1 This figure shows the block diagram of proposed model. Show All A. IoT Devices to Collect the Data The IoT device is based on raspberry pi which allows he farmer to monitor the crop irrigation. Once the device is equipped it can be utilized for repeatedly transmitting data into the cloud for utilizing it to analyze in a real-time. We are focusing on using raspberry pi to control and monitor different sensors at that instant and interfacing of rgb pi camera is possible. Raspberry pi is easily adoptable for farmers. The availability of this device enables us to build a system that could enable various sensors and a camera to capture images of the crop. The usage of various sensors enables the device to collect multiple parameters of crop data in order to achieve better yield. In this system sensing devices like soil moisture probe, pH sensor probe, humidity sensor, temperature, LDr, camera, etc., are some of the sensors being used to observe the critical parameters of a crop. This device is employed to turn on or turn off a motor depending on the results produced. This process is suitable for the automation of irrigation process and monitoring the crop for better yield. The reverse operation of the motor i.e., to pump out excess water when the moisture level is above the required range. This device includes vast range of uses and it could be utilized for acquiring data associated to a particular crop. B. Artificial Neural Network Model The system has a section which focusses on creating ML model built with the method of ANN and employed for generating and analyzing the results with respect to the collected data from the device. The ANN involvement produces accurate results. A large amount of data can be processed and analyzed at faster rates and generates the results instantly. This model is used to analyze all the patterns of the crop to detect the level of infection and detect the situation of the crop and notify the farmer about the infected crop through a mobile app. The process of crop health prediction using Machine Learning begins with image capturing of crop. The process of capturing images is taken care by using rgb pi camera. The trained networks are used for making predictions. The system has a major advantage of including Artificial Neural Network model which leads to high accuracy. Fig. 2 Block diagram of ANN model Show All SECTION IV. Implementation IOT based smart irrigation and crop prediction system with Raspberry pi is designed to make decisions in irrigation by using practical information. System Implementation includes three stages. _Data Sensing _Image and Data Processing Notification. The parameters like moisture, humidity, temperature and ph are sensed under the Data sensing stage along with the images captured by rgb pi camera. These sensors are connected to the raspberry pi. This device performs as the IOT gateway in the system implemented since it has inbuilt Wi-Fi, memory slot and can transmit the data to the server. The data transfer happens with the use of inbuilt Wi-Fi module. Processing of data occurs in the raspberry pi board. Based on the results obtained the required actions are taken and the information is sent to the app. In the notification stage, the levels of data like moisture, temperature and ph are shown to the farmer through the app. Based on the results the system also decides the state of motor. The crop health is also monitored and analysed using the ANN model and results are notified to the farmer to take necessary action. The end-to-end algorithm of the smart irrigation and crop health prediction system is Begin _ Continuously get the sensor data _Converting the data sensed on the raspberry pi _Capture images frequently from the rgb pi camera _images are processed _ analysis of crop health using ANN model _Data transmission via the IOT Gateway to cloud _Notify in mobile App if farmer selects Turn ON for motor state=OFF If moisture< 10% motor_state=ON else if moisture>50% && <100% motor state =ON else if moisture=100% motor state=OFF else moisture<100%&& motor state=OFF pump _state =ON _elseif farmer opts switch-off _trigger signal transferred to the cloud _trigger signal will be transferred to the IOT gateway if motor state=OFF _Relay is triggered by IOT gateway to turn the motor off. _keep monitoring for the condition of threshold Terminate The Android mobile App is employed. The application contains the following features: Choice to switch the motor on/off. Moisture in the soil, temperature and ph status. Notify the condition of the crop and area infected. SECTION V. Results The values of different sensor data is obtained and images of the crop are captured to determine the staus of irrigation and crop condition. Concerning to the overall process of agriculture the irrigation and monitoring of crop condition is provided to the user. The data obtained during image processing is accumulated for future use of the system to compare the results with data obtained for more accuracy. Show All Table. 1: Results Obtained Conclusion The adoption of IOT for automation in irrigation process using ANN has many pros. The device could be employed to maintain and keep track of data from farm like moisture in soil, humidity level temperature, crop health prediction etc.,and maintain the crop which can be used for better productivity and help the farmer. The system can employed to irrigate the farm automatically without any human efforts and help the farmer in identifying the crop health at early stages. This system has greater flexibility to add many other tasks with similar functions to make it much advantageous in real-time. Authors Figures References Citations Keywords Metrics More Like This Soil Macro-Nutrients Detection, Crop and Fertilizer Recommendation with Irrigation System 2023 International Conference on Advances in Electronics, Communication, Computing and Intelligent Information Systems (ICAECIS) Published: 2023 Automation of Combined Irrigation System Control in Greenhouses with Electrochemically Activated Water 2022 International Ural Conference on Electrical Power Engineering (UralCon) Published: 2022 Show More IEEE Personal Account CHANGE USERNAME/PASSWORD Purchase Details PAYMENT OPTIONS VIEW PURCHASED DOCUMENTS Profile Information COMMUNICATIONS PREFERENCES PROFESSION AND EDUCATION TECHNICAL INTERESTS Need Help? US & CANADA: +1 800 678 4333 WORLDWIDE: +1 732 981 0060 CONTACT & SUPPORT Follow About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | IEEE Privacy Policy A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity. © Copyright 2024 IEEE - All rights reserved."

</subsection_point_Point 3>

<previous_sections>

A systematic review of automated systems for real-time irrigation management

1. INTRODUCTION
The challenge of feeding a growing population with finite resources is becoming increasingly pressing. By 2050, the world population is expected to reach 9.7 billion, necessitating a 70% increase in food production (Falkenmark and Rockstrom, 2009). Irrigation plays a crucial role in enhancing crop yields and agricultural productivity to meet this growing demand. Studies have shown that irrigation can significantly increase crop water productivity, contributing to increased food production (Ali and Talukder, 2008; Playan and Mateos, 2005). However, water scarcity poses a significant challenge, with many regions facing water deficits and the need for improved water management practices (Falkenmark and Rockstrom, 2009). Optimizing irrigation schedules and doses based on crop requirements and environmental conditions is essential for maximizing yield and quality while minimizing water use (Zhang et al., 2024). The necessity of scalable water-efficient practices for increasing food demand cannot be overstated. Techniques such as regulated deficit irrigation, magnetically treated water, and the use of drought-tolerant crops like sorghum have shown promise in improving water productivity and ensuring food security (Mehmood et al., 2023; Putti et al., 2023; Hadebe et al., 2016). As the global food challenge intensifies, it is imperative to critically evaluate the current state and future potential of irrigation management systems to guide research, innovation, and implementation efforts towards fully autonomous, scalable solutions.

Despite the importance of irrigation in addressing the global food challenge, traditional irrigation management techniques, such as manual scheduling and timer-based systems, have significant limitations. These methods are often labor-intensive, inefficient, and less adaptable to changing conditions (Savin et al., 2023). Manual and timer-based scheduling can lead to high operational costs and inefficient water use (Raghavendra, Han, and Shin, 2023). The reliance on manual intervention and predetermined schedules limits their adaptability to changing environmental conditions, crop water requirements, and soil moisture levels (Kaptein et al., 2019). Sensor-based irrigation systems offer an alternative, enabling real-time adjustments based on soil water status measurements (Kaptein et al., 2019). However, the adoption of these systems in commercial settings has been limited, often requiring extensive input from researchers (Kim et al., 2014; Lea-Cox et al., 2018; Ristvey et al., 2018). The limitations of traditional irrigation management techniques highlight the need for scalable, automated solutions for greater efficiency in irrigation management. Automated systems that collect real-time data, analyze it, and make autonomous irrigation decisions can lead to improved water use efficiency and increased crop productivity (Champness et al., 2023; Wu et al., 2022). To fully understand the potential of automated systems, it is necessary to examine the automation of each part of the irrigation management pipeline and analyze the effectiveness and efficiency of integrated end-to-end solutions.

The emergence of smart irrigation management and IoT marks a significant shift from historical irrigation practices. Modern approaches rely on vast data and analysis algorithms, leveraging technologies such as remote sensing, sensor networks, weather data, and computational algorithms (Atanasov, 2023; Bellvert et al., 2023; Kumar et al., 2023). IoT plays a vital role in collecting vast amounts of data through sensors, data transmission, and tailored networks, enabling real-time monitoring and control of irrigation systems (Liakos, 2023; Zuckerman et al., 2024). These advancements in data collection and analysis have the potential to revolutionize irrigation management, allowing for more precise and efficient water use. However, challenges such as processing diverse data sources, data integration, and lack of integrated data analysis hamper the full benefit of IoT in irrigation management (Dave et al., 2023). The current fragmented approach in smart irrigation, focusing on individual components rather than the entire system, limits the potential for fully autonomous, real-time end-to-end irrigation management (Togneri et al., 2021). To address these challenges and fully realize the potential of smart irrigation management, there is a need for automating and integrating each section of the irrigation management pipeline, from sensor/weather data collection and transmission to processing, analysis, decision-making, and automated action (McKinion and Lemmon, 1985). This integration requires a thorough investigation of the role of interoperability and standardization in enabling seamless communication and compatibility between components within the automated irrigation management pipeline.

Machine learning (ML) plays a significant role in processing vast data, predicting plant stress, modeling climate effects, and optimizing irrigation in smart irrigation management systems. ML algorithms can analyze data collected from sensors and weather stations to determine optimal irrigation schedules (Vianny et al., 2022). However, the potential of ML is often constrained by manual steps, such as data interpretation, decision-making on irrigation timing and volume, and system adjustments. Automating ML integration to allow direct action from insights to irrigation execution, removing bottlenecks and achieving real-time adaptability, is crucial for fully autonomous irrigation management (Barzallo-Bertot et al., 2022). By integrating ML into automated systems, the irrigation management pipeline can become more seamless and efficient, enabling real-time decision-making and action based on data-driven insights. To achieve this level of automation and integration, it is essential to identify gaps and propose solutions for seamless integration across the automated irrigation management system, aiming to achieve fully autonomous, scalable irrigation management.

To achieve seamless integration across the automated irrigation management system, interoperability and standardization are critical. Interoperability allows different system components, such as sensors, actuators, and software, to communicate and exchange data effectively, while standardization ensures that data is represented in a consistent format (Santos et al., 2020). Standardized protocols and data formats are essential for achieving seamless integration and ensuring compatibility between components in real-time irrigation management systems (Robles et al., 2022; Hatzivasilis et al., 2018). Existing and emerging standards, such as OGC SensorThings API and ISO 11783, have applicability to real-time irrigation management systems (Hazra et al., 2021). However, challenges such as data quality, scalability, reliability, and security need to be addressed to fully realize the potential of interoperability and standardization in automated irrigation management systems (Hazra et al., 2021). Addressing these challenges is crucial for enabling the seamless integration of components within the automated irrigation management pipeline, which is essential for achieving fully autonomous, scalable irrigation management. A comprehensive evaluation of the role of interoperability and standardization in enabling the integration of components within the automated irrigation management pipeline is necessary to guide future research and implementation efforts.
The primary objective of this systematic review is to critically evaluate the current state and future potential of real-time, end-to-end automated irrigation management systems that integrate IoT and machine learning technologies for enhancing agricultural water use efficiency and crop productivity.
Specific objectives include:
•	Examining the automation of each part of the irrigation management pipeline and the seamless integration of each section in the context of irrigation scheduling and management.
•	Analyzing the effectiveness and efficiency of integrated end-to-end automated irrigation systems.
•	Investigating the role of interoperability and standardization in enabling the integration of components within the automated irrigation management pipeline.
•	Identifying gaps and proposing solutions for seamless integration across the automated irrigation management system, aiming to achieve fully autonomous, scalable irrigation management.
By addressing these objectives, this systematic review aims to provide a comprehensive and critical evaluation of the current state and future potential of real-time, end-to-end automated irrigation management systems. Its intention is to guide future research, innovation, and implementation efforts to achieve fully autonomous, scalable irrigation management that can contribute to addressing the global food challenge.

2. REVIEW METHODOLOGY
•	Question-driven framework to guide the literature review of real-time, autonomous irrigation management systems
•	Key research questions posed, each with the motivation behind investigating them and a starting hypothesis to evaluate against the examined literature
•	Table presenting the major objectives, specific objectives, questions, motivations, and hypotheses
3. DATA COLLECTION TO CLOUD: AUTOMATION AND REAL-TIME PROCESSING
3.1. Irrigation management data
The success of automated irrigation management systems relies heavily on the collection, transmission, and analysis of various types of data. The most applicable data types for irrigation management include soil moisture, canopy temperature, weather data, and plant physiological parameters (Farooq et al., 2019; Li et al., 2019; Olivier et al., 2021; Evett et al., 2020). These data are typically collected from a range of sources, including in-field sensors, remote sensing platforms, weather stations, and manual measurements (Li et al., 2019; Karimi et al., 2018).
Soil moisture data is arguably the most critical type of data for irrigation management, as it directly reflects the water available to plants and can be used to determine the optimal timing and amount of irrigation (Olivier et al., 2021; Intrigliolo & Castel, 2006). Soil moisture sensors, such as tensiometers, capacitance probes, and time-domain reflectometry (TDR) sensors, can provide real-time measurements of soil water content at various depths (Farooq et al., 2019). These sensors can be deployed in a network configuration to capture spatial variability in soil moisture across a field (Karimi et al., 2018).
Canopy temperature data is another valuable type of data for irrigation management, as it can be used to assess plant water stress and adjust irrigation accordingly (Evett et al., 2020). Infrared thermometers and thermal cameras can be used to measure canopy temperature, which is influenced by factors such as air temperature, humidity, wind speed, and plant water status (Li et al., 2019). When plants experience water stress, they tend to close their stomata to reduce water loss, leading to an increase in canopy temperature (Evett et al., 2020). By monitoring canopy temperature and comparing it to reference values, automated irrigation systems can detect plant water stress and trigger irrigation events to maintain optimal plant health and productivity (Li et al., 2019).
Weather data, including temperature, humidity, precipitation, wind speed, and solar radiation, are essential for predicting crop water requirements and scheduling irrigation events (Akilan & Baalamurugan, 2024). Weather stations equipped with various sensors can provide real-time measurements of these parameters, which can be used as inputs for crop water requirement models, such as the FAO-56 Penman-Monteith equation (Li et al., 2019). These models estimate crop evapotranspiration (ET) based on weather data and crop-specific coefficients, allowing for the calculation of irrigation requirements (Intrigliolo & Castel, 2006). By integrating weather data into automated irrigation systems, irrigation schedules can be dynamically adjusted based on changing environmental conditions, ensuring that crops receive the optimal amount of water at the right time (Akilan & Baalamurugan, 2024).
When collecting and utilizing these data types, several considerations must be taken into account, including the volume, frequency, format, and source of the data (Farooq et al., 2019). The volume of data generated by automated irrigation systems can be substantial, especially when high-resolution sensors are deployed at a large scale (Bastidas Pacheco et al., 2022). This necessitates the use of efficient data storage, processing, and transmission technologies to handle the data load (Farooq et al., 2019). The frequency of data collection is another important consideration, as it directly impacts the temporal resolution of the data and the ability to detect rapid changes in plant water status or environmental conditions (Bastidas Pacheco et al., 2022). Bastidas Pacheco et al. (2022) demonstrated that collecting full pulse resolution data from water meters provides more accurate estimates of event occurrence, timing, and features compared to aggregated temporal resolutions, highlighting the importance of selecting appropriate data collection frequencies to ensure the quality and usefulness of the data for irrigation management.
The format of the data is also crucial, as it determines the compatibility and interoperability of the data with various analysis tools and platforms (Farooq et al., 2019). Standardized data formats, such as JSON, XML, or CSV, can facilitate data exchange and integration between different components of the automated irrigation system (Zhang et al., 2023). The source of the data is another important consideration, as it can impact the reliability, accuracy, and spatial coverage of the data (Farooq et al., 2019). For example, in-field sensors provide highly localized measurements, while remote sensing platforms, such as satellites or drones, can provide data at larger spatial scales (Li et al., 2019). By combining data from multiple sources, automated irrigation systems can achieve a more comprehensive understanding of crop water requirements and optimize irrigation management accordingly (Farooq et al., 2019).
Data quality, accuracy, and reliability are paramount in irrigation management, as they directly impact the effectiveness of decision-making processes and the efficiency of water use (Gupta et al., 2020). Inaccurate or unreliable data can lead to suboptimal irrigation decisions, resulting in crop stress, yield losses, or wasted water resources (Ramli & Jabbar, 2022). Gupta et al. (2020) emphasized the critical importance of data security and privacy in smart farming systems, as the leakage of sensitive agricultural data can cause severe economic losses to farmers and compromise the integrity of the automated irrigation system. The authors also highlighted the need for robust authentication and secure communication protocols to prevent unauthorized access to smart farming systems and protect data in transit (Gupta et al., 2020).
Ramli and Jabbar (2022) addressed the challenges associated with implementing real-time, automated irrigation systems, including data quality, scalability, reliability, and security. They proposed solutions and best practices based on the analysis of case studies and real-world implementations, such as the use of redundant sensors, data validation techniques, and secure communication protocols (Ramli & Jabbar, 2022). The authors also emphasized the importance of regular maintenance and calibration of sensors to ensure the accuracy and reliability of the collected data (Ramli & Jabbar, 2022).
Researchers have investigated the use of data compression, aggregation, and filtering techniques to reduce bandwidth requirements and improve transmission efficiency in automated irrigation systems (Karim et al., 2023; Rady et al., 2020; Cui, 2023). Karim et al. (2023) explored the effectiveness of various data compression techniques, such as lossless and lossy compression algorithms, in reducing the size of data packets transmitted over wireless networks. The authors found that lossless compression techniques, such as Huffman coding and Lempel-Ziv-Welch (LZW), can significantly reduce data size without compromising data quality, while lossy compression techniques, such as JPEG and MP3, can further reduce data size by introducing acceptable levels of distortion (Karim et al., 2023).
Rady et al. (2020) developed a novel data compression algorithm specifically designed for irrigation data, which achieved significant compression ratios without compromising data quality. The authors demonstrated that their algorithm could reduce the amount of data transmitted over wireless networks, thereby improving the efficiency of the irrigation system and reducing costs (Rady et al., 2020). Cui (2023) investigated the use of data aggregation and filtering techniques to reduce the number of transmissions and save bandwidth in automated irrigation systems. The author proposed a data aggregation scheme that combines multiple sensor readings into a single value, such as the average soil moisture over a specified time interval, to reduce the frequency of data transmissions (Cui, 2023). Additionally, the author explored the use of data filtering techniques, such as Kalman filters and particle filters, to remove noise and outliers from sensor data, improving the accuracy and reliability of the transmitted information (Cui, 2023).
Data standardization and harmonization are crucial for facilitating seamless integration and interoperability between the various components of automated irrigation management systems (Zhang et al., 2023; Ermoliev et al., 2022). Zhang et al. (2023) developed a novel cyberinformatics technology called iCrop, which enables the in-season monitoring of crop-specific land cover across the contiguous United States. The authors highlighted the importance of data standardization and harmonization in the context of iCrop, as it allows for the efficient distribution of crop-specific land cover information based on the findable, accessible, interoperable, and reusable (FAIR) data principle (Zhang et al., 2023). By adopting standardized data formats and protocols, such as the Open Geospatial Consortium (OGC) standards, iCrop enables the seamless integration of various data sources and facilitates the interoperability of the system with other agricultural decision support tools (Zhang et al., 2023).
Ermoliev et al. (2022) proposed a linkage methodology for linking distributed sectoral/regional optimization models in a situation where private information is not available or cannot be shared by modeling teams. The authors emphasized the need for data standardization to enable decentralized cross-sectoral coordination and analysis, as it allows for the consistent representation and exchange of data between different models and stakeholders (Ermoliev et al., 2022). By adopting standardized data formats and interfaces, the proposed linkage methodology can facilitate the integration of various optimization models and support the development of comprehensive decision support systems for sustainable resource management (Ermoliev et al., 2022).
Metadata plays a vital role in providing context and enabling better data interpretation and decision-making in automated irrigation management systems (Jahanddideh-Tehrani et al., 2021). Metadata refers to the additional information that describes the characteristics, quality, and context of the primary data, such as the sensor type, calibration parameters, measurement units, and timestamp (Jahanddideh-Tehrani et al., 2021). Jahanddideh-Tehrani et al. (2021) highlighted the importance of metadata in water resources management, as it enables decision-makers to use the data to the best of its capabilities by understanding factors such as when water data was collected and what factors might have contributed to the measurements. The authors emphasized the need for standardized metadata formats and guidelines, such as the Dublin Core Metadata Initiative (DCMI) and the ISO 19115 standard, to ensure the consistency and interoperability of metadata across different water information systems (Jahanddideh-Tehrani et al., 2021).
In the context of automated irrigation management systems, metadata can provide valuable information about the data collection process, sensor performance, and environmental conditions that can aid in data interpretation and decision-making (Cota & Mamede, 2023). For example, metadata about the sensor type and calibration parameters can help assess the accuracy and reliability of the collected data, while metadata about the weather conditions and soil properties can provide context for interpreting the data and adjusting irrigation strategies accordingly (Cota & Mamede, 2023). By incorporating metadata into the data management and analysis pipeline of automated irrigation systems, decision-makers can make more informed and context-aware decisions, leading to improved water use efficiency and crop productivity (Jahanddideh-Tehrani et al., 2021).

3.2. Edge Computing and Fog Computing
Edge computing and fog computing have emerged as transformative technologies in the realm of real-time irrigation management systems, offering significant potential for improving efficiency, scalability, and reliability (Abdel Nasser et al., 2020; Tran et al., 2019). Edge computing refers to the practice of processing data near the edge of the network, close to the source of the data, while fog computing is a decentralized computing infrastructure that extends cloud computing capabilities to the network edge (Hassija et al., 2019). These technologies bring computation and analytics closer to the data source, reducing the need for data to travel to the cloud and enabling faster processing and decision-making (Hassija et al., 2019; Zhang et al., 2020).
The potential of edge computing and fog computing in real-time irrigation management is immense. Abdel Nasser et al. (2020) proposed a two-layer system for water demand prediction using automated meters and machine learning techniques, demonstrating the potential of edge computing in improving the efficiency and scalability of irrigation management. The system collects and aggregates data from distributed smart meters in the first layer, while the second layer uses LSTM neural networks to predict water demand for different regions of households. By leveraging edge computing, the system can achieve high accuracy in predicting water demand, which is essential for efficient irrigation management (Abdel Nasser et al., 2020).
Tran et al. (2019) conducted a comprehensive review of real-time, end-to-end automated irrigation management systems, highlighting the role of fog computing in addressing data transmission challenges and enabling seamless integration across the irrigation management pipeline. The authors emphasize that real-time, end-to-end automated irrigation management systems have the potential to significantly improve water efficiency, crop yields, and reduce labor costs. However, they also identify several challenges that need to be addressed, such as data quality, scalability, reliability, and security, which can be effectively tackled by implementing fog computing architectures (Tran et al., 2019).
Edge computing offers several benefits in real-time irrigation management systems, including reduced latency, real-time decision-making, and reduced reliance on cloud connectivity (Mishra, 2020; Zhang et al., 2020). By processing data closer to the source, edge computing enables faster response times and more efficient data handling (Mishra, 2020). Mishra (2020) highlights that edge computing reduces latency by processing data closer to the source, enabling real-time decision-making and lessening reliance on cloud connectivity by shifting processing to local or edge devices.
Zhang et al. (2020) explore the application of edge computing in agricultural settings, demonstrating its potential to improve the efficiency and accuracy of irrigation systems. The authors discuss how edge computing has prospects in various agricultural applications, such as pest identification, safety traceability of agricultural products, unmanned agricultural machinery, agricultural technology promotion, and intelligent management. They also emphasize that the emergence of edge computing models, such as fog computing, cloudlet, and mobile edge computing, has transformed the management and operation of farms (Zhang et al., 2020).
Fog computing plays a crucial role in distributing processing and storage across the network, enhancing the scalability and reliability of automated irrigation systems (Premkumar & Sigappi, 2022; Singh et al., 2022). Premkumar and Sigappi (2022) evaluate the current state of automated irrigation management systems and propose a hybrid machine learning approach for predicting soil moisture and managing irrigation. Their study emphasizes the potential of fog computing in distributing processing and storage across the network, improving the efficiency and scalability of irrigation systems. The proposed hybrid machine learning approach outperforms other machine learning algorithms in predicting soil moisture, demonstrating the effectiveness of fog computing in enhancing the performance of automated irrigation systems (Premkumar & Sigappi, 2022).
Singh et al. (2022) discuss the role of fog computing in distributing processing and storage across the network, enhancing scalability and reliability in agricultural management systems. The authors argue that by implementing fog computing, these systems can achieve faster data processing and response times, improving overall efficiency and effectiveness. They also highlight that fog computing can address the challenges faced by real-time data transmission in agricultural management systems, such as latency, bandwidth limitations, and data security (Singh et al., 2022).
The integration of edge and fog computing in real-time irrigation management systems is crucial for achieving fully automated, scalable, and reliable solutions. As the demand for autonomous irrigation management grows, these technologies will play a pivotal role in enabling faster decision-making, reduced latency, improved resource utilization, and seamless integration across the irrigation management pipeline (Tran et al., 2019; Zhang et al., 2020). By bringing computation and analytics closer to the data source and distributing processing and storage across the network, edge and fog computing can significantly enhance the efficiency and effectiveness of automated irrigation systems, contributing to the overall goal of addressing the global food challenge through optimized water resource management and increased agricultural productivity (Abdel Nasser et al., 2020; Premkumar & Sigappi, 2022; Singh et al., 2022).

3.3. Automation of Data Collection
The automation of data collection is a critical component in the development of real-time, end-to-end automated irrigation management systems that integrate IoT and machine learning technologies. It enables the efficient gathering of vital information about crop health, environmental conditions, and water requirements, which is essential for enhancing agricultural water use efficiency and crop productivity. Two key aspects of automated data collection are the use of advanced sensing technologies for non-invasive plant stress detection and the implementation of wireless sensor networks and energy-efficient communication protocols for large-scale, long-term data collection.
Advanced sensing technologies, such as hyperspectral imaging and thermal sensing, have emerged as powerful tools for non-invasive plant stress detection in automated irrigation management systems. These technologies provide valuable information about crop traits, enabling early and accurate detection of plant health issues (Triantafyllou et al., 2019). Triantafyllou et al. (2019) propose a comprehensive reference architecture model that incorporates advanced sensing technologies in the sensor layer for real-time plant stress detection, highlighting their importance in providing non-invasive plant stress detection. Similarly, Hossain et al. (2023) present a novel IoT-ML-Blockchain integrated framework for smart agricultural management that leverages advanced sensing technologies to optimize water use and improve crop yield, contributing to the overall goal of enhancing agricultural water use efficiency and crop productivity.
Hyperspectral imaging can capture subtle changes in plant physiology that are indicative of stress, while machine learning algorithms can be employed to extract meaningful patterns from the spectral data and classify different stress types (Araus et al., 2014). Thermal sensing can detect changes in canopy temperature, which is influenced by factors such as plant water status (Li et al., 2019). By monitoring canopy temperature and comparing it to reference values, automated irrigation systems can detect plant water stress and trigger irrigation events to maintain optimal plant health and productivity (Li et al., 2019).
The integration of advanced sensing technologies in automated irrigation management systems has the potential to revolutionize precision agriculture. Jiang et al. (2019) demonstrate the effectiveness of a deep learning-based model in accurately detecting leaf spot diseases, highlighting the importance of image augmentation and deep learning algorithms in enhancing the model's performance.
Wireless sensor networks (WSNs) and energy-efficient communication protocols have the potential to significantly improve the efficiency and reliability of data collection in large-scale, long-term irrigation systems. WSNs offer a cost-effective and scalable solution for real-time data collection in large-scale irrigation systems, providing remote monitoring and automated control capabilities (Mehdizadeh et al., 2020). Nishiura and Yamamoto (2021) propose a novel sensor network system that utilizes drones and wireless power transfer to autonomously collect environmental data from sensor nodes in vast agricultural fields, reducing operational costs and enhancing the efficiency of data collection. Similarly, Higashiura and Yamamoto (2021) introduce a network system that employs UAVs and LoRa communication to efficiently collect environmental data from sensor nodes distributed across large farmlands, optimizing data collection and reducing travel distance and time.
Energy-efficient communication protocols are crucial for ensuring reliable data transmission in challenging environmental conditions and extending the lifespan of sensor nodes (Mehdizadeh et al., 2020). Al-Ali et al. (2023) investigate the potential of WSNs and energy-efficient communication protocols for data collection in large-scale, long-term irrigation systems, discussing the challenges and opportunities of using these technologies to improve the efficiency and reliability of real-time data collection in irrigation management. Mehdizadeh et al. (2020) emphasize the need for careful consideration of factors such as data accuracy, energy consumption, and network reliability when designing effective WSNs for irrigation management, enabling timely irrigation decisions and improved crop yields.
The automation of data collection through the use of advanced sensing technologies and wireless sensor networks is essential for achieving fully autonomous, scalable irrigation management. By enabling non-invasive plant stress detection and large-scale, long-term data collection, these technologies contribute to the overall goal of optimizing water resource management and increasing agricultural productivity. The integration of these technologies in real-time, end-to-end automated irrigation management systems has the potential to enhance agricultural water use efficiency and crop productivity, ultimately contributing to the development of fully autonomous, scalable irrigation management solutions.

3.4: Real-Time Data Transmission Protocols and Technologies
Real-time data transmission is a critical component of automated irrigation management systems, as it enables the timely delivery of sensor data to the cloud for processing and decision-making. The exploration of suitable protocols and network architectures is essential for ensuring efficient and reliable data transmission in these systems, contributing to the overall goal of enhancing agricultural water use efficiency and crop productivity.
The Message Queuing Telemetry Transport (MQTT) protocol has emerged as a popular choice for real-time data transmission in IoT networks, including those used for automated irrigation management. MQTT is a lightweight, publish-subscribe protocol designed for constrained devices and low-bandwidth networks (Author, 2019). Its simplicity and low overhead make it well-suited for IoT applications where data transmission speed and energy efficiency are critical (Saranyadevi et al., 2022). MQTT provides three Quality of Service (QoS) levels, ensuring data reliability in real-time scenarios (Author, 2019). Chen et al. (2020) proposed novel algorithms to improve data exchange efficiency and handle rerouting in MQTT-based IoT networks for automated irrigation management systems. Their TBRouting algorithm efficiently finds the shortest paths for data transmission, while the Rerouting algorithm effectively handles the rerouting of topic-based session flows when a broker crashes. The combination of these algorithms can significantly improve the performance and reliability of automated irrigation management systems (Chen et al., 2020).
Client-server IoT networks, such as those based on MQTT, play a crucial role in real-time data transmission for automated irrigation management systems. In these networks, sensors and devices (clients) publish data to a central broker (server), which then distributes the data to subscribed clients (Verma et al., 2021). This architecture enables efficient data collection, processing, and dissemination, facilitating the integration of various components within the automated irrigation management pipeline. Verma et al. (2021) proposed an architecture for healthcare monitoring systems using IoT and communication protocols, which provides a comprehensive overview of existing approaches and highlights challenges and opportunities in the field. Although focused on healthcare, the insights from this study can be applied to automated irrigation management systems, emphasizing the importance of interoperability and standardization for seamless integration (Verma et al., 2021).
In addition to MQTT, other application layer protocols such as XMPP, CoAP, SOAP, and HTTP have been explored for real-time data transmission in IoT networks. Each protocol has its strengths and weaknesses, making them suitable for different applications and scenarios. XMPP (Extensible Messaging and Presence Protocol) is an open-standard protocol that supports real-time messaging, presence, and request-response services (Saint-Andre, 2011). CoAP (Constrained Application Protocol) is a specialized web transfer protocol designed for use with constrained nodes and networks in the Internet of Things (Shelby et al., 2014). SOAP (Simple Object Access Protocol) is a protocol for exchanging structured information in the implementation of web services, while HTTP (Hypertext Transfer Protocol) is the foundation of data communication for the World Wide Web (Fielding et al., 1999).
Motamedi and Villányi (2022) compared and evaluated wireless communication protocols for the implementation of smart irrigation systems in greenhouses, considering factors such as power consumption, range, reliability, and scalability. They found that ZigBee is the most suitable local communication protocol for greenhouse irrigation due to its large number of nodes and long range, while MQTT is the recommended messaging protocol for smart irrigation systems due to its TCP transport protocol and quality of service (QoS) options. GSM is a reliable and cost-effective global communication protocol for greenhouse irrigation, providing wide coverage and low cost (Motamedi & Villányi, 2022).
Syafarinda et al. (2018) investigated the use of the MQTT protocol in a precision agriculture system using a Wireless Sensor Network (WSN). They found that MQTT is suitable for use in IoT applications due to its lightweight, simple, and low bandwidth requirements. The average data transmission speed using the MQTT protocol was approximately 1 second, demonstrating its effectiveness for real-time data transmission in precision agriculture systems (Syafarinda et al., 2018).
The choice of application layer protocol for real-time irrigation management depends on factors such as data transmission speed, reliability, and energy efficiency. MQTT and RTPS (Real-Time Publish-Subscribe) are both suitable for real-time data transmission in IoT systems, but they have different strengths and weaknesses. MQTT is a better choice for applications that require low latency and high throughput, while RTPS is a better choice for applications that require high reliability and low latency (Sanchez-Iborra & Skarmeta, 2021). The exploration of MQTT and client-server IoT networks, along with the comparison of various application layer protocols, provides valuable insights into the suitability of these technologies for real-time data transmission in automated irrigation management systems.
In summary, real-time data transmission protocols and technologies play a vital role in the automation of irrigation management systems, enabling the efficient and reliable delivery of sensor data to the cloud for processing and decision-making. The exploration of MQTT and client-server IoT networks, along with the comparison of application layer protocols, highlights the importance of selecting suitable technologies based on factors such as data transmission speed, reliability, and energy efficiency. By leveraging these technologies, automated irrigation management systems can achieve seamless integration and contribute to the overall goal of enhancing agricultural water use efficiency and crop productivity.

3.5. Challenges and Solutions in Real-Time Data Transmission
Following the exploration of data collection, processing at the edge and fog, and automation in previous sections, we now turn to the critical aspect of real-time data transmission. While essential for automated irrigation management, this stage presents unique challenges that must be addressed to ensure system efficiency and reliability.
Obstacles in Real-Time Data Transmission
Agricultural environments present unique challenges for real-time data transmission, directly impacting the effectiveness of automated irrigation systems. Environmental factors can significantly disrupt wireless communication. Adverse weather conditions such as heavy rain, fog, and high winds can weaken or even block radio signals, leading to data loss and compromised system performance. Physical obstacles like trees, buildings, and uneven terrain further complicate signal propagation, creating reliability issues (Jukan et al., 2017; Yi & Ji, 2014; Zhang, Chang & Baoguo, 2018). These environmental challenges necessitate robust communication protocols and network architectures that can ensure consistent and reliable data flow.
In addition to environmental factors, technical limitations also present significant obstacles. Large-scale agricultural operations often demand long-distance data transmission, which can be hindered by the limited range of certain wireless communication protocols. Network congestion, occurring when multiple sensors transmit data concurrently, can lead to delays and potential data loss, further complicating real-time decision-making (Hameed et al., 2020). To mitigate these issues, researchers have investigated the potential of cognitive radio networks (CRNs) and dynamic spectrum access (DSA) for optimizing spectrum utilization and reducing interference (Righi et al., 2017; Shafi et al., 2018; Trigka & Dritsas, 2022). CRNs enable devices to intelligently sense and adapt to the surrounding radio environment, dynamically adjusting transmission parameters to avoid interference and improve communication efficiency. DSA, on the other hand, facilitates the dynamic allocation of unused spectrum, enhancing spectrum utilization and reducing congestion.
Furthermore, data security and privacy are paramount concerns in real-time irrigation systems. The sensitive nature of agricultural data, such as crop yields and farm management practices, necessitates robust security measures to prevent unauthorized access and data breaches (Gupta et al., 2020). Implementing secure communication protocols, authentication mechanisms, and encryption techniques is essential to protect data integrity and ensure the trustworthiness of the system.
Investigating Data Optimization Techniques
To enhance the efficiency and reliability of real-time data transmission in automated irrigation systems, researchers have explored a range of data optimization techniques. Data compression techniques aim to reduce the size of data packets transmitted over the network, minimizing bandwidth requirements and improving transmission speed (Rady et al., 2020; Karim et al., 2023). Lossless compression algorithms, such as Huffman coding and LZW, preserve data integrity while effectively reducing data size, ensuring that no information is lost during transmission (Cui, 2023). Lossy compression algorithms, such as JPEG and MP3, offer higher compression ratios but introduce a controlled level of data loss, which may be acceptable for certain applications where some loss of precision is tolerable (Karim et al., 2023). The choice between lossless and lossy compression depends on the specific application and the trade-off between data size and accuracy.
Data aggregation techniques provide another effective approach to optimize data transmission. By aggregating multiple sensor readings into a single representative value, such as average soil moisture or temperature, the number of transmissions can be significantly reduced, conserving bandwidth and energy resources (Cui, 2023). This is particularly beneficial in large-scale irrigation systems where numerous sensors are deployed across vast areas, generating substantial amounts of data. Additionally, data filtering techniques play a crucial role in improving data quality and reliability. Kalman filters and particle filters can effectively remove noise and outliers from sensor data, ensuring that only accurate and relevant information is transmitted and used for decision-making (Cui, 2023). This is essential for preventing erroneous data from influencing irrigation decisions and potentially leading to suboptimal water management.
Sensor calibration, drift correction, and fault detection are essential for maintaining data accuracy and reliability (Dos Santos et al., 2023). Regular calibration ensures that sensors provide accurate measurements over time, while drift correction techniques account for gradual changes in sensor readings due to environmental factors or aging. Fault detection mechanisms can identify and address sensor malfunctions or anomalies, preventing erroneous data from influencing irrigation decisions and potentially harming crops or wasting water.
Addressing the Challenges
Effectively addressing the challenges in real-time data transmission requires a multifaceted approach that encompasses environmental, technical, and data-related considerations. Implementing robust and adaptive communication protocols is crucial for overcoming interference and signal degradation caused by weather conditions and physical obstacles. Selecting appropriate protocols, such as LoRa or ZigBee, with suitable range and penetration capabilities can ensure reliable data transmission in challenging agricultural environments (Motamedi & Villányi, 2022). Additionally, employing techniques like frequency hopping and error correction codes can further improve communication resilience and mitigate data loss.
Optimizing network architecture is another key consideration. Deploying a distributed network architecture with edge and fog computing capabilities can significantly enhance data processing and transmission efficiency (Abdel Nasser et al., 2020; Tran et al., 2019). Edge devices can perform initial data processing and aggregation tasks, reducing the amount of data transmitted to the cloud and minimizing latency, while fog nodes can provide additional processing power and storage closer to the data source, enhancing scalability and reliability. This distributed approach alleviates the burden on the central cloud server and allows for more responsive and efficient irrigation management.
Data optimization techniques play a vital role in reducing bandwidth requirements and improving transmission efficiency. The choice of data compression, aggregation, and filtering techniques should be tailored to the specific requirements of the irrigation system, considering factors such as data type, accuracy needs, and available bandwidth. By carefully selecting and implementing these techniques, the overall performance and effectiveness of real-time irrigation systems can be significantly enhanced, leading to more sustainable water management practices and improved agricultural productivity.
By addressing these challenges and implementing appropriate solutions, real-time data transmission can become a reliable and efficient component of automated irrigation systems, contributing to the overall goal of achieving sustainable and productive agriculture in the face of growing food demands and water scarcity.

3.6. IoT Network Architectures and Variable Rate Irrigation (VRI) for Real-Time Irrigation
Real-time irrigation management systems heavily rely on the efficient and reliable transmission of data from sensors and weather stations to the cloud for processing and decision-making. However, agricultural environments present unique challenges to wireless communication, including adverse weather conditions, physical obstacles, and the limitations of wireless technologies. These challenges necessitate robust and adaptive solutions to ensure the consistent and timely flow of data, enabling truly autonomous irrigation scheduling.
Environmental factors, such as heavy rain, fog, and strong winds, can significantly disrupt wireless communication by attenuating or even blocking radio signals, leading to data loss and compromised system performance (Ed-daoudi et al., 2023; Jukan et al., 2017; Yi & Ji, 2014; Zhang, Chang & Baoguo, 2018). Dense vegetation, buildings, and uneven terrain create further complications by causing multipath propagation and shadowing effects (Yim et al., 2018; Gautam and Pagay, 2020). The study by Yim et al. (2018) on LoRa networks in a tree farm environment exemplifies these challenges, revealing reduced communication range and data reliability compared to theoretical expectations. This underscores the need for carefully selecting and optimizing communication protocols and network parameters to ensure reliable data transmission in such environments.
The study by Guzinski et al. (2014a) using a modified TSEB model further highlights the importance of high-resolution data in accurately capturing the spatial and temporal dynamics of energy fluxes influenced by environmental factors. This emphasizes the need for advanced data acquisition and processing techniques that can effectively represent the complexities of agricultural settings.
The limitations of traditional wireless communication technologies, such as limited range and network congestion, pose additional challenges for large-scale agricultural operations. Long-distance data transmission can be hindered by range limitations, while network congestion arising from numerous sensors transmitting concurrently can lead to delays and data loss, hindering real-time decision-making (Hameed et al., 2020). Addressing these challenges requires the exploration of advanced networking technologies that can optimize spectrum utilization, mitigate interference, and improve reliability and efficiency.
Cognitive Radio Networks (CRNs) and Dynamic Spectrum Access (DSA) offer promising solutions for optimizing wireless communication in agricultural settings. CRNs empower devices with the ability to intelligently sense and adapt to the surrounding radio environment, dynamically adjusting transmission parameters to avoid interference and improve communication efficiency (Righi et al., 2017; Shafi et al., 2018; Trigka & Dritsas, 2022). Research has explored the potential of CRNs in predicting Radio Frequency (RF) power to avoid noisy channels and optimize spectrum utilization (Iliya et al., 2014; Iliya et al., 2014). These studies demonstrate the effectiveness of combining optimization algorithms with artificial neural networks (ANNs) to enhance the accuracy and generalization of RF power prediction, enabling CRNs to make informed decisions about channel selection and avoid interference.
DSA complements CRN technology by dynamically allocating unused spectrum, further enhancing spectrum utilization and reducing congestion (Shi et al., 2023). The numerical model developed by Shi et al. (2023) showcases the potential of CRNs and DSA for optimizing wireless communication in challenging environments.
The integration of CRNs and DSA into the IoT network architecture requires careful consideration of spectrum sensing techniques, network topology, and data security. Research on cooperative spectrum sensing suggests that distributed approaches, where sensor nodes collaborate and share information, can significantly improve the accuracy and efficiency of spectrum sensing, particularly in dynamic environments (Trigka and Dritsas, 2022; Khalid & Yu, 2019). This collaborative approach enables a more comprehensive understanding of the radio environment and facilitates the identification of available frequency bands for data transmission.
The choice of network topology also impacts the performance and scalability of CRN-based irrigation systems. Mesh networks, where sensor nodes are interconnected and relay data for each other, offer enhanced resilience and coverage compared to star topologies where nodes communicate directly with a central gateway (Akyildiz & Vuran, 2010). However, mesh networks can be more complex to manage and may introduce additional routing overhead. The trade-off between network resilience and complexity needs to be carefully evaluated to select the most appropriate topology for a specific agricultural setting.
Data security and privacy are paramount concerns in IoT-based irrigation systems due to the sensitive nature of agricultural data (Gupta et al., 2020). Implementing secure communication protocols, authentication mechanisms, and encryption techniques is essential for protecting data integrity and ensuring system trustworthiness. Research on secure spectrum leasing and resource allocation algorithms for CR-WSN-based irrigation systems has demonstrated the potential of these technologies for enhancing security and efficiency (Hassan, 2023; Afghah et al., 2018).
In conclusion, the development of effective and reliable real-time irrigation management systems requires a comprehensive approach that addresses the challenges of data transmission in agricultural environments. The integration of robust and adaptive communication protocols, optimized network architectures, and advanced networking technologies like CRNs and DSA, along with a focus on data security and privacy, can contribute significantly to achieving the goal of autonomous and efficient irrigation scheduling.
4. AUTOMATED DATA PROCESSING IN THE CLOUD
4.1. Data Quality and Preprocessing
Data quality is paramount in automated irrigation systems as it directly influences the effectiveness of decision-making and water use efficiency. Issues like missing values, inconsistencies, and outliers arising from sensor malfunctions, environmental interference, or network problems (Lv et al., 2023) can significantly impact the performance of machine learning models used for irrigation scheduling and management.
Real-time data cleaning techniques are essential for addressing these challenges. Kalman filtering proves particularly effective in handling missing values and correcting erroneous readings by recursively estimating the system's state based on previous measurements and current sensor data, taking into account noise and uncertainty (Kim et al., 2020). Moving average techniques, by averaging consecutive data points, provide a more stable representation of the underlying trend, filtering out short-term fluctuations (Chhetri, 2023). For outlier detection, adaptive thresholding methods offer a dynamic approach, adjusting thresholds based on the statistical properties of the data to effectively identify anomalies and minimize false positives (Bah et al., 2021). These techniques are crucial in maintaining the integrity of real-time data streams and ensuring the accuracy of subsequent analyses.
Adaptive data preprocessing is essential for managing the diversity of data sources and formats commonly found in irrigation systems. Data normalization techniques, such as min-max scaling or z-score normalization, ensure that all features contribute equally to the analysis by transforming data values to a common scale (Pradal et al., 2016). This is crucial for preventing features with larger values from dominating the analysis and ensuring that all features are given equal consideration. Similarly, feature scaling methods, like standardization or normalization, optimize the range of feature values to improve the performance and convergence of machine learning models (Tortorici et al., 2024). By scaling features to a similar range, the influence of outliers is reduced, and the model's ability to learn from the data is enhanced.
Data fusion techniques play a critical role in integrating information from diverse sources, creating a more comprehensive and reliable dataset for irrigation management. Dempster-Shafer theory, a generalization of probability theory, allows for the expression of both uncertainty and the degree of conflict in evidence, making it suitable for fusing uncertain and conflicting data from heterogeneous sources (Sadiq and Rodriguez, 2004). This is particularly relevant in irrigation systems where data from different sensors may provide slightly different or even contradictory information due to sensor variations or environmental factors. Bayesian inference offers another powerful framework for combining information from multiple sources, updating the probability of a hypothesis as new evidence becomes available. By applying these techniques, data from soil moisture sensors, canopy temperature sensors, weather stations, and other sources can be integrated to provide a holistic understanding of crop water requirements and environmental conditions, leading to more informed and accurate irrigation decisions.
The impact of data quality extends beyond model accuracy to the robustness of machine learning models under varying conditions. Robust models should maintain consistent performance even when faced with data inconsistencies or unexpected situations. Techniques like data augmentation and domain adaptation can enhance model robustness by exposing the model to a wider range of data variations during training. Data augmentation involves generating additional training data by applying transformations or introducing noise to existing data, making the model more resilient to noise and variations in the real-world data. Domain adaptation techniques aim to adapt a model trained on one domain (e.g., a specific crop or geographic location) to perform well on another domain with different data characteristics. This is particularly relevant in irrigation management, where models may need to be applied to different crops, soil types, or climatic conditions.
The choice of data cleaning, preprocessing, and fusion techniques should be carefully considered based on the specific characteristics of the irrigation system and the available data. By selecting and implementing appropriate techniques, the accuracy, reliability, and robustness of machine learning models can be significantly improved, leading to more efficient and sustainable irrigation management practices.
4.2. Scalable and Autonomous Deployment using Containerization Strategies
The transition from data collection and transmission to efficient data processing requires a robust infrastructure capable of handling diverse workloads and data volumes. Containerization technologies, specifically Docker and Kubernetes, offer a promising solution for deploying and scaling data processing and machine learning modules within cloud environments like AWS, Azure, and GCP (Vargas-Rojas et al., 2024; Rosendo et al., 2022; Solayman & Qasha, 2023). Docker provides a standardized way to package applications and their dependencies into self-contained units known as containers, ensuring consistent and reproducible execution across different platforms (Rosendo et al., 2022). Kubernetes, acting as a container orchestrator, manages their deployment, scaling, and networking across a cluster of machines (Rosendo et al., 2022). This combination presents several advantages for automated irrigation management systems.
Firstly, containerization facilitates efficient resource utilization and scalability. By encapsulating applications and their dependencies, containers enable the isolation of resources and prevent conflicts between different modules (Vargas-Rojas et al., 2024; Solayman & Qasha, 2023). This isolation allows for the efficient allocation of resources, such as CPU, memory, and storage, to each container based on its specific needs. Kubernetes further enhances scalability by allowing for the automatic scaling of containers based on real-time demand, ensuring the system can adapt to varying workloads and data volumes, preventing bottlenecks, and ensuring responsiveness to changing conditions (Karamolegkos et al., 2023).
Secondly, containerization promotes portability and reproducibility. By packaging applications and their dependencies into a single unit, containers make it easy to move and deploy them across different cloud environments without the need for environment-specific configurations (Rosendo et al., 2022; Solayman & Qasha, 2023). This portability simplifies the development and deployment process, reducing the time and effort required to set up and manage the system. Additionally, containers ensure reproducibility by providing a consistent execution environment, regardless of the underlying infrastructure. This eliminates variability and ensures that the system will behave consistently across different deployments (Zhou et al., 2023).
Optimizing container orchestration and resource allocation is crucial to minimizing latency and maximizing throughput in real-time data processing pipelines. Techniques like auto-scaling and dynamic resource allocation play a critical role in this context (Hethcoat et al., 2024; Werner and Tai, 2023; Kumar et al., 2024). Auto-scaling automatically adjusts the number of container instances based on real-time demand, ensuring that sufficient resources are available to handle peak workloads while avoiding over-provisioning during periods of low demand (Hethcoat et al., 2024; Kumar et al., 2024). Dynamic resource allocation enables the fine-grained adjustment of resources allocated to each container based on its specific needs and the current workload (Werner and Tai, 2023). This ensures efficient resource allocation and provides each container with the necessary resources to perform its tasks effectively.
Performance monitoring tools, such as Kubernetes Metrics Server and Prometheus, are essential for gaining insights into the performance of containers and the overall system (Hethcoat et al., 2024; Kuity & Peddoju, 2023). These tools provide valuable data on key performance indicators, such as CPU and memory usage, network traffic, and application-specific metrics. By monitoring this data, administrators can identify bottlenecks, optimize resource allocation strategies, and continuously improve system performance (Hethcoat et al., 2024). This data-driven approach ensures that automated irrigation management systems can operate efficiently and reliably.
By integrating containerization technologies with optimization techniques and performance monitoring, automated irrigation management systems achieve the scalability, autonomy, and efficiency required for effective real-time data processing and decision-making. This approach facilitates a seamless and responsive system that can adapt to changing conditions and contribute to the overall goal of optimizing water resource management and increasing agricultural productivity.
4.3. Deploying ML Models for Data Processing
•	Architectures and frameworks for deploying machine learning models on cloud platforms for real-time data processing and inference in irrigation management systems, such as: TensorFlow Serving, Apache MXNet Model Server, ONNX Runtime
•	Techniques for optimizing machine learning model performance and resource utilization in cloud environments, such as: Model compression (e.g., pruning, quantization), Hardware acceleration (e.g., GPU, TPU), Distributed training (e.g., Horovod, BytePS)
•	Integration of deployed machine learning models with other components of the automated irrigation management pipeline, such as data preprocessing, decision-making, and control systems, using protocols like: MQTT, CoAP, RESTful APIs
4.4. Online Learning in the Cloud
•	Application of online learning techniques for continuously updating and improving machine learning models based on incoming real-time data, using algorithms such as: Stochastic gradient descent (SGD), Passive-aggressive algorithms, Online random forests
•	Architectures and frameworks for implementing online learning in cloud-based irrigation management systems, such as: Apache Spark Streaming, Apache Flink, AWS Kinesis, leveraging serverless computing and stream processing paradigms
•	Strategies for balancing exploration and exploitation in online learning to adapt to changing environmental conditions and optimize irrigation decision-making, using techniques such as: Multi-armed bandits, Bayesian optimization, Reinforcement learning (e.g., Q-learning, SARSA)


5. GENERATING AND APPLYING IRRIGATION INSIGHTS 
5.1. Real-Time Generation of Actionable Irrigation Insights
•	Advanced predictive models, such as deep learning (e.g., LSTM, CNN) and ensemble methods (e.g., Random Forests), for precise, site-specific irrigation recommendations
•	Integration of IoT sensor data (e.g., soil moisture probes, weather stations) and cloud-based data sources (e.g., weather forecasts, satellite imagery) using data fusion techniques (e.g., Kalman filtering) to enhance insight accuracy and resolution
•	Strategies for handling data heterogeneity, uncertainty, and quality issues in real-time insight generation, such as data preprocessing and outlier detection
•	Techniques for reducing computational complexity and latency, such as edge computing (e.g., fog computing), model compression (e.g., quantization), and hardware accelerators (e.g., GPUs)
5.2. Automated Application of Irrigation Insights
•	Architectures and protocols for seamless integration of ML-generated insights with IoT-enabled irrigation control systems, such as MQTT and CoAP for lightweight, real-time communication
•	Analysis of industry-leading products and services, such as smart irrigation controllers (e.g., Rachio) and cloud-based irrigation management platforms (e.g., CropX)
•	Strategies for ensuring reliability, security, and scalability of automated insight application, such as redundant communication channels and secure edge-to-cloud architectures
•	Case studies of successful implementations of closed-loop, autonomous irrigation systems in research and commercial settings, highlighting technologies used and benefits achieved

6. INTEGRATION, INTEROPERABILITY, AND STANDARDIZATION 
6.1. Interoperability and Standardization
•	Importance of interoperability and standardization in enabling seamless integration of automated irrigation components
•	Overview of existing and emerging standards for IoT devices, communication protocols, and data formats in precision agriculture (e.g., ISOBUS, agroXML, SensorML)
•	Role of standardization bodies and industry consortia in promoting interoperability (e.g., AgGateway, Open Ag Data Alliance, Agricultural Industry Electronics Foundation)
•	Challenges in adopting and implementing standards across diverse hardware and software platforms
•	Strategies for encouraging widespread adoption of standards and best practices for interoperability in automated irrigation systems
6.2. Integration with Existing Irrigation Infrastructure
•	Challenges and strategies for retrofitting legacy irrigation systems with IoT sensors, actuators, and communication devices
•	Hardware compatibility issues and solutions (e.g., adapters, modular designs)
•	Software and firmware updates to enable integration with automated decision-making systems
•	Data integration and normalization techniques for merging legacy and new data sources
•	Economic and practical considerations for transitioning from manual to automated irrigation management
•	Cost-benefit analysis of upgrading existing infrastructure vs. implementing new systems
•	Phased implementation approaches to minimize disruption and optimize resource allocation
•	Training and support requirements for farmers and irrigation managers adopting automated systems
•	Case studies and real-world examples of successful integration of automated irrigation with existing infrastructure
6.3. Integration with Other Precision Agriculture Technologies
•	Synergies between automated irrigation and complementary technologies
•	Remote sensing (satellite, UAV, and ground-based) for crop monitoring and evapotranspiration estimation
•	Soil moisture sensors and weather stations for real-time, localized data collection
•	Variable rate application systems for precise irrigation delivery based on crop requirements
•	Yield mapping and analytics for assessing the impact of automated irrigation on crop productivity
•	Architectures and frameworks for integrating diverse data sources and technologies into a unified precision agriculture ecosystem
•	Edge computing and fog computing paradigms for real-time data processing and decision-making
•	Cloud-based platforms for data storage, analysis, and visualization
•	API-driven approaches for modular integration of third-party services and applications
•	Challenges and solutions for ensuring data quality, consistency, and security across integrated precision agriculture systems
•	Data cleaning, preprocessing, and harmonization techniques
•	Blockchain and distributed ledger technologies for secure, tamper-proof data sharing and traceability
•	Access control and authentication mechanisms for protecting sensitive data and resources
•	Future trends and research directions in the integration of automated irrigation with advanced precision agriculture technologies (e.g., AI-driven crop modeling, robotics, and autonomous vehicles)
6.4. Cybersecurity Considerations for Integrated Automated Irrigation Systems
•	Unique security risks and vulnerabilities associated with IoT-based automated irrigation systems
•	Potential for unauthorized access, data tampering, and system manipulation
•	Implications of security breaches for crop health, water resource management, and farm productivity
•	Best practices and strategies for securing automated irrigation systems
•	Secure device provisioning and authentication (e.g., hardware security modules, certificates)
•	Encryption and secure communication protocols (e.g., TLS, DTLS)
•	Firmware and software updates to address emerging security threats
•	Network segmentation and access control to limit the impact of breaches
•	Role of cybersecurity standards and frameworks in guiding the development and deployment of secure automated irrigation systems (e.g., NIST CSF, IEC 62443)
•	Importance of user awareness, training, and incident response planning in maintaining the security of integrated automated irrigation systems

7. MONITORING AND ENSURING SYSTEM RELIABILITY
7.1. Resilience and Fault Tolerance in Automated Irrigation Systems
•	Strategies for ensuring robustness and reliability in the face of failures, disruptions, or unexpected events
•	Redundancy: Implementing redundant components, such as duplicate sensors (e.g., soil moisture sensors, weather stations), controllers (e.g., PLCs, microcontrollers), and communication channels (e.g., cellular, satellite, LoRaWAN) to maintain system functionality during component failures
•	Failover mechanisms: Designing seamless failover mechanisms that automatically switch to backup components or systems in case of primary system failure, such as hot-standby controllers or multi-path communication protocols (e.g., mesh networks, software-defined networking)
•	Self-healing capabilities: Incorporating AI-driven self-healing mechanisms that can detect, diagnose, and recover from faults without human intervention, using techniques like reinforcement learning, Bayesian networks, or self-organizing maps
•	The role of distributed architectures and edge computing in enhancing system resilience
•	Decentralizing critical functions and data processing to minimize the impact of single points of failure, using fog computing or multi-agent systems
•	Leveraging edge computing to enable localized decision-making and control, reducing dependence on cloud connectivity and improving response times, using technologies like Raspberry Pi, NVIDIA Jetson, or Intel NUC
•	Anomaly detection and predictive maintenance using AI techniques
•	Employing unsupervised learning algorithms (e.g., autoencoders, clustering) to detect anomalies in sensor data, system performance, and water usage patterns
•	Developing predictive maintenance models using techniques like long short-term memory (LSTM) networks, convolutional neural networks (CNNs), or gradient boosting machines (GBMs) to anticipate and prevent potential system failures based on historical data and real-time monitoring
7.2. Advanced Monitoring Techniques for Automated Irrigation Systems
•	Remote monitoring using IoT-enabled sensors and computer vision
•	Deploying a heterogeneous network of IoT sensors to collect real-time data on soil moisture (e.g., capacitive, tensiometric), temperature (e.g., thermocouples, thermistors), humidity (e.g., capacitive, resistive), and plant health (e.g., sap flow, leaf wetness)
•	Integrating high-resolution cameras (e.g., multispectral, hyperspectral) and computer vision algorithms for visual monitoring of crop growth, disease detection (e.g., using deep learning-based object detection and segmentation), and irrigation system performance (e.g., leak detection, sprinkler uniformity)
•	Transmitting sensor and camera data to cloud-based platforms (e.g., AWS IoT, Google Cloud IoT, Microsoft Azure IoT) for remote access and analysis using protocols like MQTT, CoAP, or AMQP
•	Innovative approaches for real-time system health assessment
•	Developing novel algorithms and metrics for evaluating the health and performance of automated irrigation systems, such as entropy-based measures, network resilience indices, or multi-criteria decision analysis (MCDA) frameworks
•	Combining data from multiple sources (e.g., sensors, weather forecasts, satellite imagery) using data fusion techniques (e.g., Kalman filters, Dempster-Shafer theory) to create a comprehensive view of system health
•	Employing advanced data visualization techniques (e.g., interactive dashboards, augmented reality) to present system health information in an intuitive and actionable format
7.3. Closed-Loop Control and Feedback Mechanisms
•	Exploring the concept of closed-loop control in autonomous irrigation systems
•	Implementing feedback loops that continuously monitor system performance and adjust irrigation schedules based on real-time data, using control techniques like proportional-integral-derivative (PID), model predictive control (MPC), or fuzzy logic control (FLC)
•	Integrating machine learning algorithms (e.g., reinforcement learning, genetic algorithms) to optimize closed-loop control strategies over time, adapting to changing environmental conditions and crop requirements
•	Designing effective feedback mechanisms for user interaction and system optimization
•	Providing user-friendly interfaces (e.g., mobile apps, web dashboards) for farmers to input preferences, constraints, and expert knowledge into the automated irrigation system, using techniques like participatory design or user-centered design
•	Incorporating user feedback and domain expertise to refine irrigation strategies and improve system performance
8. CASE STUDIES AND REAL-WORLD IMPLEMENTATIONS OF FULLY AUTONOMOUS IRRIGATION SYSTEMS
8.1. Fully Autonomous Irrigation Systems in Diverse Agricultural Settings
•	Row Crops: maize, wheat, soybean with real-time soil moisture monitoring and weather-based irrigation scheduling for fully automated precision irrigation
•	Orchards: citrus, apple, almond with plant health monitoring and precision water application for fully autonomous orchard management
•	Greenhouses: tomato, lettuce, herbs with automated drip irrigation and climate control integration for fully automated greenhouse operations
•	Urban Farming: rooftop gardens, vertical farms with IoT-enabled hydroponic systems and remote management for fully autonomous urban crop production
8.2. Integration of Advanced System Components for End-to-End Automation
•	Wireless sensor networks: soil moisture probes, weather stations, plant health monitoring cameras with low-power, long-range communication for fully automated data acquisition
•	Secure data transmission: LoRaWAN, NB-IoT, 5G, satellite communication for reliable, real-time data transfer from field to cloud in fully autonomous irrigation systems
•	Intelligent data processing: edge computing for local data filtering, cloud platforms for scalable storage and analysis, machine learning algorithms for predictive insights in fully automated irrigation management
•	Autonomous decision-making: advanced irrigation scheduling algorithms, precise valve control, closed-loop feedback systems for optimal water management in fully autonomous irrigation systems
8.3. Quantitative Performance Evaluation of Fully Automated Irrigation Systems
•	Water use efficiency: percent reduction in water consumption compared to conventional methods, improved water productivity (yield per unit of water) achieved through fully autonomous irrigation
•	Crop yield and quality improvements: percent increase in yield, enhanced crop uniformity, improved nutritional content attributed to fully automated precision irrigation
•	Labor and energy savings: quantified reduction in labor hours for irrigation management, decreased energy consumption for pumping due to optimized scheduling in fully autonomous systems
•	Economic viability: detailed return on investment analysis, payback period calculations, comprehensive cost-benefit analysis for fully autonomous irrigation management systems
8.4. Lessons Learned and Challenges Encountered in Deploying Autonomous Irrigation Systems
•	Technical challenges and solutions: ensuring reliable data transmission in remote locations, addressing interoperability issues between diverse system components, optimizing power consumption for extended battery life, adapting algorithms to local soil and weather conditions in fully autonomous irrigation systems
•	Operational and logistical hurdles: streamlining installation and maintenance procedures, providing effective user training, seamlessly integrating with existing farm management practices and legacy systems for fully automated irrigation management
•	Regulatory and socio-economic considerations: navigating complex water use regulations, addressing data privacy and security concerns, ensuring equitable access and affordability for smallholder farmers adopting fully autonomous irrigation technologies
8.5. Best Practices and Recommendations for Successful Implementation
•	Designing scalable, modular, and adaptable autonomous irrigation systems to accommodate future growth and changing requirements for fully automated water management
•	Prioritizing user-centered design principles and actively engaging stakeholders throughout the development and deployment process of fully autonomous irrigation solutions
•	Adopting open standards and communication protocols to enable seamless integration of system components and interoperability with third-party platforms in fully automated irrigation setups
•	Implementing robust data validation, filtering, and quality control mechanisms to ensure data integrity and reliability for decision-making in fully autonomous irrigation systems
•	Establishing clear data governance policies and security frameworks to protect sensitive information and maintain user trust in fully automated irrigation management
•	Developing intuitive user interfaces and decision support tools to facilitate easy adoption and effective use of fully autonomous irrigation systems
•	Collaborating with local extension services, agribusinesses, and technology providers for knowledge transfer, technical support, and continuous improvement of fully automated irrigation solutions
8.6. Synthesis of Case Studies and Implications for Autonomous Irrigation Adoption
•	Cross-case analysis of key performance indicators and critical success factors for fully autonomous irrigation scheduling systems in various contexts
•	Identification of common themes, challenges, and innovative solutions across diverse implementations of end-to-end fully automated irrigation management
•	Assessment of the potential for replicability and scaling of successful fully autonomous irrigation projects in different regions and farming systems
•	Implications for future research priorities, technology development roadmaps, and policy interventions to support widespread adoption of fully autonomous irrigation technologies

CONCLUSION/FUTURE DIRECTIONS AND UNANSWERED QUESTIONS
•	Summarize the key insights gained from the question-driven review, emphasizing how each section contributes to the overarching goal of achieving real-time, end-to-end automation in irrigation management
•	Based on the questions addressed, propose new research directions and unanswered questions
•	Identify key research gaps and propose concrete research questions and hypotheses for advancing the field of real-time, automated irrigation management
•	Highlight the need for collaborative research efforts across disciplines, such as computer science, agricultural engineering, and environmental science, to address the complex challenges of automated irrigation systems
•	Emphasize the need for further innovation and exploration in real-time, automated irrigation systems



</previous_sections>

</documents>
<instructions>


Use the information provided in the <documents> tags to write the next subsection of the research paper, following these steps:
1. Review the overall intention of the research paper, specified in the <review_intention> tag. Ensure the subsection you write aligns with and contributes to this overall goal.
2. Consider the specific intention for this subsection of the paper, stated in the <section_intention> tag. The content you write should fulfill this purpose. 
3. Use the title provided in the <subsection_title> tag as the heading for the subsection. 
4. Address each of the points specified in the </subsection_point_Point *> tags:
   a) Make a clear case for each point using the text provided in the "point" field.
   b) Support each point with evidence from the research papers listed in the corresponding "papers to support point" field.
   c) When citing a paper to support a point, include inline citations with the author name(s) and year, e.g. (Smith et al., 2020; Johnson and Lee, 2019; Brown, 2018). Cite all papers that strengthen or relate to the point being made.
   d) While making a point and citing the supporting papers, provide a brief explanation in your own words of how the cited papers support the point.
5. Ensure that both of the points from the <subsection_point> tags are fully addressed and supported by citations. Do not skip or combine any points.
6. After addressing the specified points, wrap up the subsection with a concluding sentence or two that ties the points together and relates them back to the <section_intention>.
7. Review the <Previous_sections> of the paper, and ensure that the new subsection you have written fits logically and coherently with the existing content. Add transition sentences as needed to improve the flow.
8. Proofread the subsection to ensure it is clear, concise, and free of grammatical and spelling errors. Maintain a formal academic tone and style consistent with the rest of the research paper.
9. Format the subsection using Markdown, including the subsection heading (using ## or the equivalent for the document), inline citations, and any other formatting needed for clarity and readability.
10. If any information is missing or unclear in the provided tags, simply do your best to write the subsection based on the available information. Do not add any information or make any points not supported by the provided content. Prioritize fully addressing the required points over hitting a specific word count.

The output should be a complete, well-organized, and properly cited subsection ready to be added to the research paper.

Begin your answer with a brief recap of the instructions stating what you will to optimize the quality of the answer. Clearly and briefly state the subsection you'll be working on and the points you'll be addressing. Then proceed to write the subsection following the instructions provided. 

Critical: 
- Do not include a conclusion or summary as the entry is in the middle of the document. Focus on addressing the points and supporting them with evidence from the provided papers. Ensure that the subsection is well-structured, coherent, and effectively contributes to the overall research paper.
- The subsection we are focusing on is: 4.4. Online Learning in the Cloud
- No need for sub-sub-sections. just provide paragraphs addressing each point. They should transition fluidly and narurally into each other.
- Ensure that the content is supported by the provided papers and that the citations are correctly formatted and placed within the text.
- Do not repeat content from the previous sections. Ensure that the information provided is new and relevant to the subsection being written.



</instructions>

