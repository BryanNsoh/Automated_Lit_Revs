import sqlite3
import csv
import os
import glob


def extract_data_to_csv(db_path, csv_path):
    # Connect to the SQLite database
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # SQL query to extract required information, filtering for relevance scores above 0.2
    # and replacing the full text with an empty string before storing in the CSV
    query = """
    SELECT n1.title AS section, n2.title AS subsection, n3.text AS point, n4.query AS query,
           fqr.doi AS doi, fqr.title AS query_title, '' AS full_text, fqr.bibtex, fqr.pdf_location,
           fqr.journal, fqr.citation_count, fqr.relevance_score, 
           (fqr.citation_count * fqr.relevance_score) AS rank,
           ('https://doi.org/' || fqr.doi) AS adoi_url
    FROM nodes n1
    LEFT JOIN nodes n2 ON n1.node_id = n2.parent_id AND n2.node_type = 'section'
    LEFT JOIN nodes n3 ON n2.node_id = n3.parent_id AND n3.node_type = 'point'
    LEFT JOIN nodes n4 ON n3.node_id = n4.parent_id AND n4.node_type = 'query'
    LEFT JOIN filtered_query_results fqr ON n4.node_id = fqr.query_id
    WHERE n1.node_type = 'document' AND fqr.relevance_score > 0.2;
    """

    cursor.execute(query)
    rows = cursor.fetchall()

    # Write the extracted data to a CSV file
    with open(csv_path, "w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow(
            [
                "SECTION",
                "SUBSECTION",
                "POINT",
                "QUERY",
                "DOI",
                "QUERY_TITLE",
                "FULL_TEXT",
                "BIBTEX",
                "PDF_LOCATION",
                "JOURNAL",
                "CITATION_COUNT",
                "RELEVANCE_SCORE",
                "RANK",
                "ADOI_URL",
            ]
        )
        for row in rows:
            writer.writerow(row)

    # Close the database connection
    conn.close()


def main():
    db_directory = "searches"

    # Check if 'searches' folder exists
    if not os.path.exists(db_directory):
        print("The 'searches' folder does not exist.")
        return

    # Iterate through each 'sec*_results' subfolder
    for sec_folder in glob.glob(os.path.join(db_directory, "sec*_results")):
        # Iterate through each 'outline_*.db' file in the subfolder
        for db_path in glob.glob(os.path.join(sec_folder, "outline_*.db")):
            base_name = os.path.splitext(os.path.basename(db_path))[0]
            # Construct CSV path in the same directory as the database file
            csv_path = os.path.join(os.path.dirname(db_path), f"{base_name}.csv")

            # Extract data from the database and write to CSV
            extract_data_to_csv(db_path, csv_path)
            print(f"Data extracted to CSV for database: {db_path}")


if __name__ == "__main__":
    main()
